b'package xyz.elidom.control.agent.rest;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URL;\r\nimport java.net.URLEncoder;\r\nimport java.nio.charset.Charset;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport javax.servlet.ServletOutputStream;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.apache.commons.io.input.ReversedLinesFileReader;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.core.env.Environment;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\nimport xyz.elidom.control.agent.util.StreamPrinter;\r\n\r\n@RestController\r\npublic class AgentController {\r\n\r\n\tprotected Logger logger = LoggerFactory.getLogger(AgentController.class);\r\n\r\n\tprivate static final String FILE_SEPARATOR = "/";\r\n\tprivate static final String LOG_FILENAME = "applicatoin.";\r\n\tprivate static final String LOG_FILENAME_2 = "application.";\r\n\tprivate static final String LOG_FILE_EXT = ".log";\r\n\r\n\t@Autowired\r\n\tEnvironment env;\r\n\r\n\t/**\r\n\t * Application Start\r\n\t * \r\n\t * @param appId\r\n\t * @return execute message\r\n\t */\r\n\t@RequestMapping(value = "/apps/{app_id}/start", method = RequestMethod.POST)\r\n\tpublic String startBoot(@PathVariable("app_id") String appId) {\r\n\t\tHashMap<String, String> pMap = this.checkProperties(appId, "start");\r\n\t\tif (pMap.get("RESULT").equals("FAIL"))\r\n\t\t\treturn pMap.get("MSG");\r\n\r\n\t\ttry {\r\n\t\t\tthis.commandStart(pMap.get("PATH"));\r\n\t\t} catch (Exception e) {\r\n\t\t\treturn "Error : \\n\\n" + e.getMessage();\r\n\t\t}\r\n\r\n\t\treturn "Enterd Startup Command SUCCESS";\r\n\t}\r\n\r\n\t/**\r\n\t * Application Restart\r\n\t * \r\n\t * @param appId\r\n\t * @return execute message\r\n\t */\r\n\t@RequestMapping(value = "/apps/{app_id}/restart", method = RequestMethod.POST)\r\n\tpublic String retartBoot(@PathVariable("app_id") String appId) {\r\n\t\ttry {\r\n\t\t\tthis.stopBoot(appId);\r\n\t\t} catch (Exception e) {\r\n\t\t\tthis.logger.error("Failed to shutdown application : " + e.getMessage());\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tThread.sleep(10000);\r\n\t\t} catch (Exception e) {\r\n\t\t}\r\n\r\n\t\treturn this.startBoot(appId);\r\n\t}\r\n\r\n\t/**\r\n\t * Application Stop\r\n\t * \r\n\t * @param appId\r\n\t * @return execute message\r\n\t */\r\n\t@RequestMapping(value = "/apps/{app_id}/stop", method = RequestMethod.POST)\r\n\tpublic String stopBoot(@PathVariable("app_id") String appId) {\r\n\t\tRestTemplate rest = new RestTemplate();\r\n\t\tString port = this.env.getProperty(appId + ".port");\r\n\t\tString url = "http://localhost:" + port + "/shutdown";\r\n\t\tResponseEntity<String> response = rest.postForEntity(url, "", String.class);\r\n\t\treturn response.getBody();\r\n\t}\r\n\r\n\t/**\r\n\t * Application Deploy\r\n\t * \r\n\t * @param appId\r\n\t * @return execute message\r\n\t */\r\n\t@RequestMapping(value = "/apps/{app_id}/udpate", method = RequestMethod.POST)\r\n\tpublic String deploy(@PathVariable("app_id") String appId) {\r\n\t\tthis.stopBoot(appId);\r\n\r\n\t\ttry {\r\n\t\t\tThread.sleep(10000);\r\n\t\t} catch (Exception e) {\r\n\t\t}\r\n\r\n\t\tHashMap<String, String> pMap = this.checkProperties(appId, "update");\r\n\t\tif (pMap.get("RESULT").equals("FAIL"))\r\n\t\t\treturn pMap.get("MSG");\r\n\r\n\t\ttry {\r\n\t\t\tthis.commandStart(pMap.get("PATH"));\r\n\t\t} catch (Exception e) {\r\n\t\t\treturn "Failed to update application execution file : " + e.getMessage();\r\n\t\t}\r\n\r\n\t\tthis.startBoot(appId);\r\n\t\treturn "OK";\r\n\t}\r\n\r\n\t/**\r\n\t * Log File Path\xeb\xa5\xbc \xeb\xa6\xac\xed\x84\xb4\r\n\t * \r\n\t * @param appId\r\n\t * @return\r\n\t */\r\n\tprivate String getLogFilePath(String appId, boolean first) {\r\n\t\tHashMap<String, String> pMap = this.checkProperties(appId, "log");\r\n\t\t\r\n\t\tif (pMap.get("RESULT").equals("FAIL")) {\r\n\t\t\tthrow new RuntimeException(pMap.get("MSG"));\r\n\t\t}\r\n\t\t\r\n\t\tString path = pMap.get("PATH");\r\n\t\tDate today = null; \r\n\t\t\r\n\t\t// \xec\xb2\xab\xeb\xb2\x88\xec\xa7\xb8 \xec\x98\xa4\xeb\x8a\x98 \xeb\x82\xa0\xec\xa7\x9c \xeb\x91\x90\xeb\xb2\x88\xec\xa7\xb8 \xec\x96\xb4\xec\xa0\x9c \xeb\x82\xa0\xec\xa7\x9c\r\n\t\tif(first) {\r\n\t\t\ttoday = new Date();\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tCalendar c = Calendar.getInstance(); \r\n\t\t\tc.setTime(new Date()); \r\n\t\t\tc.add(Calendar.DATE, -1);\r\n\t\t\ttoday = c.getTime();\r\n\t\t}\r\n\t\t\r\n\t\tSimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");\r\n\t\tStringBuffer logPath = new StringBuffer();\r\n\t\tlogPath.append(path).append(path.endsWith(FILE_SEPARATOR) ? "" : FILE_SEPARATOR).append(LOG_FILENAME).append(sdf.format(today)).append(LOG_FILE_EXT);\r\n\r\n\t\tFile file = new File(logPath.toString());\r\n\t\tif (!file.exists()) {\r\n\t\t\tlogPath = new StringBuffer();\r\n\t\t\tlogPath.append(path).append(path.endsWith(FILE_SEPARATOR) ? "" : FILE_SEPARATOR).append(LOG_FILENAME_2).append(sdf.format(today)).append(LOG_FILE_EXT);\r\n\t\t\tfile = new File(logPath.toString());\r\n\r\n\t\t\tif (!file.exists()) {\r\n\t\t\t\tif(first) { \r\n\t\t\t\t\treturn this.getLogFilePath(appId, false);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new RuntimeException("Log File (" + logPath.toString() + ") Not Found!");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn logPath.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * \xeb\xa1\x9c\xea\xb7\xb8 \xed\x8c\x8c\xec\x9d\xbc\xec\x9d\x84 \xec\x9d\xbd\xec\x96\xb4\xec\x84\x9c \xeb\x82\xb4\xec\x9a\xa9\xec\x9d\x84 \xeb\xa6\xac\xed\x84\xb4\r\n\t * \r\n\t * @param appId\r\n\t * @param lines\r\n\t * @return \xec\x98\xa4\xeb\x8a\x98\xec\x9d\x98 \xeb\xa1\x9c\xea\xb7\xb8\xec\x9d\x98 \xeb\x82\xb4\xec\x9a\xa9\xec\x9d\x84 \xeb\xa6\xac\xed\x84\xb4 \r\n\t */\r\n\t@RequestMapping(value = "/apps/{app_id}/log", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\r\n\tpublic Map<String, String> readLog(\r\n\t\t\t@PathVariable("app_id") String appId,\r\n\t\t\t@RequestParam(name = "lines", required = false) Integer lines) {\r\n\t\t\r\n\t\tString logPath = this.getLogFilePath(appId, true);\r\n\t\tString content = (lines == null || lines == 0) ? \r\n\t\t\t\t\t\t this.readAllLines(logPath) : \r\n\t\t\t\t\t\t this.readLastLines(new File(logPath), lines);\r\n\r\n\t\tMap<String, String> result = new HashMap<String, String>();\r\n\t\tresult.put("id", "1");\r\n\t\tresult.put("log", content);\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * \xeb\xa1\x9c\xea\xb7\xb8 \xed\x8c\x8c\xec\x9d\xbc\xec\x9d\x84 \xeb\x8b\xa4\xec\x9a\xb4\xeb\xa1\x9c\xeb\x93\x9c \r\n\t * \r\n\t * @param appId\r\n\t * @return \xec\x98\xa4\xeb\x8a\x98\xec\x9d\x98 \xeb\xa1\x9c\xea\xb7\xb8\xec\x9d\x98 \xeb\x82\xb4\xec\x9a\xa9\xec\x9d\x84 \xeb\xa6\xac\xed\x84\xb4 \r\n\t */\r\n\t@RequestMapping(value = "/apps/{app_id}/download_log", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\r\n\tpublic boolean downloadLog(HttpServletRequest req, HttpServletResponse res, @PathVariable("app_id") String appId) {\r\n\t\tString logPath = this.getLogFilePath(appId, true);\r\n\t\tFile file = new File(logPath);\r\n\t\t\r\n\t\tres.setCharacterEncoding("UTF-8");\r\n\t\tres.setContentType("text/plain;charset=UTF-8");\r\n\t\tres.addHeader("Content-Type", "application/octet-stream");\r\n\t\tres.addHeader("Content-Transfer-Encoding", "binary;");\r\n\t\tres.addHeader("Content-Length", Long.toString(file.length()));\r\n\t\tres.setHeader("Pragma", "cache");\r\n\t\tres.setHeader("Cache-Control", "public");\r\n\t\t\r\n\t\tServletOutputStream outStream = null;\r\n\t\tByteArrayInputStream inStream = null;\r\n\t\tbyte[] buffer = new byte[4096];\r\n\t\t\r\n\t\ttry {\r\n\t\t\tres.setHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode(file.getName(), "UTF-8"));\r\n\t\t\toutStream = res.getOutputStream();\r\n\t\t\tinStream = new ByteArrayInputStream(FileUtils.readFileToByteArray(file));\t\t\t\r\n\t\t\tint byteCount = 0;\r\n\t\t\t\r\n\t\t\tdo {\r\n\t\t\t\tbyteCount = inStream.read(buffer);\r\n\t\t\t\tif(byteCount == -1) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\toutStream.write(buffer, 0, byteCount);\r\n\t\t\t\toutStream.flush();\r\n\t\t\t} while(true);\r\n\r\n\t\t} catch (Exception e) {\r\n\t\t\tthrow new RuntimeException("Failed to File Download!", e);\r\n\t\t\t\r\n\t\t} finally {\r\n\t\t\ttry {\r\n\t\t\t\tinStream.close();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\toutStream.close();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * \xed\x8c\x8c\xec\x9d\xbc\xec\x9d\x98 \xeb\xaa\xa8\xeb\x93\xa0 \xeb\x9d\xbc\xec\x9d\xb8 \xec\x9d\xbd\xec\x96\xb4 \xeb\xa6\xac\xed\x84\xb4 \r\n\t * \r\n\t * @param logPath\r\n\t * @return\r\n\t */\r\n\tprivate String readAllLines(String logPath) {\r\n\t\tStringBuffer content = new StringBuffer();\r\n\t\tFileReader fReader = null;\r\n\t\tBufferedReader bReader = null;\r\n\r\n\t\ttry {\r\n\t\t\tfReader = new FileReader(logPath);\r\n\t\t\tbReader = new BufferedReader(fReader);\r\n\t\t\tString temp = null;\r\n\t\t\t\r\n\t\t\twhile((temp = bReader.readLine()) != null) {\r\n\t\t\t    content.append(temp).append("\\n");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn content.toString();\r\n\t\t\t\r\n\t\t} catch(FileNotFoundException e) {\r\n\t\t\tthrow new RuntimeException("Log file not found!", e);\r\n\t\t\t\r\n\t\t} catch (Exception e) {\r\n\t\t\tthrow new RuntimeException("Log file not found!", e);\r\n\t\t\t\r\n\t\t} finally {\r\n\t\t\tif(bReader != null) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tbReader.close();\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(fReader != null) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tfReader.close();\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * \xeb\xa7\x88\xec\xa7\x80\xeb\xa7\x89 lines \xeb\x9d\xbc\xec\x9d\xb8\xec\x9d\x84 \xec\x9d\xbd\xec\x96\xb4 \xeb\xa6\xac\xed\x84\xb4 \r\n\t * \r\n\t * @param filePath\r\n\t * @param lines\r\n\t * @return\r\n\t */\r\n\tprivate String readLastLines(File file, int lines) {\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tReversedLinesFileReader rlfr = null;\r\n\t\t\r\n\t\ttry {\r\n\t\t\trlfr = new ReversedLinesFileReader(file, Charset.forName("UTF-8"));\r\n\t\t\tString temp = null;\r\n\t\t\tint counter = 0;\r\n\r\n\t\t\twhile(counter < lines) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\ttemp = rlfr.readLine();\r\n\t\t\t\t} catch (NullPointerException npe) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(temp != null) {\r\n\t\t\t\t\tbuilder.insert(0, temp + "\\n");\r\n\t\t\t\t\tcounter++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\tthrow new RuntimeException("Failed to read log file!", e);\r\n\t\t\t\r\n\t\t} finally {\r\n\t\t\ttry {\r\n\t\t\t\trlfr.close();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn builder.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * ping & pong\r\n\t */\r\n\t@RequestMapping(value = "/ping", method = RequestMethod.GET)\r\n\tpublic String ping() {\r\n\t\treturn "pong";\r\n\t}\r\n\r\n\t@SuppressWarnings("unchecked")\r\n\t@RequestMapping(value = "/apps/{app_id}/info", method = RequestMethod.GET)\r\n\tpublic Map<String, Object> getOneDomainInfo(@PathVariable("app_id") String appId) {\r\n\t\tMap<String, Object> appInfo = (Map<String, Object>) this.getAppInfo(appId);\r\n\r\n\t\tif (appInfo.get("RESULT").equals("FAIL")) {\r\n\t\t\treturn appInfo;\r\n\t\t}\r\n\r\n\t\treturn appInfo;\r\n\t}\r\n\r\n\t@SuppressWarnings({ "rawtypes", "unchecked" })\r\n\t@RequestMapping(value = "/apps/infos", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\r\n\tpublic Map<String, Object> getAppInfos() {\r\n\t\tString[] ids = this.getPropertiesByKey(this.env, "apps.id");\r\n\t\tMap<String, Object> result = new HashMap<String, Object>();\r\n\r\n\t\tif (ids == null || ids.length == 0) {\r\n\t\t\tresult.put("RESULT", "FAIL");\r\n\t\t\tresult.put("MSG", "Application Id Not Found !");\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tList apps = new ArrayList();\r\n\r\n\t\tfor (int i = 0; i < ids.length; i++) {\r\n\t\t\tMap<String, Object> itemObj = (Map<String, Object>) this.getAppInfo(ids[i]);\r\n\t\t\tif (itemObj.get("RESULT").equals("FAIL")) {\r\n\t\t\t\treturn itemObj;\r\n\t\t\t}\r\n\r\n\t\t\tapps.add(itemObj.get("RES_JSON"));\r\n\t\t}\r\n\r\n\t\tresult.put("items", apps);\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprivate Object getAppInfo(String appId) {\r\n\t\tMap<String, String> pMap = this.checkProperties(appId, "info");\r\n\t\tif (pMap.get("RESULT").equals("FAIL")) {\r\n\t\t\treturn pMap;\r\n\t\t}\r\n\r\n\t\tString url = "http://localhost:" + pMap.get("PORT") + "/info";\r\n\t\tBufferedReader brIn = null;\r\n\t\tInputStreamReader isr = null;\r\n\t\tStringBuffer resStr = null;\r\n\r\n\t\ttry {\r\n\t\t\tURL obj = new URL(url);\r\n\t\t\tHttpURLConnection con = (HttpURLConnection) obj.openConnection();\r\n\t\t\tint responseCode = con.getResponseCode();\r\n\r\n\t\t\tif (responseCode == 401) {\r\n\t\t\t\tpMap.put("RESULT", "FAIL");\r\n\t\t\t\tpMap.put("MSG", "Unauthorized Request !");\r\n\t\t\t\treturn pMap;\r\n\t\t\t}\r\n\r\n\t\t\tisr = new InputStreamReader(con.getInputStream());\r\n\t\t\tbrIn = new BufferedReader(isr);\r\n\r\n\t\t\tString inputLine;\r\n\t\t\tresStr = new StringBuffer();\r\n\r\n\t\t\twhile ((inputLine = brIn.readLine()) != null) {\r\n\t\t\t\tresStr.append(inputLine);\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\tpMap.put("RESULT", "FAIL");\r\n\t\t\tpMap.put("MSG", "Error : \\n\\n" + e.getMessage());\r\n\t\t\treturn pMap;\r\n\r\n\t\t} finally {\r\n\t\t\tif (brIn != null) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tbrIn.close();\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (isr != null) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tisr.close();\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpMap.put("RES_JSON", resStr.toString());\r\n\t\treturn pMap;\r\n\t}\r\n\r\n\t/**\r\n\t * Command \xec\x8b\xa4\xed\x96\x89\r\n\t * \r\n\t * @param path\r\n\t * @throws Exception\r\n\t */\r\n\tprivate void commandStart(String path) throws Exception {\r\n\t\tProcessBuilder pBuilder = new ProcessBuilder();\r\n\t\tpBuilder.command(path);\r\n\t\tProcess process = pBuilder.start();\r\n\t\tStreamPrinter.printStream(process);\r\n\r\n\t\twhile (process.isAlive()) {\r\n\t\t\tThread.sleep(100);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * appId\xeb\xb3\x84 actionCode\xec\x97\x90 \xeb\x8c\x80\xec\x9d\x91\xed\x95\x98\xeb\x8a\x94 \xed\x94\x84\xeb\xa1\x9c\xed\x8d\xbc\xed\x8b\xb0\xeb\xa5\xbc \xec\xb0\xbe\xec\x95\x84 \xeb\xa6\xac\xed\x84\xb4\r\n\t * \r\n\t * @param appId\r\n\t * @param actionCode\r\n\t * @return HashMap RESULT : \xec\x84\xb1\xea\xb3\xb5 \xed\x98\xb9\xec\x9d\x80 \xec\x8b\xa4\xed\x8c\xa8 MSG : \xec\x8b\xa4\xed\x8c\xa8\xec\x8b\x9c \xec\x97\x90\xeb\x9f\xac \xeb\xa9\x94\xec\x8b\x9c\xec\xa7\x80 PATH : \xec\x95\xa1\xec\x85\x98 \xec\xbd\x94\xeb\x93\x9c\xeb\xb3\x84 \xea\xb0\x92\r\n\t */\r\n\tprivate HashMap<String, String> checkProperties(String appId, String actionCode) {\r\n\t\tHashMap<String, String> retMap = new HashMap<String, String>();\r\n\t\tretMap.put("RESULT", "SUCCESS");\r\n\t\tString[] ids = this.getPropertiesByKey(this.env, "apps.id");\r\n\r\n\t\tif (ids == null) {\r\n\t\t\tretMap.put("RESULT", "FAIL");\r\n\t\t\tretMap.put("MSG", this.getReturnMsg(2));\r\n\t\t\treturn retMap;\r\n\t\t}\r\n\r\n\t\tboolean isExists = false;\r\n\t\tfor (String id : ids) {\r\n\t\t\tif (id.equals(appId)) {\r\n\t\t\t\tisExists = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isExists == false) {\r\n\t\t\tretMap.put("RESULT", "FAIL");\r\n\t\t\tretMap.put("MSG", this.getReturnMsg(3));\r\n\t\t\treturn retMap;\r\n\t\t}\r\n\r\n\t\tif (actionCode.equals("info")) {\r\n\t\t\tString port = this.env.getProperty(appId + ".port");\r\n\r\n\t\t\tif (port == null || port.isEmpty()) {\r\n\t\t\t\tretMap.put("RESULT", "FAIL");\r\n\t\t\t\tretMap.put("MSG", this.getReturnMsg(5));\r\n\t\t\t\treturn retMap;\r\n\t\t\t}\r\n\r\n\t\t\tretMap.put("PORT", port);\r\n\r\n\t\t} else {\r\n\t\t\tString path = this.env.getProperty(appId + "." + actionCode + ".path");\r\n\r\n\t\t\tif (path == null || path.isEmpty()) {\r\n\t\t\t\tretMap.put("RESULT", "FAIL");\r\n\t\t\t\tretMap.put("MSG", this.getReturnMsg(4));\r\n\t\t\t\treturn retMap;\r\n\t\t\t}\r\n\r\n\t\t\tretMap.put("PATH", path);\r\n\t\t}\r\n\r\n\t\treturn retMap;\r\n\t}\r\n\r\n\t/**\r\n\t * Properties \xed\x8c\x8c\xec\x9d\xbc\xec\x97\x90\xec\x84\x9c key\xec\x97\x90 \xed\x95\xb4\xeb\x8b\xb9\xed\x95\x98\xeb\x8a\x94 \xeb\x8d\xb0\xec\x9d\xb4\xed\x84\xb0\xeb\xa5\xbc \xec\x9d\xbd\xec\x96\xb4 Array\xeb\xa1\x9c \xeb\xa6\xac\xed\x84\xb4\r\n\t * \r\n\t * @param props\r\n\t * @param key\r\n\t * @return String[]\r\n\t */\r\n\tprivate String[] getPropertiesByKey(Environment props, String key) {\r\n\t\tString readValue = props.getProperty(key);\r\n\r\n\t\tif (readValue == null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn readValue.split(",");\r\n\t}\r\n\r\n\t/**\r\n\t * \xec\x97\x90\xeb\x9f\xac \xec\xbd\x94\xeb\x93\x9c\xeb\xb3\x84 \xeb\xa6\xac\xed\x84\xb4 \xeb\xa9\x94\xec\x8b\x9c\xec\xa7\x80\xeb\xa5\xbc \xeb\xa6\xac\xed\x84\xb4\xed\x95\x9c\xeb\x8b\xa4.\r\n\t * \r\n\t * @param code\r\n\t * @return\r\n\t */\r\n\tprivate String getReturnMsg(int code) {\r\n\t\tString msg = "";\r\n\r\n\t\tif (code == 1) {\r\n\t\t\tmsg = "Can Not Read The Properties File!";\r\n\r\n\t\t} else if (code == 2) {\r\n\t\t\tmsg = "Can Not Find Application ID Properties!";\r\n\r\n\t\t} else if (code == 3) {\r\n\t\t\tmsg = "Wrong Application ID!";\r\n\r\n\t\t} else if (code == 4) {\r\n\t\t\tmsg = "Can Not Find Application Batch Path!";\r\n\r\n\t\t} else if (code == 5) {\r\n\t\t\tmsg = "Can Not Find Application Port No!";\r\n\t\t}\r\n\r\n\t\treturn msg;\r\n\t}\r\n}'