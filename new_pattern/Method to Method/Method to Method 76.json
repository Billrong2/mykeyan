{"Method=>Method":[{"Line": "111=>111", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.LinearLayout.setVisibility(View.GONE)=>bi.adminsec.setVisibility(View.GONE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8106/buggy-version/app.src.main.java.edu.aku.hassannaqvi.dss_census_sur.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "5d271f68c1ba076564080649034f91ba530553a9", "Url": "https://api.github.com/repos/shznaqvi/DSS-Census", "Date": "2018-08-04T11:45:56Z"},
{"Line": "226=>231", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mx.itesm.segi.perfectproject.BitmapFactory.decodeStream(java.io.InputStream)=>android.graphics.BitmapFactory.decodeStream(java.io.InputStream)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2101/buggy-version/appmovilandroid.app.src.main.java.mx.itesm.segi.perfectproject.ProfileFrag.java", "BodyUseAPI": [], "Fixed commit": "de9040293cdfffc2fbd0a0e6c4d3b5319ef7fea0", "Url": "https://api.github.com/repos/gerrygoo/appmovilandroid", "Date": "2018-05-09T13:11:50Z"},
{"Line": "226=>231", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mx.itesm.segi.perfectproject.BitmapFactory.decodeStream(java.io.InputStream)=>android.graphics.BitmapFactory.decodeStream(java.io.InputStream)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2101/buggy-version/appmovilandroid.app.src.main.java.mx.itesm.segi.perfectproject.ProfileFrag.java", "BodyUseAPI": [], "Fixed commit": "de9040293cdfffc2fbd0a0e6c4d3b5319ef7fea0", "Url": "https://api.github.com/repos/gerrygoo/appmovilandroid", "Date": "2018-05-09T13:11:50Z"},
{"Line": "228=>233", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Model.User.setProfileImage(mx.itesm.segi.perfectproject.Bitmap)=>Model.User.setProfileImage(android.graphics.Bitmap)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2101/buggy-version/appmovilandroid.app.src.main.java.mx.itesm.segi.perfectproject.ProfileFrag.java", "BodyUseAPI": [], "Fixed commit": "de9040293cdfffc2fbd0a0e6c4d3b5319ef7fea0", "Url": "https://api.github.com/repos/gerrygoo/appmovilandroid", "Date": "2018-05-09T13:11:50Z"},
{"Line": "227=>232", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mx.itesm.segi.perfectproject.ProfileFrag.setImageBitmap(mx.itesm.segi.perfectproject.Bitmap)=>android.widget.ImageView.setImageBitmap(android.graphics.Bitmap)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2101/buggy-version/appmovilandroid.app.src.main.java.mx.itesm.segi.perfectproject.ProfileFrag.java", "BodyUseAPI": [], "Fixed commit": "de9040293cdfffc2fbd0a0e6c4d3b5319ef7fea0", "Url": "https://api.github.com/repos/gerrygoo/appmovilandroid", "Date": "2018-05-09T13:11:50Z"},
{"Line": "235=>240", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mx.itesm.segi.perfectproject.Bitmap.compress(Bitmap.CompressFormat.JPEG,int,java.io.ByteArrayOutputStream)=>android.graphics.Bitmap.compress(Bitmap.CompressFormat.JPEG,int,java.io.ByteArrayOutputStream)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2101/buggy-version/appmovilandroid.app.src.main.java.mx.itesm.segi.perfectproject.ProfileFrag.java", "BodyUseAPI": [], "Fixed commit": "de9040293cdfffc2fbd0a0e6c4d3b5319ef7fea0", "Url": "https://api.github.com/repos/gerrygoo/appmovilandroid", "Date": "2018-05-09T13:11:50Z"},
{"Line": "28=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.minecraftforge.fml.relauncher.ReflectionHelper.findField(java.lang.Class<?>,java.lang.String,java.lang.String)=>net.minecraftforge.fml.relauncher.ReflectionHelper.findField(java.lang.Class<?>,java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3090/buggy-version/src.main.java.cf.wynntils.core.utils.ReflectionFields.java", "BodyUseAPI": [], "Fixed commit": "c08864c80febd4839e12f785870fdaca1362e69b", "Url": "https://api.github.com/repos/Wynntils/Wynntils", "Date": "2018-10-23T15:36:09Z"},
{"Line": "74=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.fasterxml.jackson.core.JsonParser.nextIntValue(int)=>com.fasterxml.jackson.core.JsonParser.nextLongValue(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1005/buggy-version/src.persistence.LocalSong.java", "BodyUseAPI": [], "Fixed commit": "aa737c38c21ed78f24ef79d4d4d9aedbe95acbc3", "Url": "https://api.github.com/repos/sotheanith/SpotyMusic", "Date": "2018-10-07T23:02:36Z"},
{"Line": "26=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new org.springframework.http.HttpEntity(dto)=>new org.springframework.http.HttpEntity(request)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4350/buggy-version/algorithm.src.main.java.algrithm.sequence.repository.SequenceRepository.java", "BodyUseAPI": [], "Fixed commit": "fc55ce19bcb3173d78f665c5c6c9b0f12720052d", "Url": "https://api.github.com/repos/Rogen319/logvisualization", "Date": "2018-08-23T05:32:33Z"},
{"Line": "52=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.vertx.core.eventbus.Message<io.vertx.core.json.JsonObject>.body()=>io.vertx.core.AsyncResult<io.vertx.core.eventbus.Message<io.vertx.core.json.JsonObject>>.result()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7163/buggy-version/src.main.java.net.atos.entng.rss.service.FeedServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "21e96c29b96e088646b697e14c8579c776badd2c", "Url": "https://api.github.com/repos/OPEN-ENT-NG/rss", "Date": "2018-04-26T12:32:15Z"},
{"Line": "49=>48", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "io.vertx.core.eventbus.EventBus.send(RssParser.PARSER_ADDRESS,io.vertx.core.json.JsonObject,fr.wseduc.webutils.Utils.handlerToAsyncHandler(new io.vertx.core.Handler<io.vertx.core.eventbus.Message<io.vertx.core.json.JsonObject>>() { @java.lang.Override public void handle(io.vertx.core.eventbus.Message<io.vertx.core.json.JsonObject> reply) { io.vertx.core.json.JsonObject response = reply.body(); java.lang.Integer status = response.getInteger(\"status\"); fr.wseduc.webutils.http.Renders.renderJson(request, response, status); } }))=>io.vertx.core.eventbus.EventBus.send(RssParser.PARSER_ADDRESS,io.vertx.core.json.JsonObject,io.vertx.core.Handler<io.vertx.core.AsyncResult<io.vertx.core.eventbus.Message<io.vertx.core.json.JsonObject>>>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7163/buggy-version/src.main.java.net.atos.entng.rss.service.FeedServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "21e96c29b96e088646b697e14c8579c776badd2c", "Url": "https://api.github.com/repos/OPEN-ENT-NG/rss", "Date": "2018-04-26T12:32:15Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ru.univeralex.service.repositories.DiaryRepository.findByFilename(java.lang.String)=>ru.univeralex.service.repositories.DiaryRepository.findFirstByFilename(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8856/buggy-version/src.main.java.ru.univeralex.service.services.impl.ImageServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "14981d258e9102859b9532fc9fcc2992161bc229", "Url": "https://api.github.com/repos/FreshHead/progress_diary", "Date": "2018-05-02T09:45:54Z"},
{"Line": "100=>104", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.PrintStream.println(int)=>java.io.PrintStream.println(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3586/buggy-version/v2.Calculator.java", "BodyUseAPI": [], "Fixed commit": "bbc768b84ab04e75d9d36ba9d12f39bdb61fd3dd", "Url": "https://api.github.com/repos/cmohri/gwuacamohli", "Date": "2018-01-12T05:20:39Z"},
{"Line": "27=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.substring(int,int)=>main.commands.UnitConversion.handleUnitConversion(java.lang.String,java.lang.String,java.lang.String,event.getChannel())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6243/buggy-version/src.main.java.main.commands.UnitConversion.java", "BodyUseAPI": [], "Fixed commit": "b1f2e64604635e2cbfb3b54ce060892b4fafcf86", "Url": "https://api.github.com/repos/PhaseRush/Aspect", "Date": "2018-06-29T05:58:43Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "main.utility.maths.UnitConverter.allVolumeUnits()=>main.utility.maths.UnitConverter.allDistanceUnits()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6243/buggy-version/src.main.java.main.commands.UnitConversion.java", "BodyUseAPI": [], "Fixed commit": "b1f2e64604635e2cbfb3b54ce060892b4fafcf86", "Url": "https://api.github.com/repos/PhaseRush/Aspect", "Date": "2018-06-29T05:58:43Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.eclipse.milo.opcua.sdk.server.util.AnnotationBasedInvocationHandler.InvocationContext.getObjectNode()=>org.eclipse.milo.opcua.sdk.server.util.AnnotationBasedInvocationHandler.InvocationContext.getOwnerNode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3953/buggy-version/milo-examples.server-examples.src.main.java.org.eclipse.milo.examples.server.methods.SqrtMethod.java", "BodyUseAPI": [], "Fixed commit": "0f22fbac2eb5411be6ab4a2455ee87656e686fe9", "Url": "https://api.github.com/repos/eclipse/milo", "Date": "2018-10-26T06:54:33Z"},
{"Line": "45=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "jw.kingdom.hall.kingdomtimer.recorder.Recorder.setPause(boolean)=>jw.kingdom.hall.kingdomtimer.app.javafx.utils.PlatformUtils.runOnUiThread(() -> recorder.setPause(true))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5421/buggy-version/src.jw.kingdom.hall.kingdomtimer.domain.record.voice.VoiceRecorder.java", "BodyUseAPI": [], "Fixed commit": "1f50710bc89afe496f7955e8b65227987c0ed7c4", "Url": "https://api.github.com/repos/Slupik/KingdomHallTimer", "Date": "2018-09-17T23:48:18Z"},
{"Line": "53=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "jw.kingdom.hall.kingdomtimer.recorder.Recorder.setPause(boolean)=>jw.kingdom.hall.kingdomtimer.app.javafx.utils.PlatformUtils.runOnUiThread(() -> recorder.setPause(false))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5421/buggy-version/src.jw.kingdom.hall.kingdomtimer.domain.record.voice.VoiceRecorder.java", "BodyUseAPI": [], "Fixed commit": "1f50710bc89afe496f7955e8b65227987c0ed7c4", "Url": "https://api.github.com/repos/Slupik/KingdomHallTimer", "Date": "2018-09-17T23:48:18Z"},
{"Line": "36=>37", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "jw.kingdom.hall.kingdomtimer.recorder.Recorder.onStop()=>jw.kingdom.hall.kingdomtimer.app.javafx.utils.PlatformUtils.runOnUiThread(() -> recorder.onStop())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5421/buggy-version/src.jw.kingdom.hall.kingdomtimer.domain.record.voice.VoiceRecorder.java", "BodyUseAPI": [], "Fixed commit": "1f50710bc89afe496f7955e8b65227987c0ed7c4", "Url": "https://api.github.com/repos/Slupik/KingdomHallTimer", "Date": "2018-09-17T23:48:18Z"},
{"Line": "27=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "jw.kingdom.hall.kingdomtimer.recorder.Recorder.onStart()=>jw.kingdom.hall.kingdomtimer.app.javafx.utils.PlatformUtils.runOnUiThread(() -> recorder.onStart())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5421/buggy-version/src.jw.kingdom.hall.kingdomtimer.domain.record.voice.VoiceRecorder.java", "BodyUseAPI": [], "Fixed commit": "1f50710bc89afe496f7955e8b65227987c0ed7c4", "Url": "https://api.github.com/repos/Slupik/KingdomHallTimer", "Date": "2018-09-17T23:48:18Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.IOException.printStackTrace()=>java.io.IOException.getMessage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4855/buggy-version/Serv.src.main.java.server.Server.java", "BodyUseAPI": [], "Fixed commit": "0b0367ffefa85102fb612b61455c622097c17809", "Url": "https://api.github.com/repos/dmatveyev/ConsoleChat", "Date": "2018-03-09T06:25:21Z"},
{"Line": "69=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.IOException.printStackTrace()=>java.io.PrintStream.printf(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4855/buggy-version/Serv.src.main.java.server.ClientHandler.java", "BodyUseAPI": [], "Fixed commit": "0b0367ffefa85102fb612b61455c622097c17809", "Url": "https://api.github.com/repos/dmatveyev/ConsoleChat", "Date": "2018-03-09T06:25:21Z"},
{"Line": "110=>110", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "de.evoila.cf.broker.service.impl.ServiceInstanceRequest.getPlanId()=>de.evoila.cf.broker.service.impl.ServiceInstanceRequest.getServiceDefinitionId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9086/buggy-version/core.src.main.java.de.evoila.cf.broker.service.impl.DeploymentServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "d104b05b247ef93a0bf2c101cac0e6bee86fc8c9", "Url": "https://api.github.com/repos/evoila/osb-core", "Date": "2018-07-25T13:04:46Z"},
{"Line": "13=>14", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "context.write(org.apache.hadoop.io.Text,org.apache.hadoop.io.Text)=>context.write(org.apache.hadoop.io.FloatWritable,org.apache.hadoop.io.Text)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9717/buggy-version/src.main.java.mission6.reducer.PageRankSortReducer.java", "BodyUseAPI": [], "Fixed commit": "95bcffb17e5df6821b13578c947bcc0268be6bce", "Url": "https://api.github.com/repos/NJUA422Hadoop/Assignment3", "Date": "2018-07-09T15:40:51Z"},
{"Line": "20=>20", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "context.write(org.apache.hadoop.io.Text,org.apache.hadoop.io.Text)=>context.write(org.apache.hadoop.io.FloatWritable,org.apache.hadoop.io.Text)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9717/buggy-version/src.main.java.mission6.mapper.PageRankSortMapper.java", "BodyUseAPI": [], "Fixed commit": "95bcffb17e5df6821b13578c947bcc0268be6bce", "Url": "https://api.github.com/repos/NJUA422Hadoop/Assignment3", "Date": "2018-07-09T15:40:51Z"},
{"Line": "38=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "this.pidStraight.setPower(Config.PID_STRAIGHT_COAST_POWER)=>edu.wpi.first.wpilibj.SpeedControllerGroup.set(Config.PID_STRAIGHT_COAST_POWER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5139/buggy-version/src.org.usfirst.frc.team5427.robot.commands.PIDCoasting.java", "BodyUseAPI": [], "Fixed commit": "2b46ab6a597b1c201968a3dd76122b8ec2c9d035", "Url": "https://api.github.com/repos/Team5427/2018-robotics-code", "Date": "2018-02-04T22:36:34Z"},
{"Line": "43=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "this.pidStraight.setPower((-(org.usfirst.frc.team5427.util.Config.PID_STRAIGHT_COAST_POWER)))=>edu.wpi.first.wpilibj.SpeedControllerGroup.set((-(org.usfirst.frc.team5427.util.Config.PID_STRAIGHT_COAST_POWER)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5139/buggy-version/src.org.usfirst.frc.team5427.robot.commands.PIDCoasting.java", "BodyUseAPI": [], "Fixed commit": "2b46ab6a597b1c201968a3dd76122b8ec2c9d035", "Url": "https://api.github.com/repos/Team5427/2018-robotics-code", "Date": "2018-02-04T22:36:34Z"},
{"Line": "120=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.COMP3004.Rummikub.Meld.isValidMeldValue()=>com.COMP3004.Rummikub.Meld.isValidSet()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/596/buggy-version/Rummikub-COMP3004.src.main.java.com.COMP3004.Rummikub.Meld.java", "BodyUseAPI": [], "Fixed commit": "dd11d7498400df53a5c693cc07170b2def88d855", "Url": "https://api.github.com/repos/isunnay/Rummikub-COMP3004", "Date": "2018-10-31T01:30:40Z"},
{"Line": "60=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "entityManager.createQuery((\"SELECT template FROM Template template \" + \"WHERE template.id = :templateIdAsLong\"), pl.gov.coi.cascades.server.persistance.hibernate.entity.Template.class).setParameter(java.lang.String,java.lang.Long)=>entityManager.createQuery((\"SELECT template FROM Template template \" + \"WHERE template.generatedId = :templateId\"), pl.gov.coi.cascades.server.persistance.hibernate.entity.Template.class).setParameter(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7476/buggy-version/cascades-server.persistence-hibernate.src.main.java.pl.gov.coi.cascades.server.persistance.hibernate.TemplateIdGatewayImpl.java", "BodyUseAPI": [], "Fixed commit": "25184ea5271082432a040d56cc870b7a7b0d7e76", "Url": "https://api.github.com/repos/labamba63/java-cascades", "Date": "2018-07-03T11:22:43Z"},
{"Line": "114=>116", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new xmu.crms.view.User(openid, type, school, name, number)=>new xmu.crms.view.User(phone, password, type, school, name, number)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8569/buggy-version/src.main.java.xmu.crms.view.MeController.java", "BodyUseAPI": [], "Fixed commit": "92ab7c0d50ad173955adf28ece90e5338d12f9ab", "Url": "https://api.github.com/repos/OOAD2-2/Sever", "Date": "2018-01-12T08:31:27Z"},
{"Line": "114=>116", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "xmu.crms.mapper.UserMapper.insertUser(xmu.crms.view.User)=>xmu.crms.service.UserService.updateUserByUserId(java.math.BigInteger,xmu.crms.view.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8569/buggy-version/src.main.java.xmu.crms.view.MeController.java", "BodyUseAPI": [], "Fixed commit": "92ab7c0d50ad173955adf28ece90e5338d12f9ab", "Url": "https://api.github.com/repos/OOAD2-2/Sever", "Date": "2018-01-12T08:31:27Z"},
{"Line": "114=>116", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "xmu.crms.mapper.UserMapper.insertUser(xmu.crms.view.User)=>xmu.crms.service.UserService.updateUserByUserId(java.math.BigInteger,xmu.crms.view.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8569/buggy-version/src.main.java.xmu.crms.view.MeController.java", "BodyUseAPI": [], "Fixed commit": "92ab7c0d50ad173955adf28ece90e5338d12f9ab", "Url": "https://api.github.com/repos/OOAD2-2/Sever", "Date": "2018-01-12T08:31:27Z"},
{"Line": "49=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.common.collect.Iterators.concat(super.getFastas(),java.util.Iterator<edu.scripps.yates.utilities.fasta.Fasta>)=>com.google.common.collect.Iterators.concat(java.util.Iterator<edu.scripps.yates.utilities.fasta.Fasta>,java.util.Iterator<edu.scripps.yates.utilities.fasta.Fasta>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5718/buggy-version/pint.annotations.src.main.java.edu.scripps.yates.annotations.uniprot.proteoform.fasta.ProteoFormFastaReader.java", "BodyUseAPI": [], "Fixed commit": "a8e3b92107d042a784a743fae8b3d599f5214cbd", "Url": "https://api.github.com/repos/proteomicsyates/PINT", "Date": "2018-09-01T00:07:01Z"},
{"Line": "112=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.raml.jaxrs.generator.builders.resources.ResourceBuilder.createMethodWithBody(TypeSpec.Builder,org.raml.jaxrs.generator.builders.resources.GMethod,com.google.common.collect.Multimap<java.lang.String, java.lang.String>,java.lang.String,org.raml.jaxrs.generator.builders.resources.GRequest,java.util.Map<java.lang.String, TypeSpec.Builder>)=>org.raml.jaxrs.generator.builders.resources.ResourceBuilder.createMethodWithBody(TypeSpec.Builder,org.raml.jaxrs.generator.builders.resources.GMethod,com.google.common.collect.Multimap<java.lang.String, java.lang.String>,java.lang.String,org.raml.jaxrs.generator.builders.resources.GRequest,java.util.Map<java.lang.String, TypeSpec.Builder>,java.util.Set<java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2902/buggy-version/raml-to-jaxrs.jaxrs-code-generator.src.main.java.org.raml.jaxrs.generator.builders.resources.ResourceBuilder.java", "BodyUseAPI": [], "Fixed commit": "3c00d599c8e496b8514925873744f92268bea289", "Url": "https://api.github.com/repos/mulesoft-labs/raml-for-jax-rs", "Date": "2018-04-28T10:16:18Z"},
{"Line": "23=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.lgsim.engine.graphEditor.graph.action.DocumentSaveAction.save()=>com.lgsim.engine.graphEditor.graph.action.DocumentSaveAction.output()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8306/buggy-version/graph.src.main.java.com.lgsim.engine.graphEditor.graph.action.DocumentSaveAction.java", "BodyUseAPI": [], "Fixed commit": "0b7bba46aa56cb7f110c1b832f4db9834abae15e", "Url": "https://api.github.com/repos/lgsimu/graph-editor", "Date": "2018-04-26T09:31:07Z"},
{"Line": "91=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "xh.widget.widgets.PDFReaderActivity.getCacheDir()=>xh.widget.widgets.PDFReaderActivity.getFilesDir()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8913/buggy-version/app.src.main.java.xh.widget.widgets.PDFReaderActivity.java", "BodyUseAPI": [], "Fixed commit": "2a3c1fd3a8b8785650861ed5e873089b6f23b347", "Url": "https://api.github.com/repos/xionghaoo/PDFReader", "Date": "2018-08-23T12:45:12Z"},
{"Line": "362=>362", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "mUserRangeTextView.getText().toString().split(java.lang.String)=>mUserRangeTextView.getText().toString().replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9706/buggy-version/app.src.main.java.edu.duke.compsci290.ridermaster.Activities.RideRequestActivity.java", "BodyUseAPI": [], "Fixed commit": "41df8e92ced14d135d1d937f1169a77185760e80", "Url": "https://api.github.com/repos/mercyfang/Android-Mobile-App-RideMaster", "Date": "2018-05-01T19:41:56Z"},
{"Line": "573=>573", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.walrusone.skywarsreloaded.game.GameMap.getTeamCount()=>gameMap.getTeamCards().size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2480/buggy-version/plugin.src.main.java.com.walrusone.skywarsreloaded.managers.MatchManager.java", "BodyUseAPI": [], "Fixed commit": "b476f7947038903275db2623a06598cb80a6db84", "Url": "https://api.github.com/repos/walrusone/SkyWarsReloaded", "Date": "2018-03-23T16:47:51Z"},
{"Line": "113=>118", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.io.PrintStream.print(((Wizzard.spieler[0].getName()) + \" hat die Karte: \"))=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8465/buggy-version/src.Wizzard.java", "BodyUseAPI": [], "Fixed commit": "e62bf3ccc73c13e2f79b92770a358783a1915afe", "Url": "https://api.github.com/repos/FadiKasabji/Wizzard", "Date": "2018-01-04T12:38:30Z"},
{"Line": "59=>65", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "this.getQuark(com.radixdlt.client.core.atoms.particles.quarks.DataQuark.class).getMetaData().get(java.lang.String)=>java.util.Map<java.lang.String, java.lang.String>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8143/buggy-version/radixdlt-java.src.main.java.com.radixdlt.client.core.atoms.particles.StorageParticle.java", "BodyUseAPI": [], "Fixed commit": "b5dc39ae5065102f2c7aa5a5a7d395584cc56f5c", "Url": "https://api.github.com/repos/radixdlt/radixdlt-java", "Date": "2018-10-17T16:51:15Z"},
{"Line": "84=>85", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.example.myapplication.catcount.4.startActivity(android.content.Intent)=>com.example.myapplication.catcount.4.finish()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1464/buggy-version/MyApplication.app.src.main.java.com.example.myapplication.catcount.java", "BodyUseAPI": [], "Fixed commit": "e14eecff2f5bf2427b801f045f0d43daa581990b", "Url": "https://api.github.com/repos/U-TIME-app/myapp", "Date": "2018-06-13T13:05:25Z"},
{"Line": "67=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.example.myapplication.catcount.3.startActivity(android.content.Intent)=>com.example.myapplication.catcount.3.finish()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1464/buggy-version/MyApplication.app.src.main.java.com.example.myapplication.catcount.java", "BodyUseAPI": [], "Fixed commit": "e14eecff2f5bf2427b801f045f0d43daa581990b", "Url": "https://api.github.com/repos/U-TIME-app/myapp", "Date": "2018-06-13T13:05:25Z"},
{"Line": "66=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.herac.tuxguitar.android.view.tablature.TGScroller.startScroll(int,int,int,int)=>org.herac.tuxguitar.android.view.tablature.TGScroller.fling(int,int,int,int,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8860/buggy-version/tuxguitar-widget.src.main.java.org.herac.tuxguitar.android.view.tablature.TGSongViewGestureDetector.java", "BodyUseAPI": [], "Fixed commit": "8f5938d91b84f6922a0c51637fe35da0db9fe952", "Url": "https://api.github.com/repos/axlecho/tuxguitar", "Date": "2018-02-07T07:29:22Z"},
{"Line": "66=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.herac.tuxguitar.android.view.tablature.TGScroller.startScroll(int,int,int,int)=>org.herac.tuxguitar.android.view.tablature.TGScroller.fling(int,int,int,int,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8860/buggy-version/tuxguitar-widget.src.main.java.org.herac.tuxguitar.android.view.tablature.TGSongViewGestureDetector.java", "BodyUseAPI": [], "Fixed commit": "8f5938d91b84f6922a0c51637fe35da0db9fe952", "Url": "https://api.github.com/repos/axlecho/tuxguitar", "Date": "2018-02-07T07:29:22Z"},
{"Line": "58=>58", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "net.pl3x.bukkit.ridabledolphins.entity.EntityRidableDolphin.setPosition(nmsDolphin.locX,nmsDolphin.locY,nmsDolphin.locZ)=>net.pl3x.bukkit.ridabledolphins.entity.EntityRidableDolphin.setPositionRotation(nmsDolphin.locX,nmsDolphin.locY,nmsDolphin.locZ,dolphin.getLocation().getYaw(),dolphin.getLocation().getPitch())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/16/buggy-version/src.main.java.net.pl3x.bukkit.ridabledolphins.RidableDolphins.java", "BodyUseAPI": [], "Fixed commit": "a3c4d6ff262f8535cbf56f3437f536cbf91eb8d6", "Url": "https://api.github.com/repos/BillyGalbreath/RidableDolphins", "Date": "2018-07-23T01:00:17Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.springframework.http.ResponseEntity.badRequest().body(org.springframework.validation.BindingResult)=>org.springframework.http.ResponseEntity.badRequest().body(java.util.Map<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2492/buggy-version/src.main.java.com.microfocus.fortify.controller.UserController.java", "BodyUseAPI": [], "Fixed commit": "992ce4a6aafaf58d3ea6601000d09e6646cd8905", "Url": "https://api.github.com/repos/Ztryx/fortify", "Date": "2018-05-14T15:50:22Z"},
{"Line": "42=>41", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.showka.domain.u11.ShohinZaiko.getNumber()=>com.showka.domain.u11.ShohinZaiko.getKurikoshiNumber()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1095/buggy-version/src.main.java.com.showka.domain.builder.ShohinZaikoBuilder.java", "BodyUseAPI": [], "Fixed commit": "91d1d855126c07c2a8708b9b286038b1f4fdc5bb", "Url": "https://api.github.com/repos/ShowKa/HanbaiKanri", "Date": "2018-10-25T13:41:43Z"},
{"Line": "177=>191", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.concurrent.ConcurrentHashMap<java.lang.String, RMIForum.Broker.RMIClient>.size()=>RMIForum.Broker.TopicList.getTopicNamed(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4391/buggy-version/Broker.BrokerClass.java", "BodyUseAPI": [], "Fixed commit": "8429e4b544d6ba024822d46d632622989ef51544", "Url": "https://api.github.com/repos/non-sono-bello-ma-patcho/RMIForum", "Date": "2018-07-16T16:01:59Z"},
{"Line": "231=>236", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "menjacnica.gui.MenjacnicaGUI.12.showMenu(java.awt.event.MouseEvent)=>menjacnica.gui.MenjacnicaGUI.13.showMenu(java.awt.event.MouseEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4701/buggy-version/MenjacnicaGUI.src.menjacnica.gui.MenjacnicaGUI.java", "BodyUseAPI": [], "Fixed commit": "3479140e94a2478a725f535a5151e206e3ca4d1a", "Url": "https://api.github.com/repos/BrankoKrsmanovic/MenjacnicaGUI", "Date": "2018-04-19T09:04:13Z"},
{"Line": "225=>230", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "menjacnica.gui.MenjacnicaGUI.12.showMenu(java.awt.event.MouseEvent)=>menjacnica.gui.MenjacnicaGUI.13.showMenu(java.awt.event.MouseEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4701/buggy-version/MenjacnicaGUI.src.menjacnica.gui.MenjacnicaGUI.java", "BodyUseAPI": [], "Fixed commit": "3479140e94a2478a725f535a5151e206e3ca4d1a", "Url": "https://api.github.com/repos/BrankoKrsmanovic/MenjacnicaGUI", "Date": "2018-04-19T09:04:13Z"},
{"Line": "222=>227", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.awt.event.MouseAdapter() { public void mousePressed(java.awt.event.MouseEvent e) { if (e.isPopupTrigger()) { showMenu(e); } } public void mouseReleased(java.awt.event.MouseEvent e) { if (e.isPopupTrigger()) { showMenu(e); } } private void showMenu(java.awt.event.MouseEvent e) { popup.show(e.getComponent(), e.getX(), e.getY()); } }=>new java.awt.event.MouseAdapter() { public void mousePressed(java.awt.event.MouseEvent e) { if (e.isPopupTrigger()) { showMenu(e); } } public void mouseReleased(java.awt.event.MouseEvent e) { if (e.isPopupTrigger()) { showMenu(e); } } private void showMenu(java.awt.event.MouseEvent e) { popup.show(e.getComponent(), e.getX(), e.getY()); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4701/buggy-version/MenjacnicaGUI.src.menjacnica.gui.MenjacnicaGUI.java", "BodyUseAPI": [], "Fixed commit": "3479140e94a2478a725f535a5151e206e3ca4d1a", "Url": "https://api.github.com/repos/BrankoKrsmanovic/MenjacnicaGUI", "Date": "2018-04-19T09:04:13Z"},
{"Line": "159=>160", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.github.javiersantos.materialstyleddialogs.MaterialStyledDialog.Builder(context).setTitle(dishItem.getDishName()).withDivider(true).setStyle(Style.HEADER_WITH_TITLE)=>new com.github.javiersantos.materialstyleddialogs.MaterialStyledDialog.Builder(context).setTitle(dishItem.getDishName()).setStyle(Style.HEADER_WITH_TITLE).setPositiveText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9276/buggy-version/app.src.main.java.com.teamnamenotfoundexception.hoteller.adapters.DCAdapter.java", "BodyUseAPI": [], "Fixed commit": "ddbed1b60e708309118b11558a8a8253da46e691", "Url": "https://api.github.com/repos/dodococo/Hotel-Management-App", "Date": "2018-03-18T17:05:50Z"},
{"Line": "159=>160", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.github.javiersantos.materialstyleddialogs.MaterialStyledDialog.Builder(context).setTitle(dishItem.getDishName()).withDivider(boolean)=>new com.github.javiersantos.materialstyleddialogs.MaterialStyledDialog.Builder(context).setTitle(dishItem.getDishName()).setStyle(Style.HEADER_WITH_TITLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9276/buggy-version/app.src.main.java.com.teamnamenotfoundexception.hoteller.adapters.DCAdapter.java", "BodyUseAPI": [], "Fixed commit": "ddbed1b60e708309118b11558a8a8253da46e691", "Url": "https://api.github.com/repos/dodococo/Hotel-Management-App", "Date": "2018-03-18T17:05:50Z"},
{"Line": "15=>15", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.codecool.snake.entities.enemies.Confucia.setY(int)=>com.codecool.snake.entities.enemies.Confucia.setY(((com.codecool.snake.Globals.WINDOW_HEIGHT) - 292))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1893/buggy-version/src.com.codecool.snake.entities.enemies.Confucia.java", "BodyUseAPI": [], "Fixed commit": "99cd37cc7bc840862f93c68c99ca63611b9587cb", "Url": "https://api.github.com/repos/CodecoolBPoop/oop-java-snake-the-abstracted-snakez", "Date": "2018-09-13T08:53:30Z"},
{"Line": "14=>14", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.codecool.snake.entities.enemies.Confucia.setX(int)=>com.codecool.snake.entities.enemies.Confucia.setX(((com.codecool.snake.Globals.WINDOW_WIDTH) - 150))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1893/buggy-version/src.com.codecool.snake.entities.enemies.Confucia.java", "BodyUseAPI": [], "Fixed commit": "99cd37cc7bc840862f93c68c99ca63611b9587cb", "Url": "https://api.github.com/repos/CodecoolBPoop/oop-java-snake-the-abstracted-snakez", "Date": "2018-09-13T08:53:30Z"},
{"Line": "71=>71", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.sql.ResultSet.getInt(java.lang.String)=>java.sql.ResultSet.getString(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2516/buggy-version/class-mediators.MockProject.src.main.java.com.arcana.gdcb.stubs.in.Script.java", "BodyUseAPI": [], "Fixed commit": "aacf0f7322562dd09eeb732af2ef0ff5e653fe16", "Url": "https://api.github.com/repos/bombasta1/gdcb-stubs", "Date": "2018-01-21T10:29:52Z"},
{"Line": "100=>101", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Polynomial.multiplyVariable(Polynomial)=>Polynomial.multiplyVariable(Polynomial,java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9754/buggy-version/src.Polynomial.java", "BodyUseAPI": [], "Fixed commit": "e1e4c3523d3f777c47ad1ebe823d00f0123e8cf7", "Url": "https://api.github.com/repos/omprakashsridharan/ObjectOriented", "Date": "2018-08-07T04:54:53Z"},
{"Line": "37=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.servlet.http.HttpServletRequest.setAttribute(java.lang.String,com.itheima.vo.PageBean<com.itheima.domain.Product>)=>javax.servlet.http.HttpServletRequest.setAttribute(java.lang.String,com.PATHobin.sheet.vo.PageBean<com.PATHobin.sheet.domain.Product>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/520/buggy-version/EEWebCase.src.main.java.com.PATHobin.sheet.web.ProductListServlet.java", "BodyUseAPI": [], "Fixed commit": "2babdd2990480ce3c9cd9a81b97282d8d4820659", "Url": "https://api.github.com/repos/PATHobin3/mavenEEWeb", "Date": "2018-04-17T09:56:39Z"},
{"Line": "32=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.itheima.service.ProductService.findPageBean(int,int)=>com.PATHobin.sheet.service.ProductService.findPageBean(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/520/buggy-version/EEWebCase.src.main.java.com.PATHobin.sheet.web.ProductListServlet.java", "BodyUseAPI": [], "Fixed commit": "2babdd2990480ce3c9cd9a81b97282d8d4820659", "Url": "https://api.github.com/repos/PATHobin3/mavenEEWeb", "Date": "2018-04-17T09:56:39Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.text.DecimalFormat.format(shopping.Shopping)=>java.text.DecimalFormat.format(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6695/buggy-version/src.shopping.Shopping.java", "BodyUseAPI": [], "Fixed commit": "60a560483b89a8e504e516bbdcaa6730b12bb7f7", "Url": "https://api.github.com/repos/PeterHorne-Deus/Shopping", "Date": "2018-10-02T13:59:53Z"},
{"Line": "50=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(((\"The cost of the Mice: \" + (x.format(costMice))) + \"\\n\"))=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6695/buggy-version/src.shopping.Shopping.java", "BodyUseAPI": [], "Fixed commit": "60a560483b89a8e504e516bbdcaa6730b12bb7f7", "Url": "https://api.github.com/repos/PeterHorne-Deus/Shopping", "Date": "2018-10-02T13:59:53Z"},
{"Line": "51=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(((\"The cost of the Keyboards: \" + (x.format(costKeyboard))) + \"\\n \\n\"))=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6695/buggy-version/src.shopping.Shopping.java", "BodyUseAPI": [], "Fixed commit": "60a560483b89a8e504e516bbdcaa6730b12bb7f7", "Url": "https://api.github.com/repos/PeterHorne-Deus/Shopping", "Date": "2018-10-02T13:59:53Z"},
{"Line": "50=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.text.DecimalFormat.format(shopping.Shopping)=>java.text.DecimalFormat.format(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6695/buggy-version/src.shopping.Shopping.java", "BodyUseAPI": [], "Fixed commit": "60a560483b89a8e504e516bbdcaa6730b12bb7f7", "Url": "https://api.github.com/repos/PeterHorne-Deus/Shopping", "Date": "2018-10-02T13:59:53Z"},
{"Line": "51=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.text.DecimalFormat.format(shopping.Shopping)=>java.text.DecimalFormat.format(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6695/buggy-version/src.shopping.Shopping.java", "BodyUseAPI": [], "Fixed commit": "60a560483b89a8e504e516bbdcaa6730b12bb7f7", "Url": "https://api.github.com/repos/PeterHorne-Deus/Shopping", "Date": "2018-10-02T13:59:53Z"},
{"Line": "49=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(((\"The cost of the USB storage Devices: \" + (x.format(costUSB))) + \"\\n\"))=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6695/buggy-version/src.shopping.Shopping.java", "BodyUseAPI": [], "Fixed commit": "60a560483b89a8e504e516bbdcaa6730b12bb7f7", "Url": "https://api.github.com/repos/PeterHorne-Deus/Shopping", "Date": "2018-10-02T13:59:53Z"},
{"Line": "43=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, fr.iutinfo.rest.Utilisateur>.getUno()=>fr.iutinfo.rest.User.getUno()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1958/buggy-version/server.src.main.java.fr.iutinfo.rest.UserCreate.java", "BodyUseAPI": [], "Fixed commit": "09e4b387ab79e33e5927003ab99183056436f2c1", "Url": "https://api.github.com/repos/Haingue/jersey-skeleton", "Date": "2018-03-21T14:32:24Z"},
{"Line": "47=>34", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, fr.iutinfo.rest.Utilisateur>.put(user.getUno(),fr.iutinfo.rest.Utilisateur)=>java.util.Map<java.lang.Integer, fr.iutinfo.rest.User>.put(user.getUno(),fr.iutinfo.rest.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1958/buggy-version/server.src.main.java.fr.iutinfo.rest.UserCreate.java", "BodyUseAPI": [], "Fixed commit": "09e4b387ab79e33e5927003ab99183056436f2c1", "Url": "https://api.github.com/repos/Haingue/jersey-skeleton", "Date": "2018-03-21T14:32:24Z"},
{"Line": "50=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "fr.iutinfo.rest.Utilisateur.getUno()=>fr.iutinfo.rest.User.getUno()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1958/buggy-version/server.src.main.java.fr.iutinfo.rest.UserCreate.java", "BodyUseAPI": [], "Fixed commit": "09e4b387ab79e33e5927003ab99183056436f2c1", "Url": "https://api.github.com/repos/Haingue/jersey-skeleton", "Date": "2018-03-21T14:32:24Z"},
{"Line": "47=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "fr.iutinfo.rest.Utilisateur.getUno()=>fr.iutinfo.rest.User.getUno()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1958/buggy-version/server.src.main.java.fr.iutinfo.rest.UserCreate.java", "BodyUseAPI": [], "Fixed commit": "09e4b387ab79e33e5927003ab99183056436f2c1", "Url": "https://api.github.com/repos/Haingue/jersey-skeleton", "Date": "2018-03-21T14:32:24Z"},
{"Line": "1211=>1213", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.matrix.androidsdk.data.RoomState.canBackPaginated(java.lang.String)=>org.matrix.androidsdk.data.RoomState.canBackPaginate(mRoom.isJoined(),mRoom.isInvited())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8458/buggy-version/matrix-sdk.src.main.java.org.matrix.androidsdk.data.EventTimeline.java", "BodyUseAPI": [], "Fixed commit": "30ef646bb56b162aded2875b073e77b24641dab5", "Url": "https://api.github.com/repos/matrix-org/matrix-android-sdk", "Date": "2018-09-12T13:30:19Z"},
{"Line": "1173=>1175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.matrix.androidsdk.MXDataHandler.getUserId()=>org.matrix.androidsdk.data.Room.isJoined()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8458/buggy-version/matrix-sdk.src.main.java.org.matrix.androidsdk.data.EventTimeline.java", "BodyUseAPI": [], "Fixed commit": "30ef646bb56b162aded2875b073e77b24641dab5", "Url": "https://api.github.com/repos/matrix-org/matrix-android-sdk", "Date": "2018-09-12T13:30:19Z"},
{"Line": "1173=>1175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.matrix.androidsdk.data.RoomState.canBackPaginated(mDataHandler.getUserId())=>org.matrix.androidsdk.data.RoomState.canBackPaginate(mRoom.isJoined(),mRoom.isInvited())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8458/buggy-version/matrix-sdk.src.main.java.org.matrix.androidsdk.data.EventTimeline.java", "BodyUseAPI": [], "Fixed commit": "30ef646bb56b162aded2875b073e77b24641dab5", "Url": "https://api.github.com/repos/matrix-org/matrix-android-sdk", "Date": "2018-09-12T13:30:19Z"},
{"Line": "1173=>1175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.matrix.androidsdk.MXDataHandler.getUserId()=>org.matrix.androidsdk.data.Room.isJoined()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8458/buggy-version/matrix-sdk.src.main.java.org.matrix.androidsdk.data.EventTimeline.java", "BodyUseAPI": [], "Fixed commit": "30ef646bb56b162aded2875b073e77b24641dab5", "Url": "https://api.github.com/repos/matrix-org/matrix-android-sdk", "Date": "2018-09-12T13:30:19Z"},
{"Line": "21=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList.add(college.Student)=>java.util.ArrayList<college.Student>.add(college.Student)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9343/buggy-version/src.main.java.college.Module.java", "BodyUseAPI": [], "Fixed commit": "19950f0b7bb1cb2422194d3a66fab67cdc446d6a", "Url": "https://api.github.com/repos/EamonnR96/SEassignment1", "Date": "2018-10-25T13:20:30Z"},
{"Line": "309=>310", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.ObjectOutput.writeObject(com.splicemachine.db.impl.sql.execute.FunctionType)=>com.splicemachine.db.impl.sql.execute.FunctionType.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9316/buggy-version/db-engine.src.main.java.com.splicemachine.db.impl.sql.execute.WindowFunctionInfo.java", "BodyUseAPI": [], "Fixed commit": "428e28f2393416838f202bf3e317b5e72d2fbd11", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-03-02T21:09:47Z"},
{"Line": "83=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "shoesTexture.startDraw().sprite(int,int,int)=>((inventory.item.armorItem.ArmorItem) (bootsItem.item)).getArmorDrawOptions(inventory.InventoryItem,<nulltype>,int,int,int,int,float,float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/76/buggy-version/src.entity.mobs.friendly.human.GuardHumanMob.java", "BodyUseAPI": [], "Fixed commit": "deebb466c665c7bd5eb4566aa7365995444e905e", "Url": "https://api.github.com/repos/DrFair/Game", "Date": "2018-09-18T03:47:46Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "shoesTexture.startDraw().sprite(sprite.x, sprite.y, 64).light(light).pos(int,int)=>((inventory.item.armorItem.ArmorItem) (bootsItem.item)).getArmorDrawOptions(inventory.InventoryItem,<nulltype>,int,int,int,int,float,float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/76/buggy-version/src.entity.mobs.friendly.human.GuardHumanMob.java", "BodyUseAPI": [], "Fixed commit": "deebb466c665c7bd5eb4566aa7365995444e905e", "Url": "https://api.github.com/repos/DrFair/Game", "Date": "2018-09-18T03:47:46Z"},
{"Line": "281=>281", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.info(java.lang.String,int,int,double)=>org.slf4j.Logger.info(java.lang.String,int,int,int,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9459/buggy-version/lib.src.main.java.edu.stanford.futuredata.macrobase.analysis.summary.aplinear.APrioriLinear.java", "BodyUseAPI": [], "Fixed commit": "daa803b648affb4836ced830d631d271a2ff18a1", "Url": "https://api.github.com/repos/stanford-futuredata/macrobase", "Date": "2018-03-12T05:43:47Z"},
{"Line": "281=>281", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.info(java.lang.String,int,int,double)=>org.slf4j.Logger.info(java.lang.String,int,int,int,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9459/buggy-version/lib.src.main.java.edu.stanford.futuredata.macrobase.analysis.summary.aplinear.APrioriLinear.java", "BodyUseAPI": [], "Fixed commit": "daa803b648affb4836ced830d631d271a2ff18a1", "Url": "https://api.github.com/repos/stanford-futuredata/macrobase", "Date": "2018-03-12T05:43:47Z"},
{"Line": "37=>37", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.common.collect.ImmutableSet.of(int,int,int)=>com.google.common.collect.ImmutableSet.of(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9459/buggy-version/lib.src.main.java.edu.stanford.futuredata.macrobase.analysis.summary.util.AttributeEncoder.java", "BodyUseAPI": [], "Fixed commit": "daa803b648affb4836ced830d631d271a2ff18a1", "Url": "https://api.github.com/repos/stanford-futuredata/macrobase", "Date": "2018-03-12T05:43:47Z"},
{"Line": "173=>173", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.entando.entando.aps.system.services.user.IUserService.addUserAuthorities(java.lang.String,org.entando.entando.web.user.model.UserAuthoritiesRequest)=>org.entando.entando.aps.system.services.user.IUserService.updateUserAuthorities(java.lang.String,org.entando.entando.web.user.model.UserAuthoritiesRequest)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1653/buggy-version/engine.src.main.java.org.entando.entando.web.user.UserController.java", "BodyUseAPI": [], "Fixed commit": "9135aca6fc4da01c4eddc8a223dd9ff65f487c4b", "Url": "https://api.github.com/repos/entando/entando-core", "Date": "2018-05-07T14:40:18Z"},
{"Line": "61=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new org.bson.Document(io.gravitee.repository.mongodb.ratelimit.MongoRateLimitRepository.FIELD_RESET_TIME, 1)=>new org.bson.Document(io.gravitee.repository.mongodb.ratelimit.MongoRateLimitRepository.FIELD_RESET_TIME, 1L)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8647/buggy-version/src.main.java.io.gravitee.repository.mongodb.ratelimit.MongoRateLimitRepository.java", "BodyUseAPI": [], "Fixed commit": "9f2f1e432ba23553a4ed653c45941febfe8950aa", "Url": "https://api.github.com/repos/GGui/gravitee-repository-mongodb", "Date": "2018-09-11T09:27:19Z"},
{"Line": "67=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new org.bson.Document(\"expireAfterSeconds\", 0)=>new org.bson.Document(\"expireAfterSeconds\", 0L)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8647/buggy-version/src.main.java.io.gravitee.repository.mongodb.ratelimit.MongoRateLimitRepository.java", "BodyUseAPI": [], "Fixed commit": "9f2f1e432ba23553a4ed653c45941febfe8950aa", "Url": "https://api.github.com/repos/GGui/gravitee-repository-mongodb", "Date": "2018-09-11T09:27:19Z"},
{"Line": "65=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Visual.fill(java.awt.Graphics2D,mainLayout.hexToPixel(h),int)=>Layout.hexToPixel(Hex)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/925/buggy-version/src.Visual.java", "BodyUseAPI": [], "Fixed commit": "49a38880765362a6c10b3fdb8cc43e5e7a5fda8e", "Url": "https://api.github.com/repos/kxu9969/Ground-Zero", "Date": "2018-07-25T19:58:49Z"},
{"Line": "322=>323", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.github.dockerjava.netty.NettyDockerCmdExecFactory.ReadTimeoutHandler.getDockerHost()=>com.github.dockerjava.core.DockerClientConfig.getDockerHost()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9161/buggy-version/src.main.java.com.github.dockerjava.netty.NettyDockerCmdExecFactory.java", "BodyUseAPI": [], "Fixed commit": "52cccb26cec2278ef3846c205f520a45e51a0c76", "Url": "https://api.github.com/repos/wreulicke/docker-java", "Date": "2018-03-27T09:41:20Z"},
{"Line": "73=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.bma.counter.clinic.appSingletone.ModelSiteOption.getInstance().getEmailId()=>com.bma.counter.clinic.appSingletone.ModelSiteOption.getInstance().getSupportEmail()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1119/buggy-version/app.src.main.java.com.bma.counter.clinic.ActivityTechSupport.java", "BodyUseAPI": [], "Fixed commit": "dc0687754a3c36c88166e53acf47227e7bbcc59d", "Url": "https://api.github.com/repos/Mukesh-Motvani/clinic-counter", "Date": "2018-09-05T15:42:07Z"},
{"Line": "79=>79", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.bma.counter.clinic.appSingletone.ModelSiteOption.getInstance().getMobileNumber()=>com.bma.counter.clinic.appSingletone.ModelSiteOption.getInstance().getSupportNumber()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1119/buggy-version/app.src.main.java.com.bma.counter.clinic.ActivityTechSupport.java", "BodyUseAPI": [], "Fixed commit": "dc0687754a3c36c88166e53acf47227e7bbcc59d", "Url": "https://api.github.com/repos/Mukesh-Motvani/clinic-counter", "Date": "2018-09-05T15:42:07Z"},
{"Line": "111=>105", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.bma.counter.clinic.appSingletone.ModelSiteOption.getInstance().getMobileNumber()=>com.bma.counter.clinic.appSingletone.ModelSiteOption.getInstance().getSupportNumber()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1119/buggy-version/app.src.main.java.com.bma.counter.clinic.ActivityTechSupport.java", "BodyUseAPI": [], "Fixed commit": "dc0687754a3c36c88166e53acf47227e7bbcc59d", "Url": "https://api.github.com/repos/Mukesh-Motvani/clinic-counter", "Date": "2018-09-05T15:42:07Z"},
{"Line": "55=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.wpi.first.wpilibj.smartdashboard.SendableChooser<edu.wpi.first.wpilibj.command.Command>.addObject(java.lang.String,org.usfirst.frc.team694.robot.commands.auton.RightSideOppositeScaleCommand)=>edu.wpi.first.wpilibj.smartdashboard.SendableChooser<edu.wpi.first.wpilibj.command.Command>.addObject(java.lang.String,org.usfirst.frc.team694.robot.commands.auton.DifferentSideLeftScaleAutonCommand)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7569/buggy-version/src.org.usfirst.frc.team694.robot.Robot.java", "BodyUseAPI": [], "Fixed commit": "7bd4c594bdbe3f54c3de1a9b8ba69869bcfdfb2e", "Url": "https://api.github.com/repos/Team694/motion-profiling-2018", "Date": "2018-06-21T19:35:24Z"},
{"Line": "55=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.wpi.first.wpilibj.smartdashboard.SendableChooser<edu.wpi.first.wpilibj.command.Command>.addObject(java.lang.String,org.usfirst.frc.team694.robot.commands.auton.RightSideOppositeScaleCommand)=>edu.wpi.first.wpilibj.smartdashboard.SendableChooser<edu.wpi.first.wpilibj.command.Command>.addObject(java.lang.String,org.usfirst.frc.team694.robot.commands.auton.DifferentSideLeftScaleAutonCommand)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7569/buggy-version/src.org.usfirst.frc.team694.robot.Robot.java", "BodyUseAPI": [], "Fixed commit": "7bd4c594bdbe3f54c3de1a9b8ba69869bcfdfb2e", "Url": "https://api.github.com/repos/Team694/motion-profiling-2018", "Date": "2018-06-21T19:35:24Z"},
{"Line": "24=>24", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.PrintStream.print(int)=>java.io.PrintStream.print(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8842/buggy-version/Lab00.java", "BodyUseAPI": [], "Fixed commit": "a51ad34578087f58200b45e272acb41e2bbd8da6", "Url": "https://api.github.com/repos/CalPolyCPE203F18/lab-0-jon77p", "Date": "2018-09-23T00:14:02Z"},
{"Line": "448=>448", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.graphics.Paint.setTypeface(android.graphics.Typeface.create(typeface, Typeface.NORMAL))=>android.graphics.Paint.setTypeface(android.graphics.Typeface)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4974/buggy-version/src.com.firebirdberlin.nightdream.CustomAnalogClock.java", "BodyUseAPI": [], "Fixed commit": "df4aa34d0f2addad21e4adabb284bb0e3235f225", "Url": "https://api.github.com/repos/firebirdberlin/nightdream", "Date": "2018-02-24T16:32:48Z"},
{"Line": "14=>14", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.core.network.StaticParam(java.lang.String,java.lang.String)=>org.jebtk.core.http.StaticParam(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6800/buggy-version/edu.columbia.rdf.edb.src.main.java.edu.columbia.rdf.edb.KeyParam.java", "BodyUseAPI": [], "Fixed commit": "a3bb8aefc18242eaf2e0a64c95b6e5d2ab1eb360", "Url": "https://api.github.com/repos/antonybholmes/edb", "Date": "2018-10-20T00:06:35Z"},
{"Line": "127=>127", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.core.network.UrlBuilder.resolve(java.lang.String)=>org.jebtk.core.http.UrlBuilder.resolve(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6800/buggy-version/edu.columbia.rdf.edb.src.main.java.edu.columbia.rdf.edb.EDBWLogin.java", "BodyUseAPI": [], "Fixed commit": "a3bb8aefc18242eaf2e0a64c95b6e5d2ab1eb360", "Url": "https://api.github.com/repos/antonybholmes/edb", "Date": "2018-10-20T00:06:35Z"},
{"Line": "131=>131", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.info(java.lang.String,org.jebtk.core.network.UrlBuilder)=>org.slf4j.Logger.info(java.lang.String,org.jebtk.core.http.UrlBuilder)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6800/buggy-version/edu.columbia.rdf.edb.src.main.java.edu.columbia.rdf.edb.EDBWLogin.java", "BodyUseAPI": [], "Fixed commit": "a3bb8aefc18242eaf2e0a64c95b6e5d2ab1eb360", "Url": "https://api.github.com/repos/antonybholmes/edb", "Date": "2018-10-20T00:06:35Z"},
{"Line": "77=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.seatmanagement.service.SeatingDetailsService.getAllSeatingDetails()=>com.seatmanagement.service.SeatingDetailsService.getSeatingDetailsBySeatingId(java.util.UUID)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1721/buggy-version/seatmanagement.src.com.seatmanagement.controller.SystemController.java", "BodyUseAPI": [], "Fixed commit": "48ee3d469108fc1cc83071981db64230db953fd6", "Url": "https://api.github.com/repos/SMIFresher/SeatsManagement", "Date": "2018-10-10T14:14:54Z"},
{"Line": "135=>135", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.seatmanagement.dao.impl.SeatingDetailsDaoImpl.getAllSeatingDetails()=>com.seatmanagement.dao.impl.SeatingDetailsDaoImpl.getSeatingDetailsBySeatingId(java.util.UUID)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1721/buggy-version/seatmanagement.src.com.seatmanagement.dao.impl.SeatingDetailsDaoImpl.java", "BodyUseAPI": [], "Fixed commit": "48ee3d469108fc1cc83071981db64230db953fd6", "Url": "https://api.github.com/repos/SMIFresher/SeatsManagement", "Date": "2018-10-10T14:14:54Z"},
{"Line": "588=>588", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "de.unihalle.informatik.MiToBo.core.imageJ.MTBRegion2D.addPixel(java.awt.geom.Point2D.Double)=>java.util.Vector<java.awt.geom.Point2D.Double>.add(java.awt.geom.Point2D.Double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4459/buggy-version/src.main.java.de.unihalle.informatik.MiToBo.core.imageJ.RoiManagerAdapter.java", "BodyUseAPI": [], "Fixed commit": "7cc96ce71977d7795a6243ef9388cdb7de48e0af", "Url": "https://api.github.com/repos/mitobo-hub/mitobo", "Date": "2018-01-03T12:57:46Z"},
{"Line": "158=>166", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Throwable.getClass()=>java.lang.String.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/189/buggy-version/spf4j-core.src.main.java.org.spf4j.base.Throwables.java", "BodyUseAPI": [], "Fixed commit": "927e9e1436f6a2049a96741da869a12eed29374d", "Url": "https://api.github.com/repos/zolyfarkas/spf4j", "Date": "2018-04-09T20:30:40Z"},
{"Line": "539=>539", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.slf4j.Logger.debug(java.lang.String)=>org.slf4j.Logger.trace(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2486/buggy-version/services.common.src.main.java.org.collectionspace.services.nuxeo.client.java.RemoteDocumentModelHandlerImpl.java", "BodyUseAPI": [], "Fixed commit": "66405e375010e324e568fbc34bc907de43027cbd", "Url": "https://api.github.com/repos/collectionspace/services", "Date": "2018-02-06T01:49:54Z"},
{"Line": "236=>238", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.format(java.lang.String,java.lang.String,java.lang.String,java.lang.String,authorityInstance.getTitleRef())=>java.lang.String.format(java.lang.String,tenant.getName(),java.lang.String,java.lang.String,java.lang.String,authorityInstance.getTitleRef())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2486/buggy-version/services.JaxRsServiceProvider.src.main.java.org.collectionspace.services.jaxrs.CSpaceResteasyBootstrap.java", "BodyUseAPI": [], "Fixed commit": "66405e375010e324e568fbc34bc907de43027cbd", "Url": "https://api.github.com/repos/collectionspace/services", "Date": "2018-02-06T01:49:54Z"},
{"Line": "170=>170", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "hudson.util.ListBoxModel.add(java.lang.String)=>hudson.util.ListBoxModel.add(java.lang.String,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6013/buggy-version/src.main.java.hudson.plugins.awsparameterstore.AwsParameterStoreBuildWrapper.java", "BodyUseAPI": [], "Fixed commit": "d538448c69eca35fec9b3ba7e3a6deec143c475b", "Url": "https://api.github.com/repos/jenkinsci/aws-parameter-store-plugin", "Date": "2018-04-05T18:24:28Z"},
{"Line": "157=>160", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.apitechnosoft.ipad.activity.UploadFromOutsideActivity.setDocShare(java.io.File)=>com.apitechnosoft.ipad.activity.UploadFromOutsideActivity.setDocShare(java.io.File,android.net.Uri)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7804/buggy-version/app.src.main.java.com.apitechnosoft.ipad.activity.UploadFromOutsideActivity.java", "BodyUseAPI": [], "Fixed commit": "e8fafd5597baa72c8e1f1e09dca00d450a6f83a5", "Url": "https://api.github.com/repos/neerajk0702/ipad", "Date": "2018-10-11T04:52:29Z"},
{"Line": "316=>319", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.webkit.WebView.loadUrl(java.lang.String)=>android.webkit.WebView.loadUrl(imageUri.toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7804/buggy-version/app.src.main.java.com.apitechnosoft.ipad.activity.UploadFromOutsideActivity.java", "BodyUseAPI": [], "Fixed commit": "e8fafd5597baa72c8e1f1e09dca00d450a6f83a5", "Url": "https://api.github.com/repos/neerajk0702/ipad", "Date": "2018-10-11T04:52:29Z"},
{"Line": "98=>98", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.util.Log.e(java.lang.String,java.lang.String)=>android.widget.Toast.makeText(com.manan.dev.ec2018app.SingleEventActivity,java.lang.String,Toast.LENGTH_SHORT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5143/buggy-version/app.src.main.java.com.manan.dev.ec2018app.SingleEventActivity.java", "BodyUseAPI": [], "Fixed commit": "6a147df3f41db9b5a4d681ea7147b1aba94a78d0", "Url": "https://api.github.com/repos/Manan-YMCA/EC2018App", "Date": "2018-03-20T20:16:25Z"},
{"Line": "98=>98", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.util.Log.e(java.lang.String,java.lang.String)=>android.widget.Toast.makeText(this, \"There's no such event.\", Toast.LENGTH_SHORT).show()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5143/buggy-version/app.src.main.java.com.manan.dev.ec2018app.SingleEventActivity.java", "BodyUseAPI": [], "Fixed commit": "6a147df3f41db9b5a4d681ea7147b1aba94a78d0", "Url": "https://api.github.com/repos/Manan-YMCA/EC2018App", "Date": "2018-03-20T20:16:25Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.error(Markers.fatal,java.lang.String)=>org.slf4j.Logger.error(Markers.fatal,java.lang.String,javax.servlet.ServletContextEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4110/buggy-version/api.src.main.java.uk.gov.hmcts.FeesServletContextListener.java", "BodyUseAPI": [], "Fixed commit": "a82f073db051bca88a812c8fa7dcd78f09dfa952", "Url": "https://api.github.com/repos/hmcts/ccfr-fees-register-app", "Date": "2018-09-25T12:45:30Z"},
{"Line": "407=>407", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.widget.Spinner.getSelectedItem()=>android.widget.Spinner.getSelectedItemPosition()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9607/buggy-version/app.src.main.java.edu.aku.hassannaqvi.wfpstuntingpishin.activities.SectionBActivity.java", "BodyUseAPI": [], "Fixed commit": "ec5c291318ade8f63618b57ae755c78a707d6492", "Url": "https://api.github.com/repos/shznaqvi/WFP-Stunting-Pishin-Baseline", "Date": "2018-01-04T11:17:04Z"},
{"Line": "38=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.text.DateFormat.format(java.util.Calendar)=>java.text.DateFormat.format(java.util.Date)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3296/buggy-version/app.src.main.java.com.bookbase.app.utils.Converters.java", "BodyUseAPI": [], "Fixed commit": "24f896f32e21aff2f5ceb320bdd988c98b27f100", "Url": "https://api.github.com/repos/lachlan-eagling/Bookbase", "Date": "2018-05-06T22:46:43Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "clientSide.gui.MyCoursesPanel.updateUI()=>clientSide.gui.MyCoursesPanel.update()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2783/buggy-version/clientSide.gui.MyCoursesPanel.java", "BodyUseAPI": [], "Fixed commit": "92521ec0ebffa77160d05f81bc352595d5321633", "Url": "https://api.github.com/repos/SunnyNagam/LearningPlatform", "Date": "2018-04-06T03:24:52Z"},
{"Line": "62=>62", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.osgi.framework.Bundle.findEntries(java.lang.String,java.lang.String,boolean)=>_bundles[i].findEntries(java.lang.String,java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3568/buggy-version/modules.apps.portal.portal-spring-extender-impl.src.main.java.com.liferay.portal.spring.extender.internal.bundle.CompositeResourceLoaderBundle.java", "BodyUseAPI": [], "Fixed commit": "33eec39180f9d9bb792245fab73cbf3ff3cef91c", "Url": "https://api.github.com/repos/adolfopa/liferay-portal", "Date": "2018-10-08T21:27:54Z"},
{"Line": "81=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "trclib.TrcPidActuator.setPower(double)=>trclib.TrcPidActuator.setPower(double,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9799/buggy-version/src.team492.Elevator.java", "BodyUseAPI": [], "Fixed commit": "24f66163db4fc07d58dfed233577abfb51834d76", "Url": "https://api.github.com/repos/trc492/Frc2018FirstPowerUp", "Date": "2018-02-11T03:39:02Z"},
{"Line": "136=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.lams.api.utils.MailAsynComponent.setNameAndCodeById(java.lang.Long,java.lang.Long,java.lang.Long,NotificationAlias.EMAIL_TO_LENDER_WHEN_LENDER_REVERT_BACK)=>com.lams.api.utils.MailAsynComponent.setNameAndCodeById(java.lang.Long,java.lang.Long,java.lang.Long,NotificationAlias.EMAIL_TO_BR_WHEN_LENDER_REVERT_BACK)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5951/buggy-version/api-lams.src.main.java.com.lams.api.utils.MailAsynComponent.java", "BodyUseAPI": [], "Fixed commit": "f02742c9a328e883c022c2c75e46b376c5081f0b", "Url": "https://api.github.com/repos/HarshitSuhagiya/api-lams", "Date": "2018-05-15T17:18:27Z"},
{"Line": "149=>149", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.lams.api.utils.MailAsynComponent.setNameAndCodeById(java.lang.Long,java.lang.Long,java.lang.Long,NotificationAlias.EMAIL_TO_BR_WHEN_LENDER_REVERT_BACK)=>com.lams.api.utils.MailAsynComponent.setNameAndCodeById(java.lang.Long,java.lang.Long,java.lang.Long,NotificationAlias.EMAIL_TO_LENDER_WHEN_LENDER_REVERT_BACK)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5951/buggy-version/api-lams.src.main.java.com.lams.api.utils.MailAsynComponent.java", "BodyUseAPI": [], "Fixed commit": "f02742c9a328e883c022c2c75e46b376c5081f0b", "Url": "https://api.github.com/repos/HarshitSuhagiya/api-lams", "Date": "2018-05-15T17:18:27Z"},
{"Line": "37=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.time.Duration.getSeconds()=>java.time.Duration.toMillis()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8880/buggy-version/loopa.src.main.java.org.loopa.TwitterMonitorSimulator.TwitterMonitorSimulator.java", "BodyUseAPI": [], "Fixed commit": "b60edb5c87f164e4f6dc0d440aaebfbfcd63ae21", "Url": "https://api.github.com/repos/Martouta/loopa", "Date": "2018-01-11T20:22:03Z"},
{"Line": "103=>103", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.getBytes()=>java.lang.String.getBytes(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/951/buggy-version/src.main.java.com.lanyu.miniprogram.service.ReportService.java", "BodyUseAPI": [], "Fixed commit": "674bd3045b226f2a048ade8df09d861354e0c095", "Url": "https://api.github.com/repos/Yansongsongsong/financial-calculator", "Date": "2018-10-17T14:31:17Z"},
{"Line": "185=>188", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "rddl.State.addConstants(rddl.RDDL.TYPE_NAME,java.util.ArrayList<rddl.RDDL.LCONST>)=>java.util.HashMap<rddl.RDDL.TYPE_NAME, java.util.ArrayList<rddl.RDDL.LCONST>>.put(rddl.RDDL.TYPE_NAME,java.util.ArrayList<rddl.RDDL.LCONST>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7151/buggy-version/src.rddl.State.java", "BodyUseAPI": [], "Fixed commit": "a5d2067214f8fc128e28072ea9596beb18324627", "Url": "https://api.github.com/repos/ssanner/rddlsim", "Date": "2018-02-20T14:54:18Z"},
{"Line": "80=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "((com.unnamedsoftware.russesamfunnet.MyApplication) (this.getApplication())).getRussId()=>((com.unnamedsoftware.russesamfunnet.MyApplication) (this.getApplication())).getAccessToken()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5531/buggy-version/app.src.main.java.com.unnamedsoftware.russesamfunnet.Feed.java", "BodyUseAPI": [], "Fixed commit": "6fb4949a7979004996acd78fce382458d300cb7e", "Url": "https://api.github.com/repos/UnnamedSoftware/Russesamfunnet.no---Android", "Date": "2018-03-14T12:32:29Z"},
{"Line": "58=>58", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "source.BikePartList.contains(basic.BikePart)=>java.util.ArrayList<basic.BikePart>.contains(basic.BikePart)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4435/buggy-version/src.sample.WhManager.java", "BodyUseAPI": [], "Fixed commit": "6facdfac8eea24b884da3508d7efb808eb9e928d", "Url": "https://api.github.com/repos/scoronado12/BikePartDistributorship", "Date": "2018-04-24T05:47:22Z"},
{"Line": "66=>66", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "destination.BikePartList.contains(basic.BikePart)=>java.util.ArrayList<basic.BikePart>.contains(basic.BikePart)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4435/buggy-version/src.sample.WhManager.java", "BodyUseAPI": [], "Fixed commit": "6facdfac8eea24b884da3508d7efb808eb9e928d", "Url": "https://api.github.com/repos/scoronado12/BikePartDistributorship", "Date": "2018-04-24T05:47:22Z"},
{"Line": "196=>196", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "src.BikePartList.contains(src.findBp(partName))=>src.getBPList().contains(src.findBp(partName))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4435/buggy-version/src.basic.fileActions.java", "BodyUseAPI": [], "Fixed commit": "6facdfac8eea24b884da3508d7efb808eb9e928d", "Url": "https://api.github.com/repos/scoronado12/BikePartDistributorship", "Date": "2018-04-24T05:47:22Z"},
{"Line": "1014=>1014", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.List<com.ajsg2.minimaljava.parse.Node>.add(com.ajsg2.minimaljava.parse.Node)=>java.util.List<com.ajsg2.minimaljava.parse.Node>.add(int,com.ajsg2.minimaljava.parse.Node)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3272/buggy-version/src.main.java.com.ajsg2.minimaljava.parse.Parser.java", "BodyUseAPI": [], "Fixed commit": "2c6beda9e9531ee32cf01cfc2f2a7409a373d8be", "Url": "https://api.github.com/repos/adamgemmell/minimaljava", "Date": "2018-03-13T02:53:57Z"},
{"Line": "1054=>1054", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.List<com.ajsg2.minimaljava.parse.Node>.add(com.ajsg2.minimaljava.parse.Node)=>java.util.List<com.ajsg2.minimaljava.parse.Node>.add(int,com.ajsg2.minimaljava.parse.Node)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3272/buggy-version/src.main.java.com.ajsg2.minimaljava.parse.Parser.java", "BodyUseAPI": [], "Fixed commit": "2c6beda9e9531ee32cf01cfc2f2a7409a373d8be", "Url": "https://api.github.com/repos/adamgemmell/minimaljava", "Date": "2018-03-13T02:53:57Z"},
{"Line": "1571=>1571", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.List<com.ajsg2.minimaljava.parse.Node>.addAll(java.util.List<com.ajsg2.minimaljava.parse.Node>)=>java.util.List<com.ajsg2.minimaljava.parse.Node>.addAll(int,java.util.List<com.ajsg2.minimaljava.parse.Node>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3272/buggy-version/src.main.java.com.ajsg2.minimaljava.parse.Parser.java", "BodyUseAPI": [], "Fixed commit": "2c6beda9e9531ee32cf01cfc2f2a7409a373d8be", "Url": "https://api.github.com/repos/adamgemmell/minimaljava", "Date": "2018-03-13T02:53:57Z"},
{"Line": "1071=>1071", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.List<com.ajsg2.minimaljava.parse.Node>.add(com.ajsg2.minimaljava.parse.Node)=>java.util.List<com.ajsg2.minimaljava.parse.Node>.add(int,com.ajsg2.minimaljava.parse.Node)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3272/buggy-version/src.main.java.com.ajsg2.minimaljava.parse.Parser.java", "BodyUseAPI": [], "Fixed commit": "2c6beda9e9531ee32cf01cfc2f2a7409a373d8be", "Url": "https://api.github.com/repos/adamgemmell/minimaljava", "Date": "2018-03-13T02:53:57Z"},
{"Line": "1265=>1265", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.List<com.ajsg2.minimaljava.parse.Node>.add(com.ajsg2.minimaljava.parse.Node)=>java.util.List<com.ajsg2.minimaljava.parse.Node>.add(int,com.ajsg2.minimaljava.parse.Node)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3272/buggy-version/src.main.java.com.ajsg2.minimaljava.parse.Parser.java", "BodyUseAPI": [], "Fixed commit": "2c6beda9e9531ee32cf01cfc2f2a7409a373d8be", "Url": "https://api.github.com/repos/adamgemmell/minimaljava", "Date": "2018-03-13T02:53:57Z"},
{"Line": "77=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.cgiar.ccafs.marlo.data.manager.PartnerRequestManager.deletePartnerRequest(partnerRequest.getId())=>org.cgiar.ccafs.marlo.data.model.PartnerRequest.setActive(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6731/buggy-version/marlo-web.src.main.java.org.cgiar.ccafs.marlo.action.json.superadmin.RejectPartnerRequestAction.java", "BodyUseAPI": [], "Fixed commit": "7c70efad8458b7a92800e1f247ba28ad8d333b53", "Url": "https://api.github.com/repos/CCAFS/MARLO", "Date": "2018-02-20T13:22:13Z"},
{"Line": "86=>86", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.model.person.Name.isValidName(java.lang.String)=>seedu.address.model.schedule.Type.isValidType(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/845/buggy-version/src.main.java.seedu.address.logic.parser.ParserUtil.java", "BodyUseAPI": [], "Fixed commit": "4d6c3af60bc221ca07b079b1ad87b213ca6aeed4", "Url": "https://api.github.com/repos/zhihong8888/main", "Date": "2018-10-12T17:46:22Z"},
{"Line": "60=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.replace(char,char)=>java.lang.String.format(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4724/buggy-version/Steg.java", "BodyUseAPI": [], "Fixed commit": "a0e51b2c7bf3bf5cb10d3caf5f7fdbf5e03b8188", "Url": "https://api.github.com/repos/TheSchaft/Steg", "Date": "2018-02-09T04:59:55Z"},
{"Line": "60=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.replace(char,char)=>java.lang.String.format(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4724/buggy-version/Steg.java", "BodyUseAPI": [], "Fixed commit": "a0e51b2c7bf3bf5cb10d3caf5f7fdbf5e03b8188", "Url": "https://api.github.com/repos/TheSchaft/Steg", "Date": "2018-02-09T04:59:55Z"},
{"Line": "60=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.format(java.lang.String,java.lang.String)=>java.lang.String.replace(char,char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4724/buggy-version/Steg.java", "BodyUseAPI": [], "Fixed commit": "a0e51b2c7bf3bf5cb10d3caf5f7fdbf5e03b8188", "Url": "https://api.github.com/repos/TheSchaft/Steg", "Date": "2018-02-09T04:59:55Z"},
{"Line": "25=>25", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.format(java.lang.String,java.lang.String)=>java.lang.String.replace(char,char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4724/buggy-version/Steg.java", "BodyUseAPI": [], "Fixed commit": "a0e51b2c7bf3bf5cb10d3caf5f7fdbf5e03b8188", "Url": "https://api.github.com/repos/TheSchaft/Steg", "Date": "2018-02-09T04:59:55Z"},
{"Line": "62=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.PrintWriter.print(java.lang.StringBuilder)=>java.io.PrintWriter.print(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4724/buggy-version/Steg.java", "BodyUseAPI": [], "Fixed commit": "a0e51b2c7bf3bf5cb10d3caf5f7fdbf5e03b8188", "Url": "https://api.github.com/repos/TheSchaft/Steg", "Date": "2018-02-09T04:59:55Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.replace(char,char)=>java.lang.String.format(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4724/buggy-version/Steg.java", "BodyUseAPI": [], "Fixed commit": "a0e51b2c7bf3bf5cb10d3caf5f7fdbf5e03b8188", "Url": "https://api.github.com/repos/TheSchaft/Steg", "Date": "2018-02-09T04:59:55Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.format(java.lang.String,java.lang.String)=>java.lang.String.replace(char,char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4724/buggy-version/Steg.java", "BodyUseAPI": [], "Fixed commit": "a0e51b2c7bf3bf5cb10d3caf5f7fdbf5e03b8188", "Url": "https://api.github.com/repos/TheSchaft/Steg", "Date": "2018-02-09T04:59:55Z"},
{"Line": "497=>502", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.firecraftmc.shared.classes.Bukkit.getScoreboardManager()=>org.bukkit.Bukkit.getScoreboardManager()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "224=>229", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.firecraftmc.shared.classes.Bukkit.getServer()=>org.bukkit.Bukkit.getServer()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "528=>533", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.DARK_AQUA,java.lang.String,java.lang.String,int)=>net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.DARK_AQUA,java.lang.String,java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "519=>524", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.BLUE,java.lang.String,java.lang.String,int)=>net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.BLUE,java.lang.String,java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "249=>254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.bukkit.entity.Player.teleport(net.firecraftmc.shared.classes.Location)=>org.bukkit.entity.Player.teleport(org.bukkit.Location)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "533=>538", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.DARK_RED,java.lang.String,java.lang.String,int)=>net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.DARK_RED,java.lang.String,java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "80=>85", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.firecraftmc.shared.classes.Bukkit.getPluginManager()=>org.bukkit.Bukkit.getPluginManager()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "517=>522", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.GREEN,java.lang.String,java.lang.String,int)=>net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.GREEN,java.lang.String,java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "535=>540", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.DARK_RED,java.lang.String,java.lang.String,int)=>net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.DARK_RED,java.lang.String,java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "545=>550", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.firecraftmc.shared.classes.Bukkit.getServer()=>org.bukkit.Bukkit.getServer()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "552=>557", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.firecraftmc.shared.classes.ChatColor.toString()=>org.bukkit.ChatColor.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "218=>223", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.firecraftmc.shared.classes.ChatColor.translateAlternateColorCodes(char,java.lang.String)=>org.bukkit.ChatColor.translateAlternateColorCodes(char,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "218=>223", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.firecraftmc.shared.classes.ChatColor.translateAlternateColorCodes(char,java.lang.String)=>org.bukkit.ChatColor.translateAlternateColorCodes(char,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "546=>551", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.DARK_GRAY,java.lang.String,java.lang.String,int)=>net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.DARK_GRAY,java.lang.String,java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "526=>531", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.BOLD,java.lang.String,((channel.getColor()) + (channel.toString())),int)=>net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.BOLD,java.lang.String,((channel.getColor()) + (channel.toString())),int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "516=>521", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.WHITE,java.lang.String,java.lang.String,int)=>net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.WHITE,java.lang.String,java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "523=>528", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.BLUE,java.lang.String,player.getMainRank().getPrefix(),int)=>net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.BLUE,java.lang.String,player.getMainRank().getPrefix(),int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "538=>543", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.DARK_BLUE,java.lang.String,java.lang.String,int)=>net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.DARK_BLUE,java.lang.String,java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "530=>535", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.DARK_AQUA,java.lang.String,java.lang.String,int)=>net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.DARK_AQUA,java.lang.String,java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "555=>560", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.firecraftmc.shared.classes.ChatColor.toString()=>org.bukkit.ChatColor.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "242=>247", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.bukkit.entity.Player.setGameMode(net.firecraftmc.shared.classes.GameMode)=>org.bukkit.entity.Player.setGameMode(org.bukkit.GameMode)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "515=>520", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.AQUA,java.lang.String,java.lang.String,int)=>net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.AQUA,java.lang.String,java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "537=>542", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.GRAY,java.lang.String,java.lang.String,int)=>net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.addTeam(net.firecraftmc.shared.classes.FirecraftPlayer.FirecraftScoreboard.SBField,java.lang.String,ChatColor.GRAY,java.lang.String,java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3759/buggy-version/src.java.net.firecraftmc.shared.classes.FirecraftPlayer.java", "BodyUseAPI": [], "Fixed commit": "bbb1ff7e6f58d2378db8b46ad5a85065704afa5e", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-05-17T22:50:18Z"},
{"Line": "250=>250", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.fasterxml.jackson.databind.jsontype.TypeResolverProvider._constructStdTypeResolverBuilder(JsonTypeInfo.Value)=>com.fasterxml.jackson.databind.jsontype.TypeResolverProvider._constructStdTypeResolverBuilder(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,JsonTypeInfo.Value,com.fasterxml.jackson.databind.jsontype.JavaType)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6332/buggy-version/src.main.java.com.fasterxml.jackson.databind.jsontype.TypeResolverProvider.java", "BodyUseAPI": [], "Fixed commit": "f203048f575e48226e8fba7dc4f271bc91c5d70b", "Url": "https://api.github.com/repos/FasterXML/jackson-databind", "Date": "2018-03-15T05:12:32Z"},
{"Line": "70=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.wso2.carbon.database.query.manager.config.Queries.getType()=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9088/buggy-version/components.org.wso2.carbon.database.query.manager.src.main.java.org.wso2.carbon.database.query.manager.QueryProvider.java", "BodyUseAPI": [], "Fixed commit": "d276a1b503d72d9712097806a973fbfc2047c7db", "Url": "https://api.github.com/repos/ksdperera/carbon-analytics-common", "Date": "2018-09-12T06:30:28Z"},
{"Line": "70=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "queries.getType().equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9088/buggy-version/components.org.wso2.carbon.database.query.manager.src.main.java.org.wso2.carbon.database.query.manager.QueryProvider.java", "BodyUseAPI": [], "Fixed commit": "d276a1b503d72d9712097806a973fbfc2047c7db", "Url": "https://api.github.com/repos/ksdperera/carbon-analytics-common", "Date": "2018-09-12T06:30:28Z"},
{"Line": "72=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "queries.getType().equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9088/buggy-version/components.org.wso2.carbon.database.query.manager.src.main.java.org.wso2.carbon.database.query.manager.QueryProvider.java", "BodyUseAPI": [], "Fixed commit": "d276a1b503d72d9712097806a973fbfc2047c7db", "Url": "https://api.github.com/repos/ksdperera/carbon-analytics-common", "Date": "2018-09-12T06:30:28Z"},
{"Line": "73=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "queries.getVersion().equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9088/buggy-version/components.org.wso2.carbon.database.query.manager.src.main.java.org.wso2.carbon.database.query.manager.QueryProvider.java", "BodyUseAPI": [], "Fixed commit": "d276a1b503d72d9712097806a973fbfc2047c7db", "Url": "https://api.github.com/repos/ksdperera/carbon-analytics-common", "Date": "2018-09-12T06:30:28Z"},
{"Line": "61=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "queries.getType().equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9088/buggy-version/components.org.wso2.carbon.database.query.manager.src.main.java.org.wso2.carbon.database.query.manager.QueryProvider.java", "BodyUseAPI": [], "Fixed commit": "d276a1b503d72d9712097806a973fbfc2047c7db", "Url": "https://api.github.com/repos/ksdperera/carbon-analytics-common", "Date": "2018-09-12T06:30:28Z"},
{"Line": "146=>146", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.ArrayList<fhsschedule.Student>.get(int)=>java.util.ArrayList<fhsschedule.Student>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4467/buggy-version/src.fhsschedule.FHSSchedule.java", "BodyUseAPI": [], "Fixed commit": "97d7d1b5e142aed9d2297e5ee420fa612f2cb437", "Url": "https://api.github.com/repos/JBobda/HighSchoolSchedule", "Date": "2018-05-11T00:14:28Z"},
{"Line": "260=>260", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.intellij.util.SystemProperties.getUserHome()=>com.intellij.openapi.application.PathManager.platformPath(java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8085/buggy-version/platform.util.src.com.intellij.openapi.application.PathManager.java", "BodyUseAPI": [], "Fixed commit": "31595215fea533f1db06119881dff0ed129279d2", "Url": "https://api.github.com/repos/StingNevermore/intellij-community", "Date": "2018-02-22T15:04:42Z"},
{"Line": "61=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.example.eliavmenachi.myapplication.ViewModels.SaleListViewModel.getData()=>com.example.eliavmenachi.myapplication.ViewModels.SaleListViewModel.getDataByStoreId(boolean,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2909/buggy-version/app.src.main.java.com.example.eliavmenachi.myapplication.Fragments.SalesListFragment.java", "BodyUseAPI": [], "Fixed commit": "29f7b07dbc88ae467a0e29546634dc2ecc85e0ba", "Url": "https://api.github.com/repos/OrForte/Sale-App", "Date": "2018-07-27T06:45:23Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.contains(java.lang.String)=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9070/buggy-version/boot-uploader.boot-uploader.src.main.java.org.boot.uploader.util.FileUtils.java", "BodyUseAPI": [], "Fixed commit": "6501bd14b3012a14e8a85f72ada8e945925f9f9a", "Url": "https://api.github.com/repos/LuoLiangDSGA/spring-learning", "Date": "2018-07-17T15:06:56Z"},
{"Line": "73=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.boot.uploader.controller.UploadController.merge(java.lang.String,java.lang.String)=>org.boot.uploader.controller.UploadController.merge(java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9070/buggy-version/boot-uploader.boot-uploader.src.main.java.org.boot.uploader.controller.UploadController.java", "BodyUseAPI": [], "Fixed commit": "6501bd14b3012a14e8a85f72ada8e945925f9f9a", "Url": "https://api.github.com/repos/LuoLiangDSGA/spring-learning", "Date": "2018-07-17T15:06:56Z"},
{"Line": "128=>131", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.graphics.Bitmap.getWidth()=>android.graphics.Bitmap.createBitmap(android.graphics.Bitmap,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7308/buggy-version/src.main.java.com.appliedrec.ver_idsample.RegisteredUserActivity.java", "BodyUseAPI": [], "Fixed commit": "08da92aee754015a0cf5b1167574e60295cd17dc", "Url": "https://api.github.com/repos/AppliedRecognition/Ver-ID-Android-Sample", "Date": "2018-05-09T18:37:16Z"},
{"Line": "128=>131", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.graphics.Bitmap.createBitmap(android.graphics.Bitmap,int,double,grayscaleBitmap.getWidth(),grayscaleBitmap.getWidth())=>android.graphics.Bitmap.createBitmap(android.graphics.Bitmap,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7308/buggy-version/src.main.java.com.appliedrec.ver_idsample.RegisteredUserActivity.java", "BodyUseAPI": [], "Fixed commit": "08da92aee754015a0cf5b1167574e60295cd17dc", "Url": "https://api.github.com/repos/AppliedRecognition/Ver-ID-Android-Sample", "Date": "2018-05-09T18:37:16Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.codecool.web.repository.AdRepository.findAllByStateAndOrderByIsPremiumDescTimestampDesc(java.lang.String)=>com.codecool.web.repository.AdRepository.findAllByStateOrderByIsPremiumDescTimestampDesc(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2229/buggy-version/src.main.java.com.codecool.web.service.AdService.java", "BodyUseAPI": [], "Fixed commit": "c5fc346e23fec13211050b227e361bbdffbf5dd7", "Url": "https://api.github.com/repos/CodecoolMSC2017/lend-a-hand-back-end", "Date": "2018-08-14T10:38:02Z"},
{"Line": "51=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.claireroop.donatiun_2340.Controller.RegisterActivity.findViewById(R.id.AccountTypeSpinner)=>android.util.Log.println(Log.DEBUG,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3426/buggy-version/app.src.main.java.com.example.claireroop.donatiun_2340.Controller.RegisterActivity.java", "BodyUseAPI": [], "Fixed commit": "2f34261ccfa9664f3368274a7470b82258ab85da", "Url": "https://api.github.com/repos/mcRoop398/Donatiun2340", "Date": "2018-10-01T01:55:58Z"},
{"Line": "58=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.conch.Conch.getStringProperty(\"sharder.myAddress\").trim().length()=>org.conch.util.Convert.nullToEmpty(org.conch.Conch.getStringProperty(\"sharder.myAddress\")).trim()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8314/buggy-version/src.java.org.conch.storage.ipfs.Daemon.java", "BodyUseAPI": [], "Fixed commit": "978e51a630488135e47ae8f15394af2bf965f79b", "Url": "https://api.github.com/repos/Sharders/sharder-chain", "Date": "2018-09-21T02:53:55Z"},
{"Line": "58=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.conch.Conch.getStringProperty(\"sharder.myAddress\").trim()=>org.conch.util.Convert.nullToEmpty(org.conch.Conch.getStringProperty(\"sharder.myAddress\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8314/buggy-version/src.java.org.conch.storage.ipfs.Daemon.java", "BodyUseAPI": [], "Fixed commit": "978e51a630488135e47ae8f15394af2bf965f79b", "Url": "https://api.github.com/repos/Sharders/sharder-chain", "Date": "2018-09-21T02:53:55Z"},
{"Line": "14=>14", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.PrintStream.print(tree.findMinimum().key)=>java.io.PrintStream.println(tree.findMinimum().key)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/590/buggy-version/src.ds.binarysearchtree.App.java", "BodyUseAPI": [], "Fixed commit": "9aa7ad38a9596f068e236412f7dc918aedfd712e", "Url": "https://api.github.com/repos/cnpalmer83/learning-datastructures", "Date": "2018-07-06T18:12:16Z"},
{"Line": "80=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "bench.ThroughputBenchmark.performUpdates()=>bench.ThroughputBenchmark.performUpdatesSingleThreadedCommits()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1933/buggy-version/src.main.java.org.bverify.MPTThroughputBenchmark.java", "BodyUseAPI": [], "Fixed commit": "d2c1690d0da328e4b041ad7bb159dd489ef15793", "Url": "https://api.github.com/repos/b-verify/merkle-prefix-trie-benchmark", "Date": "2018-06-05T13:56:36Z"},
{"Line": "90=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "bench.ThroughputBenchmark.commitUpdatesParallelized(java.util.concurrent.ExecutorService)=>bench.ThroughputBenchmark.performUpdatesParallelizedCommits(java.util.concurrent.ExecutorService)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1933/buggy-version/src.main.java.org.bverify.MPTThroughputBenchmark.java", "BodyUseAPI": [], "Fixed commit": "d2c1690d0da328e4b041ad7bb159dd489ef15793", "Url": "https://api.github.com/repos/b-verify/merkle-prefix-trie-benchmark", "Date": "2018-06-05T13:56:36Z"},
{"Line": "100=>104", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.wso2.carbon.identity.sso.saml.SAMLSSOArtifactResolver.buildArtifactResponse(org.opensaml.saml2.core.Response,org.opensaml.saml2.core.ArtifactResolve,artifactInfo.getAuthnReqDTO())=>org.wso2.carbon.identity.sso.saml.SAMLSSOArtifactResolver.buildArtifactResponse(org.opensaml.saml2.core.Response,org.opensaml.saml2.core.ArtifactResolve,org.wso2.carbon.identity.sso.saml.dto.SAML2ArtifactInfo)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/627/buggy-version/components.org.wso2.carbon.identity.sso.saml.src.main.java.org.wso2.carbon.identity.sso.saml.SAMLSSOArtifactResolver.java", "BodyUseAPI": [], "Fixed commit": "3f672dcfc59d6d8cd5382d8ba8cd92cc1850bc02", "Url": "https://api.github.com/repos/sachiniWettasinghe/identity-inbound-auth-saml", "Date": "2018-09-05T11:15:07Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<particlesystem.Emitter.Emitter>.iterator()=>java.util.Vector<particlesystem.Emitter.Emitter>.iterator()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7523/buggy-version/CLIENT.src.particlesystem.Emitter.EmitterManager.java", "BodyUseAPI": [], "Fixed commit": "2025807112f621b63360d1df4b097627077c4c5c", "Url": "https://api.github.com/repos/Titousensei/bluesaga", "Date": "2018-04-30T02:22:40Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<particlesystem.Emitter.Emitter>.get(int)=>java.util.Vector<particlesystem.Emitter.Emitter>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7523/buggy-version/CLIENT.src.particlesystem.Emitter.EmitterManager.java", "BodyUseAPI": [], "Fixed commit": "2025807112f621b63360d1df4b097627077c4c5c", "Url": "https://api.github.com/repos/Titousensei/bluesaga", "Date": "2018-04-30T02:22:40Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<particlesystem.Emitter.Emitter>.get(int)=>java.util.Vector<particlesystem.Emitter.Emitter>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7523/buggy-version/CLIENT.src.particlesystem.Emitter.EmitterManager.java", "BodyUseAPI": [], "Fixed commit": "2025807112f621b63360d1df4b097627077c4c5c", "Url": "https://api.github.com/repos/Titousensei/bluesaga", "Date": "2018-04-30T02:22:40Z"},
{"Line": "45=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<particlesystem.Emitter.Emitter>.size()=>java.util.Vector<particlesystem.Emitter.Emitter>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7523/buggy-version/CLIENT.src.particlesystem.Emitter.EmitterManager.java", "BodyUseAPI": [], "Fixed commit": "2025807112f621b63360d1df4b097627077c4c5c", "Url": "https://api.github.com/repos/Titousensei/bluesaga", "Date": "2018-04-30T02:22:40Z"},
{"Line": "85=>85", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<particlesystem.Emitter.Emitter>.add(particlesystem.Emitter.Emitter)=>java.util.Vector<particlesystem.Emitter.Emitter>.add(particlesystem.Emitter.Emitter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7523/buggy-version/CLIENT.src.particlesystem.Emitter.EmitterManager.java", "BodyUseAPI": [], "Fixed commit": "2025807112f621b63360d1df4b097627077c4c5c", "Url": "https://api.github.com/repos/Titousensei/bluesaga", "Date": "2018-04-30T02:22:40Z"},
{"Line": "91=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<particlesystem.Emitter.Emitter>.clear()=>java.util.Vector<particlesystem.Emitter.Emitter>.clear()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7523/buggy-version/CLIENT.src.particlesystem.Emitter.EmitterManager.java", "BodyUseAPI": [], "Fixed commit": "2025807112f621b63360d1df4b097627077c4c5c", "Url": "https://api.github.com/repos/Titousensei/bluesaga", "Date": "2018-04-30T02:22:40Z"},
{"Line": "63=>63", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<particlesystem.Emitter.Emitter>.add(particlesystem.Emitter.Emitter)=>java.util.Vector<particlesystem.Emitter.Emitter>.add(particlesystem.Emitter.Emitter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7523/buggy-version/CLIENT.src.particlesystem.Emitter.EmitterManager.java", "BodyUseAPI": [], "Fixed commit": "2025807112f621b63360d1df4b097627077c4c5c", "Url": "https://api.github.com/repos/Titousensei/bluesaga", "Date": "2018-04-30T02:22:40Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<particlesystem.Emitter.Emitter>.get(int)=>java.util.Vector<particlesystem.Emitter.Emitter>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7523/buggy-version/CLIENT.src.particlesystem.Emitter.EmitterManager.java", "BodyUseAPI": [], "Fixed commit": "2025807112f621b63360d1df4b097627077c4c5c", "Url": "https://api.github.com/repos/Titousensei/bluesaga", "Date": "2018-04-30T02:22:40Z"},
{"Line": "47=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<particlesystem.Emitter.Emitter>.get(int)=>java.util.Vector<particlesystem.Emitter.Emitter>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7523/buggy-version/CLIENT.src.particlesystem.Emitter.EmitterManager.java", "BodyUseAPI": [], "Fixed commit": "2025807112f621b63360d1df4b097627077c4c5c", "Url": "https://api.github.com/repos/Titousensei/bluesaga", "Date": "2018-04-30T02:22:40Z"},
{"Line": "76=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<particlesystem.Emitter.Emitter>.add(particlesystem.Emitter.Emitter)=>java.util.Vector<particlesystem.Emitter.Emitter>.add(particlesystem.Emitter.Emitter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7523/buggy-version/CLIENT.src.particlesystem.Emitter.EmitterManager.java", "BodyUseAPI": [], "Fixed commit": "2025807112f621b63360d1df4b097627077c4c5c", "Url": "https://api.github.com/repos/Titousensei/bluesaga", "Date": "2018-04-30T02:22:40Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<particlesystem.Emitter.Emitter>.size()=>java.util.Vector<particlesystem.Emitter.Emitter>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7523/buggy-version/CLIENT.src.particlesystem.Emitter.EmitterManager.java", "BodyUseAPI": [], "Fixed commit": "2025807112f621b63360d1df4b097627077c4c5c", "Url": "https://api.github.com/repos/Titousensei/bluesaga", "Date": "2018-04-30T02:22:40Z"},
{"Line": "108=>110", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "newExternalIssue.at(primaryLocation).forRule(org.sonar.api.rule.RuleKey.of(linterName(), \"generic\")).type(RuleType.CODE_SMELL)=>newExternalIssue.at(primaryLocation).forRule(org.sonar.api.rule.RuleKey.of(linterId(), \"generic\")).type(RuleType.BUG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2223/buggy-version/sonar-go-plugin.src.main.java.org.sonar.go.plugin.externalreport.AbstractReportSensor.java", "BodyUseAPI": [], "Fixed commit": "2f9d9bf4a372d298f630e609a6eb1797f9488cb8", "Url": "https://api.github.com/repos/SonarSource/sonar-go", "Date": "2018-05-30T13:33:49Z"},
{"Line": "110=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.sonar.go.plugin.externalreport.AbstractReportSensor.linterName()=>org.sonar.go.plugin.externalreport.AbstractReportSensor.linterId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2223/buggy-version/sonar-go-plugin.src.main.java.org.sonar.go.plugin.externalreport.AbstractReportSensor.java", "BodyUseAPI": [], "Fixed commit": "2f9d9bf4a372d298f630e609a6eb1797f9488cb8", "Url": "https://api.github.com/repos/SonarSource/sonar-go", "Date": "2018-05-30T13:33:49Z"},
{"Line": "133=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.equals(imp.getProvider().getLabel())=>java.util.List<java.lang.String>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8536/buggy-version/src.main.java.uk.org.tombolo.execution.DataExportEngine.java", "BodyUseAPI": [], "Fixed commit": "9d088b01dcef8fc72549e1e3a12fb2c12a8a2c94", "Url": "https://api.github.com/repos/FutureCitiesCatapult/TomboloDigitalConnector", "Date": "2018-01-03T15:26:13Z"},
{"Line": "58=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "htsjdk.variant.variantcontext.VariantContext.getReference()=>htsjdk.variant.variantcontext.VariantContext.getContig()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9009/buggy-version/src.main.java.org.bgi.flexlab.zhangyong.vcfdpcount.VCFDPCount.java", "BodyUseAPI": [], "Fixed commit": "1254aef32a3fdcd4ee939394bd0101ea15d1b258", "Url": "https://api.github.com/repos/zym1905/bioinformatics", "Date": "2018-07-31T10:11:56Z"},
{"Line": "11=>17", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.format(java.lang.String,java.lang.String,java.lang.String)=>java.lang.String.format(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5060/buggy-version/binlog-core.src.main.java.com.datatrees.datacenter.core.utility.IPUtility.java", "BodyUseAPI": [], "Fixed commit": "84d352f18e21970ec10632460b4229b17de6e0c1", "Url": "https://api.github.com/repos/pecanNBU/binlog-processer", "Date": "2018-09-18T05:58:49Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getWindow().setBackgroundDrawableResource(R.drawable.background)=>getWindow().setBackgroundDrawableResource(R.drawable.loginimage)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3215/buggy-version/app.src.main.java.com.company.mat.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "75be0591459b1cc05be53132895580eb210505b3", "Url": "https://api.github.com/repos/alassadi/Mat", "Date": "2018-03-20T12:37:41Z"},
{"Line": "82=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.error(((\"fn:exactly-one called with a sequence containing \" + (result.getItemCount())) + \" items\"))=>org.apache.logging.log4j.Logger.trace(((\"fn:exactly-one called with a sequence containing \" + (result.getItemCount())) + \" items\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1051/buggy-version/src.org.exist.xquery.functions.fn.FunExactlyOne.java", "BodyUseAPI": [], "Fixed commit": "cf1544eb1cc7cf8e44fd345a8f5df03a7b756f5d", "Url": "https://api.github.com/repos/joewiz/exist", "Date": "2018-07-12T13:33:25Z"},
{"Line": "139=>141", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.error(((errorDesc + \": \") + (errorCode.toString())))=>org.apache.logging.log4j.Logger.trace(((errorDesc + \": \") + (errorCode.toString())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1051/buggy-version/src.org.exist.xquery.functions.fn.FunError.java", "BodyUseAPI": [], "Fixed commit": "cf1544eb1cc7cf8e44fd345a8f5df03a7b756f5d", "Url": "https://api.github.com/repos/joewiz/exist", "Date": "2018-07-12T13:33:25Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.minecraft.item.Item.getItemFromBlock(SB_Blocks.EXTRACTOR)=>net.minecraft.item.Item.getItemFromBlock(SB_Blocks.GENERATOR_COMBUSTION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7463/buggy-version/src.main.java.com.sciencebitch.blocks.machines.generators.BlockCombustionGenerator.java", "BodyUseAPI": [], "Fixed commit": "d88ba9f55bf2aa038ed7830cabd6ced81a7ed095", "Url": "https://api.github.com/repos/Thal1ka/ScienceBitch", "Date": "2018-08-12T12:58:13Z"},
{"Line": "31=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.bukkit.entity.Player.getTargetBlock(<nulltype>,int)=>org.bukkit.entity.Player.getTargetBlock(<nulltype>,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6885/buggy-version/src.gadgets.brainsynder.Gadgets.List.Gadget_Paintsprayer.java", "BodyUseAPI": [], "Fixed commit": "5708dccd83874cbe09419aaf61ea41381a975cad", "Url": "https://api.github.com/repos/brainsynder-Dev/SimpleGadgets", "Date": "2018-02-19T23:43:32Z"},
{"Line": "60=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.nio.ByteBuffer.get(byte[],int,int)=>java.nio.ByteBuffer.get(byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5879/buggy-version/src.main.java.bike.guyona.exdepot.sortingrules.ItemSortingRuleFactory.java", "BodyUseAPI": [], "Fixed commit": "6b292e69136fd7a95da35f2bc2f50211307ec39d", "Url": "https://api.github.com/repos/longbowrocks/ExplorersDepot", "Date": "2018-03-12T21:15:06Z"},
{"Line": "71=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.nio.ByteBuffer.get(byte[],int,int)=>java.nio.ByteBuffer.get(byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5879/buggy-version/src.main.java.bike.guyona.exdepot.sortingrules.ItemSortingRuleFactory.java", "BodyUseAPI": [], "Fixed commit": "6b292e69136fd7a95da35f2bc2f50211307ec39d", "Url": "https://api.github.com/repos/longbowrocks/ExplorersDepot", "Date": "2018-03-12T21:15:06Z"},
{"Line": "1223=>1223", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.app.ProgressDialog.hide()=>android.app.ProgressDialog.dismiss()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2157/buggy-version/Mobilib.src.com.datdo.mobilib.util.MblUtils.java", "BodyUseAPI": [], "Fixed commit": "def4268a77c4f2d09edf7032b06451b681284d4a", "Url": "https://api.github.com/repos/datdojp/mobilib", "Date": "2018-02-19T03:50:13Z"},
{"Line": "213=>213", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.commons.configuration.XMLConfiguration.getString(java.lang.String)=>org.apache.commons.configuration.XMLConfiguration.getString(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6445/buggy-version/src.com.oltpbenchmark.DBWorkload.java", "BodyUseAPI": [], "Fixed commit": "47ebc640e4ce0aa495ce7467e7ad403e81c2458e", "Url": "https://api.github.com/repos/kbavishi/oltpbench", "Date": "2018-02-12T01:55:12Z"},
{"Line": "435=>443", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.System.exit(int)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3040/buggy-version/src.cli.AdminAndManager.java", "BodyUseAPI": [], "Fixed commit": "66f74739a828507c69adcce4e1794a6b48edcf21", "Url": "https://api.github.com/repos/johnsolo15/AZ-Penguins", "Date": "2018-07-12T22:43:21Z"},
{"Line": "70=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "this.qm.createQuery(((((((\"select gdoc.fullName from Document edoc, edoc.object(\" + (this.localSerializer.serialize(PrimaryEntityGroup.GROUP_MEMBERSHIP_CLASS))) + \") as binding, Document gdoc, gdoc.object(\") + (this.localSerializer.serialize(org.phenotips.entities.internal.AbstractPrimaryEntityGroupManager.getEntityXClassReference()))) + \") as grp where gdoc.space = :gspace and binding.reference = concat('\") + (this.xcontextProvider.get().getWikiId())) + \":', gdoc.fullName) and edoc.fullName = :name order by gdoc.fullName asc\"),Query.XWQL)=>this.qm.createQuery(java.lang.String,Query.HQL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1138/buggy-version/components.entities.api.src.main.java.org.phenotips.entities.internal.AbstractPrimaryEntityGroupManager.java", "BodyUseAPI": [], "Fixed commit": "612e35d83f9ccecda93dbcac901e38bc84775da9", "Url": "https://api.github.com/repos/phenotips/phenotips", "Date": "2016-09-16T00:00:20Z"},
{"Line": "57=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.netcracker.travelplanner.service.InitializatorApi.setCitiesFrom(com.netcracker.travelplanner.service.EdgeService.getCities(iataCodeFrom, latFrom, lonFrom))=>com.netcracker.travelplanner.service.InitializatorApi.setCitiesFrom(java.util.List<com.netcracker.travelplanner.entities.Point>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7143/buggy-version/travelplanner.src.main.java.com.netcracker.travelplanner.service.PreparingDataService.java", "BodyUseAPI": [], "Fixed commit": "f0a19acab918c4a388cda008504ed1fed421733a", "Url": "https://api.github.com/repos/Millerovrus/TravelPlan", "Date": "2018-03-14T21:53:07Z"},
{"Line": "58=>94", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.netcracker.travelplanner.service.InitializatorApi.setCitiesTo(com.netcracker.travelplanner.service.EdgeService.getCities(iataCodeTo, latTo, lonTo))=>com.netcracker.travelplanner.service.InitializatorApi.setCitiesTo(java.util.List<com.netcracker.travelplanner.entities.Point>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7143/buggy-version/travelplanner.src.main.java.com.netcracker.travelplanner.service.PreparingDataService.java", "BodyUseAPI": [], "Fixed commit": "f0a19acab918c4a388cda008504ed1fed421733a", "Url": "https://api.github.com/repos/Millerovrus/TravelPlan", "Date": "2018-03-14T21:53:07Z"},
{"Line": "119=>113", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map.Entry<java.lang.String, java.lang.String>.getValue()=>java.lang.System.lineSeparator()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3628/buggy-version/src.main.java.org.wso2.carbon.connector.amazonsqs.auth.AmazonSQSAuthConnector.java", "BodyUseAPI": [], "Fixed commit": "ddc034acfe89e802b82a4bf6c29056f33a20caed", "Url": "https://api.github.com/repos/kalaiyarasiganeshalingam/esb-connector-amazonsqs", "Date": "2018-07-05T07:30:40Z"},
{"Line": "388=>387", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "uk.co.senab.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)=>com.github.chrisbanes.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7230/buggy-version/src.com.owncloud.android.ui.activity.CropActivity.java", "BodyUseAPI": [], "Fixed commit": "73817b24369aa7059aa4d04205982b3079cb35a9", "Url": "https://api.github.com/repos/sd1998/android", "Date": "2018-03-10T09:58:14Z"},
{"Line": "165=>165", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.length()=>java.lang.String.length()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7650/buggy-version/src.main.java.com.github.xhiroyui.modules.OwnerCommandsHandler.java", "BodyUseAPI": [], "Fixed commit": "17552e017a4904f06f2517bc7b174484df139032", "Url": "https://api.github.com/repos/Xhiro-Yui/OrinBotD4J", "Date": "2018-03-09T17:44:37Z"},
{"Line": "165=>165", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.length()=>java.lang.String.length()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7650/buggy-version/src.main.java.com.github.xhiroyui.modules.OwnerCommandsHandler.java", "BodyUseAPI": [], "Fixed commit": "17552e017a4904f06f2517bc7b174484df139032", "Url": "https://api.github.com/repos/Xhiro-Yui/OrinBotD4J", "Date": "2018-03-09T17:44:37Z"},
{"Line": "165=>165", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.substring(int,int)=>java.lang.String.substring(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7650/buggy-version/src.main.java.com.github.xhiroyui.modules.OwnerCommandsHandler.java", "BodyUseAPI": [], "Fixed commit": "17552e017a4904f06f2517bc7b174484df139032", "Url": "https://api.github.com/repos/Xhiro-Yui/OrinBotD4J", "Date": "2018-03-09T17:44:37Z"},
{"Line": "165=>165", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "sx.blah.discord.util.Image.forUrl(java.lang.String,java.lang.String)=>sx.blah.discord.util.Image.forUrl(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7650/buggy-version/src.main.java.com.github.xhiroyui.modules.OwnerCommandsHandler.java", "BodyUseAPI": [], "Fixed commit": "17552e017a4904f06f2517bc7b174484df139032", "Url": "https://api.github.com/repos/Xhiro-Yui/OrinBotD4J", "Date": "2018-03-09T17:44:37Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.pet_breed)=>android.view.View.findViewById(R.id.summary)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8468/buggy-version/app.src.main.java.com.example.android.pets.PetCursorAdapter.java", "BodyUseAPI": [], "Fixed commit": "f40907f849ba648d82c022a9ad01e7b7dace946d", "Url": "https://api.github.com/repos/SergioKulyk/android-Pets", "Date": "2018-04-20T14:54:46Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.pet_name)=>android.view.View.findViewById(R.id.name)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8468/buggy-version/app.src.main.java.com.example.android.pets.PetCursorAdapter.java", "BodyUseAPI": [], "Fixed commit": "f40907f849ba648d82c022a9ad01e7b7dace946d", "Url": "https://api.github.com/repos/SergioKulyk/android-Pets", "Date": "2018-04-20T14:54:46Z"},
{"Line": "116=>116", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.ClassLoader.getResource((((CassandraProcessorConstants.MODEL_DEPLOYMENT_DIRECTORY) + (java.io.File.separator)) + sourceFileName))=>java.lang.Class<? extends com.orange.oss.cloudfoundry.broker.opsautomation.ondemandbroker.pipeline.TemplatesGenerator>.getResourceAsStream(((((java.io.File.separator) + (CassandraProcessorConstants.MODEL_DEPLOYMENT_DIRECTORY)) + (java.io.File.separator)) + sourceFileName))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5431/buggy-version/cf-ops-automation-broker-core.src.main.java.com.orange.oss.cloudfoundry.broker.opsautomation.ondemandbroker.pipeline.TemplatesGenerator.java", "BodyUseAPI": [], "Fixed commit": "f17a2899bbe4ab4005e8cac2de7b841aa815f364", "Url": "https://api.github.com/repos/orange-cloudfoundry/cf-ops-automation-broker", "Date": "2018-01-11T10:48:00Z"},
{"Line": "116=>116", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.nio.file.Files.readAllLines(java.nio.file.Path)=>org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.nio.charset.Charset)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5431/buggy-version/cf-ops-automation-broker-core.src.main.java.com.orange.oss.cloudfoundry.broker.opsautomation.ondemandbroker.pipeline.TemplatesGenerator.java", "BodyUseAPI": [], "Fixed commit": "f17a2899bbe4ab4005e8cac2de7b841aa815f364", "Url": "https://api.github.com/repos/orange-cloudfoundry/cf-ops-automation-broker", "Date": "2018-01-11T10:48:00Z"},
{"Line": "116=>116", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.nio.file.Files.readAllLines(java.nio.file.Path)=>org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.nio.charset.Charset)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5431/buggy-version/cf-ops-automation-broker-core.src.main.java.com.orange.oss.cloudfoundry.broker.opsautomation.ondemandbroker.pipeline.TemplatesGenerator.java", "BodyUseAPI": [], "Fixed commit": "f17a2899bbe4ab4005e8cac2de7b841aa815f364", "Url": "https://api.github.com/repos/orange-cloudfoundry/cf-ops-automation-broker", "Date": "2018-01-11T10:48:00Z"},
{"Line": "21=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.chumbok.uaa.conf.ExceptionHandlerAdvice.registerMapping(java.lang.Class,java.lang.String,java.lang.String,com.chumbok.uaa.conf.FORBIDDEN)=>com.chumbok.uaa.conf.ExceptionHandlerAdvice.registerMapping(java.lang.Class,java.lang.String,java.lang.String,com.chumbok.uaa.conf.UNAUTHORIZED)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7739/buggy-version/uaa.src.main.java.com.chumbok.uaa.conf.ExceptionHandlerAdvice.java", "BodyUseAPI": [], "Fixed commit": "d5f5f1684295657827d8dac2e7fd8afb27ffc258", "Url": "https://api.github.com/repos/mmahmoodictbd/production-ready-microservices-starter", "Date": "2018-10-29T21:15:04Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.chumbok.uaa.conf.ExceptionHandlerAdvice.getErrorResponse(java.lang.Throwable,javax.servlet.http.HttpServletResponse)=>com.chumbok.uaa.exception.AbstractExceptionHandlerAdvice.getErrorResponse(java.lang.Throwable,javax.servlet.http.HttpServletResponse)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7739/buggy-version/uaa.src.main.java.com.chumbok.uaa.conf.ExceptionHandlerAdvice.java", "BodyUseAPI": [], "Fixed commit": "d5f5f1684295657827d8dac2e7fd8afb27ffc258", "Url": "https://api.github.com/repos/mmahmoodictbd/production-ready-microservices-starter", "Date": "2018-10-29T21:15:04Z"},
{"Line": "100=>100", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "net.minecraft.util.math.MathHelper.floor_double(double)=>net.minecraft.util.math.MathHelper.floor(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1043/buggy-version/mods.railcraft.api.tracks.TrackKitInstance.java", "BodyUseAPI": [], "Fixed commit": "6a0400edd06977b4299fa6d34e4b67aaa7bad204", "Url": "https://api.github.com/repos/Railcraft/Railcraft-API", "Date": "2018-03-13T22:44:20Z"},
{"Line": "284=>284", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "net.minecraft.util.math.MathHelper.floor_double(cart.posZ)=>net.minecraft.util.math.MathHelper.floor(cart.posZ)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1043/buggy-version/mods.railcraft.api.signals.SignalBlock.java", "BodyUseAPI": [], "Fixed commit": "6a0400edd06977b4299fa6d34e4b67aaa7bad204", "Url": "https://api.github.com/repos/Railcraft/Railcraft-API", "Date": "2018-03-13T22:44:20Z"},
{"Line": "283=>283", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "net.minecraft.util.math.MathHelper.floor_double(cart.posX)=>net.minecraft.util.math.MathHelper.floor(cart.posX)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1043/buggy-version/mods.railcraft.api.signals.SignalBlock.java", "BodyUseAPI": [], "Fixed commit": "6a0400edd06977b4299fa6d34e4b67aaa7bad204", "Url": "https://api.github.com/repos/Railcraft/Railcraft-API", "Date": "2018-03-13T22:44:20Z"},
{"Line": "56=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "dk.sdu.mmmi.nakosa.ViewAdvertisementFragment.downloadImage(data.getImagePath())=>com.bumptech.glide.Glide.with(v).load(data.getDownloadPath()).into(android.widget.ImageView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/718/buggy-version/app.src.main.java.dk.sdu.mmmi.nakosa.ViewAdvertisementFragment.java", "BodyUseAPI": [], "Fixed commit": "07adfc7ddec5f62ec9226865d661b8e5fca793cc", "Url": "https://api.github.com/repos/NiclasMolby/Nakosa", "Date": "2018-03-19T16:26:28Z"},
{"Line": "56=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "dk.sdu.mmmi.nakosa.AdvertisementData.getImagePath()=>dk.sdu.mmmi.nakosa.AdvertisementData.getDownloadPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/718/buggy-version/app.src.main.java.dk.sdu.mmmi.nakosa.ViewAdvertisementFragment.java", "BodyUseAPI": [], "Fixed commit": "07adfc7ddec5f62ec9226865d661b8e5fca793cc", "Url": "https://api.github.com/repos/NiclasMolby/Nakosa", "Date": "2018-03-19T16:26:28Z"},
{"Line": "42=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "getFragmentManager().beginTransaction().replace(R.id.fragment, selectedFragment).commit()=>getFragmentManager().beginTransaction().replace(R.id.fragment, selectedFragment).addToBackStack(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/718/buggy-version/app.src.main.java.dk.sdu.mmmi.nakosa.FrontActivity.java", "BodyUseAPI": [], "Fixed commit": "07adfc7ddec5f62ec9226865d661b8e5fca793cc", "Url": "https://api.github.com/repos/NiclasMolby/Nakosa", "Date": "2018-03-19T16:26:28Z"},
{"Line": "143=>144", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.net.URI.resolve(java.lang.String)=>java.net.URI.resolve(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7514/buggy-version/Core.src.com.serotonin.m2m2.module.Module.java", "BodyUseAPI": [], "Fixed commit": "03ff38cc7cf9311528d1a87c2fac085621eacea6", "Url": "https://api.github.com/repos/infiniteautomation/ma-core-public", "Date": "2018-10-04T16:48:20Z"},
{"Line": "537=>536", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "AlertDialog.Builder.setNegativeButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>AlertDialog.Builder.setNegativeButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3096/buggy-version/app.src.main.java.com.example.ivand.foodclub.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "11954871c36541eba231161681c6d104d951b941", "Url": "https://api.github.com/repos/Ivosama/FoodClub", "Date": "2018-05-13T16:09:32Z"},
{"Line": "515=>514", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "AlertDialog.Builder.setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>AlertDialog.Builder.setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3096/buggy-version/app.src.main.java.com.example.ivand.foodclub.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "11954871c36541eba231161681c6d104d951b941", "Url": "https://api.github.com/repos/Ivosama/FoodClub", "Date": "2018-05-13T16:09:32Z"},
{"Line": "485=>480", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "AlertDialog.Builder.setNeutralButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>AlertDialog.Builder.setNeutralButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3096/buggy-version/app.src.main.java.com.example.ivand.foodclub.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "11954871c36541eba231161681c6d104d951b941", "Url": "https://api.github.com/repos/Ivosama/FoodClub", "Date": "2018-05-13T16:09:32Z"},
{"Line": "478=>505", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "AlertDialog.Builder.setNegativeButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>confirmUser.create().show()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3096/buggy-version/app.src.main.java.com.example.ivand.foodclub.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "11954871c36541eba231161681c6d104d951b941", "Url": "https://api.github.com/repos/Ivosama/FoodClub", "Date": "2018-05-13T16:09:32Z"},
{"Line": "494=>489", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "dialog.getButton(AlertDialog.BUTTON_NEUTRAL).setOnClickListener(android.view.View.OnClickListener)=>dialog.getButton(AlertDialog.BUTTON_NEUTRAL).setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3096/buggy-version/app.src.main.java.com.example.ivand.foodclub.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "11954871c36541eba231161681c6d104d951b941", "Url": "https://api.github.com/repos/Ivosama/FoodClub", "Date": "2018-05-13T16:09:32Z"},
{"Line": "13=>13", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.PrintStream.print(java.lang.String)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/194/buggy-version/HangMan.Prompter.java", "BodyUseAPI": [], "Fixed commit": "7633560fad241affd6a8086812350d685737c8d5", "Url": "https://api.github.com/repos/yahya09206/javarefreshercourse", "Date": "2018-09-10T20:32:00Z"},
{"Line": "52=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.codecool.queststore.DAO.StudentDAO.createStudent(com.codecool.queststore.model.user.User,com.codecool.queststore.model.Login,int)=>java.util.Map.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2765/buggy-version/src.main.java.com.codecool.queststore.controller.server.httphandler.StudentsHandler.java", "BodyUseAPI": [], "Fixed commit": "3b42dcde8954de70a5bc17fe8cd79cbe61703ede", "Url": "https://api.github.com/repos/Czakero/QuestStore-MagicznyAutobus", "Date": "2018-08-01T13:59:50Z"},
{"Line": "120=>120", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.matsim.contrib.opdyts.utils.TimeDiscretization.getBinCnt()=>floetteroed.utilities.TimeDiscretization.getBinCnt()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3199/buggy-version/agarwalamit.src.main.java.playground.agarwalamit.opdyts.teleportationModes.TeleportationODLinkAnalyzer.java", "BodyUseAPI": [], "Fixed commit": "47c22c0a228372ff556e2080c1123dde0eb83e3d", "Url": "https://api.github.com/repos/matsim-vsp/vsp-playgrounds", "Date": "2018-04-13T08:43:04Z"},
{"Line": "115=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.matsim.contrib.opdyts.utils.TimeDiscretization.getBinCnt()=>floetteroed.utilities.TimeDiscretization.getBinCnt()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3199/buggy-version/agarwalamit.src.main.java.playground.agarwalamit.opdyts.teleportationModes.TeleportationODLinkAnalyzer.java", "BodyUseAPI": [], "Fixed commit": "47c22c0a228372ff556e2080c1123dde0eb83e3d", "Url": "https://api.github.com/repos/matsim-vsp/vsp-playgrounds", "Date": "2018-04-13T08:43:04Z"},
{"Line": "140=>140", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Var.archervagabon.contains(org.bukkit.entity.Player)=>Var.archer.contains(org.bukkit.entity.Player)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2202/buggy-version/src.eu.fireblade.fireffa.ability.ArcherElementaire.java", "BodyUseAPI": [], "Fixed commit": "039ed5346ec0e4b852af589646dd65c2b914477a", "Url": "https://api.github.com/repos/FireBlade-Serv/FireFFA", "Date": "2018-01-03T12:11:01Z"},
{"Line": "140=>140", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Var.archervagabon.contains(org.bukkit.entity.Player)=>Var.archer.contains(org.bukkit.entity.Player)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2202/buggy-version/src.eu.fireblade.fireffa.ability.ArcherElementaire.java", "BodyUseAPI": [], "Fixed commit": "039ed5346ec0e4b852af589646dd65c2b914477a", "Url": "https://api.github.com/repos/FireBlade-Serv/FireFFA", "Date": "2018-01-03T12:11:01Z"},
{"Line": "460=>460", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.ibm.ws.install.internal.InstallKernelImpl.uninstallFeaturesByProductId(java.lang.String[],java.util.Collection<java.io.File>)=>com.ibm.ws.install.internal.InstallKernelImpl.uninstallProductFeatures(java.lang.String[],java.util.Collection<java.io.File>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9280/buggy-version/dev.com.ibm.ws.install.src.com.ibm.ws.install.internal.InstallKernelImpl.java", "BodyUseAPI": [], "Fixed commit": "518989929f0f23acb503af9b4ea025b00258b63a", "Url": "https://api.github.com/repos/andymc12/open-liberty", "Date": "2018-07-23T15:31:37Z"},
{"Line": "121=>121", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.json.JSONObject.getString(java.lang.String)=>org.json.JSONObject.optString(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5518/buggy-version/src.main.java.fr.delthas.skype.WebConnector.java", "BodyUseAPI": [], "Fixed commit": "d4212bd83b85ff5cdfdae04ac757e1f75bf53460", "Url": "https://api.github.com/repos/pltest01/JavaSkype", "Date": "2018-02-01T08:20:37Z"},
{"Line": "48=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "((com.sdcg3.sheltersearcher.MyApp) (getApplication())).claim(int,com.sdcg3.sheltersearcher.model.Shelter)=>((com.sdcg3.sheltersearcher.MyApp) (getApplication())).claim(com.sdcg3.sheltersearcher.controllers.ShelterDetailActivity,com.sdcg3.sheltersearcher.model.Shelter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6475/buggy-version/app.src.main.java.com.sdcg3.sheltersearcher.controllers.ShelterDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "55f290c9ac63b5fc89a836933cfeeb590bf4cfeb", "Url": "https://api.github.com/repos/EpicPi/CS2340-56", "Date": "2018-03-28T03:27:22Z"},
{"Line": "23=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "OrderedSuperArray.findIndexBinary(java.lang.String)=>OrderedSuperArray.findIndex(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/775/buggy-version/02OrderedSuperArray.OrderedSuperArray.java", "BodyUseAPI": [], "Fixed commit": "ce9ad2ba17f6d4a848fa940670425cebf1ae9151", "Url": "https://api.github.com/repos/delaneydemark/MKS21X", "Date": "2018-01-07T00:03:23Z"},
{"Line": "96=>90", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.entity.Player.sendMessage(org.bukkit.ChatColor.translateAlternateColorCodes('&', instance.getConfig().getString(\"CANT_DO_THAT\")))=>me.xofu.simplechunk.listeners.BlockIgniteEvent.getCause()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9406/buggy-version/src.main.java.me.xofu.simplechunk.listeners.BlockListener.java", "BodyUseAPI": [], "Fixed commit": "c09604b1f308f66b9956352832eecff594d7e95f", "Url": "https://api.github.com/repos/Xofu/SimpleChunk", "Date": "2018-04-22T10:35:25Z"},
{"Line": "23=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.swing.JPanel.paint(java.awt.Graphics)=>javax.swing.JPanel.paintComponent(java.awt.Graphics)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/2176/buggy-version/src.pacman.DrawPanel.java", "BodyUseAPI": [], "Fixed commit": "3c950a0e0cfd571f2bf0c924edaef27aa2d56b30", "Url": "https://api.github.com/repos/rainzhao2000/pacman", "Date": "2018-05-04T19:42:45Z"},
{"Line": "50=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.view.LayoutInflater.from(android.app.Activity)=>getActivity().getLayoutInflater()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6487/buggy-version/Quiz.app.src.main.java.software.enclavegroup.quiz.utilities.DialogUtilities.java", "BodyUseAPI": [], "Fixed commit": "a19335ff05923d2f7deb4ad36070d161745b8f8d", "Url": "https://api.github.com/repos/ArtemGord1728/IKwow", "Date": "2018-09-14T22:38:16Z"},
{"Line": "176=>157", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cn.kkmofang.app.Controller.page()=>android.app.Activity.onConfigurationChanged(android.content.res.Configuration)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8080/buggy-version/kk-app.src.main.java.cn.kkmofang.app.ActivityContainer.java", "BodyUseAPI": [], "Fixed commit": "9ec93290fd358a9433688d1b98990ea61a42a469", "Url": "https://api.github.com/repos/hailongz/kk-app", "Date": "2018-08-10T10:55:50Z"},
{"Line": "180=>160", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cn.kkmofang.app.ActivityContainer.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE)=>cn.kkmofang.view.DocumentView.setNeedsLayout(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8080/buggy-version/kk-app.src.main.java.cn.kkmofang.app.ActivityContainer.java", "BodyUseAPI": [], "Fixed commit": "9ec93290fd358a9433688d1b98990ea61a42a469", "Url": "https://api.github.com/repos/hailongz/kk-app", "Date": "2018-08-10T10:55:50Z"},
{"Line": "84=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "entity.getEntityType().toString()=>entity.getEntityType().name()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7744/buggy-version/src.Controller.SavingLoading.Serializer.java", "BodyUseAPI": [], "Fixed commit": "250acf9d3f91b0529622b376a5341c2fd10618e4", "Url": "https://api.github.com/repos/cmoler/ClubOOPenguinsIteration2", "Date": "2018-03-18T22:05:49Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "e.wyattpeake.invetoryapp.Product.setQuantity(java.lang.String)=>e.wyattpeake.invetoryapp.Product.setExpiration(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/906/buggy-version/InvetoryApp.app.src.main.java.e.wyattpeake.invetoryapp.AddProduct.java", "BodyUseAPI": [], "Fixed commit": "1f2b0466f19e9574418a3b4cbbf5af693a8b4a7b", "Url": "https://api.github.com/repos/peakejw/project-B", "Date": "2018-04-20T17:57:44Z"},
{"Line": "42=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "e.wyattpeake.invetoryapp.Product.setQuantity(java.lang.String)=>e.wyattpeake.invetoryapp.Product.setLocation(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/906/buggy-version/InvetoryApp.app.src.main.java.e.wyattpeake.invetoryapp.AddProduct.java", "BodyUseAPI": [], "Fixed commit": "1f2b0466f19e9574418a3b4cbbf5af693a8b4a7b", "Url": "https://api.github.com/repos/peakejw/project-B", "Date": "2018-04-20T17:57:44Z"},
{"Line": "257=>271", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.Runnable() { @java.lang.Override public void run() { android.widget.LinearLayout.LayoutParams lp = new android.widget.LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT); lp.setMargins(10, 0, 10, 10); java.util.List<com.example.server.Model.Player> players = mGamePresenter.getGame().getPlayers(); if (((mPlayerTurnsLayout.getChildCount()) - 2) > 0) { for (int i = (mPlayerTurnsLayout.getChildCount()) - 1; i > 1; i--) { mPlayerTurnsLayout.removeViewAt(i); } } for (int i = (mPlayerTurnsLayout.getChildCount()) - 2; i < (players.size()); i++) { android.widget.TextView playerView = new android.widget.TextView(views_and_presenters.GameActivity.this); playerView.setText(players.get(i).getUsername()); playerView.setBackgroundResource(views_and_presenters.GameResources.getBackgroundColors().get(players.get(i).getColor())); if (players.get(i).equals(players.get(mGamePresenter.getGame().getTurn()))) playerView.setTextColor(getResources().getColor(R.color.light_blue)); else playerView.setTextColor(getResources().getColor(R.color.white)); playerView.setGravity(Gravity.CENTER); mPlayerTurnsLayout.addView(playerView, lp); } } }=>new java.lang.Runnable() { @java.lang.Override public void run() { android.widget.LinearLayout.LayoutParams lp = new android.widget.LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT); lp.setMargins(10, 0, 10, 10); java.util.List<com.example.server.Model.Player> players = mGamePresenter.getGame().getPlayers(); if (((mPlayerTurnsLayout.getChildCount()) - 2) > 0) { for (int i = (mPlayerTurnsLayout.getChildCount()) - 1; i > 1; i--) { mPlayerTurnsLayout.removeViewAt(i); } } for (int i = (mPlayerTurnsLayout.getChildCount()) - 2; i < (players.size()); i++) { android.widget.TextView playerView = new android.widget.TextView(views_and_presenters.GameActivity.this); playerView.setText(players.get(i).getUsername()); playerView.setBackgroundResource(views_and_presenters.GameResources.getBackgroundColors().get(players.get(i).getColor())); if (players.get(i).equals(players.get(mGamePresenter.getGame().getTurn()))) playerView.setTextColor(getResources().getColor(R.color.light_blue)); else playerView.setTextColor(getResources().getColor(R.color.white)); playerView.setGravity(Gravity.CENTER); mPlayerTurnsLayout.addView(playerView, lp); } } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8924/buggy-version/app.src.main.java.views_and_presenters.GameActivity.java", "BodyUseAPI": [], "Fixed commit": "8ec51c2e3a9004f2bdc29c93e6d135b4c8134cce", "Url": "https://api.github.com/repos/kurtishill/Ticket_To_Ride", "Date": "2018-03-06T19:50:05Z"},
{"Line": "257=>271", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "views_and_presenters.GameActivity.runOnUiThread(java.lang.Runnable)=>views_and_presenters.GameActivity.runOnUiThread(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8924/buggy-version/app.src.main.java.views_and_presenters.GameActivity.java", "BodyUseAPI": [], "Fixed commit": "8ec51c2e3a9004f2bdc29c93e6d135b4c8134cce", "Url": "https://api.github.com/repos/kurtishill/Ticket_To_Ride", "Date": "2018-03-06T19:50:05Z"},
{"Line": "68=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.osgi.util.tracker.ServiceTracker<com.ibm.jbatch.container.servicesmanager.ServicesManager, com.ibm.jbatch.container.servicesmanager.ServicesManager>.open()=>com.ibm.ws.kernel.service.util.SecureAction.open(org.osgi.util.tracker.ServiceTracker<com.ibm.jbatch.container.servicesmanager.ServicesManager, com.ibm.jbatch.container.servicesmanager.ServicesManager>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4385/buggy-version/dev.com.ibm.jbatch.container.src.com.ibm.jbatch.container.servicesmanager.ServicesManagerStaticAnchor.java", "BodyUseAPI": [], "Fixed commit": "0c3556d953542e76bcd683db670f8a89f1bd4015", "Url": "https://api.github.com/repos/scottkurz/open-liberty", "Date": "2018-04-09T15:33:04Z"},
{"Line": "57=>65", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.osgi.framework.FrameworkUtil.getBundle(com.ibm.jbatch.container.servicesmanager.ServicesManager.class).getBundleContext()=>com.ibm.ws.kernel.service.util.SecureAction.getBundleContext(org.osgi.framework.Bundle)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4385/buggy-version/dev.com.ibm.jbatch.container.src.com.ibm.jbatch.container.servicesmanager.ServicesManagerStaticAnchor.java", "BodyUseAPI": [], "Fixed commit": "0c3556d953542e76bcd683db670f8a89f1bd4015", "Url": "https://api.github.com/repos/scottkurz/open-liberty", "Date": "2018-04-09T15:33:04Z"},
{"Line": "314=>313", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getResources().getColor(R.color.greenColors)=>getResources().getColor(R.color.ffe206Colors)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7779/buggy-version/SillyChildClient.app.src.main.java.com.sillykid.app.main.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "a267307c61a7f8c1f1beb8e964b2784f447d5dd2", "Url": "https://api.github.com/repos/921668753/SillyChildClient-Android", "Date": "2018-07-13T05:08:56Z"},
{"Line": "209=>209", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.james.ultimatewordfinderr.AdvancedSearchFragment.SearchWordsTask.getContext()=>com.example.james.ultimatewordfinderr.AdvancedSearchFragment.SearchWordsTask.getActivity()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9380/buggy-version/app.src.main.java.com.example.james.ultimatewordfinderr.AdvancedSearchFragment.java", "BodyUseAPI": [], "Fixed commit": "6bc12842458adde7540330650a4af711d0470b0e", "Url": "https://api.github.com/repos/CCninja86/UltimateWordFinder", "Date": "2018-05-16T23:37:46Z"},
{"Line": "14=>15", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "garden.SensorClasses.Sensor(java.lang.String)=>garden.ComponentClasses.SensorClasses.Sensor(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/5025/buggy-version/SmartGarden.src.main.Java.garden.SensorClasses.WaterSensor.java", "BodyUseAPI": [], "Fixed commit": "519407319aa09fcd1e6c4e86a3ec899c7bfb8078", "Url": "https://api.github.com/repos/stornabua/SmartGarden", "Date": "2018-08-15T20:07:18Z"},
{"Line": "411=>411", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.swing.GroupLayout.SequentialGroup.addComponent(javax.swing.JButton,int,int,int)=>javax.swing.GroupLayout.SequentialGroup.addComponent(javax.swing.JButton,int,int,short)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/9143/buggy-version/src.main.java.eu.isas.peptideshaker.gui.WelcomeDialog.java", "BodyUseAPI": [], "Fixed commit": "c3ec0d6e5b1f0a4a743ba79fc831bf0d68bf9a1f", "Url": "https://api.github.com/repos/compomics/peptide-shaker", "Date": "2018-07-05T15:37:26Z"},
{"Line": "7=>7", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.company.Main.divide(int,int)=>com.company.Main.divide(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1046/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "d7b15c833c156837297a1f530233eb532ed57b48", "Url": "https://api.github.com/repos/KonradCzam/SDA", "Date": "2018-08-09T17:57:31Z"},
{"Line": "45=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.button_chatbox_send)=>android.view.View.findViewById(R.id.buttonSend)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6448/buggy-version/app.src.main.java.lix5.ushare.FragmentChatroom.java", "BodyUseAPI": [], "Fixed commit": "e2b873a361ed5ccb6f4e834748e87134a9829080", "Url": "https://api.github.com/repos/billy0222/UShare", "Date": "2018-04-11T10:48:41Z"},
{"Line": "44=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.edittext_chatbox)=>android.view.View.findViewById(R.id.chatText)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6448/buggy-version/app.src.main.java.lix5.ushare.FragmentChatroom.java", "BodyUseAPI": [], "Fixed commit": "e2b873a361ed5ccb6f4e834748e87134a9829080", "Url": "https://api.github.com/repos/billy0222/UShare", "Date": "2018-04-11T10:48:41Z"},
{"Line": "103=>103", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.nio.file.Paths.get(java.lang.String)=>java.nio.file.Path.resolve(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1857/buggy-version/cli.ballerina-packerina.src.main.java.org.ballerinalang.packerina.NetworkUtils.java", "BodyUseAPI": [], "Fixed commit": "6c5ffe923847ab75bd67617ec404b25b011b09fa", "Url": "https://api.github.com/repos/NatashaWso2/ballerina", "Date": "2018-02-27T14:25:24Z"},
{"Line": "62=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.example.alan.customframe.util.FileUtil.getExtension(file.getPath()).equals(java.lang.String)=>java.lang.String.equals(com.example.alan.customframe.util.FileUtil.getExtension(file.getPath()))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/6399/buggy-version/app.src.main.java.com.example.alan.customframe.net.download.SaveFileTask.java", "BodyUseAPI": [], "Fixed commit": "f96ebfe34e30f3fc7edfc46c5f5405aa6f725e1d", "Url": "https://api.github.com/repos/foxalan/CustomFrame", "Date": "2018-01-23T06:38:22Z"},
{"Line": "187=>191", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "service.events().list(\"primary\").setMaxResults(1).setTimeMin(now).setOrderBy(\"startTime\").setSingleEvents(true).execute()=>service.events().list(\"primary\").setMaxResults(1).setTimeMin(now).setTimeMax(new com.google.api.client.util.DateTime(convertedNextDate)).setOrderBy(\"startTime\").setSingleEvents(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4221/buggy-version/conferencemanager.src.main.java.it.univaq.disim.sose.conferencemanager.manager.business.impl.ws.WebServiceManagerServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "af25698521eb026ee8bfdb56e750f10997032236", "Url": "https://api.github.com/repos/lollix91/Sose_project_working", "Date": "2018-02-20T04:51:57Z"},
{"Line": "261=>266", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javax.ws.rs.core.Response.ok(java.lang.String)=>javax.ws.rs.core.Response.ok(json.toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4221/buggy-version/conferencemanager.src.main.java.it.univaq.disim.sose.conferencemanager.manager.business.impl.ws.WebServiceManagerServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "af25698521eb026ee8bfdb56e750f10997032236", "Url": "https://api.github.com/repos/lollix91/Sose_project_working", "Date": "2018-02-20T04:51:57Z"},
{"Line": "261=>266", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.toString()=>org.json.JSONObject.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4221/buggy-version/conferencemanager.src.main.java.it.univaq.disim.sose.conferencemanager.manager.business.impl.ws.WebServiceManagerServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "af25698521eb026ee8bfdb56e750f10997032236", "Url": "https://api.github.com/repos/lollix91/Sose_project_working", "Date": "2018-02-20T04:51:57Z"},
{"Line": "261=>266", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.toString()=>org.json.JSONObject.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4221/buggy-version/conferencemanager.src.main.java.it.univaq.disim.sose.conferencemanager.manager.business.impl.ws.WebServiceManagerServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "af25698521eb026ee8bfdb56e750f10997032236", "Url": "https://api.github.com/repos/lollix91/Sose_project_working", "Date": "2018-02-20T04:51:57Z"},
{"Line": "187=>191", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "service.events().list(\"primary\").setMaxResults(1).setTimeMin(now).setOrderBy(java.lang.String)=>service.events().list(\"primary\").setMaxResults(1).setTimeMin(now).setTimeMax(com.google.api.client.util.DateTime)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4221/buggy-version/conferencemanager.src.main.java.it.univaq.disim.sose.conferencemanager.manager.business.impl.ws.WebServiceManagerServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "af25698521eb026ee8bfdb56e750f10997032236", "Url": "https://api.github.com/repos/lollix91/Sose_project_working", "Date": "2018-02-20T04:51:57Z"},
{"Line": "187=>191", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "service.events().list(\"primary\").setMaxResults(1).setTimeMin(now).setOrderBy(\"startTime\").setSingleEvents(boolean)=>service.events().list(\"primary\").setMaxResults(1).setTimeMin(now).setTimeMax(new com.google.api.client.util.DateTime(convertedNextDate)).setOrderBy(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4221/buggy-version/conferencemanager.src.main.java.it.univaq.disim.sose.conferencemanager.manager.business.impl.ws.WebServiceManagerServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "af25698521eb026ee8bfdb56e750f10997032236", "Url": "https://api.github.com/repos/lollix91/Sose_project_working", "Date": "2018-02-20T04:51:57Z"},
{"Line": "136=>137", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.coreocto.dev.hf.clientlib.sse.vasst.VasstClient.encryptStr(java.lang.String,org.coreocto.dev.hf.commonlib.crypto.IByteCipher)=>org.coreocto.dev.hf.clientlib.sse.vasst.VasstClient.encryptBytes(byte[],org.coreocto.dev.hf.commonlib.crypto.IByteCipher)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3316/buggy-version/src.main.java.org.coreocto.dev.hf.clientlib.sse.vasst.VasstClient.java", "BodyUseAPI": [], "Fixed commit": "9a2b3ef498edce7aa4c3813e31fa119c983f26f6", "Url": "https://api.github.com/repos/coreocto/HF-ClientLib", "Date": "2018-03-30T14:52:28Z"},
{"Line": "137=>138", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.coreocto.dev.hf.clientlib.sse.vasst.VasstClient.encryptStrByCharPos(java.lang.String,java.math.BigDecimal)=>org.coreocto.dev.hf.clientlib.sse.vasst.VasstClient.encryptBytesByBytePos(byte[],java.math.BigDecimal)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3316/buggy-version/src.main.java.org.coreocto.dev.hf.clientlib.sse.vasst.VasstClient.java", "BodyUseAPI": [], "Fixed commit": "9a2b3ef498edce7aa4c3813e31fa119c983f26f6", "Url": "https://api.github.com/repos/coreocto/HF-ClientLib", "Date": "2018-03-30T14:52:28Z"},
{"Line": "28=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<org.iot.dsa.dslink.dframework.ParameterDefinition>.add(org.iot.dsa.dslink.dframework.ParameterDefinition.makeEnumParam(Constants.POINT_DATA_TYPE, org.iot.dsa.dslink.modbus.DSJavaEnum.valueOf(DataTypeEnum.BINARY), null, null))=>java.util.List<org.iot.dsa.dslink.dframework.ParameterDefinition>.add(org.iot.dsa.dslink.modbus.DataTypeParameter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1463/buggy-version/src.main.java.org.iot.dsa.dslink.modbus.SlavePointNode.java", "BodyUseAPI": [], "Fixed commit": "45442103004ab9cc587807f847aec8b4b7e9d023", "Url": "https://api.github.com/repos/iot-dsa-v2/dslink-java-v2-modbus", "Date": "2018-01-15T22:40:40Z"},
{"Line": "31=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<org.iot.dsa.dslink.dframework.ParameterDefinition>.add(org.iot.dsa.dslink.dframework.ParameterDefinition.makeEnumParam(Constants.POINT_DATA_TYPE, org.iot.dsa.dslink.modbus.DSJavaEnum.valueOf(DataTypeEnum.BINARY), null, null))=>java.util.List<org.iot.dsa.dslink.dframework.ParameterDefinition>.add(org.iot.dsa.dslink.modbus.DataTypeParameter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1463/buggy-version/src.main.java.org.iot.dsa.dslink.modbus.ModbusPointNode.java", "BodyUseAPI": [], "Fixed commit": "45442103004ab9cc587807f847aec8b4b7e9d023", "Url": "https://api.github.com/repos/iot-dsa-v2/dslink-java-v2-modbus", "Date": "2018-01-15T22:40:40Z"},
{"Line": "30=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.iot.dsa.dslink.modbus.SlaveDeviceNode.getInfo(Constants.POINT_ERROR)=>org.iot.dsa.dslink.modbus.SlaveDeviceNode.getInfo(Constants.SLAVE_ERROR)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1463/buggy-version/src.main.java.org.iot.dsa.dslink.modbus.SlaveDeviceNode.java", "BodyUseAPI": [], "Fixed commit": "45442103004ab9cc587807f847aec8b4b7e9d023", "Url": "https://api.github.com/repos/iot-dsa-v2/dslink-java-v2-modbus", "Date": "2018-01-15T22:40:40Z"},
{"Line": "57=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.p6spy.engine.logging.Category.equals(java.lang.String)=>Category.STATEMENT.equals(com.p6spy.engine.logging.Category)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4046/buggy-version/src.main.java.com.p6spy.engine.spy.appender.BatchFileLogger.java", "BodyUseAPI": [], "Fixed commit": "43a5eed17d7f5dbcaa5c39c19a3cf038640847ae", "Url": "https://api.github.com/repos/p6spy/p6spy", "Date": "2017-11-04T06:28:49Z"},
{"Line": "184=>184", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.Class<?>.getName()=>java.lang.Class<?>.isAssignableFrom(java.lang.Class<? extends java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4046/buggy-version/src.main.java.com.p6spy.engine.spy.P6DataSource.java", "BodyUseAPI": [], "Fixed commit": "43a5eed17d7f5dbcaa5c39c19a3cf038640847ae", "Url": "https://api.github.com/repos/p6spy/p6spy", "Date": "2017-11-04T06:28:49Z"},
{"Line": "191=>191", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class<?>.getName()=>java.lang.Class.isInstance(java.lang.Class<?>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/4046/buggy-version/src.main.java.com.p6spy.engine.spy.P6DataSource.java", "BodyUseAPI": [], "Fixed commit": "43a5eed17d7f5dbcaa5c39c19a3cf038640847ae", "Url": "https://api.github.com/repos/p6spy/p6spy", "Date": "2017-11-04T06:28:49Z"},
{"Line": "446=>446", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.editText)=>android.view.View.findViewById(R.id.et_add_note)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3079/buggy-version/app.src.main.java.com.xcodesystemsinterns.studentmanager.Students.StudentActivity.java", "BodyUseAPI": [], "Fixed commit": "97aac97ed976028b60cc686f11aeb4968608822f", "Url": "https://api.github.com/repos/Elzawawy/StudentManagerSystem", "Date": "2018-08-21T17:42:08Z"},
{"Line": "459=>459", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.app.Dialog.findViewById(R.id.cancel)=>android.app.Dialog.findViewById(R.id.cancelNote)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/3079/buggy-version/app.src.main.java.com.xcodesystemsinterns.studentmanager.Students.StudentActivity.java", "BodyUseAPI": [], "Fixed commit": "97aac97ed976028b60cc686f11aeb4968608822f", "Url": "https://api.github.com/repos/Elzawawy/StudentManagerSystem", "Date": "2018-08-21T17:42:08Z"},
{"Line": "103=>101", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "ctx.newXmlParser().encodeResourceToString(org.hl7.fhir.dstu3.model.Slot)=>ctx.newXmlParser().encodeResourceToString(uk.nhs.a2si.poc.fhirfacade.provider.Slot)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1320/buggy-version/src.main.java.uk.nhs.a2si.poc.fhirfacade.provider.SlotResourceProvider.java", "BodyUseAPI": [], "Fixed commit": "c30a35e29d420f715fa7ffb230204a9760c22653", "Url": "https://api.github.com/repos/NarasimhaRajuKotnala/a2si-facade", "Date": "2018-10-01T14:03:25Z"},
{"Line": "74=>72", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.hl7.fhir.dstu3.model.IdType.getValue()=>uk.nhs.a2si.poc.fhirfacade.provider.IdType.getValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1320/buggy-version/src.main.java.uk.nhs.a2si.poc.fhirfacade.provider.SlotResourceProvider.java", "BodyUseAPI": [], "Fixed commit": "c30a35e29d420f715fa7ffb230204a9760c22653", "Url": "https://api.github.com/repos/NarasimhaRajuKotnala/a2si-facade", "Date": "2018-10-01T14:03:25Z"},
{"Line": "166=>166", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.hl7.fhir.dstu3.model.Bundle.getEntry()=>uk.nhs.a2si.poc.fhirfacade.provider.Bundle.getEntry()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1320/buggy-version/src.main.java.uk.nhs.a2si.poc.fhirfacade.provider.SlotResourceProvider.java", "BodyUseAPI": [], "Fixed commit": "c30a35e29d420f715fa7ffb230204a9760c22653", "Url": "https://api.github.com/repos/NarasimhaRajuKotnala/a2si-facade", "Date": "2018-10-01T14:03:25Z"},
{"Line": "168=>168", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<org.hl7.fhir.dstu3.model.Slot>.add(org.hl7.fhir.dstu3.model.Slot)=>java.util.List<uk.nhs.a2si.poc.fhirfacade.provider.Slot>.add(uk.nhs.a2si.poc.fhirfacade.provider.Slot)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/1320/buggy-version/src.main.java.uk.nhs.a2si.poc.fhirfacade.provider.SlotResourceProvider.java", "BodyUseAPI": [], "Fixed commit": "c30a35e29d420f715fa7ffb230204a9760c22653", "Url": "https://api.github.com/repos/NarasimhaRajuKotnala/a2si-facade", "Date": "2018-10-01T14:03:25Z"},
{"Line": "12=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "me.iblitzkriegi.vixio.Vixio.getInstance().registerPropertyExpression(me.iblitzkriegi.vixio.expressions.channel.builder.ExprBuilderTopic.class, java.lang.String.class, \"topic\", \"channelbuilders\").setName(\"Topic of Channel\").setDesc(\"Gets or sets the topic of a channel builder.\").setExample(java.lang.String)=>me.iblitzkriegi.vixio.Vixio.getInstance().registerPropertyExpression(me.iblitzkriegi.vixio.expressions.channel.builder.ExprBuilderTopic.class, java.lang.String.class, \"topic\", \"channelbuilders\").setName(\"Topic of Channel\").setDesc(\"Gets or sets the topic of a channel builder.\").setExample(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/8838/buggy-version/src.main.java.me.iblitzkriegi.vixio.expressions.channel.builder.ExprBuilderTopic.java", "BodyUseAPI": [], "Fixed commit": "033620dd429ab0bb0b05c38836069eddfbd47dff", "Url": "https://api.github.com/repos/Pikachu920/Vixio", "Date": "2018-03-07T01:17:30Z"},
{"Line": "1538=>1538", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new jmri.ConditionalVariable(false, jmri.Conditional.Operator.NONE, type, turnoutLockSystemName, true)=>new jmri.ConditionalVariable(false, jmri.Conditional.Operator.NONE, conditionalType, turnoutLockSystemName, true)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7435/buggy-version/java.src.jmri.jmrit.beantable.RouteTableAction.java", "BodyUseAPI": [], "Fixed commit": "9994d931a9327eca988ab9d9112da622da928e91", "Url": "https://api.github.com/repos/danielb987/JMRI", "Date": "2018-10-04T19:53:48Z"},
{"Line": "82=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "cz.metacentrum.perun.taskslib.model.SendTask.getDestination()=>cz.metacentrum.perun.taskslib.model.SendTask.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V144/7871/buggy-version/perun-engine.src.main.java.cz.metacentrum.perun.engine.scheduling.impl.SendWorkerImpl.java", "BodyUseAPI": [], "Fixed commit": "2fb7e98e95ca6d66f6ff820f831c55aa5abb83f2", "Url": "https://api.github.com/repos/mvocu/perun", "Date": "2018-01-30T16:24:33Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.startsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1580/buggy-version/bvm.ballerina-core.src.main.java.org.ballerinalang.model.types.BType.java", "BodyUseAPI": [], "Fixed commit": "b087cbfa7ef6787ee1699a1d6460a6a880661ec5", "Url": "https://api.github.com/repos/anuruddhal/ballerina", "Date": "2018-06-14T12:37:51Z"},
{"Line": "47=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.vertx.reactivex.ext.web.client.WebClient.get(request.getUrl())=>io.vertx.reactivex.ext.web.client.WebClient.getAbs(request.getUrl())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3793/buggy-version/core.src.main.java.com.cv4j.netdiscovery.core.downloader.vertx.VertxDownloader.java", "BodyUseAPI": [], "Fixed commit": "779d61a8ceae5454c5e9af8322330b6d378ffdc5", "Url": "https://api.github.com/repos/fengzhizi715/NetDiscovery", "Date": "2018-01-29T14:20:41Z"},
{"Line": "447=>447", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6687/buggy-version/Bank.java", "BodyUseAPI": [], "Fixed commit": "7a4ee76d97a09cdef0b207139ebf12c081595a33", "Url": "https://api.github.com/repos/sanjithbonela/BankJavaProj", "Date": "2018-08-20T07:45:53Z"},
{"Line": "425=>425", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6687/buggy-version/Bank.java", "BodyUseAPI": [], "Fixed commit": "7a4ee76d97a09cdef0b207139ebf12c081595a33", "Url": "https://api.github.com/repos/sanjithbonela/BankJavaProj", "Date": "2018-08-20T07:45:53Z"},
{"Line": "350=>349", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, com.liferay.portlet.RenderData>.put(curPortlet.getPortletId(),com.liferay.portlet.RenderData)=>java.util.Map<java.lang.String, com.liferay.portlet.internal.RenderData>.put(curPortlet.getPortletId(),com.liferay.portlet.internal.RenderData)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8432/buggy-version/portal-impl.src.com.liferay.portal.action.LayoutAction.java", "BodyUseAPI": [], "Fixed commit": "97571310f27e7cff9e4259b292c9ab56c02c46be", "Url": "https://api.github.com/repos/vsingleton/liferay-portal", "Date": "2018-05-31T01:48:14Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.List<org.terasology.world.block.Block>.get(int)=>java.util.List<org.terasology.world.block.Block>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3384/buggy-version/src.main.java.org.terasology.books.RecipeParagraph.java", "BodyUseAPI": [], "Fixed commit": "1954c4e0a4c95502b9d17f0e42d79fd06cd34e5d", "Url": "https://api.github.com/repos/IMACULGY/Books-1", "Date": "2018-10-30T02:10:27Z"},
{"Line": "52=>52", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<org.terasology.entitySystem.prefab.Prefab>.get(int)=>java.util.List<org.terasology.entitySystem.prefab.Prefab>.get((i - (blockIngredientsList.size())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3384/buggy-version/src.main.java.org.terasology.books.RecipeParagraph.java", "BodyUseAPI": [], "Fixed commit": "1954c4e0a4c95502b9d17f0e42d79fd06cd34e5d", "Url": "https://api.github.com/repos/IMACULGY/Books-1", "Date": "2018-10-30T02:10:27Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.List<org.terasology.world.block.Block>.get(int)=>java.util.List<org.terasology.world.block.Block>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3384/buggy-version/src.main.java.org.terasology.books.RecipeParagraph.java", "BodyUseAPI": [], "Fixed commit": "1954c4e0a4c95502b9d17f0e42d79fd06cd34e5d", "Url": "https://api.github.com/repos/IMACULGY/Books-1", "Date": "2018-10-30T02:10:27Z"},
{"Line": "569=>569", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Arrays.fill(double[],float)=>java.util.Arrays.fill(double[],double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9685/buggy-version/h2o-genmodel.src.main.java.hex.genmodel.GenModel.java", "BodyUseAPI": [], "Fixed commit": "fc0775bc0ecf57fdda36b815165e0afa2b4447d5", "Url": "https://api.github.com/repos/h2oai/h2o-3", "Date": "2018-08-30T00:57:24Z"},
{"Line": "231=>231", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.utils.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1868/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "8b7333753e8ffe99335301b5dc93dabba1b6e696", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "254=>254", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.utils.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1868/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "8b7333753e8ffe99335301b5dc93dabba1b6e696", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "254=>254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.utils.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1868/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "8b7333753e8ffe99335301b5dc93dabba1b6e696", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "69=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.Object(android.content.Context,android.view.ViewGroup,R.layout.item_topic_trace)=>java.lang.Object(android.content.Context,android.view.ViewGroup,R.layout.item_topic_timeline)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5984/buggy-version/app.src.main.java.com.jeez.guanpj.jreadhub.ui.adpter.TopicTimelineAdapter.java", "BodyUseAPI": [], "Fixed commit": "146ba76de112ac2d2a2b237097150af3a08b9d88", "Url": "https://api.github.com/repos/guanpj/JReadHub", "Date": "2018-06-04T09:55:25Z"},
{"Line": "31=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.then0wheregirl.santanderproject.model.fund.Info.get(int)=>java.util.List<com.then0wheregirl.santanderproject.model.fund.Info>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/120/buggy-version/app.src.main.java.com.then0wheregirl.santanderproject.adapter.SantanderAdapter.java", "BodyUseAPI": [], "Fixed commit": "6c60a94e01fa553ff43e8d81fc928c9bab1a2752", "Url": "https://api.github.com/repos/then0wheregirl/SantanderProject", "Date": "2018-08-02T17:15:12Z"},
{"Line": "54=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "me.vcoder.s3helper.GeneralS3Service.getUploadParams(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int)=>me.vcoder.s3helper.S3Service.getUploadParams(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8345/buggy-version/src.main.java.me.vcoder.s3helper.S3Service.java", "BodyUseAPI": [], "Fixed commit": "b5df38e34999ed44056d4107d2ba04f03164053d", "Url": "https://api.github.com/repos/vcoder4c/s3helper", "Date": "2018-04-02T11:14:50Z"},
{"Line": "50=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "me.vcoder.s3helper.GeneralS3Service.getAccessURL(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.AmazonS3Client,int)=>me.vcoder.s3helper.S3Service.getAccessURL(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.AmazonS3Client,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8345/buggy-version/src.main.java.me.vcoder.s3helper.S3Service.java", "BodyUseAPI": [], "Fixed commit": "b5df38e34999ed44056d4107d2ba04f03164053d", "Url": "https://api.github.com/repos/vcoder4c/s3helper", "Date": "2018-04-02T11:14:50Z"},
{"Line": "54=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.mid_year_registration.Cordinator_Upload_PDF.setContentView(R.layout.activity_cordinator__upload__pdf)=>com.example.mid_year_registration.Cordinator_Upload_PDF.setContentView(R.layout.activity_coordinator_upload)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9576/buggy-version/app.src.main.java.com.example.mid_year_registration.Cordinator_Upload_PDF.java", "BodyUseAPI": [], "Fixed commit": "af47710b86ec00abe0b25df242523991dab02d4c", "Url": "https://api.github.com/repos/Team-Brogrammers/MidYearRegistration", "Date": "2018-09-27T10:50:05Z"},
{"Line": "107=>107", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.lang3.StringUtils.isBlank(java.lang.String)=>org.apache.commons.lang.StringUtils.isBlank(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5911/buggy-version/src.main.java.com.skyline.util.NetworkUtil.java", "BodyUseAPI": [], "Fixed commit": "6436d2b5260d0d0002a9d9d6942029e910199daf", "Url": "https://api.github.com/repos/Qskyline/util", "Date": "2018-03-19T06:24:36Z"},
{"Line": "359=>359", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.lang3.StringUtils.substringAfterLast(java.lang.String,java.lang.String)=>org.apache.commons.lang.StringUtils.substringAfterLast(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5911/buggy-version/src.main.java.com.skyline.util.NetworkUtil.java", "BodyUseAPI": [], "Fixed commit": "6436d2b5260d0d0002a9d9d6942029e910199daf", "Url": "https://api.github.com/repos/Qskyline/util", "Date": "2018-03-19T06:24:36Z"},
{"Line": "359=>359", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.lang3.StringUtils.substringAfterLast(java.lang.String,java.lang.String)=>org.apache.commons.lang.StringUtils.substringAfterLast(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5911/buggy-version/src.main.java.com.skyline.util.NetworkUtil.java", "BodyUseAPI": [], "Fixed commit": "6436d2b5260d0d0002a9d9d6942029e910199daf", "Url": "https://api.github.com/repos/Qskyline/util", "Date": "2018-03-19T06:24:36Z"},
{"Line": "149=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.Runnable() { @java.lang.Override public void run() { java.util.List<com.uniqueandroid.diary.database.DiaryBean> list = mDiaryDataBase.diaryDao().getDiaries(startTime, com.uniqueandroid.diary.database.DataBaseHelper.ONCE_COUNT); if (list != null) { callBack.onSuccess(list); startTime = list.get(((list.size()) - 1)).getDate(); }else { callBack.onFailure(false); } } }=>new java.lang.Runnable() { @java.lang.Override public void run() { java.util.List<com.uniqueandroid.diary.database.DiaryBean> list = mDiaryDataBase.diaryDao().getDiaries(startTime, com.uniqueandroid.diary.database.DataBaseHelper.ONCE_COUNT); if (list != null) { callBack.onSuccess(list); startTime = list.get(((list.size()) - 1)).getDate(); }else { callBack.onFailure(false); } } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4290/buggy-version/app.src.main.java.com.uniqueandroid.diary.database.DataBaseHelper.java", "BodyUseAPI": [], "Fixed commit": "e8a652a8cbcbf9bce05f22ad4989fdad3aeb8444", "Url": "https://api.github.com/repos/UniqueStudioAndroid/Diary", "Date": "2018-07-25T08:52:26Z"},
{"Line": "158=>158", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "POGOProtos.Data.PlayerDataOuterClass.PlayerData.getCurrenciesList()=>POGOProtos.Data.PlayerDataOuterClass.PlayerData.getCurrencyBalanceList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5346/buggy-version/library.src.main.java.com.pokegoapi.api.player.PlayerProfile.java", "BodyUseAPI": [], "Fixed commit": "1aa16f5e7eb9a1cf953ff38d11004b6b481d8587", "Url": "https://api.github.com/repos/Furtif/PokeGOAPI-Java", "Date": "2018-10-12T20:33:08Z"},
{"Line": "160=>160", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "CurrencyOuterClass.Currency.getAmount()=>CurrencyOuterClass.Currency.getQuantity()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5346/buggy-version/library.src.main.java.com.pokegoapi.api.player.PlayerProfile.java", "BodyUseAPI": [], "Fixed commit": "1aa16f5e7eb9a1cf953ff38d11004b6b481d8587", "Url": "https://api.github.com/repos/Furtif/PokeGOAPI-Java", "Date": "2018-10-12T20:33:08Z"},
{"Line": "160=>160", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "CurrencyOuterClass.Currency.getName()=>CurrencyOuterClass.Currency.getCurrencyType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5346/buggy-version/library.src.main.java.com.pokegoapi.api.player.PlayerProfile.java", "BodyUseAPI": [], "Fixed commit": "1aa16f5e7eb9a1cf953ff38d11004b6b481d8587", "Url": "https://api.github.com/repos/Furtif/PokeGOAPI-Java", "Date": "2018-10-12T20:33:08Z"},
{"Line": "287=>288", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.virtue.game.entity.player.inv.Item.getType()=>org.virtue.config.objtype.ObjType.getParam(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7004/buggy-version/src.main.java.org.virtue.game.entity.player.inv.EquipmentManager.java", "BodyUseAPI": [], "Fixed commit": "4263de9f2f5ebcd4edf8844107c380cef516eb22", "Url": "https://api.github.com/repos/Sundays211/VirtueRS3", "Date": "2018-07-28T09:38:50Z"},
{"Line": "287=>288", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "item.getType().getParam(int,int)=>org.virtue.config.objtype.ObjType.getParam(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7004/buggy-version/src.main.java.org.virtue.game.entity.player.inv.EquipmentManager.java", "BodyUseAPI": [], "Fixed commit": "4263de9f2f5ebcd4edf8844107c380cef516eb22", "Url": "https://api.github.com/repos/Sundays211/VirtueRS3", "Date": "2018-07-28T09:38:50Z"},
{"Line": "291=>292", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "item.getType().getParam(int,int)=>org.virtue.config.objtype.ObjType.getParam(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7004/buggy-version/src.main.java.org.virtue.game.entity.player.inv.EquipmentManager.java", "BodyUseAPI": [], "Fixed commit": "4263de9f2f5ebcd4edf8844107c380cef516eb22", "Url": "https://api.github.com/repos/Sundays211/VirtueRS3", "Date": "2018-07-28T09:38:50Z"},
{"Line": "63=>63", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.virtue.network.event.context.impl.in.WidgetDragEventContext.getSrcItem()=>org.virtue.network.event.context.impl.in.WidgetDragEventContext.getDestItem()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7004/buggy-version/src.main.java.org.virtue.network.event.handler.impl.WidgetDragEventHandler.java", "BodyUseAPI": [], "Fixed commit": "4263de9f2f5ebcd4edf8844107c380cef516eb22", "Url": "https://api.github.com/repos/Sundays211/VirtueRS3", "Date": "2018-07-28T09:38:50Z"},
{"Line": "518=>518", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "player.getEquipment().meetsEquipRequirements(org.virtue.game.entity.player.inv.Item)=>player.getEquipment().meetsEquipRequirements(item.getType())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7004/buggy-version/src.main.java.org.virtue.game.entity.player.widget.impl.BankWidget.java", "BodyUseAPI": [], "Fixed commit": "4263de9f2f5ebcd4edf8844107c380cef516eb22", "Url": "https://api.github.com/repos/Sundays211/VirtueRS3", "Date": "2018-07-28T09:38:50Z"},
{"Line": "84=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "StdOut.println(java.lang.String)=>RSA.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1728/buggy-version/RSA.java", "BodyUseAPI": [], "Fixed commit": "f4f82b1146f8f2b224881e1291d949fe0bc62639", "Url": "https://api.github.com/repos/curtcox/RSA", "Date": "2018-09-30T03:42:55Z"},
{"Line": "85=>85", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "StdOut.println(java.lang.String)=>RSA.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1728/buggy-version/RSA.java", "BodyUseAPI": [], "Fixed commit": "f4f82b1146f8f2b224881e1291d949fe0bc62639", "Url": "https://api.github.com/repos/curtcox/RSA", "Date": "2018-09-30T03:42:55Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "StdOut.println(java.lang.String)=>RSA.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1728/buggy-version/RSA.java", "BodyUseAPI": [], "Fixed commit": "f4f82b1146f8f2b224881e1291d949fe0bc62639", "Url": "https://api.github.com/repos/curtcox/RSA", "Date": "2018-09-30T03:42:55Z"},
{"Line": "71=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "StdOut.println(RSA)=>RSA.println(RSA)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1728/buggy-version/RSA.java", "BodyUseAPI": [], "Fixed commit": "f4f82b1146f8f2b224881e1291d949fe0bc62639", "Url": "https://api.github.com/repos/curtcox/RSA", "Date": "2018-09-30T03:42:55Z"},
{"Line": "306=>306", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.liferay.commerce.organization.service.impl.CommerceOrganizationLocalServiceImpl.getGroup(long)=>com.liferay.commerce.organization.service.impl.CommerceOrganizationLocalServiceImpl.fetchGroup(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3153/buggy-version/commerce-organization-service.src.main.java.com.liferay.commerce.organization.service.impl.CommerceOrganizationLocalServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "06458e70062e16a47deb514c1074cc8198db9c30", "Url": "https://api.github.com/repos/yichenroy/com-liferay-commerce", "Date": "2018-08-31T10:25:26Z"},
{"Line": "176=>178", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.view.View.getTag()=>java.util.List<connect.widget.album.model.AlbumFile>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5646/buggy-version/app.src.main.java.connect.widget.album.fragment.AlbumPreviewFragment.java", "BodyUseAPI": [], "Fixed commit": "e7266d53bffa9ca5124f102cbed1e1dc20b68c48", "Url": "https://api.github.com/repos/yueqingkong/Android", "Date": "2018-03-20T10:50:42Z"},
{"Line": "26=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6004/buggy-version/app.src.main.java.com.bepis.ugah3.CustomActivity.java", "BodyUseAPI": [], "Fixed commit": "9024be87cfb4faf5104494cec34621f7122cab0f", "Url": "https://api.github.com/repos/nbennett30/UGAH3", "Date": "2018-02-11T09:19:09Z"},
{"Line": "24=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.ruinscraft.chip.ChipUtil.hasModifications(block.getLocation().getWorld().getName(),org.bukkit.inventory.ItemStack)=>com.ruinscraft.chip.ChipUtil.hasModificationsForWorld(block.getLocation().getWorld().getName(),org.bukkit.inventory.ItemStack)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1120/buggy-version/src.main.java.com.ruinscraft.chip.listeners.WorldListener.java", "BodyUseAPI": [], "Fixed commit": "5161675d9ff08282394fd553b04c10be06ba73b0", "Url": "https://api.github.com/repos/Ruinscraft/CHIP", "Date": "2018-07-04T20:18:07Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "me.strukteon.bettercommand.command.PermissionManager.addRequiredBotPerms(java.util.List)=>me.strukteon.bettercommand.command.PermissionManager.addRequiredUserPerms(java.util.List)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3342/buggy-version/src.main.java.me.strukteon.bettercommand.command.PermissionManager.java", "BodyUseAPI": [], "Fixed commit": "33b51f4c4374f5c276a4692e551d5a3088f1caf9", "Url": "https://api.github.com/repos/strukteon/BulbyBot", "Date": "2018-09-01T11:28:14Z"},
{"Line": "17=>17", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "((org.web3j.rlp.RlpString) (values.getValues().get(1))).asBigInteger()=>((org.web3j.rlp.RlpString) (values.getValues().get(1))).asPositiveBigInteger()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4359/buggy-version/crypto.src.main.java.org.web3j.crypto.TransactionDecoder.java", "BodyUseAPI": [], "Fixed commit": "467067f2152a06611c7f46d6753e77b8b2328d1d", "Url": "https://api.github.com/repos/folex/web3j", "Date": "2018-07-26T13:59:22Z"},
{"Line": "16=>16", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "((org.web3j.rlp.RlpString) (values.getValues().get(0))).asBigInteger()=>((org.web3j.rlp.RlpString) (values.getValues().get(0))).asPositiveBigInteger()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4359/buggy-version/crypto.src.main.java.org.web3j.crypto.TransactionDecoder.java", "BodyUseAPI": [], "Fixed commit": "467067f2152a06611c7f46d6753e77b8b2328d1d", "Url": "https://api.github.com/repos/folex/web3j", "Date": "2018-07-26T13:59:22Z"},
{"Line": "18=>18", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "((org.web3j.rlp.RlpString) (values.getValues().get(2))).asBigInteger()=>((org.web3j.rlp.RlpString) (values.getValues().get(2))).asPositiveBigInteger()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4359/buggy-version/crypto.src.main.java.org.web3j.crypto.TransactionDecoder.java", "BodyUseAPI": [], "Fixed commit": "467067f2152a06611c7f46d6753e77b8b2328d1d", "Url": "https://api.github.com/repos/folex/web3j", "Date": "2018-07-26T13:59:22Z"},
{"Line": "20=>20", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "((org.web3j.rlp.RlpString) (values.getValues().get(4))).asBigInteger()=>((org.web3j.rlp.RlpString) (values.getValues().get(4))).asPositiveBigInteger()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4359/buggy-version/crypto.src.main.java.org.web3j.crypto.TransactionDecoder.java", "BodyUseAPI": [], "Fixed commit": "467067f2152a06611c7f46d6753e77b8b2328d1d", "Url": "https://api.github.com/repos/folex/web3j", "Date": "2018-07-26T13:59:22Z"},
{"Line": "73=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "step.getTimeInterval().getStartTime()=>step.getTimeInterval().getEndTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3913/buggy-version/ihmc-quadruped-robotics.src.main.java.us.ihmc.quadrupedRobotics.communication.QuadrupedMessageTools.java", "BodyUseAPI": [], "Fixed commit": "8fc17d033108eea11c08202a0ebc46893adbb17a", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-04-19T15:39:52Z"},
{"Line": "169=>169", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "us.ihmc.euclid.referenceFrame.FrameQuaternion.changeFrame(us.ihmc.euclid.referenceFrame.ReferenceFrame)=>us.ihmc.euclid.referenceFrame.FrameVector3D.setIncludingFrame(us.ihmc.yoVariables.variable.YoFrameVector3D)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3913/buggy-version/ihmc-quadruped-robotics.src.main.java.us.ihmc.quadrupedRobotics.controlModules.QuadrupedBodyOrientationManager.java", "BodyUseAPI": [], "Fixed commit": "8fc17d033108eea11c08202a0ebc46893adbb17a", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-04-19T15:39:52Z"},
{"Line": "168=>168", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "us.ihmc.euclid.referenceFrame.FrameQuaternion.setToZero(us.ihmc.robotics.screwTheory.MovingReferenceFrame)=>us.ihmc.euclid.referenceFrame.FrameQuaternion.setIncludingFrame(yoBodyOrientationSetpoint.getFrameOrientation())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3913/buggy-version/ihmc-quadruped-robotics.src.main.java.us.ihmc.quadrupedRobotics.controlModules.QuadrupedBodyOrientationManager.java", "BodyUseAPI": [], "Fixed commit": "8fc17d033108eea11c08202a0ebc46893adbb17a", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-04-19T15:39:52Z"},
{"Line": "169=>169", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "us.ihmc.euclid.referenceFrame.FrameQuaternion.changeFrame(us.ihmc.euclid.referenceFrame.ReferenceFrame)=>us.ihmc.euclid.referenceFrame.FrameVector3D.setIncludingFrame(us.ihmc.yoVariables.variable.YoFrameVector3D)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3913/buggy-version/ihmc-quadruped-robotics.src.main.java.us.ihmc.quadrupedRobotics.controlModules.QuadrupedBodyOrientationManager.java", "BodyUseAPI": [], "Fixed commit": "8fc17d033108eea11c08202a0ebc46893adbb17a", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-04-19T15:39:52Z"},
{"Line": "168=>168", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "us.ihmc.euclid.referenceFrame.FrameQuaternion.setToZero(us.ihmc.robotics.screwTheory.MovingReferenceFrame)=>us.ihmc.yoVariables.variable.YoFrameYawPitchRoll.getFrameOrientation()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3913/buggy-version/ihmc-quadruped-robotics.src.main.java.us.ihmc.quadrupedRobotics.controlModules.QuadrupedBodyOrientationManager.java", "BodyUseAPI": [], "Fixed commit": "8fc17d033108eea11c08202a0ebc46893adbb17a", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-04-19T15:39:52Z"},
{"Line": "172=>172", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "us.ihmc.euclid.referenceFrame.FrameVector3D.setToZero(us.ihmc.euclid.referenceFrame.ReferenceFrame)=>us.ihmc.euclid.referenceFrame.FrameVector3D.changeFrame(us.ihmc.euclid.referenceFrame.ReferenceFrame)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3913/buggy-version/ihmc-quadruped-robotics.src.main.java.us.ihmc.quadrupedRobotics.controlModules.QuadrupedBodyOrientationManager.java", "BodyUseAPI": [], "Fixed commit": "8fc17d033108eea11c08202a0ebc46893adbb17a", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-04-19T15:39:52Z"},
{"Line": "171=>171", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "us.ihmc.euclid.referenceFrame.FrameQuaternion.setYawPitchRoll(tempQuaternion.getYaw(),double,double)=>us.ihmc.euclid.referenceFrame.FrameQuaternion.changeFrame(us.ihmc.euclid.referenceFrame.ReferenceFrame)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3913/buggy-version/ihmc-quadruped-robotics.src.main.java.us.ihmc.quadrupedRobotics.controlModules.QuadrupedBodyOrientationManager.java", "BodyUseAPI": [], "Fixed commit": "8fc17d033108eea11c08202a0ebc46893adbb17a", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-04-19T15:39:52Z"},
{"Line": "1249=>1249", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.ebeaninternal.api.SpiEbeanServer.compileQuery(io.ebean.Query<T>,io.ebean.DelegateEbeanServer)=>io.ebeaninternal.api.SpiEbeanServer.compileQuery(io.ebean.Query<T>,io.ebean.Transaction)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8963/buggy-version/src.main.java.io.ebean.DelegateEbeanServer.java", "BodyUseAPI": [], "Fixed commit": "3ca409c6bf0e41d128c0445aafd2222d19abd5ff", "Url": "https://api.github.com/repos/ebean-orm/ebean-mocker", "Date": "2018-03-23T16:00:06Z"},
{"Line": "1254=>1254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.ebeaninternal.api.SpiEbeanServer.findIdsWithCopy(io.ebean.Query<T>,io.ebean.DelegateEbeanServer)=>io.ebeaninternal.api.SpiEbeanServer.findIdsWithCopy(io.ebean.Query<T>,io.ebean.Transaction)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8963/buggy-version/src.main.java.io.ebean.DelegateEbeanServer.java", "BodyUseAPI": [], "Fixed commit": "3ca409c6bf0e41d128c0445aafd2222d19abd5ff", "Url": "https://api.github.com/repos/ebean-orm/ebean-mocker", "Date": "2018-03-23T16:00:06Z"},
{"Line": "1259=>1259", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.ebeaninternal.api.SpiEbeanServer.findCountWithCopy(io.ebean.Query<T>,io.ebean.DelegateEbeanServer)=>io.ebeaninternal.api.SpiEbeanServer.findCountWithCopy(io.ebean.Query<T>,io.ebean.Transaction)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8963/buggy-version/src.main.java.io.ebean.DelegateEbeanServer.java", "BodyUseAPI": [], "Fixed commit": "3ca409c6bf0e41d128c0445aafd2222d19abd5ff", "Url": "https://api.github.com/repos/ebean-orm/ebean-mocker", "Date": "2018-03-23T16:00:06Z"},
{"Line": "657=>657", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "system.recordBattle()=>system.recordBattle(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7121/buggy-version/src.system.java", "BodyUseAPI": [], "Fixed commit": "4993820e67a0c744da32058e9a559383d615cd97", "Url": "https://api.github.com/repos/Raymo111/Battleship", "Date": "2018-06-14T22:11:39Z"},
{"Line": "39=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "VirtualPet.getPetAction()=>OrganicPets.getPetAction()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9776/buggy-version/src.main.java.OrganicPets.java", "BodyUseAPI": [], "Fixed commit": "0b96b2fe564fa943fb4529ba322d7ce6bbc26146", "Url": "https://api.github.com/repos/Retrojb/Virtual-Pet-Amok", "Date": "2018-06-09T02:02:04Z"},
{"Line": "8=>17", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class<? extends Interface>.getResource(java.lang.String)=>java.io.File.toURI()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2468/buggy-version/src.Interface.java", "BodyUseAPI": [], "Fixed commit": "9d8d8f80d45f5adc6bda8369a7543d3308cce2e5", "Url": "https://api.github.com/repos/Raderblob/projetMLR", "Date": "2018-05-08T13:55:42Z"},
{"Line": "8=>17", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.net.URL.toExternalForm()=>java.net.URI.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2468/buggy-version/src.Interface.java", "BodyUseAPI": [], "Fixed commit": "9d8d8f80d45f5adc6bda8369a7543d3308cce2e5", "Url": "https://api.github.com/repos/Raderblob/projetMLR", "Date": "2018-05-08T13:55:42Z"},
{"Line": "56=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.List<tickets.common.DestinationCard>.remove(tickets.common.DestinationCard)=>java.util.List<tickets.common.DestinationCard>.add(tickets.common.DestinationCard)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4319/buggy-version/app.src.main.java.tickets.server.model.game.DrewDestCardsState.java", "BodyUseAPI": [], "Fixed commit": "d761d3b4e9a4d6fbaa047a76e3b282e3578256a6", "Url": "https://api.github.com/repos/Spencer-Smith/tickets", "Date": "2018-03-22T22:32:27Z"},
{"Line": "56=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.List<tickets.common.DestinationCard>.remove(tickets.common.DestinationCard)=>java.util.List<tickets.common.DestinationCard>.add(tickets.common.DestinationCard)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4319/buggy-version/app.src.main.java.tickets.server.model.game.DrewDestCardsState.java", "BodyUseAPI": [], "Fixed commit": "d761d3b4e9a4d6fbaa047a76e3b282e3578256a6", "Url": "https://api.github.com/repos/Spencer-Smith/tickets", "Date": "2018-03-22T22:32:27Z"},
{"Line": "106=>107", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "((org.checkerframework.framework.type.AnnotatedTypeMirror.AnnotatedTypeVariable) (argType)).getUpperBound().getAnnotationInHierarchy(atypeFactory.NONDET)=>org.checkerframework.checker.determinism.DeterminismVisitor.getUpperBound(org.checkerframework.framework.type.AnnotatedTypeMirror)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2117/buggy-version/checker.src.main.java.org.checkerframework.checker.determinism.DeterminismVisitor.java", "BodyUseAPI": [], "Fixed commit": "8d4a20b709c4071f7ba171d1c01cc0e8e9fa463c", "Url": "https://api.github.com/repos/t-rasmud/checker-framework", "Date": "2018-09-24T18:56:31Z"},
{"Line": "121=>119", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "((org.checkerframework.framework.type.AnnotatedTypeMirror.AnnotatedWildcardType) (argType)).getExtendsBound().getAnnotationInHierarchy(atypeFactory.NONDET)=>org.checkerframework.checker.determinism.DeterminismVisitor.getUpperBound(org.checkerframework.framework.type.AnnotatedTypeMirror)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2117/buggy-version/checker.src.main.java.org.checkerframework.checker.determinism.DeterminismVisitor.java", "BodyUseAPI": [], "Fixed commit": "8d4a20b709c4071f7ba171d1c01cc0e8e9fa463c", "Url": "https://api.github.com/repos/t-rasmud/checker-framework", "Date": "2018-09-24T18:56:31Z"},
{"Line": "182=>182", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.munchmash.util.DialogUtils.showAlert(com.munchmash.activity.AddMoneyActivity,java.lang.String,java.lang.Runnable)=>com.munchmash.util.DialogUtils.showAlert(com.munchmash.activity.AddMoneyActivity,java.lang.String,java.lang.Runnable,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/302/buggy-version/app.src.main.java.com.munchmash.activity.AddMoneyActivity.java", "BodyUseAPI": [], "Fixed commit": "0f9a2cbaeee8b1e0cd8d1b60d39c5a93e0c97650", "Url": "https://api.github.com/repos/AtulRaj007/HomeMadeBazar", "Date": "2018-06-03T18:44:31Z"},
{"Line": "93=>91", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.architecture.extend.architecture.MainActivity.3.usePermission(com.architecture.extend.baselib.base.PermissionCallBack,Manifest.permission.READ_CONTACTS,Manifest.permission.CALL_PHONE)=>com.architecture.extend.architecture.MainActivity.3.onClickPicBtn(android.view.View)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9600/buggy-version/app.src.main.java.com.architecture.extend.architecture.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "06a29bd29050643973af60609088328b61685356", "Url": "https://api.github.com/repos/CommonLib/moduler", "Date": "2018-07-24T02:29:46Z"},
{"Line": "15=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.jurassicraft.server.entity.DietCondition.getName()=>org.jurassicraft.server.entity.DietCondition.getCondition(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5485/buggy-version/src.main.java.org.jurassicraft.server.entity.DietCondition.java", "BodyUseAPI": [], "Fixed commit": "0fe0758151d792b901944656a018f4d8ca43e242", "Url": "https://api.github.com/repos/JurassiCraftTeam/JurassiCraft2", "Date": "2018-06-29T01:45:40Z"},
{"Line": "224=>224", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.yjb.algorithm.sort.Sort.qSelect(int[],int,int,int)=>com.yjb.algorithm.sort.Sort.qSelectBasic(int[],int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7680/buggy-version/src.com.yjb.algorithm.sort.Sort.java", "BodyUseAPI": [], "Fixed commit": "1414451abbe4e5e926c305db3614522dbaa7268b", "Url": "https://api.github.com/repos/JiabingYang/JavaAlgorithms", "Date": "2018-03-16T09:13:37Z"},
{"Line": "222=>222", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.yjb.algorithm.sort.Sort.qSelect(int[],int,int,int)=>com.yjb.algorithm.sort.Sort.qSelectBasic(int[],int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7680/buggy-version/src.com.yjb.algorithm.sort.Sort.java", "BodyUseAPI": [], "Fixed commit": "1414451abbe4e5e926c305db3614522dbaa7268b", "Url": "https://api.github.com/repos/JiabingYang/JavaAlgorithms", "Date": "2018-03-16T09:13:37Z"},
{"Line": "101=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.almoturg.sprog.model.PreferencesRepository.getLastUpdateTime()=>com.almoturg.sprog.model.PreferencesRepository.getLastFullUpdateTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9185/buggy-version/app.src.main.java.com.almoturg.sprog.presenter.MainPresenter.java", "BodyUseAPI": [], "Fixed commit": "c67ad36437877ec08cee51a0d6365287eb389517", "Url": "https://api.github.com/repos/PaulKlinger/Sprog-App", "Date": "2018-02-06T18:58:13Z"},
{"Line": "129=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.ListView.setMultiChoiceModeListener(android.widget.AbsListView.MultiChoiceModeListener)=>android.widget.ListView.setMultiChoiceModeListener(android.widget.AbsListView.MultiChoiceModeListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8823/buggy-version/app.src.main.java.org.theotech.ceaselessandroid.fragment.JournalFragment.java", "BodyUseAPI": [], "Fixed commit": "048ac089354afeddf9c8d8f71ec2cc457ee195db", "Url": "https://api.github.com/repos/ceaseless-prayer/CeaselessAndroid", "Date": "2018-01-30T19:23:22Z"},
{"Line": "118=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.ListView.setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)=>android.widget.ListView.setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8823/buggy-version/app.src.main.java.org.theotech.ceaselessandroid.fragment.JournalFragment.java", "BodyUseAPI": [], "Fixed commit": "048ac089354afeddf9c8d8f71ec2cc457ee195db", "Url": "https://api.github.com/repos/ceaseless-prayer/CeaselessAndroid", "Date": "2018-01-30T19:23:22Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.driver_mobile)=>android.view.View.findViewById(R.id.passenger_mobile)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8414/buggy-version/app.src.main.java.com.example.vaahan.vaahan.PassengerLoginFragment.java", "BodyUseAPI": [], "Fixed commit": "3752b92f22bc3f4bf0b79740350ca92a7a6b189c", "Url": "https://api.github.com/repos/ShwethaVasudevan/Vaahan-2", "Date": "2018-04-25T15:47:26Z"},
{"Line": "180=>180", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.press.jsnake.war.Deck.size()=>com.press.jsnake.war.Deck.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5633/buggy-version/app.src.main.java.com.press.jsnake.war.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "87b0dbcd606617d9bc56f92025c6fec1d8bd63bf", "Url": "https://api.github.com/repos/jperez25/mobileApp", "Date": "2018-04-22T19:56:35Z"},
{"Line": "224=>225", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.press.jsnake.war.Deck.size()=>com.press.jsnake.war.Deck.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5633/buggy-version/app.src.main.java.com.press.jsnake.war.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "87b0dbcd606617d9bc56f92025c6fec1d8bd63bf", "Url": "https://api.github.com/repos/jperez25/mobileApp", "Date": "2018-04-22T19:56:35Z"},
{"Line": "218=>218", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.press.jsnake.war.Deck.size()=>com.press.jsnake.war.Deck.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5633/buggy-version/app.src.main.java.com.press.jsnake.war.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "87b0dbcd606617d9bc56f92025c6fec1d8bd63bf", "Url": "https://api.github.com/repos/jperez25/mobileApp", "Date": "2018-04-22T19:56:35Z"},
{"Line": "176=>176", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.press.jsnake.war.Deck.size()=>com.press.jsnake.war.Deck.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5633/buggy-version/app.src.main.java.com.press.jsnake.war.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "87b0dbcd606617d9bc56f92025c6fec1d8bd63bf", "Url": "https://api.github.com/repos/jperez25/mobileApp", "Date": "2018-04-22T19:56:35Z"},
{"Line": "204=>204", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.press.jsnake.war.Deck.size()=>com.press.jsnake.war.Deck.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5633/buggy-version/app.src.main.java.com.press.jsnake.war.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "87b0dbcd606617d9bc56f92025c6fec1d8bd63bf", "Url": "https://api.github.com/repos/jperez25/mobileApp", "Date": "2018-04-22T19:56:35Z"},
{"Line": "199=>199", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.press.jsnake.war.Deck.size()=>com.press.jsnake.war.Deck.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5633/buggy-version/app.src.main.java.com.press.jsnake.war.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "87b0dbcd606617d9bc56f92025c6fec1d8bd63bf", "Url": "https://api.github.com/repos/jperez25/mobileApp", "Date": "2018-04-22T19:56:35Z"},
{"Line": "611=>615", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.StringBuilder.toString()=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8772/buggy-version/android.src.main.java.com.imagepicker.ImagePickerModule.java", "BodyUseAPI": [], "Fixed commit": "694fa1de5cf4a3dce8e135054c3831fba85e3880", "Url": "https://api.github.com/repos/minyushov/react-native-image-picker", "Date": "2018-05-13T17:33:49Z"},
{"Line": "98=>98", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.lennart.model.imageprocessing.sites.netbet.NetBetTableReader.readBottomChatLine()=>com.lennart.model.imageprocessing.sites.netbet.NetBetTableReader.readMiddleChatLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5583/buggy-version/src.main.java.com.lennart.model.imageprocessing.sites.netbet.NetBetTableReader.java", "BodyUseAPI": [], "Fixed commit": "d56bb026355708f87860a5f5a1cfd2900e9fbce6", "Url": "https://api.github.com/repos/coconutsRhealthy/headsuphelper", "Date": "2018-03-01T19:52:30Z"},
{"Line": "194=>195", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.bumptech.glide.Glide.with(mActivity).load((videoPhotoBytes != null ? videoPhotoBytes : \"\"))=>com.bumptech.glide.Glide.with(mActivity).load(byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5510/buggy-version/mediapicker.src.main.java.com.eagle.mediapicker.adapter.MediaGridAdapter.java", "BodyUseAPI": [], "Fixed commit": "bbbc55e040698f0af39c634b80dfd890c0241a51", "Url": "https://api.github.com/repos/thedog2y/MediaPicker", "Date": "2018-10-24T10:47:21Z"},
{"Line": "25=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "answer_dense.getText().toString().equalsIgnoreCase(java.lang.String)=>answer_dense.getText().toString().equalsIgnoreCase(getString(R.string.earth))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7136/buggy-version/app.src.main.java.ru.d9d.wonderquizz.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "c1fcbcdca7728a3dac472bd670b319fc9df2a6ca", "Url": "https://api.github.com/repos/dshvedov/SolarSystemQuiz", "Date": "2018-02-07T17:06:52Z"},
{"Line": "55=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Toast.makeText(getApplicationContext(),java.lang.String,Toast.LENGTH_SHORT)=>android.widget.Toast.makeText(getApplicationContext(),java.lang.String,Toast.LENGTH_LONG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7136/buggy-version/app.src.main.java.ru.d9d.wonderquizz.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "c1fcbcdca7728a3dac472bd670b319fc9df2a6ca", "Url": "https://api.github.com/repos/dshvedov/SolarSystemQuiz", "Date": "2018-02-07T17:06:52Z"},
{"Line": "23=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "answer_star.getText().toString().equalsIgnoreCase(java.lang.String)=>answer_star.getText().toString().equalsIgnoreCase(getString(R.string.sun))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7136/buggy-version/app.src.main.java.ru.d9d.wonderquizz.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "c1fcbcdca7728a3dac472bd670b319fc9df2a6ca", "Url": "https://api.github.com/repos/dshvedov/SolarSystemQuiz", "Date": "2018-02-07T17:06:52Z"},
{"Line": "208=>210", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.microsoft.z3.Expr.toString()=>com.microsoft.z3.RatNum.getNumerator()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4953/buggy-version/green.src.za.ac.sun.cs.green.service.z3.ModelZ3JavaService.java", "BodyUseAPI": [], "Fixed commit": "ea0a0afa43408366e58a4a0c6a973f898877c508", "Url": "https://api.github.com/repos/gmu-swe/green-solver", "Date": "2018-05-25T21:17:31Z"},
{"Line": "45=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.slf4j.Logger.info(java.lang.String)=>org.slf4j.Logger.debug(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1675/buggy-version/src.main.java.com.mycompany.registration.registrationservice.service.impl.UserServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "eee04e0879fc2ff39ce0cdc348e639dc10df4469", "Url": "https://api.github.com/repos/colinbut/registration-service", "Date": "2018-08-04T14:43:55Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.valueOf(R.string.delete_marker)=>com.grrigore.tripback_up.MapsAdderActivity.getString(R.string.delete_marker)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8722/buggy-version/app.src.main.java.com.grrigore.tripback_up.MapsAdderActivity.java", "BodyUseAPI": [], "Fixed commit": "7b428220dadb009f705105f9211c0a82ec3ac5a7", "Url": "https://api.github.com/repos/grrigore/Trip-Back-up", "Date": "2018-10-19T09:42:51Z"},
{"Line": "77=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.valueOf(R.string.added_marker)=>com.grrigore.tripback_up.MapsAdderActivity.getString(R.string.added_marker)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8722/buggy-version/app.src.main.java.com.grrigore.tripback_up.MapsAdderActivity.java", "BodyUseAPI": [], "Fixed commit": "7b428220dadb009f705105f9211c0a82ec3ac5a7", "Url": "https://api.github.com/repos/grrigore/Trip-Back-up", "Date": "2018-10-19T09:42:51Z"},
{"Line": "82=>82", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.valueOf(R.string.no_marker)=>com.grrigore.tripback_up.MapsAdderActivity.getString(R.string.no_marker)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8722/buggy-version/app.src.main.java.com.grrigore.tripback_up.MapsAdderActivity.java", "BodyUseAPI": [], "Fixed commit": "7b428220dadb009f705105f9211c0a82ec3ac5a7", "Url": "https://api.github.com/repos/grrigore/Trip-Back-up", "Date": "2018-10-19T09:42:51Z"},
{"Line": "550=>550", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.iu.dsc.tws.comms.dfw.OutMessage.getChannelMessage()=>edu.iu.dsc.tws.comms.dfw.ChannelMessage.incrementRefCount(outMessage.getExternalSends().size())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7114/buggy-version/twister2.comms.src.java.edu.iu.dsc.tws.comms.dfw.ChannelDataFlowOperation.java", "BodyUseAPI": [], "Fixed commit": "0ffe537960354f4f77c133677b541dbf66a32a1f", "Url": "https://api.github.com/repos/DSC-SPIDAL/twister2", "Date": "2018-08-09T16:23:55Z"},
{"Line": "550=>550", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "outMessage.getChannelMessage().incrementRefCount(outMessage.getExternalSends().size())=>edu.iu.dsc.tws.comms.dfw.ChannelMessage.incrementRefCount(outMessage.getExternalSends().size())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7114/buggy-version/twister2.comms.src.java.edu.iu.dsc.tws.comms.dfw.ChannelDataFlowOperation.java", "BodyUseAPI": [], "Fixed commit": "0ffe537960354f4f77c133677b541dbf66a32a1f", "Url": "https://api.github.com/repos/DSC-SPIDAL/twister2", "Date": "2018-08-09T16:23:55Z"},
{"Line": "14=>14", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.lgsim.engine.graphEditor.graph.ui.ConfirmExitDialog.pack()=>com.lgsim.engine.graphEditor.app.ui.ConfirmExitDialog.pack()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7477/buggy-version/app.src.main.java.com.lgsim.engine.graphEditor.app.ApplicationListener.java", "BodyUseAPI": [], "Fixed commit": "5638252c63cf45b3eae7698fc2cb6335594f1cd9", "Url": "https://api.github.com/repos/lgsimu/graph-editor", "Date": "2018-04-27T01:45:04Z"},
{"Line": "16=>16", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.lgsim.engine.graphEditor.graph.ui.ConfirmExitDialog.setVisible(boolean)=>com.lgsim.engine.graphEditor.app.ui.ConfirmExitDialog.setVisible(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7477/buggy-version/app.src.main.java.com.lgsim.engine.graphEditor.app.ApplicationListener.java", "BodyUseAPI": [], "Fixed commit": "5638252c63cf45b3eae7698fc2cb6335594f1cd9", "Url": "https://api.github.com/repos/lgsimu/graph-editor", "Date": "2018-04-27T01:45:04Z"},
{"Line": "15=>15", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.lgsim.engine.graphEditor.graph.ui.ConfirmExitDialog.setLocationRelativeTo(<nulltype>)=>com.lgsim.engine.graphEditor.app.ui.ConfirmExitDialog.setLocationRelativeTo(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7477/buggy-version/app.src.main.java.com.lgsim.engine.graphEditor.app.ApplicationListener.java", "BodyUseAPI": [], "Fixed commit": "5638252c63cf45b3eae7698fc2cb6335594f1cd9", "Url": "https://api.github.com/repos/lgsimu/graph-editor", "Date": "2018-04-27T01:45:04Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.sql.PreparedStatement.setInt(int,int)=>java.sql.PreparedStatement.setFloat(int,float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5267/buggy-version/src.main.java.Main.java", "BodyUseAPI": [], "Fixed commit": "dd5b4123286b5e46b2aa6e16fdb6ff54e4904235", "Url": "https://api.github.com/repos/slavkowski/MeteoDataRW", "Date": "2018-10-24T16:55:49Z"},
{"Line": "47=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "myElement.getParent().getParent()=>com.intellij.psi.PsiElement.getPrevSibling()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5764/buggy-version/src.main.java.org.ballerinalang.plugins.idea.psi.scopeprocessors.BallerinaTopLevelScopeProcessor.java", "BodyUseAPI": [], "Fixed commit": "a28a806a543df3fa19a1d05b3ab5918ea0eb8dbb", "Url": "https://api.github.com/repos/Shan1024/ballerina-idea-plugin", "Date": "2018-04-25T05:47:23Z"},
{"Line": "45=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.floatcast.floatsight.data.FlySightTrackData.setSourceFileName(java.lang.String)=>org.floatcast.floatsight.data.FlySightTrackData.setSourceFileName(flySightTrackData.getSourceFileName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6707/buggy-version/floatsight.src.main.java.org.floatcast.floatsight.data.FlySightTrackData.java", "BodyUseAPI": [], "Fixed commit": "4d334ebbcc72f6d5706fd2ea7ea61bbb991d1eaf", "Url": "https://api.github.com/repos/84n4n4/FloatSight", "Date": "2018-09-16T23:38:49Z"},
{"Line": "45=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.floatcast.floatsight.data.FlySightTrackData.setSourceFileName(java.lang.String)=>org.floatcast.floatsight.data.FlySightTrackData.getSourceFileName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6707/buggy-version/floatsight.src.main.java.org.floatcast.floatsight.data.FlySightTrackData.java", "BodyUseAPI": [], "Fixed commit": "4d334ebbcc72f6d5706fd2ea7ea61bbb991d1eaf", "Url": "https://api.github.com/repos/84n4n4/FloatSight", "Date": "2018-09-16T23:38:49Z"},
{"Line": "52=>52", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "mAdapter.mItemClickListener.onItemClick(int)=>mAdapter.mItemClickListener.onItemClick(android.view.View,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9451/buggy-version/EasyRecyclerView.src.main.java.cc.easyandroid.easyrecyclerview.holders.FlexibleViewHolder.java", "BodyUseAPI": [], "Fixed commit": "80ff68089a43bd58c125f8bb2fcc0295c3ed0dac", "Url": "https://api.github.com/repos/easyandroid-cc/EasyRecyclerView", "Date": "2018-10-19T03:37:51Z"},
{"Line": "75=>75", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "mAdapter.mItemLongClickListener.onItemLongClick(int)=>mAdapter.mItemLongClickListener.onItemLongClick(android.view.View,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9451/buggy-version/EasyRecyclerView.src.main.java.cc.easyandroid.easyrecyclerview.holders.FlexibleViewHolder.java", "BodyUseAPI": [], "Fixed commit": "80ff68089a43bd58c125f8bb2fcc0295c3ed0dac", "Url": "https://api.github.com/repos/easyandroid-cc/EasyRecyclerView", "Date": "2018-10-19T03:37:51Z"},
{"Line": "144=>144", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.linecorp.clova.extension.boot.interceptor.LoggingRequestResponseInterceptor.SafeResponse.getResponseBodyAsText()=>com.linecorp.clova.extension.boot.interceptor.LoggingRequestResponseInterceptor.SafeResponse.getResponseBodyAsText()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3788/buggy-version/clova-extension-boot-web.src.main.java.com.linecorp.clova.extension.boot.interceptor.LoggingRequestResponseInterceptor.java", "BodyUseAPI": [], "Fixed commit": "367a6c88cd5c556bd7ed55586b444e511a33031f", "Url": "https://api.github.com/repos/uich/clova-cek-sdk-java", "Date": "2018-10-05T05:28:41Z"},
{"Line": "204=>204", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.linecorp.clova.extension.boot.interceptor.LoggingRequestResponseInterceptor.RecycledClientHttpResponse(this.original, this.responseBodyAsText, this.responseCharset)=>new com.linecorp.clova.extension.boot.interceptor.LoggingRequestResponseInterceptor.RecycledClientHttpResponse(this.original, this.responseBodyBinary)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3788/buggy-version/clova-extension-boot-web.src.main.java.com.linecorp.clova.extension.boot.interceptor.LoggingRequestResponseInterceptor.java", "BodyUseAPI": [], "Fixed commit": "367a6c88cd5c556bd7ed55586b444e511a33031f", "Url": "https://api.github.com/repos/uich/clova-cek-sdk-java", "Date": "2018-10-05T05:28:41Z"},
{"Line": "195=>195", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.springframework.util.StreamUtils.copyToString(java.io.InputStream,java.nio.charset.Charset)=>org.springframework.util.StreamUtils.copyToByteArray(java.io.InputStream)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3788/buggy-version/clova-extension-boot-web.src.main.java.com.linecorp.clova.extension.boot.interceptor.LoggingRequestResponseInterceptor.java", "BodyUseAPI": [], "Fixed commit": "367a6c88cd5c556bd7ed55586b444e511a33031f", "Url": "https://api.github.com/repos/uich/clova-cek-sdk-java", "Date": "2018-10-05T05:28:41Z"},
{"Line": "158=>158", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.usfirst.frc.team6925.robot.commands.DriveWithJoystick.drive()=>org.usfirst.frc.team6925.robot.commands.DriveWithJoystick.Joystick()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4656/buggy-version/src.org.usfirst.frc.team6925.robot.Robot.java", "BodyUseAPI": [], "Fixed commit": "f6f1841e911751e3f0128ce6c9e0bc8eb48978fe", "Url": "https://api.github.com/repos/WARbotics/WARbotics-PowerUp-2018", "Date": "2018-02-02T23:15:19Z"},
{"Line": "174=>174", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.usfirst.frc.team6925.robot.subsystems.DriveTrain.tankDrive(org.usfirst.frc.team6925.robot.Robot)=>org.usfirst.frc.team6925.robot.subsystems.DriveTrain.tankDrive(edu.wpi.first.wpilibj.Joystick)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4656/buggy-version/src.org.usfirst.frc.team6925.robot.Robot.java", "BodyUseAPI": [], "Fixed commit": "f6f1841e911751e3f0128ce6c9e0bc8eb48978fe", "Url": "https://api.github.com/repos/WARbotics/WARbotics-PowerUp-2018", "Date": "2018-02-02T23:15:19Z"},
{"Line": "79=>79", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "castor.language.Tuple.toString()=>exampleTuple.getValues().toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7259/buggy-version/src.castor.algorithms.coverageengines.CoverageBySubsumption.java", "BodyUseAPI": [], "Fixed commit": "f7bb7006c25d8d01473cafbe6bfcad59bd679f74", "Url": "https://api.github.com/repos/jpicado/Castor", "Date": "2016-09-29T01:43:56Z"},
{"Line": "100=>100", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "castor.language.Tuple.toString()=>exampleTuple.getValues().toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7259/buggy-version/src.castor.algorithms.coverageengines.CoverageBySubsumption.java", "BodyUseAPI": [], "Fixed commit": "f7bb7006c25d8d01473cafbe6bfcad59bd679f74", "Url": "https://api.github.com/repos/jpicado/Castor", "Date": "2016-09-29T01:43:56Z"},
{"Line": "124=>124", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "castor.language.Tuple.toString()=>exampleTuple.getValues().toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7259/buggy-version/src.castor.algorithms.coverageengines.CoverageBySubsumptionParallel.java", "BodyUseAPI": [], "Fixed commit": "f7bb7006c25d8d01473cafbe6bfcad59bd679f74", "Url": "https://api.github.com/repos/jpicado/Castor", "Date": "2016-09-29T01:43:56Z"},
{"Line": "103=>103", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "castor.language.Tuple.toString()=>exampleTuple.getValues().toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7259/buggy-version/src.castor.algorithms.coverageengines.CoverageBySubsumptionParallel.java", "BodyUseAPI": [], "Fixed commit": "f7bb7006c25d8d01473cafbe6bfcad59bd679f74", "Url": "https://api.github.com/repos/jpicado/Castor", "Date": "2016-09-29T01:43:56Z"},
{"Line": "84=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "castor.language.Tuple.toString()=>exampleTuple.getValues().toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7259/buggy-version/src.castor.algorithms.coverageengines.CoverageBySubsumptionParallelUsingMyMatching.java", "BodyUseAPI": [], "Fixed commit": "f7bb7006c25d8d01473cafbe6bfcad59bd679f74", "Url": "https://api.github.com/repos/jpicado/Castor", "Date": "2016-09-29T01:43:56Z"},
{"Line": "105=>105", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "castor.language.Tuple.toString()=>exampleTuple.getValues().toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7259/buggy-version/src.castor.algorithms.coverageengines.CoverageBySubsumptionParallelUsingMyMatching.java", "BodyUseAPI": [], "Fixed commit": "f7bb7006c25d8d01473cafbe6bfcad59bd679f74", "Url": "https://api.github.com/repos/jpicado/Castor", "Date": "2016-09-29T01:43:56Z"},
{"Line": "144=>145", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.spoofax.interpreter.library.jsglr.STRSGLR_anno_location.AsfixAnnoLocation.termAt(org.spoofax.interpreter.terms.IStrategoTerm,int)=>org.spoofax.interpreter.core.Tools.termAt(org.spoofax.interpreter.terms.IStrategoTerm,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2615/buggy-version/org.spoofax.interpreter.library.jsglr.src.main.java.org.spoofax.interpreter.library.jsglr.STRSGLR_anno_location.java", "BodyUseAPI": [], "Fixed commit": "169d0c523b37fc896d47f09a5ce6d641d6ef7484", "Url": "https://api.github.com/repos/metaborg/jsglr", "Date": "2018-10-16T13:41:32Z"},
{"Line": "95=>96", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.spoofax.interpreter.library.jsglr.STRSGLR_anno_location.AsfixAnnoLocation.termAt(org.spoofax.interpreter.terms.IStrategoTerm,int)=>org.spoofax.interpreter.core.Tools.termAt(org.spoofax.interpreter.terms.IStrategoTerm,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2615/buggy-version/org.spoofax.interpreter.library.jsglr.src.main.java.org.spoofax.interpreter.library.jsglr.STRSGLR_anno_location.java", "BodyUseAPI": [], "Fixed commit": "169d0c523b37fc896d47f09a5ce6d641d6ef7484", "Url": "https://api.github.com/repos/metaborg/jsglr", "Date": "2018-10-16T13:41:32Z"},
{"Line": "30=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "activity.getWindow().setStatusBarColor(int)=>android.view.Window.setStatusBarColor(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7423/buggy-version/statusbar.src.main.java.com.yumf.jince.statusbar.StatusBarCompat.java", "BodyUseAPI": [], "Fixed commit": "475b912d0f5a4b8811cfde361295a4042a45534b", "Url": "https://api.github.com/repos/yuminfeng/statusbarcompat", "Date": "2018-09-20T03:26:57Z"},
{"Line": "150=>151", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "hotel.booking.BookingUI.displayConfirmedBooking(java.lang.String,int,java.util.Date,int,java.lang.String,java.lang.String,int,double,int)=>hotel.booking.BookingUI.displayConfirmedBooking(java.lang.String,int,java.util.Date,int,java.lang.String,java.lang.String,int,double,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1313/buggy-version/booking.BookingCTL.java", "BodyUseAPI": [], "Fixed commit": "9142b832f64618033462318177efc4575659fb4c", "Url": "https://api.github.com/repos/INKSpire2018/hotel", "Date": "2018-09-23T10:00:08Z"},
{"Line": "26=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "others.createInteger(\"connectorNumberOfThreads\").whichIsHidden()=>others.createInteger(\"connectorNumberOfThreads\").withDefaultValue(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7197/buggy-version/app.src.com.constellio.app.modules.es.ESConfigs.java", "BodyUseAPI": [], "Fixed commit": "e200579bd496a1928c48744ba0efea5a3d5f32f6", "Url": "https://api.github.com/repos/doculibre/constellio", "Date": "2018-04-16T16:47:41Z"},
{"Line": "113=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.ngoc.bookmanagement.repository.BookRepository.getAllByEnabled(boolean,org.springframework.data.domain.Pageable)=>com.ngoc.bookmanagement.repository.BookRepository.getAllByEnabledAndAuthorLikeOrTitleLike(java.lang.String,java.lang.String,boolean,org.springframework.data.domain.Pageable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/757/buggy-version/assignment4.src.main.java.com.ngoc.bookmanagement.service.BookServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "795fb8c677125a3729f083354e8b96cad364c190", "Url": "https://api.github.com/repos/novahub-internship-2017-web/BE_2017_NGOC", "Date": "2018-04-26T13:55:07Z"},
{"Line": "160=>162", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.ngoc.bookmanagement.service.BookService.getAllBooksByEnabled(javax.servlet.http.HttpServletRequest,boolean,org.springframework.data.domain.Pageable)=>com.ngoc.bookmanagement.service.BookService.getAllBooksByEnabled(java.lang.String,javax.servlet.http.HttpServletRequest,boolean,org.springframework.data.domain.Pageable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/757/buggy-version/assignment4.src.main.java.com.ngoc.bookmanagement.controller.BookController.java", "BodyUseAPI": [], "Fixed commit": "795fb8c677125a3729f083354e8b96cad364c190", "Url": "https://api.github.com/repos/novahub-internship-2017-web/BE_2017_NGOC", "Date": "2018-04-26T13:55:07Z"},
{"Line": "175=>179", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.ngoc.bookmanagement.service.BookService.getAllBooksByEnabled(javax.servlet.http.HttpServletRequest,boolean,org.springframework.data.domain.Pageable)=>com.ngoc.bookmanagement.service.BookService.getAllBooksByEnabled(java.lang.String,javax.servlet.http.HttpServletRequest,boolean,org.springframework.data.domain.Pageable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/757/buggy-version/assignment4.src.main.java.com.ngoc.bookmanagement.controller.BookController.java", "BodyUseAPI": [], "Fixed commit": "795fb8c677125a3729f083354e8b96cad364c190", "Url": "https://api.github.com/repos/novahub-internship-2017-web/BE_2017_NGOC", "Date": "2018-04-26T13:55:07Z"},
{"Line": "43=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Data.Abteilung.display()=>java.io.PrintStream.println((\"Name: \" + (name)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3611/buggy-version/src.Data.Abteilung.java", "BodyUseAPI": [], "Fixed commit": "7ed71e29c80f1d033204cfc167c9547af6250204", "Url": "https://api.github.com/repos/TheDraxes/Inventarverwaltung", "Date": "2018-08-06T12:52:20Z"},
{"Line": "151=>151", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.cyclestreets.content.RouteDatabase.expandWaypoints(cursor.getString(1))=>net.cyclestreets.content.DatabaseHelper.deserializeWaypoints(cursor.getString(1))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9079/buggy-version/libraries.cyclestreets-view.src.main.java.net.cyclestreets.content.RouteDatabase.java", "BodyUseAPI": [], "Fixed commit": "d391588bdd6a0e14b2ccd9eb156b00f2287e1a95", "Url": "https://api.github.com/repos/cyclestreets/android", "Date": "2018-08-02T13:17:22Z"},
{"Line": "653=>650", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.HashMap<java.lang.String, Project>.get(Project)=>java.util.HashMap<java.lang.String, Project>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5478/buggy-version/SchedulingTool.src.Application.java", "BodyUseAPI": [], "Fixed commit": "8bf104209b9791941f829e03d8069f6213448ce1", "Url": "https://api.github.com/repos/anishprasad01/461SchedulingTool", "Date": "2018-06-06T19:41:03Z"},
{"Line": "167=>71", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "javax.servlet.http.HttpServletResponse.sendRedirect(java.lang.String)=>org.xcolab.commons.servlet.flash.AlertMessage.danger(\"Please enter your comment\").flash(javax.servlet.http.HttpServletRequest)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6735/buggy-version/view.src.main.java.org.xcolab.view.taglibs.xcolab.jspTags.discussion.actions.AddDiscussionMessageActionController.java", "BodyUseAPI": [], "Fixed commit": "4a60d7eef4f219180596987c9ddaa03ee45605a7", "Url": "https://api.github.com/repos/CCI-MIT/XCoLab", "Date": "2018-08-01T00:05:51Z"},
{"Line": "48=>48", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.TextView.append(java.lang.String)=>android.widget.TextView.setText((\"Donation Location: \" + (java.lang.Integer.toString(currentDonation.getDonationLocation()))))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3462/buggy-version/app.src.main.java.edu.gatech.donatracker.controller.ViewDonationDetailsActivity.java", "BodyUseAPI": [], "Fixed commit": "2b279fe7811a31d8bf5888d3f5d46025a651eaa1", "Url": "https://api.github.com/repos/WilliamYuhangLee/DonaTracker", "Date": "2018-10-29T15:16:37Z"},
{"Line": "50=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.TextView.append(java.lang.String)=>android.widget.TextView.setText((\"Value in USD: \" + (java.lang.Double.toString(currentDonation.getValueInUSD()))))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3462/buggy-version/app.src.main.java.edu.gatech.donatracker.controller.ViewDonationDetailsActivity.java", "BodyUseAPI": [], "Fixed commit": "2b279fe7811a31d8bf5888d3f5d46025a651eaa1", "Url": "https://api.github.com/repos/WilliamYuhangLee/DonaTracker", "Date": "2018-10-29T15:16:37Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.gatech.donatracker.controller.ViewDonationDetailsActivity.setContentView(R.layout.activity_view_location_details)=>edu.gatech.donatracker.controller.ViewDonationDetailsActivity.setContentView(R.layout.activity_view_donation_details)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3462/buggy-version/app.src.main.java.edu.gatech.donatracker.controller.ViewDonationDetailsActivity.java", "BodyUseAPI": [], "Fixed commit": "2b279fe7811a31d8bf5888d3f5d46025a651eaa1", "Url": "https://api.github.com/repos/WilliamYuhangLee/DonaTracker", "Date": "2018-10-29T15:16:37Z"},
{"Line": "49=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.TextView.append(currentDonation.getFullDescription())=>android.widget.TextView.setText((\"Full Description: \" + (currentDonation.getFullDescription())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3462/buggy-version/app.src.main.java.edu.gatech.donatracker.controller.ViewDonationDetailsActivity.java", "BodyUseAPI": [], "Fixed commit": "2b279fe7811a31d8bf5888d3f5d46025a651eaa1", "Url": "https://api.github.com/repos/WilliamYuhangLee/DonaTracker", "Date": "2018-10-29T15:16:37Z"},
{"Line": "51=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.TextView.append(currentDonation.getComments())=>android.widget.TextView.setText((\"Comments: \" + (currentDonation.getComments())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3462/buggy-version/app.src.main.java.edu.gatech.donatracker.controller.ViewDonationDetailsActivity.java", "BodyUseAPI": [], "Fixed commit": "2b279fe7811a31d8bf5888d3f5d46025a651eaa1", "Url": "https://api.github.com/repos/WilliamYuhangLee/DonaTracker", "Date": "2018-10-29T15:16:37Z"},
{"Line": "46=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.TextView.append(currentDonation.getDonationTime().toString())=>android.widget.TextView.setText((\"Donation Time: \" + (currentDonation.getDonationTime().toString())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3462/buggy-version/app.src.main.java.edu.gatech.donatracker.controller.ViewDonationDetailsActivity.java", "BodyUseAPI": [], "Fixed commit": "2b279fe7811a31d8bf5888d3f5d46025a651eaa1", "Url": "https://api.github.com/repos/WilliamYuhangLee/DonaTracker", "Date": "2018-10-29T15:16:37Z"},
{"Line": "114=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.gephi.graph.api.Table.addColumn(java.lang.String,java.lang.String,java.lang.Class,double)=>org.gephi.graph.api.Table.addColumn(java.lang.String,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4401/buggy-version/modules.NodeWeight.src.main.java.org.gephi.layout.plugins.layout.NodeWeight.ForceAtlas2.java", "BodyUseAPI": [], "Fixed commit": "46c559d8f45a388e88cf01bf745301003df1c29c", "Url": "https://api.github.com/repos/juliannej/gephi-plugins-bootcamp", "Date": "2018-08-16T21:25:39Z"},
{"Line": "1035=>1035", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getCreator()=>link.labeling.retcat.classes.SuggestionItem.getCreator()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.RetcatResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "1030=>1030", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getLabels()=>link.labeling.retcat.classes.SuggestionItem.getLabels()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.RetcatResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "1051=>1051", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getBroaderTerms()=>link.labeling.retcat.classes.SuggestionItem.getBroaderTerms()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.RetcatResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "1070=>1070", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getNarrowerTerms()=>link.labeling.retcat.classes.SuggestionItem.getNarrowerTerms()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.RetcatResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "1032=>1032", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getSchemeTitle()=>link.labeling.retcat.classes.SuggestionItem.getSchemeTitle()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.RetcatResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "1043=>1043", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getLanguage()=>link.labeling.retcat.classes.SuggestionItem.getLanguage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.RetcatResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "1047=>1047", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getGroup()=>link.labeling.retcat.classes.SuggestionItem.getGroup()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.RetcatResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "1034=>1034", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getOrcid()=>link.labeling.retcat.classes.SuggestionItem.getOrcid()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.RetcatResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "1049=>1049", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getQuality()=>link.labeling.retcat.classes.SuggestionItem.getQuality()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.RetcatResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "1028=>1028", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getURL()=>link.labeling.retcat.classes.SuggestionItem.getURL()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.RetcatResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "1038=>1038", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getDescriptions()=>link.labeling.retcat.classes.SuggestionItem.getDescriptions()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.RetcatResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "1045=>1045", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getType()=>link.labeling.retcat.classes.SuggestionItem.getType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.RetcatResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "1037=>1037", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getDescriptions()=>link.labeling.retcat.classes.SuggestionItem.getDescriptions()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.RetcatResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "154=>154", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.setDescription(java.lang.String)=>link.labeling.retcat.classes.SuggestionItem.setDescription(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "217=>217", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getSchemeTitle()=>link.labeling.retcat.classes.SuggestionItem.getSchemeTitle()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "201=>201", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getURL()=>link.labeling.retcat.classes.SuggestionItem.getURL()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "140=>140", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.setLabel(java.lang.String)=>link.labeling.retcat.classes.SuggestionItem.setLabel(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "122=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, v1.utils.retcat.SuggestionItem>.put(java.lang.String,v1.utils.retcat.SuggestionItem)=>java.util.Map<java.lang.String, link.labeling.retcat.classes.SuggestionItem>.put(java.lang.String,link.labeling.retcat.classes.SuggestionItem)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "206=>206", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getLabels()=>link.labeling.retcat.classes.SuggestionItem.getLabels()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "145=>145", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.setSchemeTitle(java.lang.String)=>link.labeling.retcat.classes.SuggestionItem.setSchemeTitle(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "148=>148", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.setSchemeURI(java.lang.String)=>link.labeling.retcat.classes.SuggestionItem.setSchemeURI(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "254=>254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getNarrowerTerms()=>link.labeling.retcat.classes.SuggestionItem.getNarrowerTerms()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "226=>226", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getDescriptions()=>link.labeling.retcat.classes.SuggestionItem.getDescriptions()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "172=>172", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.setBroaderTerm(java.util.HashMap<java.lang.String, java.lang.String>)=>link.labeling.retcat.classes.SuggestionItem.setBroaderTerm(java.util.HashMap<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "190=>190", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.setNarrowerTerm(java.util.HashMap<java.lang.String, java.lang.String>)=>link.labeling.retcat.classes.SuggestionItem.setNarrowerTerm(java.util.HashMap<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "235=>235", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getBroaderTerms()=>link.labeling.retcat.classes.SuggestionItem.getBroaderTerms()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "222=>222", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getSchemeURI()=>link.labeling.retcat.classes.SuggestionItem.getSchemeURI()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "135=>135", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.setId(java.lang.String)=>link.labeling.retcat.classes.SuggestionItem.setId(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "202=>202", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "v1.utils.retcat.SuggestionItem.getId()=>link.labeling.retcat.classes.SuggestionItem.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9015/buggy-version/api.src.main.java.v1.rest.SearchResource.java", "BodyUseAPI": [], "Fixed commit": "ee656aa8b4da7ae4c2270785eb550d4ac8fd436b", "Url": "https://api.github.com/repos/mainzed/labelingsystem-server", "Date": "2018-02-26T12:47:36Z"},
{"Line": "239=>239", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ad.getUser().getUsername()=>ad.getUser().getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9108/buggy-version/src.main.java.com.dhbw.wwi16.b2.portfolioaufgabe1.web.AdEditServlet.java", "BodyUseAPI": [], "Fixed commit": "95c300cb3e1a3ab83dfbfd17be2791ce936cbb77", "Url": "https://api.github.com/repos/x7Git/PortfolioAufgabe_1", "Date": "2018-02-28T11:58:35Z"},
{"Line": "250=>250", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "task.getOwner().getUsername()=>task.getOwner().getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9108/buggy-version/src.main.java.com.dhbw.wwi16.b2.portfolioaufgabe1.web.TaskEditServlet.java", "BodyUseAPI": [], "Fixed commit": "95c300cb3e1a3ab83dfbfd17be2791ce936cbb77", "Url": "https://api.github.com/repos/x7Git/PortfolioAufgabe_1", "Date": "2018-02-28T11:58:35Z"},
{"Line": "378=>378", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.sql.Connection.prepareStatement(java.lang.String)=>java.sql.Connection.prepareStatement(java.lang.String,java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2860/buggy-version/src.main.java.com.example.demo.repository.JDBCRepository.java", "BodyUseAPI": [], "Fixed commit": "f7ae4891ec62944ca953bec7d0c431493093711f", "Url": "https://api.github.com/repos/hokanovic/brekkieFinal", "Date": "2018-05-03T20:31:55Z"},
{"Line": "869=>871", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.charAt(int)=>java.lang.String.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7746/buggy-version/Analyzer.java", "BodyUseAPI": [], "Fixed commit": "4cb56f05f998801abf4b1929da833d86e472fae7", "Url": "https://api.github.com/repos/JamesWWalker/SecureCvisualJ", "Date": "2018-01-10T01:52:38Z"},
{"Line": "232=>232", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "hmvv.gui.adminFrames.EnterSample.clearFields()=>hmvv.gui.adminFrames.EnterSample.clearFields(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6541/buggy-version/HMVV.src.hmvv.gui.adminFrames.EnterSample.java", "BodyUseAPI": [], "Fixed commit": "941e76403b1ec73b0c5e2dd41f5a43734961a804", "Url": "https://api.github.com/repos/hmvv/hmvv", "Date": "2018-07-20T23:18:09Z"},
{"Line": "355=>355", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "hmvv.gui.adminFrames.EnterSample.clearFields()=>hmvv.gui.adminFrames.EnterSample.clearFields(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6541/buggy-version/HMVV.src.hmvv.gui.adminFrames.EnterSample.java", "BodyUseAPI": [], "Fixed commit": "941e76403b1ec73b0c5e2dd41f5a43734961a804", "Url": "https://api.github.com/repos/hmvv/hmvv", "Date": "2018-07-20T23:18:09Z"},
{"Line": "324=>324", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "hmvv.gui.adminFrames.EnterSample.clearFields()=>hmvv.gui.adminFrames.EnterSample.clearFields(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6541/buggy-version/HMVV.src.hmvv.gui.adminFrames.EnterSample.java", "BodyUseAPI": [], "Fixed commit": "941e76403b1ec73b0c5e2dd41f5a43734961a804", "Url": "https://api.github.com/repos/hmvv/hmvv", "Date": "2018-07-20T23:18:09Z"},
{"Line": "122=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.error(java.lang.String,java.lang.String,java.lang.Exception)=>org.slf4j.Logger.error(java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7265/buggy-version/fragments.src.main.java.io.andromeda.fragments.Fragment.java", "BodyUseAPI": [], "Fixed commit": "8e80bececbf55dc7db9b8fc4fd5db00a5df1d1cb", "Url": "https://api.github.com/repos/rygel/fragments", "Date": "2018-10-30T17:00:17Z"},
{"Line": "88=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "il.org.hasadna.siri_client.gtfs.analysis.SchedulingDataCreator.createScheduleForSiri(java.util.Collection<il.org.hasadna.siri_client.gtfs.analysis.GtfsRecord>,il.org.hasadna.siri_client.gtfs.analysis.GtfsDataManipulations,java.lang.String)=>il.org.hasadna.siri_client.gtfs.analysis.SchedulingDataCreator.createScheduleForSiri(java.util.Collection<il.org.hasadna.siri_client.gtfs.analysis.GtfsRecord>,il.org.hasadna.siri_client.gtfs.analysis.GtfsDataManipulations,java.lang.String,java.util.List<java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9289/buggy-version/siri.siri-client.src.main.java.il.org.hasadna.siri_client.gtfs.main.DefaultGtfsQueryBasedOnFtp.java", "BodyUseAPI": [], "Fixed commit": "044287514f3a70526132dffdeb74be256bef2aca", "Url": "https://api.github.com/repos/hasadna/open-bus", "Date": "2018-07-14T20:31:35Z"},
{"Line": "137=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.codecool.ccmsv2.controller.dao.XMLStudentsDAO.serializeAssignmentsData(com.codecool.ccmsv2.model.Student,org.w3c.dom.Element)=>com.codecool.ccmsv2.controller.dao.XMLStudentsDAO.serializeAssignmentsData(com.codecool.ccmsv2.model.Student,org.w3c.dom.Element,java.util.List<com.codecool.ccmsv2.model.Assignment>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7699/buggy-version/src.main.java.com.codecool.ccmsv2.controller.dao.XMLStudentsDAO.java", "BodyUseAPI": [], "Fixed commit": "bc5a46c110fe00a0a27dbf9be54424029c58862b", "Url": "https://api.github.com/repos/tomaszlukaszyk/ccmsv2", "Date": "2018-07-24T06:56:23Z"},
{"Line": "80=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.codecool.ccmsv2.controller.dao.XMLStudentsDAO.serializeStudentData(com.codecool.ccmsv2.model.Student,org.w3c.dom.Element)=>com.codecool.ccmsv2.controller.dao.XMLStudentsDAO.serializeStudentData(com.codecool.ccmsv2.model.Student,org.w3c.dom.Element,java.util.List<com.codecool.ccmsv2.model.Assignment>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7699/buggy-version/src.main.java.com.codecool.ccmsv2.controller.dao.XMLStudentsDAO.java", "BodyUseAPI": [], "Fixed commit": "bc5a46c110fe00a0a27dbf9be54424029c58862b", "Url": "https://api.github.com/repos/tomaszlukaszyk/ccmsv2", "Date": "2018-07-24T06:56:23Z"},
{"Line": "62=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.linkedin.drelephant.mapreduce.data.MapReduceApplicationData.getStartTime()=>com.linkedin.drelephant.mapreduce.data.MapReduceApplicationData.getSubmitTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9697/buggy-version/app.com.linkedin.drelephant.mapreduce.MapReduceMetricsAggregator.java", "BodyUseAPI": [], "Fixed commit": "8e86db21287e0889414c3c06e84dd5495e4f573d", "Url": "https://api.github.com/repos/arpang/dr-elephant", "Date": "2018-02-23T09:11:00Z"},
{"Line": "75=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getTargetGraph().isPresent()=>java.util.Optional<org.apache.jena.graph.Graph>.isPresent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8950/buggy-version/commons-rdf-jena.src.main.java.org.apache.commons.rdf.jena.experimental.JenaRDFParser.java", "BodyUseAPI": [], "Fixed commit": "5dafbce6a1abd041c2233cd6a5101c8d753f0c63", "Url": "https://api.github.com/repos/BME-MIT-IET/Csipet-Csapat-iet-2018", "Date": "2018-05-05T20:07:40Z"},
{"Line": "93=>100", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getSourceFile().isPresent()=>java.util.Optional<java.nio.file.Path>.isPresent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8950/buggy-version/commons-rdf-jena.src.main.java.org.apache.commons.rdf.jena.experimental.JenaRDFParser.java", "BodyUseAPI": [], "Fixed commit": "5dafbce6a1abd041c2233cd6a5101c8d753f0c63", "Url": "https://api.github.com/repos/BME-MIT-IET/Csipet-Csapat-iet-2018", "Date": "2018-05-05T20:07:40Z"},
{"Line": "92=>99", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getSourceIri().get()=>java.util.Optional<org.apache.commons.rdf.api.IRI>.get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8950/buggy-version/commons-rdf-jena.src.main.java.org.apache.commons.rdf.jena.experimental.JenaRDFParser.java", "BodyUseAPI": [], "Fixed commit": "5dafbce6a1abd041c2233cd6a5101c8d753f0c63", "Url": "https://api.github.com/repos/BME-MIT-IET/Csipet-Csapat-iet-2018", "Date": "2018-05-05T20:07:40Z"},
{"Line": "91=>98", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getSourceIri().isPresent()=>java.util.Optional<org.apache.commons.rdf.api.IRI>.isPresent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8950/buggy-version/commons-rdf-jena.src.main.java.org.apache.commons.rdf.jena.experimental.JenaRDFParser.java", "BodyUseAPI": [], "Fixed commit": "5dafbce6a1abd041c2233cd6a5101c8d753f0c63", "Url": "https://api.github.com/repos/BME-MIT-IET/Csipet-Csapat-iet-2018", "Date": "2018-05-05T20:07:40Z"},
{"Line": "84=>89", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getRdfTermFactory().get()=>java.util.Optional<org.apache.commons.rdf.api.RDF>.get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8950/buggy-version/commons-rdf-jena.src.main.java.org.apache.commons.rdf.jena.experimental.JenaRDFParser.java", "BodyUseAPI": [], "Fixed commit": "5dafbce6a1abd041c2233cd6a5101c8d753f0c63", "Url": "https://api.github.com/repos/BME-MIT-IET/Csipet-Csapat-iet-2018", "Date": "2018-05-05T20:07:40Z"},
{"Line": "76=>79", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getTargetGraph().get()=>java.util.Optional<org.apache.jena.graph.Graph>.get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8950/buggy-version/commons-rdf-jena.src.main.java.org.apache.commons.rdf.jena.experimental.JenaRDFParser.java", "BodyUseAPI": [], "Fixed commit": "5dafbce6a1abd041c2233cd6a5101c8d753f0c63", "Url": "https://api.github.com/repos/BME-MIT-IET/Csipet-Csapat-iet-2018", "Date": "2018-05-05T20:07:40Z"},
{"Line": "94=>101", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getSourceFile().get()=>java.util.Optional<java.nio.file.Path>.get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8950/buggy-version/commons-rdf-jena.src.main.java.org.apache.commons.rdf.jena.experimental.JenaRDFParser.java", "BodyUseAPI": [], "Fixed commit": "5dafbce6a1abd041c2233cd6a5101c8d753f0c63", "Url": "https://api.github.com/repos/BME-MIT-IET/Csipet-Csapat-iet-2018", "Date": "2018-05-05T20:07:40Z"},
{"Line": "98=>107", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getSourceInputStream().get()=>java.util.Optional<java.io.InputStream>.get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8950/buggy-version/commons-rdf-jena.src.main.java.org.apache.commons.rdf.jena.experimental.JenaRDFParser.java", "BodyUseAPI": [], "Fixed commit": "5dafbce6a1abd041c2233cd6a5101c8d753f0c63", "Url": "https://api.github.com/repos/BME-MIT-IET/Csipet-Csapat-iet-2018", "Date": "2018-05-05T20:07:40Z"},
{"Line": "75=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getTargetGraph().get()=>java.util.Optional<org.apache.jena.graph.Graph>.get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8950/buggy-version/commons-rdf-jena.src.main.java.org.apache.commons.rdf.jena.experimental.JenaRDFParser.java", "BodyUseAPI": [], "Fixed commit": "5dafbce6a1abd041c2233cd6a5101c8d753f0c63", "Url": "https://api.github.com/repos/BME-MIT-IET/Csipet-Csapat-iet-2018", "Date": "2018-05-05T20:07:40Z"},
{"Line": "98=>107", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.apache.jena.riot.RDFParser.source(getSourceInputStream().get())=>org.apache.jena.riot.RDFParser.source(java.io.InputStream)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8950/buggy-version/commons-rdf-jena.src.main.java.org.apache.commons.rdf.jena.experimental.JenaRDFParser.java", "BodyUseAPI": [], "Fixed commit": "5dafbce6a1abd041c2233cd6a5101c8d753f0c63", "Url": "https://api.github.com/repos/BME-MIT-IET/Csipet-Csapat-iet-2018", "Date": "2018-05-05T20:07:40Z"},
{"Line": "194=>200", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.HashMap<java.lang.String, org.semanticweb.owlapi.model.OWLNamedIndividual>.get(java.lang.String)=>gnAdmCodeToNamedInd.get(iParentLevel).get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8188/buggy-version/src.main.java.edu.ufl.bmi.ontology.GeoNamesAdminLevelProcessing.java", "BodyUseAPI": [], "Fixed commit": "14de01bf1fb45fea47aef3cb8fb945105e4392b6", "Url": "https://api.github.com/repos/ufbmi/dtm-json-to-owl", "Date": "2018-07-18T20:48:05Z"},
{"Line": "187=>193", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.HashMap<java.lang.String, org.semanticweb.owlapi.model.OWLNamedIndividual>.get(java.lang.String)=>gnAdmCodeToNamedInd.get(iParentLevel).get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8188/buggy-version/src.main.java.edu.ufl.bmi.ontology.GeoNamesAdminLevelProcessing.java", "BodyUseAPI": [], "Fixed commit": "14de01bf1fb45fea47aef3cb8fb945105e4392b6", "Url": "https://api.github.com/repos/ufbmi/dtm-json-to-owl", "Date": "2018-07-18T20:48:05Z"},
{"Line": "182=>187", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.HashMap<java.lang.String, org.semanticweb.owlapi.model.OWLNamedIndividual>.get(java.lang.String)=>gnAdmCodeToNamedInd.get(iParentLevel).get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8188/buggy-version/src.main.java.edu.ufl.bmi.ontology.GeoNamesAdminLevelProcessing.java", "BodyUseAPI": [], "Fixed commit": "14de01bf1fb45fea47aef3cb8fb945105e4392b6", "Url": "https://api.github.com/repos/ufbmi/dtm-json-to-owl", "Date": "2018-07-18T20:48:05Z"},
{"Line": "197=>203", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.HashMap<java.lang.String, org.semanticweb.owlapi.model.OWLNamedIndividual>.get(java.lang.String)=>gnAdmCodeToNamedInd.get(iParentLevel).get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8188/buggy-version/src.main.java.edu.ufl.bmi.ontology.GeoNamesAdminLevelProcessing.java", "BodyUseAPI": [], "Fixed commit": "14de01bf1fb45fea47aef3cb8fb945105e4392b6", "Url": "https://api.github.com/repos/ufbmi/dtm-json-to-owl", "Date": "2018-07-18T20:48:05Z"},
{"Line": "203=>209", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.HashMap<java.lang.String, org.semanticweb.owlapi.model.OWLNamedIndividual>.put(java.lang.String,org.semanticweb.owlapi.model.OWLNamedIndividual)=>gnAdmCodeToNamedInd.get(iLevel).put(java.lang.String,org.semanticweb.owlapi.model.OWLNamedIndividual)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8188/buggy-version/src.main.java.edu.ufl.bmi.ontology.GeoNamesAdminLevelProcessing.java", "BodyUseAPI": [], "Fixed commit": "14de01bf1fb45fea47aef3cb8fb945105e4392b6", "Url": "https://api.github.com/repos/ufbmi/dtm-json-to-owl", "Date": "2018-07-18T20:48:05Z"},
{"Line": "50=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.BufferedWriter.close()=>java.io.FileWriter.close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8321/buggy-version/hw1.src.server_java_tcp.java", "BodyUseAPI": [], "Fixed commit": "8489ed7d1c388591090b66676db1293d26a203f3", "Url": "https://api.github.com/repos/bluegoo192/cs176a", "Date": "2018-04-22T17:29:45Z"},
{"Line": "227=>229", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.IOException.getMessage()=>com.sun.jna.LastErrorException.getMessage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6605/buggy-version/src.main.java.ev3dev.hardware.display.SystemDisplay.java", "BodyUseAPI": [], "Fixed commit": "8f7ef06e86a205c692b8cf6a34da8ca08cd268a9", "Url": "https://api.github.com/repos/ev3dev-lang-java/ev3dev-lang-java", "Date": "2018-09-02T13:48:29Z"},
{"Line": "244=>246", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6605/buggy-version/src.main.java.ev3dev.hardware.display.SystemDisplay.java", "BodyUseAPI": [], "Fixed commit": "8f7ef06e86a205c692b8cf6a34da8ca08cd268a9", "Url": "https://api.github.com/repos/ev3dev-lang-java/ev3dev-lang-java", "Date": "2018-09-02T13:48:29Z"},
{"Line": "70=>72", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Throwable.getErrno()=>java.lang.Throwable.getErrorCode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6605/buggy-version/src.main.java.ev3dev.hardware.display.SystemDisplay.java", "BodyUseAPI": [], "Fixed commit": "8f7ef06e86a205c692b8cf6a34da8ca08cd268a9", "Url": "https://api.github.com/repos/ev3dev-lang-java/ev3dev-lang-java", "Date": "2018-09-02T13:48:29Z"},
{"Line": "147=>149", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6605/buggy-version/src.main.java.ev3dev.hardware.display.SystemDisplay.java", "BodyUseAPI": [], "Fixed commit": "8f7ef06e86a205c692b8cf6a34da8ca08cd268a9", "Url": "https://api.github.com/repos/ev3dev-lang-java/ev3dev-lang-java", "Date": "2018-09-02T13:48:29Z"},
{"Line": "148=>150", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.IOException.printStackTrace()=>com.sun.jna.LastErrorException.printStackTrace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6605/buggy-version/src.main.java.ev3dev.hardware.display.SystemDisplay.java", "BodyUseAPI": [], "Fixed commit": "8f7ef06e86a205c692b8cf6a34da8ca08cd268a9", "Url": "https://api.github.com/repos/ev3dev-lang-java/ev3dev-lang-java", "Date": "2018-09-02T13:48:29Z"},
{"Line": "227=>229", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6605/buggy-version/src.main.java.ev3dev.hardware.display.SystemDisplay.java", "BodyUseAPI": [], "Fixed commit": "8f7ef06e86a205c692b8cf6a34da8ca08cd268a9", "Url": "https://api.github.com/repos/ev3dev-lang-java/ev3dev-lang-java", "Date": "2018-09-02T13:48:29Z"},
{"Line": "244=>246", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.IOException.getMessage()=>com.sun.jna.LastErrorException.getMessage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6605/buggy-version/src.main.java.ev3dev.hardware.display.SystemDisplay.java", "BodyUseAPI": [], "Fixed commit": "8f7ef06e86a205c692b8cf6a34da8ca08cd268a9", "Url": "https://api.github.com/repos/ev3dev-lang-java/ev3dev-lang-java", "Date": "2018-09-02T13:48:29Z"},
{"Line": "245=>247", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.IOException.printStackTrace()=>com.sun.jna.LastErrorException.printStackTrace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6605/buggy-version/src.main.java.ev3dev.hardware.display.SystemDisplay.java", "BodyUseAPI": [], "Fixed commit": "8f7ef06e86a205c692b8cf6a34da8ca08cd268a9", "Url": "https://api.github.com/repos/ev3dev-lang-java/ev3dev-lang-java", "Date": "2018-09-02T13:48:29Z"},
{"Line": "228=>230", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.IOException.printStackTrace()=>com.sun.jna.LastErrorException.printStackTrace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6605/buggy-version/src.main.java.ev3dev.hardware.display.SystemDisplay.java", "BodyUseAPI": [], "Fixed commit": "8f7ef06e86a205c692b8cf6a34da8ca08cd268a9", "Url": "https://api.github.com/repos/ev3dev-lang-java/ev3dev-lang-java", "Date": "2018-09-02T13:48:29Z"},
{"Line": "147=>149", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.IOException.getMessage()=>com.sun.jna.LastErrorException.getMessage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6605/buggy-version/src.main.java.ev3dev.hardware.display.SystemDisplay.java", "BodyUseAPI": [], "Fixed commit": "8f7ef06e86a205c692b8cf6a34da8ca08cd268a9", "Url": "https://api.github.com/repos/ev3dev-lang-java/ev3dev-lang-java", "Date": "2018-09-02T13:48:29Z"},
{"Line": "1100=>1100", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cn.ictgu.platform.PeServices.updateResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>cn.ictgu.platform.PeServices.updateResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5401/buggy-version/src.main.java.cn.ictgu.api.CommonAPI.java", "BodyUseAPI": [], "Fixed commit": "8c4b1f9906130ec63cec6e2e2dcf00f8313a6460", "Url": "https://api.github.com/repos/jinlongxi/y-p_chatWebView", "Date": "2018-06-28T05:57:23Z"},
{"Line": "50=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.sql.ResultSet.next()=>gov.pnnl.goss.cim2glm.components.ResultSet.next()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3750/buggy-version/blazegraph.src.main.java.gov.pnnl.goss.cim2glm.components.DistHouse.java", "BodyUseAPI": [], "Fixed commit": "47939da805fcddda8204e88c56f4500dfdf51232", "Url": "https://api.github.com/repos/GRIDAPPSD/Powergrid-Models", "Date": "2018-08-23T20:56:49Z"},
{"Line": "49=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.sql.ResultSet.hasNext()=>gov.pnnl.goss.cim2glm.components.ResultSet.hasNext()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3750/buggy-version/blazegraph.src.main.java.gov.pnnl.goss.cim2glm.components.DistHouse.java", "BodyUseAPI": [], "Fixed commit": "47939da805fcddda8204e88c56f4500dfdf51232", "Url": "https://api.github.com/repos/GRIDAPPSD/Powergrid-Models", "Date": "2018-08-23T20:56:49Z"},
{"Line": "53=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.sql.ResultSet.hasNext()=>gov.pnnl.goss.cim2glm.components.ResultSet.hasNext()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3750/buggy-version/blazegraph.src.main.java.gov.pnnl.goss.cim2glm.components.DistThermostat.java", "BodyUseAPI": [], "Fixed commit": "47939da805fcddda8204e88c56f4500dfdf51232", "Url": "https://api.github.com/repos/GRIDAPPSD/Powergrid-Models", "Date": "2018-08-23T20:56:49Z"},
{"Line": "54=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.sql.ResultSet.next()=>gov.pnnl.goss.cim2glm.components.ResultSet.next()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3750/buggy-version/blazegraph.src.main.java.gov.pnnl.goss.cim2glm.components.DistThermostat.java", "BodyUseAPI": [], "Fixed commit": "47939da805fcddda8204e88c56f4500dfdf51232", "Url": "https://api.github.com/repos/GRIDAPPSD/Powergrid-Models", "Date": "2018-08-23T20:56:49Z"},
{"Line": "225=>225", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class.getMethod(java.lang.String,<nulltype>)=>java.lang.Class<?>.getMethod(java.lang.String,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6438/buggy-version/EGO.src.main.java.tk.crazysoft.ego.io.Environment4.java", "BodyUseAPI": [], "Fixed commit": "a34f5cf512e98795e758902878f547157be9d15d", "Url": "https://api.github.com/repos/Crazyphil/EGO", "Date": "2018-07-29T16:33:04Z"},
{"Line": "61=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.Runnable() { public void run() { hu.kfg.naplo.ChangeListener.doCheck(context, intent); } }=>new java.lang.Runnable() { public void run() { hu.kfg.naplo.ChangeListener.doCheck(context, intent); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3264/buggy-version/app.src.main.java.hu.kfg.naplo.ChangeListener.java", "BodyUseAPI": [], "Fixed commit": "e00bc19ef5ea60e3833ef9726908d78d297870e2", "Url": "https://api.github.com/repos/hexadec/KFGnaplo", "Date": "2018-01-09T17:36:01Z"},
{"Line": "456=>456", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ure.ui.modals.UCommander.hasChildModal()=>ure.ui.modals.UCommander.isChildModal(ure.ui.modals.UModal)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6809/buggy-version/src.main.java.ure.ui.modals.UModal.java", "BodyUseAPI": [], "Fixed commit": "73faf878133dc20e2a2261b08944d16dac1ba23b", "Url": "https://api.github.com/repos/gilmore606/ure", "Date": "2018-08-25T22:32:57Z"},
{"Line": "133=>135", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "script.getThread().stop()=>java.lang.Thread.stop()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6627/buggy-version/src.main.java.com.yefanov.service.ScriptServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "8f70accc2a0f743889b088ea3d0280b803210867", "Url": "https://api.github.com/repos/nikitayefanov/demoJsProject", "Date": "2018-03-02T16:28:23Z"},
{"Line": "95=>95", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.realmoftowny.townywars.managers.WarManager.createWar(com.palmergames.bukkit.towny.object.Nation,com.palmergames.bukkit.towny.object.Nation)=>net.realmoftowny.townywars.managers.WarManager.createWar(com.palmergames.bukkit.towny.object.Nation,com.palmergames.bukkit.towny.object.Nation,org.bukkit.command.CommandSender)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6802/buggy-version/src.main.java.net.realmoftowny.townywars.TownyWars.java", "BodyUseAPI": [], "Fixed commit": "235ac09c3cbc803f5ea1dfa66bd09ab48e77bba8", "Url": "https://api.github.com/repos/RealmOfTowny-Devs/TownyWarsROT", "Date": "2018-07-15T00:55:27Z"},
{"Line": "524=>524", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.bboxdb.storage.entity.DistributionGroupConfiguration.getMaximumRegionSize()=>org.bboxdb.storage.entity.DistributionGroupConfiguration.getMinimumRegionSize()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7/buggy-version/bboxdb-server.src.main.java.org.bboxdb.distribution.partitioner.DistributionGroupZookeeperAdapter.java", "BodyUseAPI": [], "Fixed commit": "1c3d845707296517dd5e4dfd495950b6a5ab905e", "Url": "https://api.github.com/repos/jnidzwetzki/bboxdb", "Date": "2018-03-06T15:51:46Z"},
{"Line": "138=>138", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.Intent.putExtra(java.lang.String,java.lang.String)=>android.content.Intent.putExtra(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6751/buggy-version/app.src.main.java.com.example.jt.locus_draft.MainFragment.java", "BodyUseAPI": [], "Fixed commit": "39096fed0fa436978d7dbd4e2456b401129493f3", "Url": "https://api.github.com/repos/jgytin/160-locus", "Date": "2018-05-01T18:04:12Z"},
{"Line": "132=>132", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.swing.JPasswordField.getText()=>javax.swing.JPasswordField.getPassword()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8237/buggy-version/TaskManager.src.projectpackage.loginUI.java", "BodyUseAPI": [], "Fixed commit": "0325af69e9a201f66dbe306adaf825417dc74b47", "Url": "https://api.github.com/repos/CSUS-CSC-131-Spring2018/S4T3TM2", "Date": "2018-05-07T00:20:24Z"},
{"Line": "119=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.swing.JPasswordField.getText()=>javax.swing.JPasswordField.getPassword()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8237/buggy-version/TaskManager.src.projectpackage.loginUI.java", "BodyUseAPI": [], "Fixed commit": "0325af69e9a201f66dbe306adaf825417dc74b47", "Url": "https://api.github.com/repos/CSUS-CSC-131-Spring2018/S4T3TM2", "Date": "2018-05-07T00:20:24Z"},
{"Line": "64=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "ch.fhnw.wodss.tippspiel.persistance.UserRepository.findAll(org.springframework.data.domain.Sort)=>ch.fhnw.wodss.tippspiel.persistance.UserRepository.findAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7225/buggy-version/src.main.java.ch.fhnw.wodss.tippspiel.service.UserService.java", "BodyUseAPI": [], "Fixed commit": "807122164a4fd2addb2b56d3bf8d8869c40ce9b4", "Url": "https://api.github.com/repos/YanickSchraner/wodss-tippspiel_backend", "Date": "2018-05-21T20:47:11Z"},
{"Line": "36=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "co.cask.cdap.extension.AbstractExtensionLoader(java.lang.String)=>co.cask.cdap.common.conf.CConfiguration.get(Constants.Provisioner.EXTENSIONS_DIR)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9746/buggy-version/cdap-app-fabric.src.main.java.co.cask.cdap.internal.provision.ProvisionerExtensionLoader.java", "BodyUseAPI": [], "Fixed commit": "4e2ae4d82964760edaedf154e538fc32268a09ba", "Url": "https://api.github.com/repos/caskdata/cdap", "Date": "2018-04-05T04:15:13Z"},
{"Line": "735=>735", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "jsonObject.get(\"multipleOf\").getAsInt()=>jsonObject.get(\"multipleOf\").getAsDouble()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4871/buggy-version/plugins.edu.uoc.som.openapi.io.src.edu.uoc.som.openapi.io.OpenAPIImporter.java", "BodyUseAPI": [], "Fixed commit": "af9bec8cb88584667cdba30c3de801d225e5e87f", "Url": "https://api.github.com/repos/SOM-Research/openapi-metamodel", "Date": "2018-03-22T18:13:30Z"},
{"Line": "735=>735", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "edu.uoc.som.openapi.ItemsDefinition.setMultipleOf(jsonObject.get(\"multipleOf\").getAsInt())=>edu.uoc.som.openapi.ItemsDefinition.setMultipleOf(java.lang.Double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4871/buggy-version/plugins.edu.uoc.som.openapi.io.src.edu.uoc.som.openapi.io.OpenAPIImporter.java", "BodyUseAPI": [], "Fixed commit": "af9bec8cb88584667cdba30c3de801d225e5e87f", "Url": "https://api.github.com/repos/SOM-Research/openapi-metamodel", "Date": "2018-03-22T18:13:30Z"},
{"Line": "689=>689", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "edu.uoc.som.openapi.Parameter.setMultipleOf(jsonObject.get(\"multipleOf\").getAsInt())=>edu.uoc.som.openapi.Parameter.setMultipleOf(java.lang.Double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4871/buggy-version/plugins.edu.uoc.som.openapi.io.src.edu.uoc.som.openapi.io.OpenAPIImporter.java", "BodyUseAPI": [], "Fixed commit": "af9bec8cb88584667cdba30c3de801d225e5e87f", "Url": "https://api.github.com/repos/SOM-Research/openapi-metamodel", "Date": "2018-03-22T18:13:30Z"},
{"Line": "622=>622", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "jsonObject.get(\"multipleOf\").getAsInt()=>jsonObject.get(\"multipleOf\").getAsDouble()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4871/buggy-version/plugins.edu.uoc.som.openapi.io.src.edu.uoc.som.openapi.io.OpenAPIImporter.java", "BodyUseAPI": [], "Fixed commit": "af9bec8cb88584667cdba30c3de801d225e5e87f", "Url": "https://api.github.com/repos/SOM-Research/openapi-metamodel", "Date": "2018-03-22T18:13:30Z"},
{"Line": "689=>689", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "jsonObject.get(\"multipleOf\").getAsInt()=>jsonObject.get(\"multipleOf\").getAsDouble()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4871/buggy-version/plugins.edu.uoc.som.openapi.io.src.edu.uoc.som.openapi.io.OpenAPIImporter.java", "BodyUseAPI": [], "Fixed commit": "af9bec8cb88584667cdba30c3de801d225e5e87f", "Url": "https://api.github.com/repos/SOM-Research/openapi-metamodel", "Date": "2018-03-22T18:13:30Z"},
{"Line": "287=>287", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "edu.uoc.som.openapi.Schema.setMultipleOf(schemaObject.get(\"multipleOf\").getAsInt())=>edu.uoc.som.openapi.Schema.setMultipleOf(java.lang.Double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4871/buggy-version/plugins.edu.uoc.som.openapi.io.src.edu.uoc.som.openapi.io.OpenAPIImporter.java", "BodyUseAPI": [], "Fixed commit": "af9bec8cb88584667cdba30c3de801d225e5e87f", "Url": "https://api.github.com/repos/SOM-Research/openapi-metamodel", "Date": "2018-03-22T18:13:30Z"},
{"Line": "287=>287", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "schemaObject.get(\"multipleOf\").getAsInt()=>schemaObject.get(\"multipleOf\").getAsDouble()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4871/buggy-version/plugins.edu.uoc.som.openapi.io.src.edu.uoc.som.openapi.io.OpenAPIImporter.java", "BodyUseAPI": [], "Fixed commit": "af9bec8cb88584667cdba30c3de801d225e5e87f", "Url": "https://api.github.com/repos/SOM-Research/openapi-metamodel", "Date": "2018-03-22T18:13:30Z"},
{"Line": "622=>622", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "edu.uoc.som.openapi.Header.setMultipleOf(jsonObject.get(\"multipleOf\").getAsInt())=>edu.uoc.som.openapi.Header.setMultipleOf(java.lang.Double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4871/buggy-version/plugins.edu.uoc.som.openapi.io.src.edu.uoc.som.openapi.io.OpenAPIImporter.java", "BodyUseAPI": [], "Fixed commit": "af9bec8cb88584667cdba30c3de801d225e5e87f", "Url": "https://api.github.com/repos/SOM-Research/openapi-metamodel", "Date": "2018-03-22T18:13:30Z"},
{"Line": "42=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "se.steam.trellov2.service.business.Logic.failValidateTask(java.util.UUID)=>se.steam.trellov2.service.business.Logic.validateTask(java.util.UUID)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4464/buggy-version/src.main.java.se.steam.trellov2.service.implementation.IssueServiceImp.java", "BodyUseAPI": [], "Fixed commit": "ba146de511e218c495e07bcfb8ad8dd0cd461ec5", "Url": "https://api.github.com/repos/annawrang/alm", "Date": "2018-08-28T12:56:18Z"},
{"Line": "60=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.minecraftforge.oredict.ShapedOreRecipe.setRegistryName(net.minecraft.util.ResourceLocation)=>net.minecraftforge.oredict.ShapedOreRecipe.setRegistryName(result.getItem().getRegistryName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6434/buggy-version/src.main.java.moe.plushie.armourers_workshop.common.crafting.CraftingManager.java", "BodyUseAPI": [], "Fixed commit": "d60695775abe5d739e3f9c5a97a6d892905e55fc", "Url": "https://api.github.com/repos/RiskyKen/Armourers-Workshop", "Date": "2018-10-08T01:00:58Z"},
{"Line": "56=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.minecraftforge.oredict.ShapelessOreRecipe.setRegistryName(net.minecraft.util.ResourceLocation)=>net.minecraftforge.oredict.ShapelessOreRecipe.setRegistryName(result.getItem().getRegistryName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6434/buggy-version/src.main.java.moe.plushie.armourers_workshop.common.crafting.CraftingManager.java", "BodyUseAPI": [], "Fixed commit": "d60695775abe5d739e3f9c5a97a6d892905e55fc", "Url": "https://api.github.com/repos/RiskyKen/Armourers-Workshop", "Date": "2018-10-08T01:00:58Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.ctg.aatime.dao.ActivityDao.selectActivityById(java.lang.Integer)=>com.ctg.aatime.dao.ActivityDao.selectActivityByEventId(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1469/buggy-version/AA-time-web.src.main.java.com.ctg.aatime.service.impl.ActivityServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "ccca55074f2ed2e4fec097c69246a0f53c9bd884", "Url": "https://api.github.com/repos/bjchen2/AA-time", "Date": "2018-04-05T10:40:50Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.ctg.aatime.dao.ActivityDao.selectActivityById(java.lang.Integer)=>com.ctg.aatime.dao.ActivityDao.selectActivityByEventId(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1469/buggy-version/AA-time-web.src.main.java.com.ctg.aatime.service.impl.ActivityServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "ccca55074f2ed2e4fec097c69246a0f53c9bd884", "Url": "https://api.github.com/repos/bjchen2/AA-time", "Date": "2018-04-05T10:40:50Z"},
{"Line": "54=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.ctg.aatime.dao.ActivityDao.selectJoinEventsIdById(int)=>com.ctg.aatime.dao.ActivityDao.selectJoinEventsIdByUid(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1469/buggy-version/AA-time-web.src.main.java.com.ctg.aatime.service.impl.ActivityServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "ccca55074f2ed2e4fec097c69246a0f53c9bd884", "Url": "https://api.github.com/repos/bjchen2/AA-time", "Date": "2018-04-05T10:40:50Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "utility.AdjacencyList.BreadthFirstSearch(int)=>java.util.List<utility.AdjacencyList.Vertex>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1732/buggy-version/utility.AdjacencyList.java", "BodyUseAPI": [], "Fixed commit": "d90e0602e45e8f1707accab0305774908cba5d46", "Url": "https://api.github.com/repos/Aonokiseki/Utility", "Date": "2018-07-24T02:55:45Z"},
{"Line": "125=>125", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "metadata.sourcePath().getParent().toString()=>metadata.sourcePath().toAbsolutePath().getParent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3141/buggy-version/alexandria-core.src.main.java.com.github.macgregor.alexandria.Alexandria.java", "BodyUseAPI": [], "Fixed commit": "ecdd092e2f197d42c243de326d50c81eb184ee6c", "Url": "https://api.github.com/repos/macgregor/alexandria", "Date": "2018-08-19T02:10:59Z"},
{"Line": "125=>125", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "metadata.sourcePath().getParent()=>metadata.sourcePath().toAbsolutePath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3141/buggy-version/alexandria-core.src.main.java.com.github.macgregor.alexandria.Alexandria.java", "BodyUseAPI": [], "Fixed commit": "ecdd092e2f197d42c243de326d50c81eb184ee6c", "Url": "https://api.github.com/repos/macgregor/alexandria", "Date": "2018-08-19T02:10:59Z"},
{"Line": "200=>201", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.ArrayList<game.AgentState>.add(game.AgentState)=>java.util.ArrayList<game.AgentState>.add(int,game.AgentState)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/843/buggy-version/src.game.GameStateData.java", "BodyUseAPI": [], "Fixed commit": "1dc449b0d5abb4d3683007952e3f0ce6ba81bcec", "Url": "https://api.github.com/repos/abendayan/pacman", "Date": "2018-04-29T13:13:19Z"},
{"Line": "71=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.squareup.javapoet.MethodSpec.methodBuilder(java.lang.String)=>com.squareup.javapoet.MethodSpec.methodBuilder(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5843/buggy-version/compiler-release.src.main.java.com.PATHomai.environmentswitcher.compiler.EnvironmentSwitcherCompiler.java", "BodyUseAPI": [], "Fixed commit": "4d8132504220b785d7a69539e7dd3f2bef182c08", "Url": "https://api.github.com/repos/CodeXiaoMai/EnvironmentSwitcher", "Date": "2018-08-23T10:52:15Z"},
{"Line": "93=>96", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.squareup.javapoet.MethodSpec.methodBuilder(java.lang.String)=>com.squareup.javapoet.MethodSpec.methodBuilder(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5843/buggy-version/compiler-release.src.main.java.com.PATHomai.environmentswitcher.compiler.EnvironmentSwitcherCompiler.java", "BodyUseAPI": [], "Fixed commit": "4d8132504220b785d7a69539e7dd3f2bef182c08", "Url": "https://api.github.com/repos/CodeXiaoMai/EnvironmentSwitcher", "Date": "2018-08-23T10:52:15Z"},
{"Line": "54=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.squareup.javapoet.MethodSpec.methodBuilder(java.lang.String)=>com.squareup.javapoet.MethodSpec.methodBuilder(com.PATHomai.environmentswitcher.Constants.METHOD_NAME_GET_ENVIRONMENT_CONFIG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5843/buggy-version/compiler-release.src.main.java.com.PATHomai.environmentswitcher.compiler.EnvironmentSwitcherCompiler.java", "BodyUseAPI": [], "Fixed commit": "4d8132504220b785d7a69539e7dd3f2bef182c08", "Url": "https://api.github.com/repos/CodeXiaoMai/EnvironmentSwitcher", "Date": "2018-08-23T10:52:15Z"},
{"Line": "58=>61", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.squareup.javapoet.MethodSpec.methodBuilder(java.lang.String)=>com.squareup.javapoet.MethodSpec.methodBuilder(com.PATHomai.environmentswitcher.Constants.METHOD_NAME_GET_ENVIRONMENT_CONFIG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5843/buggy-version/compiler.src.main.java.com.PATHomai.environmentswitcher.compiler.EnvironmentSwitcherCompiler.java", "BodyUseAPI": [], "Fixed commit": "4d8132504220b785d7a69539e7dd3f2bef182c08", "Url": "https://api.github.com/repos/CodeXiaoMai/EnvironmentSwitcher", "Date": "2018-08-23T10:52:15Z"},
{"Line": "91=>94", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.squareup.javapoet.MethodSpec.methodBuilder(java.lang.String)=>com.squareup.javapoet.MethodSpec.methodBuilder(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5843/buggy-version/compiler.src.main.java.com.PATHomai.environmentswitcher.compiler.EnvironmentSwitcherCompiler.java", "BodyUseAPI": [], "Fixed commit": "4d8132504220b785d7a69539e7dd3f2bef182c08", "Url": "https://api.github.com/repos/CodeXiaoMai/EnvironmentSwitcher", "Date": "2018-08-23T10:52:15Z"},
{"Line": "113=>116", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.squareup.javapoet.MethodSpec.methodBuilder(java.lang.String)=>com.squareup.javapoet.MethodSpec.methodBuilder(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5843/buggy-version/compiler.src.main.java.com.PATHomai.environmentswitcher.compiler.EnvironmentSwitcherCompiler.java", "BodyUseAPI": [], "Fixed commit": "4d8132504220b785d7a69539e7dd3f2bef182c08", "Url": "https://api.github.com/repos/CodeXiaoMai/EnvironmentSwitcher", "Date": "2018-08-23T10:52:15Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "co.sisu.mobile.fragments.ReportFragment.initializeListView(java.util.List<co.sisu.mobile.models.Metric>)=>co.sisu.mobile.fragments.ReportFragment.initializeListView()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1273/buggy-version/Sisu.app.src.main.java.co.sisu.mobile.fragments.ReportFragment.java", "BodyUseAPI": [], "Fixed commit": "df286df1e475e3ceb09abccdf52ef77200f66ee6", "Url": "https://api.github.com/repos/sisuco/sisu-android", "Date": "2018-05-08T04:02:20Z"},
{"Line": "304=>308", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "co.sisu.mobile.fragments.ReportFragment.2.initializeListView(parentActivity.getActivitiesObject())=>co.sisu.mobile.fragments.ReportFragment.2.setData(parentActivity.getActivitiesObject())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1273/buggy-version/Sisu.app.src.main.java.co.sisu.mobile.fragments.ReportFragment.java", "BodyUseAPI": [], "Fixed commit": "df286df1e475e3ceb09abccdf52ef77200f66ee6", "Url": "https://api.github.com/repos/sisuco/sisu-android", "Date": "2018-05-08T04:02:20Z"},
{"Line": "154=>156", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.bumptech.glide.Glide.with(ctx).asBitmap().load(java.lang.String)=>com.bumptech.glide.Glide.with(ctx).asBitmap().load((\"http://mahar.pscigrid.gov.ph/static/img/latest-pagasa-mosaic.png?time=\" + (org.joda.time.DateTime.now().getMillis())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3301/buggy-version/app.src.main.java.webfreak.si.rainradar.FragmentPhilippines3.java", "BodyUseAPI": [], "Fixed commit": "f065ae957acb7a13a858bda006bc8f8c6ef3c5c2", "Url": "https://api.github.com/repos/webfrea-k/rr", "Date": "2018-08-07T20:45:59Z"},
{"Line": "113=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.kit.ifv.mobitopp.actitopp.HActivity.getIndexDay()=>edu.kit.ifv.mobitopp.actitopp.HActivity.getDayIndex()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3357/buggy-version/dziemke.src.main.java.playground.dziemke.actitopp.ActitoppMatsimDemandGenerator.java", "BodyUseAPI": [], "Fixed commit": "c932b777e5861a5a9b2b6475ea10e8c662651691", "Url": "https://api.github.com/repos/matsim-vsp/vsp-playgrounds", "Date": "2018-08-28T03:25:16Z"},
{"Line": "50=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.matsim.core.controler.Controler.addOverridingModule(org.matsim.contrib.signals.controler.SignalsModule)=>org.matsim.core.controler.Controler.addOverridingModule(org.matsim.contrib.signals.binder.SignalsModule)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3357/buggy-version/stockholm.src.main.java.gunnar.ihop2.integration.PlainRunner.java", "BodyUseAPI": [], "Fixed commit": "c932b777e5861a5a9b2b6475ea10e8c662651691", "Url": "https://api.github.com/repos/matsim-vsp/vsp-playgrounds", "Date": "2018-08-28T03:25:16Z"},
{"Line": "253=>253", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.ui.helpers.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1677/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "ed9ae887b3966afb02acb1c93eed247511ee1ed6", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "230=>230", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.ui.helpers.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1677/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "ed9ae887b3966afb02acb1c93eed247511ee1ed6", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "436=>436", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "this.playerList.get(playerId).removeResourceBundle(Road.resourceCost)=>edu.up.cs.androidcatan.catan.buildings.Road.getResourceCost()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1881/buggy-version/app.src.main.java.edu.up.cs.androidcatan.GameState.java", "BodyUseAPI": [], "Fixed commit": "c2c945bb8e09d507658ea441b75c0c80b14a7bb2", "Url": "https://api.github.com/repos/alexweininger/android-catan", "Date": "2018-10-31T23:56:30Z"},
{"Line": "40=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.example.conor.feelsbook.CounterActivity.1.finish()=>com.example.conor.feelsbook.CounterActivity.1.startActivity(android.content.Intent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7424/buggy-version/app.src.main.java.com.example.conor.feelsbook.CounterActivity.java", "BodyUseAPI": [], "Fixed commit": "28159c9dc973063a18c1e11e84cb786970fbe71d", "Url": "https://api.github.com/repos/conormcquitty/mcquitty-FeelsBook", "Date": "2018-10-01T23:37:01Z"},
{"Line": "49=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.example.conor.feelsbook.EditEmotion.2.delete(com.example.conor.feelsbook.Emotion)=>com.example.conor.feelsbook.EditEmotion.2.startActivity(android.content.Intent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7424/buggy-version/app.src.main.java.com.example.conor.feelsbook.EditEmotion.java", "BodyUseAPI": [], "Fixed commit": "28159c9dc973063a18c1e11e84cb786970fbe71d", "Url": "https://api.github.com/repos/conormcquitty/mcquitty-FeelsBook", "Date": "2018-10-01T23:37:01Z"},
{"Line": "49=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.example.conor.feelsbook.EditEmotion.2.delete(com.example.conor.feelsbook.Emotion)=>com.example.conor.feelsbook.EditEmotion.2.startActivity(android.content.Intent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7424/buggy-version/app.src.main.java.com.example.conor.feelsbook.EditEmotion.java", "BodyUseAPI": [], "Fixed commit": "28159c9dc973063a18c1e11e84cb786970fbe71d", "Url": "https://api.github.com/repos/conormcquitty/mcquitty-FeelsBook", "Date": "2018-10-01T23:37:01Z"},
{"Line": "293=>293", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] close()=>[public] close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1035/buggy-version/flink-streaming-java.src.main.java.org.apache.flink.streaming.api.operators.AbstractStreamOperator.java", "BodyUseAPI": [], "Fixed commit": "569055c41ff652a17c11f726bebf93aaf58cc0af", "Url": "https://api.github.com/repos/StefanRRichter/flink", "Date": "2017-12-11T11:01:54Z"},
{"Line": "334=>303", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] dispose()=>[public] dispose()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1035/buggy-version/flink-streaming-java.src.main.java.org.apache.flink.streaming.api.operators.AbstractStreamOperator.java", "BodyUseAPI": [], "Fixed commit": "569055c41ff652a17c11f726bebf93aaf58cc0af", "Url": "https://api.github.com/repos/StefanRRichter/flink", "Date": "2017-12-11T11:01:54Z"},
{"Line": "56=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Objects.nonNull(T)=>java.util.EnumSet<T>.add(T)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5438/buggy-version/src.main.java.com.dokany.java.structure.EnumIntegerSet.java", "BodyUseAPI": [], "Fixed commit": "c38877285df13c4639ff4e5b5e2a58c112663e18", "Url": "https://api.github.com/repos/infeo/dokany-nio-adapter", "Date": "2018-10-14T11:45:15Z"},
{"Line": "67=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.dokany.java.migrated.constants.EnumInteger.getMask()=>T.getMask()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5438/buggy-version/src.main.java.com.dokany.java.structure.EnumIntegerSet.java", "BodyUseAPI": [], "Fixed commit": "c38877285df13c4639ff4e5b5e2a58c112663e18", "Url": "https://api.github.com/repos/infeo/dokany-nio-adapter", "Date": "2018-10-14T11:45:15Z"},
{"Line": "374=>376", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.harvard.hms.dbmi.bd2k.irct.cl.rest.PredicateType.getName()=>edu.harvard.hms.dbmi.bd2k.irct.model.resource.Resource.getSupportedPredicates()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5020/buggy-version/IRCT-CL.src.main.java.edu.harvard.hms.dbmi.bd2k.irct.cl.rest.QueryService.java", "BodyUseAPI": [], "Fixed commit": "6a38c27d9a5ba5b62de3fe6a17586ab31f19e766", "Url": "https://api.github.com/repos/hms-dbmi/IRCT", "Date": "2018-03-06T20:25:47Z"},
{"Line": "321=>321", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.compiere.acct.Doc_AllocationHdr.addAll(java.util.List<org.compiere.acct.Fact>)=>java.util.ArrayList<org.compiere.acct.Fact>.addAll(java.util.List<org.compiere.acct.Fact>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8248/buggy-version/de.metas.acct.base.src.main.java-legacy.org.compiere.acct.Doc_AllocationHdr.java", "BodyUseAPI": [], "Fixed commit": "6e5210850417cf13715d6d60c59c659f108d8131", "Url": "https://api.github.com/repos/metasfresh/metasfresh", "Date": "2018-06-08T06:43:37Z"},
{"Line": "998=>997", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, java.lang.Object>.put(java.lang.String,int)=>java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4/buggy-version/src.main.java.io.github.biezhi.wechat.api.WeChatApiImpl.java", "BodyUseAPI": [], "Fixed commit": "62e12917976b28348986bd542e092182d904b9e4", "Url": "https://api.github.com/repos/biezhi/wechat-api", "Date": "2018-01-21T14:10:03Z"},
{"Line": "56=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.alfresco.service.cmr.repository.NodeService.addAspect(org.alfresco.service.cmr.repository.NodeRef,RlArchiveModel.ASPECT_PIPELINE_ASPECT,org.alfresco.util.PropertyMap)=>org.alfresco.service.cmr.repository.NodeService.addAspect(org.alfresco.service.cmr.repository.NodeRef,RlArchiveModel.ASPECT_PIPELINE_ASPECT,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3391/buggy-version/platform-mellanarkiv.src.main.java.se.vgregion.alfresco.mellanarkiv.platform.service.impl.ArchiveComponentServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "c16645f32b09e8b6fbb59a6d19ce2bde4d79e031", "Url": "https://api.github.com/repos/Vastra-Gotalandsregionen/alfresco-mellanarkiv", "Date": "2018-05-09T07:07:43Z"},
{"Line": "593=>598", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.skilldistillery.ideasjpa.entities.User.setPassword(java.lang.String)=>com.skilldistillery.ideasjpa.entities.User.getPassword()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3152/buggy-version/ideasMVC.src.main.java.com.skilldistillery.ideas.controllers.IdeaController.java", "BodyUseAPI": [], "Fixed commit": "03b839cc54e9497ba9ad7edaf20dc51a4d86fa2c", "Url": "https://api.github.com/repos/SvenSkoglund/ideas", "Date": "2018-05-02T23:11:31Z"},
{"Line": "594=>599", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.skilldistillery.ideasjpa.entities.User.setEmail(java.lang.String)=>com.skilldistillery.ideasjpa.entities.User.getEmail()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3152/buggy-version/ideasMVC.src.main.java.com.skilldistillery.ideas.controllers.IdeaController.java", "BodyUseAPI": [], "Fixed commit": "03b839cc54e9497ba9ad7edaf20dc51a4d86fa2c", "Url": "https://api.github.com/repos/SvenSkoglund/ideas", "Date": "2018-05-02T23:11:31Z"},
{"Line": "592=>597", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.skilldistillery.ideasjpa.entities.User.setUsername(java.lang.String)=>com.skilldistillery.ideasjpa.entities.User.setUsername(user.getUsername())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3152/buggy-version/ideasMVC.src.main.java.com.skilldistillery.ideas.controllers.IdeaController.java", "BodyUseAPI": [], "Fixed commit": "03b839cc54e9497ba9ad7edaf20dc51a4d86fa2c", "Url": "https://api.github.com/repos/SvenSkoglund/ideas", "Date": "2018-05-02T23:11:31Z"},
{"Line": "592=>597", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.skilldistillery.ideasjpa.entities.User.setUsername(java.lang.String)=>com.skilldistillery.ideasjpa.entities.User.getUsername()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3152/buggy-version/ideasMVC.src.main.java.com.skilldistillery.ideas.controllers.IdeaController.java", "BodyUseAPI": [], "Fixed commit": "03b839cc54e9497ba9ad7edaf20dc51a4d86fa2c", "Url": "https://api.github.com/repos/SvenSkoglund/ideas", "Date": "2018-05-02T23:11:31Z"},
{"Line": "145=>149", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "cn.blinkdagger.simplegallery.util.BitmapUtil.decodeSampledBitmapFromPath(java.lang.String,int,int)=>cn.blinkdagger.simplegallery.util.BitmapUtil.decodeBitmapFromPath(java.lang.String,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6919/buggy-version/app.src.main.java.cn.blinkdagger.simplegallery.loader.SimpleImageLoader.java", "BodyUseAPI": [], "Fixed commit": "cd5e34d96ffe78b2ea4cbbc76fc21fd2f723115f", "Url": "https://api.github.com/repos/tomsbee8/SimpleGallery", "Date": "2018-08-17T08:07:16Z"},
{"Line": "54=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "budget.model.OverView.addNewCategory(this.categoryNameBox.getText())=>budget.model.OverView.addNewCategory(this.categoryNameBox.getText(),int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7565/buggy-version/BudgetApp.src.budget.codebehinds.NewCategoryViewController.java", "BodyUseAPI": [], "Fixed commit": "199106ed16fe89762c739f642ef780692ca8a58a", "Url": "https://api.github.com/repos/Sharkhon/SE2-Team1", "Date": "2018-04-16T23:11:14Z"},
{"Line": "56=>56", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "budget.model.OverView.addNewCategory(this.categoryNameBox.getText(),double)=>budget.model.OverView.addNewCategory(this.categoryNameBox.getText(),double,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7565/buggy-version/BudgetApp.src.budget.codebehinds.NewCategoryViewController.java", "BodyUseAPI": [], "Fixed commit": "199106ed16fe89762c739f642ef780692ca8a58a", "Url": "https://api.github.com/repos/Sharkhon/SE2-Team1", "Date": "2018-04-16T23:11:14Z"},
{"Line": "148=>146", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.igp.handles.vendorpanel.utils.Order.OrderUtil.getProductComponents(orderProducts.getProductId(),int,orderProducts.getProducts_code(),java.util.List<com.igp.handles.vendorpanel.models.Order.OrderComponent>,com.igp.handles.vendorpanel.models.Order.OrderProductExtraInfo,boolean)=>com.igp.handles.vendorpanel.utils.Order.OrderUtil.getComponentListFromComponentInfo(orderProducts.getOrderId(),java.util.List<com.igp.handles.vendorpanel.models.Order.OrderComponent>,com.igp.handles.vendorpanel.models.Order.OrderProductExtraInfo,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9386/buggy-version/api.src.main.java.com.igp.handles.vendorpanel.mappers.Order.OrderMapper.java", "BodyUseAPI": [], "Fixed commit": "a52236f21d0090ccb6e24d2b0a68c8b9b931315d", "Url": "https://api.github.com/repos/shashank-igp/newadminpanel", "Date": "2018-02-19T14:11:26Z"},
{"Line": "148=>146", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.igp.handles.vendorpanel.models.Order.OrdersProducts.getProductId()=>com.igp.handles.vendorpanel.models.Order.OrdersProducts.getOrderId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9386/buggy-version/api.src.main.java.com.igp.handles.vendorpanel.mappers.Order.OrderMapper.java", "BodyUseAPI": [], "Fixed commit": "a52236f21d0090ccb6e24d2b0a68c8b9b931315d", "Url": "https://api.github.com/repos/shashank-igp/newadminpanel", "Date": "2018-02-19T14:11:26Z"},
{"Line": "505=>511", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "PickaxeBuyer.PickaxeBuyerForm.1.calculateInventoryCost()=>PickaxeBuyer.PickaxeBuyerForm.1.calculateInventoryCost(MAX_INV_SIZE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7270/buggy-version/src.main.java.PickaxeBuyer.java", "BodyUseAPI": [], "Fixed commit": "5a4569be0e6ff85a5628b0e84d22cd3f384f8d61", "Url": "https://api.github.com/repos/Xoreaux/APOS_Scripts", "Date": "2018-01-13T02:50:03Z"},
{"Line": "216=>221", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.evernote.android.job.DailyJob.schedule(request.createBuilder(),boolean,((extras.getLong(com.evernote.android.job.DailyJob.EXTRA_START_MS, 0)) % (com.evernote.android.job.DailyJob.DAY)),((extras.getLong(com.evernote.android.job.DailyJob.EXTRA_END_MS, 0L)) % (com.evernote.android.job.DailyJob.DAY)))=>com.evernote.android.job.DailyJob.schedule(request.createBuilder(),boolean,((extras.getLong(com.evernote.android.job.DailyJob.EXTRA_START_MS, 0)) % (com.evernote.android.job.DailyJob.DAY)),((extras.getLong(com.evernote.android.job.DailyJob.EXTRA_END_MS, 0L)) % (com.evernote.android.job.DailyJob.DAY)),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/203/buggy-version/library.src.main.java.com.evernote.android.job.DailyJob.java", "BodyUseAPI": [], "Fixed commit": "b4536e1b17ff97269ec63ce1f44fb86df278fdf2", "Url": "https://api.github.com/repos/AndroidKotlinID/android-job", "Date": "2018-03-19T05:20:42Z"},
{"Line": "67=>67", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.evernote.android.job.DailyJob.schedule(JobRequest.Builder,boolean,long,long)=>com.evernote.android.job.DailyJob.schedule(JobRequest.Builder,boolean,long,long,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/203/buggy-version/library.src.main.java.com.evernote.android.job.DailyJob.java", "BodyUseAPI": [], "Fixed commit": "b4536e1b17ff97269ec63ce1f44fb86df278fdf2", "Url": "https://api.github.com/repos/AndroidKotlinID/android-job", "Date": "2018-03-19T05:20:42Z"},
{"Line": "94=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.List<ch.epfl.sweng.swenggolf.offer.Offer>.remove(ch.epfl.sweng.swenggolf.offer.Offer)=>java.util.List<ch.epfl.sweng.swenggolf.offer.Offer>.add(ch.epfl.sweng.swenggolf.offer.Offer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3439/buggy-version/app.src.main.java.ch.epfl.sweng.swenggolf.database.FakeDatabase.java", "BodyUseAPI": [], "Fixed commit": "638da048a3fe263216001097d98beac6cdb6c9b3", "Url": "https://api.github.com/repos/SwengGolfTeam/Sweng_Golf", "Date": "2018-10-29T18:04:00Z"},
{"Line": "38=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "AuthenticationStatus.INVALID_CREDENTIALS.name()=>CodeAuthenticationStatus.INVALID_CREDENTIALS.name()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3340/buggy-version/service.src.main.java.nl.earthbird.authentication.service.validation.impl.CorrectCredentialsValidator.java", "BodyUseAPI": [], "Fixed commit": "9fcab15bbaa8ba1d25bf3244cdad0c4810c33beb", "Url": "https://api.github.com/repos/ESD6-S65-3/Authentication-Service", "Date": "2018-03-16T15:03:21Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "nl.earthbird.authentication.domain.authentication.AuthenticationResponse.setHttpStatus(Status.FOUND)=>nl.earthbird.authentication.domain.code.authentication.CodeAuthenticationResponse.setHttpStatus(Status.FOUND)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3340/buggy-version/service.src.main.java.nl.earthbird.authentication.service.validation.impl.CorrectCredentialsValidator.java", "BodyUseAPI": [], "Fixed commit": "9fcab15bbaa8ba1d25bf3244cdad0c4810c33beb", "Url": "https://api.github.com/repos/ESD6-S65-3/Authentication-Service", "Date": "2018-03-16T15:03:21Z"},
{"Line": "38=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "AuthenticationStatus.INVALID_CREDENTIALS.name()=>CodeAuthenticationStatus.INVALID_CREDENTIALS.name()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3340/buggy-version/service.src.main.java.nl.earthbird.authentication.service.validation.impl.CorrectCredentialsValidator.java", "BodyUseAPI": [], "Fixed commit": "9fcab15bbaa8ba1d25bf3244cdad0c4810c33beb", "Url": "https://api.github.com/repos/ESD6-S65-3/Authentication-Service", "Date": "2018-03-16T15:03:21Z"},
{"Line": "30=>30", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "nl.earthbird.authentication.domain.authentication.AuthenticationResponse.setStatus(AuthenticationStatus.INVALID_CREDENTIALS)=>nl.earthbird.authentication.domain.code.authentication.CodeAuthenticationResponse.setStatus(CodeAuthenticationStatus.INVALID_CREDENTIALS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3340/buggy-version/service.src.main.java.nl.earthbird.authentication.service.validation.impl.CorrectCredentialsValidator.java", "BodyUseAPI": [], "Fixed commit": "9fcab15bbaa8ba1d25bf3244cdad0c4810c33beb", "Url": "https://api.github.com/repos/ESD6-S65-3/Authentication-Service", "Date": "2018-03-16T15:03:21Z"},
{"Line": "38=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "nl.earthbird.authentication.domain.authentication.AuthenticationRequest.getBaseRequest()=>nl.earthbird.authentication.domain.code.authentication.CodeAuthenticationRequest.getBaseRequest()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3340/buggy-version/service.src.main.java.nl.earthbird.authentication.service.validation.impl.CorrectCredentialsValidator.java", "BodyUseAPI": [], "Fixed commit": "9fcab15bbaa8ba1d25bf3244cdad0c4810c33beb", "Url": "https://api.github.com/repos/ESD6-S65-3/Authentication-Service", "Date": "2018-03-16T15:03:21Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "nl.earthbird.authentication.domain.authentication.AuthenticationResponse.getResourceOwner()=>nl.earthbird.authentication.domain.code.authentication.CodeAuthenticationResponse.getResourceOwner()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3340/buggy-version/service.src.main.java.nl.earthbird.authentication.service.validation.impl.CorrectCredentialsValidator.java", "BodyUseAPI": [], "Fixed commit": "9fcab15bbaa8ba1d25bf3244cdad0c4810c33beb", "Url": "https://api.github.com/repos/ESD6-S65-3/Authentication-Service", "Date": "2018-03-16T15:03:21Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "nl.earthbird.authentication.service.validation.impl.CorrectCredentialsValidator.getInvalidCredentialsRedirectionUri(nl.earthbird.authentication.domain.authentication.AuthenticationRequest)=>nl.earthbird.authentication.service.validation.impl.CorrectCredentialsValidator.getInvalidCredentialsRedirectionUri(nl.earthbird.authentication.domain.code.authentication.CodeAuthenticationRequest)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3340/buggy-version/service.src.main.java.nl.earthbird.authentication.service.validation.impl.CorrectCredentialsValidator.java", "BodyUseAPI": [], "Fixed commit": "9fcab15bbaa8ba1d25bf3244cdad0c4810c33beb", "Url": "https://api.github.com/repos/ESD6-S65-3/Authentication-Service", "Date": "2018-03-16T15:03:21Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "nl.earthbird.authentication.domain.authentication.AuthenticationResponse.setLocationUri(java.lang.String)=>nl.earthbird.authentication.domain.code.authentication.CodeAuthenticationResponse.setLocationUri(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3340/buggy-version/service.src.main.java.nl.earthbird.authentication.service.validation.impl.CorrectCredentialsValidator.java", "BodyUseAPI": [], "Fixed commit": "9fcab15bbaa8ba1d25bf3244cdad0c4810c33beb", "Url": "https://api.github.com/repos/ESD6-S65-3/Authentication-Service", "Date": "2018-03-16T15:03:21Z"},
{"Line": "252=>254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.wso2telco.dep.mediator.impl.smsmessaging.SMSExecutor.getResourceUrl()=>com.wso2telco.dep.mediator.impl.smsmessaging.SMSExecutor.getApiContext()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5790/buggy-version/mediation-old.src.main.java.com.wso2telco.dep.mediator.impl.smsmessaging.SendSMSHandler.java", "BodyUseAPI": [], "Fixed commit": "2975bf9ccdd90f1a694eb9bba365ce5bcb49f432", "Url": "https://api.github.com/repos/WSO2Telco/mediation-dep", "Date": "2018-07-30T05:27:25Z"},
{"Line": "204=>204", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.forumManager.DateUtils.getFormat(p.getCreationDate())=>com.forumManager.DateUtils.getDFormat(p.getCreationDate())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1249/buggy-version/DiscussionPortal.src.com.forumManager.ForumController.java", "BodyUseAPI": [], "Fixed commit": "237affcd1b698f64e1422f006d98888817d42b74", "Url": "https://api.github.com/repos/spi12der/Discussion-Portal", "Date": "2018-03-30T18:13:07Z"},
{"Line": "17=>17", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Objects.User(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>Objects.User(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1247/buggy-version/src.Objects.Patron.java", "BodyUseAPI": [], "Fixed commit": "00833944f091e2db393a1c97209a00ae3176254d", "Url": "https://api.github.com/repos/adilyas/lms", "Date": "2018-04-24T10:58:47Z"},
{"Line": "11=>11", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Objects.User(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>Objects.User(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1247/buggy-version/src.Objects.Patron.java", "BodyUseAPI": [], "Fixed commit": "00833944f091e2db393a1c97209a00ae3176254d", "Url": "https://api.github.com/repos/adilyas/lms", "Date": "2018-04-24T10:58:47Z"},
{"Line": "291=>291", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.smartdevicelink.SdlConnection.SdlSession.isServiceAllowed(SessionType.PCM,com.smartdevicelink.SdlConnection.SdlSession.TransportLevel)=>com.smartdevicelink.SdlConnection.SdlSession.isServiceAllowed(SessionType.NAV,com.smartdevicelink.SdlConnection.SdlSession.TransportLevel)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3815/buggy-version/sdl_android.src.main.java.com.smartdevicelink.SdlConnection.SdlSession.java", "BodyUseAPI": [], "Fixed commit": "3a605412a31f8fa605ea862ffaab0009ff668df6", "Url": "https://api.github.com/repos/anildahiya/sdl_android", "Date": "2018-04-18T19:43:21Z"},
{"Line": "648=>655", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "condition.getValues().add(java.lang.Object)=>com.alibaba.druid.stat.TableStat.Condition.addValue(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8557/buggy-version/src.main.java.com.alibaba.druid.sql.visitor.SchemaStatVisitor.java", "BodyUseAPI": [], "Fixed commit": "6d9c176450b430fc23bb8da4c73142cafe505ad4", "Url": "https://api.github.com/repos/FlakyTestDetection/druid", "Date": "2018-02-04T05:24:57Z"},
{"Line": "59=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.LayoutInflater.inflate(R.layout.list_item,<nulltype>)=>android.view.LayoutInflater.inflate(R.layout.list_item,<nulltype>,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4137/buggy-version/app.src.main.java.com.soft.morales.mysmartwardrobe.adapters.CustomAdapter.java", "BodyUseAPI": [], "Fixed commit": "69c197708c9415871ffa8b5a59b808325751fcba", "Url": "https://api.github.com/repos/Noitham/MySmartWardrobe", "Date": "2018-05-23T07:58:37Z"},
{"Line": "25=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.Object(android.content.Context,R.style.DialogTheme)=>java.lang.Object(android.content.Context,R.style.ThemeOverlay_AppCompat_Dialog_Alert)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4881/buggy-version/app.src.main.java.x.toolbar.toolbarx.CustomDialog.java", "BodyUseAPI": [], "Fixed commit": "f38c86dca42049662ad539cc41bc9b3fb6f287b0", "Url": "https://api.github.com/repos/fjr619/toolbarx2", "Date": "2018-02-28T16:02:33Z"},
{"Line": "165=>169", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.RequestWrapper.getPath()=>org.springframework.cloud.netflix.zuul.filters.RequestWrapper.getPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "85=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.ZuulProperties.isRemoveSemicolonContent()=>org.springframework.cloud.netflix.zuul.filters.ZuulProperties.isRemoveSemicolonContent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "157=>161", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.ZuulProperties.isAddHostHeader()=>org.springframework.cloud.netflix.zuul.filters.ZuulProperties.isAddHostHeader()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "126=>130", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.Route.getRetryable()=>org.springframework.cloud.netflix.zuul.filters.Route.getRetryable()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "163=>167", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.RequestWrapper.getPath()=>org.springframework.cloud.netflix.zuul.filters.RequestWrapper.getPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "228=>232", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.addProxyPrefix(com.netflix.zuul.context.RequestContext,org.springframework.cloud.netflix.zuul.filters.pre.Route)=>org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.addProxyPrefix(com.netflix.zuul.context.RequestContext,org.springframework.cloud.netflix.zuul.filters.Route)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "125=>129", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.Route.getRetryable()=>org.springframework.cloud.netflix.zuul.filters.Route.getRetryable()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "116=>120", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.Route.getId()=>org.springframework.cloud.netflix.zuul.filters.Route.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "115=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.Route.getPath()=>org.springframework.cloud.netflix.zuul.filters.Route.getPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "117=>121", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.Route.isCustomSensitiveHeaders()=>org.springframework.cloud.netflix.zuul.filters.Route.isCustomSensitiveHeaders()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "243=>247", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.Route.getPrefix()=>org.springframework.cloud.netflix.zuul.filters.Route.getPrefix()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "250=>254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.Route.getPrefix()=>org.springframework.cloud.netflix.zuul.filters.Route.getPrefix()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "122=>126", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.ProxyRequestHelper.addIgnoredHeaders(route.getSensitiveHeaders().toArray(new java.lang.String[0]))=>org.springframework.cloud.netflix.zuul.filters.ProxyRequestHelper.addIgnoredHeaders(route.getSensitiveHeaders().toArray(new java.lang.String[0]))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "173=>177", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.ZuulProperties.getServletPath()=>org.springframework.cloud.netflix.zuul.filters.ZuulProperties.getServletPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "113=>117", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.Route.getLocation()=>org.springframework.cloud.netflix.zuul.filters.Route.getLocation()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "146=>150", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.addProxyHeaders(com.netflix.zuul.context.RequestContext,org.springframework.cloud.netflix.zuul.filters.pre.Route)=>org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.addProxyHeaders(com.netflix.zuul.context.RequestContext,org.springframework.cloud.netflix.zuul.filters.Route)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "196=>200", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.RequestWrapper.from(java.lang.String,org.springframework.http.HttpMethod)=>org.springframework.cloud.netflix.zuul.filters.RequestWrapper.from(java.lang.String,org.springframework.http.HttpMethod)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "196=>200", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.RequestWrapper.from(java.lang.String,org.springframework.http.HttpMethod)=>org.springframework.cloud.netflix.zuul.filters.RequestWrapper.from(java.lang.String,org.springframework.http.HttpMethod)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "122=>126", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.Route.getSensitiveHeaders()=>org.springframework.cloud.netflix.zuul.filters.Route.getSensitiveHeaders()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "111=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.RouteLocator.getMatchingRoute(org.springframework.cloud.netflix.zuul.filters.pre.RequestWrapper)=>org.springframework.cloud.netflix.zuul.filters.RouteLocator.getMatchingRoute(org.springframework.cloud.netflix.zuul.filters.RequestWrapper)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "172=>176", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.ZuulProperties.getServletPath()=>org.springframework.cloud.netflix.zuul.filters.ZuulProperties.getServletPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "145=>149", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.ZuulProperties.isAddProxyHeaders()=>org.springframework.cloud.netflix.zuul.filters.ZuulProperties.isAddProxyHeaders()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "119=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.ZuulProperties.getSensitiveHeaders()=>org.springframework.cloud.netflix.zuul.filters.ZuulProperties.getSensitiveHeaders()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "135=>139", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.Route.getPath()=>org.springframework.cloud.netflix.zuul.filters.Route.getPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "118=>122", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.ProxyRequestHelper.addIgnoredHeaders(this.properties.getSensitiveHeaders().toArray(new java.lang.String[0]))=>org.springframework.cloud.netflix.zuul.filters.ProxyRequestHelper.addIgnoredHeaders(this.properties.getSensitiveHeaders().toArray(new java.lang.String[0]))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "240=>244", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.cloud.netflix.zuul.filters.pre.Route.getPrefix()=>org.springframework.cloud.netflix.zuul.filters.Route.getPrefix()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/198/buggy-version/spring-cloud-netflix-zuul.src.main.java.org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.java", "BodyUseAPI": [], "Fixed commit": "28a451f0704a0fb556c6a5feea9cbf8bae6a05ca", "Url": "https://api.github.com/repos/galovics/spring-cloud-netflix", "Date": "2018-01-09T20:34:00Z"},
{"Line": "78=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.pdown.rest.util.ContentUtil.getObjectMapper()=>org.pdown.rest.util.ContentUtil.getObjectMapper(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8940/buggy-version/src.main.java.org.pdown.rest.util.ContentUtil.java", "BodyUseAPI": [], "Fixed commit": "cdf0e61be7aaf9e8518f0b2e35d664a94daea7d7", "Url": "https://api.github.com/repos/proxyee-down-org/pdown-rest", "Date": "2018-07-11T10:02:01Z"},
{"Line": "13=>13", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.pdown.rest.util.RestUtil.buildResponse(<nulltype>,java.lang.Object)=>org.pdown.rest.util.RestUtil.buildResponse(java.lang.String,java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8940/buggy-version/src.main.java.org.pdown.rest.util.RestUtil.java", "BodyUseAPI": [], "Fixed commit": "cdf0e61be7aaf9e8518f0b2e35d664a94daea7d7", "Url": "https://api.github.com/repos/proxyee-down-org/pdown-rest", "Date": "2018-07-11T10:02:01Z"},
{"Line": "17=>17", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.pdown.rest.util.RestUtil.buildResponse(java.lang.String,<nulltype>)=>org.pdown.rest.util.RestUtil.buildResponse(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8940/buggy-version/src.main.java.org.pdown.rest.util.RestUtil.java", "BodyUseAPI": [], "Fixed commit": "cdf0e61be7aaf9e8518f0b2e35d664a94daea7d7", "Url": "https://api.github.com/repos/proxyee-down-org/pdown-rest", "Date": "2018-07-11T10:02:01Z"},
{"Line": "304=>304", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "layout.createParallelGroup().addComponent(javax.swing.JLabel)=>layout.createParallelGroup().addComponent(javax.swing.JLabel,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3801/buggy-version/src.main.java.net.nikr.eve.jeveasset.gui.tabs.tracker.TrackerTab.java", "BodyUseAPI": [], "Fixed commit": "6ede1fd2391ac12a95efb5d0ed658ad4fc45f043", "Url": "https://api.github.com/repos/GoldenGnu/jeveassets", "Date": "2014-12-08T13:55:37Z"},
{"Line": "304=>304", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "layout.createParallelGroup().addComponent(jFromLabel).addComponent(javax.swing.JLabel)=>layout.createParallelGroup().addComponent(jFromLabel, LABEL_WIDTH, LABEL_WIDTH, LABEL_WIDTH).addComponent(javax.swing.JLabel,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3801/buggy-version/src.main.java.net.nikr.eve.jeveasset.gui.tabs.tracker.TrackerTab.java", "BodyUseAPI": [], "Fixed commit": "6ede1fd2391ac12a95efb5d0ed658ad4fc45f043", "Url": "https://api.github.com/repos/GoldenGnu/jeveassets", "Date": "2014-12-08T13:55:37Z"},
{"Line": "308=>309", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "layout.createParallelGroup().addComponent(com.toedter.calendar.JDateChooser)=>layout.createParallelGroup().addComponent(com.toedter.calendar.JDateChooser,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3801/buggy-version/src.main.java.net.nikr.eve.jeveasset.gui.tabs.tracker.TrackerTab.java", "BodyUseAPI": [], "Fixed commit": "6ede1fd2391ac12a95efb5d0ed658ad4fc45f043", "Url": "https://api.github.com/repos/GoldenGnu/jeveassets", "Date": "2014-12-08T13:55:37Z"},
{"Line": "308=>309", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "layout.createParallelGroup().addComponent(jFrom).addComponent(com.toedter.calendar.JDateChooser)=>layout.createParallelGroup().addComponent(jFrom, ((PANEL_WIDTH) - (LABEL_WIDTH)), ((PANEL_WIDTH) - (LABEL_WIDTH)), ((PANEL_WIDTH) - (LABEL_WIDTH))).addComponent(com.toedter.calendar.JDateChooser,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3801/buggy-version/src.main.java.net.nikr.eve.jeveasset.gui.tabs.tracker.TrackerTab.java", "BodyUseAPI": [], "Fixed commit": "6ede1fd2391ac12a95efb5d0ed658ad4fc45f043", "Url": "https://api.github.com/repos/GoldenGnu/jeveassets", "Date": "2014-12-08T13:55:37Z"},
{"Line": "383=>384", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.realm.RealmResults<? extends io.realm.RealmObject>.get(int)=>io.realm.RealmQuery<? extends io.realm.RealmObject>.lessThanOrEqualTo(java.lang.String,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6237/buggy-version/app.src.main.java.com.github.runningforlife.photosniffer.data.local.RealmApiImpl.java", "BodyUseAPI": [], "Fixed commit": "aa12220be489e2c027370cd5b98f502ba51891d5", "Url": "https://api.github.com/repos/runningforlife/PhotoFans", "Date": "2018-01-08T13:01:15Z"},
{"Line": "83=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.github.runningforlife.photosniffer.ui.fragment.SettingsFragment.getString(R.string.max_reserved_images)=>com.github.runningforlife.photosniffer.ui.fragment.SettingsFragment.getString(R.string.pref_max_reserved_images)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6237/buggy-version/app.src.main.java.com.github.runningforlife.photosniffer.ui.fragment.SettingsFragment.java", "BodyUseAPI": [], "Fixed commit": "aa12220be489e2c027370cd5b98f502ba51891d5", "Url": "https://api.github.com/repos/runningforlife/PhotoFans", "Date": "2018-01-08T13:01:15Z"},
{"Line": "273=>273", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "us.ihmc.commonWalkingControlModules.controllerCore.WholeBodyInverseDynamicsSolver.getAchievedMomentumRateLinear()=>us.ihmc.commonWalkingControlModules.controllerCore.WholeBodyVirtualModelControlSolver.getAchievedMomentumRateLinear()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8655/buggy-version/ihmc-common-walking-control-modules.src.main.java.us.ihmc.commonWalkingControlModules.controllerCore.WholeBodyControllerCore.java", "BodyUseAPI": [], "Fixed commit": "d709b44617e4e77d506932d05159c9fcec390402", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-03-19T15:56:11Z"},
{"Line": "273=>273", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "us.ihmc.commonWalkingControlModules.controllerCore.WholeBodyInverseDynamicsSolver.getAchievedMomentumRateLinear()=>us.ihmc.commonWalkingControlModules.controllerCore.WholeBodyVirtualModelControlSolver.getAchievedMomentumRateLinear()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8655/buggy-version/ihmc-common-walking-control-modules.src.main.java.us.ihmc.commonWalkingControlModules.controllerCore.WholeBodyControllerCore.java", "BodyUseAPI": [], "Fixed commit": "d709b44617e4e77d506932d05159c9fcec390402", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-03-19T15:56:11Z"},
{"Line": "24=>24", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.wasteofplastic.askyblock.ASkyBlockAPI.getIslandAt(org.bukkit.Location)=>com.wasteofplastic.acidisland.ASkyBlockAPI.getIslandAt(org.bukkit.Location)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8000/buggy-version/src.xyz.spaceio.hooks.HookAcidIsland.java", "BodyUseAPI": [], "Fixed commit": "0931d9a5a341f1b7084b84b06256f1acc93a87d1", "Url": "https://api.github.com/repos/mastercake10/CustomOreGen", "Date": "2018-09-11T22:17:09Z"},
{"Line": "14=>14", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.wasteofplastic.askyblock.ASkyBlockAPI.getInstance()=>com.wasteofplastic.acidisland.ASkyBlockAPI.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8000/buggy-version/src.xyz.spaceio.hooks.HookAcidIsland.java", "BodyUseAPI": [], "Fixed commit": "0931d9a5a341f1b7084b84b06256f1acc93a87d1", "Url": "https://api.github.com/repos/mastercake10/CustomOreGen", "Date": "2018-09-11T22:17:09Z"},
{"Line": "19=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.wasteofplastic.askyblock.ASkyBlockAPI.getIslandLevel(java.util.UUID)=>com.wasteofplastic.acidisland.ASkyBlockAPI.getIslandLevel(java.util.UUID)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8000/buggy-version/src.xyz.spaceio.hooks.HookAcidIsland.java", "BodyUseAPI": [], "Fixed commit": "0931d9a5a341f1b7084b84b06256f1acc93a87d1", "Url": "https://api.github.com/repos/mastercake10/CustomOreGen", "Date": "2018-09-11T22:17:09Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.wasteofplastic.askyblock.ASkyBlockAPI.getIslandWorld()=>com.wasteofplastic.acidisland.ASkyBlockAPI.getIslandWorld()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8000/buggy-version/src.xyz.spaceio.hooks.HookAcidIsland.java", "BodyUseAPI": [], "Fixed commit": "0931d9a5a341f1b7084b84b06256f1acc93a87d1", "Url": "https://api.github.com/repos/mastercake10/CustomOreGen", "Date": "2018-09-11T22:17:09Z"},
{"Line": "14=>14", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.wasteofplastic.askyblock.ASkyBlockAPI.getInstance()=>com.wasteofplastic.acidisland.ASkyBlockAPI.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8000/buggy-version/src.xyz.spaceio.hooks.HookAcidIsland.java", "BodyUseAPI": [], "Fixed commit": "0931d9a5a341f1b7084b84b06256f1acc93a87d1", "Url": "https://api.github.com/repos/mastercake10/CustomOreGen", "Date": "2018-09-11T22:17:09Z"},
{"Line": "21=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "gravity.gbot.utils.BotListener.getCommand(java.lang.String,java.lang.String,net.dv8tion.jda.core.events.message.guild.GuildMessageReceivedEvent)=>gravity.gbot.utils.BotListener.getCommand(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7449/buggy-version/src.main.java.gravity.gbot.utils.Logging.msgLogger.java", "BodyUseAPI": [], "Fixed commit": "be8f95a7fcb06f6887a52bd16d1b82ea94e5af17", "Url": "https://api.github.com/repos/EnzoDevelop/EnzoBot", "Date": "2018-05-07T16:29:30Z"},
{"Line": "25=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.dv8tion.jda.core.events.message.guild.GuildMessageReceivedEvent.getChannelType()=>event.getChannel().getType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7449/buggy-version/src.main.java.gravity.gbot.utils.Logging.msgLogger.java", "BodyUseAPI": [], "Fixed commit": "be8f95a7fcb06f6887a52bd16d1b82ea94e5af17", "Url": "https://api.github.com/repos/EnzoDevelop/EnzoBot", "Date": "2018-05-07T16:29:30Z"},
{"Line": "14=>14", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.dv8tion.jda.core.events.message.guild.GuildMessageReceivedEvent.getChannelType()=>event.getChannel().getType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7449/buggy-version/src.main.java.gravity.gbot.utils.Logging.msgLogger.java", "BodyUseAPI": [], "Fixed commit": "be8f95a7fcb06f6887a52bd16d1b82ea94e5af17", "Url": "https://api.github.com/repos/EnzoDevelop/EnzoBot", "Date": "2018-05-07T16:29:30Z"},
{"Line": "27=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.dv8tion.jda.core.events.message.guild.GuildMessageReceivedEvent.getChannelType()=>event.getChannel().getType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7449/buggy-version/src.main.java.gravity.gbot.utils.Logging.msgLogger.java", "BodyUseAPI": [], "Fixed commit": "be8f95a7fcb06f6887a52bd16d1b82ea94e5af17", "Url": "https://api.github.com/repos/EnzoDevelop/EnzoBot", "Date": "2018-05-07T16:29:30Z"},
{"Line": "16=>16", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.dv8tion.jda.core.events.message.guild.GuildMessageReceivedEvent.getChannelType()=>event.getChannel().getType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7449/buggy-version/src.main.java.gravity.gbot.utils.Logging.msgLogger.java", "BodyUseAPI": [], "Fixed commit": "be8f95a7fcb06f6887a52bd16d1b82ea94e5af17", "Url": "https://api.github.com/repos/EnzoDevelop/EnzoBot", "Date": "2018-05-07T16:29:30Z"},
{"Line": "28=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.obicere.indy.logging.Log.info(java.lang.String)=>org.obicere.indy.logging.Log.printTo(java.io.PrintStream,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3579/buggy-version/main.src.org.obicere.indy.logging.Log.java", "BodyUseAPI": [], "Fixed commit": "61d14b7de93b7f99bc33de7463b15aca87d9555a", "Url": "https://api.github.com/repos/Obicere/indy", "Date": "2018-05-04T21:07:17Z"},
{"Line": "620=>619", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "main.java.memoranda.EventsManager.createEvent(main.java.memoranda.ui.CalendarDate,int,int,java.lang.String)=>main.java.memoranda.EventsManager.createEvent(main.java.memoranda.ui.CalendarDate,int,int,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1977/buggy-version/src.main.java.memoranda.ui.MapPanel.java", "BodyUseAPI": [], "Fixed commit": "37c60e5744599df9bbc0009462fc3ea693be0b8e", "Url": "https://api.github.com/repos/ser316asu/SER316-Gera-SPRING18", "Date": "2018-03-29T04:45:39Z"},
{"Line": "38=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "dominio.repositorio.RepositorioPrestamo.obtener(java.lang.String)=>dominio.repositorio.RepositorioPrestamo.obtenerLibroPrestadoPorIsbn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6494/buggy-version/src.main.java.dominio.Bibliotecario.java", "BodyUseAPI": [], "Fixed commit": "c5f26f06513691e0b33a765510f6680aa75d4a98", "Url": "https://api.github.com/repos/davidblj/bibliotecta", "Date": "2018-05-20T05:22:22Z"},
{"Line": "103=>103", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.nio.file.Paths.get(java.lang.String)=>java.nio.file.Path.resolve(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8131/buggy-version/cli.ballerina-packerina.src.main.java.org.ballerinalang.packerina.NetworkUtils.java", "BodyUseAPI": [], "Fixed commit": "e15cefc7ba668bd05517aa78812a133f74477054", "Url": "https://api.github.com/repos/NatashaWso2/ballerina", "Date": "2018-02-27T14:25:24Z"},
{"Line": "446=>479", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<bwta.Region>.add(bwta.BWTA.getRegion(region.getCenter()))=>java.util.HashSet<bwta.Region>.add(bwta.Region)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3773/buggy-version/CBot.src.core.Init.java", "BodyUseAPI": [], "Fixed commit": "1d36403a8b984504beb01a44e0664cb3e752d624", "Url": "https://api.github.com/repos/p1387h/CBot", "Date": "2018-04-17T02:37:57Z"},
{"Line": "177=>177", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.rvadam.pfe.PhotoVisualization.PhotoVisualizationFragment.displayPhotoWithUri(android.net.Uri)=>com.example.rvadam.pfe.PhotoVisualization.PhotoVisualizationFragment.displayPhotoWithUri(android.net.Uri,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6062/buggy-version/app.src.main.java.com.example.rvadam.pfe.PhotoVisualization.PhotoVisualizationFragment.java", "BodyUseAPI": [], "Fixed commit": "070c69f7337b33f3d9922d4a67152c703fc39e11", "Url": "https://api.github.com/repos/romvad/PFE_Metralor_App", "Date": "2018-05-23T23:09:16Z"},
{"Line": "181=>181", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.rvadam.pfe.PhotoVisualization.PhotoVisualizationFragment.displayPhotoWithUri(android.net.Uri)=>com.example.rvadam.pfe.PhotoVisualization.PhotoVisualizationFragment.displayPhotoWithUri(android.net.Uri,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6062/buggy-version/app.src.main.java.com.example.rvadam.pfe.PhotoVisualization.PhotoVisualizationFragment.java", "BodyUseAPI": [], "Fixed commit": "070c69f7337b33f3d9922d4a67152c703fc39e11", "Url": "https://api.github.com/repos/romvad/PFE_Metralor_App", "Date": "2018-05-23T23:09:16Z"},
{"Line": "372=>371", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "hmvv.gui.sampleList.SampleListTableModel.getSample(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>hmvv.gui.sampleList.SampleListTableModel.getSample(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7397/buggy-version/HMVV.src.hmvv.gui.adminFrames.EnterSample.java", "BodyUseAPI": [], "Fixed commit": "67de733050b52af6ecf50891d7b89e3f9fbaf10b", "Url": "https://api.github.com/repos/hmvv/hmvv", "Date": "2018-09-21T23:37:00Z"},
{"Line": "41=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(c.get_numSquadre())=>gestionecampionati.grafica.GenPActionListeneter.sostituisci()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6277/buggy-version/src.gestionecampionati.grafica.GenPActionListeneter.java", "BodyUseAPI": [], "Fixed commit": "8a50c789ee341e805d4d5b2e416ff96187561f34", "Url": "https://api.github.com/repos/enrico404/GestioneCampionati", "Date": "2018-02-24T11:23:13Z"},
{"Line": "2256=>2253", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.fossasia.pslab.communication.PacketHandler.getInt()=>org.fossasia.pslab.communication.PacketHandler.getVoltageSummation()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9565/buggy-version/app.src.main.java.org.fossasia.pslab.communication.ScienceLab.java", "BodyUseAPI": [], "Fixed commit": "4ad57b34b7a61c3ee9738a86f4da26d2036180fc", "Url": "https://api.github.com/repos/abhinavraj23/pslab-android", "Date": "2018-06-28T20:53:24Z"},
{"Line": "2173=>2173", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.fossasia.pslab.communication.PacketHandler.getInt()=>org.fossasia.pslab.communication.PacketHandler.getVoltageSummation()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9565/buggy-version/app.src.main.java.org.fossasia.pslab.communication.ScienceLab.java", "BodyUseAPI": [], "Fixed commit": "4ad57b34b7a61c3ee9738a86f4da26d2036180fc", "Url": "https://api.github.com/repos/abhinavraj23/pslab-android", "Date": "2018-06-28T20:53:24Z"},
{"Line": "348=>350", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Map<java.lang.Long, raft.core.server.ServerNode>.remove(request.getServerId())=>java.util.Map<java.lang.Long, raft.core.server.ServerNode>.remove(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1451/buggy-version/cheetah-raft.src.main.java.raft.core.RaftCore.java", "BodyUseAPI": [], "Fixed commit": "e8c9c0ebc7f531ca90f5ab6787841cb8b195bf80", "Url": "https://api.github.com/repos/Ruan-Xin/cheetah", "Date": "2018-04-29T03:48:18Z"},
{"Line": "348=>350", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "raft.protocol.request.AddRequest.getServerId()=>java.util.Map<java.lang.Long, raft.core.server.ServerNode>.remove(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1451/buggy-version/cheetah-raft.src.main.java.raft.core.RaftCore.java", "BodyUseAPI": [], "Fixed commit": "e8c9c0ebc7f531ca90f5ab6787841cb8b195bf80", "Url": "https://api.github.com/repos/Ruan-Xin/cheetah", "Date": "2018-04-29T03:48:18Z"},
{"Line": "70=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.opencb.opencga.app.cli.analysis.executors.VariantQueryCommandUtils.addParam(org.opencb.commons.datastore.core.Query,VariantCatalogQueryUtils.FAMILY_PHENOTYPE,queryVariantsOptions.familyDisease)=>org.opencb.opencga.app.cli.analysis.executors.VariantQueryCommandUtils.addParam(org.opencb.commons.datastore.core.Query,VariantCatalogQueryUtils.FAMILY_PHENOTYPE,queryVariantsOptions.familyPhenotype)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4339/buggy-version/opencga-app.src.main.java.org.opencb.opencga.app.cli.analysis.executors.VariantQueryCommandUtils.java", "BodyUseAPI": [], "Fixed commit": "67ecfc369809209279de46a93b6cd4ba39ee8dfd", "Url": "https://api.github.com/repos/opencb/opencga", "Date": "2018-09-26T19:01:21Z"},
{"Line": "145=>147", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setText(java.lang.String)=>android.widget.Button.setText(getResources().getString(R.string.eg))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7552/buggy-version/ForumPlanLogin.app.src.main.java.com.example.jojo.forumplanlogin.PlanActivity.java", "BodyUseAPI": [], "Fixed commit": "7e6ed6c0da5cc853fd6754aeda518140dc980ae5", "Url": "https://api.github.com/repos/bschmalb/MoCo_Plan", "Date": "2018-06-08T09:20:04Z"},
{"Line": "141=>143", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setText(java.lang.String)=>android.widget.Button.setText(getResources().getString(R.string.og))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7552/buggy-version/ForumPlanLogin.app.src.main.java.com.example.jojo.forumplanlogin.PlanActivity.java", "BodyUseAPI": [], "Fixed commit": "7e6ed6c0da5cc853fd6754aeda518140dc980ae5", "Url": "https://api.github.com/repos/bschmalb/MoCo_Plan", "Date": "2018-06-08T09:20:04Z"},
{"Line": "140=>142", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "btnEGOG.getText().equals(java.lang.String)=>btnEGOG.getText().equals(getResources().getString(R.string.eg))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7552/buggy-version/ForumPlanLogin.app.src.main.java.com.example.jojo.forumplanlogin.PlanActivity.java", "BodyUseAPI": [], "Fixed commit": "7e6ed6c0da5cc853fd6754aeda518140dc980ae5", "Url": "https://api.github.com/repos/bschmalb/MoCo_Plan", "Date": "2018-06-08T09:20:04Z"},
{"Line": "375=>375", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "post.getPostCategory().equals(POST_CATEGORY.PRIVATE)=>POST_CATEGORY.PRIVATE.equals(post.getPostCategory())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2255/buggy-version/src.main.java.com.notes.nicefact.service.PostService.java", "BodyUseAPI": [], "Fixed commit": "bab5b78d10c70d9ac9626b1593a14f9799114edc", "Url": "https://api.github.com/repos/DeepakMalik2709/DemoProject", "Date": "2018-07-28T17:40:10Z"},
{"Line": "73=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "context.getContentResolver().query(Genres.EXTERNAL_CONTENT_URI,java.lang.String[],java.lang.String,<nulltype>,com.kabouzeid.gramophone.util.PreferenceUtil.getInstance(context).getGenreSortOrder())=>context.getContentResolver().query(Genres.EXTERNAL_CONTENT_URI,java.lang.String[],<nulltype>,<nulltype>,com.kabouzeid.gramophone.util.PreferenceUtil.getInstance(context).getGenreSortOrder())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5362/buggy-version/app.src.main.java.com.kabouzeid.gramophone.loader.GenreLoader.java", "BodyUseAPI": [], "Fixed commit": "16021cbd96bfb216b9753835a09a8d118b7dd61b", "Url": "https://api.github.com/repos/ezio84/Phonograph", "Date": "2017-12-29T14:19:42Z"},
{"Line": "45=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "at.uni.handlers.GameScreenManager.setScreen(GameScreenManager.STATE.CHATSERVER)=>at.uni.handlers.GameScreenManager.setScreen(GameScreenManager.STATE.PLAY)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1395/buggy-version/core.src.at.uni.Application.java", "BodyUseAPI": [], "Fixed commit": "24987cefb0337e96ac8f486907bb77b567c254a7", "Url": "https://api.github.com/repos/Fareroo7/Software-Engineering-II-Gruppenprojekt", "Date": "2018-04-25T14:05:56Z"},
{"Line": "562=>562", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "this.inner().withDtu(storageCapacity.capacityInMB())=>this.inner().withStorageMB(storageCapacity.capacityInMB())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/683/buggy-version/azure-mgmt-sql.src.main.java.com.microsoft.azure.management.sql.implementation.SqlElasticPoolImpl.java", "BodyUseAPI": [], "Fixed commit": "b56c6b6ad4e553c8e464fcb437c538f5120ff869", "Url": "https://api.github.com/repos/selvasingh/azure-libraries-for-java", "Date": "2018-03-03T02:58:22Z"},
{"Line": "538=>538", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "this.inner().withDtu(storageCapacity.capacityInMB())=>this.inner().withStorageMB(storageCapacity.capacityInMB())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/683/buggy-version/azure-mgmt-sql.src.main.java.com.microsoft.azure.management.sql.implementation.SqlElasticPoolImpl.java", "BodyUseAPI": [], "Fixed commit": "b56c6b6ad4e553c8e464fcb437c538f5120ff869", "Url": "https://api.github.com/repos/selvasingh/azure-libraries-for-java", "Date": "2018-03-03T02:58:22Z"},
{"Line": "469=>469", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.StringBuilder.append(java.lang.String)=>sg.getActualVid(entry.endVertex.intValue()).toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3503/buggy-version/v3.1.src.main.java.in.dream_lab.goffish.godb.pathDistrSuccinctArrayStructure12Implicit.java", "BodyUseAPI": [], "Fixed commit": "e2284ffeedb67b2300d05d67d70e95e9a666a062", "Url": "https://api.github.com/repos/abhilashsharma/Hama-GoDB-Refactored", "Date": "2018-01-01T13:06:05Z"},
{"Line": "519=>520", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.StringBuilder.append(java.lang.String)=>sg.getActualVid(entry.endVertex.intValue()).toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3503/buggy-version/v3.1.src.main.java.in.dream_lab.goffish.godb.pathDistrSuccinctArrayStructure12Implicit.java", "BodyUseAPI": [], "Fixed commit": "e2284ffeedb67b2300d05d67d70e95e9a666a062", "Url": "https://api.github.com/repos/abhilashsharma/Hama-GoDB-Refactored", "Date": "2018-01-01T13:06:05Z"},
{"Line": "519=>520", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Long.toString()=>java.lang.Long.intValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3503/buggy-version/v3.1.src.main.java.in.dream_lab.goffish.godb.pathDistrSuccinctArrayStructure12Implicit.java", "BodyUseAPI": [], "Fixed commit": "e2284ffeedb67b2300d05d67d70e95e9a666a062", "Url": "https://api.github.com/repos/abhilashsharma/Hama-GoDB-Refactored", "Date": "2018-01-01T13:06:05Z"},
{"Line": "469=>469", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuilder.append(java.lang.String)=>in.dream_lab.goffish.hama.succinctstructure.SuccinctArraySubgraph12Implicit.getActualVid(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3503/buggy-version/v3.1.src.main.java.in.dream_lab.goffish.godb.pathDistrSuccinctArrayStructure12Implicit.java", "BodyUseAPI": [], "Fixed commit": "e2284ffeedb67b2300d05d67d70e95e9a666a062", "Url": "https://api.github.com/repos/abhilashsharma/Hama-GoDB-Refactored", "Date": "2018-01-01T13:06:05Z"},
{"Line": "519=>520", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuilder.append(java.lang.String)=>in.dream_lab.goffish.hama.succinctstructure.SuccinctArraySubgraph12Implicit.getActualVid(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3503/buggy-version/v3.1.src.main.java.in.dream_lab.goffish.godb.pathDistrSuccinctArrayStructure12Implicit.java", "BodyUseAPI": [], "Fixed commit": "e2284ffeedb67b2300d05d67d70e95e9a666a062", "Url": "https://api.github.com/repos/abhilashsharma/Hama-GoDB-Refactored", "Date": "2018-01-01T13:06:05Z"},
{"Line": "95=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ca.ualberta.cs.wrkify.Bid.toString()=>ca.ualberta.cs.wrkify.Bid.getValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2381/buggy-version/wrkify.app.src.main.java.ca.ualberta.cs.wrkify.ViewTaskOpenBottomSheetFragment.java", "BodyUseAPI": [], "Fixed commit": "c740203e6c0f39fe114b30d2b88b76ab718f33dc", "Url": "https://api.github.com/repos/CMPUT301W18T18/wrkify", "Date": "2018-03-29T18:47:14Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ca.ualberta.cs.wrkify.Bid.toString()=>ca.ualberta.cs.wrkify.Bid.getValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2381/buggy-version/wrkify.app.src.main.java.ca.ualberta.cs.wrkify.ViewTaskBiddedBottomSheetFragment.java", "BodyUseAPI": [], "Fixed commit": "c740203e6c0f39fe114b30d2b88b76ab718f33dc", "Url": "https://api.github.com/repos/CMPUT301W18T18/wrkify", "Date": "2018-03-29T18:47:14Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.fooock.github.jobs.data.local.JobDao.getJobs()=>com.fooock.github.jobs.data.local.JobDao.getJobs(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6575/buggy-version/data.src.main.java.com.fooock.github.jobs.data.local.LocalDataSource.java", "BodyUseAPI": [], "Fixed commit": "30d2406c65fd4899898c33c2b30a6754986fb752", "Url": "https://api.github.com/repos/fooock/android-github-jobs", "Date": "2018-08-19T12:51:22Z"},
{"Line": "36=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.StringBuilder.toString()=>java.lang.StringBuilder.substring(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5500/buggy-version/Leetcode.src.Tries.ReplaceWords.java", "BodyUseAPI": [], "Fixed commit": "f5e03fd4aeb51dff6d3b7cd173732c2dbd422771", "Url": "https://api.github.com/repos/veereshkamble/Software-Engineer-Interview-Preparation", "Date": "2018-08-09T22:05:11Z"},
{"Line": "72=>79", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.jaeksoft.searchlib.crawler.web.browser.BrowserDriver<?>.getSourceCode(streamLimiter.getOriginURL())=>webDriver.locateBy(org.openqa.selenium.By.tagName(\"html\")).get(0).getAttribute(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9159/buggy-version/src.main.java.com.jaeksoft.searchlib.parser.htmlParser.WebDriverParserAbstract.java", "BodyUseAPI": [], "Fixed commit": "06e2bcb28802bf9e2d123f63b617025b45efa4ef", "Url": "https://api.github.com/repos/devmobileaim/opensearchserver", "Date": "2018-02-20T05:56:32Z"},
{"Line": "172=>172", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.List<com.carleton.CapstoneSystem.Program>.remove(java.lang.String)=>java.util.List<com.carleton.CapstoneSystem.Program>.remove(com.carleton.CapstoneSystem.Program)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1016/buggy-version/src.main.java.com.carleton.CapstoneSystem.Project.java", "BodyUseAPI": [], "Fixed commit": "77a6a5cb288725ddaf6a3a33e4b36468b93f913d", "Url": "https://api.github.com/repos/tosinoni/CapstoneSystem", "Date": "2018-02-18T02:00:58Z"},
{"Line": "632=>632", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "serverDaten.parent.getServerStub().addKontakt(java.lang.String,eingeloggterBenutzer.getUserID())=>serverDaten.parent.getServerStub().removeKontakt(java.lang.String,eingeloggterBenutzer.getUserID())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7627/buggy-version/src.Server.ClientStubImpl.java", "BodyUseAPI": [], "Fixed commit": "82195b3ce340be9ffa2943a51419c0d069fa80b5", "Url": "https://api.github.com/repos/Niroshan1/Kalender_HI", "Date": "2018-01-28T21:39:24Z"},
{"Line": "409=>409", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.slightlyloony.jsisyphus.positions.Position>.get(int)=>com.slightlyloony.jsisyphus.positions.Position.getRho()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2231/buggy-version/src.com.slightlyloony.jsisyphus.DrawingContext.java", "BodyUseAPI": [], "Fixed commit": "0c30494f86ab7461ec0f0a43d846409ce35a1e60", "Url": "https://api.github.com/repos/SlightlyLoony/JSisyphus", "Date": "2018-02-10T16:26:42Z"},
{"Line": "410=>411", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.List<com.slightlyloony.jsisyphus.positions.Position>.get(int)=>java.util.List<com.slightlyloony.jsisyphus.positions.Position>.add(com.slightlyloony.jsisyphus.positions.Position)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2231/buggy-version/src.com.slightlyloony.jsisyphus.DrawingContext.java", "BodyUseAPI": [], "Fixed commit": "0c30494f86ab7461ec0f0a43d846409ce35a1e60", "Url": "https://api.github.com/repos/SlightlyLoony/JSisyphus", "Date": "2018-02-10T16:26:42Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.File.getAbsolutePath()=>java.io.File.toPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6626/buggy-version/src.main.java.com.utsusynth.utsu.model.voicebank.LyricConfig.java", "BodyUseAPI": [], "Fixed commit": "9cbbe3778d404f25966e3d47a7c46d89dbc9bd38", "Url": "https://api.github.com/repos/titinko/utsu", "Date": "2018-08-30T03:02:41Z"},
{"Line": "31=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.File.getAbsolutePath()=>java.io.File.toPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6626/buggy-version/src.main.java.com.utsusynth.utsu.model.voicebank.LyricConfig.java", "BodyUseAPI": [], "Fixed commit": "9cbbe3778d404f25966e3d47a7c46d89dbc9bd38", "Url": "https://api.github.com/repos/titinko/utsu", "Date": "2018-08-30T03:02:41Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.substring(int)=>java.nio.file.Path.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6626/buggy-version/src.main.java.com.utsusynth.utsu.model.voicebank.LyricConfig.java", "BodyUseAPI": [], "Fixed commit": "9cbbe3778d404f25966e3d47a7c46d89dbc9bd38", "Url": "https://api.github.com/repos/titinko/utsu", "Date": "2018-08-30T03:02:41Z"},
{"Line": "22=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "edu.wpi.first.wpilibj.Solenoid.setPulseDuration(double)=>edu.wpi.first.wpilibj.Solenoid.setPulseDuration(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9362/buggy-version/FRC2018.src.org.usfirst.frc.team95.robot.components.SolenoidWrapper.java", "BodyUseAPI": [], "Fixed commit": "84ba8f80dfc1543dcd147f6fcc1044daf5e503fe", "Url": "https://api.github.com/repos/first95/FRC2018", "Date": "2018-01-17T22:58:07Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "edu.wpi.first.wpilibj.Solenoid.startPulse()=>edu.wpi.first.wpilibj.Solenoid.startPulse()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9362/buggy-version/FRC2018.src.org.usfirst.frc.team95.robot.components.SolenoidWrapper.java", "BodyUseAPI": [], "Fixed commit": "84ba8f80dfc1543dcd147f6fcc1044daf5e503fe", "Url": "https://api.github.com/repos/first95/FRC2018", "Date": "2018-01-17T22:58:07Z"},
{"Line": "121=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.zeebe.broker.subscription.message.state.MessageStateController.put(io.zeebe.broker.subscription.message.state.MessageSubscription)=>io.zeebe.broker.subscription.message.state.MessageStateController.updateCommandSentTime(io.zeebe.broker.subscription.message.state.MessageSubscription)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2642/buggy-version/broker-core.src.main.java.io.zeebe.broker.subscription.message.processor.PublishMessageProcessor.java", "BodyUseAPI": [], "Fixed commit": "1e875e812ca78da72b31956c8a12f64eefea06a1", "Url": "https://api.github.com/repos/zeebe-io/zeebe", "Date": "2018-09-28T05:48:53Z"},
{"Line": "26=>25", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "springfox.documentation.builders.RequestHandlerSelectors.any()=>springfox.documentation.builders.RequestHandlerSelectors.basePackage(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7077/buggy-version/advertiserapi.src.main.java.com.media.advertiserapi.swagger.SwaggerConfig.java", "BodyUseAPI": [], "Fixed commit": "3fe3302e13a317aa5d0e566a1eeceed2e23e7efe", "Url": "https://api.github.com/repos/kcoder1984/AdvertiserAPI", "Date": "2018-06-10T17:36:58Z"},
{"Line": "27=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "springfox.documentation.builders.PathSelectors.regex(java.lang.String)=>springfox.documentation.builders.PathSelectors.any()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7077/buggy-version/advertiserapi.src.main.java.com.media.advertiserapi.swagger.SwaggerConfig.java", "BodyUseAPI": [], "Fixed commit": "3fe3302e13a317aa5d0e566a1eeceed2e23e7efe", "Url": "https://api.github.com/repos/kcoder1984/AdvertiserAPI", "Date": "2018-06-10T17:36:58Z"},
{"Line": "182=>183", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.StringBuilder.append(java.lang.String)=>java.lang.StringBuilder.append(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4180/buggy-version/src.com.peierlong.coursera.algorithms.week4.homework.Board.java", "BodyUseAPI": [], "Fixed commit": "15bfbf8b571d46507fcceb84284ea9769b800f41", "Url": "https://api.github.com/repos/peierlong/AlgorithmDesign", "Date": "2018-01-22T09:30:35Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "faces.awesome.model.Enemy.decreaseHealth(int)=>faces.awesome.model.characters.Enemy.decreaseHealth(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5386/buggy-version/AWG.core.src.faces.awesome.model.item.items.permanents.Hammer.java", "BodyUseAPI": [], "Fixed commit": "eb99df65d4168c6263c8ff8435a820f45c55afd2", "Url": "https://api.github.com/repos/FarzadBT/AwesomeFace-TDA367Project", "Date": "2018-05-25T13:35:40Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "faces.awesome.model.PlayerCharacter.increaseHealth(int)=>faces.awesome.model.characters.PlayerCharacter.increaseHealth(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5386/buggy-version/AWG.core.src.faces.awesome.model.objects.pickup.SmallHeart.java", "BodyUseAPI": [], "Fixed commit": "eb99df65d4168c6263c8ff8435a820f45c55afd2", "Url": "https://api.github.com/repos/FarzadBT/AwesomeFace-TDA367Project", "Date": "2018-05-25T13:35:40Z"},
{"Line": "82=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.PrintStream.println(java.lang.String)=>jp.getText().equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6322/buggy-version/src.main.java.Comments.java", "BodyUseAPI": [], "Fixed commit": "d878156207bc6166ae0f0bdfd95cbe5f08b0517b", "Url": "https://api.github.com/repos/typelogical/YoutubeCommentAnalyzer", "Date": "2018-07-07T01:17:24Z"},
{"Line": "159=>144", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<android.view.View, android.graphics.Point>.get(android.view.View)=>java.util.HashMap<android.view.View, WindowManager.LayoutParams>.get(android.view.View)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2305/buggy-version/app.src.main.java.org.github.yippee.notifytools.view.FloatView.java", "BodyUseAPI": [], "Fixed commit": "3dccf7c61a53bee0830f6572d32725a194fe990e", "Url": "https://api.github.com/repos/yippeesoft/NotifyTools", "Date": "2018-01-16T11:57:32Z"},
{"Line": "25=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.Bukkit.getOfflinePlayer(java.lang.String)=>java.lang.Integer.parseInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5129/buggy-version/src.main.java.com.shadow5353.Commands.Remove.java", "BodyUseAPI": [], "Fixed commit": "1af09eefae9101348af3f0a7fde724eb3ff5f231", "Url": "https://api.github.com/repos/Hinz3/StaffNotes", "Date": "2018-03-17T22:23:44Z"},
{"Line": "25=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.Bukkit.getOfflinePlayer(java.lang.String)=>java.lang.Integer.parseInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5129/buggy-version/src.main.java.com.shadow5353.Commands.Remove.java", "BodyUseAPI": [], "Fixed commit": "1af09eefae9101348af3f0a7fde724eb3ff5f231", "Url": "https://api.github.com/repos/Hinz3/StaffNotes", "Date": "2018-03-17T22:23:44Z"},
{"Line": "304=>303", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.minecraft.client.multiplayer.WorldClient.getCelestialAngle(float)=>net.minecraft.world.World.getCelestialAngle(float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5797/buggy-version/src.main.java.micdoodle8.mods.galacticraft.core.TransformerHooks.java", "BodyUseAPI": [], "Fixed commit": "a154c7ada82fcf1ae85a8a5b8d8d1e8254779cdb", "Url": "https://api.github.com/repos/ETStareak/Galacticraft", "Date": "2018-01-27T13:05:56Z"},
{"Line": "321=>320", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.minecraft.client.multiplayer.WorldClient.getSunBrightness(float)=>net.minecraft.world.World.getSunBrightness(float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5797/buggy-version/src.main.java.micdoodle8.mods.galacticraft.core.TransformerHooks.java", "BodyUseAPI": [], "Fixed commit": "a154c7ada82fcf1ae85a8a5b8d8d1e8254779cdb", "Url": "https://api.github.com/repos/ETStareak/Galacticraft", "Date": "2018-01-27T13:05:56Z"},
{"Line": "196=>196", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.opennars.main.Nar(long,java.lang.String)=>org.opennars.main.Nar(long,boolean,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3517/buggy-version/src.main.java.org.opennars.main.Nar.java", "BodyUseAPI": [], "Fixed commit": "1370664e67b2a5f806131f2eddd954868d70ce5b", "Url": "https://api.github.com/repos/opennars/opennars", "Date": "2018-07-28T18:09:23Z"},
{"Line": "42=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "plugin.accounti.Record.setFieldValue(int,srcRcd.getFieldValue(c))=>plugin.accounti.Record.setFieldValue(int,java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6154/buggy-version/plugin.accounti.SendAccountsMovementTask.java", "BodyUseAPI": [], "Fixed commit": "7a0592a18eec1228e1912d3132cabc995fb800f1", "Url": "https://api.github.com/repos/terry1013/accounti", "Date": "2018-07-18T14:29:03Z"},
{"Line": "38=>41", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println()=>java.text.DecimalFormat.format(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6154/buggy-version/plugin.accounti.SendAccountsMovementTask.java", "BodyUseAPI": [], "Fixed commit": "7a0592a18eec1228e1912d3132cabc995fb800f1", "Url": "https://api.github.com/repos/terry1013/accounti", "Date": "2018-07-18T14:29:03Z"},
{"Line": "30=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(java.lang.String)=>TreeLevelOrder.parseTreePreOrder(TreeLevelOrder.TreeNode)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9650/buggy-version/java.interviewingprep.TreeLevelOrder.java", "BodyUseAPI": [], "Fixed commit": "f89f57d4f8e491d142192aeebb46d3e9b24f2f1b", "Url": "https://api.github.com/repos/sirhomersimpson/snippets", "Date": "2018-05-20T10:36:52Z"},
{"Line": "31=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "TreeLevelOrder.printByLevel(TreeLevelOrder.TreeNode)=>TreeLevelOrder.parseTreePreOrder(TreeLevelOrder.TreeNode)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9650/buggy-version/java.interviewingprep.TreeLevelOrder.java", "BodyUseAPI": [], "Fixed commit": "f89f57d4f8e491d142192aeebb46d3e9b24f2f1b", "Url": "https://api.github.com/repos/sirhomersimpson/snippets", "Date": "2018-05-20T10:36:52Z"},
{"Line": "47=>87", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "TreeLevelOrder.parseTree(TreeLevelOrder.TreeNode)=>TreeLevelOrder.parseTreeInOrder(TreeLevelOrder.TreeNode)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9650/buggy-version/java.interviewingprep.TreeLevelOrder.java", "BodyUseAPI": [], "Fixed commit": "f89f57d4f8e491d142192aeebb46d3e9b24f2f1b", "Url": "https://api.github.com/repos/sirhomersimpson/snippets", "Date": "2018-05-20T10:36:52Z"},
{"Line": "49=>89", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "TreeLevelOrder.parseTree(TreeLevelOrder.TreeNode)=>TreeLevelOrder.parseTreeInOrder(TreeLevelOrder.TreeNode)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9650/buggy-version/java.interviewingprep.TreeLevelOrder.java", "BodyUseAPI": [], "Fixed commit": "f89f57d4f8e491d142192aeebb46d3e9b24f2f1b", "Url": "https://api.github.com/repos/sirhomersimpson/snippets", "Date": "2018-05-20T10:36:52Z"},
{"Line": "29=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "TreeLevelOrder.parseTree(TreeLevelOrder.TreeNode)=>java.io.PrintStream.println(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9650/buggy-version/java.interviewingprep.TreeLevelOrder.java", "BodyUseAPI": [], "Fixed commit": "f89f57d4f8e491d142192aeebb46d3e9b24f2f1b", "Url": "https://api.github.com/repos/sirhomersimpson/snippets", "Date": "2018-05-20T10:36:52Z"},
{"Line": "149=>150", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "GlobalVariables.textScrollPane.getVerticalScrollBar().setValue(int)=>GlobalVariables.textPane.setCaretPosition(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9863/buggy-version/com.notebook.MenuEdit.java", "BodyUseAPI": [], "Fixed commit": "8e69430427b519e9ef1c59a97891ec73ce249f9c", "Url": "https://api.github.com/repos/unlimitgit/NoteBook", "Date": "2018-02-13T03:35:58Z"},
{"Line": "149=>150", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "GlobalVariables.textScrollPane.getVerticalScrollBar()=>GlobalVariables.textPane.setCaretPosition(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9863/buggy-version/com.notebook.MenuEdit.java", "BodyUseAPI": [], "Fixed commit": "8e69430427b519e9ef1c59a97891ec73ce249f9c", "Url": "https://api.github.com/repos/unlimitgit/NoteBook", "Date": "2018-02-13T03:35:58Z"},
{"Line": "179=>182", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.wpi.first.wpilibj.smartdashboard.SendableChooser<edu.wpi.first.wpilibj.command.Command>.addObject(java.lang.String,org.usfirst.frc.team694.robot.commands.auton.choosers.SingleCube90DegreeScaleAutonChooserCommand)=>edu.wpi.first.wpilibj.smartdashboard.SendableChooser<edu.wpi.first.wpilibj.command.Command>.addObject(java.lang.String,org.usfirst.frc.team694.robot.commands.auton.choosers.TripleCubeScaleAutonChooserCommand)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5748/buggy-version/src.org.usfirst.frc.team694.robot.Robot.java", "BodyUseAPI": [], "Fixed commit": "5d8cffc0220bb42a60cc82e9bec868a0c992ac50", "Url": "https://api.github.com/repos/Team694/Wildcard", "Date": "2018-04-13T22:59:31Z"},
{"Line": "54=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "method.getBody().statements().add(org.eclipse.jdt.core.dom.Statement)=>method.getBody().statements().add(org.eclipse.jdt.core.dom.ASTNode)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1906/buggy-version/src.br.ufcg.spg.refaster.VariableDeclarationFragmentBodyConfig.java", "BodyUseAPI": [], "Fixed commit": "97f10f9491934c0dbc11bb9280751da13af23789", "Url": "https://api.github.com/repos/reudismam/Revisar", "Date": "2018-04-25T18:19:32Z"},
{"Line": "36=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.eclipse.jdt.core.dom.VariableDeclarationFragment.getName()=>org.eclipse.jdt.core.dom.VariableDeclarationFragment.getParent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1906/buggy-version/src.br.ufcg.spg.refaster.VariableDeclarationFragmentBodyConfig.java", "BodyUseAPI": [], "Fixed commit": "97f10f9491934c0dbc11bb9280751da13af23789", "Url": "https://api.github.com/repos/reudismam/Revisar", "Date": "2018-04-25T18:19:32Z"},
{"Line": "52=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.eclipse.jdt.core.dom.ASTNode.copySubtree(org.eclipse.jdt.core.dom.AST,org.eclipse.jdt.core.dom.Statement)=>org.eclipse.jdt.core.dom.ASTNode.copySubtree(org.eclipse.jdt.core.dom.AST,org.eclipse.jdt.core.dom.ASTNode)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1906/buggy-version/src.br.ufcg.spg.refaster.VariableDeclarationFragmentBodyConfig.java", "BodyUseAPI": [], "Fixed commit": "97f10f9491934c0dbc11bb9280751da13af23789", "Url": "https://api.github.com/repos/reudismam/Revisar", "Date": "2018-04-25T18:19:32Z"},
{"Line": "807=>807", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.jena.rdf.model.Model.createProperty(DataSetStructure.dataset)=>org.apache.jena.rdf.model.Model.createProperty(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6565/buggy-version/src.main.java.org.hobbit.odin.odinevaluationmodule.OdinEvaluationModule.java", "BodyUseAPI": [], "Fixed commit": "2067e67f787aff983130cc948fa3f5bba7ce10b3", "Url": "https://api.github.com/repos/hobbit-project/odin", "Date": "2018-01-26T17:25:31Z"},
{"Line": "94=>92", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.phoenix.end2end.MigrateSystemTablesToSystemNamespaceIT.enableNamespacesOnServer(org.apache.hadoop.conf.Configuration)=>org.apache.phoenix.end2end.MigrateSystemTablesToSystemNamespaceIT.enableNamespacesOnServer(org.apache.hadoop.conf.Configuration,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4480/buggy-version/phoenix-core.src.it.java.org.apache.phoenix.end2end.MigrateSystemTablesToSystemNamespaceIT.java", "BodyUseAPI": [], "Fixed commit": "45b93175bd3395e5bfc22610e03b120d575e29ea", "Url": "https://api.github.com/repos/twdsilva/phoenix", "Date": "2018-06-28T16:07:23Z"},
{"Line": "21=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "serenitylabs.tutorials.vetclinic.sales.TaxRateCalculator.rateFor(serenitylabs.tutorials.vetclinic.sales.model.LineItem)=>serenitylabs.tutorials.vetclinic.sales.model.LineItem.getCategory()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5252/buggy-version/src.main.java.serenitylabs.tutorials.vetclinic.sales.SalesTaxService.java", "BodyUseAPI": [], "Fixed commit": "665c856b579e8e8f7852b9e6a20eb011dc236be5", "Url": "https://api.github.com/repos/mtedone/vet-clinic", "Date": "2018-04-03T20:39:30Z"},
{"Line": "1090=>1090", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.linkedin.pinot.common.metadata.ZKMetadataProvider.getTableSchema(org.apache.helix.store.zk.ZkHelixPropertyStore<org.apache.helix.ZNRecord>,java.lang.String)=>com.linkedin.pinot.common.metadata.ZKMetadataProvider.getSchema(org.apache.helix.store.zk.ZkHelixPropertyStore<org.apache.helix.ZNRecord>,com.linkedin.pinot.common.config.TableNameBuilder.extractRawTableName(tableNameWithType))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7415/buggy-version/pinot-controller.src.main.java.com.linkedin.pinot.controller.helix.core.PinotHelixResourceManager.java", "BodyUseAPI": [], "Fixed commit": "f6fa39b888d12b0506f3fe1e8e0cd1bcabc5010a", "Url": "https://api.github.com/repos/apache/incubator-pinot", "Date": "2018-05-23T16:43:17Z"},
{"Line": "27=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "service.AdminService.updateAuthorityById(java.lang.String,java.lang.Long)=>entity.Admin.setAid(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/69/buggy-version/com.us.ac.src.main.java.controller.adminRESTController.java", "BodyUseAPI": [], "Fixed commit": "b87438119b6ab3468a67a36566f82422d58c27f9", "Url": "https://api.github.com/repos/TrafalgarRicardoLu/TRLuck", "Date": "2018-04-19T12:54:14Z"},
{"Line": "30=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "dao.adminDao.updateAuthorityById(java.lang.String,java.lang.Long)=>entity.Admin.getAuthority()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/69/buggy-version/com.us.ac.src.main.java.service.AdminService.java", "BodyUseAPI": [], "Fixed commit": "b87438119b6ab3468a67a36566f82422d58c27f9", "Url": "https://api.github.com/repos/TrafalgarRicardoLu/TRLuck", "Date": "2018-04-19T12:54:14Z"},
{"Line": "29=>24", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] updateAuthorityById(java.lang.String,java.lang.Long)=>[public] updateAdminById(java.lang.Long,entity.Admin)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/69/buggy-version/com.us.ac.src.main.java.service.AdminService.java", "BodyUseAPI": [], "Fixed commit": "b87438119b6ab3468a67a36566f82422d58c27f9", "Url": "https://api.github.com/repos/TrafalgarRicardoLu/TRLuck", "Date": "2018-04-19T12:54:14Z"},
{"Line": "801=>801", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map.clone()=>com.github.underscore.lodash.U.clone(java.util.Map)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9195/buggy-version/src.main.java.com.github.underscore.lodash.Xml.java", "BodyUseAPI": [], "Fixed commit": "9d6c848b968166cefcc92e8def22c7cb49ad1bfb", "Url": "https://api.github.com/repos/javadev/underscore-java", "Date": "2018-10-15T02:09:08Z"},
{"Line": "503=>504", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.github.underscore.lodash.Xml.XmlObject.addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step,int,java.lang.String,boolean,boolean,java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder>,java.lang.String,java.lang.String)=>java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder>.add(com.github.underscore.lodash.Xml.XmlStringBuilder)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9195/buggy-version/src.main.java.com.github.underscore.lodash.Xml.java", "BodyUseAPI": [], "Fixed commit": "9d6c848b968166cefcc92e8def22c7cb49ad1bfb", "Url": "https://api.github.com/repos/javadev/underscore-java", "Date": "2018-10-15T02:09:08Z"},
{"Line": "507=>508", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.github.underscore.lodash.Xml.XmlObject.addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step,int,java.lang.String,boolean,boolean,java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder>,java.lang.String,java.lang.String)=>java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder>.add(com.github.underscore.lodash.Xml.XmlStringBuilder)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9195/buggy-version/src.main.java.com.github.underscore.lodash.Xml.java", "BodyUseAPI": [], "Fixed commit": "9d6c848b968166cefcc92e8def22c7cb49ad1bfb", "Url": "https://api.github.com/repos/javadev/underscore-java", "Date": "2018-10-15T02:09:08Z"},
{"Line": "70=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Long.valueOf(java.lang.String)=>java.lang.Long.parseLong(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/184/buggy-version/integration.fuse.src.main.java.alluxio.fuse.AlluxioFuseUtils.java", "BodyUseAPI": [], "Fixed commit": "c174035cee28f0ed949fdf77acc504be4d75a915", "Url": "https://api.github.com/repos/LuQQiu/alluxio", "Date": "2018-10-18T21:02:03Z"},
{"Line": "635=>632", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.apache.cordova.CallbackContext.sendPluginResult(org.apache.cordova.PluginResult)=>org.apache.cordova.CallbackContext.error(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8858/buggy-version/src.android.BLECentralPlugin.java", "BodyUseAPI": [], "Fixed commit": "6d4a7e77922ce5b53eafec84e4b929a3f5ebd62c", "Url": "https://api.github.com/repos/don/cordova-plugin-ble-central", "Date": "2018-06-07T22:30:06Z"},
{"Line": "173=>173", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.tann.dice.gameplay.fightLog.Snapshot.getAliveHeroStates()=>com.tann.dice.gameplay.fightLog.Snapshot.getStates(java.util.List<com.tann.dice.gameplay.entity.Hero>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5309/buggy-version/core.src.com.tann.dice.gameplay.fightLog.Snapshot.java", "BodyUseAPI": [], "Fixed commit": "d96fcd5955f7488662da7be60c065f40fecd8f7f", "Url": "https://api.github.com/repos/ColourTann/Dicegeon", "Date": "2018-09-25T13:00:47Z"},
{"Line": "71=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "auth.inMemoryAuthentication().withUser(user).password(user_password).roles(rol_user).and().withUser(admin).password(admin_password).roles(java.lang.String,java.lang.String)=>auth.inMemoryAuthentication().withUser(user).password(user_password).roles(role_user).and().withUser(admin).password(admin_password).roles(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8859/buggy-version/src.main.java.com.ricoh.orders.config.SecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "d50b1568c78faebbcd1a5cababbf1ba201295ab0", "Url": "https://api.github.com/repos/carlosord/orders-api", "Date": "2018-04-24T08:58:20Z"},
{"Line": "159=>164", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "shippo.sync.tookan.entity.tookan.TookanAgentInfo.setName((((tookanAgentInfo.getFirstName()) + \"\\\\n\") + (tookanAgentInfo.getLastName())))=>shippo.sync.tookan.entity.tookan.TookanAgentInfo.setFirstName(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8824/buggy-version/src.main.java.shippo.sync.tookan.tookanapi.TookanAgentParser.java", "BodyUseAPI": [], "Fixed commit": "6d7f6ffb03e2dc816452e8317d6c7cb56b33c968", "Url": "https://api.github.com/repos/hoalv/tookan-sync-service", "Date": "2018-08-04T08:47:06Z"},
{"Line": "162=>166", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "shippo.sync.tookan.entity.tookan.TookanAgentInfo.setLastName(((tookanAgentInfo.getLastName()) != null ? tookanAgentInfo.getLastName() : \"\"))=>shippo.sync.tookan.entity.tookan.TookanAgentInfo.setName(((firstName + \" \") + (tookanAgentInfo.getLastName())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8824/buggy-version/src.main.java.shippo.sync.tookan.tookanapi.TookanAgentParser.java", "BodyUseAPI": [], "Fixed commit": "6d7f6ffb03e2dc816452e8317d6c7cb56b33c968", "Url": "https://api.github.com/repos/hoalv/tookan-sync-service", "Date": "2018-08-04T08:47:06Z"},
{"Line": "159=>164", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "shippo.sync.tookan.entity.tookan.TookanAgentInfo.getFirstName()=>shippo.sync.tookan.entity.tookan.TookanAgentInfo.setFirstName(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8824/buggy-version/src.main.java.shippo.sync.tookan.tookanapi.TookanAgentParser.java", "BodyUseAPI": [], "Fixed commit": "6d7f6ffb03e2dc816452e8317d6c7cb56b33c968", "Url": "https://api.github.com/repos/hoalv/tookan-sync-service", "Date": "2018-08-04T08:47:06Z"},
{"Line": "160=>165", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "shippo.sync.tookan.entity.tookan.TookanAgentInfo.setFirstName(((tookanAgentInfo.getFirstName()) != null ? tookanAgentInfo.getFirstName() : \"\"))=>shippo.sync.tookan.entity.tookan.TookanAgentInfo.setLastName(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8824/buggy-version/src.main.java.shippo.sync.tookan.tookanapi.TookanAgentParser.java", "BodyUseAPI": [], "Fixed commit": "6d7f6ffb03e2dc816452e8317d6c7cb56b33c968", "Url": "https://api.github.com/repos/hoalv/tookan-sync-service", "Date": "2018-08-04T08:47:06Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.benmu.framework.model.WeexEventBean.setKey(WXConstant.WXEventCenter.EVENT_CAMERA_UPLOADIMAGE)=>com.benmu.framework.model.WeexEventBean.setKey(WXConstant.WXEventCenter.EVENT_IMAGE_PICK)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9545/buggy-version/src.main.java.com.benmu.framework.extend.module.ImageModule.java", "BodyUseAPI": [], "Fixed commit": "ea9b044ff70507ee21cfc7f1802a0539d5fb192f", "Url": "https://api.github.com/repos/bmfe/WeexErosFramework", "Date": "2018-01-05T05:53:05Z"},
{"Line": "406=>407", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "us.ihmc.yoVariables.variable.YoInteger.getIntegerValue()=>us.ihmc.yoVariables.variable.YoDouble.getDoubleValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5618/buggy-version/ihmc-common-walking-control-modules.src.main.java.us.ihmc.commonWalkingControlModules.capturePoint.smoothCMPBasedICPPlanner.ICPGeneration.ReferenceICPTrajectoryGenerator.java", "BodyUseAPI": [], "Fixed commit": "a69c8b5e64d3deff80ea92ddd4f5595a1fe4a62c", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-09-13T15:41:34Z"},
{"Line": "406=>407", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "us.ihmc.yoVariables.variable.YoInteger.getIntegerValue()=>us.ihmc.yoVariables.variable.YoDouble.getDoubleValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5618/buggy-version/ihmc-common-walking-control-modules.src.main.java.us.ihmc.commonWalkingControlModules.capturePoint.smoothCMPBasedICPPlanner.ICPGeneration.ReferenceICPTrajectoryGenerator.java", "BodyUseAPI": [], "Fixed commit": "a69c8b5e64d3deff80ea92ddd4f5595a1fe4a62c", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-09-13T15:41:34Z"},
{"Line": "192=>192", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.greenrobot.eventbus.EventBus.getDefault().postSticky(com.harlie.leehounshell.gitchallenge.view.BrowseUsersRepositorysActivity.GitUserTwoResultsEvent)=>org.greenrobot.eventbus.EventBus.getDefault().post(com.harlie.leehounshell.gitchallenge.view.BrowseUsersRepositorysActivity.GitUserTwoResultsEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7999/buggy-version/app.src.main.java.com.harlie.leehounshell.gitchallenge.view.BrowseUsersRepositorysActivity.java", "BodyUseAPI": [], "Fixed commit": "0606610ba6c7c83cb9f6349143c04eca5af209fe", "Url": "https://api.github.com/repos/LeeHounshell/GitChallenge", "Date": "2018-04-18T07:28:30Z"},
{"Line": "187=>187", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.greenrobot.eventbus.EventBus.getDefault().postSticky(com.harlie.leehounshell.gitchallenge.view.BrowseUsersRepositorysActivity.GitUserOneResultsEvent)=>org.greenrobot.eventbus.EventBus.getDefault().post(com.harlie.leehounshell.gitchallenge.view.BrowseUsersRepositorysActivity.GitUserOneResultsEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7999/buggy-version/app.src.main.java.com.harlie.leehounshell.gitchallenge.view.BrowseUsersRepositorysActivity.java", "BodyUseAPI": [], "Fixed commit": "0606610ba6c7c83cb9f6349143c04eca5af209fe", "Url": "https://api.github.com/repos/LeeHounshell/GitChallenge", "Date": "2018-04-18T07:28:30Z"},
{"Line": "166=>167", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.palantir.atlasdb.keyvalue.cassandra.RetryableCassandraRequest<?, K>.getNumberOfAttempts()=>com.palantir.atlasdb.keyvalue.cassandra.RetryableCassandraRequest<?, K>.getNumberOfAttemptsOnHost(java.net.InetSocketAddress)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/751/buggy-version/atlasdb-cassandra.src.main.java.com.palantir.atlasdb.keyvalue.cassandra.CassandraRequestExceptionHandler.java", "BodyUseAPI": [], "Fixed commit": "8a5dc1fe7f8afe4143fa492e7c2b299e071c773b", "Url": "https://api.github.com/repos/palantir/atlasdb", "Date": "2018-06-28T09:29:00Z"},
{"Line": "149=>150", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.palantir.logsafe.SafeArg.of(java.lang.String,long)=>com.palantir.logsafe.SafeArg.of(java.lang.String,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/751/buggy-version/atlasdb-cassandra.src.main.java.com.palantir.atlasdb.keyvalue.cassandra.CassandraRequestExceptionHandler.java", "BodyUseAPI": [], "Fixed commit": "8a5dc1fe7f8afe4143fa492e7c2b299e071c773b", "Url": "https://api.github.com/repos/palantir/atlasdb", "Date": "2018-06-28T09:29:00Z"},
{"Line": "153=>154", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.palantir.atlasdb.keyvalue.cassandra.CassandraRequestExceptionHandler.RequestExceptionHandlerStrategy.getBackoffPeriod(req.getNumberOfAttempts())=>java.lang.Thread.sleep(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/751/buggy-version/atlasdb-cassandra.src.main.java.com.palantir.atlasdb.keyvalue.cassandra.CassandraRequestExceptionHandler.java", "BodyUseAPI": [], "Fixed commit": "8a5dc1fe7f8afe4143fa492e7c2b299e071c773b", "Url": "https://api.github.com/repos/palantir/atlasdb", "Date": "2018-06-28T09:29:00Z"},
{"Line": "27=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println((\"[!]-Failed to connect to socket at port \" + (listenPort)))=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7671/buggy-version/chat.Instruct.java", "BodyUseAPI": [], "Fixed commit": "f70b9fe504ea1a71d6c52c5ae182f6bae091a394", "Url": "https://api.github.com/repos/arstevens/EncryptedMessagingService", "Date": "2018-04-22T01:01:05Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.net.ftp.FTPClient.storeFile(java.lang.String,java.io.FileInputStream)=>java.io.File.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4755/buggy-version/src.main.java.com.mmall.util.FTPUtil.java", "BodyUseAPI": [], "Fixed commit": "69afd6a45a1682adc386ad06116bacdea217f28f", "Url": "https://api.github.com/repos/conlove/mmall_learning", "Date": "2018-06-13T05:02:35Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Palindrome.equalChars(char,char)=>CharacterComparator.equalChars(char,char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3754/buggy-version/skeleton-sp17-master.proj1b.Palindrome.java", "BodyUseAPI": [], "Fixed commit": "c5fba9c338a9edf3e885a8465be2e0005dac300d", "Url": "https://api.github.com/repos/RealCR1/CS61B-SP17", "Date": "2018-03-16T07:25:49Z"},
{"Line": "53=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.LayoutInflater.from(parent.getContext()).inflate(R.layout.recyclerview,android.view.ViewGroup,boolean)=>android.view.LayoutInflater.from(parent.getContext()).inflate(R.layout.recyclerview,<nulltype>,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9077/buggy-version/davinci.src.main.java.com.example.davinci.adapter.PictureListAdapter.java", "BodyUseAPI": [], "Fixed commit": "2b2f7f9b7694637444baf12030824f4d71428cce", "Url": "https://api.github.com/repos/HongZeBin98/DaVinci_gralley", "Date": "2018-08-01T08:17:51Z"},
{"Line": "42=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.eclipse.smarthome.core.thing.link.ItemThingLink.getUID()=>org.eclipse.smarthome.core.thing.link.ItemThingLink.getLinkedUID()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1040/buggy-version/bundles.core.org.eclipse.smarthome.core.thing.src.main.java.org.eclipse.smarthome.core.thing.link.ItemThingLinkRegistry.java", "BodyUseAPI": [], "Fixed commit": "8acfcef9cef0a6b90b40e20de8711a3c501379dd", "Url": "https://api.github.com/repos/qivicon/smarthome", "Date": "2017-07-13T06:41:37Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.pipeline.RuleManager.determineChannel()=>com.example.pipeline.ChannelSelector.determineChannel(com.example.pipeline.CommunicationRequest)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3382/buggy-version/src.main.java.com.example.pipeline.CheckOut.java", "BodyUseAPI": [], "Fixed commit": "5aa227445c80b5093d907477c76e8d5a8abfd10e", "Url": "https://api.github.com/repos/sundarmr/mypipeline", "Date": "2018-05-01T18:21:25Z"},
{"Line": "463=>585", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.catrobat.catroid.content.ActionFactory.createSetLookEventAction(com.badlogic.gdx.scenes.scene2d.Action,int)=>org.catrobat.catroid.content.ActionFactory.createSetLookEventAction(com.badlogic.gdx.scenes.scene2d.Action,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5931/buggy-version/catroid.src.main.java.org.catrobat.catroid.content.ActionFactory.java", "BodyUseAPI": [], "Fixed commit": "b3ac32044f4d4211693d66aca4a177bd201af409", "Url": "https://api.github.com/repos/gPathpp/Catroid", "Date": "2018-10-03T13:18:47Z"},
{"Line": "506=>628", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.catrobat.catroid.content.ActionFactory.createSetBackgroundLookEventAction(com.badlogic.gdx.scenes.scene2d.Action,int)=>org.catrobat.catroid.content.ActionFactory.createSetBackgroundLookEventAction(com.badlogic.gdx.scenes.scene2d.Action,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5931/buggy-version/catroid.src.main.java.org.catrobat.catroid.content.ActionFactory.java", "BodyUseAPI": [], "Fixed commit": "b3ac32044f4d4211693d66aca4a177bd201af409", "Url": "https://api.github.com/repos/gPathpp/Catroid", "Date": "2018-10-03T13:18:47Z"},
{"Line": "495=>617", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.catrobat.catroid.content.ActionFactory.createSetLookEventAction(com.badlogic.gdx.scenes.scene2d.Action,int)=>org.catrobat.catroid.content.ActionFactory.createSetLookEventAction(com.badlogic.gdx.scenes.scene2d.Action,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5931/buggy-version/catroid.src.main.java.org.catrobat.catroid.content.ActionFactory.java", "BodyUseAPI": [], "Fixed commit": "b3ac32044f4d4211693d66aca4a177bd201af409", "Url": "https://api.github.com/repos/gPathpp/Catroid", "Date": "2018-10-03T13:18:47Z"},
{"Line": "250=>255", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.util.Log.d(java.lang.String,java.lang.String)=>android.support.design.widget.Snackbar.make(findViewById(R.id.activity_spell_details_container),java.lang.String,Snackbar.LENGTH_LONG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9708/buggy-version/app.src.main.java.com.example.cliff.spellbookmanagerv2.SpellDetailsActivity.java", "BodyUseAPI": [], "Fixed commit": "41cf0e7e9c2797f9a7e79c02d358375d0ed4014f", "Url": "https://api.github.com/repos/callderige/SpellbookManagerV2", "Date": "2018-08-14T21:44:05Z"},
{"Line": "398=>398", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "io.ipfs.api.MerkleNode.toString()=>addResult.hash.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2049/buggy-version/leshan-server-cluster-ipfs.src.main.java.org.eclipse.leshan.server.cluster.IPFSRegistrationStore.java", "BodyUseAPI": [], "Fixed commit": "cd42127a3046a6ed7f101b09d5860950887dac9a", "Url": "https://api.github.com/repos/AnyLedger/leshan", "Date": "2018-06-10T09:48:05Z"},
{"Line": "23=>23", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.utiljar.model.AreaMasterDto.getTenantId()=>com.mgb.cable.utils.CustomUtils.getTenantId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1629/buggy-version/src.main.java.com.mgb.cable.services.AreaService.java", "BodyUseAPI": [], "Fixed commit": "1b42d9a2d8222da893175f75b0b5bb1ee5dbc64d", "Url": "https://api.github.com/repos/MouneshBadiger/CableService", "Date": "2018-10-12T19:38:03Z"},
{"Line": "121=>132", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.run(java.lang.String)=>org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.run(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "100=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getAction(java.lang.Class)=>hudson.model.Run.getAction(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "203=>214", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getFullDisplayName()=>hudson.model.Run.getFullDisplayName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "183=>194", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getFullDisplayName()=>hudson.model.Run.getFullDisplayName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "194=>205", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getParent()=>hudson.model.Run.getParent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "215=>226", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getExternalizableId()=>hudson.model.Run.getExternalizableId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "201=>212", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getAction(java.lang.Class)=>hudson.model.Run.getAction(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "103=>114", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.isBuilding()=>hudson.model.Run.isBuilding()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "193=>204", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getParent()=>hudson.model.Run.getParent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "197=>208", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.isBuilding()=>hudson.model.Run.isBuilding()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "104=>115", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.hasPermission(Item.BUILD)=>hudson.model.Run.hasPermission(Item.BUILD)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "105=>116", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getParent()=>hudson.model.Run.getParent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "198=>209", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getFullDisplayName()=>hudson.model.Run.getFullDisplayName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "217=>228", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getParent()=>hudson.model.Run.getParent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "207=>218", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getFullDisplayName()=>hudson.model.Run.getFullDisplayName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "193=>204", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.hasPermission(Item.BUILD)=>hudson.model.Run.hasPermission(Item.BUILD)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "212=>223", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getFullDisplayName()=>hudson.model.Run.getFullDisplayName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "158=>169", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getAction(java.lang.Class)=>hudson.model.Run.getAction(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "145=>156", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.run(java.lang.String)=>org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.run(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "217=>228", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<org.jenkinsci.plugins.pipeline.modeldefinition.actions.Action>.toArray(org.jenkinsci.plugins.pipeline.modeldefinition.actions.Action[])=>java.util.List<hudson.model.Action>.toArray(hudson.model.Action[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "216=>227", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<org.jenkinsci.plugins.pipeline.modeldefinition.actions.Action>.add(org.jenkinsci.plugins.pipeline.modeldefinition.actions.CauseAction)=>java.util.List<hudson.model.Action>.add(hudson.model.CauseAction)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "174=>185", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jenkinsci.plugins.pipeline.modeldefinition.actions.Run.getUrl()=>hudson.model.Run.getUrl()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7752/buggy-version/pipeline-model-definition.src.main.java.org.jenkinsci.plugins.pipeline.modeldefinition.actions.RestartDeclarativePipelineAction.java", "BodyUseAPI": [], "Fixed commit": "8595e29ef2492b345c7adfce7d8a46399c4a0493", "Url": "https://api.github.com/repos/jenkinsci/pipeline-model-definition-plugin", "Date": "2018-09-25T22:46:25Z"},
{"Line": "82=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new org.ict4h.atomfeed.server.service.Event(java.util.UUID.randomUUID().toString(), org.openmrs.module.bedmanagement.atomfeed.BedAssignmentAdvice.TITLE, org.joda.time.DateTime.now(), ((java.net.URI) (null)), contents, org.openmrs.module.bedmanagement.atomfeed.BedAssignmentAdvice.CATEGORY)=>new org.ict4h.atomfeed.server.service.Event(java.util.UUID.randomUUID().toString(), org.openmrs.module.bedmanagement.atomfeed.BedAssignmentAdvice.TITLE, null, uri, uri, org.openmrs.module.bedmanagement.atomfeed.BedAssignmentAdvice.CATEGORY)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8648/buggy-version/api.src.main.java.org.openmrs.module.bedmanagement.atomfeed.BedAssignmentAdvice.java", "BodyUseAPI": [], "Fixed commit": "c7cd4c243a389e45d9f1ca72caaccf65d68c161c", "Url": "https://api.github.com/repos/sanishmaharjan/openmrs-module-bedmanagement", "Date": "2018-03-05T08:36:38Z"},
{"Line": "135=>135", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.badlogic.gdx.graphics.g2d.Sprite.equals(com.badlogic.gdx.graphics.g2d.Sprite)=>com.packetpub.libgdx.canyonbunny.game.objects.AbstractGameObject.equals(com.badlogic.gdx.graphics.g2d.Sprite)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2156/buggy-version/core.src.com.packetpub.libgdx.canyonbunny.util.CameraHelper.java", "BodyUseAPI": [], "Fixed commit": "3e780f5b0ee337ba31ca7458074b2ca478f8fd2a", "Url": "https://api.github.com/repos/gw3003/CSC361_F18_G6", "Date": "2018-09-17T16:13:34Z"},
{"Line": "135=>135", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.packetpub.libgdx.canyonbunny.util.CameraHelper.hasTarget()=>com.packetpub.libgdx.canyonbunny.util.CameraHelper.hasTarget()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2156/buggy-version/core.src.com.packetpub.libgdx.canyonbunny.util.CameraHelper.java", "BodyUseAPI": [], "Fixed commit": "3e780f5b0ee337ba31ca7458074b2ca478f8fd2a", "Url": "https://api.github.com/repos/gw3003/CSC361_F18_G6", "Date": "2018-09-17T16:13:34Z"},
{"Line": "39=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.packetpub.libgdx.canyonbunny.util.CameraHelper.hasTarget()=>com.packetpub.libgdx.canyonbunny.util.CameraHelper.hasTarget()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2156/buggy-version/core.src.com.packetpub.libgdx.canyonbunny.util.CameraHelper.java", "BodyUseAPI": [], "Fixed commit": "3e780f5b0ee337ba31ca7458074b2ca478f8fd2a", "Url": "https://api.github.com/repos/gw3003/CSC361_F18_G6", "Date": "2018-09-17T16:13:34Z"},
{"Line": "228=>228", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.annotation.Annotation.getClass()=>java.lang.annotation.Annotation.annotationType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5301/buggy-version/src.main.java.spoon.support.visitor.java.JavaReflectionTreeBuilder.java", "BodyUseAPI": [], "Fixed commit": "ec58744b4ba6f7ffc298f7f92a14d8fa469dcc6d", "Url": "https://api.github.com/repos/pvojtechovsky/spoon", "Date": "2018-03-23T19:04:18Z"},
{"Line": "27=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Exception(java.lang.Throwable)=>spoon.SpoonException(java.lang.Throwable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5301/buggy-version/src.main.java.spoon.reflect.path.CtPathException.java", "BodyUseAPI": [], "Fixed commit": "ec58744b4ba6f7ffc298f7f92a14d8fa469dcc6d", "Url": "https://api.github.com/repos/pvojtechovsky/spoon", "Date": "2018-03-23T19:04:18Z"},
{"Line": "31=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Exception(java.lang.String)=>spoon.SpoonException(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5301/buggy-version/src.main.java.spoon.reflect.path.CtPathException.java", "BodyUseAPI": [], "Fixed commit": "ec58744b4ba6f7ffc298f7f92a14d8fa469dcc6d", "Url": "https://api.github.com/repos/pvojtechovsky/spoon", "Date": "2018-03-23T19:04:18Z"},
{"Line": "62=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.support.constraint.ConstraintLayout.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5801/buggy-version/app.src.main.java.dev.eyesless.simple_weather_for_fishermans.fragments.OnboardingFragment.java", "BodyUseAPI": [], "Fixed commit": "09027fb0c57cbca2b0c3f435c2b8f88582cf812c", "Url": "https://api.github.com/repos/kalininaleksandrv/simple_weather_for_fishermans", "Date": "2018-03-10T14:22:43Z"},
{"Line": "61=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.ok_with_onboarding)=>android.view.View.findViewById(R.id.constraint_onboarding)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5801/buggy-version/app.src.main.java.dev.eyesless.simple_weather_for_fishermans.fragments.OnboardingFragment.java", "BodyUseAPI": [], "Fixed commit": "09027fb0c57cbca2b0c3f435c2b8f88582cf812c", "Url": "https://api.github.com/repos/kalininaleksandrv/simple_weather_for_fishermans", "Date": "2018-03-10T14:22:43Z"},
{"Line": "62=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.support.constraint.ConstraintLayout.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5801/buggy-version/app.src.main.java.dev.eyesless.simple_weather_for_fishermans.fragments.OnboardingFragment.java", "BodyUseAPI": [], "Fixed commit": "09027fb0c57cbca2b0c3f435c2b8f88582cf812c", "Url": "https://api.github.com/repos/kalininaleksandrv/simple_weather_for_fishermans", "Date": "2018-03-10T14:22:43Z"},
{"Line": "2313=>2313", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "map.Map.respawnPlayer()=>java.lang.Character.respawn()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2065/buggy-version/core.src.map.Map.java", "BodyUseAPI": [], "Fixed commit": "2f15846eee2b72731b8d777a8fbdd9984c1903db", "Url": "https://api.github.com/repos/CuseCose/Aeronef", "Date": "2018-07-10T18:39:17Z"},
{"Line": "98=>97", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "x.getUuid().equals(java.lang.String)=>x.getUuid().equals(java.util.UUID)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9772/buggy-version/src.com.company.PracownikProcessing.java", "BodyUseAPI": [], "Fixed commit": "20ad61318fb133fddbefabe61313a638672f4d62", "Url": "https://api.github.com/repos/normas87/HR", "Date": "2018-08-29T17:50:34Z"},
{"Line": "102=>102", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.List<com.company.Pracownicy>.remove(java.lang.String)=>java.util.List<com.company.Pracownicy>.remove(com.company.Pracownicy)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9772/buggy-version/src.com.company.PracownikProcessing.java", "BodyUseAPI": [], "Fixed commit": "20ad61318fb133fddbefabe61313a638672f4d62", "Url": "https://api.github.com/repos/normas87/HR", "Date": "2018-08-29T17:50:34Z"},
{"Line": "278=>278", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "de.caluga.morphium.Morphium.reread(de.caluga.morphium.messaging.Msg)=>de.caluga.morphium.Morphium.reread(de.caluga.morphium.messaging.Msg,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8553/buggy-version/src.de.caluga.morphium.messaging.Messaging.java", "BodyUseAPI": [], "Fixed commit": "91528ff1e93368cfe3effe29dc8e4840a346d685", "Url": "https://api.github.com/repos/sboesebeck/morphium", "Date": "2018-05-24T11:25:59Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setBackgroundDrawable(android.graphics.drawable.GradientDrawable)=>android.widget.LinearLayout.setBackgroundDrawable(android.graphics.drawable.GradientDrawable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3779/buggy-version/app.src.main.java.com.fitdeveloper.ctsfoot.Adapters.NewsList.RecyclerAdapterNews.java", "BodyUseAPI": [], "Fixed commit": "3d26e20a4664151fce2ef91645273c944d4dca7f", "Url": "https://api.github.com/repos/mbouaziz00/CTS", "Date": "2018-09-01T14:40:52Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setBackgroundDrawable(android.graphics.drawable.GradientDrawable)=>android.widget.LinearLayout.setBackgroundDrawable(android.graphics.drawable.GradientDrawable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3779/buggy-version/app.src.main.java.com.fitdeveloper.ctsfoot.Adapters.NewsList.RecyclerAdapterNews.java", "BodyUseAPI": [], "Fixed commit": "3d26e20a4664151fce2ef91645273c944d4dca7f", "Url": "https://api.github.com/repos/mbouaziz00/CTS", "Date": "2018-09-01T14:40:52Z"},
{"Line": "339=>339", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.concurrent.ConcurrentHashMap<java.lang.String, java.util.List<java.lang.String>>.putAll(fetcher.getMapping())=>java.util.Map<java.lang.String, java.util.List<java.lang.String>>.putAll(fetcher.getMapping())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8412/buggy-version/nuxeo-template-rendering-core.src.main.java.org.nuxeo.template.service.TemplateProcessorComponent.java", "BodyUseAPI": [], "Fixed commit": "d89524c6d770cd92d62525db04e7aa63ef4560cf", "Url": "https://api.github.com/repos/nuxeo/nuxeo-template-rendering", "Date": "2018-01-04T14:34:43Z"},
{"Line": "188=>184", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jboss.seam.faces.FacesMessages.add(StatusMessage.Severity.ERROR,resourcesAccessor.getMessages().get(\"label.template.err.renderingFailed\"))=>org.nuxeo.template.jsf.TemplateBasedActionBean.add(StatusMessage.Severity.ERROR,resourcesAccessor.getMessages().get(\"label.template.err.renderingFailed\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8412/buggy-version/nuxeo-template-rendering-jsf.src.main.java.org.nuxeo.template.jsf.TemplateBasedActionBean.java", "BodyUseAPI": [], "Fixed commit": "d89524c6d770cd92d62525db04e7aa63ef4560cf", "Url": "https://api.github.com/repos/nuxeo/nuxeo-template-rendering", "Date": "2018-01-04T14:34:43Z"},
{"Line": "270=>266", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jboss.seam.faces.FacesMessages.add(StatusMessage.Severity.ERROR,resourcesAccessor.getMessages().get(\"label.template.err.associationFailed\"),sourceTemplate.getName())=>org.nuxeo.template.jsf.TemplateBasedActionBean.add(StatusMessage.Severity.ERROR,resourcesAccessor.getMessages().get(\"label.template.err.associationFailed\"),sourceTemplate.getName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8412/buggy-version/nuxeo-template-rendering-jsf.src.main.java.org.nuxeo.template.jsf.TemplateBasedActionBean.java", "BodyUseAPI": [], "Fixed commit": "d89524c6d770cd92d62525db04e7aa63ef4560cf", "Url": "https://api.github.com/repos/nuxeo/nuxeo-template-rendering", "Date": "2018-01-04T14:34:43Z"},
{"Line": "91=>87", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jboss.seam.faces.FacesMessages.add(StatusMessage.Severity.ERROR,resourcesAccessor.getMessages().get(\"label.template.err.parameterInit\"))=>org.nuxeo.template.jsf.TemplateBasedActionBean.add(StatusMessage.Severity.ERROR,resourcesAccessor.getMessages().get(\"label.template.err.parameterInit\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8412/buggy-version/nuxeo-template-rendering-jsf.src.main.java.org.nuxeo.template.jsf.TemplateBasedActionBean.java", "BodyUseAPI": [], "Fixed commit": "d89524c6d770cd92d62525db04e7aa63ef4560cf", "Url": "https://api.github.com/repos/nuxeo/nuxeo-template-rendering", "Date": "2018-01-04T14:34:43Z"},
{"Line": "329=>334", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ru.kolaer.server.webportal.mvc.model.servirces.AbstractDefaultService<ru.kolaer.api.mvp.model.kolaerweb.kolpass.PasswordRepositoryDto, ru.kolaer.server.webportal.mvc.model.entities.kolpass.PasswordRepositoryEntity, ru.kolaer.server.webportal.mvc.model.dao.PasswordRepositoryDao, ru.kolaer.server.webportal.mvc.model.converter.PasswordRepositoryConverter>.update(ru.kolaer.api.mvp.model.kolaerweb.kolpass.PasswordRepositoryDto)=>ru.kolaer.server.webportal.mvc.model.servirces.impl.PasswordRepositoryServiceImpl.update(ru.kolaer.server.webportal.mvc.model.entities.kolpass.PasswordRepositoryEntity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9350/buggy-version/server.webportal.src.main.java.ru.kolaer.server.webportal.mvc.model.servirces.impl.PasswordRepositoryServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "1268691ddf3da43e525f191136d0c2f919ae493d", "Url": "https://api.github.com/repos/danilovEY/Kolaer-systems", "Date": "2018-06-07T08:55:01Z"},
{"Line": "329=>334", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ru.kolaer.server.webportal.mvc.model.servirces.AbstractDefaultService<ru.kolaer.api.mvp.model.kolaerweb.kolpass.PasswordRepositoryDto, ru.kolaer.server.webportal.mvc.model.entities.kolpass.PasswordRepositoryEntity, ru.kolaer.server.webportal.mvc.model.dao.PasswordRepositoryDao, ru.kolaer.server.webportal.mvc.model.converter.PasswordRepositoryConverter>.update(ru.kolaer.api.mvp.model.kolaerweb.kolpass.PasswordRepositoryDto)=>ru.kolaer.server.webportal.mvc.model.servirces.impl.PasswordRepositoryServiceImpl.convertToDto(defaultEntityDao.update(passwordRepositoryEntity))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9350/buggy-version/server.webportal.src.main.java.ru.kolaer.server.webportal.mvc.model.servirces.impl.PasswordRepositoryServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "1268691ddf3da43e525f191136d0c2f919ae493d", "Url": "https://api.github.com/repos/danilovEY/Kolaer-systems", "Date": "2018-06-07T08:55:01Z"},
{"Line": "530=>530", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.security.auth.x500.X500Principal.toString()=>org.jscep.util.X500Utils.toX500Name(javax.security.auth.x500.X500Principal)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5473/buggy-version/src.main.java.org.jscep.client.Client.java", "BodyUseAPI": [], "Fixed commit": "645acde1a8dd02a5685753fe496ec8215af1cbfa", "Url": "https://api.github.com/repos/jscep/jscep", "Date": "2018-04-19T11:16:08Z"},
{"Line": "74=>81", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "akka.routing.FromConfig.getInstance().props(akka.actor.Props.create(actor).withDispatcher(dispatcher))=>akka.routing.FromConfig.getInstance().props(akka.actor.Props)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2852/buggy-version/actors.core.src.main.java.org.sunbird.actor.core.BaseRouter.java", "BodyUseAPI": [], "Fixed commit": "c599277216b64851b1cba651cca88e118c1fbec0", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-06-07T20:31:43Z"},
{"Line": "19=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.servlet.http.HttpServletResponse.getWriter()=>javax.servlet.http.HttpServletRequest.setAttribute(java.lang.String,workshop_3.model.Solution[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8961/buggy-version/src.workshop_3.controller.SolutionsAdminPanel.java", "BodyUseAPI": [], "Fixed commit": "162f82c3bd198bb5bc16de11ab456936d1dc97f3", "Url": "https://api.github.com/repos/pjm77/Workshop_3", "Date": "2018-03-28T20:37:07Z"},
{"Line": "19=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "response.getWriter().append(java.lang.String)=>javax.servlet.http.HttpServletRequest.setAttribute(java.lang.String,workshop_3.model.Solution[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8961/buggy-version/src.workshop_3.controller.SolutionsAdminPanel.java", "BodyUseAPI": [], "Fixed commit": "162f82c3bd198bb5bc16de11ab456936d1dc97f3", "Url": "https://api.github.com/repos/pjm77/Workshop_3", "Date": "2018-03-28T20:37:07Z"},
{"Line": "19=>25", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "response.getWriter().append(\"Manage solutions: \").append(request.getContextPath())=>javax.servlet.http.HttpServletRequest.setAttribute(java.lang.String,workshop_3.model.Solution[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8961/buggy-version/src.workshop_3.controller.SolutionsAdminPanel.java", "BodyUseAPI": [], "Fixed commit": "162f82c3bd198bb5bc16de11ab456936d1dc97f3", "Url": "https://api.github.com/repos/pjm77/Workshop_3", "Date": "2018-03-28T20:37:07Z"},
{"Line": "95=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Arraylist<java.lang.String>.get(int)=>java.util.ArrayList<java.lang.String>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6664/buggy-version/Department.java", "BodyUseAPI": [], "Fixed commit": "f713ee1d5cb5c403fd5088fe186b021f879e4b35", "Url": "https://api.github.com/repos/fionaxc/WiFi-finalproject", "Date": "2018-01-12T07:01:38Z"},
{"Line": "76=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "this.writers.add(Department)=>this.writers.add(Writer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6664/buggy-version/Department.java", "BodyUseAPI": [], "Fixed commit": "f713ee1d5cb5c403fd5088fe186b021f879e4b35", "Url": "https://api.github.com/repos/fionaxc/WiFi-finalproject", "Date": "2018-01-12T07:01:38Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.ArrayList<Editor>.add(Department)=>java.util.ArrayList<Editor>.add(Editor)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6664/buggy-version/Department.java", "BodyUseAPI": [], "Fixed commit": "f713ee1d5cb5c403fd5088fe186b021f879e4b35", "Url": "https://api.github.com/repos/fionaxc/WiFi-finalproject", "Date": "2018-01-12T07:01:38Z"},
{"Line": "91=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Arraylist<java.lang.String>.add(java.lang.String)=>java.util.ArrayList<java.lang.String>.add(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6664/buggy-version/Department.java", "BodyUseAPI": [], "Fixed commit": "f713ee1d5cb5c403fd5088fe186b021f879e4b35", "Url": "https://api.github.com/repos/fionaxc/WiFi-finalproject", "Date": "2018-01-12T07:01:38Z"},
{"Line": "94=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Arraylist<java.lang.String>.size()=>java.util.ArrayList<java.lang.String>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6664/buggy-version/Department.java", "BodyUseAPI": [], "Fixed commit": "f713ee1d5cb5c403fd5088fe186b021f879e4b35", "Url": "https://api.github.com/repos/fionaxc/WiFi-finalproject", "Date": "2018-01-12T07:01:38Z"},
{"Line": "38=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Editor.getName()=>Editor.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6664/buggy-version/Editor.java", "BodyUseAPI": [], "Fixed commit": "f713ee1d5cb5c403fd5088fe186b021f879e4b35", "Url": "https://api.github.com/repos/fionaxc/WiFi-finalproject", "Date": "2018-01-12T07:01:38Z"},
{"Line": "34=>34", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.columbia.rdf.matcalc.MainMatCalc.main(edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.NewDendrogramInfo,edu.columbia.rdf.matcalc.BasicModuleLoader)=>edu.columbia.rdf.matcalc.MainMatCalc.main(edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.NewDendrogramInfo,edu.columbia.rdf.matcalc.ModuleLoader)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8160/buggy-version/edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.MainNewDendrogram.java", "BodyUseAPI": [], "Fixed commit": "60d6103b0059562e4c7576f4c8cc07d1a37643d9", "Url": "https://api.github.com/repos/antonybholmes/matcalc-newdendrogram", "Date": "2018-05-03T13:57:32Z"},
{"Line": "190=>190", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.animation.AnimationUtils.loadAnimation(com.polimi.dilapp.levels.view.ActivityTwoOne,R.anim.bounce)=>android.view.animation.AnimationUtils.loadAnimation(com.polimi.dilapp.levels.view.ActivityTwoOne,R.anim.bounce_fast)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5621/buggy-version/app.src.main.java.com.polimi.dilapp.levels.view.ActivityTwoOne.java", "BodyUseAPI": [], "Fixed commit": "e520ed010443bf94a73d3c7e48698180e6a89d72", "Url": "https://api.github.com/repos/MarziaDegiorgi/DILapp", "Date": "2018-06-27T18:16:28Z"},
{"Line": "236=>236", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.animation.AnimationUtils.loadAnimation(com.polimi.dilapp.levels.view.ActivityTwoThree,R.anim.bounce)=>android.view.animation.AnimationUtils.loadAnimation(com.polimi.dilapp.levels.view.ActivityTwoThree,R.anim.bounce_fast)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5621/buggy-version/app.src.main.java.com.polimi.dilapp.levels.view.ActivityTwoThree.java", "BodyUseAPI": [], "Fixed commit": "e520ed010443bf94a73d3c7e48698180e6a89d72", "Url": "https://api.github.com/repos/MarziaDegiorgi/DILapp", "Date": "2018-06-27T18:16:28Z"},
{"Line": "258=>260", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "my.edu.tarc.communechat_v2.internal.MqttHelper.unsubscribe(java.lang.String)=>my.edu.tarc.communechat_v2.LoginActivity.AuthenticationTask.resetConnection()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7359/buggy-version/app.src.main.java.my.edu.tarc.communechat_v2.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "842fa27a932837ee0ab3bed713255051a58a4b04", "Url": "https://api.github.com/repos/LimFangChun/ccs_v2", "Date": "2018-09-30T06:31:00Z"},
{"Line": "121=>122", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "my.edu.tarc.communechat_v2.internal.MqttHelper.unsubscribe(java.lang.String)=>1.resetConnection()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7359/buggy-version/app.src.main.java.my.edu.tarc.communechat_v2.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "842fa27a932837ee0ab3bed713255051a58a4b04", "Url": "https://api.github.com/repos/LimFangChun/ccs_v2", "Date": "2018-09-30T06:31:00Z"},
{"Line": "127=>130", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.xptschool.parent.ui.watch.ChatDetailActivity.initRecyclerView(android.support.v7.widget.RecyclerView,android.support.v4.widget.SwipeRefreshLayout)=>android.support.v7.widget.RecyclerView.setLayoutManager(com.xptschool.parent.adapter.WrapContentLinearLayoutManager)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5639/buggy-version/anfang.src.main.java.com.xptschool.parent.ui.watch.ChatDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "bfd3a568c2589451cd57751fecb18d5ad14ad2a4", "Url": "https://api.github.com/repos/kongdexing/AnFang", "Date": "2018-04-28T09:02:25Z"},
{"Line": "520=>519", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.xptschool.parent.model.GreenDaoHelper.writeDaoSession.getBeanWChatDao().insertOrReplace(com.xptschool.parent.model.BeanWChat)=>com.xptschool.parent.model.GreenDaoHelper.writeDaoSession.getBeanWChatDao().insert(com.xptschool.parent.model.BeanWChat)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5639/buggy-version/anfang.src.main.java.com.xptschool.parent.model.GreenDaoHelper.java", "BodyUseAPI": [], "Fixed commit": "bfd3a568c2589451cd57751fecb18d5ad14ad2a4", "Url": "https://api.github.com/repos/kongdexing/AnFang", "Date": "2018-04-28T09:02:25Z"},
{"Line": "95=>102", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.liulishuo.filedownloader.FileDownloader.getImpl().create(chat.getFileName())=>com.liulishuo.filedownloader.FileDownloader.getImpl().create(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5639/buggy-version/anfang.src.main.java.com.xptschool.parent.ui.watch.chat.WatchAdapterDelegate.java", "BodyUseAPI": [], "Fixed commit": "bfd3a568c2589451cd57751fecb18d5ad14ad2a4", "Url": "https://api.github.com/repos/kongdexing/AnFang", "Date": "2018-04-28T09:02:25Z"},
{"Line": "95=>102", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.liulishuo.filedownloader.FileDownloader.getImpl().create(chat.getFileName()).setListener(new com.liulishuo.filedownloader.FileDownloadListener() { @java.lang.Override protected boolean isInvalid() { return super.isInvalid(); } @java.lang.Override protected void pending(final com.liulishuo.filedownloader.BaseDownloadTask task, final int soFarBytes, final int totalBytes) { } @java.lang.Override protected void connected(com.liulishuo.filedownloader.BaseDownloadTask task, java.lang.String etag, boolean isContinue, int soFarBytes, int totalBytes) { super.connected(task, etag, isContinue, soFarBytes, totalBytes); viewHolder.id_recorder_time.setText(\"\u6b63\u5728\u4e0b\u8f7d...\"); } @java.lang.Override protected void progress(final com.liulishuo.filedownloader.BaseDownloadTask task, final int soFarBytes, final int totalBytes) { } @java.lang.Override protected void blockComplete(final com.liulishuo.filedownloader.BaseDownloadTask task) { } @java.lang.Override protected void retry(com.liulishuo.filedownloader.BaseDownloadTask task, java.lang.Throwable ex, int retryingTimes, int soFarBytes) { super.retry(task, ex, retryingTimes, soFarBytes); } @java.lang.Override protected void completed(com.liulishuo.filedownloader.BaseDownloadTask task) { viewHolder.id_recorder_time.setVisibility(View.GONE); final java.lang.String voicePath = task.getPath(); viewHolder.rlVoice.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { if ((viewHolder.img_recorder_anim) != null) { viewHolder.img_recorder_anim.setBackgroundResource(R.drawable.adj_right); } com.xptschool.parent.ui.watch.chat.SoundPlayHelper.getInstance().stopPlay(); viewHolder.img_recorder_anim.setBackgroundResource(R.drawable.play_anim_right); android.graphics.drawable.AnimationDrawable animation = ((android.graphics.drawable.AnimationDrawable) (viewHolder.img_recorder_anim.getBackground())); animation.start(); android.util.Log.i(com.xptschool.parent.ui.watch.chat.TAG, (\"onClick: teacher playSound \" + voicePath)); com.android.widget.audiorecorder.MediaPlayerManager.playSound(voicePath, new android.media.MediaPlayer.OnCompletionListener() { public void onCompletion(android.media.MediaPlayer mp) { viewHolder.img_recorder_anim.setBackgroundResource(R.drawable.adj_right); } }); } }); } @java.lang.Override protected void paused(final com.liulishuo.filedownloader.BaseDownloadTask task, final int soFarBytes, final int totalBytes) { } @java.lang.Override protected void error(com.liulishuo.filedownloader.BaseDownloadTask task, java.lang.Throwable e) { viewHolder.id_recorder_time.setText(\"\u4e0b\u8f7d\u5931\u8d25\"); } @java.lang.Override protected void warn(com.liulishuo.filedownloader.BaseDownloadTask task) { } }).setTag(chat.getFileName()).start()=>com.liulishuo.filedownloader.FileDownloader.getImpl().create(amr_file).setListener(new com.liulishuo.filedownloader.FileDownloadListener() { @java.lang.Override protected boolean isInvalid() { return super.isInvalid(); } @java.lang.Override protected void pending(final com.liulishuo.filedownloader.BaseDownloadTask task, final int soFarBytes, final int totalBytes) { } @java.lang.Override protected void connected(com.liulishuo.filedownloader.BaseDownloadTask task, java.lang.String etag, boolean isContinue, int soFarBytes, int totalBytes) { super.connected(task, etag, isContinue, soFarBytes, totalBytes); viewHolder.id_recorder_time.setText(\"\u6b63\u5728\u4e0b\u8f7d...\"); } @java.lang.Override protected void progress(final com.liulishuo.filedownloader.BaseDownloadTask task, final int soFarBytes, final int totalBytes) { } @java.lang.Override protected void blockComplete(final com.liulishuo.filedownloader.BaseDownloadTask task) { } @java.lang.Override protected void retry(com.liulishuo.filedownloader.BaseDownloadTask task, java.lang.Throwable ex, int retryingTimes, int soFarBytes) { super.retry(task, ex, retryingTimes, soFarBytes); } @java.lang.Override protected void completed(com.liulishuo.filedownloader.BaseDownloadTask task) { viewHolder.id_recorder_time.setVisibility(View.GONE); final java.lang.String voicePath = task.getPath(); viewHolder.rlVoice.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { if ((viewHolder.img_recorder_anim) != null) { viewHolder.img_recorder_anim.setBackgroundResource(R.drawable.adj_right); } com.xptschool.parent.ui.watch.chat.SoundPlayHelper.getInstance().stopPlay(); viewHolder.img_recorder_anim.setBackgroundResource(R.drawable.play_anim_right); android.graphics.drawable.AnimationDrawable animation = ((android.graphics.drawable.AnimationDrawable) (viewHolder.img_recorder_anim.getBackground())); animation.start(); android.util.Log.i(com.xptschool.parent.ui.watch.chat.TAG, (\"onClick: teacher playSound \" + voicePath)); com.android.widget.audiorecorder.MediaPlayerManager.playSound(voicePath, new android.media.MediaPlayer.OnCompletionListener() { public void onCompletion(android.media.MediaPlayer mp) { viewHolder.img_recorder_anim.setBackgroundResource(R.drawable.adj_right); } }); } }); } @java.lang.Override protected void paused(final com.liulishuo.filedownloader.BaseDownloadTask task, final int soFarBytes, final int totalBytes) { } @java.lang.Override protected void error(com.liulishuo.filedownloader.BaseDownloadTask task, java.lang.Throwable e) { viewHolder.id_recorder_time.setText(\"\u4e0b\u8f7d\u5931\u8d25\"); } @java.lang.Override protected void warn(com.liulishuo.filedownloader.BaseDownloadTask task) { } }).setPath((((com.xptschool.parent.XPTApplication.getInstance().getCachePath()) + \"/\") + fileName)).setTag(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5639/buggy-version/anfang.src.main.java.com.xptschool.parent.ui.watch.chat.WatchAdapterDelegate.java", "BodyUseAPI": [], "Fixed commit": "bfd3a568c2589451cd57751fecb18d5ad14ad2a4", "Url": "https://api.github.com/repos/kongdexing/AnFang", "Date": "2018-04-28T09:02:25Z"},
{"Line": "95=>102", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.liulishuo.filedownloader.FileDownloader.getImpl().create(chat.getFileName()).setListener(new com.liulishuo.filedownloader.FileDownloadListener() { @java.lang.Override protected boolean isInvalid() { return super.isInvalid(); } @java.lang.Override protected void pending(final com.liulishuo.filedownloader.BaseDownloadTask task, final int soFarBytes, final int totalBytes) { } @java.lang.Override protected void connected(com.liulishuo.filedownloader.BaseDownloadTask task, java.lang.String etag, boolean isContinue, int soFarBytes, int totalBytes) { super.connected(task, etag, isContinue, soFarBytes, totalBytes); viewHolder.id_recorder_time.setText(\"\u6b63\u5728\u4e0b\u8f7d...\"); } @java.lang.Override protected void progress(final com.liulishuo.filedownloader.BaseDownloadTask task, final int soFarBytes, final int totalBytes) { } @java.lang.Override protected void blockComplete(final com.liulishuo.filedownloader.BaseDownloadTask task) { } @java.lang.Override protected void retry(com.liulishuo.filedownloader.BaseDownloadTask task, java.lang.Throwable ex, int retryingTimes, int soFarBytes) { super.retry(task, ex, retryingTimes, soFarBytes); } @java.lang.Override protected void completed(com.liulishuo.filedownloader.BaseDownloadTask task) { viewHolder.id_recorder_time.setVisibility(View.GONE); final java.lang.String voicePath = task.getPath(); viewHolder.rlVoice.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { if ((viewHolder.img_recorder_anim) != null) { viewHolder.img_recorder_anim.setBackgroundResource(R.drawable.adj_right); } com.xptschool.parent.ui.watch.chat.SoundPlayHelper.getInstance().stopPlay(); viewHolder.img_recorder_anim.setBackgroundResource(R.drawable.play_anim_right); android.graphics.drawable.AnimationDrawable animation = ((android.graphics.drawable.AnimationDrawable) (viewHolder.img_recorder_anim.getBackground())); animation.start(); android.util.Log.i(com.xptschool.parent.ui.watch.chat.TAG, (\"onClick: teacher playSound \" + voicePath)); com.android.widget.audiorecorder.MediaPlayerManager.playSound(voicePath, new android.media.MediaPlayer.OnCompletionListener() { public void onCompletion(android.media.MediaPlayer mp) { viewHolder.img_recorder_anim.setBackgroundResource(R.drawable.adj_right); } }); } }); } @java.lang.Override protected void paused(final com.liulishuo.filedownloader.BaseDownloadTask task, final int soFarBytes, final int totalBytes) { } @java.lang.Override protected void error(com.liulishuo.filedownloader.BaseDownloadTask task, java.lang.Throwable e) { viewHolder.id_recorder_time.setText(\"\u4e0b\u8f7d\u5931\u8d25\"); } @java.lang.Override protected void warn(com.liulishuo.filedownloader.BaseDownloadTask task) { } }).setTag(chat.getFileName())=>com.liulishuo.filedownloader.FileDownloader.getImpl().create(amr_file).setListener(new com.liulishuo.filedownloader.FileDownloadListener() { @java.lang.Override protected boolean isInvalid() { return super.isInvalid(); } @java.lang.Override protected void pending(final com.liulishuo.filedownloader.BaseDownloadTask task, final int soFarBytes, final int totalBytes) { } @java.lang.Override protected void connected(com.liulishuo.filedownloader.BaseDownloadTask task, java.lang.String etag, boolean isContinue, int soFarBytes, int totalBytes) { super.connected(task, etag, isContinue, soFarBytes, totalBytes); viewHolder.id_recorder_time.setText(\"\u6b63\u5728\u4e0b\u8f7d...\"); } @java.lang.Override protected void progress(final com.liulishuo.filedownloader.BaseDownloadTask task, final int soFarBytes, final int totalBytes) { } @java.lang.Override protected void blockComplete(final com.liulishuo.filedownloader.BaseDownloadTask task) { } @java.lang.Override protected void retry(com.liulishuo.filedownloader.BaseDownloadTask task, java.lang.Throwable ex, int retryingTimes, int soFarBytes) { super.retry(task, ex, retryingTimes, soFarBytes); } @java.lang.Override protected void completed(com.liulishuo.filedownloader.BaseDownloadTask task) { viewHolder.id_recorder_time.setVisibility(View.GONE); final java.lang.String voicePath = task.getPath(); viewHolder.rlVoice.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { if ((viewHolder.img_recorder_anim) != null) { viewHolder.img_recorder_anim.setBackgroundResource(R.drawable.adj_right); } com.xptschool.parent.ui.watch.chat.SoundPlayHelper.getInstance().stopPlay(); viewHolder.img_recorder_anim.setBackgroundResource(R.drawable.play_anim_right); android.graphics.drawable.AnimationDrawable animation = ((android.graphics.drawable.AnimationDrawable) (viewHolder.img_recorder_anim.getBackground())); animation.start(); android.util.Log.i(com.xptschool.parent.ui.watch.chat.TAG, (\"onClick: teacher playSound \" + voicePath)); com.android.widget.audiorecorder.MediaPlayerManager.playSound(voicePath, new android.media.MediaPlayer.OnCompletionListener() { public void onCompletion(android.media.MediaPlayer mp) { viewHolder.img_recorder_anim.setBackgroundResource(R.drawable.adj_right); } }); } }); } @java.lang.Override protected void paused(final com.liulishuo.filedownloader.BaseDownloadTask task, final int soFarBytes, final int totalBytes) { } @java.lang.Override protected void error(com.liulishuo.filedownloader.BaseDownloadTask task, java.lang.Throwable e) { viewHolder.id_recorder_time.setText(\"\u4e0b\u8f7d\u5931\u8d25\"); } @java.lang.Override protected void warn(com.liulishuo.filedownloader.BaseDownloadTask task) { } }).setPath((((com.xptschool.parent.XPTApplication.getInstance().getCachePath()) + \"/\") + fileName))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5639/buggy-version/anfang.src.main.java.com.xptschool.parent.ui.watch.chat.WatchAdapterDelegate.java", "BodyUseAPI": [], "Fixed commit": "bfd3a568c2589451cd57751fecb18d5ad14ad2a4", "Url": "https://api.github.com/repos/kongdexing/AnFang", "Date": "2018-04-28T09:02:25Z"},
{"Line": "188=>196", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.xptschool.parent.model.BeanWChat.getFileName()=>com.xptschool.parent.XPTApplication.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5639/buggy-version/anfang.src.main.java.com.xptschool.parent.ui.watch.chat.WatchAdapterDelegate.java", "BodyUseAPI": [], "Fixed commit": "bfd3a568c2589451cd57751fecb18d5ad14ad2a4", "Url": "https://api.github.com/repos/kongdexing/AnFang", "Date": "2018-04-28T09:02:25Z"},
{"Line": "100=>100", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.Toast.makeText(android.content.Context,user.getLastCheckin().getObjectId(),Toast.LENGTH_LONG)=>com.pusheenicorn.safetyapp.Helper.isAppRunning(android.content.Context,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2110/buggy-version/app.src.main.java.com.pusheenicorn.safetyapp.Receiver.java", "BodyUseAPI": [], "Fixed commit": "6ae55bde83a7cae1fd6f3780612ffc0a471b7848", "Url": "https://api.github.com/repos/appsur/SurApp", "Date": "2018-07-20T21:34:42Z"},
{"Line": "101=>103", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.pusheenicorn.safetyapp.models.User.getLastCheckin()=>android.content.Intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2110/buggy-version/app.src.main.java.com.pusheenicorn.safetyapp.Receiver.java", "BodyUseAPI": [], "Fixed commit": "6ae55bde83a7cae1fd6f3780612ffc0a471b7848", "Url": "https://api.github.com/repos/appsur/SurApp", "Date": "2018-07-20T21:34:42Z"},
{"Line": "71=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.googlecode.mp4parser.authoring.container.mp4.MovieCreator.build(com.googlecode.mp4parser.FileDataSourceViaHeapImpl)=>com.googlecode.mp4parser.authoring.container.mp4.MovieCreator.build(com.googlecode.mp4parser.FileDataSourceImpl)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/352/buggy-version/k4l-video-trimmer.src.main.java.life.knowledge4.videotrimmer.utils.TrimVideoUtils.java", "BodyUseAPI": [], "Fixed commit": "10481fb63261a7269e4868d5ed8f14c503414780", "Url": "https://api.github.com/repos/aaronliew/k4l-video-trimmer", "Date": "2018-09-05T11:14:47Z"},
{"Line": "57=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Date.getDate()=>java.util.Calendar.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8602/buggy-version/app.src.main.java.com.smu.bmicalculator.User_Info.java", "BodyUseAPI": [], "Fixed commit": "92c730cef9fcbdcee76c5a848467118f20479e8b", "Url": "https://api.github.com/repos/karlogin/A00424004_MCDA5550", "Date": "2018-07-30T21:02:46Z"},
{"Line": "57=>65", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((android.widget.DatePicker) (findViewById(R.id.datePicker))).updateDate(int,int,int)=>((android.widget.DatePicker) (findViewById(R.id.datePicker))).updateDate(int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8602/buggy-version/app.src.main.java.com.smu.bmicalculator.User_Info.java", "BodyUseAPI": [], "Fixed commit": "92c730cef9fcbdcee76c5a848467118f20479e8b", "Url": "https://api.github.com/repos/karlogin/A00424004_MCDA5550", "Date": "2018-07-30T21:02:46Z"},
{"Line": "49=>48", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.io.FileUtils.forceMkdir(AbstractJDashlet.confdir)=>AbstractJDashlet.confdir.mkdirs()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2078/buggy-version/src.main.java.org.magic.gui.DashBoardGUI2.java", "BodyUseAPI": [], "Fixed commit": "fb76d164fd0889ac7e8d6343798b0631035a06f0", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-05-09T21:28:04Z"},
{"Line": "26=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.springframework.ui.Model.addAttribute(java.lang.String,recipeService.getRecipes())=>recipeService.getRecipes().collectList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9106/buggy-version/spring5-reactive-mongo-recipe-app.src.main.java.guru.springframework.controllers.IndexController.java", "BodyUseAPI": [], "Fixed commit": "1479cd192fc0d932deda722165450c9a24f7c73b", "Url": "https://api.github.com/repos/smola11/SpringFramework5BeginnerToGuru", "Date": "2018-07-22T15:29:51Z"},
{"Line": "39=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.springframework.ui.Model.addAttribute(java.lang.String,recipeService.findCommandById(recipeId))=>recipeService.findCommandById(recipeId).block()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9106/buggy-version/spring5-reactive-mongo-recipe-app.src.main.java.guru.springframework.controllers.IngredientController.java", "BodyUseAPI": [], "Fixed commit": "1479cd192fc0d932deda722165450c9a24f7c73b", "Url": "https://api.github.com/repos/smola11/SpringFramework5BeginnerToGuru", "Date": "2018-07-22T15:29:51Z"},
{"Line": "123=>124", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.PrintStream.print(java.lang.Object)=>java.io.PrintStream.print(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2960/buggy-version/src.BlackJackGame.java", "BodyUseAPI": [], "Fixed commit": "1b3e80b4487aa15145a68125a03c54ab374799a2", "Url": "https://api.github.com/repos/cartersteffen/BlackJack", "Date": "2018-08-28T02:43:36Z"},
{"Line": "133=>134", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.PrintStream.print(java.lang.Object)=>java.io.PrintStream.print(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2960/buggy-version/src.BlackJackGame.java", "BodyUseAPI": [], "Fixed commit": "1b3e80b4487aa15145a68125a03c54ab374799a2", "Url": "https://api.github.com/repos/cartersteffen/BlackJack", "Date": "2018-08-28T02:43:36Z"},
{"Line": "24=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.authorizeRequests().antMatchers(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>http.csrf().disable().authorizeRequests().antMatchers(\"/\", \"/home\").permitAll().antMatchers(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4786/buggy-version/src.main.java.imedevo.configuration.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "9005889ddfbc3494bcdb33363c16a5c7bfa1462e", "Url": "https://api.github.com/repos/YaroslavSalomatkin/ImedEvo", "Date": "2018-01-28T14:07:31Z"},
{"Line": "24=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.authorizeRequests().antMatchers(\"/users/login\", \"users/registration\", \"/doctors/getall\", \"/doctors/*\", \"/clinics/getall\", \"/clinics/*\", \"/forgot/reset\", \"/forgot/newpassword\").permitAll().antMatchers(\"/users/*\", \"/users/updateuser\").hasAuthority(\"USER\").antMatchers(\"/doctors/updatedoctor\").hasAuthority(\"DOCTOR\").antMatchers(\"/users/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"CLINIC_ADMIN\").antMatchers(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>http.csrf().disable().authorizeRequests().antMatchers(\"/\", \"/home\").permitAll().antMatchers(\"/users/login\", \"users/registration\", \"/doctors/getall\", \"/doctors/getdoctor/*\", \"/clinics/getall\", \"/clinics/getclinic/*\", \"/forgot/**\", \"/clients/**\").permitAll().antMatchers(\"/users/getuser/*\", \"/users/updateuser\").hasAuthority(\"USER\").antMatchers(\"/doctors/updatedoctor\").hasAuthority(\"DOCTOR\").antMatchers(\"/doctors/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"CLINIC_ADMIN\").antMatchers(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4786/buggy-version/src.main.java.imedevo.configuration.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "9005889ddfbc3494bcdb33363c16a5c7bfa1462e", "Url": "https://api.github.com/repos/YaroslavSalomatkin/ImedEvo", "Date": "2018-01-28T14:07:31Z"},
{"Line": "24=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.authorizeRequests().antMatchers(\"/users/login\", \"users/registration\", \"/doctors/getall\", \"/doctors/*\", \"/clinics/getall\", \"/clinics/*\", \"/forgot/reset\", \"/forgot/newpassword\").permitAll().antMatchers(\"/users/*\", \"/users/updateuser\").hasAuthority(\"USER\").antMatchers(\"/doctors/updatedoctor\").hasAuthority(\"DOCTOR\").antMatchers(\"/users/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"CLINIC_ADMIN\").antMatchers(\"/users/getall\", \"/users/*\", \"/users/createuser\", \"/users/updateuser\", \"/users/deleteuser/*\", \"/users/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"SUPER_ADMIN\").antMatchers(\"/**\").hasAuthority(\"SYSTEM\").and().logout().logoutUrl(\"/services/users/logout\").clearAuthentication(true).logoutSuccessUrl(java.lang.String)=>http.csrf().disable().authorizeRequests().antMatchers(\"/\", \"/home\").permitAll().antMatchers(\"/users/login\", \"users/registration\", \"/doctors/getall\", \"/doctors/getdoctor/*\", \"/clinics/getall\", \"/clinics/getclinic/*\", \"/forgot/**\", \"/clients/**\").permitAll().antMatchers(\"/users/getuser/*\", \"/users/updateuser\").hasAuthority(\"USER\").antMatchers(\"/doctors/updatedoctor\").hasAuthority(\"DOCTOR\").antMatchers(\"/doctors/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"CLINIC_ADMIN\").antMatchers(\"/users/getall\", \"/users/getuser/*\", \"/users/createuser\", \"/users/updateuser\", \"/users/deleteuser/*\", \"/users/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"SUPER_ADMIN\").and().logout().logoutUrl(\"/users/logout\").clearAuthentication(true).logoutSuccessUrl(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4786/buggy-version/src.main.java.imedevo.configuration.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "9005889ddfbc3494bcdb33363c16a5c7bfa1462e", "Url": "https://api.github.com/repos/YaroslavSalomatkin/ImedEvo", "Date": "2018-01-28T14:07:31Z"},
{"Line": "24=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.authorizeRequests().antMatchers(\"/users/login\", \"users/registration\", \"/doctors/getall\", \"/doctors/*\", \"/clinics/getall\", \"/clinics/*\", \"/forgot/reset\", \"/forgot/newpassword\").permitAll().antMatchers(\"/users/*\", \"/users/updateuser\").hasAuthority(\"USER\").antMatchers(\"/doctors/updatedoctor\").hasAuthority(\"DOCTOR\").antMatchers(\"/users/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"CLINIC_ADMIN\").antMatchers(\"/users/getall\", \"/users/*\", \"/users/createuser\", \"/users/updateuser\", \"/users/deleteuser/*\", \"/users/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"SUPER_ADMIN\").antMatchers(\"/**\").hasAuthority(\"SYSTEM\").and().logout().logoutUrl(java.lang.String)=>http.csrf().disable().authorizeRequests().antMatchers(\"/\", \"/home\").permitAll().antMatchers(\"/users/login\", \"users/registration\", \"/doctors/getall\", \"/doctors/getdoctor/*\", \"/clinics/getall\", \"/clinics/getclinic/*\", \"/forgot/**\", \"/clients/**\").permitAll().antMatchers(\"/users/getuser/*\", \"/users/updateuser\").hasAuthority(\"USER\").antMatchers(\"/doctors/updatedoctor\").hasAuthority(\"DOCTOR\").antMatchers(\"/doctors/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"CLINIC_ADMIN\").antMatchers(\"/users/getall\", \"/users/getuser/*\", \"/users/createuser\", \"/users/updateuser\", \"/users/deleteuser/*\", \"/users/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"SUPER_ADMIN\").and().logout().logoutUrl(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4786/buggy-version/src.main.java.imedevo.configuration.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "9005889ddfbc3494bcdb33363c16a5c7bfa1462e", "Url": "https://api.github.com/repos/YaroslavSalomatkin/ImedEvo", "Date": "2018-01-28T14:07:31Z"},
{"Line": "24=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.authorizeRequests().antMatchers(\"/users/login\", \"users/registration\", \"/doctors/getall\", \"/doctors/*\", \"/clinics/getall\", \"/clinics/*\", \"/forgot/reset\", \"/forgot/newpassword\").permitAll().antMatchers(\"/users/*\", \"/users/updateuser\").hasAuthority(\"USER\").antMatchers(\"/doctors/updatedoctor\").hasAuthority(\"DOCTOR\").antMatchers(\"/users/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"CLINIC_ADMIN\").antMatchers(\"/users/getall\", \"/users/*\", \"/users/createuser\", \"/users/updateuser\", \"/users/deleteuser/*\", \"/users/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"SUPER_ADMIN\").antMatchers(\"/**\").hasAuthority(\"SYSTEM\").and().logout().logoutUrl(\"/services/users/logout\").clearAuthentication(true).logoutSuccessUrl(\"/services/users/login\").and().httpBasic().and().csrf().disable()=>http.csrf().disable().authorizeRequests().antMatchers(\"/\", \"/home\").permitAll().antMatchers(\"/users/login\", \"users/registration\", \"/doctors/getall\", \"/doctors/getdoctor/*\", \"/clinics/getall\", \"/clinics/getclinic/*\", \"/forgot/**\", \"/clients/**\").permitAll().antMatchers(\"/users/getuser/*\", \"/users/updateuser\").hasAuthority(\"USER\").antMatchers(\"/doctors/updatedoctor\").hasAuthority(\"DOCTOR\").antMatchers(\"/doctors/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"CLINIC_ADMIN\").antMatchers(\"/users/getall\", \"/users/getuser/*\", \"/users/createuser\", \"/users/updateuser\", \"/users/deleteuser/*\", \"/users/createdoctor\", \"/doctors/updatedoctor\", \"doctors/deletedoctor/*\", \"clinics/createclinic\", \"clinics/updateclinic\", \"clinics/deleteclinic/*\").hasAuthority(\"SUPER_ADMIN\").and().logout().logoutUrl(\"/users/logout\").clearAuthentication(true).logoutSuccessUrl(\"/users/login\").and().httpBasic().and()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4786/buggy-version/src.main.java.imedevo.configuration.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "9005889ddfbc3494bcdb33363c16a5c7bfa1462e", "Url": "https://api.github.com/repos/YaroslavSalomatkin/ImedEvo", "Date": "2018-01-28T14:07:31Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "utility.FaceExpressionData.getVectors()=>utility.FaceExpressionData.fetchVectors()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3640/buggy-version/Project3-WebApp.src.main.java.client.FacePaint.java", "BodyUseAPI": [], "Fixed commit": "3f94e7d0fb5a732e778fa278ca2c6d21f6554771", "Url": "https://api.github.com/repos/SER516/ProjectThree_Team03", "Date": "2018-04-05T03:59:25Z"},
{"Line": "301=>301", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.eyeseetea.malariacare.strategies.BaseActivityStrategy.showLogin()=>org.eyeseetea.malariacare.strategies.BaseActivityStrategy.showLogin(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5940/buggy-version/app.src.ereferrals.java.org.eyeseetea.malariacare.strategies.BaseActivityStrategy.java", "BodyUseAPI": [], "Fixed commit": "4f0dc63f7b00eeb720a8c83ba6932848aa3b484a", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-03-29T07:18:32Z"},
{"Line": "97=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.eyeseetea.malariacare.strategies.BaseActivityStrategy.4.showLogin()=>org.eyeseetea.malariacare.strategies.BaseActivityStrategy.4.showLogin(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5940/buggy-version/app.src.ereferrals.java.org.eyeseetea.malariacare.strategies.BaseActivityStrategy.java", "BodyUseAPI": [], "Fixed commit": "4f0dc63f7b00eeb720a8c83ba6932848aa3b484a", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-03-29T07:18:32Z"},
{"Line": "236=>236", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.eyeseetea.malariacare.strategies.BaseActivityStrategy.7.showLogin()=>org.eyeseetea.malariacare.strategies.BaseActivityStrategy.7.showLogin(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5940/buggy-version/app.src.ereferrals.java.org.eyeseetea.malariacare.strategies.BaseActivityStrategy.java", "BodyUseAPI": [], "Fixed commit": "4f0dc63f7b00eeb720a8c83ba6932848aa3b484a", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-03-29T07:18:32Z"},
{"Line": "186=>186", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.eyeseetea.malariacare.strategies.BaseActivityStrategy.2.showLogin()=>org.eyeseetea.malariacare.strategies.BaseActivityStrategy.2.showLogin(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5940/buggy-version/app.src.ereferrals.java.org.eyeseetea.malariacare.strategies.BaseActivityStrategy.java", "BodyUseAPI": [], "Fixed commit": "4f0dc63f7b00eeb720a8c83ba6932848aa3b484a", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-03-29T07:18:32Z"},
{"Line": "138=>138", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "sites.get(0).getSiteSequence().toUpperCase()=>sites.get(0).getSiteSequence().replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/559/buggy-version/Scansite4.CoreApplication.src.main.java.edu.mit.scansite.server.features.OrthologScanFeature.java", "BodyUseAPI": [], "Fixed commit": "73a2c7862c89a6b7ba6ed5d3b5c7bed9b1808075", "Url": "https://api.github.com/repos/kkrismer/scansite4", "Date": "2018-10-04T22:14:47Z"},
{"Line": "257=>257", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new com.google.gwt.user.client.ui.Anchor(\"BLAST this site!\", false, edu.mit.scansite.shared.URIs.getDirectBlastLink(site.getSiteSequence()), \"_blank\")=>new com.google.gwt.user.client.ui.Anchor(\"Run Protein BLAST on this site sequence\", false, edu.mit.scansite.shared.URIs.getDirectBlastLink(site.getSiteSequence().replaceAll(\"\\\\<.*?\\\\>\", \"\")), \"_blank\")", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/559/buggy-version/Scansite4.CoreApplication.src.main.java.edu.mit.scansite.client.ui.widgets.features.SiteInSequenceWidget.java", "BodyUseAPI": [], "Fixed commit": "73a2c7862c89a6b7ba6ed5d3b5c7bed9b1808075", "Url": "https://api.github.com/repos/kkrismer/scansite4", "Date": "2018-10-04T22:14:47Z"},
{"Line": "36=>37", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "point.subtract(this._position).normalization()=>elements.PointLight.getL(elements.Point3D)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5481/buggy-version/src.elements.PointLight.java", "BodyUseAPI": [], "Fixed commit": "62b98a2a45e6bb3fe7a6c6bb8425be7439f39e9a", "Url": "https://api.github.com/repos/yeo4/Jct-Software-Engineering-Project", "Date": "2018-05-21T17:50:07Z"},
{"Line": "85=>85", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.Math.abs(double)=>java.lang.Math.pow(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5481/buggy-version/src.renderer.Render.java", "BodyUseAPI": [], "Fixed commit": "62b98a2a45e6bb3fe7a6c6bb8425be7439f39e9a", "Url": "https://api.github.com/repos/yeo4/Jct-Software-Engineering-Project", "Date": "2018-05-21T17:50:07Z"},
{"Line": "21=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "loc.getWorld().spawnParticle(Particle.BARRIER,org.bukkit.Location,int,double,int,double)=>loc.getWorld().spawnParticle(Particle.BARRIER,org.bukkit.Location,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3594/buggy-version/src.main.java.com.jaoafa.MyMaid2.Event.Event_AntiTNTMinecart.java", "BodyUseAPI": [], "Fixed commit": "7e5def6b07afdd5dfb380aae3c1fbe0c72ab216d", "Url": "https://api.github.com/repos/jaoafa/MyMaid2", "Date": "2018-04-21T19:01:09Z"},
{"Line": "40=>40", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(algorithm.getResult(br))=>com.interview.questions.algorithm.Algorithm.run(java.io.BufferedReader)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1317/buggy-version/java.src.main.com.interview.questions.InterviewQuestions.java", "BodyUseAPI": [], "Fixed commit": "7514f308fe936dc49d71fbd3431cd78686d2ba26", "Url": "https://api.github.com/repos/Lilmortal/data-structures", "Date": "2018-10-05T11:06:36Z"},
{"Line": "102=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.File.getPath()=>java.io.File.getAbsolutePath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2853/buggy-version/app.src.main.java.aidchow.com.gifreverse.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "3297895e4c17b883478a2c26c0a44315e899e21b", "Url": "https://api.github.com/repos/zhoujunjiang/GifReverse", "Date": "2018-02-08T12:23:17Z"},
{"Line": "33=>34", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.badlogic.gdx.graphics.g2d.Batch.draw(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int)=>com.badlogic.gdx.graphics.g2d.Batch.draw(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,Gdx.graphics.getWidth(),Gdx.graphics.getHeight())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2189/buggy-version/SourceFiles.core.src.com.fourmen.utils.AnimatedImage.java", "BodyUseAPI": [], "Fixed commit": "40639facf5987f02eb6ebf645b43e60b0ae52b24", "Url": "https://api.github.com/repos/Jakbquick/Palette", "Date": "2018-06-09T21:16:09Z"},
{"Line": "370=>370", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.talend.designer.maven.tools.AggregatorPomsHelper.buildAndInstallCodesProject(org.eclipse.core.runtime.IProgressMonitor,ERepositoryObjectType.PIG_UDF,boolean)=>org.talend.designer.maven.tools.AggregatorPomsHelper.buildAndInstallCodesProject(org.eclipse.core.runtime.IProgressMonitor,ERepositoryObjectType.PIG_UDF,boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5689/buggy-version/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.maven.MavenJavaProcessor.java", "BodyUseAPI": [], "Fixed commit": "63efd72109a6e0fa698540cf3aaa4895effe5253", "Url": "https://api.github.com/repos/Talend/tdi-studio-se", "Date": "2018-02-28T08:50:49Z"},
{"Line": "368=>368", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.talend.designer.maven.tools.AggregatorPomsHelper.buildAndInstallCodesProject(org.eclipse.core.runtime.IProgressMonitor,ERepositoryObjectType.ROUTINES,boolean)=>org.talend.designer.maven.tools.AggregatorPomsHelper.buildAndInstallCodesProject(org.eclipse.core.runtime.IProgressMonitor,ERepositoryObjectType.ROUTINES,boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5689/buggy-version/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.maven.MavenJavaProcessor.java", "BodyUseAPI": [], "Fixed commit": "63efd72109a6e0fa698540cf3aaa4895effe5253", "Url": "https://api.github.com/repos/Talend/tdi-studio-se", "Date": "2018-02-28T08:50:49Z"},
{"Line": "373=>373", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.talend.designer.maven.tools.AggregatorPomsHelper.buildAndInstallCodesProject(org.eclipse.core.runtime.IProgressMonitor,org.talend.core.model.repository.ERepositoryObjectType.valueOf(\"BEANS\"),boolean)=>org.talend.designer.maven.tools.AggregatorPomsHelper.buildAndInstallCodesProject(org.eclipse.core.runtime.IProgressMonitor,org.talend.core.model.repository.ERepositoryObjectType.valueOf(\"BEANS\"),boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5689/buggy-version/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.maven.MavenJavaProcessor.java", "BodyUseAPI": [], "Fixed commit": "63efd72109a6e0fa698540cf3aaa4895effe5253", "Url": "https://api.github.com/repos/Talend/tdi-studio-se", "Date": "2018-02-28T08:50:49Z"},
{"Line": "206=>206", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "cern.c2mon.server.cache.process.ProcessXMLProviderImpl.error(java.lang.String)=>cern.c2mon.server.cache.process.ProcessXMLProviderImpl.warn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8445/buggy-version/c2mon-server.c2mon-server-cache.src.main.java.cern.c2mon.server.cache.process.ProcessXMLProviderImpl.java", "BodyUseAPI": [], "Fixed commit": "da1a948579dd3d70f67e5e8bbb499c64f6d9d0c5", "Url": "https://api.github.com/repos/ccgcyber/c2mon", "Date": "2018-04-13T09:39:07Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.powsybl.afs.storage.buffer.StorageChangeBuffer.flushNotProtected()=>com.powsybl.afs.storage.buffer.StorageChangeBuffer.flush()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3571/buggy-version/afs.afs-storage-api.src.main.java.com.powsybl.afs.storage.buffer.StorageChangeBuffer.java", "BodyUseAPI": [], "Fixed commit": "db0ef7ecceded38eb19a36a63fbc89d3f5d1a13a", "Url": "https://api.github.com/repos/powsybl/powsybl-core", "Date": "2018-01-03T13:59:10Z"},
{"Line": "95=>98", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.powsybl.afs.storage.buffer.StorageChangeBuffer.flushNotProtected()=>java.util.concurrent.locks.Lock.unlock()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3571/buggy-version/afs.afs-storage-api.src.main.java.com.powsybl.afs.storage.buffer.StorageChangeBuffer.java", "BodyUseAPI": [], "Fixed commit": "db0ef7ecceded38eb19a36a63fbc89d3f5d1a13a", "Url": "https://api.github.com/repos/powsybl/powsybl-core", "Date": "2018-01-03T13:59:10Z"},
{"Line": "71=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.intellij.openapi.util.io.FileUtil.join(java.lang.String,((\"docs/html/specs/\" + (virtualFile.getNameWithoutExtension())) + \".html\"))=>com.intellij.openapi.util.io.FileUtil.join(java.lang.String,java.lang.String,java.lang.String,java.lang.String,((virtualFile.getNameWithoutExtension()) + \".html\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4624/buggy-version/src.com.thoughtworks.gauge.markdownPreview.GaugeWebBrowserPreview.java", "BodyUseAPI": [], "Fixed commit": "19b2ba7ca5025ba1eaa5277521e5ae12e1308999", "Url": "https://api.github.com/repos/Thunderforge/Intellij-Plugin", "Date": "2018-02-27T07:01:38Z"},
{"Line": "123=>124", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "fi.vm.yti.codelist.api.domain.Domain.getCodeSchemesByCodeRegistryCodeValue(java.lang.String)=>fi.vm.yti.codelist.api.domain.Domain.getCodeSchemesByCodeRegistryCodeValue(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5752/buggy-version/src.main.java.fi.vm.yti.codelist.api.resource.CodeRegistryResource.java", "BodyUseAPI": [], "Fixed commit": "30282128898e26825b46cac4ef6a041c4dec27a3", "Url": "https://api.github.com/repos/VRK-YTI/yti-codelist-public-api-service", "Date": "2018-05-18T22:34:50Z"},
{"Line": "155=>157", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "fi.vm.yti.codelist.api.domain.Domain.getCodeSchemes(java.lang.Integer,java.lang.Integer,java.lang.String,<nulltype>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,<nulltype>,java.lang.String,boolean,java.util.List<java.lang.String>,java.util.List<java.lang.String>,fi.vm.yti.codelist.common.dto.Meta.parseAfterFromString(after),<nulltype>)=>fi.vm.yti.codelist.api.domain.Domain.getCodeSchemes(java.lang.Integer,java.lang.Integer,java.lang.String,<nulltype>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.List<java.lang.String>,java.util.List<java.lang.String>,fi.vm.yti.codelist.common.dto.Meta.parseAfterFromString(after),<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5752/buggy-version/src.main.java.fi.vm.yti.codelist.api.resource.CodeRegistryResource.java", "BodyUseAPI": [], "Fixed commit": "30282128898e26825b46cac4ef6a041c4dec27a3", "Url": "https://api.github.com/repos/VRK-YTI/yti-codelist-public-api-service", "Date": "2018-05-18T22:34:50Z"},
{"Line": "159=>161", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "fi.vm.yti.codelist.api.domain.Domain.getCodeSchemes(java.lang.Integer,java.lang.Integer,java.lang.String,<nulltype>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,<nulltype>,java.lang.String,boolean,java.util.List<java.lang.String>,java.util.List<java.lang.String>,fi.vm.yti.codelist.common.dto.Meta.parseAfterFromString(after),<nulltype>)=>fi.vm.yti.codelist.api.domain.Domain.getCodeSchemes(java.lang.Integer,java.lang.Integer,java.lang.String,<nulltype>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.List<java.lang.String>,java.util.List<java.lang.String>,fi.vm.yti.codelist.common.dto.Meta.parseAfterFromString(after),<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5752/buggy-version/src.main.java.fi.vm.yti.codelist.api.resource.CodeRegistryResource.java", "BodyUseAPI": [], "Fixed commit": "30282128898e26825b46cac4ef6a041c4dec27a3", "Url": "https://api.github.com/repos/VRK-YTI/yti-codelist-public-api-service", "Date": "2018-05-18T22:34:50Z"},
{"Line": "164=>166", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "fi.vm.yti.codelist.api.domain.Domain.getCodeSchemes(java.lang.Integer,java.lang.Integer,java.lang.String,<nulltype>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,<nulltype>,java.lang.String,boolean,java.util.List<java.lang.String>,java.util.List<java.lang.String>,meta.getAfter(),fi.vm.yti.codelist.common.dto.Meta)=>fi.vm.yti.codelist.api.domain.Domain.getCodeSchemes(java.lang.Integer,java.lang.Integer,java.lang.String,<nulltype>,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.List<java.lang.String>,java.util.List<java.lang.String>,meta.getAfter(),fi.vm.yti.codelist.common.dto.Meta)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5752/buggy-version/src.main.java.fi.vm.yti.codelist.api.resource.CodeRegistryResource.java", "BodyUseAPI": [], "Fixed commit": "30282128898e26825b46cac4ef6a041c4dec27a3", "Url": "https://api.github.com/repos/VRK-YTI/yti-codelist-public-api-service", "Date": "2018-05-18T22:34:50Z"},
{"Line": "33=>34", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.ntg.user.mvpsample.base.BasePresenter.handelError(retrofitException.getMessage())=>com.ntg.user.mvpsample.base.BasePresenter.handelError(com.ntg.user.mvpsample.network.remote.RetrofitException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8152/buggy-version/app.src.main.java.com.ntg.user.mvpsample.base.BaseFetchObserver.java", "BodyUseAPI": [], "Fixed commit": "8f095dfb7f962cbacf80567b21bf053c2085372e", "Url": "https://api.github.com/repos/saraelmoghazy/NTG", "Date": "2018-03-01T11:14:56Z"},
{"Line": "50=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "V.showErrorMessage(java.lang.String)=>com.ntg.user.mvpsample.network.remote.RetrofitException.getMessage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8152/buggy-version/app.src.main.java.com.ntg.user.mvpsample.base.BasePresenter.java", "BodyUseAPI": [], "Fixed commit": "8f095dfb7f962cbacf80567b21bf053c2085372e", "Url": "https://api.github.com/repos/saraelmoghazy/NTG", "Date": "2018-03-01T11:14:56Z"},
{"Line": "149=>150", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.springframework.ui.Model.addAttribute(java.lang.String,org.springframework.data.domain.Page<com.example.easynotes.model.Note>)=>org.springframework.ui.Model.addAttribute(java.lang.String,org.springframework.data.domain.Page<com.example.easynotes.model.Note>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1619/buggy-version/src.main.java.com.example.easynotes.controller.MainController.java", "BodyUseAPI": [], "Fixed commit": "fe1bf1f8c5c5bc976f8747b02949834116e9c89b", "Url": "https://api.github.com/repos/avoy/notes", "Date": "2018-05-10T05:54:24Z"},
{"Line": "133=>133", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.springframework.ui.Model.addAttribute(java.lang.String,org.springframework.data.domain.Page<com.example.easynotes.model.Note>)=>org.springframework.ui.Model.addAttribute(java.lang.String,org.springframework.data.domain.Page<com.example.easynotes.model.Note>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1619/buggy-version/src.main.java.com.example.easynotes.controller.MainController.java", "BodyUseAPI": [], "Fixed commit": "fe1bf1f8c5c5bc976f8747b02949834116e9c89b", "Url": "https://api.github.com/repos/avoy/notes", "Date": "2018-05-10T05:54:24Z"},
{"Line": "91=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.springframework.ui.Model.addAttribute(java.lang.String,org.springframework.data.domain.Page<com.example.easynotes.model.Note>)=>org.springframework.ui.Model.addAttribute(java.lang.String,org.springframework.data.domain.Page<com.example.easynotes.model.Note>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1619/buggy-version/src.main.java.com.example.easynotes.controller.MainController.java", "BodyUseAPI": [], "Fixed commit": "fe1bf1f8c5c5bc976f8747b02949834116e9c89b", "Url": "https://api.github.com/repos/avoy/notes", "Date": "2018-05-10T05:54:24Z"},
{"Line": "79=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.springframework.ui.Model.addAttribute(java.lang.String,org.springframework.data.domain.Page<com.example.easynotes.model.Note>)=>org.springframework.ui.Model.addAttribute(java.lang.String,org.springframework.data.domain.Page<com.example.easynotes.model.Note>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1619/buggy-version/src.main.java.com.example.easynotes.controller.MainController.java", "BodyUseAPI": [], "Fixed commit": "fe1bf1f8c5c5bc976f8747b02949834116e9c89b", "Url": "https://api.github.com/repos/avoy/notes", "Date": "2018-05-10T05:54:24Z"},
{"Line": "42=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(object.minValuePoint())=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9284/buggy-version/src.solver.Main.java", "BodyUseAPI": [], "Fixed commit": "5f19f13f1ff360d71bd6883bae605a318564a84c", "Url": "https://api.github.com/repos/heartistizio/solver", "Date": "2018-06-03T18:57:30Z"},
{"Line": "306=>314", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "cached.preparedStatement.setString(int,((java.lang.String) (state.data)))=>cached.preparedStatement.setObject(int,org.postgresql.util.PGobject)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2598/buggy-version/src.main.java.io.vlingo.symbio.store.state.jdbc.postgres.PostgresStorageDelegate.java", "BodyUseAPI": [], "Fixed commit": "8e71e762c58f9fbec97780a00781e537e36c62c7", "Url": "https://api.github.com/repos/vlingo/vlingo-symbio", "Date": "2018-07-05T06:33:24Z"},
{"Line": "152=>157", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "dispatchable.append.preparedStatement.setString(int,((java.lang.String) (state.data)))=>dispatchable.append.preparedStatement.setObject(int,org.postgresql.util.PGobject)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2598/buggy-version/src.main.java.io.vlingo.symbio.store.state.jdbc.postgres.PostgresStorageDelegate.java", "BodyUseAPI": [], "Fixed commit": "8e71e762c58f9fbec97780a00781e537e36c62c7", "Url": "https://api.github.com/repos/vlingo/vlingo-symbio", "Date": "2018-07-05T06:33:24Z"},
{"Line": "134=>134", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.hansight.datagenerator.model.MockScenario.getAlarml_level()=>com.hansight.datagenerator.model.MockScenario.getAlarm_level()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3917/buggy-version/src.main.java.com.hansight.datagenerator.utils.UebaAlarmMockDataGenerator.java", "BodyUseAPI": [], "Fixed commit": "c1250621a410a017f2e3e2ad0b9c012fdfa2ba3d", "Url": "https://api.github.com/repos/YifengGuo/mock-data-generator", "Date": "2018-10-16T08:44:41Z"},
{"Line": "132=>132", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.hansight.datagenerator.model.MockScenario.getAlarml_level()=>com.hansight.datagenerator.model.MockScenario.getAlarm_level()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3917/buggy-version/src.main.java.com.hansight.datagenerator.utils.UebaAlarmMockDataGenerator.java", "BodyUseAPI": [], "Fixed commit": "c1250621a410a017f2e3e2ad0b9c012fdfa2ba3d", "Url": "https://api.github.com/repos/YifengGuo/mock-data-generator", "Date": "2018-10-16T08:44:41Z"},
{"Line": "136=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.hansight.datagenerator.model.MockScenario.getAlarml_level()=>com.hansight.datagenerator.model.MockScenario.getAlarm_level()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3917/buggy-version/src.main.java.com.hansight.datagenerator.utils.UebaAlarmMockDataGenerator.java", "BodyUseAPI": [], "Fixed commit": "c1250621a410a017f2e3e2ad0b9c012fdfa2ba3d", "Url": "https://api.github.com/repos/YifengGuo/mock-data-generator", "Date": "2018-10-16T08:44:41Z"},
{"Line": "95=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.hansight.datagenerator.model.MockScenario.setAlarml_level(long)=>com.hansight.datagenerator.model.MockScenario.setAlarm_level(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3917/buggy-version/src.main.java.com.hansight.datagenerator.utils.UebaAlarmMockDataGenerator.java", "BodyUseAPI": [], "Fixed commit": "c1250621a410a017f2e3e2ad0b9c012fdfa2ba3d", "Url": "https://api.github.com/repos/YifengGuo/mock-data-generator", "Date": "2018-10-16T08:44:41Z"},
{"Line": "138=>138", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.hansight.datagenerator.model.MockScenario.getAlarml_level()=>com.hansight.datagenerator.model.MockScenario.getAlarm_level()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3917/buggy-version/src.main.java.com.hansight.datagenerator.utils.UebaAlarmMockDataGenerator.java", "BodyUseAPI": [], "Fixed commit": "c1250621a410a017f2e3e2ad0b9c012fdfa2ba3d", "Url": "https://api.github.com/repos/YifengGuo/mock-data-generator", "Date": "2018-10-16T08:44:41Z"},
{"Line": "140=>140", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.hansight.datagenerator.model.MockScenario.getAlarml_level()=>com.hansight.datagenerator.model.MockScenario.getAlarm_level()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3917/buggy-version/src.main.java.com.hansight.datagenerator.utils.UebaAlarmMockDataGenerator.java", "BodyUseAPI": [], "Fixed commit": "c1250621a410a017f2e3e2ad0b9c012fdfa2ba3d", "Url": "https://api.github.com/repos/YifengGuo/mock-data-generator", "Date": "2018-10-16T08:44:41Z"},
{"Line": "1252=>1226", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Collection<?>.contains(tvestergaard.hashmap.HashMap.Node<K, V>)=>tvestergaard.hashmap.HashMap<K, V>.HashMapEntrySet.contains(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1543/buggy-version/src.main.java.tvestergaard.hashmap.HashMap.java", "BodyUseAPI": [], "Fixed commit": "2546d56a3cc738f861005e3ba21303e26c456316", "Url": "https://api.github.com/repos/Thomas-Rosenkrans-Vestergaard/hashmap", "Date": "2018-02-12T08:58:28Z"},
{"Line": "1531=>1490", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Collection<?>.contains(K)=>tvestergaard.hashmap.HashMap<K, V>.HashMapKeySet.contains(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1543/buggy-version/src.main.java.tvestergaard.hashmap.HashMap.java", "BodyUseAPI": [], "Fixed commit": "2546d56a3cc738f861005e3ba21303e26c456316", "Url": "https://api.github.com/repos/Thomas-Rosenkrans-Vestergaard/hashmap", "Date": "2018-02-12T08:58:28Z"},
{"Line": "37=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.log4j.helpers.LogLog.error(java.lang.String,java.lang.Throwable)=>panda.log.LogLog.error(java.lang.String,java.lang.Throwable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3421/buggy-version/panda-core.src.main.java.panda.log.impl.JavaLogAdapter.java", "BodyUseAPI": [], "Fixed commit": "5974f4bcb36fac011aaafc2ddfcdb8c91ca4428a", "Url": "https://api.github.com/repos/pandafw/panda", "Date": "2018-01-26T13:53:11Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jgrapht.intervalgraph.interval.Interval<T>.relativeDistance(T)=>org.jgrapht.intervalgraph.interval.Interval<T>.compareToPoint(T)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1720/buggy-version/jgrapht-core.src.main.java.org.jgrapht.intervalgraph.interval.Interval.java", "BodyUseAPI": [], "Fixed commit": "0ad117087d18250479b6fff6ca3ce1b5f689d208", "Url": "https://api.github.com/repos/christophgruene/jgrapht", "Date": "2018-04-20T13:09:47Z"},
{"Line": "52=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jgrapht.intervalgraph.interval.Interval<T>.relativeDistance(T)=>org.jgrapht.intervalgraph.interval.Interval<T>.compareToPoint(T)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1720/buggy-version/jgrapht-core.src.main.java.org.jgrapht.intervalgraph.CenteredIntervalTree.java", "BodyUseAPI": [], "Fixed commit": "0ad117087d18250479b6fff6ca3ce1b5f689d208", "Url": "https://api.github.com/repos/christophgruene/jgrapht", "Date": "2018-04-20T13:09:47Z"},
{"Line": "50=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jgrapht.intervalgraph.interval.Interval<T>.relativeDistance(T)=>org.jgrapht.intervalgraph.interval.Interval<T>.compareToPoint(T)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1720/buggy-version/jgrapht-core.src.main.java.org.jgrapht.intervalgraph.CenteredIntervalTree.java", "BodyUseAPI": [], "Fixed commit": "0ad117087d18250479b6fff6ca3ce1b5f689d208", "Url": "https://api.github.com/repos/christophgruene/jgrapht", "Date": "2018-04-20T13:09:47Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ylinor.harvester.command.reloadCommand.writeError(org.spongepowered.api.command.CommandSource,ninja.leaping.configurate.objectmapping.ObjectMappingException)=>com.ylinor.harvester.command.ReloadCommand.writeError(org.spongepowered.api.command.CommandSource,ninja.leaping.configurate.objectmapping.ObjectMappingException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5838/buggy-version/src.main.java.com.ylinor.harvester.command.reloadCommand.java", "BodyUseAPI": [], "Fixed commit": "e0ed16cdf49a9dc6c30d1943a3ba0e56aba261f4", "Url": "https://api.github.com/repos/OnapleRPG/Harvester", "Date": "2018-05-13T21:09:06Z"},
{"Line": "37=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ylinor.harvester.command.reloadCommand.writeError(org.spongepowered.api.command.CommandSource,ninja.leaping.configurate.objectmapping.ObjectMappingException)=>com.ylinor.harvester.command.ReloadCommand.writeError(org.spongepowered.api.command.CommandSource,ninja.leaping.configurate.objectmapping.ObjectMappingException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5838/buggy-version/src.main.java.com.ylinor.harvester.command.reloadCommand.java", "BodyUseAPI": [], "Fixed commit": "e0ed16cdf49a9dc6c30d1943a3ba0e56aba261f4", "Url": "https://api.github.com/repos/OnapleRPG/Harvester", "Date": "2018-05-13T21:09:06Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ylinor.harvester.command.reloadCommand.writeError(org.spongepowered.api.command.CommandSource,java.io.IOException)=>com.ylinor.harvester.command.ReloadCommand.writeError(org.spongepowered.api.command.CommandSource,java.io.IOException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5838/buggy-version/src.main.java.com.ylinor.harvester.command.reloadCommand.java", "BodyUseAPI": [], "Fixed commit": "e0ed16cdf49a9dc6c30d1943a3ba0e56aba261f4", "Url": "https://api.github.com/repos/OnapleRPG/Harvester", "Date": "2018-05-13T21:09:06Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ylinor.harvester.command.reloadCommand.writeError(org.spongepowered.api.command.CommandSource,java.io.IOException)=>com.ylinor.harvester.command.ReloadCommand.writeError(org.spongepowered.api.command.CommandSource,java.io.IOException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5838/buggy-version/src.main.java.com.ylinor.harvester.command.reloadCommand.java", "BodyUseAPI": [], "Fixed commit": "e0ed16cdf49a9dc6c30d1943a3ba0e56aba261f4", "Url": "https://api.github.com/repos/OnapleRPG/Harvester", "Date": "2018-05-13T21:09:06Z"},
{"Line": "72=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.spongepowered.api.command.spec.CommandSpec.builder().description(org.spongepowered.api.text.Text.of(\"Reaload Harvester configuration from files.\")).permission(\"harvester.admin\").executor(com.ylinor.itemizer.commands.ReloadCommand)=>org.spongepowered.api.command.spec.CommandSpec.builder().description(org.spongepowered.api.text.Text.of(\"Reaload Harvester configuration from files.\")).permission(\"harvester.admin\").executor(com.ylinor.harvester.command.ReloadCommand)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5838/buggy-version/src.main.java.com.ylinor.harvester.Harvester.java", "BodyUseAPI": [], "Fixed commit": "e0ed16cdf49a9dc6c30d1943a3ba0e56aba261f4", "Url": "https://api.github.com/repos/OnapleRPG/Harvester", "Date": "2018-05-13T21:09:06Z"},
{"Line": "171=>177", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.Runnable() { @java.lang.Override public void run() { mapFragment.getMapAsync(space.infinity.app.activities.IssActivity.this); } }=>new java.lang.Runnable() { @java.lang.Override public void run() { mapFragment.getMapAsync(space.infinity.app.activities.IssActivity.this); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/212/buggy-version/app.src.main.java.space.infinity.app.activities.IssActivity.java", "BodyUseAPI": [], "Fixed commit": "17506677c56dc61baee6620fac321cd051252d78", "Url": "https://api.github.com/repos/icatalin201/Space-Infinity", "Date": "2018-04-22T18:59:28Z"},
{"Line": "165=>171", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.json.JSONException.printStackTrace()=>android.support.design.widget.Snackbar.show()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/212/buggy-version/app.src.main.java.space.infinity.app.activities.IssActivity.java", "BodyUseAPI": [], "Fixed commit": "17506677c56dc61baee6620fac321cd051252d78", "Url": "https://api.github.com/repos/icatalin201/Space-Infinity", "Date": "2018-04-22T18:59:28Z"},
{"Line": "163=>170", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.concurrent.ExecutionException.printStackTrace()=>android.support.design.widget.Snackbar.setActionTextColor(getResources().getColor(R.color.primaryTextColor))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/212/buggy-version/app.src.main.java.space.infinity.app.activities.IssActivity.java", "BodyUseAPI": [], "Fixed commit": "17506677c56dc61baee6620fac321cd051252d78", "Url": "https://api.github.com/repos/icatalin201/Space-Infinity", "Date": "2018-04-22T18:59:28Z"},
{"Line": "252=>260", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.Runnable() { @java.lang.Override public void run() { android.util.Log.i(\"location\", \"updated\"); final com.google.android.gms.maps.model.LatLng location = getLocationIss(); runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { android.util.Log.i(\"map\", \"updated\"); updateLocation(location, googleMap); } }); } }=>new java.lang.Runnable() { @java.lang.Override public void run() { android.util.Log.i(\"location\", \"updated\"); final com.google.android.gms.maps.model.LatLng location = getLocationIss(); runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { android.util.Log.i(\"map\", \"updated\"); updateLocation(location, googleMap); } }); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/212/buggy-version/app.src.main.java.space.infinity.app.activities.IssActivity.java", "BodyUseAPI": [], "Fixed commit": "17506677c56dc61baee6620fac321cd051252d78", "Url": "https://api.github.com/repos/icatalin201/Space-Infinity", "Date": "2018-04-22T18:59:28Z"},
{"Line": "192=>198", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "space.infinity.app.activities.IssActivity.runOnUiThread(java.lang.Runnable)=>space.infinity.app.activities.IssActivity.runOnUiThread(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/212/buggy-version/app.src.main.java.space.infinity.app.activities.IssActivity.java", "BodyUseAPI": [], "Fixed commit": "17506677c56dc61baee6620fac321cd051252d78", "Url": "https://api.github.com/repos/icatalin201/Space-Infinity", "Date": "2018-04-22T18:59:28Z"},
{"Line": "192=>198", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.Runnable() { @java.lang.Override public void run() { velocity.setText(velo); altitude.setText(alti); progressBar.setVisibility(View.GONE); linearLayout.setVisibility(View.VISIBLE); velocity.setVisibility(View.VISIBLE); altitude.setVisibility(View.VISIBLE); space.infinity.app.utils.Helper.setAnimationForAll(space.infinity.app.activities.IssActivity.this, velocity); space.infinity.app.utils.Helper.setAnimationForAll(space.infinity.app.activities.IssActivity.this, altitude); } }=>new java.lang.Runnable() { @java.lang.Override public void run() { velocity.setText(velo); altitude.setText(alti); progressBar.setVisibility(View.GONE); linearLayout.setVisibility(View.VISIBLE); velocity.setVisibility(View.VISIBLE); altitude.setVisibility(View.VISIBLE); space.infinity.app.utils.Helper.setAnimationForAll(space.infinity.app.activities.IssActivity.this, velocity); space.infinity.app.utils.Helper.setAnimationForAll(space.infinity.app.activities.IssActivity.this, altitude); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/212/buggy-version/app.src.main.java.space.infinity.app.activities.IssActivity.java", "BodyUseAPI": [], "Fixed commit": "17506677c56dc61baee6620fac321cd051252d78", "Url": "https://api.github.com/repos/icatalin201/Space-Infinity", "Date": "2018-04-22T18:59:28Z"},
{"Line": "171=>177", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.os.Handler.postDelayed(java.lang.Runnable,int)=>android.os.Handler.postDelayed(java.lang.Runnable,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/212/buggy-version/app.src.main.java.space.infinity.app.activities.IssActivity.java", "BodyUseAPI": [], "Fixed commit": "17506677c56dc61baee6620fac321cd051252d78", "Url": "https://api.github.com/repos/icatalin201/Space-Infinity", "Date": "2018-04-22T18:59:28Z"},
{"Line": "163=>170", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.concurrent.ExecutionException.printStackTrace()=>android.support.design.widget.Snackbar.setActionTextColor(getResources().getColor(R.color.primaryTextColor))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/212/buggy-version/app.src.main.java.space.infinity.app.activities.IssActivity.java", "BodyUseAPI": [], "Fixed commit": "17506677c56dc61baee6620fac321cd051252d78", "Url": "https://api.github.com/repos/icatalin201/Space-Infinity", "Date": "2018-04-22T18:59:28Z"},
{"Line": "257=>265", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "space.infinity.app.activities.IssActivity.5.runOnUiThread(java.lang.Runnable)=>space.infinity.app.activities.IssActivity.6.runOnUiThread(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/212/buggy-version/app.src.main.java.space.infinity.app.activities.IssActivity.java", "BodyUseAPI": [], "Fixed commit": "17506677c56dc61baee6620fac321cd051252d78", "Url": "https://api.github.com/repos/icatalin201/Space-Infinity", "Date": "2018-04-22T18:59:28Z"},
{"Line": "117=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "at.pcgamingfreaks.MarriageMaster.Bukkit.Listener.MarryEvent.getPriest()=>at.pcgamingfreaks.MarriageMaster.Bukkit.Listener.MarryEvent.getPriestIfNotOneOfTheCouple()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2882/buggy-version/src.at.pcgamingfreaks.MarriageMaster.Bukkit.Listener.EconomyManager.java", "BodyUseAPI": [], "Fixed commit": "9e8a47d7c962284e564f3d77886b638f9b1bd7db", "Url": "https://api.github.com/repos/GeorgH93/MarriageMaster", "Date": "2018-07-17T11:59:41Z"},
{"Line": "127=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "at.pcgamingfreaks.MarriageMaster.Bukkit.Listener.DivorceEvent.getPriest()=>at.pcgamingfreaks.MarriageMaster.Bukkit.Listener.DivorceEvent.getPriestIfNotOneOfTheCouple()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2882/buggy-version/src.at.pcgamingfreaks.MarriageMaster.Bukkit.Listener.EconomyManager.java", "BodyUseAPI": [], "Fixed commit": "9e8a47d7c962284e564f3d77886b638f9b1bd7db", "Url": "https://api.github.com/repos/GeorgH93/MarriageMaster", "Date": "2018-07-17T11:59:41Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and()=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(\"/logout\").logoutSuccessUrl(java.lang.String)=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(\"/logout\").logoutSuccessUrl(\"/logout/page\").deleteCookies(\"JSESSIONID\").invalidateHttpSession(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout()=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(\"/logout\").logoutSuccessUrl(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\").and()=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and().formLogin().loginProcessingUrl(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(java.lang.String)=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(\"/logout\").logoutSuccessUrl(\"/logout/page\").deleteCookies(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(com.douyu.supermap.shakingmap.config.springsecurity.LoginAuthFailHandler)=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(\"/user/**\").hasAnyRole(java.lang.String,java.lang.String)=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and().formLogin()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(\"/logout\").logoutSuccessUrl(\"/logout/page\").deleteCookies(\"JSESSIONID\").invalidateHttpSession(boolean)=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(\"/logout\").logoutSuccessUrl(\"/logout/page\").deleteCookies(\"JSESSIONID\").invalidateHttpSession(true).and().exceptionHandling()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\").and().formLogin()=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(com.douyu.supermap.shakingmap.config.springsecurity.LoginAuthFailHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(\"/logout\").logoutSuccessUrl(java.lang.String)=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(\"/logout\").logoutSuccessUrl(\"/logout/page\").deleteCookies(\"JSESSIONID\").invalidateHttpSession(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(\"/logout\").logoutSuccessUrl(\"/logout/page\").deleteCookies(\"JSESSIONID\").invalidateHttpSession(true).and()=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(\"/logout\").logoutSuccessUrl(\"/logout/page\").deleteCookies(\"JSESSIONID\").invalidateHttpSession(true).and().exceptionHandling().accessDeniedPage(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\").and().formLogin().loginProcessingUrl(java.lang.String)=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(\"/logout\").logoutSuccessUrl(\"/logout/page\").deleteCookies(java.lang.String)=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and().formLogin().loginProcessingUrl(\"/login\").failureHandler(loginAuthFailHandler()).and().logout().logoutUrl(\"/logout\").logoutSuccessUrl(\"/logout/page\").deleteCookies(\"JSESSIONID\").invalidateHttpSession(true).and()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").antMatchers(java.lang.String)=>http.authorizeRequests().antMatchers(\"/visitor/**\").permitAll().antMatchers(\"/static/**\").permitAll().antMatchers(\"/user/login\").permitAll().antMatchers(\"/user/register\").permitAll().antMatchers(\"/admin/login\").permitAll().antMatchers(\"/admin/**\").hasRole(\"ADMIN\").and()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/385/buggy-version/src.main.java.com.douyu.supermap.shakingmap.config.springsecurity.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "45477c7d5548bb15e0293a2a27c8c17d59ea4b07", "Url": "https://api.github.com/repos/miaozhiyan/shakingmap", "Date": "2018-05-17T10:14:41Z"},
{"Line": "131=>131", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.biojava.nbio.structure.Chain.getId()=>org.biojava.nbio.structure.Chain.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4343/buggy-version/eppic-cli.src.main.java.eppic.assembly.LatticeGraph3D.java", "BodyUseAPI": [], "Fixed commit": "d85849aab2a17328b819961d0af2258f636feb09", "Url": "https://api.github.com/repos/eppic-team/eppic", "Date": "2018-04-17T00:27:38Z"},
{"Line": "138=>138", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Toast.makeText(getApplicationContext(),((incorrect) + \" incorrect\"),Toast.LENGTH_LONG)=>android.widget.Toast.makeText(getApplicationContext(),java.lang.String,Toast.LENGTH_LONG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8300/buggy-version/app.src.main.java.com.jorgecastillo.kanadrill.DrawActivity.java", "BodyUseAPI": [], "Fixed commit": "6d1268af72695b26e0474aba4c5ff83fa7758a8c", "Url": "https://api.github.com/repos/RodrigoDavy/Kana-Drill-Plus", "Date": "2018-09-25T22:35:23Z"},
{"Line": "44=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.pixeltime.healpot.enhancement.util.Broadcast.getLocalizedName(org.bukkit.inventory.ItemStack)=>org.pixeltime.healpot.enhancement.util.Broadcast.getFriendlyName(org.bukkit.inventory.ItemStack)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9217/buggy-version/src.org.pixeltime.healpot.enhancement.util.Broadcast.java", "BodyUseAPI": [], "Fixed commit": "4c991b11713fcf8a18496b8d6071950724625f1a", "Url": "https://api.github.com/repos/25/EnchantmentsEnhance", "Date": "2018-03-15T00:09:08Z"},
{"Line": "36=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.pixeltime.healpot.enhancement.util.Broadcast.getLocalizedName(org.bukkit.inventory.ItemStack)=>org.pixeltime.healpot.enhancement.util.Broadcast.getFriendlyName(org.bukkit.inventory.ItemStack)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9217/buggy-version/src.org.pixeltime.healpot.enhancement.util.Broadcast.java", "BodyUseAPI": [], "Fixed commit": "4c991b11713fcf8a18496b8d6071950724625f1a", "Url": "https://api.github.com/repos/25/EnchantmentsEnhance", "Date": "2018-03-15T00:09:08Z"},
{"Line": "145=>144", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Toast.makeText(this, \" THIS NEED SEUCRITY CHECKING\", Toast.LENGTH_LONG).show()=>android.util.Log.e(java.lang.String,(((\"pos global: \" + (positionGlobal)) + \" lupwocount: \") + (dbHandler.lookUpWorkoutCount(includeHidden))))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4827/buggy-version/app.src.main.java.com.finn.laakso.hangboardapp.WorkoutHistoryActivity.java", "BodyUseAPI": [], "Fixed commit": "ffeb050bda084d4eb3e929fa6c3702123027b6de", "Url": "https://api.github.com/repos/drugggi/HangboardApp", "Date": "2018-09-03T12:46:34Z"},
{"Line": "84=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.rnfingerprint.FingerprintDialog.2.dismiss()=>com.rnfingerprint.FingerprintDialog.2.dismissAllowingStateLoss()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4848/buggy-version/android.src.main.java.com.rnfingerprint.FingerprintDialog.java", "BodyUseAPI": [], "Fixed commit": "983d2fca8e334bfe4f6c382c256a45ec595bc796", "Url": "https://api.github.com/repos/francescosgherzi/react-native-touch-id", "Date": "2018-05-16T08:41:28Z"},
{"Line": "64=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.rnfingerprint.FingerprintDialog.dismiss()=>com.rnfingerprint.FingerprintDialog.dismissAllowingStateLoss()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4848/buggy-version/android.src.main.java.com.rnfingerprint.FingerprintDialog.java", "BodyUseAPI": [], "Fixed commit": "983d2fca8e334bfe4f6c382c256a45ec595bc796", "Url": "https://api.github.com/repos/francescosgherzi/react-native-touch-id", "Date": "2018-05-16T08:41:28Z"},
{"Line": "126=>126", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.rnfingerprint.FingerprintDialog.dismiss()=>com.rnfingerprint.FingerprintDialog.dismissAllowingStateLoss()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4848/buggy-version/android.src.main.java.com.rnfingerprint.FingerprintDialog.java", "BodyUseAPI": [], "Fixed commit": "983d2fca8e334bfe4f6c382c256a45ec595bc796", "Url": "https://api.github.com/repos/francescosgherzi/react-native-touch-id", "Date": "2018-05-16T08:41:28Z"},
{"Line": "120=>120", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.rnfingerprint.FingerprintDialog.dismiss()=>com.rnfingerprint.FingerprintDialog.dismissAllowingStateLoss()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4848/buggy-version/android.src.main.java.com.rnfingerprint.FingerprintDialog.java", "BodyUseAPI": [], "Fixed commit": "983d2fca8e334bfe4f6c382c256a45ec595bc796", "Url": "https://api.github.com/repos/francescosgherzi/react-native-touch-id", "Date": "2018-05-16T08:41:28Z"},
{"Line": "132=>138", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.rnfingerprint.FingerprintDialog.dismiss()=>com.rnfingerprint.FingerprintDialog.dismissAllowingStateLoss()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4848/buggy-version/android.src.main.java.com.rnfingerprint.FingerprintDialog.java", "BodyUseAPI": [], "Fixed commit": "983d2fca8e334bfe4f6c382c256a45ec595bc796", "Url": "https://api.github.com/repos/francescosgherzi/react-native-touch-id", "Date": "2018-05-16T08:41:28Z"},
{"Line": "576=>595", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Arrays.asList(org.hisp.dhis.trackedentity.hibernate.TRACKED_ENTITY_INSTANCE_ID,org.hisp.dhis.trackedentity.hibernate.CREATED_ID,org.hisp.dhis.trackedentity.hibernate.LAST_UPDATED_ID,org.hisp.dhis.trackedentity.hibernate.ORG_UNIT_ID,org.hisp.dhis.trackedentity.hibernate.ORG_UNIT_NAME,org.hisp.dhis.trackedentity.hibernate.TRACKED_ENTITY_ID,org.hisp.dhis.trackedentity.hibernate.INACTIVE_ID)=>java.util.Arrays.asList(org.hisp.dhis.trackedentity.TrackedEntityInstanceQueryParams.TRACKED_ENTITY_INSTANCE_ID,org.hisp.dhis.trackedentity.TrackedEntityInstanceQueryParams.CREATED_ID,org.hisp.dhis.trackedentity.TrackedEntityInstanceQueryParams.LAST_UPDATED_ID,org.hisp.dhis.trackedentity.TrackedEntityInstanceQueryParams.ORG_UNIT_ID,org.hisp.dhis.trackedentity.TrackedEntityInstanceQueryParams.ORG_UNIT_NAME,org.hisp.dhis.trackedentity.TrackedEntityInstanceQueryParams.TRACKED_ENTITY_ID,org.hisp.dhis.trackedentity.TrackedEntityInstanceQueryParams.INACTIVE_ID)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5780/buggy-version/dhis-2.dhis-services.dhis-service-core.src.main.java.org.hisp.dhis.trackedentity.hibernate.HibernateTrackedEntityInstanceStore.java", "BodyUseAPI": [], "Fixed commit": "8a5b88069d2705afc9009481c57880481b0d3e67", "Url": "https://api.github.com/repos/hispindia/dhis2-Core", "Date": "2018-05-18T12:41:45Z"},
{"Line": "323=>342", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Map<java.lang.String, java.lang.String>.put(org.hisp.dhis.trackedentity.hibernate.DELETED,rowSet.getString(org.hisp.dhis.trackedentity.hibernate.DELETED))=>java.util.Map<java.lang.String, java.lang.String>.put(org.hisp.dhis.trackedentity.TrackedEntityInstanceQueryParams.DELETED,rowSet.getString(org.hisp.dhis.trackedentity.TrackedEntityInstanceQueryParams.DELETED))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5780/buggy-version/dhis-2.dhis-services.dhis-service-core.src.main.java.org.hisp.dhis.trackedentity.hibernate.HibernateTrackedEntityInstanceStore.java", "BodyUseAPI": [], "Fixed commit": "8a5b88069d2705afc9009481c57880481b0d3e67", "Url": "https://api.github.com/repos/hispindia/dhis2-Core", "Date": "2018-05-18T12:41:45Z"},
{"Line": "104=>104", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Button.setOnClickListener(View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9329/buggy-version/app.src.main.java.it.uniba.di.nitwx.progettoMobile.HomeActivity.java", "BodyUseAPI": [], "Fixed commit": "3b781ea9092999e16cfcf33de2add238e4fcb929", "Url": "https://api.github.com/repos/Bartolo96/Progetto_mobile", "Date": "2018-07-12T15:37:19Z"},
{"Line": "108=>114", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "mGoogleSignInClient.signOut().addOnCompleteListener(it.uniba.di.nitwx.progettoMobile.HomeActivity,com.google.android.gms.tasks.OnCompleteListener<java.lang.Void>)=>mGoogleSignInClient.signOut().addOnCompleteListener(it.uniba.di.nitwx.progettoMobile.HomeActivity,com.google.android.gms.tasks.OnCompleteListener<java.lang.Void>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9329/buggy-version/app.src.main.java.it.uniba.di.nitwx.progettoMobile.HomeActivity.java", "BodyUseAPI": [], "Fixed commit": "3b781ea9092999e16cfcf33de2add238e4fcb929", "Url": "https://api.github.com/repos/Bartolo96/Progetto_mobile", "Date": "2018-07-12T15:37:19Z"},
{"Line": "2002=>2002", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.bukkit.inventory.ShapelessRecipe.addIngredient(Material.SAPLING)=>org.bukkit.inventory.ShapelessRecipe.addIngredient(Material.SAPLING,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3874/buggy-version/src.com.fattymieo.survival.Survival.java", "BodyUseAPI": [], "Fixed commit": "b52a5fdc7257c67caf28468dfe92cc7f13668608", "Url": "https://api.github.com/repos/FattyMieo/SurvivalPlus", "Date": "2018-06-11T04:27:06Z"},
{"Line": "251=>251", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.utils.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5671/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "002a7fb34c0d8782cac0bc11398be0bbbe6c8221", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "228=>228", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.utils.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5671/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "002a7fb34c0d8782cac0bc11398be0bbbe6c8221", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "34=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.gbif.pipelines.config.DataPipelineOptionsFactory.create(org.apache.hadoop.conf.Configuration,java.lang.String[])=>org.apache.beam.sdk.options.PipelineOptionsFactory.fromArgs(java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8295/buggy-version/beam-common.src.main.java.org.gbif.pipelines.config.DataPipelineOptionsFactory.java", "BodyUseAPI": [], "Fixed commit": "1d1c9daa99e0619db59ffa3a7bb54633edf60f88", "Url": "https://api.github.com/repos/gbif/pipelines", "Date": "2018-04-12T13:43:18Z"},
{"Line": "34=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.gbif.pipelines.config.DataPipelineOptionsFactory.create(org.apache.hadoop.conf.Configuration,java.lang.String[])=>org.apache.beam.sdk.options.PipelineOptionsFactory.fromArgs(args).withValidation().as(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8295/buggy-version/beam-common.src.main.java.org.gbif.pipelines.config.DataPipelineOptionsFactory.java", "BodyUseAPI": [], "Fixed commit": "1d1c9daa99e0619db59ffa3a7bb54633edf60f88", "Url": "https://api.github.com/repos/gbif/pipelines", "Date": "2018-04-12T13:43:18Z"},
{"Line": "95=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.roohia.hp.laundry.model.bo.NewOrderItem.getWashQuantity()=>com.roohia.hp.laundry.model.bo.NewOrderItem.getPressQuantity()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7181/buggy-version/app.src.main.java.com.roohia.hp.laundry.gui.adapters.BasketItemsAdapter.java", "BodyUseAPI": [], "Fixed commit": "cfca919f3ee5b8859cf51a1394359441e8e7076a", "Url": "https://api.github.com/repos/Roohiashahzad/Laundry", "Date": "2018-04-30T12:11:58Z"},
{"Line": "1145=>1145", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.regex.Matcher.matches()=>java.util.regex.Matcher.find()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4275/buggy-version/components.blitz.src.ome.services.blitz.repo.ManagedRepositoryI.java", "BodyUseAPI": [], "Fixed commit": "fee4399bf45b9fd1a8bfd0d2d72f01e6094ab803", "Url": "https://api.github.com/repos/snoopycrimecop/openmicroscopy", "Date": "2018-08-26T02:03:07Z"},
{"Line": "1145=>1145", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.regex.Matcher.matches()=>java.util.regex.Matcher.find()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4275/buggy-version/components.blitz.src.ome.services.blitz.repo.ManagedRepositoryI.java", "BodyUseAPI": [], "Fixed commit": "fee4399bf45b9fd1a8bfd0d2d72f01e6094ab803", "Url": "https://api.github.com/repos/snoopycrimecop/openmicroscopy", "Date": "2018-08-26T02:03:07Z"},
{"Line": "212=>212", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getActivity().getFragmentManager()=>android.app.Activity.getFragmentManager()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1541/buggy-version/app.src.main.java.com.mikehelland.omgtechnogauntlet.SoundSetFragment.java", "BodyUseAPI": [], "Fixed commit": "ebdcfcbb86680a4dc82441059e813aff20f3ff9c", "Url": "https://api.github.com/repos/mikehelland/techno-gauntlet", "Date": "2018-01-12T02:46:57Z"},
{"Line": "965=>967", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Map<org.sa.rainbow.stitch.core.StrategyNode, java.lang.Boolean>.put(org.sa.rainbow.stitch.core.StrategyNode,java.lang.Object)=>java.util.Map<org.sa.rainbow.stitch.core.StrategyNode, java.lang.Boolean>.put(org.sa.rainbow.stitch.core.StrategyNode,java.lang.Boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7099/buggy-version/rainbow.rainbow-stitch.src.main.java.org.sa.rainbow.stitch.core.Strategy.java", "BodyUseAPI": [], "Fixed commit": "2e4fb6ab1e9f717c91817d233cbd5d150bbb03fd", "Url": "https://api.github.com/repos/cmu-able/rainbow", "Date": "2018-10-30T19:58:20Z"},
{"Line": "258=>253", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.fossasia.pslab.activity.WaveGeneratorActivity.getString(R.string.square)=>org.fossasia.pslab.activity.WaveGeneratorActivity.getString(R.string.triangular)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9871/buggy-version/app.src.main.java.org.fossasia.pslab.activity.WaveGeneratorActivity.java", "BodyUseAPI": [], "Fixed commit": "79a5ae271ece33fb65ff7ff09410b2b41bfe610c", "Url": "https://api.github.com/repos/Avjeet/pslab-android", "Date": "2018-06-09T08:09:01Z"},
{"Line": "139=>136", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "kieker.monitoring.writer.tcp.LOG.info(java.lang.String)=>org.slf4j.Logger.info(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9127/buggy-version/kieker-monitoring.src.kieker.monitoring.writer.tcp.SingleSocketTcpWriter.java", "BodyUseAPI": [], "Fixed commit": "fdec4141df412cfdb3b83fb02a3ef02f768bfb25", "Url": "https://api.github.com/repos/kieker-monitoring/kieker", "Date": "2018-03-10T15:02:40Z"},
{"Line": "36=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "gis2018.udacity.pomodoro.SettingsActivity.getPreferences(Context.MODE_PRIVATE)=>android.preference.PreferenceManager.getDefaultSharedPreferences(gis2018.udacity.pomodoro.SettingsActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5341/buggy-version/app.src.main.java.gis2018.udacity.pomodoro.SettingsActivity.java", "BodyUseAPI": [], "Fixed commit": "491eea03fac9d99648cf2ed09120be20a2abbd03", "Url": "https://api.github.com/repos/thedevelopersanjeev/abnd-track-pomodoro-timer-app", "Date": "2018-10-19T14:07:03Z"},
{"Line": "36=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "gis2018.udacity.pomodoro.SettingsActivity.getPreferences(Context.MODE_PRIVATE)=>android.preference.PreferenceManager.getDefaultSharedPreferences(gis2018.udacity.pomodoro.SettingsActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5341/buggy-version/app.src.main.java.gis2018.udacity.pomodoro.SettingsActivity.java", "BodyUseAPI": [], "Fixed commit": "491eea03fac9d99648cf2ed09120be20a2abbd03", "Url": "https://api.github.com/repos/thedevelopersanjeev/abnd-track-pomodoro-timer-app", "Date": "2018-10-19T14:07:03Z"},
{"Line": "48=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javax.servlet.http.HttpServletRequest.getAttribute(Constants.RDF_VALIDATION_OBJECT)=>baseRequestHandler.getRequest().getAttribute(Constants.RDF_VALIDATION_OBJECT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3928/buggy-version/java.registry-interceptor.src.main.java.io.opensaber.registry.interceptor.RDFValidationInterceptor.java", "BodyUseAPI": [], "Fixed commit": "00a3892a244f373c4afc81b2ae79f101269a8dcc", "Url": "https://api.github.com/repos/project-sunbird/open-saber", "Date": "2018-10-12T04:50:55Z"},
{"Line": "130=>130", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.figaro.model.Turno.calculatePrecio()=>com.figaro.model.Turno.getMontoCobro()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2198/buggy-version/src.main.java.com.figaro.service.EstadisticasService.java", "BodyUseAPI": [], "Fixed commit": "8b68cb45c45942bdf0d7e67bc09f85056e291498", "Url": "https://api.github.com/repos/gonzalocasal/figaro", "Date": "2018-03-12T22:36:56Z"},
{"Line": "266=>265", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.artursworld.nccn.model.entity.FearOfProgressionQuestionnaire.getCreationDate_PK()=>com.artursworld.nccn.model.entity.FearOfProgressionQuestionnaire.getUpdateDate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/840/buggy-version/NCCN.app.src.main.java.com.artursworld.nccn.model.entity.FearOfProgressionQuestionnaire.java", "BodyUseAPI": [], "Fixed commit": "9ddf610284ad87ce99e12d071d3068142d52e8b5", "Url": "https://api.github.com/repos/lidox/nccn-distress-thermometer", "Date": "2018-09-12T15:40:47Z"},
{"Line": "150=>151", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.List<java.lang.String>.get(int)=>database.getReference().child(\"Gallerys\").child(Detail_Loc).child(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7697/buggy-version/app.src.main.java.com.example.daewon.a2018_seoulapp.Activity.Detail_Gallery.java", "BodyUseAPI": [], "Fixed commit": "b32db9d38eaf10abd4d02f8f2cb0850fb018fbbe", "Url": "https://api.github.com/repos/KwonDae/2018_seoulapp", "Date": "2018-09-24T11:49:39Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.macewan.getgo.getgo_now.Home.HomeActivity.setContentView(R.layout.activity_main)=>com.macewan.getgo.getgo_now.Home.HomeActivity.setContentView(R.layout.home)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2361/buggy-version/GetGo-now.app.src.main.java.com.macewan.getgo.getgo_now.Home.HomeActivity.java", "BodyUseAPI": [], "Fixed commit": "184d15dee582b9a4bdb22ad52406985fa468ec59", "Url": "https://api.github.com/repos/lilianatang/GetGo-v13", "Date": "2018-04-14T00:50:22Z"},
{"Line": "21=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.SinglyLinkedList<E>.addLast(E)=>fundamentals.linkedlists.SinglyLinkedList<E>.addLast(E)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/queues.LinkedQueue.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.SinglyLinkedList<E>.removeFirst()=>fundamentals.linkedlists.SinglyLinkedList<E>.removeFirst()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/queues.LinkedQueue.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "11=>11", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.SinglyLinkedList<E>.size()=>fundamentals.linkedlists.SinglyLinkedList<E>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/queues.LinkedQueue.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "16=>16", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.SinglyLinkedList<E>.isEmpty()=>fundamentals.linkedlists.SinglyLinkedList<E>.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/queues.LinkedQueue.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.SinglyLinkedList<E>.first()=>fundamentals.linkedlists.SinglyLinkedList<E>.first()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/queues.LinkedQueue.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "37=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.CircularlyLinkedList<E>.removeFirst()=>fundamentals.linkedlists.CircularlyLinkedList<E>.removeFirst()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/queues.LinkedCircularQueue.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "12=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.CircularlyLinkedList<E>.rotate()=>fundamentals.linkedlists.CircularlyLinkedList<E>.rotate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/queues.LinkedCircularQueue.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.CircularlyLinkedList<E>.addLast(E)=>fundamentals.linkedlists.CircularlyLinkedList<E>.addLast(E)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/queues.LinkedCircularQueue.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.CircularlyLinkedList<E>.first()=>fundamentals.linkedlists.CircularlyLinkedList<E>.first()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/queues.LinkedCircularQueue.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "22=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.CircularlyLinkedList<E>.isEmpty()=>fundamentals.linkedlists.CircularlyLinkedList<E>.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/queues.LinkedCircularQueue.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "17=>17", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.CircularlyLinkedList<E>.size()=>fundamentals.linkedlists.CircularlyLinkedList<E>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/queues.LinkedCircularQueue.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.SinglyLinkedList<E>.addFirst(E)=>fundamentals.linkedlists.SinglyLinkedList<E>.addFirst(E)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/stacks.LinkedStack.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "22=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.SinglyLinkedList<E>.removeFirst()=>fundamentals.linkedlists.SinglyLinkedList<E>.removeFirst()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/stacks.LinkedStack.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "10=>10", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.SinglyLinkedList<E>.size()=>fundamentals.linkedlists.SinglyLinkedList<E>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/stacks.LinkedStack.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "14=>14", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.SinglyLinkedList<E>.isEmpty()=>fundamentals.linkedlists.SinglyLinkedList<E>.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/stacks.LinkedStack.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lists.SinglyLinkedList<E>.first()=>fundamentals.linkedlists.SinglyLinkedList<E>.first()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5134/buggy-version/stacks.LinkedStack.java", "BodyUseAPI": [], "Fixed commit": "9baaccbb2dce0099b6e72ff0515c1ab5729d213a", "Url": "https://api.github.com/repos/saipavans/DSA", "Date": "2018-08-17T16:16:51Z"},
{"Line": "355=>356", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.owncloud.android.utils.ThemeUtils.setStatusBarColor(com.owncloud.android.ui.activity.ToolbarActivity,com.owncloud.android.utils.ThemeUtils.primaryColor(getContext()))=>com.owncloud.android.ui.activity.ToolbarActivity.setupToolbar()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9151/buggy-version/src.main.java.com.owncloud.android.ui.fragment.FileDetailFragment.java", "BodyUseAPI": [], "Fixed commit": "90d7d60dcae0fe1d4703613c0c532f3c4be68d22", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2018-05-14T17:15:46Z"},
{"Line": "180=>180", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.fmning.service.temp.Cmain.setTemp(java.lang.Object)=>com.fmning.service.temp.Cmain.setTemp(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8124/buggy-version/src.main.java.com.fmning.wcservice.controller.mvc.TempController.java", "BodyUseAPI": [], "Fixed commit": "6c4070c5be97deef6b6ab2a8e7d8f19b63ba2f04", "Url": "https://api.github.com/repos/DerekFangming/WPI_CSA_Service", "Date": "2018-03-30T23:58:50Z"},
{"Line": "323=>326", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.phill.tutrle_tom_vs_the_sea_of_straws.SwimmingTurtleView.getHeight()=>android.graphics.Bitmap.getHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6768/buggy-version/app.src.main.java.com.example.phill.tutrle_tom_vs_the_sea_of_straws.SwimmingTurtleView.java", "BodyUseAPI": [], "Fixed commit": "f89da458844b1c5ea57ff19fefe3c47b1d060736", "Url": "https://api.github.com/repos/phillip-ables/android-tutrle-game", "Date": "2018-10-02T02:34:11Z"},
{"Line": "322=>325", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.phill.tutrle_tom_vs_the_sea_of_straws.SwimmingTurtleView.getWidth()=>android.graphics.Bitmap.getWidth()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6768/buggy-version/app.src.main.java.com.example.phill.tutrle_tom_vs_the_sea_of_straws.SwimmingTurtleView.java", "BodyUseAPI": [], "Fixed commit": "f89da458844b1c5ea57ff19fefe3c47b1d060736", "Url": "https://api.github.com/repos/phillip-ables/android-tutrle-game", "Date": "2018-10-02T02:34:11Z"},
{"Line": "60=>58", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ciandt.techgallery.persistence.model.ApplicationConfiguration.getValue()=>org.apache.commons.lang.StringUtils.isNotBlank(domain.getValue())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4731/buggy-version/src.main.java.com.ciandt.techgallery.service.endpoint.TechGalleryAuthenticator.java", "BodyUseAPI": [], "Fixed commit": "9f81b42701ce6e338e6885f95b5aed88365919e9", "Url": "https://api.github.com/repos/ciandt-dev/tech-gallery", "Date": "2018-02-14T20:55:37Z"},
{"Line": "170=>171", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.mifos.mobile.passcode.MifosPassCodeActivity.showToaster(android.support.v4.widget.NestedScrollView,R.string.incorrect_passcode)=>android.os.CountDownTimer.start()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5035/buggy-version/mifos-passcode.src.main.java.com.mifos.mobile.passcode.MifosPassCodeActivity.java", "BodyUseAPI": [], "Fixed commit": "74a4c39e46144544e18800b802951b57e9556f98", "Url": "https://api.github.com/repos/miPlodder/mifos-passcode", "Date": "2018-06-04T15:58:12Z"},
{"Line": "24=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "window.frame.setVisible(boolean)=>javax.swing.JFrame.setVisible(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5313/buggy-version/Enamel.src.enamel.DeleteEvent.java", "BodyUseAPI": [], "Fixed commit": "04cdaf2f607ebccef6cc9213cffc7483068c6cbf", "Url": "https://api.github.com/repos/DSantaguida/EECS2311-Group17", "Date": "2018-03-21T19:26:51Z"},
{"Line": "24=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "window.frame.setVisible(boolean)=>javax.swing.JFrame.setVisible(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5313/buggy-version/Enamel.src.enamel.DeleteEvent.java", "BodyUseAPI": [], "Fixed commit": "04cdaf2f607ebccef6cc9213cffc7483068c6cbf", "Url": "https://api.github.com/repos/DSantaguida/EECS2311-Group17", "Date": "2018-03-21T19:26:51Z"},
{"Line": "309=>309", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.lang.String>.add(java.lang.String)=>java.lang.String.replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7063/buggy-version/src.com.sciquizapp.sciquizserver.AddNewQuestion.java", "BodyUseAPI": [], "Fixed commit": "c9b73df31afbf477ce101504eee3b5b761eaa97a", "Url": "https://api.github.com/repos/maximerchrd/sciquiz_server", "Date": "2018-01-30T11:49:22Z"},
{"Line": "276=>276", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.sql.Statement.executeQuery(java.lang.String)=>java.sql.Statement.executeUpdate(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1123/buggy-version/src.edu.utexas.wrap.Link.java", "BodyUseAPI": [], "Fixed commit": "9de2e57cc6e6db5162c9e8c35411244d17ae8b03", "Url": "https://api.github.com/repos/spartalab/wrap", "Date": "2018-09-17T15:26:43Z"},
{"Line": "74=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.github.lxgaming.sledgehammer.Sledgehammer.getInstance().getLogger().debug(java.lang.String,java.lang.String)=>io.github.lxgaming.sledgehammer.Sledgehammer.getInstance().debugMessage(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9247/buggy-version/src.main.java.io.github.lxgaming.sledgehammer.managers.CommandManager.java", "BodyUseAPI": [], "Fixed commit": "c81c1bfee3dc92c7549245b2864c0560cc000632", "Url": "https://api.github.com/repos/LXGaming/Sledgehammer", "Date": "2018-09-11T23:08:16Z"},
{"Line": "108=>108", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.github.lxgaming.sledgehammer.Sledgehammer.getInstance().getLogger().debug(java.lang.String,java.lang.String,parentCommand.getClass().getSimpleName())=>io.github.lxgaming.sledgehammer.Sledgehammer.getInstance().debugMessage(java.lang.String,java.lang.String,parentCommand.getClass().getSimpleName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9247/buggy-version/src.main.java.io.github.lxgaming.sledgehammer.managers.CommandManager.java", "BodyUseAPI": [], "Fixed commit": "c81c1bfee3dc92c7549245b2864c0560cc000632", "Url": "https://api.github.com/repos/LXGaming/Sledgehammer", "Date": "2018-09-11T23:08:16Z"},
{"Line": "85=>85", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.github.lxgaming.sledgehammer.Sledgehammer.getInstance().getLogger().debug(java.lang.String,java.lang.String,command.getClass().getSimpleName())=>io.github.lxgaming.sledgehammer.Sledgehammer.getInstance().debugMessage(java.lang.String,java.lang.String,command.getClass().getSimpleName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9247/buggy-version/src.main.java.io.github.lxgaming.sledgehammer.managers.CommandManager.java", "BodyUseAPI": [], "Fixed commit": "c81c1bfee3dc92c7549245b2864c0560cc000632", "Url": "https://api.github.com/repos/LXGaming/Sledgehammer", "Date": "2018-09-11T23:08:16Z"},
{"Line": "55=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.github.lxgaming.sledgehammer.Sledgehammer.getInstance().getLogger().debug(java.lang.String,command.get().getPrimaryAlias().orElse(\"Unknown\"),commandSource.getName())=>io.github.lxgaming.sledgehammer.Sledgehammer.getInstance().debugMessage(java.lang.String,command.get().getPrimaryAlias().orElse(\"Unknown\"),commandSource.getName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9247/buggy-version/src.main.java.io.github.lxgaming.sledgehammer.managers.CommandManager.java", "BodyUseAPI": [], "Fixed commit": "c81c1bfee3dc92c7549245b2864c0560cc000632", "Url": "https://api.github.com/repos/LXGaming/Sledgehammer", "Date": "2018-09-11T23:08:16Z"},
{"Line": "45=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.github.lxgaming.sledgehammer.Sledgehammer.getInstance().getLogger().debug(java.lang.String,blockPos.getX(),blockPos.getY(),blockPos.getZ())=>io.github.lxgaming.sledgehammer.Sledgehammer.getInstance().debugMessage(java.lang.String,blockPos.getX(),blockPos.getY(),blockPos.getZ())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9247/buggy-version/src.main.java.io.github.lxgaming.sledgehammer.mixin.forge.common.MixinForgeHooks_Harvest.java", "BodyUseAPI": [], "Fixed commit": "c81c1bfee3dc92c7549245b2864c0560cc000632", "Url": "https://api.github.com/repos/LXGaming/Sledgehammer", "Date": "2018-09-11T23:08:16Z"},
{"Line": "71=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.github.lxgaming.sledgehammer.Sledgehammer.getInstance().getLogger().debug(java.lang.String,java.lang.String)=>io.github.lxgaming.sledgehammer.Sledgehammer.getInstance().debugMessage(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9247/buggy-version/src.main.java.io.github.lxgaming.sledgehammer.managers.IntegrationManager.java", "BodyUseAPI": [], "Fixed commit": "c81c1bfee3dc92c7549245b2864c0560cc000632", "Url": "https://api.github.com/repos/LXGaming/Sledgehammer", "Date": "2018-09-11T23:08:16Z"},
{"Line": "53=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.opengis.geometry.coordinate.GeometryFactory.createPoint(com.vividsolutions.jts.geom.Coordinate)=>com.vividsolutions.jts.geom.GeometryFactory.createPoint(com.vividsolutions.jts.geom.Coordinate)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8731/buggy-version/CoordinatesTransformer.java", "BodyUseAPI": [], "Fixed commit": "b6fbb931ca347f0ec99b1be26bb97e81f6c9b458", "Url": "https://api.github.com/repos/RanneKapcie/software_dev", "Date": "2018-01-02T10:23:46Z"},
{"Line": "54=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.geotools.geometry.jts.JTS.transform(org.opengis.geometry.Geometry,org.opengis.referencing.operation.MathTransform)=>org.geotools.geometry.jts.JTS.transform(com.vividsolutions.jts.geom.Point,org.opengis.referencing.operation.MathTransform)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8731/buggy-version/CoordinatesTransformer.java", "BodyUseAPI": [], "Fixed commit": "b6fbb931ca347f0ec99b1be26bb97e81f6c9b458", "Url": "https://api.github.com/repos/RanneKapcie/software_dev", "Date": "2018-01-02T10:23:46Z"},
{"Line": "290=>290", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.ukdev.carcadasalborghetti.model.Carcada>.get(int)=>com.ukdev.carcadasalborghetti.model.Carcada.getSound()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/121/buggy-version/app.src.main.java.com.ukdev.carcadasalborghetti.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "a76595e775fbc2a02d6e1db362d74d96d9e3c047", "Url": "https://api.github.com/repos/alancamargo92/carcadas-alborghetti", "Date": "2018-10-27T19:52:51Z"},
{"Line": "290=>290", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "carcadas.get(position).getSound()=>com.ukdev.carcadasalborghetti.model.Carcada.getSound()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/121/buggy-version/app.src.main.java.com.ukdev.carcadasalborghetti.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "a76595e775fbc2a02d6e1db362d74d96d9e3c047", "Url": "https://api.github.com/repos/alancamargo92/carcadas-alborghetti", "Date": "2018-10-27T19:52:51Z"},
{"Line": "84=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "queryResult.getAsJsonObject(com.hp.shopping.impl.OUTPUTCONTEXTS).getAsJsonArray()=>com.google.gson.JsonObject.getAsJsonArray(com.hp.shopping.impl.OUTPUTCONTEXTS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4212/buggy-version/src.main.java.com.hp.shopping.impl.DialogFlowServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "113009fddee836fdeeafe175563c80e5a1f7157c", "Url": "https://api.github.com/repos/awarhoka/hp-shopping-webhook", "Date": "2018-09-05T12:29:15Z"},
{"Line": "37=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.String)=>OntologyBuilder.buildOntology(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2285/buggy-version/NLIDB.src.UserInterface.java", "BodyUseAPI": [], "Fixed commit": "e49b0e7525e6d601811d40a387b66b79f23a73ab", "Url": "https://api.github.com/repos/hishshah/NLIDB", "Date": "2018-07-15T14:06:55Z"},
{"Line": "216=>212", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.github.slupik.savepass.data.password.room.EntityPassword.setLastUpdate(int)=>io.github.slupik.savepass.data.password.room.EntityPassword.setLastUpdate(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1248/buggy-version/app.src.main.java.io.github.slupik.savepass.app.views.addpass.AddPassActivity.java", "BodyUseAPI": [], "Fixed commit": "d2a8858eab80cccd5edc7ca014ff9ead963f5a98", "Url": "https://api.github.com/repos/Slupik/Capstone-Project", "Date": "2018-07-29T23:38:11Z"},
{"Line": "242=>242", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.StringBuilder.append(java.lang.String)=>java.lang.StringBuilder.append(java.lang.String,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8806/buggy-version/src.main.java.com.puppycrawl.tools.checkstyle.checks.javadoc.SummaryJavadocCheck.java", "BodyUseAPI": [], "Fixed commit": "20da2fcf2620c18a789cd0cb585f5ff1c087d609", "Url": "https://api.github.com/repos/kazachka/checkstyle", "Date": "2018-06-23T06:28:31Z"},
{"Line": "183=>183", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getActivity().findViewById(R.id.error_imageview)=>android.view.View.findViewById(R.id.error_imageview)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6983/buggy-version/app.src.main.java.com.example.jose.smartlapalma.Views.Fragments.ResidentFragment.java", "BodyUseAPI": [], "Fixed commit": "5a1bf2e4cb01543d05d7431da7c6d2467565bef8", "Url": "https://api.github.com/repos/alu0100697414/SmartLaPalma", "Date": "2018-05-11T20:56:01Z"},
{"Line": "180=>180", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getActivity().findViewById(R.id.error_request)=>android.view.View.findViewById(R.id.error_request)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6983/buggy-version/app.src.main.java.com.example.jose.smartlapalma.Views.Fragments.ResidentFragment.java", "BodyUseAPI": [], "Fixed commit": "5a1bf2e4cb01543d05d7431da7c6d2467565bef8", "Url": "https://api.github.com/repos/alu0100697414/SmartLaPalma", "Date": "2018-05-11T20:56:01Z"},
{"Line": "116=>116", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.jose.smartlapalma.Views.Fragments.ResidentFragment.checkNetworkStatus()=>com.example.jose.smartlapalma.Views.Fragments.ResidentFragment.checkNetworkStatus(android.view.View)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6983/buggy-version/app.src.main.java.com.example.jose.smartlapalma.Views.Fragments.ResidentFragment.java", "BodyUseAPI": [], "Fixed commit": "5a1bf2e4cb01543d05d7431da7c6d2467565bef8", "Url": "https://api.github.com/repos/alu0100697414/SmartLaPalma", "Date": "2018-05-11T20:56:01Z"},
{"Line": "140=>140", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getActivity().findViewById(R.id.error_imageview)=>android.view.View.findViewById(R.id.error_imageview)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6983/buggy-version/app.src.main.java.com.example.jose.smartlapalma.Views.Fragments.TouristFragment.java", "BodyUseAPI": [], "Fixed commit": "5a1bf2e4cb01543d05d7431da7c6d2467565bef8", "Url": "https://api.github.com/repos/alu0100697414/SmartLaPalma", "Date": "2018-05-11T20:56:01Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.jose.smartlapalma.Views.Fragments.TouristFragment.checkNetworkStatus()=>com.example.jose.smartlapalma.Views.Fragments.TouristFragment.checkNetworkStatus(android.view.View)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6983/buggy-version/app.src.main.java.com.example.jose.smartlapalma.Views.Fragments.TouristFragment.java", "BodyUseAPI": [], "Fixed commit": "5a1bf2e4cb01543d05d7431da7c6d2467565bef8", "Url": "https://api.github.com/repos/alu0100697414/SmartLaPalma", "Date": "2018-05-11T20:56:01Z"},
{"Line": "137=>137", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getActivity().findViewById(R.id.error_request)=>android.view.View.findViewById(R.id.error_request)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6983/buggy-version/app.src.main.java.com.example.jose.smartlapalma.Views.Fragments.TouristFragment.java", "BodyUseAPI": [], "Fixed commit": "5a1bf2e4cb01543d05d7431da7c6d2467565bef8", "Url": "https://api.github.com/repos/alu0100697414/SmartLaPalma", "Date": "2018-05-11T20:56:01Z"},
{"Line": "74=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.franmontiel.attributionpresenter.AttributionPresenter.Builder(this).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"AttributionPresenter\").addCopyrightNotice(\"Copyright 2017 Francisco Jos\u00e9 Montiel Navarro\").addLicense(License.APACHE).setWebsite(\"https://github.com/franmontiel/AttributionPresenter\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"material-intro\").addCopyrightNotice(\"Copyright 2017 Jan Heinrich Reimer\").addLicense(License.MIT).setWebsite(\"https://github.com/heinrichreimer/material-intro\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"Android Open Source Project\").addCopyrightNotice(\"Copyright 2016 The Android Open Source Project\").addLicense(License.APACHE).setWebsite(\"http://developer.android.com/tools/support-library/index.html\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"Android Support Libraries\").addCopyrightNotice(\"Copyright 2016 The Android Open Source Project\").addLicense(License.APACHE).setWebsite(\"http://developer.android.com/tools/support-library/index.html\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"CardView\").addCopyrightNotice(\"Copyright 2016 The Android Open Source Project\").addLicense(License.APACHE).setWebsite(\"https://developer.android.com/reference/android/support/v7/widget/CardView.html\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"Material Ripple Layout\").addCopyrightNotice(\"Copyright 2015 Balys Valentukevicius\").addLicense(License.APACHE).setWebsite(\"https://github.com/balysv/material-ripple\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"StickySwitch\").addCopyrightNotice(\"Copyright 2017 GwonHyeok\").addLicense(License.MIT).setWebsite(\"https://github.com/GwonHyeok/StickySwitch\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"Android-RateThisApp\").addCopyrightNotice(\"Copyright 2013-2017 Keisuke Kobayashi\").addLicense(License.APACHE).setWebsite(\"https://github.com/kobakei/Android-RateThisApp\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"Dachshund Tab Layout\").addCopyrightNotice(\"Copyright 2017 Andrii\").addLicense(License.MIT).setWebsite(\"https://github.com/Andy671/Dachshund-Tab-Layout\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"MaterialSeekBarPreference\").addCopyrightNotice(\"Copyright MrBIMC\").addLicense(License.APACHE).setWebsite(\"https://github.com/MrBIMC/MaterialSeekBarPreference\").build()).build()=>new com.franmontiel.attributionpresenter.AttributionPresenter.Builder(this).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"AttributionPresenter\").addCopyrightNotice(\"Copyright 2017 Francisco Jos\u00e9 Montiel Navarro\").addLicense(License.APACHE).setWebsite(\"https://github.com/franmontiel/AttributionPresenter\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"material-intro\").addCopyrightNotice(\"Copyright 2017 Jan Heinrich Reimer\").addLicense(License.MIT).setWebsite(\"https://github.com/heinrichreimer/material-intro\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"Android Open Source Project\").addCopyrightNotice(\"Copyright 2016 The Android Open Source Project\").addLicense(License.APACHE).setWebsite(\"http://developer.android.com/tools/support-library/index.html\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"Android Support Libraries\").addCopyrightNotice(\"Copyright 2016 The Android Open Source Project\").addLicense(License.APACHE).setWebsite(\"http://developer.android.com/tools/support-library/index.html\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"CardView\").addCopyrightNotice(\"Copyright 2016 The Android Open Source Project\").addLicense(License.APACHE).setWebsite(\"https://developer.android.com/reference/android/support/v7/widget/CardView.html\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"Material Ripple Layout\").addCopyrightNotice(\"Copyright 2015 Balys Valentukevicius\").addLicense(License.APACHE).setWebsite(\"https://github.com/balysv/material-ripple\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"StickySwitch\").addCopyrightNotice(\"Copyright 2017 GwonHyeok\").addLicense(License.MIT).setWebsite(\"https://github.com/GwonHyeok/StickySwitch\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"Android-RateThisApp\").addCopyrightNotice(\"Copyright 2013-2017 Keisuke Kobayashi\").addLicense(License.APACHE).setWebsite(\"https://github.com/kobakei/Android-RateThisApp\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"Dachshund Tab Layout\").addCopyrightNotice(\"Copyright 2017 Andrii\").addLicense(License.MIT).setWebsite(\"https://github.com/Andy671/Dachshund-Tab-Layout\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"MaterialSeekBarPreference\").addCopyrightNotice(\"Copyright MrBIMC\").addLicense(License.APACHE).setWebsite(\"https://github.com/MrBIMC/MaterialSeekBarPreference\").build()).addAttributions(new com.franmontiel.attributionpresenter.entities.Attribution.Builder(\"CircleImageView\").addCopyrightNotice(\"Copyright Henning Dodenhof\").addLicense(License.APACHE).setWebsite(\"https://github.com/hdodenhof/CircleImageView\").build())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7426/buggy-version/app.src.main.java.com.gsnathan.torchlight.AboutActivity.java", "BodyUseAPI": [], "Fixed commit": "e54285039c0da0bb814540b3acbddd769819cf71", "Url": "https://api.github.com/repos/JavaCafe01/TorchLight", "Date": "2018-07-04T23:46:52Z"},
{"Line": "26=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.example.springboot_demo.services.AccountService.findUserById(java.lang.String)=>com.example.springboot_demo.services.AccountService.findUserByName(auth.getName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2965/buggy-version/springboot_demo.src.main.java.com.example.springboot_demo.controllers.ProfileController.java", "BodyUseAPI": [], "Fixed commit": "41c5c598d290fe6fca1143b95621d6891b2d40e4", "Url": "https://api.github.com/repos/121jigowatts/springboot_demo", "Date": "2018-10-17T13:38:18Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.springboot_demo.services.AccountService.findUserById(java.lang.String)=>org.springframework.security.core.Authentication.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2965/buggy-version/springboot_demo.src.main.java.com.example.springboot_demo.controllers.ProfileController.java", "BodyUseAPI": [], "Fixed commit": "41c5c598d290fe6fca1143b95621d6891b2d40e4", "Url": "https://api.github.com/repos/121jigowatts/springboot_demo", "Date": "2018-10-17T13:38:18Z"},
{"Line": "27=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.springframework.web.servlet.ModelAndView.addObject(java.lang.String,user.get())=>org.springframework.web.servlet.ModelAndView.addObject(java.lang.String,(\"Welcome \" + (user.getName())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2965/buggy-version/springboot_demo.src.main.java.com.example.springboot_demo.controllers.ProfileController.java", "BodyUseAPI": [], "Fixed commit": "41c5c598d290fe6fca1143b95621d6891b2d40e4", "Url": "https://api.github.com/repos/121jigowatts/springboot_demo", "Date": "2018-10-17T13:38:18Z"},
{"Line": "84=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.support.v4.app.FragmentTransaction.addToBackStack(Constants.FRAGMENT_DETAILS)=>android.support.v4.app.FragmentTransaction.addToBackStack(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/481/buggy-version/app.src.main.java.news.agoda.com.sample.home.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "843154309e687fac97bd9a5dee05925b9c2b9531", "Url": "https://api.github.com/repos/SarahEhabMostafa/AgodaNews", "Date": "2018-09-05T21:50:30Z"},
{"Line": "190=>190", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cz.neumimto.rpg.players.IActiveCharacter.sendMessage(ChatTypes.ACTION_BAR,org.spongepowered.api.text.Text.builder(combo.replaceAll(\".\", \"$0, \")).color(TextColors.GOLD).build())=>character.getPlayer().sendMessage(ChatTypes.ACTION_BAR,org.spongepowered.api.text.Text.builder(combo.replaceAll(\".\", \"$0, \")).color(TextColors.GOLD).build())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/783/buggy-version/Plugin.src.main.java.cz.neumimto.rpg.gui.Gui.java", "BodyUseAPI": [], "Fixed commit": "3e27b8421b584c0ffb6d5189e578f8823f91b3ec", "Url": "https://api.github.com/repos/Sponge-RPG-dev/NT-RPG", "Date": "2018-06-07T17:39:04Z"},
{"Line": "237=>237", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cz.polankam.pcrf.trafficgenerator.client.Client.handleFailure(cz.polankam.pcrf.trafficgenerator.scenario.Scenario,java.lang.String)=>cz.polankam.pcrf.trafficgenerator.client.Client.handleFailure(cz.polankam.pcrf.trafficgenerator.scenario.Scenario,java.lang.Exception,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5231/buggy-version/src.main.java.cz.polankam.pcrf.trafficgenerator.client.Client.java", "BodyUseAPI": [], "Fixed commit": "4b1a4337c46d998b3c815732299b587b3da8c1ab", "Url": "https://api.github.com/repos/Neloop/traffirator", "Date": "2018-06-06T19:37:26Z"},
{"Line": "214=>214", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.log4j.Logger.error(java.lang.String)=>org.apache.log4j.Logger.error(java.lang.String,java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5231/buggy-version/src.main.java.cz.polankam.pcrf.trafficgenerator.client.Client.java", "BodyUseAPI": [], "Fixed commit": "4b1a4337c46d998b3c815732299b587b3da8c1ab", "Url": "https://api.github.com/repos/Neloop/traffirator", "Date": "2018-06-06T19:37:26Z"},
{"Line": "306=>306", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cz.polankam.pcrf.trafficgenerator.client.Client.handleFailure(cz.polankam.pcrf.trafficgenerator.scenario.Scenario,java.lang.String)=>cz.polankam.pcrf.trafficgenerator.client.Client.handleFailure(cz.polankam.pcrf.trafficgenerator.scenario.Scenario,java.lang.Exception,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5231/buggy-version/src.main.java.cz.polankam.pcrf.trafficgenerator.client.Client.java", "BodyUseAPI": [], "Fixed commit": "4b1a4337c46d998b3c815732299b587b3da8c1ab", "Url": "https://api.github.com/repos/Neloop/traffirator", "Date": "2018-06-06T19:37:26Z"},
{"Line": "343=>343", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cz.polankam.pcrf.trafficgenerator.client.Client.handleFailure(cz.polankam.pcrf.trafficgenerator.scenario.Scenario,java.lang.String)=>cz.polankam.pcrf.trafficgenerator.client.Client.handleFailure(cz.polankam.pcrf.trafficgenerator.scenario.Scenario,<nulltype>,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5231/buggy-version/src.main.java.cz.polankam.pcrf.trafficgenerator.client.Client.java", "BodyUseAPI": [], "Fixed commit": "4b1a4337c46d998b3c815732299b587b3da8c1ab", "Url": "https://api.github.com/repos/Neloop/traffirator", "Date": "2018-06-06T19:37:26Z"},
{"Line": "90=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Toast.makeText(M5.seshealthpatient.Activities.ViewDataPacket,uri.toString(),Toast.LENGTH_LONG)=>android.widget.Toast.makeText(M5.seshealthpatient.Activities.ViewDataPacket,java.lang.String,Toast.LENGTH_LONG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8878/buggy-version/app.src.main.java.M5.seshealthpatient.Activities.ViewDataPacket.java", "BodyUseAPI": [], "Fixed commit": "0155321eed697815daf7150e05d0960746d3cfa0", "Url": "https://api.github.com/repos/haydencrain/HealthClientApp", "Date": "2018-10-12T11:28:39Z"},
{"Line": "98=>104", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Arrays.toString(binds.toArray())=>java.lang.String.join(java.lang.String,java.util.List<java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1594/buggy-version/src.us.kbase.narrativejobservice.sdkjobs.ShifterRunner.java", "BodyUseAPI": [], "Fixed commit": "5e422151b6e29fee97b4a72f352b816f6ac093f7", "Url": "https://api.github.com/repos/kbase/njs_wrapper", "Date": "2018-07-10T00:52:40Z"},
{"Line": "98=>104", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.github.dockerjava.api.model.Bind>.toArray()=>java.lang.String.join(java.lang.String,java.util.List<java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1594/buggy-version/src.us.kbase.narrativejobservice.sdkjobs.ShifterRunner.java", "BodyUseAPI": [], "Fixed commit": "5e422151b6e29fee97b4a72f352b816f6ac093f7", "Url": "https://api.github.com/repos/kbase/njs_wrapper", "Date": "2018-07-10T00:52:40Z"},
{"Line": "98=>104", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Arrays.toString(binds.toArray())=>java.lang.String.join(java.lang.String,java.util.List<java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1594/buggy-version/src.us.kbase.narrativejobservice.sdkjobs.ShifterRunner.java", "BodyUseAPI": [], "Fixed commit": "5e422151b6e29fee97b4a72f352b816f6ac093f7", "Url": "https://api.github.com/repos/kbase/njs_wrapper", "Date": "2018-07-10T00:52:40Z"},
{"Line": "88=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.nio.file.Path.toFile()=>us.kbase.narrativejobservice.sdkjobs.ShifterRunner.run(java.lang.String,java.lang.String,java.io.File,us.kbase.auth.AuthToken,config.getLogger(),java.io.File,boolean,java.io.File,java.io.File,config.getCallbackURL(),java.lang.String,java.util.List<com.github.dockerjava.api.model.Bind>,us.kbase.narrativejobservice.sdkjobs.CancellationChecker,<nulltype>,java.util.Map<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1594/buggy-version/src.us.kbase.narrativejobservice.subjobs.NJSSubsequentCallRunner.java", "BodyUseAPI": [], "Fixed commit": "5e422151b6e29fee97b4a72f352b816f6ac093f7", "Url": "https://api.github.com/repos/kbase/njs_wrapper", "Date": "2018-07-10T00:52:40Z"},
{"Line": "85=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "us.kbase.narrativejobservice.sdkjobs.ShifterRunner.run(java.lang.String,java.lang.String,java.io.File,us.kbase.auth.AuthToken,config.getLogger(),java.io.File,<nulltype>,java.io.File,config.getCallbackURL(),java.lang.String,java.util.List<com.github.dockerjava.api.model.Bind>,us.kbase.narrativejobservice.sdkjobs.CancellationChecker,<nulltype>)=>us.kbase.narrativejobservice.sdkjobs.ShifterRunner.run(java.lang.String,java.lang.String,java.io.File,us.kbase.auth.AuthToken,config.getLogger(),java.io.File,boolean,java.io.File,java.io.File,config.getCallbackURL(),java.lang.String,java.util.List<com.github.dockerjava.api.model.Bind>,us.kbase.narrativejobservice.sdkjobs.CancellationChecker,<nulltype>,java.util.Map<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1594/buggy-version/src.us.kbase.narrativejobservice.subjobs.NJSSubsequentCallRunner.java", "BodyUseAPI": [], "Fixed commit": "5e422151b6e29fee97b4a72f352b816f6ac093f7", "Url": "https://api.github.com/repos/kbase/njs_wrapper", "Date": "2018-07-10T00:52:40Z"},
{"Line": "450=>450", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "us.kbase.narrativejobservice.sdkjobs.ShifterRunner.run(java.lang.String,modMeth.getModule(),java.io.File,us.kbase.auth.AuthToken,us.kbase.common.executionengine.LineLogger,java.io.File,java.io.File,<nulltype>,java.net.URL,java.lang.String,java.util.List<com.github.dockerjava.api.model.Bind>,us.kbase.narrativejobservice.sdkjobs.CancellationChecker,java.util.Map<java.lang.String, java.lang.String>)=>us.kbase.narrativejobservice.sdkjobs.ShifterRunner.run(java.lang.String,modMeth.getModule(),java.io.File,us.kbase.auth.AuthToken,us.kbase.common.executionengine.LineLogger,java.io.File,boolean,java.io.File,<nulltype>,java.net.URL,java.lang.String,java.util.List<com.github.dockerjava.api.model.Bind>,us.kbase.narrativejobservice.sdkjobs.CancellationChecker,java.util.Map<java.lang.String, java.lang.String>,java.util.Map<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1594/buggy-version/src.us.kbase.narrativejobservice.sdkjobs.SDKLocalMethodRunner.java", "BodyUseAPI": [], "Fixed commit": "5e422151b6e29fee97b4a72f352b816f6ac093f7", "Url": "https://api.github.com/repos/kbase/njs_wrapper", "Date": "2018-07-10T00:52:40Z"},
{"Line": "11=>11", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.dida.sharemodule.ShareActivity.setContentView(R.layout.activity_main)=>com.dida.sharemodule.ShareActivity.setContentView(R.layout.mod_activity_share)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1076/buggy-version/sharemodule.src.main.java.com.dida.sharemodule.ShareActivity.java", "BodyUseAPI": [], "Fixed commit": "4de8723b69d3afb8cc091cff771221fac79a5d7b", "Url": "https://api.github.com/repos/xmaihh/kuaila", "Date": "2018-09-10T11:32:32Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.dida.funnystory.FunnyStoryActivity.setContentView(R.layout.activity_main)=>com.dida.funnystory.FunnyStoryActivity.setContentView(R.layout.mod_activity_funny)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1076/buggy-version/funnystorymodule.src.main.java.com.dida.funnystory.FunnyStoryActivity.java", "BodyUseAPI": [], "Fixed commit": "4de8723b69d3afb8cc091cff771221fac79a5d7b", "Url": "https://api.github.com/repos/xmaihh/kuaila", "Date": "2018-09-10T11:32:32Z"},
{"Line": "11=>11", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.dida.userspage.UserCenterActivity.setContentView(R.layout.activity_main)=>com.dida.userspage.UserCenterActivity.setContentView(R.layout.mod_activity_user)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1076/buggy-version/userspagemodule.src.main.java.com.dida.userspage.UserCenterActivity.java", "BodyUseAPI": [], "Fixed commit": "4de8723b69d3afb8cc091cff771221fac79a5d7b", "Url": "https://api.github.com/repos/xmaihh/kuaila", "Date": "2018-09-10T11:32:32Z"},
{"Line": "16=>16", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.dida.loginmodule.LoginActivity.setContentView(R.layout.activity_main)=>com.dida.loginmodule.LoginActivity.setContentView(R.layout.mod_activity_login)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1076/buggy-version/loginmodule.src.main.java.com.dida.loginmodule.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "4de8723b69d3afb8cc091cff771221fac79a5d7b", "Url": "https://api.github.com/repos/xmaihh/kuaila", "Date": "2018-09-10T11:32:32Z"},
{"Line": "11=>11", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.dida.homepagemodule.HomePageActivity.setContentView(R.layout.activity_main)=>com.dida.homepagemodule.HomePageActivity.setContentView(R.layout.mod_activity_home)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1076/buggy-version/homepagemodule.src.main.java.com.dida.homepagemodule.HomePageActivity.java", "BodyUseAPI": [], "Fixed commit": "4de8723b69d3afb8cc091cff771221fac79a5d7b", "Url": "https://api.github.com/repos/xmaihh/kuaila", "Date": "2018-09-10T11:32:32Z"},
{"Line": "74=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getEntityManager().createNativeQuery(((((((((\"CREATE OR REPLACE VIEW \" + (resourceType.getName())) + \"_view AS select r.id, \") + selectFields) + \" from resource r \") + joins) + \" where r.fk_name='\") + (resourceType.getName())) + \"'\"))=>org.apache.logging.log4j.Logger.info(((((((((\"CREATE OR REPLACE VIEW \" + (resourceType.getName())) + \"_view AS select r.id, \") + selectFields) + \" from resource r \") + joins) + \" where r.fk_name='\") + (resourceType.getName())) + \"'\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9515/buggy-version/registry-core.src.main.java.eu.openminted.registry.core.dao.ViewsDaoImpl.java", "BodyUseAPI": [], "Fixed commit": "8b8d0ef84d36303e783750ba1fd0908ff9a845a6", "Url": "https://api.github.com/repos/openminted/registry", "Date": "2018-10-22T12:46:20Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ru.wkn.GraphInitializer.getSize(int)=>ru.wkn.GraphInitializer.getSizeByStirlingFunction(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/793/buggy-version/graph-initializer.src.main.java.ru.wkn.GraphInitializer.java", "BodyUseAPI": [], "Fixed commit": "4c4723c641b704a42fd605e3ecedd3387bb9550c", "Url": "https://api.github.com/repos/Adraas/SmartSolutions", "Date": "2018-09-16T17:36:13Z"},
{"Line": "15=>15", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.io.PrintStream.println(race.getHorsesInRace())=>race.getHorsesInRace().stream().forEach(java.lang.System.out::println)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4031/buggy-version/src.main.java.Launcher.java", "BodyUseAPI": [], "Fixed commit": "fe96d339955a29a8b6ee2e7c228d80feb1a684c2", "Url": "https://api.github.com/repos/zkuru/horseRace", "Date": "2018-09-23T20:57:48Z"},
{"Line": "75=>75", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Hazard.paint(java.awt.Graphics2D)=>java.util.ArrayList<Hazard>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6744/buggy-version/FinalProject.java", "BodyUseAPI": [], "Fixed commit": "06322ab8f121c9485cff5c49697e12b641ce3e50", "Url": "https://api.github.com/repos/VinnyLin72/FinalProject", "Date": "2018-01-19T08:10:24Z"},
{"Line": "123=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "be.hyperrail.android.irail.implementation.Transfer.getStation()=>be.hyperrail.android.irail.implementation.TrainStop.getStation()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5103/buggy-version/Hyperrail.src.main.java.be.hyperrail.android.TrainstopContextMenu.java", "BodyUseAPI": [], "Fixed commit": "8b948587fbab63027513fc3337d760ed347fa4a9", "Url": "https://api.github.com/repos/hyperrail/hyperrail-for-android", "Date": "2018-02-25T19:00:37Z"},
{"Line": "123=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "be.hyperrail.android.irail.implementation.Transfer.getStation()=>be.hyperrail.android.irail.implementation.TrainStop.getStation()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5103/buggy-version/Hyperrail.src.main.java.be.hyperrail.android.TrainstopContextMenu.java", "BodyUseAPI": [], "Fixed commit": "8b948587fbab63027513fc3337d760ed347fa4a9", "Url": "https://api.github.com/repos/hyperrail/hyperrail-for-android", "Date": "2018-02-25T19:00:37Z"},
{"Line": "103=>103", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.tikal.fuze.antscosmashing.scoreservice.repositories.PlayersScoresRepository.get(java.lang.Integer)=>com.tikal.fuze.antscosmashing.scoreservice.repositories.PlayersScoresRepository.getAfterCheckingGameAndTeamIds(java.lang.Integer,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8355/buggy-version/src.main.java.com.tikal.fuze.antscosmashing.scoreservice.service.PlayerScoresService.java", "BodyUseAPI": [], "Fixed commit": "3101d781af77ad4793c04c16a62c36707477e58d", "Url": "https://api.github.com/repos/tikalk/ants-score-service", "Date": "2018-02-03T21:40:36Z"},
{"Line": "64=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "IntList.get(int)=>IntList.addFirst(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4984/buggy-version/lists2.IntList.java", "BodyUseAPI": [], "Fixed commit": "282777f82258e581e27a3cbd6b6039485ebf7c47", "Url": "https://api.github.com/repos/hyde1985/lectureCode-sp18", "Date": "2018-08-02T02:45:41Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.aksw.limes.core.measures.measure.string.SimpleEditDistanceMeasure.computeEditDistance(java.lang.String,java.lang.String)=>org.aksw.limes.core.measures.measure.string.SimpleEditDistanceMeasure.computeEditDistance(java.lang.String,java.lang.String,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4147/buggy-version/limes-core.src.main.java.org.aksw.limes.core.measures.measure.string.SimpleEditDistanceMeasure.java", "BodyUseAPI": [], "Fixed commit": "68ffa5d0cea281462f6178152b7c7117dda841c9", "Url": "https://api.github.com/repos/dice-group/LIMES", "Date": "2018-05-29T10:19:14Z"},
{"Line": "176=>187", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "popup.getMenu().getItem(1).setOnMenuItemClickListener(android.view.MenuItem.OnMenuItemClickListener)=>popup.getMenu().getItem(1).setOnMenuItemClickListener(android.view.MenuItem.OnMenuItemClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3151/buggy-version/app.src.main.java.com.example.balakrishnan.mybrowser.WebActivity.java", "BodyUseAPI": [], "Fixed commit": "c844fa870a83f9028d63dcb3451c2a339a9c7a01", "Url": "https://api.github.com/repos/97balakrishnan/MyBrowser", "Date": "2018-02-26T15:56:46Z"},
{"Line": "112=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.support.v7.app.ActionBar.setHomeAsUpIndicator(android.R.drawable.ic_menu_close_clear_cancel)=>android.support.v7.app.ActionBar.setHomeAsUpIndicator(R.drawable.ic_clear_black_24dp)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/453/buggy-version/app.src.main.java.de.p72b.mocklation.dialog.EditLocationItemDialog.java", "BodyUseAPI": [], "Fixed commit": "69ada6be2f1c4dcfbcf8cba51a5a62aa00af858f", "Url": "https://api.github.com/repos/P72B/Mocklation", "Date": "2018-01-13T12:29:01Z"},
{"Line": "101=>101", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.support.v7.widget.Toolbar.setTitle(java.lang.String)=>android.support.v7.widget.Toolbar.setTitle(R.string.dialog_edit_title)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/453/buggy-version/app.src.main.java.de.p72b.mocklation.dialog.EditLocationItemDialog.java", "BodyUseAPI": [], "Fixed commit": "69ada6be2f1c4dcfbcf8cba51a5a62aa00af858f", "Url": "https://api.github.com/repos/P72B/Mocklation", "Date": "2018-01-13T12:29:01Z"},
{"Line": "113=>113", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new tws.zcaliptium.compositegear.common.items.ItemCompositeArmor(\"rubber_gasmask\", accessoryArmorMaterial, \"rubber_gasmask\", 0, net.minecraft.inventory.EntityEquipmentSlot.HEAD).setDefaultColor(8487297).setItemClass(EnumItemClass.ACCESSORY_ARMOR).setMaxDamage(int)=>new tws.zcaliptium.compositegear.common.items.ItemCompositeArmor(\"rubber_gasmask\", accessoryArmorMaterial, \"rubber_gasmask\", 0, net.minecraft.inventory.EntityEquipmentSlot.HEAD).setDefaultColor(8487297).setItemClass(EnumItemClass.ACCESSORY_ARMOR).setAirMask(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1330/buggy-version/src.main.java.tws.zcaliptium.compositegear.common.items.ItemsCG.java", "BodyUseAPI": [], "Fixed commit": "c7c32079e44e6f8433b39a9e3986b6a8dc1e561b", "Url": "https://api.github.com/repos/TwilightWingsStudio/CompositeGear", "Date": "2018-02-07T15:11:16Z"},
{"Line": "113=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new tws.zcaliptium.compositegear.common.items.ItemCompositeArmor(\"rubber_gasmask\", accessoryArmorMaterial, \"rubber_gasmask\", 0, net.minecraft.inventory.EntityEquipmentSlot.HEAD).setDefaultColor(8487297).setItemClass(EnumItemClass.ACCESSORY_ARMOR).setMaxDamage(int)=>new tws.zcaliptium.compositegear.common.items.ItemCompositeArmor(\"rubber_gasmask\", accessoryArmorMaterial, \"rubber_gasmask\", 0, net.minecraft.inventory.EntityEquipmentSlot.HEAD).setDefaultColor(8487297).setItemClass(EnumItemClass.ACCESSORY_ARMOR).setAirMask(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1330/buggy-version/src.main.java.tws.zcaliptium.compositegear.common.items.ItemsCG.java", "BodyUseAPI": [], "Fixed commit": "c7c32079e44e6f8433b39a9e3986b6a8dc1e561b", "Url": "https://api.github.com/repos/TwilightWingsStudio/CompositeGear", "Date": "2018-02-07T15:11:16Z"},
{"Line": "62=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.silksource.silk.coding.event.TypeBasedEvent.getType()=>io.silksource.silk.coding.event.TypeChangedEvent.getType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6366/buggy-version/coding.src.main.java.io.silksource.silk.coding.file.FileBasedProject.java", "BodyUseAPI": [], "Fixed commit": "1ab833bca199d20947b9e286b78a0d4d1f16f54c", "Url": "https://api.github.com/repos/SilkSource/silk", "Date": "2018-02-24T11:24:20Z"},
{"Line": "12=>12", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "DinosaurEntity.Order.ordinal()=>(value == null ? DinosaurEntity.Order.WANDER : value).ordinal()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7732/buggy-version/src.main.java.org.jurassicraft.server.entity.DinosaurSerializers.java", "BodyUseAPI": [], "Fixed commit": "2f0ca6057814fa2229caca325cc0776c56612068", "Url": "https://api.github.com/repos/JurassiCraftTeam/JurassiCraft2", "Date": "2018-06-07T18:42:26Z"},
{"Line": "580=>580", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.database.Cursor.getLong(data.getColumnIndexOrThrow(BookEntry.COLUMN_SUPPLIER_PHONE_NUMBER))=>android.database.Cursor.getString(data.getColumnIndexOrThrow(BookEntry.COLUMN_SUPPLIER_PHONE_NUMBER))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/810/buggy-version/app.src.main.java.com.example.android.favoritebooks.EditorActivity.java", "BodyUseAPI": [], "Fixed commit": "c3adc6102cecae9f23891d3959715b99587ca020", "Url": "https://api.github.com/repos/GretaGri/FavoriteBooks", "Date": "2018-08-04T16:03:42Z"},
{"Line": "193=>193", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.ContentValues.put(BookEntry.COLUMN_SUPPLIER_PHONE_NUMBER,java.lang.Long)=>android.content.ContentValues.put(BookEntry.COLUMN_SUPPLIER_PHONE_NUMBER,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/810/buggy-version/app.src.main.java.com.example.android.favoritebooks.EditorActivity.java", "BodyUseAPI": [], "Fixed commit": "c3adc6102cecae9f23891d3959715b99587ca020", "Url": "https://api.github.com/repos/GretaGri/FavoriteBooks", "Date": "2018-08-04T16:03:42Z"},
{"Line": "239=>239", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.ContentValues.put(BookEntry.COLUMN_SUPPLIER_PHONE_NUMBER,java.lang.Long)=>android.content.ContentValues.put(BookEntry.COLUMN_SUPPLIER_PHONE_NUMBER,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/810/buggy-version/app.src.main.java.com.example.android.favoritebooks.EditorActivity.java", "BodyUseAPI": [], "Fixed commit": "c3adc6102cecae9f23891d3959715b99587ca020", "Url": "https://api.github.com/repos/GretaGri/FavoriteBooks", "Date": "2018-08-04T16:03:42Z"},
{"Line": "37=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.social.entities.User.getUsername()=>com.shops.entities.User.getUsername()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5004/buggy-version/src.main.java.com.shops.controller.AccountController.java", "BodyUseAPI": [], "Fixed commit": "390ffccd952b319bb51abcfaea5faef41cc51aa2", "Url": "https://api.github.com/repos/adnanmerrakchi/Shops-guide-BackEnd", "Date": "2018-05-30T02:01:15Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.social.services.UserService.save(com.social.entities.User)=>com.shops.services.UserService.save(com.shops.entities.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5004/buggy-version/src.main.java.com.shops.controller.AccountController.java", "BodyUseAPI": [], "Fixed commit": "390ffccd952b319bb51abcfaea5faef41cc51aa2", "Url": "https://api.github.com/repos/adnanmerrakchi/Shops-guide-BackEnd", "Date": "2018-05-30T02:01:15Z"},
{"Line": "42=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.social.entities.User.setRole(java.lang.String)=>com.shops.entities.User.setRole(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5004/buggy-version/src.main.java.com.shops.controller.AccountController.java", "BodyUseAPI": [], "Fixed commit": "390ffccd952b319bb51abcfaea5faef41cc51aa2", "Url": "https://api.github.com/repos/adnanmerrakchi/Shops-guide-BackEnd", "Date": "2018-05-30T02:01:15Z"},
{"Line": "39=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.social.entities.User.getUsername()=>com.shops.entities.User.getUsername()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5004/buggy-version/src.main.java.com.shops.controller.AccountController.java", "BodyUseAPI": [], "Fixed commit": "390ffccd952b319bb51abcfaea5faef41cc51aa2", "Url": "https://api.github.com/repos/adnanmerrakchi/Shops-guide-BackEnd", "Date": "2018-05-30T02:01:15Z"},
{"Line": "36=>36", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.social.services.UserService.find(newUser.getUsername())=>com.shops.services.UserService.find(newUser.getUsername())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5004/buggy-version/src.main.java.com.shops.controller.AccountController.java", "BodyUseAPI": [], "Fixed commit": "390ffccd952b319bb51abcfaea5faef41cc51aa2", "Url": "https://api.github.com/repos/adnanmerrakchi/Shops-guide-BackEnd", "Date": "2018-05-30T02:01:15Z"},
{"Line": "36=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.social.entities.User.getUsername()=>com.shops.entities.User.getUsername()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5004/buggy-version/src.main.java.com.shops.controller.AccountController.java", "BodyUseAPI": [], "Fixed commit": "390ffccd952b319bb51abcfaea5faef41cc51aa2", "Url": "https://api.github.com/repos/adnanmerrakchi/Shops-guide-BackEnd", "Date": "2018-05-30T02:01:15Z"},
{"Line": "24=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.greenfoxacademy.springsecurity.services.TodoService.getProperTodos(boolean,java.lang.String)=>com.greenfoxacademy.springsecurity.services.TodoService.getProperTodos(java.lang.Boolean,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8173/buggy-version/week-10.springSecurity_project.src.main.java.com.greenfoxacademy.springsecurity.controllers.TodoController.java", "BodyUseAPI": [], "Fixed commit": "e521d8aa5e3bcf4de9b18b0273031c7fb621c428", "Url": "https://api.github.com/repos/green-fox-academy/khajnal", "Date": "2018-10-10T09:27:39Z"},
{"Line": "33=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "jmc.cas.Compiler.numOccurrence(java.lang.String,char)=>java.lang.String.replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7844/buggy-version/src.jmc.cas.Compiler.java", "BodyUseAPI": [], "Fixed commit": "b39e55dce6688a79de313744f007a11b907a109c", "Url": "https://api.github.com/repos/JiachenRen/java-algebra-system", "Date": "2018-03-20T02:27:05Z"},
{"Line": "12=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "me.wessbo.ytlink.main.saveConfig()=>me.wessbo.ytlink.main.saveDefaultConfig()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7185/buggy-version/me.wessbo.ytlink.main.java", "BodyUseAPI": [], "Fixed commit": "0209cf152d76180f3ae59c7220154641ba77669f", "Url": "https://api.github.com/repos/zWessboBR/WYTLink", "Date": "2018-06-30T20:48:49Z"},
{"Line": "24=>24", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.concurrent.TimeUnit.toMillis(int)=>java.util.concurrent.TimeUnit.toMillis(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/617/buggy-version/src.main.java.org.mjd.nativesocket.time.joda.JodaTimeDuration.java", "BodyUseAPI": [], "Fixed commit": "d29bdd9b734e9ca3ec8eb569caa762b9992254cf", "Url": "https://api.github.com/repos/markjohndoyle/native-socket", "Date": "2018-05-09T09:24:43Z"},
{"Line": "26=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "player.inventory.armorItemInSlot(this.getSlotType())=>player.inventory.armorInventory.get(this.getSlotType())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8153/buggy-version/src.main.java.com.mjr.extraplanets.items.armor.modules.ModuleNoFallDamage.java", "BodyUseAPI": [], "Fixed commit": "8524ad49abb47680004bf07d03181f7fc687f1c6", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-05-15T19:37:18Z"},
{"Line": "23=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.dactilo.sumbawa.spring.spreadsheets.converter.SpringSpreadsheetConfiguration.jacksonToSpreadsheetConverter()=>io.dactilo.sumbawa.spring.spreadsheets.converter.SpringSpreadsheetConfiguration.objectToSpreadsheetConvert()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8169/buggy-version/src.main.java.io.dactilo.sumbawa.spring.spreadsheets.fiters.excel.ExcelFormatterConfiguration.java", "BodyUseAPI": [], "Fixed commit": "fcbabb870d7e4a12ed84ee126ebfcaf828e4e968", "Url": "https://api.github.com/repos/Dactilo/spring-spreadsheet", "Date": "2018-07-06T06:18:26Z"},
{"Line": "23=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.dactilo.sumbawa.spring.spreadsheets.converter.SpringSpreadsheetConfiguration.jacksonToSpreadsheetConverter()=>io.dactilo.sumbawa.spring.spreadsheets.converter.SpringSpreadsheetConfiguration.objectToSpreadsheetConvert()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8169/buggy-version/src.main.java.io.dactilo.sumbawa.spring.spreadsheets.fiters.csv.CSVFormatterConfiguration.java", "BodyUseAPI": [], "Fixed commit": "fcbabb870d7e4a12ed84ee126ebfcaf828e4e968", "Url": "https://api.github.com/repos/Dactilo/spring-spreadsheet", "Date": "2018-07-06T06:18:26Z"},
{"Line": "47=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.khelenyuk.entity.Meal.getUserId()=>com.khelenyuk.model.Meal.getUserId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5141/buggy-version/src.main.java.com.khelenyuk.command.commands.AddMealCommand.java", "BodyUseAPI": [], "Fixed commit": "a089d3a5bc85592877826b71ab63b42f538a2276", "Url": "https://api.github.com/repos/konovaliuk/Khelenyuk", "Date": "2018-01-11T20:31:27Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.khelenyuk.servlet.MessageManager.getProperty(java.lang.String)=>com.khelenyuk.controller.MessageManager.getProperty(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5141/buggy-version/src.main.java.com.khelenyuk.command.commands.AddMealCommand.java", "BodyUseAPI": [], "Fixed commit": "a089d3a5bc85592877826b71ab63b42f538a2276", "Url": "https://api.github.com/repos/konovaliuk/Khelenyuk", "Date": "2018-01-11T20:31:27Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.khelenyuk.servlet.ConfigurationManager.getProperty(java.lang.String)=>com.khelenyuk.controller.ConfigurationManager.getProperty(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5141/buggy-version/src.main.java.com.khelenyuk.command.commands.AddMealCommand.java", "BodyUseAPI": [], "Fixed commit": "a089d3a5bc85592877826b71ab63b42f538a2276", "Url": "https://api.github.com/repos/konovaliuk/Khelenyuk", "Date": "2018-01-11T20:31:27Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.khelenyuk.service.IMenuService.addMeal(com.khelenyuk.entity.Meal)=>com.khelenyuk.service.IMenuService.addMeal(com.khelenyuk.model.Meal)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5141/buggy-version/src.main.java.com.khelenyuk.command.commands.AddMealCommand.java", "BodyUseAPI": [], "Fixed commit": "a089d3a5bc85592877826b71ab63b42f538a2276", "Url": "https://api.github.com/repos/konovaliuk/Khelenyuk", "Date": "2018-01-11T20:31:27Z"},
{"Line": "188=>212", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.PrintStream.println(int)=>java.io.PrintStream.println(MyLinkedList)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4714/buggy-version/08LinkedLists.MyLinkedList.java", "BodyUseAPI": [], "Fixed commit": "2b052397f223898a801fe34d7079f66b2ed33c4e", "Url": "https://api.github.com/repos/AntonDanylenko/MKS22X", "Date": "2018-04-11T03:02:04Z"},
{"Line": "187=>211", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(int)=>MyLinkedList.remove(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4714/buggy-version/08LinkedLists.MyLinkedList.java", "BodyUseAPI": [], "Fixed commit": "2b052397f223898a801fe34d7079f66b2ed33c4e", "Url": "https://api.github.com/repos/AntonDanylenko/MKS22X", "Date": "2018-04-11T03:02:04Z"},
{"Line": "10=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.android.android_me.ui.AppCompatActivity.onCreate(android.os.Bundle)=>android.support.v7.app.AppCompatActivity.onCreate(android.os.Bundle)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4355/buggy-version/app.src.main.java.com.example.android.android_me.ui.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7c79fad97b090104a97352fd04aa29bfff599243", "Url": "https://api.github.com/repos/benktesh/Android_Me", "Date": "2018-06-14T11:44:27Z"},
{"Line": "96=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "dk.aau.cs.A312a.results.ResultsToFile.AddCar(dk.aau.cs.A312a.simulering.Car)=>dk.aau.cs.A312a.results.ResultsToTXT.AddCar(dk.aau.cs.A312a.simulering.Car)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7393/buggy-version/src.dk.aau.cs.A312a.simulering.Simulator.java", "BodyUseAPI": [], "Fixed commit": "5d7709af32a3ddc3e6dd18d107ab3079ff1d25c0", "Url": "https://api.github.com/repos/thorulf4/ProjectDrivingEagle", "Date": "2018-05-16T11:47:13Z"},
{"Line": "143=>143", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.mygdx.game.WorldController.spawnCarrots(com.badlogic.gdx.math.Vector2,Constants.CARROT_SPAWN_MAX,Constants.CARROT_SPAWN_RADIUS)=>com.mygdx.game.WorldController.spawnCarrots(com.badlogic.gdx.math.Vector2,Constants.CARROTS_SPAWN_MAX,Constants.CARROTS_SPAWN_RADIUS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1932/buggy-version/core.src.com.mygdx.game.WorldController.java", "BodyUseAPI": [], "Fixed commit": "a0629ba8de061f627a3b700a7aacaaac963c6e17", "Url": "https://api.github.com/repos/pdeppen/CSC361_F18_G2", "Date": "2018-10-16T23:13:32Z"},
{"Line": "172=>172", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ru.lod_misis.ithappened.Domain.TrackingV1.setDeleted(boolean)=>ru.lod_misis.ithappened.Domain.TrackingV1.DeleteTracking()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3596/buggy-version/Android.ItHappenedAndroid.app.src.main.java.ru.lod_misis.ithappened.Infrastructure.TrackingRepository.java", "BodyUseAPI": [], "Fixed commit": "04dd0fc2320cafd7c42071deac373024e95f2bb9", "Url": "https://api.github.com/repos/LeagueOfDevelopers/ItHappened", "Date": "2018-07-03T12:50:02Z"},
{"Line": "683=>684", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "currentScope.getImpl().getReferent().getImpl()=>org.modeldriven.alf.syntax.expressions.impl.ElementReference.getImpl()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/248/buggy-version/org.modeldriven.alf.src.org.modeldriven.alf.syntax.expressions.impl.InvocationExpressionImpl.java", "BodyUseAPI": [], "Fixed commit": "0951ca0bfc33e5c47f90c038774c61e9ce2c23bc", "Url": "https://api.github.com/repos/ModelDriven/Alf-Reference-Implementation", "Date": "2018-02-24T20:24:28Z"},
{"Line": "154=>155", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.replace(java.lang.String,java.lang.String)=>java.lang.String.replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2244/buggy-version/flyway-core.src.main.java.org.flywaydb.core.internal.database.db2.DB2SqlStatementBuilder.java", "BodyUseAPI": [], "Fixed commit": "abd6f37e061943978d756f2b351cd8c402238d1c", "Url": "https://api.github.com/repos/billwanjohi/flyway", "Date": "2018-01-20T19:31:39Z"},
{"Line": "154=>155", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.replace(java.lang.String,java.lang.String)=>java.lang.String.replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2244/buggy-version/flyway-core.src.main.java.org.flywaydb.core.internal.database.db2.DB2SqlStatementBuilder.java", "BodyUseAPI": [], "Fixed commit": "abd6f37e061943978d756f2b351cd8c402238d1c", "Url": "https://api.github.com/repos/billwanjohi/flyway", "Date": "2018-01-20T19:31:39Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.mewx.github.collector.RepoWorker.run()=>org.mewx.github.collector.RepoWorker.run(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8288/buggy-version/src.main.java.org.mewx.github.collector.OrgWorker.java", "BodyUseAPI": [], "Fixed commit": "baf30d893774985b3881325b4afdb73d8e9cb30a", "Url": "https://api.github.com/repos/MewX/Github-Organization-Data-Collector", "Date": "2018-05-11T15:19:01Z"},
{"Line": "188=>188", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.swing.JPasswordField.getText()=>javax.swing.JPasswordField.getPassword()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4461/buggy-version/src.com.inventory.ui.LoginDialog.java", "BodyUseAPI": [], "Fixed commit": "02daba518858da9addbde8285e05b1b89ad929f2", "Url": "https://api.github.com/repos/shamsuzzamansadi/JInventory", "Date": "2018-09-29T14:03:54Z"},
{"Line": "179=>179", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "conversations.get(j).addMessage(de.sinas.Message)=>conversations.get(j).addMessages(de.sinas.Message)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5057/buggy-version/src.de.sinas.server.Database.java", "BodyUseAPI": [], "Fixed commit": "3eb5d477bd3110c2d37fa3083a181a0fa271f6ff", "Url": "https://api.github.com/repos/Jonicho/SiNaS", "Date": "2018-06-28T06:28:31Z"},
{"Line": "300=>300", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "QRcode.QRDecryption.rotateMatrix90()=>QRcode.QRDecryption.rotateMatrix90()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9242/buggy-version/cc-groupProject.src.main.java.QRcode.QRDecryption.java", "BodyUseAPI": [], "Fixed commit": "fab9cc8c5b994b8b7c7b8d75b5fd60aa0453222e", "Url": "https://api.github.com/repos/Mimi-Gong/cc-phase1", "Date": "2018-10-19T22:12:45Z"},
{"Line": "298=>298", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "QRcode.QRDecryption.rotateMatrix180()=>QRcode.QRDecryption.rotateMatrix180()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9242/buggy-version/cc-groupProject.src.main.java.QRcode.QRDecryption.java", "BodyUseAPI": [], "Fixed commit": "fab9cc8c5b994b8b7c7b8d75b5fd60aa0453222e", "Url": "https://api.github.com/repos/Mimi-Gong/cc-phase1", "Date": "2018-10-19T22:12:45Z"},
{"Line": "304=>304", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "QRcode.QRDecryption.rotateMatrix270()=>QRcode.QRDecryption.rotateMatrix270()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9242/buggy-version/cc-groupProject.src.main.java.QRcode.QRDecryption.java", "BodyUseAPI": [], "Fixed commit": "fab9cc8c5b994b8b7c7b8d75b5fd60aa0453222e", "Url": "https://api.github.com/repos/Mimi-Gong/cc-phase1", "Date": "2018-10-19T22:12:45Z"},
{"Line": "199=>199", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.t13g2.forum.model.forum.User.getIsBlock()=>com.t13g2.forum.model.forum.User.isBlock()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6259/buggy-version/src.main.java.com.t13g2.forum.model.ForumBook.java", "BodyUseAPI": [], "Fixed commit": "b254e1a653051142661abc80414c88c7702fd092", "Url": "https://api.github.com/repos/E0191729/addressbook-level4", "Date": "2018-10-26T09:52:32Z"},
{"Line": "12=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.boot.web.servlet.FilterRegistrationBean.addUrlPatterns(java.lang.String)=>org.springframework.boot.web.servlet.FilterRegistrationBean<com.wcfvol.onlinejudge.filter.JwtAuthenticationFilter>.addUrlPatterns(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2669/buggy-version/src.main.java.com.wcfvol.onlinejudge.filter.RegisterBean.java", "BodyUseAPI": [], "Fixed commit": "76e75fe7453a554642ac7ca0bbda0162e9a097c2", "Url": "https://api.github.com/repos/WCFVOL/onlinejudge", "Date": "2018-07-07T12:11:16Z"},
{"Line": "52=>52", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "water.util.Log.err(java.lang.String)=>water.util.Log.warn(java.lang.String,java.lang.NumberFormatException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3437/buggy-version/h2o-core.src.main.java.hex.ConfusionMatrix.java", "BodyUseAPI": [], "Fixed commit": "dffd3817df96fc2b407acd993409d39c3f85dfda", "Url": "https://api.github.com/repos/h2oai/h2o-3", "Date": "2018-06-14T18:22:59Z"},
{"Line": "43=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.app.AlarmManager.setRepeating(AlarmManager.RTC_WAKEUP,long,int,android.app.PendingIntent)=>android.app.AlarmManager.setRepeating(AlarmManager.RTC_WAKEUP,long,AlarmManager.INTERVAL_DAY,android.app.PendingIntent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6769/buggy-version/QuitSmokeMobile.app.src.main.java.ClientService.webservice.Receiver.ResetStreakReceiver.java", "BodyUseAPI": [], "Fixed commit": "b01b98a15d6c9c897a77f52bea6036fd76a57374", "Url": "https://api.github.com/repos/WilliamWangShuang/QuitSmoke", "Date": "2018-09-24T06:26:34Z"},
{"Line": "83=>85", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.TextView.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6769/buggy-version/QuitSmokeMobile.app.src.main.java.com.example.william.quitsmokeappclient.Fragments.CreatePlanFragment.java", "BodyUseAPI": [], "Fixed commit": "b01b98a15d6c9c897a77f52bea6036fd76a57374", "Url": "https://api.github.com/repos/WilliamWangShuang/QuitSmoke", "Date": "2018-09-24T06:26:34Z"},
{"Line": "522=>522", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.hardware.Camera.setPreviewCallback(com.journeyapps.barcodescanner.camera.CameraManager.CameraPreviewCallback)=>android.hardware.Camera.setOneShotPreviewCallback(com.journeyapps.barcodescanner.camera.CameraManager.CameraPreviewCallback)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8019/buggy-version/zxing-android-embedded.src.com.journeyapps.barcodescanner.camera.CameraManager.java", "BodyUseAPI": [], "Fixed commit": "07c3eb03d2402c8eaf22c6313b36f5fc74561d09", "Url": "https://api.github.com/repos/Tougee/zxing-android-embedded", "Date": "2018-10-19T11:49:45Z"},
{"Line": "15=>15", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "byog.Core.Game.toString()=>byog.Core.TETile.toString(byog.Core.Main)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7406/buggy-version/proj2.byog.Core.Main.java", "BodyUseAPI": [], "Fixed commit": "577ce621011843474ecf8a2f83fda77f2d640663", "Url": "https://api.github.com/repos/michellesri/cs61b", "Date": "2018-02-22T06:47:51Z"},
{"Line": "114=>114", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "controllers.BaseController.handleRequest(java.lang.String,<nulltype>,<nulltype>,java.lang.String,java.lang.String)=>controllers.BaseController.handleRequest(java.lang.String,<nulltype>,<nulltype>,java.lang.String,java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9363/buggy-version/service.app.controllers.BaseController.java", "BodyUseAPI": [], "Fixed commit": "433c158e7083bee7f95b02ca45186026cf606e93", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service", "Date": "2018-09-26T12:44:48Z"},
{"Line": "28=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "event.getMessage().startsWith(java.lang.String)=>event.getMessage().split(\" \")[0].equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1487/buggy-version/src.com.dbsoftware.bungeeutilisals.bungee.punishment.listeners.ChatListener.java", "BodyUseAPI": [], "Fixed commit": "69d292001d75e51548be859335105004981fbec6", "Url": "https://api.github.com/repos/didjee2/BungeeUtilisals", "Date": "2018-02-05T19:13:38Z"},
{"Line": "12=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "demo.MVCStudentDemo.setAge(int)=>model.Student.setAge(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3371/buggy-version/src.demo.MVCStudentDemo.java", "BodyUseAPI": [], "Fixed commit": "d5b3aed47f8f0c83f3c86b19288221576b2a4416", "Url": "https://api.github.com/repos/dinhlamvn/demo_mvc", "Date": "2018-02-09T04:21:36Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "controller.StudentController.setEmail(java.lang.String)=>controller.StudentController.setStudentEmail(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3371/buggy-version/src.demo.MVCStudentDemo.java", "BodyUseAPI": [], "Fixed commit": "d5b3aed47f8f0c83f3c86b19288221576b2a4416", "Url": "https://api.github.com/repos/dinhlamvn/demo_mvc", "Date": "2018-02-09T04:21:36Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "controller.StudentController.setAge(int)=>controller.StudentController.setStudentAge(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3371/buggy-version/src.demo.MVCStudentDemo.java", "BodyUseAPI": [], "Fixed commit": "d5b3aed47f8f0c83f3c86b19288221576b2a4416", "Url": "https://api.github.com/repos/dinhlamvn/demo_mvc", "Date": "2018-02-09T04:21:36Z"},
{"Line": "97=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.nick.model.User.getId()=>org.nick.model.User.getUsername()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1784/buggy-version/src.main.java.org.nick.controller.rest.UserRestController.java", "BodyUseAPI": [], "Fixed commit": "eff0cc2153a04daa8a1d95fcc0c5a88ae0dcdeb1", "Url": "https://api.github.com/repos/Nickath/WebTimeSheetCalculator", "Date": "2018-07-31T17:40:12Z"},
{"Line": "95=>97", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.nick.model.User.setEmail(user.getEmail())=>org.nick.model.User.setUsername(user.getUsername())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1784/buggy-version/src.main.java.org.nick.controller.rest.UserRestController.java", "BodyUseAPI": [], "Fixed commit": "eff0cc2153a04daa8a1d95fcc0c5a88ae0dcdeb1", "Url": "https://api.github.com/repos/Nickath/WebTimeSheetCalculator", "Date": "2018-07-31T17:40:12Z"},
{"Line": "100=>100", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "chatroom.client.PrivateChatEndRequestMessage.getPartner()=>chatroom.client.PrivateChatEndRequestMessage.getRequester()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3415/buggy-version/src.chatroom.client.ClientMessageHandler.java", "BodyUseAPI": [], "Fixed commit": "7fe1001f05e03405e15fe3dad1e944b52bb556ec", "Url": "https://api.github.com/repos/AlexKue/ServerClientChatroom", "Date": "2018-02-08T18:33:06Z"},
{"Line": "96=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "chatroom.client.PrivateChatStartRequestMessage.getPartner()=>chatroom.client.PrivateChatStartRequestMessage.getRequester()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3415/buggy-version/src.chatroom.client.ClientMessageHandler.java", "BodyUseAPI": [], "Fixed commit": "7fe1001f05e03405e15fe3dad1e944b52bb556ec", "Url": "https://api.github.com/repos/AlexKue/ServerClientChatroom", "Date": "2018-02-08T18:33:06Z"},
{"Line": "36=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new org.firstinspires.ftc.teamcode.Autonomous.Modules.DriveTime().setSpeeds(0, 0, 0.6).setTime(int)=>new org.firstinspires.ftc.teamcode.Autonomous.Modules.DriveTime().setSpeeds(0, 0, (-0.6)).setTime(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5425/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.Autonomous.CryptogramRed.java", "BodyUseAPI": [], "Fixed commit": "73ceb5c227a7bde2efb93f2ce19c25ea9ca77184", "Url": "https://api.github.com/repos/MHS-FTC/FTC2017-2018", "Date": "2018-02-10T22:34:00Z"},
{"Line": "31=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.firstinspires.ftc.teamcode.Autonomous.Modules.EncoderDrive.setDistances(int,int)=>org.firstinspires.ftc.teamcode.Autonomous.Modules.DriveTime.setSpeeds(double,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5425/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.Autonomous.CryptogramRed.java", "BodyUseAPI": [], "Fixed commit": "73ceb5c227a7bde2efb93f2ce19c25ea9ca77184", "Url": "https://api.github.com/repos/MHS-FTC/FTC2017-2018", "Date": "2018-02-10T22:34:00Z"},
{"Line": "31=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new org.firstinspires.ftc.teamcode.Autonomous.Modules.EncoderDrive().setDistances(24, 24).setSpeed(double)=>new org.firstinspires.ftc.teamcode.Autonomous.Modules.DriveTime().setSpeeds((-0.4), 0, 0).setTime(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5425/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.Autonomous.CryptogramRed.java", "BodyUseAPI": [], "Fixed commit": "73ceb5c227a7bde2efb93f2ce19c25ea9ca77184", "Url": "https://api.github.com/repos/MHS-FTC/FTC2017-2018", "Date": "2018-02-10T22:34:00Z"},
{"Line": "34=>36", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new org.firstinspires.ftc.teamcode.Autonomous.Modules.DriveTime().setSpeeds(0, 0, 0.6).setTime(int)=>new org.firstinspires.ftc.teamcode.Autonomous.Modules.DriveTime().setSpeeds(0, 0, (-0.6)).setTime(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5425/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.Autonomous.CryptogramRed.java", "BodyUseAPI": [], "Fixed commit": "73ceb5c227a7bde2efb93f2ce19c25ea9ca77184", "Url": "https://api.github.com/repos/MHS-FTC/FTC2017-2018", "Date": "2018-02-10T22:34:00Z"},
{"Line": "31=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new org.firstinspires.ftc.teamcode.Autonomous.EncoderDrive().setDistances(24, 24).setSpeed(double)=>new org.firstinspires.ftc.teamcode.Autonomous.DriveTime().setSpeeds((-0.4), 0, 0).setTime(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5425/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.Autonomous.EverythingRed.java", "BodyUseAPI": [], "Fixed commit": "73ceb5c227a7bde2efb93f2ce19c25ea9ca77184", "Url": "https://api.github.com/repos/MHS-FTC/FTC2017-2018", "Date": "2018-02-10T22:34:00Z"},
{"Line": "31=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new org.firstinspires.ftc.teamcode.Autonomous.EncoderDrive().setDistances(24, 24).setSpeed(double)=>new org.firstinspires.ftc.teamcode.Autonomous.DriveTime().setSpeeds((-0.4), 0, 0).setTime(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5425/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.Autonomous.EverythingRed.java", "BodyUseAPI": [], "Fixed commit": "73ceb5c227a7bde2efb93f2ce19c25ea9ca77184", "Url": "https://api.github.com/repos/MHS-FTC/FTC2017-2018", "Date": "2018-02-10T22:34:00Z"},
{"Line": "36=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new org.firstinspires.ftc.teamcode.Autonomous.DriveTime().setSpeeds(0, 0, 0.6).setTime(int)=>new org.firstinspires.ftc.teamcode.Autonomous.DriveTime().setSpeeds(0, 0, (-0.6)).setTime(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5425/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.Autonomous.EverythingRed.java", "BodyUseAPI": [], "Fixed commit": "73ceb5c227a7bde2efb93f2ce19c25ea9ca77184", "Url": "https://api.github.com/repos/MHS-FTC/FTC2017-2018", "Date": "2018-02-10T22:34:00Z"},
{"Line": "34=>36", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new org.firstinspires.ftc.teamcode.Autonomous.DriveTime().setSpeeds(0, 0, 0.6).setTime(int)=>new org.firstinspires.ftc.teamcode.Autonomous.DriveTime().setSpeeds(0, 0, (-0.6)).setTime(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5425/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.Autonomous.EverythingRed.java", "BodyUseAPI": [], "Fixed commit": "73ceb5c227a7bde2efb93f2ce19c25ea9ca77184", "Url": "https://api.github.com/repos/MHS-FTC/FTC2017-2018", "Date": "2018-02-10T22:34:00Z"},
{"Line": "61=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.net.Socket.bind(java.net.InetSocketAddress)=>java.net.Socket.connect(java.net.InetSocketAddress)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9505/buggy-version/sumobots.driverstation.src.main.java.org.inspirerobotics.sumobots.driverstation.robot.Robot.java", "BodyUseAPI": [], "Fixed commit": "8b935e2bd621f7e4eb4d0e98ca6d1e317a34189d", "Url": "https://api.github.com/repos/InspireRobotics/sumobots", "Date": "2018-05-11T23:52:01Z"},
{"Line": "27=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "net.minecraft.client.resources.I18n.format(java.lang.String,java.lang.Object[])=>com.oitsjustjose.geolosys.client.TranslationManager.getInstance().translate(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8967/buggy-version/src.main.java.com.oitsjustjose.geolosys.client.ClientProxy.java", "BodyUseAPI": [], "Fixed commit": "743149d673cd7ef523480d6718d836ca8ea494eb", "Url": "https://api.github.com/repos/oitsjustjose/Geolosys", "Date": "2018-10-29T22:16:07Z"},
{"Line": "27=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.minecraft.client.resources.I18n.format(java.lang.String,java.lang.Object[])=>com.oitsjustjose.geolosys.client.TranslationManager.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8967/buggy-version/src.main.java.com.oitsjustjose.geolosys.client.ClientProxy.java", "BodyUseAPI": [], "Fixed commit": "743149d673cd7ef523480d6718d836ca8ea494eb", "Url": "https://api.github.com/repos/oitsjustjose/Geolosys", "Date": "2018-10-29T22:16:07Z"},
{"Line": "123=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.egov.bpa.transaction.entity.BuildingDetail.getHeightFromGroundWithOutStairRoom()=>org.egov.bpa.transaction.entity.BuildingDetail.getHeightFromGroundWithStairRoom()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1059/buggy-version/egov.egov-bpa.src.main.java.org.egov.bpa.transaction.service.BpaApplicationValidationService.java", "BodyUseAPI": [], "Fixed commit": "fa427edf9453372615da29bba9d2de5184a7097c", "Url": "https://api.github.com/repos/egovernments/egov-smartcity-suite", "Date": "2018-05-22T11:30:59Z"},
{"Line": "161=>171", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.kas.mq.admin.commands.ConnectCommand.writeln(mClient.getResponse())=>com.kas.mq.admin.commands.ConnectCommand.writeln(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7563/buggy-version/kas-mq-admin.src.com.kas.mq.admin.commands.ConnectCommand.java", "BodyUseAPI": [], "Fixed commit": "5239f2ab0b7fa523a1efb7cc166c69bc7acf6337", "Url": "https://api.github.com/repos/shyifrah/kas", "Date": "2018-10-28T16:49:35Z"},
{"Line": "45=>52", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "guild.getGuild().getPublicRole()=>guild.getGuild().getSelfMember()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8244/buggy-version/src.main.java.stream.flarebot.flarebot.commands.moderation.LockChatCommand.java", "BodyUseAPI": [], "Fixed commit": "6af8f767d761870263c8e5dfcc236a6264751bf8", "Url": "https://api.github.com/repos/FlareBot/FlareBot", "Date": "2018-01-02T15:08:17Z"},
{"Line": "41=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "tc.createPermissionOverride(guild.getGuild().getPublicRole()).setDeny(Permission.MESSAGE_WRITE)=>tc.createPermissionOverride(guild.getGuild().getPublicRole()).complete()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8244/buggy-version/src.main.java.stream.flarebot.flarebot.commands.moderation.LockChatCommand.java", "BodyUseAPI": [], "Fixed commit": "6af8f767d761870263c8e5dfcc236a6264751bf8", "Url": "https://api.github.com/repos/FlareBot/FlareBot", "Date": "2018-01-02T15:08:17Z"},
{"Line": "40=>48", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "guild.getGuild().getPublicRole()=>guild.getGuild().getSelfMember()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8244/buggy-version/src.main.java.stream.flarebot.flarebot.commands.moderation.LockChatCommand.java", "BodyUseAPI": [], "Fixed commit": "6af8f767d761870263c8e5dfcc236a6264751bf8", "Url": "https://api.github.com/repos/FlareBot/FlareBot", "Date": "2018-01-02T15:08:17Z"},
{"Line": "40=>48", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "tc.getPermissionOverride(guild.getGuild().getPublicRole()).getDenied()=>tc.getPermissionOverride(guild.getGuild().getSelfMember()).getManager()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8244/buggy-version/src.main.java.stream.flarebot.flarebot.commands.moderation.LockChatCommand.java", "BodyUseAPI": [], "Fixed commit": "6af8f767d761870263c8e5dfcc236a6264751bf8", "Url": "https://api.github.com/repos/FlareBot/FlareBot", "Date": "2018-01-02T15:08:17Z"},
{"Line": "45=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "tc.getPermissionOverride(guild.getGuild().getPublicRole()).getManager().grant(Permission.MESSAGE_WRITE).queue()=>everyoneOvr.getManager().deny(Permission.MESSAGE_WRITE).queue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8244/buggy-version/src.main.java.stream.flarebot.flarebot.commands.moderation.LockChatCommand.java", "BodyUseAPI": [], "Fixed commit": "6af8f767d761870263c8e5dfcc236a6264751bf8", "Url": "https://api.github.com/repos/FlareBot/FlareBot", "Date": "2018-01-02T15:08:17Z"},
{"Line": "108=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.mapbox.api.staticmap.v1.models.StaticMarkerAnnotation>.indexOf(com.mapbox.api.staticmap.v1.models.StaticMarkerAnnotation)=>java.util.List<java.lang.String>.add(marker.url())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2800/buggy-version/services-staticmap.src.main.java.com.mapbox.api.staticmap.v1.MapboxStaticMap.java", "BodyUseAPI": [], "Fixed commit": "c83e53c3e9fedf9ab897e900cfbc9af1cdc29f6d", "Url": "https://api.github.com/repos/freszu/mapbox-java", "Date": "2018-06-08T23:00:43Z"},
{"Line": "110=>110", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Arrays.asList(java.lang.String[])=>java.util.List<java.lang.String>.addAll(java.util.List<java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2800/buggy-version/services-staticmap.src.main.java.com.mapbox.api.staticmap.v1.MapboxStaticMap.java", "BodyUseAPI": [], "Fixed commit": "c83e53c3e9fedf9ab897e900cfbc9af1cdc29f6d", "Url": "https://api.github.com/repos/freszu/mapbox-java", "Date": "2018-06-08T23:00:43Z"},
{"Line": "189=>191", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.uberfire.backend.vfs.Path.toURI()=>org.uberfire.backend.server.util.Paths.convert(org.uberfire.backend.server.util.Paths.convert(resourcePath))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8007/buggy-version/optaplanner-wb-screens.optaplanner-wb-solver-editor.optaplanner-wb-solver-editor-backend.src.main.java.org.optaplanner.workbench.screens.solver.backend.server.SolverValidator.java", "BodyUseAPI": [], "Fixed commit": "5428dff9f91ccb083797f16f352319108ad129e7", "Url": "https://api.github.com/repos/ederign/optaplanner-wb", "Date": "2018-01-18T21:57:14Z"},
{"Line": "189=>191", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "kieWorkbenchModule.getRootPath().toURI().length()=>org.uberfire.backend.server.util.Paths.convert(org.uberfire.backend.server.util.Paths.convert(kieWorkbenchModule.getRootPath()))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8007/buggy-version/optaplanner-wb-screens.optaplanner-wb-solver-editor.optaplanner-wb-solver-editor-backend.src.main.java.org.optaplanner.workbench.screens.solver.backend.server.SolverValidator.java", "BodyUseAPI": [], "Fixed commit": "5428dff9f91ccb083797f16f352319108ad129e7", "Url": "https://api.github.com/repos/ederign/optaplanner-wb", "Date": "2018-01-18T21:57:14Z"},
{"Line": "189=>191", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "kieWorkbenchModule.getRootPath().toURI()=>org.uberfire.backend.server.util.Paths.convert(kieWorkbenchModule.getRootPath())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8007/buggy-version/optaplanner-wb-screens.optaplanner-wb-solver-editor.optaplanner-wb-solver-editor-backend.src.main.java.org.optaplanner.workbench.screens.solver.backend.server.SolverValidator.java", "BodyUseAPI": [], "Fixed commit": "5428dff9f91ccb083797f16f352319108ad129e7", "Url": "https://api.github.com/repos/ederign/optaplanner-wb", "Date": "2018-01-18T21:57:14Z"},
{"Line": "999=>1004", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new java.net.URI(null, null, null, (-1), (\"/\" + pathPart), null, null)=>new java.net.URI(null, \"fakeUser\", \"fakeHost\", (-1), (\"/\" + pathPart), null, null)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4524/buggy-version/client.rest-high-level.src.main.java.org.elasticsearch.client.RequestConverters.java", "BodyUseAPI": [], "Fixed commit": "e0cf00f22d26aaf57a22d13fb775192c8d68cc39", "Url": "https://api.github.com/repos/roycarser/elasticsearch", "Date": "2018-10-14T17:23:43Z"},
{"Line": "691=>694", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "world.getEntitiesWithinAABB(net.minecraft.entity.EntityLivingBase.class, this.getEntityBoundingBox().grow(10, 10, 10), this::canEatEntity).stream().findAny().get()=>java.util.Optional<net.minecraft.entity.EntityLivingBase>.get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7917/buggy-version/src.main.java.org.jurassicraft.server.entity.DinosaurEntity.java", "BodyUseAPI": [], "Fixed commit": "83ddbf94083a04d114e498cafd7675f171218036", "Url": "https://api.github.com/repos/JurassiCraftTeam/JurassiCraft2", "Date": "2018-05-18T22:44:12Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.renderengine.gfx.renderer.Renderer.renderTexturedRect(this.getX(),this.getY(),com.renderengine.api.Display.getWidth(),com.renderengine.api.Display.getHeight(),this.getWidth(),this.getHeight())=>com.renderengine.gfx.renderer.Renderer.renderTexturedRect(float,float,com.renderengine.api.Display.getWidth(),com.renderengine.api.Display.getHeight(),this.getWidth(),this.getHeight())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1670/buggy-version/src.main.java.com.renderengine.api.components.ImageComponent.java", "BodyUseAPI": [], "Fixed commit": "ae1ed677901f082b603c07ad40a198f2611fff84", "Url": "https://api.github.com/repos/JavaBakery/JBRE", "Date": "2018-10-14T22:51:50Z"},
{"Line": "152=>165", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.ListView.setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)=>android.widget.ListView.setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2543/buggy-version/app.src.main.java.com.example.laher.learnfractions.ChapterExamListActivity.java", "BodyUseAPI": [], "Fixed commit": "cf345a08a5022d798e12838b7dcafb26bd93d15d", "Url": "https://api.github.com/repos/miguellaher/learnfractions", "Date": "2018-09-20T03:44:48Z"},
{"Line": "133=>135", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.time.LocalDateTime.parse(java.lang.String,java.time.format.DateTimeFormatter)=>java.time.ZonedDateTime.parse(java.lang.String,java.time.format.DateTimeFormatter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9101/buggy-version/src.main.java.pivot_table_sort_of.pivot_table.PivotDataApp.java", "BodyUseAPI": [], "Fixed commit": "61b9b00b81b4e2ff61da4f0bef863a7976382963", "Url": "https://api.github.com/repos/chrisxkeith/pivot-table-sort-of", "Date": "2018-05-07T15:10:40Z"},
{"Line": "62=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "qa.allot.stabilityVerification.core.trafficStreams.QosTable.getPipeMaxQos()=>qa.allot.stabilityVerification.core.trafficStreams.QosTable.getPipeCatalogMaxQos()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/694/buggy-version/src.qa.allot.stabilityVerification.core.csvParsers.GenerateQoSCsv.java", "BodyUseAPI": [], "Fixed commit": "ee830079a1ae13353110b044b0ca3fc8ca300b07", "Url": "https://api.github.com/repos/vbronshtein/StabilityVerification16", "Date": "2018-08-03T15:16:00Z"},
{"Line": "275=>279", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.length()=>netId.getText().length()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4013/buggy-version/src.main.userinterface.CheckoutHelperView.java", "BodyUseAPI": [], "Fixed commit": "d4f6c9879a94751276867616835b71f7b7e1a0ea", "Url": "https://api.github.com/repos/jvanhouter/t3-pcc", "Date": "2018-05-08T01:10:20Z"},
{"Line": "21=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.briar.server.config.WebServerConfiguration.packages(java.lang.String)=>com.briar.server.config.WebServerConfiguration.register(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7370/buggy-version/src.main.java.com.briar.server.config.WebServerConfiguration.java", "BodyUseAPI": [], "Fixed commit": "c6410a1a3866dda63739ce44b12b02ebcce5b33a", "Url": "https://api.github.com/repos/BenjaminTanguay/briarWebServer", "Date": "2018-03-03T03:14:41Z"},
{"Line": "2060=>2060", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.realm.Realm.copyFromRealm(io.realm.sync.Subscription)=>io.realm.Realm.copyToRealm(io.realm.sync.Subscription)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3271/buggy-version/realm.realm-library.src.main.java.io.realm.RealmQuery.java", "BodyUseAPI": [], "Fixed commit": "9d9eeaeb0ceb71ebce540f2263d37527600cdba1", "Url": "https://api.github.com/repos/realm/realm-java", "Date": "2018-10-13T08:51:55Z"},
{"Line": "20=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "results.getArtistmatches().getArtist().getImage().get(int)=>java.util.List<com.jaysaw.zenmusicplayer.network.Image>.get(((list.size()) - 1))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8518/buggy-version/app.src.main.java.com.jaysaw.zenmusicplayer.network.LastFmResult.java", "BodyUseAPI": [], "Fixed commit": "d24e7ac10b51e4c47628abf7a112a2463b5ee218", "Url": "https://api.github.com/repos/Jaysaw/Zen", "Date": "2018-03-01T21:53:22Z"},
{"Line": "16=>19", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "results.getArtistmatches().getArtist().getImage().get(2).getUrl()=>com.jaysaw.zenmusicplayer.network.LastFmResult.getImageFromImageList(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8518/buggy-version/app.src.main.java.com.jaysaw.zenmusicplayer.network.LastFmResult.java", "BodyUseAPI": [], "Fixed commit": "d24e7ac10b51e4c47628abf7a112a2463b5ee218", "Url": "https://api.github.com/repos/Jaysaw/Zen", "Date": "2018-03-01T21:53:22Z"},
{"Line": "365=>373", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.Spinner.setSelection(int)=>javax.microedition.lcdui.ViewHandler.postEvent(javax.microedition.lcdui.event.SimpleEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2845/buggy-version/app.src.main.java.javax.microedition.lcdui.ChoiceGroup.java", "BodyUseAPI": [], "Fixed commit": "a1a2312739e4ff4fb85dd0127b76197810986124", "Url": "https://api.github.com/repos/nikita36078/J2ME-Loader", "Date": "2018-10-03T11:14:56Z"},
{"Line": "301=>309", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.ListView.setSelection(int)=>javax.microedition.lcdui.ViewHandler.postEvent(javax.microedition.lcdui.event.SimpleEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2845/buggy-version/app.src.main.java.javax.microedition.lcdui.List.java", "BodyUseAPI": [], "Fixed commit": "a1a2312739e4ff4fb85dd0127b76197810986124", "Url": "https://api.github.com/repos/nikita36078/J2ME-Loader", "Date": "2018-10-03T11:14:56Z"},
{"Line": "31=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.vict8or.echo.SettingsFragment.setPreferencesFromResource(R.xml.pref_location,java.lang.String)=>com.vict8or.echo.SettingsFragment.addPreferencesFromResource(R.xml.pref_location)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3155/buggy-version/app.src.main.java.com.vict8or.echo.SettingsFragment.java", "BodyUseAPI": [], "Fixed commit": "91ea82df9185a71e36d0dbea8ada61dc0f9606a3", "Url": "https://api.github.com/repos/vict8or/Echo", "Date": "2018-08-17T03:42:54Z"},
{"Line": "189=>190", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.k2.Util.Identity.IdentityUtil.getId(java.lang.Object,java.lang.String)=>com.k2.Util.Identity.IdentityUtil.getId(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2655/buggy-version/src.main.java.com.k2.Util.Identity.IdentityUtil.java", "BodyUseAPI": [], "Fixed commit": "745261032ce822310ad4762927f202af30a2e2ed", "Url": "https://api.github.com/repos/simonemmott/Util", "Date": "2018-03-31T08:56:09Z"},
{"Line": "133=>139", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.dExtMap.get(name).getClass().getSuperclass()=>com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.dExtMap.get(name).getClass().getGenericInterfaces()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1901/buggy-version/intg.src.main.java.com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.java", "BodyUseAPI": [], "Fixed commit": "e165bd8a32deabf790db564a9ca103998020e2c1", "Url": "https://api.github.com/repos/yonyou-iuap/iuap-pap-baseservice", "Date": "2018-09-27T06:02:58Z"},
{"Line": "120=>123", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.sExtMap.get(name).getClass().getSuperclass()=>com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.sExtMap.get(name).getClass().getGenericInterfaces()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1901/buggy-version/intg.src.main.java.com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.java", "BodyUseAPI": [], "Fixed commit": "e165bd8a32deabf790db564a9ca103998020e2c1", "Url": "https://api.github.com/repos/yonyou-iuap/iuap-pap-baseservice", "Date": "2018-09-27T06:02:58Z"},
{"Line": "121=>124", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.sExtMap.get(name).getClass().getSuperclass()=>com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.sExtMap.get(name).getClass().getGenericInterfaces()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1901/buggy-version/intg.src.main.java.com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.java", "BodyUseAPI": [], "Fixed commit": "e165bd8a32deabf790db564a9ca103998020e2c1", "Url": "https://api.github.com/repos/yonyou-iuap/iuap-pap-baseservice", "Date": "2018-09-27T06:02:58Z"},
{"Line": "109=>110", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.qExtMap.get(name).getClass().getSuperclass()=>com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.qExtMap.get(name).getClass().getGenericInterfaces()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1901/buggy-version/intg.src.main.java.com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.java", "BodyUseAPI": [], "Fixed commit": "e165bd8a32deabf790db564a9ca103998020e2c1", "Url": "https://api.github.com/repos/yonyou-iuap/iuap-pap-baseservice", "Date": "2018-09-27T06:02:58Z"},
{"Line": "108=>109", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.qExtMap.get(name).getClass().getSuperclass()=>com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.qExtMap.get(name).getClass().getGenericInterfaces()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1901/buggy-version/intg.src.main.java.com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.java", "BodyUseAPI": [], "Fixed commit": "e165bd8a32deabf790db564a9ca103998020e2c1", "Url": "https://api.github.com/repos/yonyou-iuap/iuap-pap-baseservice", "Date": "2018-09-27T06:02:58Z"},
{"Line": "134=>138", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.dExtMap.get(name).getClass().getSuperclass()=>com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.dExtMap.get(name).getClass().getGenericInterfaces()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1901/buggy-version/intg.src.main.java.com.yonyou.iuap.baseservice.intg.support.ServiceFeatureHolder.java", "BodyUseAPI": [], "Fixed commit": "e165bd8a32deabf790db564a9ca103998020e2c1", "Url": "https://api.github.com/repos/yonyou-iuap/iuap-pap-baseservice", "Date": "2018-09-27T06:02:58Z"},
{"Line": "225=>227", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.changyi.fi.component.merchant.service.MerchantServiceImpl.createQRCode(merchantPO.getId())=>com.changyi.fi.component.merchant.service.MerchantServiceImpl.createQRCodeDownloadPath(merchantPO.getId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/586/buggy-version/src.main.java.com.changyi.fi.component.merchant.service.MerchantServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "71f4e473e61af4b60c765b7da1714120b367c22b", "Url": "https://api.github.com/repos/finley007/Suishoushu", "Date": "2018-01-08T12:23:43Z"},
{"Line": "73=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.mjr.mjrlegendslib.util.NetworkUtilities.getPlayerFromNetHandler(net.minecraft.network.INetHandler)=>GalacticraftCore.proxy.getPlayerFromNetHandler(net.minecraft.network.INetHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9389/buggy-version/src.main.java.com.mjr.extraplanets.network.ExtraPlanetsPacketHandler.java", "BodyUseAPI": [], "Fixed commit": "c5d0dca21d0421831ce317f4a7003523be3d987a", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-02-23T16:36:36Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.mjr.mjrlegendslib.util.NetworkUtilities.getPlayerFromNetHandler(net.minecraft.network.INetHandler)=>GalacticraftCore.proxy.getPlayerFromNetHandler(net.minecraft.network.INetHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9389/buggy-version/src.main.java.com.mjr.extraplanets.network.ExtraPlanetsPacketHandler.java", "BodyUseAPI": [], "Fixed commit": "c5d0dca21d0421831ce317f4a7003523be3d987a", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-02-23T16:36:36Z"},
{"Line": "73=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.Intent.putExtra(java.lang.String,java.lang.String)=>android.content.Intent.putExtra(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7218/buggy-version/app.src.main.java.com.epicodus.myrestaurants.adapters.FirebaseRestaurantViewHolder.java", "BodyUseAPI": [], "Fixed commit": "62586452c91af3e42d2ba86e9af937b46ece4650", "Url": "https://api.github.com/repos/rossfletcher19/restaurantsDroid", "Date": "2018-03-27T23:30:27Z"},
{"Line": "19=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "util.Group.setAccessibleText(java.lang.String)=>projects.shortproj.util.Group.setAccessibleText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5564/buggy-version/src.projects.shortproj.util.ElementGroup.java", "BodyUseAPI": [], "Fixed commit": "e0849a867b16720f961177f3dffc3612808881ea", "Url": "https://api.github.com/repos/andrewleonov/ncf-team5", "Date": "2018-02-14T19:28:29Z"},
{"Line": "65=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "util.Node.setEffect(<nulltype>)=>projects.shortproj.util.Node.setEffect(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5564/buggy-version/src.projects.shortproj.util.ElementGroup.java", "BodyUseAPI": [], "Fixed commit": "e0849a867b16720f961177f3dffc3612808881ea", "Url": "https://api.github.com/repos/andrewleonov/ncf-team5", "Date": "2018-02-14T19:28:29Z"},
{"Line": "41=>41", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "util.Group.getChildren()=>projects.shortproj.util.Group.getChildren()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5564/buggy-version/src.projects.shortproj.util.ElementGroup.java", "BodyUseAPI": [], "Fixed commit": "e0849a867b16720f961177f3dffc3612808881ea", "Url": "https://api.github.com/repos/andrewleonov/ncf-team5", "Date": "2018-02-14T19:28:29Z"},
{"Line": "64=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "util.Group.getChildren()=>projects.shortproj.util.Group.getChildren()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5564/buggy-version/src.projects.shortproj.util.ElementGroup.java", "BodyUseAPI": [], "Fixed commit": "e0849a867b16720f961177f3dffc3612808881ea", "Url": "https://api.github.com/repos/andrewleonov/ncf-team5", "Date": "2018-02-14T19:28:29Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "util.Node.setEffect(javafx.scene.effect.DropShadow)=>projects.shortproj.util.Node.setEffect(javafx.scene.effect.DropShadow)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5564/buggy-version/src.projects.shortproj.util.ElementGroup.java", "BodyUseAPI": [], "Fixed commit": "e0849a867b16720f961177f3dffc3612808881ea", "Url": "https://api.github.com/repos/andrewleonov/ncf-team5", "Date": "2018-02-14T19:28:29Z"},
{"Line": "45=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "group.getChildren().add(util.Node)=>group.getChildren().add(projects.shortproj.util.Node)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5564/buggy-version/src.projects.shortproj.util.ElementGroup.java", "BodyUseAPI": [], "Fixed commit": "e0849a867b16720f961177f3dffc3612808881ea", "Url": "https://api.github.com/repos/andrewleonov/ncf-team5", "Date": "2018-02-14T19:28:29Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "util.Group.getChildren()=>projects.shortproj.util.Group.getChildren()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5564/buggy-version/src.projects.shortproj.util.ElementGroup.java", "BodyUseAPI": [], "Fixed commit": "e0849a867b16720f961177f3dffc3612808881ea", "Url": "https://api.github.com/repos/andrewleonov/ncf-team5", "Date": "2018-02-14T19:28:29Z"},
{"Line": "45=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "util.Group.getChildren()=>projects.shortproj.util.Group.getChildren()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5564/buggy-version/src.projects.shortproj.util.ElementGroup.java", "BodyUseAPI": [], "Fixed commit": "e0849a867b16720f961177f3dffc3612808881ea", "Url": "https://api.github.com/repos/andrewleonov/ncf-team5", "Date": "2018-02-14T19:28:29Z"},
{"Line": "746=>746", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.ScrollView.isWithinDeltaOfScreen(android.view.View,int)=>android.widget.ScrollView.isWithinDeltaOfScreen(android.view.View,int,getHeight())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9116/buggy-version/core.java.android.widget.ScrollView.java", "BodyUseAPI": [], "Fixed commit": "7d4200d03fa55a13eda63f979dcf47792f0af31d", "Url": "https://api.github.com/repos/ArrowOS/android_frameworks_base", "Date": "2009-09-22T02:45:14Z"},
{"Line": "1129=>1130", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.ScrollView.isWithinDeltaOfScreen(android.view.View,int)=>android.widget.ScrollView.isWithinDeltaOfScreen(android.view.View,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9116/buggy-version/core.java.android.widget.ScrollView.java", "BodyUseAPI": [], "Fixed commit": "7d4200d03fa55a13eda63f979dcf47792f0af31d", "Url": "https://api.github.com/repos/ArrowOS/android_frameworks_base", "Date": "2009-09-22T02:45:14Z"},
{"Line": "1129=>1130", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.ScrollView.isWithinDeltaOfScreen(android.view.View,int)=>android.widget.ScrollView.isWithinDeltaOfScreen(android.view.View,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9116/buggy-version/core.java.android.widget.ScrollView.java", "BodyUseAPI": [], "Fixed commit": "7d4200d03fa55a13eda63f979dcf47792f0af31d", "Url": "https://api.github.com/repos/ArrowOS/android_frameworks_base", "Date": "2009-09-22T02:45:14Z"},
{"Line": "795=>795", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.ScrollView.isWithinDeltaOfScreen(android.view.View,int)=>android.widget.ScrollView.isWithinDeltaOfScreen(android.view.View,int,getHeight())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9116/buggy-version/core.java.android.widget.ScrollView.java", "BodyUseAPI": [], "Fixed commit": "7d4200d03fa55a13eda63f979dcf47792f0af31d", "Url": "https://api.github.com/repos/ArrowOS/android_frameworks_base", "Date": "2009-09-22T02:45:14Z"},
{"Line": "27=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "em.getMetamodel().getManagedTypes()=>em.getMetamodel().getEntities()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5891/buggy-version/src.main.java.ch.yanicksenn.heroku.Launcher.java", "BodyUseAPI": [], "Fixed commit": "0fb606c5f78b9142bb56ec2592181b3fdcae9eda", "Url": "https://api.github.com/repos/yanicksenn/heroku-blog", "Date": "2018-04-06T12:29:11Z"},
{"Line": "293=>293", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.math.BigDecimal.toPlainString()=>java.math.BigDecimal.stripTrailingZeros()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/511/buggy-version/app.src.main.java.com.developingdaan.calcyoulater.Calcyoulater.java", "BodyUseAPI": [], "Fixed commit": "4cead504e430e6684f0b24e3f160539314d534d7", "Url": "https://api.github.com/repos/daanschutte/calculator", "Date": "2018-03-23T15:50:22Z"},
{"Line": "308=>308", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.developingdaan.calcyoulater.Calcyoulater.updateInputBuffer(java.lang.String)=>java.math.BigDecimal.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/511/buggy-version/app.src.main.java.com.developingdaan.calcyoulater.Calcyoulater.java", "BodyUseAPI": [], "Fixed commit": "4cead504e430e6684f0b24e3f160539314d534d7", "Url": "https://api.github.com/repos/daanschutte/calculator", "Date": "2018-03-23T15:50:22Z"},
{"Line": "308=>308", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.math.BigDecimal.toPlainString()=>java.math.BigDecimal.stripTrailingZeros()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/511/buggy-version/app.src.main.java.com.developingdaan.calcyoulater.Calcyoulater.java", "BodyUseAPI": [], "Fixed commit": "4cead504e430e6684f0b24e3f160539314d534d7", "Url": "https://api.github.com/repos/daanschutte/calculator", "Date": "2018-03-23T15:50:22Z"},
{"Line": "293=>293", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.developingdaan.calcyoulater.Calcyoulater.updateInputBuffer(java.lang.String)=>java.math.BigDecimal.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/511/buggy-version/app.src.main.java.com.developingdaan.calcyoulater.Calcyoulater.java", "BodyUseAPI": [], "Fixed commit": "4cead504e430e6684f0b24e3f160539314d534d7", "Url": "https://api.github.com/repos/daanschutte/calculator", "Date": "2018-03-23T15:50:22Z"},
{"Line": "60=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Map<java.lang.String, objective.taskboard.data.Issue>.get(java.lang.String)=>java.util.Map<java.lang.String, objective.taskboard.data.Issue>.remove(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9075/buggy-version/src.main.java.objective.taskboard.issueBuffer.CardMapDB.java", "BodyUseAPI": [], "Fixed commit": "fff7eb2782b4b8df04fcc9c9324b4ba631006b32", "Url": "https://api.github.com/repos/objective-solutions/taskboard", "Date": "2018-02-15T16:11:29Z"},
{"Line": "584=>584", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.intuit.karate.XmlUtils.toString(org.w3c.dom.Document)=>com.intuit.karate.XmlUtils.toString(org.w3c.dom.Node)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3794/buggy-version/karate-core.src.main.java.com.intuit.karate.Script.java", "BodyUseAPI": [], "Fixed commit": "0d53b2cbd3d63e16ba01af9c177f5b86e55af303", "Url": "https://api.github.com/repos/intuit/karate", "Date": "2018-01-31T16:55:02Z"},
{"Line": "21=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.servlet.http.HttpServletResponse.getWriter()=>javax.servlet.http.HttpServletResponse.getOutputStream()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2925/buggy-version/project.project-rest.src.main.java.com.project.rest.restful.filter.HeaderValidator.java", "BodyUseAPI": [], "Fixed commit": "80b926846c38e26f97565a766813beac9f68af67", "Url": "https://api.github.com/repos/zhibozhao/project1", "Date": "2018-02-11T12:31:26Z"},
{"Line": "52=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "me.bogerchan.niervisualizer.NierVisualizerManager.start(android.view.SurfaceView,me.bogerchan.niervisualizer.renderer.IRenderer[])=>com.ivanroot.minplayer.visualization.wallpapers.NierWallpaperService.WallpaperEngine.WallpaperSurfaceView.onDestroy()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6122/buggy-version/app.src.main.java.com.ivanroot.minplayer.visualization.wallpapers.NierWallpaperService.java", "BodyUseAPI": [], "Fixed commit": "a7c039c3ea54b842667f0c4922952815ff6a6bd8", "Url": "https://api.github.com/repos/youngroot/MinPlayer", "Date": "2018-10-29T15:51:52Z"},
{"Line": "67=>67", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.slf4j.Logger.error(java.lang.String,indexerConfig.getName())=>org.slf4j.Logger.error(((\"Unexpected execution exception while executing call for indexer \" + (indexerConfig.getName())) + \". This will hopefully be fixed soon\"),java.util.concurrent.RejectedExecutionException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6042/buggy-version/core.src.main.java.org.nzbhydra.indexers.IndexerWebAccess.java", "BodyUseAPI": [], "Fixed commit": "d39a9b8196c4a0bfd73e2cb32e4bb2d5b1914d86", "Url": "https://api.github.com/repos/theotherp/nzbhydra2", "Date": "2018-01-13T16:23:50Z"},
{"Line": "39=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.sufficientlysecure.htmltextview.HtmlTextView.setHtmlFromRawResource(android.content.Context,java.lang.Integer,boolean)=>org.sufficientlysecure.htmltextview.HtmlTextView.setHtml(java.lang.Integer,org.sufficientlysecure.htmltextview.HtmlResImageGetter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/17/buggy-version/app.src.main.java.info.zamojski.soft.towercollector.controls.DialogManager.java", "BodyUseAPI": [], "Fixed commit": "1b163bcd30af1b7149c7acebd05dc24b86ff7e7e", "Url": "https://api.github.com/repos/zamojski/TowerCollector", "Date": "2018-01-03T11:50:30Z"},
{"Line": "39=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.sufficientlysecure.htmltextview.HtmlTextView.setHtmlFromRawResource(android.content.Context,java.lang.Integer,boolean)=>org.sufficientlysecure.htmltextview.HtmlTextView.setHtml(java.lang.Integer,org.sufficientlysecure.htmltextview.HtmlResImageGetter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/17/buggy-version/app.src.main.java.info.zamojski.soft.towercollector.controls.DialogManager.java", "BodyUseAPI": [], "Fixed commit": "1b163bcd30af1b7149c7acebd05dc24b86ff7e7e", "Url": "https://api.github.com/repos/zamojski/TowerCollector", "Date": "2018-01-03T11:50:30Z"},
{"Line": "41=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.sufficientlysecure.htmltextview.HtmlTextView.setHtmlFromString(java.lang.String,boolean)=>org.sufficientlysecure.htmltextview.HtmlTextView.setHtml(java.lang.String,org.sufficientlysecure.htmltextview.HtmlResImageGetter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/17/buggy-version/app.src.main.java.info.zamojski.soft.towercollector.controls.DialogManager.java", "BodyUseAPI": [], "Fixed commit": "1b163bcd30af1b7149c7acebd05dc24b86ff7e7e", "Url": "https://api.github.com/repos/zamojski/TowerCollector", "Date": "2018-01-03T11:50:30Z"},
{"Line": "443=>444", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.teamwizardry.wizardry.api.spell.module.IModule.equals(com.teamwizardry.wizardry.api.spell.module.IModuleModifier)=>mc.getID().equals(modifier.getID())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5560/buggy-version/src.main.java.com.teamwizardry.wizardry.api.spell.module.Module.java", "BodyUseAPI": [], "Fixed commit": "df4216e8d0c137a0a7ab51a6468d5d6769fa5ebf", "Url": "https://api.github.com/repos/tcheinen/Wizardry", "Date": "2018-10-19T12:04:21Z"},
{"Line": "479=>479", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.hibernate.criterion.Restrictions.eqProperty(java.lang.String,java.lang.String)=>org.hibernate.criterion.Property.forName(\"ff.form.formId\").eqProperty(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7749/buggy-version/api.src.main.java.org.openmrs.api.db.hibernate.HibernateFormDAO.java", "BodyUseAPI": [], "Fixed commit": "6e54ee333b15392a6d26447fabdf297b670a05c2", "Url": "https://api.github.com/repos/samuelmale/openmrs-core", "Date": "2018-09-12T22:26:39Z"},
{"Line": "480=>478", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.hibernate.criterion.DetachedCriteria.add(org.hibernate.criterion.Restrictions.in(\"ff.formFieldId\", allFormFieldIds))=>subquery.setProjection(org.hibernate.criterion.Projections.count(\"ff.formFieldId\")).add(org.hibernate.criterion.Property.forName(\"ff.form.formId\").eqProperty(\"f.formId\")).add(org.hibernate.criterion.Restrictions.in(\"ff.formFieldId\", allFormFieldIds))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7749/buggy-version/api.src.main.java.org.openmrs.api.db.hibernate.HibernateFormDAO.java", "BodyUseAPI": [], "Fixed commit": "6e54ee333b15392a6d26447fabdf297b670a05c2", "Url": "https://api.github.com/repos/samuelmale/openmrs-core", "Date": "2018-09-12T22:26:39Z"},
{"Line": "127=>134", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.ArrayList<org.immregistries.vaccination_deduplication.ComparisonResult>>.get(int)=>java.util.HashMap<java.lang.Integer, org.immregistries.vaccination_deduplication.LinkedImmunization>.keySet()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1165/buggy-version/src.main.java.org.immregistries.vaccination_deduplication.VaccinationDeduplication.java", "BodyUseAPI": [], "Fixed commit": "40f0a686a53c97a02001f18f1583e96397807a55", "Url": "https://api.github.com/repos/nathanbunker/vaccination_deduplication", "Date": "2018-02-15T20:48:02Z"},
{"Line": "127=>134", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "results.get(i).contains(ComparisonResult.UNSURE)=>unsureGrouped.keySet().contains(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1165/buggy-version/src.main.java.org.immregistries.vaccination_deduplication.VaccinationDeduplication.java", "BodyUseAPI": [], "Fixed commit": "40f0a686a53c97a02001f18f1583e96397807a55", "Url": "https://api.github.com/repos/nathanbunker/vaccination_deduplication", "Date": "2018-02-15T20:48:02Z"},
{"Line": "47=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.yukoon.policy_cal.controllers.MPolicy.setpBox(int)=>com.yukoon.policy_cal.controllers.MPolicy.setPBox(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/25/buggy-version/src.main.java.com.yukoon.policy_cal.controllers.CalController.java", "BodyUseAPI": [], "Fixed commit": "4f5b5920f5410293a649c56a2ffab8f1288a59ca", "Url": "https://api.github.com/repos/a5928497/policy_cal", "Date": "2018-05-09T05:06:14Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.yukoon.policy_cal.controllers.PPolicy.setpBox(int)=>com.yukoon.policy_cal.controllers.PPolicy.setPBox(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/25/buggy-version/src.main.java.com.yukoon.policy_cal.controllers.CalController.java", "BodyUseAPI": [], "Fixed commit": "4f5b5920f5410293a649c56a2ffab8f1288a59ca", "Url": "https://api.github.com/repos/a5928497/policy_cal", "Date": "2018-05-09T05:06:14Z"},
{"Line": "19=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.yukoon.policy_cal.services.Policy.getpBox()=>com.yukoon.policy_cal.services.Policy.getPBox()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/25/buggy-version/src.main.java.com.yukoon.policy_cal.services.CalService.java", "BodyUseAPI": [], "Fixed commit": "4f5b5920f5410293a649c56a2ffab8f1288a59ca", "Url": "https://api.github.com/repos/a5928497/policy_cal", "Date": "2018-05-09T05:06:14Z"},
{"Line": "97=>98", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "sx.blah.discord.handle.obj.IUser.toString()=>sx.blah.discord.handle.obj.IUser.getStringID()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6995/buggy-version/src.main.java.io.github.polarizedions.polarizedbot.commands.CommandGuild.java", "BodyUseAPI": [], "Fixed commit": "f47a79bb3e171e67d2f0d484ae47cc443ba80360", "Url": "https://api.github.com/repos/PolarizedIons/PolarizedBot", "Date": "2018-07-16T11:11:43Z"},
{"Line": "208=>208", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.roda.wui.api.controllers.UserManagement.retrieveUserExtraBundle(org.roda.core.data.v2.user.User)=>org.roda.wui.api.controllers.UserManagement.retrieveDefaultExtraBundle(org.roda.core.data.v2.user.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9214/buggy-version/roda-ui.roda-wui.src.main.java.org.roda.wui.server.management.UserManagementServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "88bbdf7da77b9ae5b8c4e7bd3035de5520d23ee6", "Url": "https://api.github.com/repos/keeps/roda", "Date": "2018-10-18T16:37:07Z"},
{"Line": "39=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.logging.log4j.LogManager.getLogger(java.lang.Class<? extends es.rubengarciarios.web.config.persistence.Config>)=>org.apache.log4j.LogManager.getLogger(java.lang.Class<? extends es.rubengarciarios.web.config.persistence.Config>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8388/buggy-version/src.main.java.es.rubengarciarios.web.config.persistence.Config.java", "BodyUseAPI": [], "Fixed commit": "ca329aede92fb5d611426e91e8fb9cb577c3d52b", "Url": "https://api.github.com/repos/RubenGarciaRios/springframework", "Date": "2018-03-12T00:02:50Z"},
{"Line": "39=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.logging.log4j.LogManager.getLogger(java.lang.Class<? extends es.rubengarciarios.web.config.persistence.Config>)=>org.apache.log4j.LogManager.getLogger(java.lang.Class<? extends es.rubengarciarios.web.config.persistence.Config>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8388/buggy-version/src.main.java.es.rubengarciarios.web.config.persistence.Config.java", "BodyUseAPI": [], "Fixed commit": "ca329aede92fb5d611426e91e8fb9cb577c3d52b", "Url": "https://api.github.com/repos/RubenGarciaRios/springframework", "Date": "2018-03-12T00:02:50Z"},
{"Line": "65=>65", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "chapter2.ReConstructBinaryTree.printPostOrder(root.right)=>chapter2.ReConstructBinaryTree.printPreOrder(root.right)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5084/buggy-version/src.chapter2.ReConstructBinaryTree.java", "BodyUseAPI": [], "Fixed commit": "de7ab5a9f772b3b471db29caf3752169f385d39c", "Url": "https://api.github.com/repos/JasonRen23/point-to-offer", "Date": "2018-01-13T06:20:16Z"},
{"Line": "76=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "chapter2.ReConstructBinaryTree.printPostOrder(root.left)=>chapter2.ReConstructBinaryTree.printInOrder(root.left)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5084/buggy-version/src.chapter2.ReConstructBinaryTree.java", "BodyUseAPI": [], "Fixed commit": "de7ab5a9f772b3b471db29caf3752169f385d39c", "Url": "https://api.github.com/repos/JasonRen23/point-to-offer", "Date": "2018-01-13T06:20:16Z"},
{"Line": "78=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "chapter2.ReConstructBinaryTree.printPostOrder(root.right)=>chapter2.ReConstructBinaryTree.printInOrder(root.right)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5084/buggy-version/src.chapter2.ReConstructBinaryTree.java", "BodyUseAPI": [], "Fixed commit": "de7ab5a9f772b3b471db29caf3752169f385d39c", "Url": "https://api.github.com/repos/JasonRen23/point-to-offer", "Date": "2018-01-13T06:20:16Z"},
{"Line": "64=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "chapter2.ReConstructBinaryTree.printPostOrder(root.left)=>chapter2.ReConstructBinaryTree.printPreOrder(root.left)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5084/buggy-version/src.chapter2.ReConstructBinaryTree.java", "BodyUseAPI": [], "Fixed commit": "de7ab5a9f772b3b471db29caf3752169f385d39c", "Url": "https://api.github.com/repos/JasonRen23/point-to-offer", "Date": "2018-01-13T06:20:16Z"},
{"Line": "60=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.columbia.rdf.matcalc.MainMatCalc.main(edu.columbia.rdf.matcalc.toolbox.genes.info.app.GeneInfoInfo,edu.columbia.rdf.matcalc.ModuleLoader)=>edu.columbia.rdf.matcalc.MainMatCalc.main(edu.columbia.rdf.matcalc.toolbox.genes.info.app.GeneInfoInfo,edu.columbia.rdf.matcalc.BasicModuleLoader)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8899/buggy-version/edu.columbia.rdf.matcalc.toolbox.genes.info.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.genes.info.app.MainGeneInfo.java", "BodyUseAPI": [], "Fixed commit": "21916d615e9f553efe7c5727d223a1b9def7ac27", "Url": "https://api.github.com/repos/antonybholmes/matcalc-geneinfo", "Date": "2018-02-24T00:44:40Z"},
{"Line": "157=>157", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.wecyberstage.wecyberstage.view.composeX.ComposeXScriptAdapter.onResume(android.app.Activity)=>com.wecyberstage.wecyberstage.view.composeX.ComposeXScriptAdapter.onPause(android.app.Activity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9501/buggy-version/app.src.main.java.com.wecyberstage.wecyberstage.view.composeX.ComposeX.java", "BodyUseAPI": [], "Fixed commit": "96fc117b6bcc572884af6bf9862a8aabe397584d", "Url": "https://api.github.com/repos/Jason-Er/poplar", "Date": "2018-07-24T07:31:13Z"},
{"Line": "550=>550", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "mMapColourToEdgeIDs.get(eColo).toIntArray()=>mMapColourToEdgeIDs.get(eColo).toIntegerArrayList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7333/buggy-version/src.main.java.org.aksw.simba.lemming.mimicgraph.generator.AbstractGraphGeneration.java", "BodyUseAPI": [], "Fixed commit": "6f8a9f4c2270cac8849e7a773b990a944fb05f78", "Url": "https://api.github.com/repos/dice-group/Lemming", "Date": "2018-09-11T18:16:49Z"},
{"Line": "43=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.slf4j.Logger.info(java.lang.String)=>org.slf4j.Logger.info(((\"Compute \" + (lstMetrics.size())) + \" metrics on the current mimic graph!\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7333/buggy-version/src.main.java.org.aksw.simba.lemming.metrics.single.edgemanipulation.EdgeModifier.java", "BodyUseAPI": [], "Fixed commit": "6f8a9f4c2270cac8849e7a773b990a944fb05f78", "Url": "https://api.github.com/repos/dice-group/Lemming", "Date": "2018-09-11T18:16:49Z"},
{"Line": "145=>144", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "gameData.getPastMoves().removeLast()=>gameData.getPastMoves().getLast()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5649/buggy-version/src.main.java.model.Game.java", "BodyUseAPI": [], "Fixed commit": "660042cfbac4e4513372e7071911fe0a96fcdb7a", "Url": "https://api.github.com/repos/SUPERETDUPER/chess", "Date": "2018-06-14T01:29:02Z"},
{"Line": "305=>304", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.compiere.wf.WFSTATE_Terminated.equals(org.compiere.process.StateEngine)=>org.compiere.wf.WFSTATE_Terminated.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7781/buggy-version/de.metas.adempiere.adempiere.base.src.main.java-legacy.org.compiere.wf.MWFProcess.java", "BodyUseAPI": [], "Fixed commit": "ded016b9984d4c3447902f7e4aadf40c35b326b3", "Url": "https://api.github.com/repos/metasfresh/metasfresh", "Date": "2018-07-05T15:08:18Z"},
{"Line": "308=>307", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.compiere.wf.WFSTATE_Aborted.equals(org.compiere.process.StateEngine)=>org.compiere.wf.WFSTATE_Aborted.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7781/buggy-version/de.metas.adempiere.adempiere.base.src.main.java-legacy.org.compiere.wf.MWFProcess.java", "BodyUseAPI": [], "Fixed commit": "ded016b9984d4c3447902f7e4aadf40c35b326b3", "Url": "https://api.github.com/repos/metasfresh/metasfresh", "Date": "2018-07-05T15:08:18Z"},
{"Line": "305=>304", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.compiere.wf.WFSTATE_Terminated.equals(org.compiere.process.StateEngine)=>org.compiere.wf.WFSTATE_Terminated.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7781/buggy-version/de.metas.adempiere.adempiere.base.src.main.java-legacy.org.compiere.wf.MWFProcess.java", "BodyUseAPI": [], "Fixed commit": "ded016b9984d4c3447902f7e4aadf40c35b326b3", "Url": "https://api.github.com/repos/metasfresh/metasfresh", "Date": "2018-07-05T15:08:18Z"},
{"Line": "188=>188", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.Class.equals(java.lang.String)=>java.lang.Class.equals(java.lang.Class<?>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7781/buggy-version/de.metas.adempiere.adempiere.base.src.main.java-legacy.org.compiere.util.Evaluatee.java", "BodyUseAPI": [], "Fixed commit": "ded016b9984d4c3447902f7e4aadf40c35b326b3", "Url": "https://api.github.com/repos/metasfresh/metasfresh", "Date": "2018-07-05T15:08:18Z"},
{"Line": "67=>67", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.redisson.Redisson.getMapCache(Constants.CACHE_LECHANGE_USER_TOKEN_NAME)=>org.redisson.api.RedissonClient.getMapCache(Constants.CACHE_LECHANGE_USER_TOKEN_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4038/buggy-version/src.main.java.com.twigcodes.apicube.service.LeChangeService.java", "BodyUseAPI": [], "Fixed commit": "2abb1fa840e7694e09df12bb5018f7e4e79831af", "Url": "https://api.github.com/repos/TwigCodes/api-cube", "Date": "2018-08-10T14:00:12Z"},
{"Line": "49=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.redisson.Redisson.getMapCache(Constants.CACHE_LECHANGE_ACCESS_TOKEN_NAME)=>org.redisson.api.RedissonClient.getMapCache(Constants.CACHE_LECHANGE_ACCESS_TOKEN_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4038/buggy-version/src.main.java.com.twigcodes.apicube.service.LeChangeService.java", "BodyUseAPI": [], "Fixed commit": "2abb1fa840e7694e09df12bb5018f7e4e79831af", "Url": "https://api.github.com/repos/TwigCodes/api-cube", "Date": "2018-08-10T14:00:12Z"},
{"Line": "231=>232", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "me.newyith.fortress.main.FortressesManager.forWorld(world).onPlayerCloseChest(me.newyith.fortress.event.Player,org.bukkit.block.Block)=>me.newyith.fortress.main.FortressesManager.forWorld(world).onPlayerCloseChest(me.newyith.fortress.event.Player,org.bukkit.block.Block,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1724/buggy-version/src.main.java.me.newyith.fortress.event.EventListener.java", "BodyUseAPI": [], "Fixed commit": "b6dd9d4eea79a22211e2f299b9f10b03d82defe5", "Url": "https://api.github.com/repos/rockysims/fortressplugin", "Date": "2018-08-25T00:07:51Z"},
{"Line": "54=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "hostReport.getPcrManifest().getPcrs(com.intel.dcsg.cpg.crypto.DigestAlgorithm)=>hostReport.pcrManifest.getPcrs(com.intel.dcsg.cpg.crypto.DigestAlgorithm)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4274/buggy-version/services.mtwilson-trust-policy.src.main.java.com.intel.mtwilson.policy.rule.XmlImaMeasurementLogIntegrity.java", "BodyUseAPI": [], "Fixed commit": "bfc1b009fcb5b135f937279af5589250a9f2c883", "Url": "https://api.github.com/repos/dav10re/opencit", "Date": "2018-04-17T09:38:44Z"},
{"Line": "83=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.gigaspaces.lrmi.LRMIInvocationContext.getEndpointLogicalVersion().greaterOrEquals(PlatformLogicalVersion.v12_3_1)=>com.gigaspaces.lrmi.LRMIInvocationContext.getEndpointLogicalVersion().greaterOrEquals(PlatformLogicalVersion.v14_0_0)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4508/buggy-version/xap-core.xap-datagrid.src.main.java.com.gigaspaces.internal.cluster.node.impl.packets.BatchReplicatedDataPacket.java", "BodyUseAPI": [], "Fixed commit": "3083c2707119cf52418826ed803a27025bfb3c90", "Url": "https://api.github.com/repos/xap/xap", "Date": "2018-09-03T08:11:10Z"},
{"Line": "54=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "dao.datasource.Logger.error(java.lang.String)=>org.apache.logging.log4j.Logger.error(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1719/buggy-version/src.main.java.dao.datasource.DataSource.java", "BodyUseAPI": [], "Fixed commit": "1f3c60f20ff37a98fef4663c107313d5f3eddffd", "Url": "https://api.github.com/repos/EuVial/coffeeshop", "Date": "2018-04-05T21:26:06Z"},
{"Line": "71=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "dao.datasource.Logger.error(java.lang.String)=>org.apache.logging.log4j.Logger.error(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1719/buggy-version/src.main.java.dao.datasource.DataSource.java", "BodyUseAPI": [], "Fixed commit": "1f3c60f20ff37a98fef4663c107313d5f3eddffd", "Url": "https://api.github.com/repos/EuVial/coffeeshop", "Date": "2018-04-05T21:26:06Z"},
{"Line": "16=>18", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "dao.datasource.Logger.getLogger(java.lang.String)=>org.apache.logging.log4j.LogManager.getLogger(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1719/buggy-version/src.main.java.dao.datasource.DataSource.java", "BodyUseAPI": [], "Fixed commit": "1f3c60f20ff37a98fef4663c107313d5f3eddffd", "Url": "https://api.github.com/repos/EuVial/coffeeshop", "Date": "2018-04-05T21:26:06Z"},
{"Line": "40=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "dao.datasource.Logger.info(java.lang.String)=>org.apache.logging.log4j.Logger.info(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1719/buggy-version/src.main.java.dao.datasource.DataSource.java", "BodyUseAPI": [], "Fixed commit": "1f3c60f20ff37a98fef4663c107313d5f3eddffd", "Url": "https://api.github.com/repos/EuVial/coffeeshop", "Date": "2018-04-05T21:26:06Z"},
{"Line": "16=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "dao.datasource.Logger.getLogger(java.lang.String)=>org.apache.logging.log4j.LogManager.getLogger(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1719/buggy-version/src.main.java.dao.datasource.DataSource.java", "BodyUseAPI": [], "Fixed commit": "1f3c60f20ff37a98fef4663c107313d5f3eddffd", "Url": "https://api.github.com/repos/EuVial/coffeeshop", "Date": "2018-04-05T21:26:06Z"},
{"Line": "96=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "column.originalName.replace(\"_ID\", \"\").replace(java.lang.String,java.lang.String)=>column.originalName.replaceAll(\"_ID$\", \"\").replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/34/buggy-version/generator-root.generator-business-component.src.main.java.org.sklsft.generator.bc.metadata.impl.JavaBeanFactory.java", "BodyUseAPI": [], "Fixed commit": "bcf0645894f6c950a42ad1c0f5d922752d611bbb", "Url": "https://api.github.com/repos/skeleton-software-community/skeleton-generator", "Date": "2017-09-08T10:08:10Z"},
{"Line": "109=>109", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.support.design.widget.Snackbar.make(android.support.v4.widget.NestedScrollView,getString(R.string.error_valid_email_password),Snackbar.LENGTH_LONG)=>android.widget.Toast.makeText(getApplicationContext(),java.lang.String,Toast.LENGTH_LONG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4234/buggy-version/app.src.main.java.com.example.carwash.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "eea528383349709379f4e21ebce8081bce47096c", "Url": "https://api.github.com/repos/sarangsohail/myCarWash", "Date": "2018-07-22T21:41:39Z"},
{"Line": "314=>315", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cn.hutool.core.convert.ConverterRegistry.getInstance().convert(java.lang.Class<?>,java.lang.Object)=>cn.hutool.core.convert.ConverterRegistry.getInstance().convert(java.lang.reflect.Type,java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5327/buggy-version/hutool-json.src.main.java.cn.hutool.json.InternalJSONUtil.java", "BodyUseAPI": [], "Fixed commit": "47fdd0be91c9da99d4237953a7586f1fb78bb5e2", "Url": "https://api.github.com/repos/looly/hutool", "Date": "2018-08-29T11:12:13Z"},
{"Line": "1431=>1431", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Std.out.println(java.lang.String)=>Std.err.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6288/buggy-version/src.org.javarosa.core.model.FormDef.java", "BodyUseAPI": [], "Fixed commit": "e7610e12a7f7ba9af893e4dc5c48c169d591da6c", "Url": "https://api.github.com/repos/ggalmazor/javarosa", "Date": "2018-02-27T09:03:19Z"},
{"Line": "1431=>1431", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Std.out.println(java.lang.String)=>Std.err.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6288/buggy-version/src.org.javarosa.core.model.FormDef.java", "BodyUseAPI": [], "Fixed commit": "e7610e12a7f7ba9af893e4dc5c48c169d591da6c", "Url": "https://api.github.com/repos/ggalmazor/javarosa", "Date": "2018-02-27T09:03:19Z"},
{"Line": "286=>286", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.geotools.feature.simple.SimpleFeatureTypeBuilder.setCRS(GeometryUtils.DEFAULT_CRS)=>mil.nga.giat.geowave.core.geotime.GeometryUtils.getDefaultCRS()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4493/buggy-version/extensions.cli.landsat8.src.main.java.mil.nga.giat.geowave.format.landsat8.SceneFeatureIterator.java", "BodyUseAPI": [], "Fixed commit": "7df647ae514aeb2d7ab123bb7c1c07f86c6cbfe6", "Url": "https://api.github.com/repos/locationtech/geowave", "Date": "2018-07-26T12:57:58Z"},
{"Line": "64=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new org.apache.commons.lang3.builder.ToStringBuilder(this).append(\"id\", id).append(java.lang.String,int)=>new org.apache.commons.lang3.builder.ToStringBuilder(this).append(\"id\", id).append(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6632/buggy-version/application.master.src.main.java.org.ucl.newton.framework.ExperimentDataSource.java", "BodyUseAPI": [], "Fixed commit": "abac284c96a29bd57561977939bb4774a8e71819", "Url": "https://api.github.com/repos/blairisme/newton", "Date": "2018-08-01T09:32:00Z"},
{"Line": "55=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new org.apache.commons.lang3.builder.HashCodeBuilder(17, 37).append(id).append(int)=>new org.apache.commons.lang3.builder.HashCodeBuilder(17, 37).append(id).append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6632/buggy-version/application.master.src.main.java.org.ucl.newton.framework.ExperimentDataSource.java", "BodyUseAPI": [], "Fixed commit": "abac284c96a29bd57561977939bb4774a8e71819", "Url": "https://api.github.com/repos/blairisme/newton", "Date": "2018-08-01T09:32:00Z"},
{"Line": "46=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new org.apache.commons.lang3.builder.EqualsBuilder().append(id, other.id).append(int,int)=>new org.apache.commons.lang3.builder.EqualsBuilder().append(id, other.id).append(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6632/buggy-version/application.master.src.main.java.org.ucl.newton.framework.ExperimentDataSource.java", "BodyUseAPI": [], "Fixed commit": "abac284c96a29bd57561977939bb4774a8e71819", "Url": "https://api.github.com/repos/blairisme/newton", "Date": "2018-08-01T09:32:00Z"},
{"Line": "126=>126", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "to.etc.domui.dom.html.BindingBuilderUni<CV>.toString()=>to.etc.domui.dom.html.BindingBuilderUni<CV>.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4858/buggy-version/to.etc.domui.src.main.java.to.etc.domui.dom.html.BindingBuilderUni.java", "BodyUseAPI": [], "Fixed commit": "f7190685b5f3dd7a8ba44aa754064dfb087ea752", "Url": "https://api.github.com/repos/fjalvingh/domui", "Date": "2018-04-01T22:02:26Z"},
{"Line": "123=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "to.etc.domui.dom.html.BindingBuilderUni<CV>.toString()=>to.etc.domui.dom.html.BindingBuilderUni<CV>.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4858/buggy-version/to.etc.domui.src.main.java.to.etc.domui.dom.html.BindingBuilderUni.java", "BodyUseAPI": [], "Fixed commit": "f7190685b5f3dd7a8ba44aa754064dfb087ea752", "Url": "https://api.github.com/repos/fjalvingh/domui", "Date": "2018-04-01T22:02:26Z"},
{"Line": "126=>126", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "to.etc.domui.dom.html.BindingBuilderBidi<CV>.toString()=>to.etc.domui.dom.html.BindingBuilderBidi<CV>.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4858/buggy-version/to.etc.domui.src.main.java.to.etc.domui.dom.html.BindingBuilderBidi.java", "BodyUseAPI": [], "Fixed commit": "f7190685b5f3dd7a8ba44aa754064dfb087ea752", "Url": "https://api.github.com/repos/fjalvingh/domui", "Date": "2018-04-01T22:02:26Z"},
{"Line": "123=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "to.etc.domui.dom.html.BindingBuilderBidi<CV>.toString()=>to.etc.domui.dom.html.BindingBuilderBidi<CV>.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4858/buggy-version/to.etc.domui.src.main.java.to.etc.domui.dom.html.BindingBuilderBidi.java", "BodyUseAPI": [], "Fixed commit": "f7190685b5f3dd7a8ba44aa754064dfb087ea752", "Url": "https://api.github.com/repos/fjalvingh/domui", "Date": "2018-04-01T22:02:26Z"},
{"Line": "233=>234", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "pDep.getVersionConstraint().toString()=>org.eclipse.n4js.external.version.VersionConstraintFormatUtil.npmFormat(pDep.getVersionConstraint())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4039/buggy-version/plugins.org.eclipse.n4js.src.org.eclipse.n4js.external.LibraryManager.java", "BodyUseAPI": [], "Fixed commit": "b1aed8d7f1f912235dd52c408fecc34a953b4283", "Url": "https://api.github.com/repos/eclipse/n4js", "Date": "2018-06-05T11:38:18Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new org.loopa.externalservice.KafkaService(\"kafkaServiceID\", monitoredService.getKafkaEndpoint(), monitoredService.getKafkaTopic(), \"kafkaTopicWrite\", idConf)=>new org.loopa.externalservice.KafkaService(\"kafkaServiceID\", monitoredService.getKafkaEndpoint(), monitoredService.getKafkaTopic(), \"kafkaTopicWrite\", monitoredService)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/110/buggy-version/loopa.src.main.java.org.loopa.Main.java", "BodyUseAPI": [], "Fixed commit": "76e20ef3aa49538f99d521867dc0878bb093799c", "Url": "https://api.github.com/repos/Martouta/loopa", "Date": "2018-01-15T14:37:36Z"},
{"Line": "91=>94", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "arg.getString(\"tour\").split(java.lang.String)=>java.lang.String.split(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4897/buggy-version/app.src.main.java.com.appian.manutdvietnam.app.match.BannerFragment.java", "BodyUseAPI": [], "Fixed commit": "013dba1aac5065fa24ae42223845d63e8515465e", "Url": "https://api.github.com/repos/haipv-ptit/Android_ManUtdVN", "Date": "2018-03-19T05:42:45Z"},
{"Line": "746=>746", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "im.vector.util.RoomUtils.addHomescreenShortcut(getActivity(),org.matrix.androidsdk.MXSession,java.lang.String)=>im.vector.util.RoomUtils.addHomeScreenShortcut(getActivity(),org.matrix.androidsdk.MXSession,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5971/buggy-version/vector.src.main.java.im.vector.fragments.VectorRecentsListFragment.java", "BodyUseAPI": [], "Fixed commit": "7b23d4e7657f57a536e279b23c00dbf795cabb07", "Url": "https://api.github.com/repos/vector-im/riot-android", "Date": "2018-01-08T09:19:21Z"},
{"Line": "638=>675", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.graphics.drawable.Icon.createWithBitmap(im.vector.util.VectorUtils.getAvatar(context, im.vector.util.VectorUtils.getAvatarColor(roomId), roomName, true))=>android.graphics.drawable.Icon.createWithBitmap(android.graphics.Bitmap)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5971/buggy-version/vector.src.main.java.im.vector.util.RoomUtils.java", "BodyUseAPI": [], "Fixed commit": "7b23d4e7657f57a536e279b23c00dbf795cabb07", "Url": "https://api.github.com/repos/vector-im/riot-android", "Date": "2018-01-08T09:19:21Z"},
{"Line": "562=>566", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "im.vector.util.RoomUtils.MoreActionListener.addHomescreenShortcut(org.matrix.androidsdk.MXSession,room.getRoomId())=>im.vector.util.RoomUtils.MoreActionListener.addHomeScreenShortcut(org.matrix.androidsdk.MXSession,room.getRoomId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5971/buggy-version/vector.src.main.java.im.vector.util.RoomUtils.java", "BodyUseAPI": [], "Fixed commit": "7b23d4e7657f57a536e279b23c00dbf795cabb07", "Url": "https://api.github.com/repos/vector-im/riot-android", "Date": "2018-01-08T09:19:21Z"},
{"Line": "265=>265", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "im.vector.util.RoomUtils.addHomescreenShortcut(getActivity(),org.matrix.androidsdk.MXSession,java.lang.String)=>im.vector.util.RoomUtils.addHomeScreenShortcut(getActivity(),org.matrix.androidsdk.MXSession,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5971/buggy-version/vector.src.main.java.im.vector.fragments.AbsHomeFragment.java", "BodyUseAPI": [], "Fixed commit": "7b23d4e7657f57a536e279b23c00dbf795cabb07", "Url": "https://api.github.com/repos/vector-im/riot-android", "Date": "2018-01-08T09:19:21Z"},
{"Line": "83=>85", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.kelfan.utillibrary.ListString.set(this.textContent).setDelimiter(java.lang.String)=>com.kelfan.utillibrary.ListString.set(this.textContent).setDelimiterWithoutDelimiter(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6510/buggy-version/EditorA.editfiler.src.main.java.com.kelfan.editfiler.LineRecyclerViewAdapter.java", "BodyUseAPI": [], "Fixed commit": "d11c2b35a198faa3752aae41ba5c9f38519216ba", "Url": "https://api.github.com/repos/kelfan/EditorA", "Date": "2018-05-17T23:54:03Z"},
{"Line": "239=>244", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.allogica.allogen.backend.java.MethodArgument.getType()=>com.allogica.allogen.backend.java.Type.getUserDefinedClass()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9788/buggy-version/Compiler.src.main.java.com.allogica.allogen.backend.java.JavaBackend.java", "BodyUseAPI": [], "Fixed commit": "96c24451be133d71758af34210d59a93f931778b", "Url": "https://api.github.com/repos/Allogica/Allogen", "Date": "2018-08-24T14:31:33Z"},
{"Line": "64=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.alibaba.fastjson.JSONObject.getJSONArray(java.lang.String)=>java.util.Map.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1751/buggy-version/src.main.java.com.ns.weixin.controller.WeixinApiController.java", "BodyUseAPI": [], "Fixed commit": "8de349176c4b9333cd8145f4a20acf5c8d89f22b", "Url": "https://api.github.com/repos/AndroidSourceAnalysise/ns-api", "Date": "2018-08-05T03:32:06Z"},
{"Line": "81=>81", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.matsim.contrib.dvrp.path.VrpPaths.calcPathDistance(org.matsim.contrib.dvrp.path.VrpPathWithTravelData)=>org.matsim.contrib.dvrp.path.VrpPaths.calcDistance(org.matsim.contrib.dvrp.path.VrpPathWithTravelData)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4201/buggy-version/contribs.drt.src.main.java.org.matsim.contrib.drt.passenger.DrtRequestCreator.java", "BodyUseAPI": [], "Fixed commit": "e1e49b9cc4ec6a8450240c1c747d98728f9dcbdc", "Url": "https://api.github.com/repos/matsim-org/matsim", "Date": "2018-02-21T12:11:29Z"},
{"Line": "25=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.entity.EntityType.getEntityClass()=>ru.achievements.EntityType.getEntityClass()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5868/buggy-version/src.ru.achievements.AchievementUselessSlaughterer.java", "BodyUseAPI": [], "Fixed commit": "bcb3a89147c2c1deff10c137909719cea9fe0c0b", "Url": "https://api.github.com/repos/GreenBudgie/LitePlugin", "Date": "2018-03-25T15:51:36Z"},
{"Line": "24=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.entity.EntityType.values()=>ru.achievements.EntityType.values()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5868/buggy-version/src.ru.achievements.AchievementUselessSlaughterer.java", "BodyUseAPI": [], "Fixed commit": "bcb3a89147c2c1deff10c137909719cea9fe0c0b", "Url": "https://api.github.com/repos/GreenBudgie/LitePlugin", "Date": "2018-03-25T15:51:36Z"},
{"Line": "44=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "ru.achievements.AchievementUselessSlaughterer.tryComplete(org.bukkit.entity.Player)=>ru.achievements.AchievementUselessSlaughterer.tryComplete(ru.achievements.Player)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5868/buggy-version/src.ru.achievements.AchievementUselessSlaughterer.java", "BodyUseAPI": [], "Fixed commit": "bcb3a89147c2c1deff10c137909719cea9fe0c0b", "Url": "https://api.github.com/repos/GreenBudgie/LitePlugin", "Date": "2018-03-25T15:51:36Z"},
{"Line": "26=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.entity.EntityType.getEntityClass()=>ru.achievements.EntityType.getEntityClass()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5868/buggy-version/src.ru.achievements.AchievementUselessSlaughterer.java", "BodyUseAPI": [], "Fixed commit": "bcb3a89147c2c1deff10c137909719cea9fe0c0b", "Url": "https://api.github.com/repos/GreenBudgie/LitePlugin", "Date": "2018-03-25T15:51:36Z"},
{"Line": "21=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "ru.achievements.AchievementUselessSlaughterer.setItem(Material.FEATHER)=>ru.achievements.AchievementUselessSlaughterer.setItem(Material.LEATHER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5868/buggy-version/src.ru.achievements.AchievementUselessSlaughterer.java", "BodyUseAPI": [], "Fixed commit": "bcb3a89147c2c1deff10c137909719cea9fe0c0b", "Url": "https://api.github.com/repos/GreenBudgie/LitePlugin", "Date": "2018-03-25T15:51:36Z"},
{"Line": "24=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.entity.EntityType.values()=>ru.achievements.EntityType.values()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5868/buggy-version/src.ru.achievements.AchievementUselessSlaughterer.java", "BodyUseAPI": [], "Fixed commit": "bcb3a89147c2c1deff10c137909719cea9fe0c0b", "Url": "https://api.github.com/repos/GreenBudgie/LitePlugin", "Date": "2018-03-25T15:51:36Z"},
{"Line": "41=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.entity.Ageable.isAdult()=>ru.achievements.Ageable.isAdult()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5868/buggy-version/src.ru.achievements.AchievementUselessSlaughterer.java", "BodyUseAPI": [], "Fixed commit": "bcb3a89147c2c1deff10c137909719cea9fe0c0b", "Url": "https://api.github.com/repos/GreenBudgie/LitePlugin", "Date": "2018-03-25T15:51:36Z"},
{"Line": "43=>41", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "ru.achievements.AchievementUselessSlaughterer.setRequirement(org.bukkit.entity.Player,e.getEntityType().name(),boolean)=>ru.achievements.AchievementUselessSlaughterer.setRequirement(ru.achievements.Player,e.getEntityType().name(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5868/buggy-version/src.ru.achievements.AchievementUselessSlaughterer.java", "BodyUseAPI": [], "Fixed commit": "bcb3a89147c2c1deff10c137909719cea9fe0c0b", "Url": "https://api.github.com/repos/GreenBudgie/LitePlugin", "Date": "2018-03-25T15:51:36Z"},
{"Line": "28=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.entity.EntityType.name()=>ru.achievements.EntityType.name()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5868/buggy-version/src.ru.achievements.AchievementUselessSlaughterer.java", "BodyUseAPI": [], "Fixed commit": "bcb3a89147c2c1deff10c137909719cea9fe0c0b", "Url": "https://api.github.com/repos/GreenBudgie/LitePlugin", "Date": "2018-03-25T15:51:36Z"},
{"Line": "183=>189", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<com.cn.bent.sports.bean.MemberDataEntity>.add(memberDataEntityMap.get(gameTeamScoreEntity.getUserId()))=>java.util.List<com.cn.bent.sports.bean.MemberDataEntity>.add(com.cn.bent.sports.bean.MemberDataEntity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6853/buggy-version/app.src.main.java.com.cn.bent.sports.view.activity.youle.play.MemberEditActivity.java", "BodyUseAPI": [], "Fixed commit": "7c978ec39eaef8a427d8c5d8d9176b68af704724", "Url": "https://api.github.com/repos/cd031116/BentSports", "Date": "2018-04-19T02:27:55Z"},
{"Line": "742=>748", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "807=>813", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "869=>875", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "795=>801", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "540=>540", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "690=>696", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "934=>940", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "841=>847", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "722=>728", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "773=>779", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "876=>882", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "920=>926", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "227=>227", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "784=>790", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "596=>602", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "761=>767", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "674=>680", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "528=>528", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hzw.doodle.DoodleView.invalidate()=>cn.hzw.doodle.DoodleView.invalidate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9068/buggy-version/doodle.src.main.java.cn.hzw.doodle.DoodleView.java", "BodyUseAPI": [], "Fixed commit": "21fbc5b090f554cd02c4c79b541c061b961fee18", "Url": "https://api.github.com/repos/1993hzw/Doodle", "Date": "2018-07-24T02:40:55Z"},
{"Line": "37=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.github.zinzun.n26.statistics.service.CalculationServices.getQueue()=>com.github.zinzun.n26.statistics.service.Calculation.getQueue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7368/buggy-version/src.main.java.com.github.zinzun.n26.statistics.service.StatisticsService.java", "BodyUseAPI": [], "Fixed commit": "ca393eda82c493ff20d1d0f6ebb81ac5dd66133a", "Url": "https://api.github.com/repos/fzinzun/n26-rest-api", "Date": "2018-06-10T01:54:14Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.github.zinzun.n26.statistics.service.CalculationServices.getMaxValue()=>com.github.zinzun.n26.statistics.service.Calculation.getMaxValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7368/buggy-version/src.main.java.com.github.zinzun.n26.statistics.service.StatisticsService.java", "BodyUseAPI": [], "Fixed commit": "ca393eda82c493ff20d1d0f6ebb81ac5dd66133a", "Url": "https://api.github.com/repos/fzinzun/n26-rest-api", "Date": "2018-06-10T01:54:14Z"},
{"Line": "50=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.github.zinzun.n26.statistics.service.CalculationServices.getMinValue()=>com.github.zinzun.n26.statistics.service.Calculation.getMinValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7368/buggy-version/src.main.java.com.github.zinzun.n26.statistics.service.StatisticsService.java", "BodyUseAPI": [], "Fixed commit": "ca393eda82c493ff20d1d0f6ebb81ac5dd66133a", "Url": "https://api.github.com/repos/fzinzun/n26-rest-api", "Date": "2018-06-10T01:54:14Z"},
{"Line": "47=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.github.zinzun.n26.statistics.service.CalculationServices.getTotal()=>com.github.zinzun.n26.statistics.service.Calculation.getTotal()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7368/buggy-version/src.main.java.com.github.zinzun.n26.statistics.service.StatisticsService.java", "BodyUseAPI": [], "Fixed commit": "ca393eda82c493ff20d1d0f6ebb81ac5dd66133a", "Url": "https://api.github.com/repos/fzinzun/n26-rest-api", "Date": "2018-06-10T01:54:14Z"},
{"Line": "51=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.github.zinzun.n26.statistics.service.CalculationServices.getCount()=>com.github.zinzun.n26.statistics.service.Calculation.getCount()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7368/buggy-version/src.main.java.com.github.zinzun.n26.statistics.service.StatisticsService.java", "BodyUseAPI": [], "Fixed commit": "ca393eda82c493ff20d1d0f6ebb81ac5dd66133a", "Url": "https://api.github.com/repos/fzinzun/n26-rest-api", "Date": "2018-06-10T01:54:14Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.github.zinzun.n26.statistics.service.CalculationServices.getAvg()=>com.github.zinzun.n26.statistics.service.Calculation.getAvg()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7368/buggy-version/src.main.java.com.github.zinzun.n26.statistics.service.StatisticsService.java", "BodyUseAPI": [], "Fixed commit": "ca393eda82c493ff20d1d0f6ebb81ac5dd66133a", "Url": "https://api.github.com/repos/fzinzun/n26-rest-api", "Date": "2018-06-10T01:54:14Z"},
{"Line": "64=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.LayoutInflater.inflate(R.layout.activity_view_tasks_bidded_on,<nulltype>,boolean)=>android.view.LayoutInflater.inflate(R.layout.activity_search_results,<nulltype>,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2707/buggy-version/app.src.main.java.ca.ualbert.cs.tasko.SearchResultsActivity.java", "BodyUseAPI": [], "Fixed commit": "a0364354565bddf05df3ea89a4e9386f5bcf19d8", "Url": "https://api.github.com/repos/CMPUT301W18T14/PraiseTheSun", "Date": "2018-04-09T01:05:25Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.log4j.Logger.error(java.lang.String,java.io.IOException)=>org.apache.log4j.Logger.error(java.lang.String,java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2376/buggy-version/src.main.java.org.magic.tools.ReportNotificationManager.java", "BodyUseAPI": [], "Fixed commit": "07e07bad1ff4bf9226405511a3908f57f69c4266", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-05-09T22:16:39Z"},
{"Line": "29=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "freemarker.template.Configuration.setDirectoryForTemplateLoading(java.io.File)=>freemarker.template.Configuration.setClassForTemplateLoading(java.lang.Class,MTGConstants.MTG_REPORTS_DIR)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2376/buggy-version/src.main.java.org.magic.tools.ReportNotificationManager.java", "BodyUseAPI": [], "Fixed commit": "07e07bad1ff4bf9226405511a3908f57f69c4266", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-05-09T22:16:39Z"},
{"Line": "86=>86", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Math.toIntExact(Sensor.MAX_DEBOUNCE)=>java.lang.Long.valueOf(Sensor.MAX_DEBOUNCE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3038/buggy-version/java.src.jmri.jmrit.beantable.beanedit.SensorDebounceEditAction.java", "BodyUseAPI": [], "Fixed commit": "c07d8ffe404fbdc97e0a1fe5d37ef8006ed561ab", "Url": "https://api.github.com/repos/JMRI/JMRI", "Date": "2018-09-10T22:21:19Z"},
{"Line": "81=>81", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Math.toIntExact(Sensor.MAX_DEBOUNCE)=>java.lang.Long.valueOf(Sensor.MAX_DEBOUNCE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3038/buggy-version/java.src.jmri.jmrit.beantable.beanedit.SensorDebounceEditAction.java", "BodyUseAPI": [], "Fixed commit": "c07d8ffe404fbdc97e0a1fe5d37ef8006ed561ab", "Url": "https://api.github.com/repos/JMRI/JMRI", "Date": "2018-09-10T22:21:19Z"},
{"Line": "81=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Math.toIntExact(Sensor.MAX_DEBOUNCE)=>java.lang.Long.valueOf(Sensor.MAX_DEBOUNCE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3038/buggy-version/java.src.jmri.jmrit.beantable.beanedit.SensorDebounceEditAction.java", "BodyUseAPI": [], "Fixed commit": "c07d8ffe404fbdc97e0a1fe5d37ef8006ed561ab", "Url": "https://api.github.com/repos/JMRI/JMRI", "Date": "2018-09-10T22:21:19Z"},
{"Line": "233=>233", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.widget.HorizontalScrollView.getHeight()=>android.widget.HorizontalScrollView.getWidth()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2425/buggy-version/ext-utils.src.main.java.me.dkzwm.widget.srl.utils.QuickConfigAutoRefreshUtil.java", "BodyUseAPI": [], "Fixed commit": "66961e2411c88b53434fb65c32fb7a97f4f0873a", "Url": "https://api.github.com/repos/dkzwm/SmoothRefreshLayout", "Date": "2018-01-09T08:38:29Z"},
{"Line": "235=>235", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.widget.HorizontalScrollView.getHeight()=>android.widget.HorizontalScrollView.getWidth()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2425/buggy-version/ext-utils.src.main.java.me.dkzwm.widget.srl.utils.QuickConfigAutoRefreshUtil.java", "BodyUseAPI": [], "Fixed commit": "66961e2411c88b53434fb65c32fb7a97f4f0873a", "Url": "https://api.github.com/repos/dkzwm/SmoothRefreshLayout", "Date": "2018-01-09T08:38:29Z"},
{"Line": "53=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.CarParkView.getNumberOfPlaces()=>view.SimulatorView.getNumberOfPlaces()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.CarParkView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "70=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getFloor()=>model.Location.getFloor()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.CarParkView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "51=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.CarParkView.getNumberOfFloors()=>view.SimulatorView.getNumberOfFloors()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.CarParkView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "71=>75", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getPlace()=>model.Location.getPlace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.CarParkView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "56=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Car.getColor()=>model.Car.getColor()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.CarParkView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "55=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.CarParkView.getCarAt(view.Location)=>view.SimulatorView.getCarAt(model.Location)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.CarParkView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "70=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getRow()=>model.Location.getRow()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.CarParkView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "52=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.CarParkView.getNumberOfRows()=>view.SimulatorView.getNumberOfRows()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.CarParkView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "57=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "view.CarParkView.drawPlace(java.awt.Graphics,view.Location,java.awt.Color)=>view.CarParkView.drawPlace(java.awt.Graphics,model.Location,java.awt.Color)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.CarParkView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "70=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getRow()=>model.Location.getRow()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.CarParkView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "81=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Car.setLocation(<nulltype>)=>model.Car.setLocation(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "65=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Car.setLocation(view.Location)=>model.Car.setLocation(model.Location)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "80=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getFloor()=>model.Location.getFloor()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "122=>124", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Car.tick()=>model.Car.tick()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "62=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "view.SimulatorView.getCarAt(view.Location)=>view.SimulatorView.getCarAt(model.Location)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "55=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getFloor()=>model.Location.getFloor()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "105=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "view.SimulatorView.getCarAt(view.Location)=>view.SimulatorView.getCarAt(model.Location)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "55=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getRow()=>model.Location.getRow()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "55=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getPlace()=>model.Location.getPlace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "91=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "view.SimulatorView.getCarAt(view.Location)=>view.SimulatorView.getCarAt(model.Location)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "132=>134", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getPlace()=>model.Location.getPlace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "64=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getPlace()=>model.Location.getPlace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "80=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getRow()=>model.Location.getRow()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "130=>132", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getFloor()=>model.Location.getFloor()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "52=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "view.SimulatorView.locationIsValid(view.Location)=>view.SimulatorView.locationIsValid(model.Location)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "64=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getRow()=>model.Location.getRow()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "64=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getFloor()=>model.Location.getFloor()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "106=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Car.getMinutesLeft()=>model.Car.getMinutesLeft()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "131=>133", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getRow()=>model.Location.getRow()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "80=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Location.getPlace()=>model.Location.getPlace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "59=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "view.SimulatorView.locationIsValid(view.Location)=>view.SimulatorView.locationIsValid(model.Location)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "106=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "view.Car.getIsPaying()=>model.Car.getIsPaying()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "120=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "view.SimulatorView.getCarAt(view.Location)=>view.SimulatorView.getCarAt(model.Location)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "76=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "view.SimulatorView.getCarAt(view.Location)=>view.SimulatorView.getCarAt(model.Location)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "73=>75", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "view.SimulatorView.locationIsValid(view.Location)=>view.SimulatorView.locationIsValid(model.Location)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4517/buggy-version/src.view.SimulatorView.java", "BodyUseAPI": [], "Fixed commit": "68a6b76f86014d3bf9b07eee6f79fe0cccaf84b7", "Url": "https://api.github.com/repos/Will3x/ParkingSim", "Date": "2018-01-24T12:32:45Z"},
{"Line": "245=>245", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.blueshift.httpmanager.request_queue.RequestQueue.getInstance(com.blueshift.Blueshift.mContext).sync()=>com.blueshift.httpmanager.request_queue.RequestQueue.getInstance().sync(android.content.Context)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7267/buggy-version/android-sdk.src.main.java.com.blueshift.Blueshift.java", "BodyUseAPI": [], "Fixed commit": "696901d6f93ca73b498ac91d8ae15723fc7b775a", "Url": "https://api.github.com/repos/blueshift-labs/Blueshift-Android-SDK", "Date": "2018-08-03T05:05:50Z"},
{"Line": "245=>245", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.blueshift.httpmanager.request_queue.RequestQueue.getInstance(android.content.Context)=>com.blueshift.httpmanager.request_queue.RequestQueue.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7267/buggy-version/android-sdk.src.main.java.com.blueshift.Blueshift.java", "BodyUseAPI": [], "Fixed commit": "696901d6f93ca73b498ac91d8ae15723fc7b775a", "Url": "https://api.github.com/repos/blueshift-labs/Blueshift-Android-SDK", "Date": "2018-08-03T05:05:50Z"},
{"Line": "74=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "es.bvalero.replacer.article.ArticleRepository.findRandomByReviewDateNull(org.springframework.data.domain.PageRequest)=>es.bvalero.replacer.article.ArticleRepository.findRandomArticleNotReviewed(org.springframework.data.domain.PageRequest)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3795/buggy-version/src.main.java.es.bvalero.replacer.article.ArticleService.java", "BodyUseAPI": [], "Fixed commit": "c94f07e97ca39135d3e81976344648851bbd122a", "Url": "https://api.github.com/repos/benjavalero/replacer", "Date": "2018-08-28T13:34:33Z"},
{"Line": "77=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.github.conanchen.guoi.graphql.util.BeanToGrpcRequestUtil.isJavaClass(java.lang.Class<?>)=>com.github.conanchen.guoi.graphql.util.BeanToGrpcRequestUtil.isWrapClass(java.lang.Class<?>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3047/buggy-version/graphql-java-common.src.main.java.com.github.conanchen.guoi.graphql.util.BeanToGrpcRequestUtil.java", "BodyUseAPI": [], "Fixed commit": "acaa1cbd15a30f223de14a567c53f49f0e823dcd", "Url": "https://api.github.com/repos/conanchen/guoi-graphql-java", "Date": "2018-07-06T03:58:44Z"},
{"Line": "74=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "wxMpService.getUserService().userInfo(wxMpOAuth2AccessToken.getOpenId(),java.lang.String)=>me.chanjar.weixin.mp.api.WxMpService.oauth2getUserInfo(me.chanjar.weixin.mp.bean.result.WxMpOAuth2AccessToken,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3474/buggy-version/src.main.java.com.longwei.umier.interceptor.WxAuthInteceptor.java", "BodyUseAPI": [], "Fixed commit": "21f48e772d8369b02fd8321aa71ecd3fbb8221eb", "Url": "https://api.github.com/repos/wheniworking/umier", "Date": "2018-10-08T12:18:07Z"},
{"Line": "68=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "me.chanjar.weixin.mp.api.WxMpService.oauth2buildAuthorizationUrl(java.lang.String,WxConsts.OAuth2Scope.SNSAPI_BASE,<nulltype>)=>me.chanjar.weixin.mp.api.WxMpService.oauth2buildAuthorizationUrl(java.lang.String,WxConsts.OAuth2Scope.SNSAPI_USERINFO,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3474/buggy-version/src.main.java.com.longwei.umier.interceptor.WxAuthInteceptor.java", "BodyUseAPI": [], "Fixed commit": "21f48e772d8369b02fd8321aa71ecd3fbb8221eb", "Url": "https://api.github.com/repos/wheniworking/umier", "Date": "2018-10-08T12:18:07Z"},
{"Line": "32=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.replace(strings.get(\"Shred.fileName\"),java.lang.String)=>java.lang.String.replaceAll(strings.get(\"Shred.fileName\"),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9154/buggy-version/desktop-mend.src.main.java.co.samco.mend4.desktop.helper.ShredHelper.java", "BodyUseAPI": [], "Fixed commit": "07d94b52fc861a1cc0d4d3b835343d2c7703ab37", "Url": "https://api.github.com/repos/SamAmco/MEND4", "Date": "2018-08-12T02:02:34Z"},
{"Line": "75=>75", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "state.getName().replace(\",\", \"\").replace(\"{\", \"\").replace(java.lang.String,(state.isInitialState() ? \"-\" : \"\"))=>state.getName().replace(\",\", \"\").replace(\"{\", \"\").replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/913/buggy-version/src.main.java.controller.AutomatonWriter.java", "BodyUseAPI": [], "Fixed commit": "df40a6bcddbaf341458ee9f413a55fae155edaa2", "Url": "https://api.github.com/repos/DanielGunna/JFLAP-NDFA-Converter", "Date": "2018-05-22T19:51:04Z"},
{"Line": "75=>75", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "state.getName().replace(\",\", \"\").replace(\"{\", \"\").replace(java.lang.String,(state.isInitialState() ? \"-\" : \"\"))=>state.getName().replace(\",\", \"\").replace(\"{\", \"\").replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/913/buggy-version/src.main.java.controller.AutomatonWriter.java", "BodyUseAPI": [], "Fixed commit": "df40a6bcddbaf341458ee9f413a55fae155edaa2", "Url": "https://api.github.com/repos/DanielGunna/JFLAP-NDFA-Converter", "Date": "2018-05-22T19:51:04Z"},
{"Line": "428=>433", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.confluent.ksql.planner.plan.JoinNode.StreamToTableJoiner.buildTable(io.confluent.ksql.planner.plan.PlanNode,java.lang.String)=>io.confluent.ksql.planner.plan.JoinNode.StreamToTableJoiner.buildTable(io.confluent.ksql.planner.plan.PlanNode,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7913/buggy-version/ksql-engine.src.main.java.io.confluent.ksql.planner.plan.JoinNode.java", "BodyUseAPI": [], "Fixed commit": "553363ac934a25a0ddabf3df2a149a09bdffaef8", "Url": "https://api.github.com/repos/rodesai/ksql", "Date": "2018-08-09T19:05:58Z"},
{"Line": "479=>485", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.confluent.ksql.planner.plan.JoinNode.TableToTableJoiner.buildTable(io.confluent.ksql.planner.plan.PlanNode,java.lang.String)=>io.confluent.ksql.planner.plan.JoinNode.TableToTableJoiner.buildTable(io.confluent.ksql.planner.plan.PlanNode,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7913/buggy-version/ksql-engine.src.main.java.io.confluent.ksql.planner.plan.JoinNode.java", "BodyUseAPI": [], "Fixed commit": "553363ac934a25a0ddabf3df2a149a09bdffaef8", "Url": "https://api.github.com/repos/rodesai/ksql", "Date": "2018-08-09T19:05:58Z"},
{"Line": "481=>488", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.confluent.ksql.planner.plan.JoinNode.TableToTableJoiner.buildTable(io.confluent.ksql.planner.plan.PlanNode,java.lang.String)=>io.confluent.ksql.planner.plan.JoinNode.TableToTableJoiner.buildTable(io.confluent.ksql.planner.plan.PlanNode,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7913/buggy-version/ksql-engine.src.main.java.io.confluent.ksql.planner.plan.JoinNode.java", "BodyUseAPI": [], "Fixed commit": "553363ac934a25a0ddabf3df2a149a09bdffaef8", "Url": "https://api.github.com/repos/rodesai/ksql", "Date": "2018-08-09T19:05:58Z"},
{"Line": "54=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Infection.isValidMove(int,int)=>Infection.isValidMove(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8418/buggy-version/Infection.Infection.java", "BodyUseAPI": [], "Fixed commit": "bc265c6e67307708bf8deb940c4df02debc6148a", "Url": "https://api.github.com/repos/wang0324/Infection", "Date": "2018-05-14T16:25:57Z"},
{"Line": "70=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[private] checkAdjacentLoc(int,int)=>[private] checkAdjacentLoc(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8418/buggy-version/Infection.Infection.java", "BodyUseAPI": [], "Fixed commit": "bc265c6e67307708bf8deb940c4df02debc6148a", "Url": "https://api.github.com/repos/wang0324/Infection", "Date": "2018-05-14T16:25:57Z"},
{"Line": "163=>165", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.PrintStream.println((((\"Player \" + (W + 1)) + \" wins with \") + (java.lang.String.valueOf(main.Ranking.Hand_Ranks.values()[java.lang.Math.abs(((main.Ranking.Ranking.rank_hand(Player_Cards.get(W))) - 10))]).replace(\"_\", \" \"))))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5118/buggy-version/src.main.Main.java", "BodyUseAPI": [], "Fixed commit": "c32691bfa8c555bc86bbd8e9e126163c44c9b13f", "Url": "https://api.github.com/repos/rodentooth/poker_project", "Date": "2018-03-01T12:09:38Z"},
{"Line": "159=>161", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.ArrayList<java.util.ArrayList<main.Stack.Card>>.indexOf(int)=>java.util.ArrayList<java.util.ArrayList<main.Stack.Card>>.indexOf(Player_Cards.get(W))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5118/buggy-version/src.main.Main.java", "BodyUseAPI": [], "Fixed commit": "c32691bfa8c555bc86bbd8e9e126163c44c9b13f", "Url": "https://api.github.com/repos/rodentooth/poker_project", "Date": "2018-03-01T12:09:38Z"},
{"Line": "248=>248", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.packetpub.libgdx.canyonbunny.game.objects.Carrot.Update(com.packetpub.libgdx.canyonbunny.game.Level)=>com.packetpub.libgdx.canyonbunny.game.objects.Carrot.update(float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4690/buggy-version/core.src.com.packetpub.libgdx.canyonbunny.game.Level.java", "BodyUseAPI": [], "Fixed commit": "a11d8a5167e392706ca767bac2abc74f8319eabc", "Url": "https://api.github.com/repos/gw3003/CSC361_F18_G6", "Date": "2018-10-17T00:45:04Z"},
{"Line": "81=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.ide.eclipse.boot.util.FileUtil.isJarFile(java.io.File)=>org.springsource.ide.eclipse.commons.frameworks.core.util.FileUtil.isJarFile(java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7330/buggy-version/plugins.org.springframework.ide.eclipse.boot.properties.editor.src.org.springframework.ide.eclipse.boot.properties.editor.StsConfigMetadataRepositoryJsonLoader.java", "BodyUseAPI": [], "Fixed commit": "ecbd2c8cbfbd7b432799b0033e87aedca407c0c2", "Url": "https://api.github.com/repos/spring-projects/spring-ide", "Date": "2018-02-16T23:51:54Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/v2/api-docs/**\").permitAll()=>http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/proforsearch\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5482/buggy-version/src.main.java.fr.lfml.manaproject.config.SecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "49668738f4624d015cdae62ccb38417f3bd5a218", "Url": "https://api.github.com/repos/vivali/ManaProject", "Date": "2018-01-24T15:11:47Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll()=>http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/proforsearch\").permitAll().antMatchers(\"/api/**\").authenticated()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5482/buggy-version/src.main.java.fr.lfml.manaproject.config.SecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "49668738f4624d015cdae62ccb38417f3bd5a218", "Url": "https://api.github.com/repos/vivali/ManaProject", "Date": "2018-01-24T15:11:47Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/v2/api-docs/**\").permitAll().antMatchers(java.lang.String)=>http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/proforsearch\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5482/buggy-version/src.main.java.fr.lfml.manaproject.config.SecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "49668738f4624d015cdae62ccb38417f3bd5a218", "Url": "https://api.github.com/repos/vivali/ManaProject", "Date": "2018-01-24T15:11:47Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/v2/api-docs/**\").permitAll().antMatchers(\"/swagger-resources/configuration/ui\").permitAll().antMatchers(\"/swagger-ui/index.html\").hasAuthority(AuthoritiesConstants.ADMIN).and()=>http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/proforsearch\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/v2/api-docs/**\").permitAll().antMatchers(\"/swagger-resources/configuration/ui\").permitAll().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5482/buggy-version/src.main.java.fr.lfml.manaproject.config.SecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "49668738f4624d015cdae62ccb38417f3bd5a218", "Url": "https://api.github.com/repos/vivali/ManaProject", "Date": "2018-01-24T15:11:47Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(java.lang.String)=>http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/proforsearch\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5482/buggy-version/src.main.java.fr.lfml.manaproject.config.SecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "49668738f4624d015cdae62ccb38417f3bd5a218", "Url": "https://api.github.com/repos/vivali/ManaProject", "Date": "2018-01-24T15:11:47Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(java.lang.String)=>http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/proforsearch\").permitAll().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5482/buggy-version/src.main.java.fr.lfml.manaproject.config.SecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "49668738f4624d015cdae62ccb38417f3bd5a218", "Url": "https://api.github.com/repos/vivali/ManaProject", "Date": "2018-01-24T15:11:47Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/v2/api-docs/**\").permitAll().antMatchers(\"/swagger-resources/configuration/ui\").permitAll().antMatchers(\"/swagger-ui/index.html\").hasAuthority(AuthoritiesConstants.ADMIN)=>http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/proforsearch\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/v2/api-docs/**\").permitAll().antMatchers(\"/swagger-resources/configuration/ui\").permitAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5482/buggy-version/src.main.java.fr.lfml.manaproject.config.SecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "49668738f4624d015cdae62ccb38417f3bd5a218", "Url": "https://api.github.com/repos/vivali/ManaProject", "Date": "2018-01-24T15:11:47Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/v2/api-docs/**\").permitAll().antMatchers(\"/swagger-resources/configuration/ui\").permitAll().antMatchers(java.lang.String)=>http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/proforsearch\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/v2/api-docs/**\").permitAll().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5482/buggy-version/src.main.java.fr.lfml.manaproject.config.SecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "49668738f4624d015cdae62ccb38417f3bd5a218", "Url": "https://api.github.com/repos/vivali/ManaProject", "Date": "2018-01-24T15:11:47Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(\"/management/health\").permitAll().antMatchers(java.lang.String)=>http.addFilterBefore(corsFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).exceptionHandling().authenticationEntryPoint(problemSupport).accessDeniedHandler(problemSupport).and().csrf().disable().headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/register\").permitAll().antMatchers(\"/api/activate\").permitAll().antMatchers(\"/api/authenticate\").permitAll().antMatchers(\"/api/account/reset-password/init\").permitAll().antMatchers(\"/api/account/reset-password/finish\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/proforsearch\").permitAll().antMatchers(\"/api/**\").authenticated().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5482/buggy-version/src.main.java.fr.lfml.manaproject.config.SecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "49668738f4624d015cdae62ccb38417f3bd5a218", "Url": "https://api.github.com/repos/vivali/ManaProject", "Date": "2018-01-24T15:11:47Z"},
{"Line": "260=>260", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "databaseReference.orderByChild(\"name\").startAt(searchText.getText().toString()).endAt(searchText.getText().toString()).addListenerForSingleValueEvent(com.google.firebase.database.ValueEventListener)=>databaseReference.orderByChild(\"name\").startAt(searchText.getText().toString()).endAt(searchText.getText().toString()).addValueEventListener(com.google.firebase.database.ValueEventListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5409/buggy-version/app.src.main.java.edu.msoe.wozniakbe.beergoggles.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "260ab79ecab5830d80904204cd9d8bbfb9d51a71", "Url": "https://api.github.com/repos/wozniakbe/BeerGoggles", "Date": "2018-05-24T20:31:46Z"},
{"Line": "157=>157", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.Double.parseDouble(message.getMessage())=>de.berlin.htw.s0558606.mqttdatavisualizer.model.PersistedMessage.getValueFromMessage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1742/buggy-version/app.src.main.java.de.berlin.htw.s0558606.mqttdatavisualizer.activity.graph.GraphFragment.java", "BodyUseAPI": [], "Fixed commit": "e90fd7f6da39be5c5beda85244211adbe7f9fb02", "Url": "https://api.github.com/repos/Marcel-Ebert/MQTTDataVisualizer", "Date": "2018-01-08T21:44:10Z"},
{"Line": "61=>61", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.joda.time.DateTime.now(org.joda.time.DateTimeZone.getDefault()).getMillis()=>org.joda.time.DateTime.now(org.joda.time.DateTimeZone.getDefault()).plusMillis(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1298/buggy-version/app.src.main.java.com.gobbledygook.theawless.eventlock.events.EventsBuilder.java", "BodyUseAPI": [], "Fixed commit": "49b8b7f4bd78f40978600487791c8ee4e6a6b600", "Url": "https://api.github.com/repos/theawless/EventLock", "Date": "2018-06-03T21:48:28Z"},
{"Line": "82=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.error(java.lang.String,java.lang.Throwable)=>org.slf4j.Logger.error(java.lang.String,java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8853/buggy-version/src.main.java.nl.homeserver.dev.klimaat.KlimaatDummyDataGeneratorService.java", "BodyUseAPI": [], "Fixed commit": "aadc9f2e75cd5b586d628b13f0b95048594d19d4", "Url": "https://api.github.com/repos/bassages/home-server", "Date": "2018-01-21T18:01:27Z"},
{"Line": "82=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.error(java.lang.String,java.lang.Throwable)=>org.slf4j.Logger.error(java.lang.String,java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8853/buggy-version/src.main.java.nl.homeserver.dev.klimaat.KlimaatDummyDataGeneratorService.java", "BodyUseAPI": [], "Fixed commit": "aadc9f2e75cd5b586d628b13f0b95048594d19d4", "Url": "https://api.github.com/repos/bassages/home-server", "Date": "2018-01-21T18:01:27Z"},
{"Line": "93=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.error(java.lang.String,java.lang.Throwable)=>org.slf4j.Logger.error(java.lang.String,java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8853/buggy-version/src.main.java.nl.homeserver.dev.energie.SlimmeMeterSimulatorService.java", "BodyUseAPI": [], "Fixed commit": "aadc9f2e75cd5b586d628b13f0b95048594d19d4", "Url": "https://api.github.com/repos/bassages/home-server", "Date": "2018-01-21T18:01:27Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "mobi.chouette.exchange.gtfs.importer.GtfsImportParameters.getMaxDistanceForCommercial()=>mobi.chouette.exchange.gtfs.importer.GtfsImportParameters.getIgnoreEndChars()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4165/buggy-version/mobi.chouette.exchange.gtfs.src.main.java.mobi.chouette.exchange.gtfs.importer.CommercialStopGenerator.java", "BodyUseAPI": [], "Fixed commit": "a48a4424f4b13c938a833d9642133cfe18ef7277", "Url": "https://api.github.com/repos/afimb/chouette", "Date": "2018-01-04T16:08:34Z"},
{"Line": "15=>15", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.io.PrintStream.println(int)=>java.io.PrintStream.print(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6320/buggy-version/src.com.learn.algorithm.sort.MergeSort.java", "BodyUseAPI": [], "Fixed commit": "e75fafa533db222fcef62ee66dd584a980d72e27", "Url": "https://api.github.com/repos/RamanpreetKhattra/Algorithms", "Date": "2018-04-04T06:47:05Z"},
{"Line": "252=>252", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.power.doc.builder.JavaClass.getName()=>com.power.doc.builder.JavaClass.getCanonicalName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3749/buggy-version/api-doc.src.main.java.com.power.doc.builder.SourceBuilder.java", "BodyUseAPI": [], "Fixed commit": "038d53711a88e37681bfd0dd5cab390c4002dc4e", "Url": "https://api.github.com/repos/shalousun/ApplicationPower", "Date": "2018-07-30T16:07:22Z"},
{"Line": "371=>371", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.File.exists()=>java.io.File.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7098/buggy-version/src.android.org.sunbird.support.SunbirdFileHandler.java", "BodyUseAPI": [], "Fixed commit": "2d95479e64ad510397f60b7fc8feb7096bec1fd4", "Url": "https://api.github.com/repos/project-sunbird/cordova-plugin-file-support", "Date": "2018-10-30T09:12:33Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.apache.skywalking.apm.collector.ui.service.SegmentTopService.loadTop(long,long,long,long,java.lang.String,java.lang.String,int,int,int)=>org.apache.skywalking.apm.collector.ui.service.SegmentTopService.loadTop(long,long,long,long,java.lang.String,java.lang.String,int,page.getLimit(),page.getFrom())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6522/buggy-version/apm-collector.apm-collector-ui.collector-ui-jetty-provider.src.main.java.org.apache.skywalking.apm.collector.ui.query.TraceQuery.java", "BodyUseAPI": [], "Fixed commit": "09f9c1200eea09419c3f39d26c2d1fc78e296269", "Url": "https://api.github.com/repos/sdanzo/incubator-skywalking", "Date": "2018-03-03T12:15:49Z"},
{"Line": "83=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.skywalking.apm.collector.ui.service.SegmentTopService.loadTop(long,long,long,long,java.lang.String,java.lang.String,int,int,int)=>PaginationUtils.Page.getLimit()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6522/buggy-version/apm-collector.apm-collector-ui.collector-ui-jetty-provider.src.main.java.org.apache.skywalking.apm.collector.ui.query.TraceQuery.java", "BodyUseAPI": [], "Fixed commit": "09f9c1200eea09419c3f39d26c2d1fc78e296269", "Url": "https://api.github.com/repos/sdanzo/incubator-skywalking", "Date": "2018-03-03T12:15:49Z"},
{"Line": "80=>82", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "condition.getPaging().getPageSize()=>PaginationUtils.INSTANCE.exchange(condition.getPaging())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6522/buggy-version/apm-collector.apm-collector-ui.collector-ui-jetty-provider.src.main.java.org.apache.skywalking.apm.collector.ui.query.TraceQuery.java", "BodyUseAPI": [], "Fixed commit": "09f9c1200eea09419c3f39d26c2d1fc78e296269", "Url": "https://api.github.com/repos/sdanzo/incubator-skywalking", "Date": "2018-03-03T12:15:49Z"},
{"Line": "63=>63", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.lindaring.dictionary.properties.LogProperties.getExecutionTime()=>com.lindaring.dictionary.properties.LogProperties.getMethod()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4477/buggy-version/src.main.java.com.lindaring.dictionary.aspect.LogAspect.java", "BodyUseAPI": [], "Fixed commit": "58e8b50e2b45536d1146222dd4fa66fc5caede17", "Url": "https://api.github.com/repos/lindaring/simple-dictionary-api", "Date": "2018-05-18T18:44:57Z"},
{"Line": "62=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.shardingsphere.transaction.manager.base.executor.SagaSQLExeucteCallback<T>.exeucteResult()=>io.shardingsphere.transaction.manager.base.executor.SagaSQLExeucteCallback<T>.executeResult()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1360/buggy-version/sharding-transaction.src.main.java.io.shardingsphere.transaction.manager.base.executor.SagaSQLExeucteCallback.java", "BodyUseAPI": [], "Fixed commit": "db5acd67c20cf71bbd6d73e66a842cd95c05df3b", "Url": "https://api.github.com/repos/KomachiSion/sharding-sphere", "Date": "2018-09-13T10:27:05Z"},
{"Line": "138=>138", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.faces.context.FacesContext.getCurrentInstance().addMessage(java.lang.String,javax.faces.application.FacesMessage)=>javax.faces.context.FacesContext.getCurrentInstance().addMessage(<nulltype>,javax.faces.application.FacesMessage)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5594/buggy-version/src.main.java.com.marcanti.ecommerce.controller.BasketController.java", "BodyUseAPI": [], "Fixed commit": "e286993a8b0ca1cc61eaa4ab56bdddfd9b2aa436", "Url": "https://api.github.com/repos/Lezreg/eMarcanti", "Date": "2018-03-27T22:21:43Z"},
{"Line": "138=>138", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.faces.context.FacesContext.getCurrentInstance().addMessage(java.lang.String,javax.faces.application.FacesMessage)=>javax.faces.context.FacesContext.getCurrentInstance().addMessage(<nulltype>,javax.faces.application.FacesMessage)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5594/buggy-version/src.main.java.com.marcanti.ecommerce.controller.BasketController.java", "BodyUseAPI": [], "Fixed commit": "e286993a8b0ca1cc61eaa4ab56bdddfd9b2aa436", "Url": "https://api.github.com/repos/Lezreg/eMarcanti", "Date": "2018-03-27T22:21:43Z"},
{"Line": "72=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "codeu.model.store.basic.UserStore.addUser(java.lang.String,java.lang.String,boolean)=>codeu.model.store.basic.UserStore.addAdmin()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8145/buggy-version/src.main.java.codeu.model.store.basic.UserStore.java", "BodyUseAPI": [], "Fixed commit": "bbab1aefb146ee7f14619ceb6b91a5363add25d4", "Url": "https://api.github.com/repos/donnelldebnam/CodeU-Spring-2018-29", "Date": "2018-07-21T23:31:49Z"},
{"Line": "60=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.aionemu.gameserver.model.gameobjects.player.Player.sendMessage(java.lang.String)=>com.aionemu.gameserver.utils.PacketSendUtility.sendMessage(com.aionemu.gameserver.model.gameobjects.player.Player,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1268/buggy-version/AL-Game.src.com.aionemu.gameserver.model.templates.item.actions.ShugoSweepAction.java", "BodyUseAPI": [], "Fixed commit": "cbbd48d17ee2f53ecb01a7ec9641ece0ea1ebecb", "Url": "https://api.github.com/repos/davizucon/aion-germany", "Date": "2018-07-20T17:15:54Z"},
{"Line": "48=>48", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.aionemu.gameserver.model.gameobjects.player.Player.sendMessage(java.lang.String)=>com.aionemu.gameserver.utils.PacketSendUtility.sendMessage(com.aionemu.gameserver.model.gameobjects.player.Player,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1268/buggy-version/AL-Game.src.com.aionemu.gameserver.model.templates.item.actions.ShugoSweepAction.java", "BodyUseAPI": [], "Fixed commit": "cbbd48d17ee2f53ecb01a7ec9641ece0ea1ebecb", "Url": "https://api.github.com/repos/davizucon/aion-germany", "Date": "2018-07-20T17:15:54Z"},
{"Line": "63=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.aionemu.gameserver.model.gameobjects.player.Player.sendMessage(java.lang.String)=>com.aionemu.gameserver.utils.PacketSendUtility.sendMessage(com.aionemu.gameserver.model.gameobjects.player.Player,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1268/buggy-version/AL-Game.src.com.aionemu.gameserver.model.templates.item.actions.ShugoSweepAction.java", "BodyUseAPI": [], "Fixed commit": "cbbd48d17ee2f53ecb01a7ec9641ece0ea1ebecb", "Url": "https://api.github.com/repos/davizucon/aion-germany", "Date": "2018-07-20T17:15:54Z"},
{"Line": "81=>81", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.content.Intent.putExtra(java.lang.String,studentModel.getStudent_id())=>android.content.Intent.putExtra(java.lang.String,main.sleepapp.model.StudentModel)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/973/buggy-version/SleepAndroidApplication.app.src.main.java.main.sleepapp.controller.AssessmentController.java", "BodyUseAPI": [], "Fixed commit": "2779825e575d862b5ed92a6c5d63b20dc5fc96f6", "Url": "https://api.github.com/repos/smeidigung/AndroidApp", "Date": "2018-05-14T16:07:37Z"},
{"Line": "293=>293", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.opencron.registry.api.RegistryService.unregister(org.opencron.registry.URL,(((org.opencron.common.Constants.ZK_REGISTRY_JOB_PATH) + \"/\") + jobId))=>org.opencron.server.job.OpencronRegistry.jobUnRegister(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9408/buggy-version/opencron-server.src.main.java.org.opencron.server.job.OpencronRegistry.java", "BodyUseAPI": [], "Fixed commit": "fa8f65b7f28089c685dc341cc16f0ff682670610", "Url": "https://api.github.com/repos/wolfboys/JobX-dev", "Date": "2018-03-07T13:47:21Z"},
{"Line": "294=>294", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.opencron.registry.api.RegistryService.register(org.opencron.registry.URL,(((org.opencron.common.Constants.ZK_REGISTRY_JOB_PATH) + \"/\") + jobId),boolean)=>org.opencron.server.job.OpencronRegistry.jobRegister(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9408/buggy-version/opencron-server.src.main.java.org.opencron.server.job.OpencronRegistry.java", "BodyUseAPI": [], "Fixed commit": "fa8f65b7f28089c685dc341cc16f0ff682670610", "Url": "https://api.github.com/repos/wolfboys/JobX-dev", "Date": "2018-03-07T13:47:21Z"},
{"Line": "22=>22", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Integer.getInteger(java.lang.String)=>java.lang.Integer.valueOf(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7633/buggy-version/src.main.java.ru.spbau.mit.forum.client.Main.java", "BodyUseAPI": [], "Fixed commit": "a616279cbbbc50fc01596dd4205509c6506cca65", "Url": "https://api.github.com/repos/angelikamukhina/Forum", "Date": "2018-06-06T22:25:49Z"},
{"Line": "254=>262", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "de.unistuttgart.iaas.amyassist.amy.plugin.spotify.SpotifyAPICalls.getCurrentSong()=>de.unistuttgart.iaas.amyassist.amy.plugin.spotify.SpotifyAPICalls.getCurrentPlayingContext()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9791/buggy-version/plugins.spotify.src.main.java.de.unistuttgart.iaas.amyassist.amy.plugin.spotify.logic.PlayerLogic.java", "BodyUseAPI": [], "Fixed commit": "0400be603df0f03f60a1f81256471c62be65d0be", "Url": "https://api.github.com/repos/AmyAssist/Amy", "Date": "2018-08-26T16:22:54Z"},
{"Line": "56=>56", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.webkit.WebSettings.getUserAgentString()=>android.webkit.WebSettings.getDefaultUserAgent(cookoon.cookoonandroid.TurbolinksActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7657/buggy-version/app.src.main.java.cookoon.cookoonandroid.TurbolinksActivity.java", "BodyUseAPI": [], "Fixed commit": "bac384b57e8290c8112b573625b110a60f5bce32", "Url": "https://api.github.com/repos/Cookoon/cookoon-android", "Date": "2018-03-12T13:34:02Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.github.pactstart.system.dao.SuggestionMapper.updateByPrimaryKey(io.github.pactstart.system.entity.Suggestion)=>io.github.pactstart.system.dao.SuggestionMapper.updateByPrimaryKeySelective(io.github.pactstart.system.entity.Suggestion)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2489/buggy-version/kangaroo-mod-system.src.main.java.io.github.pactstart.system.service.impl.SuggestionServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "fc1d2fb57dc9f1690776a285e94bb6d7c29dd29e", "Url": "https://api.github.com/repos/PactStart/kangaroo", "Date": "2018-07-09T12:55:51Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.api.KivuzikMail.repositories.UserRepository.getSample()=>com.api.KivuzikMail.repositories.UserRepository.findAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1359/buggy-version/src.main.java.com.api.KivuzikMail.services.UserServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "7041b69caa1c59d13b8d9959ace7c0c55f2f3acf", "Url": "https://api.github.com/repos/EngineerELdorado/kivuzikmail", "Date": "2018-08-06T17:23:33Z"},
{"Line": "50=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.PATHochuan.web.service.StorageService.store(org.springframework.web.multipart.MultipartFile)=>com.PATHochuan.web.service.StorageService.store(org.springframework.web.multipart.MultipartFile,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9872/buggy-version/trace.src.main.java.com.PATHochuan.web.controller.QualityReportUploadController.java", "BodyUseAPI": [], "Fixed commit": "4b2794a1a4e8be619b17dad0941e3684dfcda052", "Url": "https://api.github.com/repos/wang1365/trace-platform", "Date": "2018-08-28T02:24:19Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.shashank.oru.LoginActivity.findViewById(R.id.register)=>com.example.shashank.oru.LoginActivity.findViewById(R.id.login)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7904/buggy-version/app.src.main.java.com.example.shashank.oru.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "08bf466a3965b5dc04ee93fdbf6e5416ee002c59", "Url": "https://api.github.com/repos/ironbatshashank/Oru", "Date": "2018-07-11T08:37:24Z"},
{"Line": "75=>75", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.apache.helix.model.IdealState.getReplicas()=>org.apache.helix.model.IdealState.getReplicaCount(liveInstance.size())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5010/buggy-version/helix-core.src.main.java.org.apache.helix.controller.rebalancer.AutoRebalancer.java", "BodyUseAPI": [], "Fixed commit": "42557199a99feab1a0157569d49925f60a0955b1", "Url": "https://api.github.com/repos/mahak/helix", "Date": "2018-03-15T00:29:53Z"},
{"Line": "189=>189", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.warn(java.lang.String)=>org.slf4j.Logger.warn(java.lang.String,java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8566/buggy-version/src.main.java.gov.ca.cwds.rest.services.cms.CachingSystemCodeService.java", "BodyUseAPI": [], "Fixed commit": "ccea0a9655ee18396d9e6fb5b898ed9de3b2e8c1", "Url": "https://api.github.com/repos/ca-cwds/api-core", "Date": "2017-07-07T05:48:57Z"},
{"Line": "137=>141", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.PrintStream.print(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9885/buggy-version/src.main.java.app.Puck2Main.java", "BodyUseAPI": [], "Fixed commit": "eb1d2c02e1613b7bf20bceba5fafa86627da62e5", "Url": "https://api.github.com/repos/geoffreycopin/puck2", "Date": "2018-05-26T16:47:55Z"},
{"Line": "137=>141", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.PrintStream.print(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9885/buggy-version/src.main.java.app.Puck2Main.java", "BodyUseAPI": [], "Fixed commit": "eb1d2c02e1613b7bf20bceba5fafa86627da62e5", "Url": "https://api.github.com/repos/geoffreycopin/puck2", "Date": "2018-05-26T16:47:55Z"},
{"Line": "86=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.liferay.portal.kernel.log.Log.debug(com.liferay.mail.reader.service.impl.AttachmentLocalServiceImpl,com.liferay.mail.reader.service.impl.AttachmentLocalServiceImpl)=>com.liferay.portal.kernel.log.Log.debug(com.liferay.document.library.kernel.exception.DirectoryNameException,com.liferay.document.library.kernel.exception.DirectoryNameException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6711/buggy-version/modules.apps.mail-reader.mail-reader-service.src.main.java.com.liferay.mail.reader.service.impl.AttachmentLocalServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "71ba3d59cebda661454d6e16b65af62d185e62a5", "Url": "https://api.github.com/repos/antonio-ortega/liferay-portal", "Date": "2018-08-15T20:03:33Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "globesort.IntArray.sorttime()=>globesort.IntArray.getSorttime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7570/buggy-version/src.main.java.globesort.GlobeSortClient.java", "BodyUseAPI": [], "Fixed commit": "dc92b37f582e9fbfd84d91333f7c5eadbd11aefd", "Url": "https://api.github.com/repos/RuochaoYan/a-simple-cloud-hosted-sorting-service", "Date": "2018-05-09T00:45:40Z"},
{"Line": "47=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.coder520.workflow.service.ReAttendService.listReAttend(user.getUsername())=>com.coder520.workflow.service.ReAttendService.listReAttend(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/855/buggy-version/src.main.java.com.coder520.workflow.controller.ReAttendController.java", "BodyUseAPI": [], "Fixed commit": "c781bcef1375c7b8340a0084d38d00f7e8f3fb43", "Url": "https://api.github.com/repos/PdeadLine/workAttendance", "Date": "2018-07-17T07:41:42Z"},
{"Line": "1081=>1078", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.gluu.oxtrust.ldap.cache.service.CacheRefreshTimer.setProperty(PropertiesDecrypter.bindPassword,bindCredentials.getBindPassword())=>java.util.Properties.setProperty(PropertiesDecrypter.BIND_PASSWORD,bindCredentials.getBindPassword())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6572/buggy-version/server.src.main.java.org.gluu.oxtrust.ldap.cache.service.CacheRefreshTimer.java", "BodyUseAPI": [], "Fixed commit": "9213cb9f675fb38ecd38b4d7012e10b5dd4dff21", "Url": "https://api.github.com/repos/GluuFederation/oxTrust", "Date": "2018-10-01T17:54:36Z"},
{"Line": "1080=>1077", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.gluu.oxtrust.ldap.cache.service.CacheRefreshTimer.setProperty(java.lang.String,bindCredentials.getBindDn())=>java.util.Properties.setProperty(java.lang.String,bindCredentials.getBindDn())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6572/buggy-version/server.src.main.java.org.gluu.oxtrust.ldap.cache.service.CacheRefreshTimer.java", "BodyUseAPI": [], "Fixed commit": "9213cb9f675fb38ecd38b4d7012e10b5dd4dff21", "Url": "https://api.github.com/repos/GluuFederation/oxTrust", "Date": "2018-10-01T17:54:36Z"},
{"Line": "1081=>1078", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.gluu.oxtrust.ldap.cache.service.CacheRefreshTimer.setProperty(PropertiesDecrypter.bindPassword,bindCredentials.getBindPassword())=>java.util.Properties.setProperty(PropertiesDecrypter.BIND_PASSWORD,bindCredentials.getBindPassword())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6572/buggy-version/server.src.main.java.org.gluu.oxtrust.ldap.cache.service.CacheRefreshTimer.java", "BodyUseAPI": [], "Fixed commit": "9213cb9f675fb38ecd38b4d7012e10b5dd4dff21", "Url": "https://api.github.com/repos/GluuFederation/oxTrust", "Date": "2018-10-01T17:54:36Z"},
{"Line": "63=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "schemeUri.getHost().equals(java.lang.String)=>android.text.TextUtils.equals(schemeUri.getHost(),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3710/buggy-version/app.src.main.java.com.fengdewang.hybrid_android.WebViewActivity.java", "BodyUseAPI": [], "Fixed commit": "a9264ce34473aaea30410b1a55a6bdd15cb300f3", "Url": "https://api.github.com/repos/q946401639/Hybrid-Android", "Date": "2018-01-04T08:04:02Z"},
{"Line": "430=>423", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "uri.getAuthority().equals(java.lang.String)=>android.text.TextUtils.equals(uri.getAuthority(),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3710/buggy-version/app.src.main.java.com.fengdewang.hybrid_android.WebViewActivity.java", "BodyUseAPI": [], "Fixed commit": "a9264ce34473aaea30410b1a55a6bdd15cb300f3", "Url": "https://api.github.com/repos/q946401639/Hybrid-Android", "Date": "2018-01-04T08:04:02Z"},
{"Line": "313=>313", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "by.potato.helper.Geocoding.getCoordFromAddressYandex(java.lang.String)=>by.potato.helper.Geocoding.getCoordFromAddressGoogle(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8139/buggy-version/src.main.java.by.potato.helper.BotHelper.java", "BodyUseAPI": [], "Fixed commit": "2c3bf7680999e7d232579a4fa143e9110e3a0b30", "Url": "https://api.github.com/repos/devLevsha/BestCourses", "Date": "2018-02-24T14:55:11Z"},
{"Line": "298=>298", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "by.potato.helper.Geocoding.getCoordFromAddressYandex(java.lang.String)=>by.potato.helper.Geocoding.getCoordFromAddressGoogle(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8139/buggy-version/src.main.java.by.potato.helper.BotHelper.java", "BodyUseAPI": [], "Fixed commit": "2c3bf7680999e7d232579a4fa143e9110e3a0b30", "Url": "https://api.github.com/repos/devLevsha/BestCourses", "Date": "2018-02-24T14:55:11Z"},
{"Line": "142=>142", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.magic.api.pricers.impl.DeckTutorPricer.debug((((getName()) + \" request :\") + obj))=>org.magic.api.pricers.impl.DeckTutorPricer.trace((((getName()) + \" request :\") + obj))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5271/buggy-version/src.main.java.org.magic.api.pricers.impl.DeckTutorPricer.java", "BodyUseAPI": [], "Fixed commit": "cc49222596dcb86355f0f548175f5a3c40d70fcb", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-07-12T08:50:48Z"},
{"Line": "125=>126", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.http.client.methods.HttpPost.addHeader(java.lang.String,java.lang.String)=>org.apache.http.client.methods.HttpPost.addHeader(java.lang.String,MTGConstants.USER_AGENT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5271/buggy-version/src.main.java.org.magic.api.pricers.impl.DeckTutorPricer.java", "BodyUseAPI": [], "Fixed commit": "cc49222596dcb86355f0f548175f5a3c40d70fcb", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-07-12T08:50:48Z"},
{"Line": "145=>145", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.magic.api.pricers.impl.DeckTutorPricer.debug(java.lang.String)=>org.magic.api.pricers.impl.DeckTutorPricer.trace(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5271/buggy-version/src.main.java.org.magic.api.pricers.impl.DeckTutorPricer.java", "BodyUseAPI": [], "Fixed commit": "cc49222596dcb86355f0f548175f5a3c40d70fcb", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-07-12T08:50:48Z"},
{"Line": "720=>720", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.sambatech.player.SambaPlayer.destroyInternal()=>com.sambatech.player.SambaPlayer.destroyInternal(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7467/buggy-version/sambaplayersdk.src.main.java.com.sambatech.player.SambaPlayer.java", "BodyUseAPI": [], "Fixed commit": "38db06f1e2c9b9121e5b743df9d9e3d7ee5ed27a", "Url": "https://api.github.com/repos/sambatech/player_sdk_android", "Date": "2018-01-04T11:48:15Z"},
{"Line": "180=>180", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.sambatech.player.SambaPlayer.1.destroyInternal()=>com.sambatech.player.SambaPlayer.1.destroyInternal(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7467/buggy-version/sambaplayersdk.src.main.java.com.sambatech.player.SambaPlayer.java", "BodyUseAPI": [], "Fixed commit": "38db06f1e2c9b9121e5b743df9d9e3d7ee5ed27a", "Url": "https://api.github.com/repos/sambatech/player_sdk_android", "Date": "2018-01-04T11:48:15Z"},
{"Line": "791=>791", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.sambatech.player.SambaPlayer.destroyInternal()=>com.sambatech.player.SambaPlayer.destroyInternal(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7467/buggy-version/sambaplayersdk.src.main.java.com.sambatech.player.SambaPlayer.java", "BodyUseAPI": [], "Fixed commit": "38db06f1e2c9b9121e5b743df9d9e3d7ee5ed27a", "Url": "https://api.github.com/repos/sambatech/player_sdk_android", "Date": "2018-01-04T11:48:15Z"},
{"Line": "1061=>1061", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.sambatech.player.SambaPlayer.11.destroyInternal()=>com.sambatech.player.SambaPlayer.11.destroyInternal(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7467/buggy-version/sambaplayersdk.src.main.java.com.sambatech.player.SambaPlayer.java", "BodyUseAPI": [], "Fixed commit": "38db06f1e2c9b9121e5b743df9d9e3d7ee5ed27a", "Url": "https://api.github.com/repos/sambatech/player_sdk_android", "Date": "2018-01-04T11:48:15Z"},
{"Line": "420=>418", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4694/buggy-version/SmartWebView.src.main.java.com.bekkostudio.compactWebview.SmartWebViewCompact.java", "BodyUseAPI": [], "Fixed commit": "f9a09ea337c47543ea28edf0c0c56b5158186a7d", "Url": "https://api.github.com/repos/jialingkun/SmartWebViewCompact", "Date": "2018-10-04T08:30:01Z"},
{"Line": "49=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.shardingsphere.transaction.common.config.ProxyTransactionConfiguration.doSPIConfiguration()=>io.shardingsphere.transaction.common.config.ProxyTransactionConfiguration.doSPIConfiguration(io.shardingsphere.core.constant.TransactionType)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8848/buggy-version/sharding-transaction.src.main.java.io.shardingsphere.transaction.common.config.ProxyTransactionConfiguration.java", "BodyUseAPI": [], "Fixed commit": "3b66870f1a5d61456136cf462d6d51b08a9e4d91", "Url": "https://api.github.com/repos/sharding-sphere/sharding-sphere", "Date": "2018-07-30T10:36:53Z"},
{"Line": "49=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.shardingsphere.transaction.common.config.JDBCTransactionConfiguration.doSPIConfiguration()=>io.shardingsphere.transaction.common.config.JDBCTransactionConfiguration.doSPIConfiguration(io.shardingsphere.core.constant.TransactionType)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8848/buggy-version/sharding-transaction.src.main.java.io.shardingsphere.transaction.common.config.JDBCTransactionConfiguration.java", "BodyUseAPI": [], "Fixed commit": "3b66870f1a5d61456136cf462d6d51b08a9e4d91", "Url": "https://api.github.com/repos/sharding-sphere/sharding-sphere", "Date": "2018-07-30T10:36:53Z"},
{"Line": "192=>192", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.squareup.picasso.Picasso.with(ctx).load(image).resize(int,int)=>com.squareup.picasso.Picasso.with(ctx).load(image).fit()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4741/buggy-version/app.src.main.java.com.wordpress.necessitateapps.picme.ImageDownloaderActivity.java", "BodyUseAPI": [], "Fixed commit": "828318867c6dcd3cf7fc81bb121d1beeadadd94f", "Url": "https://api.github.com/repos/moses-lee/Picme", "Date": "2018-02-04T21:01:24Z"},
{"Line": "192=>192", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.squareup.picasso.Picasso.with(ctx).load(image).resize(300, 300).into(android.widget.ImageView)=>com.squareup.picasso.Picasso.with(ctx).load(image).fit().centerCrop()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4741/buggy-version/app.src.main.java.com.wordpress.necessitateapps.picme.ImageDownloaderActivity.java", "BodyUseAPI": [], "Fixed commit": "828318867c6dcd3cf7fc81bb121d1beeadadd94f", "Url": "https://api.github.com/repos/moses-lee/Picme", "Date": "2018-02-04T21:01:24Z"},
{"Line": "43=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "caster.inventory.setInventorySlotContents(int,<nulltype>)=>caster.inventory.setInventorySlotContents(int,ItemStack.EMPTY)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5637/buggy-version/src.main.java.electroblob.wizardry.spell.PocketFurnace.java", "BodyUseAPI": [], "Fixed commit": "a567281183adc9b871a41b00b104975560e7fb3f", "Url": "https://api.github.com/repos/Electroblob77/Wizardry", "Date": "2018-02-22T12:56:03Z"},
{"Line": "131=>131", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.example.android.inventoryapp.DetailActivity.startActivity(android.content.Intent)=>com.example.android.inventoryapp.DetailActivity.startActivityForResult(android.content.Intent,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/298/buggy-version/app.src.main.java.com.example.android.inventoryapp.DetailActivity.java", "BodyUseAPI": [], "Fixed commit": "a668927da0b7310c1f3112524a8c0fc52fa8173d", "Url": "https://api.github.com/repos/martinaHanusova/InventoryApp2", "Date": "2018-08-08T19:03:37Z"},
{"Line": "53=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "karan.cogz.SignUp.findViewById(R.id.editText_username)=>karan.cogz.SignUp.findViewById(R.id.userName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6567/buggy-version/app.src.main.java.karan.cogz.SignUp.java", "BodyUseAPI": [], "Fixed commit": "9f982cc5a27c049ff28545bf2d269c767f8689bf", "Url": "https://api.github.com/repos/srm-cts-club/cogz", "Date": "2018-03-26T13:26:21Z"},
{"Line": "54=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "karan.cogz.SignUp.findViewById(R.id.editText_password)=>karan.cogz.SignUp.findViewById(R.id.pass1)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6567/buggy-version/app.src.main.java.karan.cogz.SignUp.java", "BodyUseAPI": [], "Fixed commit": "9f982cc5a27c049ff28545bf2d269c767f8689bf", "Url": "https://api.github.com/repos/srm-cts-club/cogz", "Date": "2018-03-26T13:26:21Z"},
{"Line": "434=>434", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(java.lang.String)=>javafx.scene.control.TextField.setText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2207/buggy-version/src.application.CalController.java", "BodyUseAPI": [], "Fixed commit": "1c910c086f00ae64882cc9710347aba93e691a8a", "Url": "https://api.github.com/repos/GQY2012/Calculator", "Date": "2018-04-03T05:49:54Z"},
{"Line": "88=>90", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)=>java.util.Arrays.binarySearch(java.lang.String[],java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/545/buggy-version/spring-cloud-stream.src.main.java.org.springframework.cloud.stream.config.MergableProperties.java", "BodyUseAPI": [], "Fixed commit": "a9904ee2027cba816a9933dda0e6477f16ec47cf", "Url": "https://api.github.com/repos/sobychacko/spring-cloud-stream", "Date": "2018-10-05T17:30:11Z"},
{"Line": "71=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.Object.merge(java.lang.Object)=>java.lang.Object.merge(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/545/buggy-version/spring-cloud-stream.src.main.java.org.springframework.cloud.stream.config.MergableProperties.java", "BodyUseAPI": [], "Fixed commit": "a9904ee2027cba816a9933dda0e6477f16ec47cf", "Url": "https://api.github.com/repos/sobychacko/spring-cloud-stream", "Date": "2018-10-05T17:30:11Z"},
{"Line": "86=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.beans.BeanUtils.instantiateClass(java.lang.Class<? extends org.springframework.cloud.stream.config.MergableProperties>)=>org.springframework.util.ObjectUtils.isEmpty(java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/545/buggy-version/spring-cloud-stream.src.main.java.org.springframework.cloud.stream.config.MergableProperties.java", "BodyUseAPI": [], "Fixed commit": "a9904ee2027cba816a9933dda0e6477f16ec47cf", "Url": "https://api.github.com/repos/sobychacko/spring-cloud-stream", "Date": "2018-10-05T17:30:11Z"},
{"Line": "99=>118", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "T.merge(T)=>T.merge(T,java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/545/buggy-version/spring-cloud-stream.src.main.java.org.springframework.cloud.stream.config.EnvironmentEntryInitializingTreeMap.java", "BodyUseAPI": [], "Fixed commit": "a9904ee2027cba816a9933dda0e6477f16ec47cf", "Url": "https://api.github.com/repos/sobychacko/spring-cloud-stream", "Date": "2018-10-05T17:30:11Z"},
{"Line": "33=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.john.noteparse.MainActivity.findViewById(R.id.button)=>com.example.john.noteparse.MainActivity.findViewById(R.id.btn_load)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1696/buggy-version/app.src.main.java.com.example.john.noteparse.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "f8c44e68bb87e2f26c0ec5960517ba594f9e9911", "Url": "https://api.github.com/repos/JLitman70/NoteParse", "Date": "2018-04-28T22:08:44Z"},
{"Line": "71=>92", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setText(java.lang.String)=>android.widget.EditText.setText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1696/buggy-version/app.src.main.java.com.example.john.noteparse.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "f8c44e68bb87e2f26c0ec5960517ba594f9e9911", "Url": "https://api.github.com/repos/JLitman70/NoteParse", "Date": "2018-04-28T22:08:44Z"},
{"Line": "80=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Message.playerHaveAnExtraTurnButLosePoints()=>Message.playerExtraTurnButLosePoints()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2485/buggy-version/src.Player.java", "BodyUseAPI": [], "Fixed commit": "a1c6ce96184614b9d29118f1057eedb0eebbe9a0", "Url": "https://api.github.com/repos/Nicolai2100/CDIO1_GameEngine", "Date": "2018-10-08T10:07:04Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.opencv.core.Mat.width()=>org.opencv.core.Mat.height()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4155/buggy-version/vision.src.org.usfirst.frc.team1089.vision.MarkupMachine.java", "BodyUseAPI": [], "Fixed commit": "edaa8438786b34445c4da22133da656c81a1ee71", "Url": "https://api.github.com/repos/Mercury1089/2018-robot-code", "Date": "2018-01-29T21:09:06Z"},
{"Line": "37=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.nio.file.Path.getFileName()=>java.lang.String.replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5691/buggy-version/src.org.vitrivr.cineast.core.importer.handlers.JsonDataImportHandler.java", "BodyUseAPI": [], "Fixed commit": "79012e5c554a7f1f04d5d933c11327f4e4930ff9", "Url": "https://api.github.com/repos/vitrivr/cineast", "Date": "2018-03-08T09:17:53Z"},
{"Line": "107=>105", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.content.Intent.setDataAndType(android.net.Uri,java.lang.String)=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4886/buggy-version/app.src.main.java.com.sasfmlzr.filemanager.api.file.FileOperation.java", "BodyUseAPI": [], "Fixed commit": "8d88088e753e5c369515a66c9c783e2576a03163", "Url": "https://api.github.com/repos/sasfmlzr/filemanager", "Date": "2018-04-16T10:50:47Z"},
{"Line": "58=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.silverpeas.core.web.util.viewgenerator.html.arraypanes.ArrayLineTag.getId()=>org.silverpeas.core.web.util.viewgenerator.html.arraypanes.ArrayLineTag.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7277/buggy-version/core-web.src.main.java.org.silverpeas.core.web.util.viewgenerator.html.arraypanes.ArrayLineTag.java", "BodyUseAPI": [], "Fixed commit": "33a9a1e4b129af57a7017274cc63573f9ff9c34d", "Url": "https://api.github.com/repos/SilverYoCha/Silverpeas-Core", "Date": "2018-10-23T08:20:09Z"},
{"Line": "58=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.silverpeas.core.web.util.viewgenerator.html.arraypanes.ArrayLine.setId(java.lang.String)=>org.silverpeas.core.web.util.viewgenerator.html.arraypanes.ArrayLine.setId(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7277/buggy-version/core-web.src.main.java.org.silverpeas.core.web.util.viewgenerator.html.arraypanes.ArrayLineTag.java", "BodyUseAPI": [], "Fixed commit": "33a9a1e4b129af57a7017274cc63573f9ff9c34d", "Url": "https://api.github.com/repos/SilverYoCha/Silverpeas-Core", "Date": "2018-10-23T08:20:09Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "bean.Persona.getId()=>bean.Persona.getCuil_cuit()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5663/buggy-version/src.bean.PersonaList.java", "BodyUseAPI": [], "Fixed commit": "f0aeb3f7eaa4128c8000e83145ebeac682a8fc2d", "Url": "https://api.github.com/repos/tomasmalio/distribuidasTpUade", "Date": "2018-03-20T13:05:42Z"},
{"Line": "204=>209", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.content.Intent.setType(java.lang.String)=>android.content.Intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/754/buggy-version/app.src.main.java.com.yanxiu.gphone.faceshowadmin_android.business.adressbook.activity.UserMessageActivity.java", "BodyUseAPI": [], "Fixed commit": "f391f33d639722d55db3270ce3772be980e2ed8a", "Url": "https://api.github.com/repos/caileiYanxiu/FaceShowAdmin_Android", "Date": "2018-10-24T08:02:02Z"},
{"Line": "179=>182", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.leikr.core.DesktopEnvironment.LeikrDesktopEngine.dispose()=>com.badlogic.gdx.graphics.Texture.dispose()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9806/buggy-version/core.src.com.leikr.core.DesktopEnvironment.LeikrDesktopEngine.java", "BodyUseAPI": [], "Fixed commit": "e725b8904b11c9ad483d2d475a4a2ac365c01fbf", "Url": "https://api.github.com/repos/Torbuntu/Leikr16", "Date": "2018-09-03T02:48:31Z"},
{"Line": "206=>208", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "206=>208", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "94=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "100=>102", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "218=>220", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "212=>214", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "194=>196", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "94=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "82=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "200=>202", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "194=>196", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "212=>214", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "82=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "106=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "218=>220", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "112=>114", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "112=>114", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "200=>202", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "188=>190", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "88=>90", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "88=>90", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "100=>102", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "106=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "188=>190", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7953/buggy-version/src.com.company.Main.java", "BodyUseAPI": [], "Fixed commit": "ae11712743ef17b9a08717ed7ea4de9dbb5d0973", "Url": "https://api.github.com/repos/techinologic/RockPaperScissor", "Date": "2018-04-06T22:10:05Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.gatech.oad.antlab.person.Person5.length()=>java.lang.String.length()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5080/buggy-version/M2.src.main.java.edu.gatech.oad.antlab.person.Person5.java", "BodyUseAPI": [], "Fixed commit": "4c921e59027b5061c14aff3a01f461dcfb4ac7d9", "Url": "https://api.github.com/repos/peteherman/m2_cs2340", "Date": "2018-09-07T00:11:40Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.gatech.oad.antlab.person.Person5.substring(int,int)=>java.lang.String.substring(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5080/buggy-version/M2.src.main.java.edu.gatech.oad.antlab.person.Person5.java", "BodyUseAPI": [], "Fixed commit": "4c921e59027b5061c14aff3a01f461dcfb4ac7d9", "Url": "https://api.github.com/repos/peteherman/m2_cs2340", "Date": "2018-09-07T00:11:40Z"},
{"Line": "66=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Context.write(((Text) (item.getKey())),((MyMapWritable) (item.getValue())))=>Context.write(StringPair,FloatWritable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6418/buggy-version/src.main.java.CrystalBall.java", "BodyUseAPI": [], "Fixed commit": "3607aadcc62624de1cab8cac3c7a18e41ef83ce9", "Url": "https://api.github.com/repos/backslash112/crystal-ball-hadoop", "Date": "2018-04-23T19:36:37Z"},
{"Line": "564=>564", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.tameif.tame.TAMEResponse.trace(com.tameif.tame.TAMERequest,TraceType.FUNCTION,java.lang.String,java.lang.String,localValue.toString())=>com.tameif.tame.TAMEResponse.trace(com.tameif.tame.TAMERequest,TraceType.VALUE,java.lang.String,java.lang.String,localValue.toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1536/buggy-version/src.com.tameif.tame.TAMELogic.java", "BodyUseAPI": [], "Fixed commit": "b328c9382af61e11f446c2778ac8376bfae3d300", "Url": "https://api.github.com/repos/TAME-IF/TAME", "Date": "2018-07-26T21:39:11Z"},
{"Line": "1442=>1441", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuilder.toString()=>com.tameif.tame.TAMEResponse.trace(com.tameif.tame.TAMERequest,TraceType.INTERPRETER,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1536/buggy-version/src.com.tameif.tame.TAMELogic.java", "BodyUseAPI": [], "Fixed commit": "b328c9382af61e11f446c2778ac8376bfae3d300", "Url": "https://api.github.com/repos/TAME-IF/TAME", "Date": "2018-07-26T21:39:11Z"},
{"Line": "12=>12", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ystem.out.println(java.lang.String)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7027/buggy-version/src.main.java.java8_in_action.chapter7.Chapter7.java", "BodyUseAPI": [], "Fixed commit": "f86590c1781d4e313f3a55456a0997d8589c31a7", "Url": "https://api.github.com/repos/tlanders/javase8", "Date": "2018-06-08T22:46:38Z"},
{"Line": "126=>126", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.kafka.streams.processor.internals.assignment.SubscriptionInfo.encodeVersionThree()=>org.apache.kafka.streams.processor.internals.assignment.SubscriptionInfo.encodeVersionThree(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4876/buggy-version/streams.src.main.java.org.apache.kafka.streams.processor.internals.assignment.SubscriptionInfo.java", "BodyUseAPI": [], "Fixed commit": "f9b6732d09ba4e12af615c89ffc1abda38ec69ce", "Url": "https://api.github.com/repos/tedyu/kafka", "Date": "2018-07-10T10:09:07Z"},
{"Line": "60=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.SearchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()))=>android.support.v7.widget.SearchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8873/buggy-version/app.src.main.java.com.example.d.movie_app.ui.search.SearchActivity.java", "BodyUseAPI": [], "Fixed commit": "1b25b035d25a098cd57c0dc40f62c2f17147963b", "Url": "https://api.github.com/repos/Darnell10/Movie_App", "Date": "2018-08-31T21:53:03Z"},
{"Line": "67=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.d.movie_app.ui.search.SearchPresenter.getResultsBasedOnQuery(android.widget.SearchView)=>com.example.d.movie_app.ui.search.SearchPresenter.getResultsBasedOnQuery(android.support.v7.widget.SearchView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8873/buggy-version/app.src.main.java.com.example.d.movie_app.ui.search.SearchActivity.java", "BodyUseAPI": [], "Fixed commit": "1b25b035d25a098cd57c0dc40f62c2f17147963b", "Url": "https://api.github.com/repos/Darnell10/Movie_App", "Date": "2018-08-31T21:53:03Z"},
{"Line": "63=>63", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.SearchView.setMaxWidth(int)=>android.support.v7.widget.SearchView.setMaxWidth(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8873/buggy-version/app.src.main.java.com.example.d.movie_app.ui.search.SearchActivity.java", "BodyUseAPI": [], "Fixed commit": "1b25b035d25a098cd57c0dc40f62c2f17147963b", "Url": "https://api.github.com/repos/Darnell10/Movie_App", "Date": "2018-08-31T21:53:03Z"},
{"Line": "65=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.SearchView.setQueryHint(java.lang.String)=>android.support.v7.widget.SearchView.setQueryHint(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8873/buggy-version/app.src.main.java.com.example.d.movie_app.ui.search.SearchActivity.java", "BodyUseAPI": [], "Fixed commit": "1b25b035d25a098cd57c0dc40f62c2f17147963b", "Url": "https://api.github.com/repos/Darnell10/Movie_App", "Date": "2018-08-31T21:53:03Z"},
{"Line": "302=>304", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "object.InSpecialist.setSpcID(java.lang.String)=>object.InSpecialist.getRecord(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4302/buggy-version/src.view.JFAdminSpecialist.java", "BodyUseAPI": [], "Fixed commit": "4bcbba7a923f703cce53ff5bf14776fee0d063d0", "Url": "https://api.github.com/repos/dhadotid/Double-R-Clinic--Client-", "Date": "2018-03-27T02:46:01Z"},
{"Line": "557=>557", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.deidentifier.arx.framework.data.DataAggregationInformation.getSubsetInstance()=>org.deidentifier.arx.framework.data.DataAggregationInformation.clone()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3139/buggy-version/src.main.org.deidentifier.arx.framework.data.DataManager.java", "BodyUseAPI": [], "Fixed commit": "d7c69674c8ef7fdcb00f2ebe08194017f249da8e", "Url": "https://api.github.com/repos/eicherj/arx", "Date": "2018-06-08T15:31:08Z"},
{"Line": "12=>13", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "neighbors[0].getPBest()=>neighbors[0].getPBestValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6749/buggy-version/src.main.java.Neighborhood.java", "BodyUseAPI": [], "Fixed commit": "2013255bf8056fd743618ddf22a0df8575ef8f98", "Url": "https://api.github.com/repos/aweinber/pso-lab", "Date": "2018-10-18T00:07:29Z"},
{"Line": "23=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "neighbors[i].getPBest()=>neighbors[i].getPBestValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6749/buggy-version/src.main.java.Neighborhood.java", "BodyUseAPI": [], "Fixed commit": "2013255bf8056fd743618ddf22a0df8575ef8f98", "Url": "https://api.github.com/repos/aweinber/pso-lab", "Date": "2018-10-18T00:07:29Z"},
{"Line": "24=>20", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "neighbors[i].getPBest()=>neighbors[i].getPBestValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6749/buggy-version/src.main.java.Neighborhood.java", "BodyUseAPI": [], "Fixed commit": "2013255bf8056fd743618ddf22a0df8575ef8f98", "Url": "https://api.github.com/repos/aweinber/pso-lab", "Date": "2018-10-18T00:07:29Z"},
{"Line": "254=>254", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "at.hgz.picturetrainer.DictionaryListActivity.getExternalFilesDir(<nulltype>)=>at.hgz.picturetrainer.ImportActivity.getSDCardDir(at.hgz.picturetrainer.DictionaryListActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4943/buggy-version/app.src.main.java.at.hgz.picturetrainer.DictionaryListActivity.java", "BodyUseAPI": [], "Fixed commit": "067fcfb975bc070c67f5a01e6fa6a10a43cbc92f", "Url": "https://api.github.com/repos/hgzojer/picturetrainer", "Date": "2018-10-20T19:41:55Z"},
{"Line": "59=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "at.hgz.picturetrainer.ImportActivity.getExternalFilesDir(<nulltype>)=>at.hgz.picturetrainer.ImportActivity.getSDCardDir(at.hgz.picturetrainer.ImportActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4943/buggy-version/app.src.main.java.at.hgz.picturetrainer.ImportActivity.java", "BodyUseAPI": [], "Fixed commit": "067fcfb975bc070c67f5a01e6fa6a10a43cbc92f", "Url": "https://api.github.com/repos/hgzojer/picturetrainer", "Date": "2018-10-20T19:41:55Z"},
{"Line": "23=>22", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.content.Context.getSystemService(Context.CONNECTIVITY_SERVICE)=>org.eyeseetea.malariacare.data.net.ConnectivityManager.getConnectivityType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9204/buggy-version/app.src.main.java.org.eyeseetea.malariacare.data.net.ConnectivityManager.java", "BodyUseAPI": [], "Fixed commit": "c74e84d883f22953b5866fc7389c8a49a2071401", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-09-20T09:06:49Z"},
{"Line": "167=>167", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.ProgressBar.setVisibility(View.VISIBLE)=>android.widget.RelativeLayout.setVisibility(View.VISIBLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8426/buggy-version/app.src.main.java.com.mricomat.marvelcomicguide.ui.character.adapter.CharacterViewFragment.java", "BodyUseAPI": [], "Fixed commit": "b49b920bee228a2e65c1964224402d33df61b0e4", "Url": "https://api.github.com/repos/mricomat/Android_MarvelComicGuide", "Date": "2018-05-24T07:07:32Z"},
{"Line": "174=>174", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.ProgressBar.setVisibility(View.GONE)=>android.widget.RelativeLayout.setVisibility(View.GONE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8426/buggy-version/app.src.main.java.com.mricomat.marvelcomicguide.ui.character.adapter.CharacterViewFragment.java", "BodyUseAPI": [], "Fixed commit": "b49b920bee228a2e65c1964224402d33df61b0e4", "Url": "https://api.github.com/repos/mricomat/Android_MarvelComicGuide", "Date": "2018-05-24T07:07:32Z"},
{"Line": "77=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ar.edu.jdynalloy.binding.symboltable.SymbolTable.setJavaArithmetic(ar.edu.taco.TacoConfigurator.getInstance().getUseJavaArithmetic())=>ar.edu.jdynalloy.binding.symboltable.SymbolTable.setJavaArithmetic(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/356/buggy-version/src.ar.edu.taco.engine.JDynAlloyParsingStage.java", "BodyUseAPI": [], "Fixed commit": "edf6892a07c19beb1a0cfbc068a59926011cf139", "Url": "https://api.github.com/repos/zeminlu/comitaco", "Date": "2018-06-15T17:30:16Z"},
{"Line": "119=>120", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ar.edu.jdynalloy.relevancy.RelevancyAnalysisManager.process(java.util.List<ar.edu.jdynalloy.ast.JDynAlloyModule>,ar.edu.jdynalloy.xlator.JDynAlloyBinding,tacoConfigurator.getUseJavaArithmetic())=>ar.edu.jdynalloy.relevancy.RelevancyAnalysisManager.process(java.util.List<ar.edu.jdynalloy.ast.JDynAlloyModule>,ar.edu.jdynalloy.xlator.JDynAlloyBinding,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/356/buggy-version/src.ar.edu.taco.engine.JDynAlloyStage.java", "BodyUseAPI": [], "Fixed commit": "edf6892a07c19beb1a0cfbc068a59926011cf139", "Url": "https://api.github.com/repos/zeminlu/comitaco", "Date": "2018-06-15T17:30:16Z"},
{"Line": "87=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "io.thedocs.soyuz.err.Err.ErrBuilder<V>.code(io.thedocs.soyuz.err.Err.Code)=>io.thedocs.soyuz.err.Err.ErrBuilder<V>.message(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2101/buggy-version/soyuz-err.src.main.java.io.thedocs.soyuz.err.Err.java", "BodyUseAPI": [], "Fixed commit": "1beed3b57dc71a68398a85f05153fdf89cfedc33", "Url": "https://api.github.com/repos/fedotxxl/soyuz-other", "Date": "2018-04-15T09:13:57Z"},
{"Line": "106=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.amyhuyen.energizer.models.Nonprofit(email, name, phone, userID, userType, latLong, city, description)=>new com.amyhuyen.energizer.models.Nonprofit(email, name, phone, userID, userType, latLong, address, description)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9523/buggy-version/app.src.main.java.com.amyhuyen.energizer.NpoRegActivity.java", "BodyUseAPI": [], "Fixed commit": "02ad89b366ef1794ea63a4375da360b51d2db26b", "Url": "https://api.github.com/repos/TheBatteries/Energizer", "Date": "2018-07-26T19:41:59Z"},
{"Line": "8=>8", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Author.getBooks()=>Author.publishedBooks()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2507/buggy-version/src.Main.java", "BodyUseAPI": [], "Fixed commit": "def35c90961113ff3c5b9c892f4760063335f404", "Url": "https://api.github.com/repos/Kelleyc718/annotations-exercise", "Date": "2018-03-09T16:23:57Z"},
{"Line": "417=>417", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.protocol.base.version.ProtocolContainer.getVersion()=>io.nuls.protocol.storage.po.ProtocolTempInfoPo.getVersion()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7580/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.process.NulsProtocolProcess.java", "BodyUseAPI": [], "Fixed commit": "5729bbfffb4966ef1cc15f988d6ea7430a1bebe3", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-09-16T06:17:02Z"},
{"Line": "544=>544", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.DataOutputStream.writeShort(lineNumberInfoEntries.length)=>java.io.DataOutputStream.writeInt(lineNumberInfoEntries.length)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4188/buggy-version/compiler.ballerina-lang.src.main.java.org.wso2.ballerinalang.programfile.PackageInfoWriter.java", "BodyUseAPI": [], "Fixed commit": "53130ce9e0881bf62292966307101650b90e9795", "Url": "https://api.github.com/repos/keizer619/ballerina", "Date": "2018-08-09T12:18:38Z"},
{"Line": "80=>79", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.simiacryptus.util.io.CompressionUtil.decodeLZ(byte[])=>com.simiacryptus.text.CompressionUtil.decodeLZ(byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3137/buggy-version/src.main.java.com.simiacryptus.text.LanguageModel.java", "BodyUseAPI": [], "Fixed commit": "a0998420dd547b70c063a9483ba5fb6310fed405", "Url": "https://api.github.com/repos/SimiaCryptus/CharacterTrie", "Date": "2018-08-23T07:48:30Z"},
{"Line": "80=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.simiacryptus.util.io.CompressionUtil.decodeLZ(byte[])=>com.simiacryptus.text.CompressionUtil.decodeLZ(byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3137/buggy-version/src.main.java.com.simiacryptus.text.LanguageModel.java", "BodyUseAPI": [], "Fixed commit": "a0998420dd547b70c063a9483ba5fb6310fed405", "Url": "https://api.github.com/repos/SimiaCryptus/CharacterTrie", "Date": "2018-08-23T07:48:30Z"},
{"Line": "403=>504", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8729/buggy-version/app.src.main.java.com.heliam1.HowToBeFit.ui.ExerciseSets.ExerciseSetsActivity.java", "BodyUseAPI": [], "Fixed commit": "c07a6ab23cd77e9a76d41a8e1f3d55471fce9321", "Url": "https://api.github.com/repos/heliam1/howtobefit", "Date": "2018-06-13T09:58:09Z"},
{"Line": "307=>385", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.LinearLayout.addView(android.view.View)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8729/buggy-version/app.src.main.java.com.heliam1.HowToBeFit.ui.ExerciseSets.ExerciseSetsActivity.java", "BodyUseAPI": [], "Fixed commit": "c07a6ab23cd77e9a76d41a8e1f3d55471fce9321", "Url": "https://api.github.com/repos/heliam1/howtobefit", "Date": "2018-06-13T09:58:09Z"},
{"Line": "307=>388", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.LinearLayout.addView(android.view.View)=>com.heliam1.HowToBeFit.ui.ExerciseSets.ExerciseSetsPresenter.saveExerciseSetsToRepository()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8729/buggy-version/app.src.main.java.com.heliam1.HowToBeFit.ui.ExerciseSets.ExerciseSetsActivity.java", "BodyUseAPI": [], "Fixed commit": "c07a6ab23cd77e9a76d41a8e1f3d55471fce9321", "Url": "https://api.github.com/repos/heliam1/howtobefit", "Date": "2018-06-13T09:58:09Z"},
{"Line": "410=>511", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8729/buggy-version/app.src.main.java.com.heliam1.HowToBeFit.ui.ExerciseSets.ExerciseSetsActivity.java", "BodyUseAPI": [], "Fixed commit": "c07a6ab23cd77e9a76d41a8e1f3d55471fce9321", "Url": "https://api.github.com/repos/heliam1/howtobefit", "Date": "2018-06-13T09:58:09Z"},
{"Line": "396=>497", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8729/buggy-version/app.src.main.java.com.heliam1.HowToBeFit.ui.ExerciseSets.ExerciseSetsActivity.java", "BodyUseAPI": [], "Fixed commit": "c07a6ab23cd77e9a76d41a8e1f3d55471fce9321", "Url": "https://api.github.com/repos/heliam1/howtobefit", "Date": "2018-06-13T09:58:09Z"},
{"Line": "91=>82", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "mAuth.signInWithEmailAndPassword(email, password).addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener<com.google.firebase.auth.AuthResult>)=>mAuth.signInWithEmailAndPassword(email, password).addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener<com.google.firebase.auth.AuthResult>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7488/buggy-version/app.src.main.java.com.app.muhammadgamal.swapy.SignInActivity.java", "BodyUseAPI": [], "Fixed commit": "ebf61eb6717515be589dcf1d07d550791df3646b", "Url": "https://api.github.com/repos/swapyapp/Swapy3", "Date": "2018-10-09T23:56:00Z"},
{"Line": "47=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.TextView.setOnClickListener(android.view.View.OnClickListener)=>android.widget.TextView.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7488/buggy-version/app.src.main.java.com.app.muhammadgamal.swapy.SignInActivity.java", "BodyUseAPI": [], "Fixed commit": "ebf61eb6717515be589dcf1d07d550791df3646b", "Url": "https://api.github.com/repos/swapyapp/Swapy3", "Date": "2018-10-09T23:56:00Z"},
{"Line": "111=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.firebase.auth.FirebaseAuth.addAuthStateListener(FirebaseAuth.AuthStateListener)=>com.app.muhammadgamal.swapy.SignInActivity.finish()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7488/buggy-version/app.src.main.java.com.app.muhammadgamal.swapy.SignInActivity.java", "BodyUseAPI": [], "Fixed commit": "ebf61eb6717515be589dcf1d07d550791df3646b", "Url": "https://api.github.com/repos/swapyapp/Swapy3", "Date": "2018-10-09T23:56:00Z"},
{"Line": "38=>105", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.app.muhammadgamal.swapy.SignInActivity.1.startActivity(android.content.Intent)=>android.content.Intent.setFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7488/buggy-version/app.src.main.java.com.app.muhammadgamal.swapy.SignInActivity.java", "BodyUseAPI": [], "Fixed commit": "ebf61eb6717515be589dcf1d07d550791df3646b", "Url": "https://api.github.com/repos/swapyapp/Swapy3", "Date": "2018-10-09T23:56:00Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[protected] onCreate(android.os.Bundle)=>[protected] onCreate(android.os.Bundle)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7488/buggy-version/app.src.main.java.com.app.muhammadgamal.swapy.SignInActivity.java", "BodyUseAPI": [], "Fixed commit": "ebf61eb6717515be589dcf1d07d550791df3646b", "Url": "https://api.github.com/repos/swapyapp/Swapy3", "Date": "2018-10-09T23:56:00Z"},
{"Line": "214=>223", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.bluetooth.BluetoothGattServer.sendResponse(android.bluetooth.BluetoothDevice,int,int,int,characteristic.getValue())=>android.bluetooth.BluetoothGattServer.sendResponse(android.bluetooth.BluetoothDevice,int,BluetoothGatt.GATT_SUCCESS,int,byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3260/buggy-version/app.src.main.java.com.example.marco.bluenet_01.BLE_Comm.BleWriter.java", "BodyUseAPI": [], "Fixed commit": "000fbf08703751afe59853d106d69a272239c871", "Url": "https://api.github.com/repos/jlinear/DispatchApp", "Date": "2018-06-05T19:48:07Z"},
{"Line": "110=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.bluetooth.BluetoothGattCharacteristic.setValue(java.lang.String)=>android.bluetooth.BluetoothGattCharacteristic.setValue(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3260/buggy-version/app.src.main.java.com.example.marco.bluenet_01.BLE_Comm.BleWriter.java", "BodyUseAPI": [], "Fixed commit": "000fbf08703751afe59853d106d69a272239c871", "Url": "https://api.github.com/repos/jlinear/DispatchApp", "Date": "2018-06-05T19:48:07Z"},
{"Line": "65=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "de.chocoquic.ltass.entity.TimelineUserRole.setTimelineUser(<nulltype>)=>de.chocoquic.ltass.entity.TimelineUserRole.setUser(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3314/buggy-version/tlaas-ee.src.main.java.de.chocoquic.ltass.entity.User.java", "BodyUseAPI": [], "Fixed commit": "ff66d6b9c64c5146adb170a08d51e49d7326e5d5", "Url": "https://api.github.com/repos/alexbrucki/tlaas", "Date": "2018-07-08T12:44:52Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "de.chocoquic.ltass.entity.TimelineUserRole.setTimelineUser(de.chocoquic.ltass.entity.User)=>de.chocoquic.ltass.entity.TimelineUserRole.setUser(de.chocoquic.ltass.entity.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3314/buggy-version/tlaas-ee.src.main.java.de.chocoquic.ltass.entity.User.java", "BodyUseAPI": [], "Fixed commit": "ff66d6b9c64c5146adb170a08d51e49d7326e5d5", "Url": "https://api.github.com/repos/alexbrucki/tlaas", "Date": "2018-07-08T12:44:52Z"},
{"Line": "211=>211", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.slf4j.Logger.debug(java.lang.String)=>org.slf4j.Logger.debug((((\"SUBSCRIBING EVENT CHANNELS [\" + (eventSubscriptions.size())) + \"] FOR ADAPTER \") + (toSimpleString())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6384/buggy-version/agent-service.src.main.java.sk.intersoft.vicinity.agent.service.config.AdapterConfig.java", "BodyUseAPI": [], "Fixed commit": "8dc58c09214ba441740bc9cd5f41673e7c9e4980", "Url": "https://api.github.com/repos/vicinityh2020/vicinity-agent", "Date": "2018-08-13T11:46:44Z"},
{"Line": "184=>184", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.slf4j.Logger.debug(java.lang.String)=>org.slf4j.Logger.debug((((\"OPENING EVENT CHANNELS [\" + (eventChannels.size())) + \"] FOR ADAPTER \") + (toSimpleString())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6384/buggy-version/agent-service.src.main.java.sk.intersoft.vicinity.agent.service.config.AdapterConfig.java", "BodyUseAPI": [], "Fixed commit": "8dc58c09214ba441740bc9cd5f41673e7c9e4980", "Url": "https://api.github.com/repos/vicinityh2020/vicinity-agent", "Date": "2018-08-13T11:46:44Z"},
{"Line": "42=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "sk.intersoft.vicinity.agent.clients.GatewayAPIClient.put(java.lang.String,java.lang.String,thing.oid,thing.password)=>sk.intersoft.vicinity.agent.clients.GatewayAPIClient.post(java.lang.String,java.lang.String,thing.oid,thing.password)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6384/buggy-version/agent-service.src.main.java.sk.intersoft.vicinity.agent.service.resource.RemoteObjectActionResource.java", "BodyUseAPI": [], "Fixed commit": "8dc58c09214ba441740bc9cd5f41673e7c9e4980", "Url": "https://api.github.com/repos/vicinityh2020/vicinity-agent", "Date": "2018-08-13T11:46:44Z"},
{"Line": "64=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "staff.dekaneh.brain_socket.com.dekanehstaff.adapter.OrdersAdapter.OnOrderClickListener.onEditClick(staff.dekaneh.brain_socket.com.dekanehstaff.network.model.Order,orderViewHolder.itemView)=>staff.dekaneh.brain_socket.com.dekanehstaff.adapter.OrdersAdapter.OnOrderClickListener.onEditClick(staff.dekaneh.brain_socket.com.dekanehstaff.network.model.Order,android.view.View)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2316/buggy-version/app.src.main.java.staff.dekaneh.brain_socket.com.dekanehstaff.adapter.OrdersAdapter.java", "BodyUseAPI": [], "Fixed commit": "3a94d3b2d8cbd8818b93718fd6fbf6666e69fb6c", "Url": "https://api.github.com/repos/molhamstein/DekanehStaffAndroidApp", "Date": "2018-10-24T12:33:12Z"},
{"Line": "104=>108", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.springframework.ui.Model.addAttribute(java.lang.String,this.unitOfMeasureService.findAllUnitOfMeasureCommands())=>this.unitOfMeasureService.findAllUnitOfMeasureCommands().collectList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7672/buggy-version/spring5-recipe-app.src.main.java.guru.springframework.controllers.IngredientController.java", "BodyUseAPI": [], "Fixed commit": "c6a8fc71d44dacf3acb8e4edf89c83d9b18da084", "Url": "https://api.github.com/repos/yulikexuan/springguru", "Date": "2018-01-29T20:04:13Z"},
{"Line": "239=>239", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.google.gwt.dom.client.Element.getStyle()=>com.google.gwt.dom.client.Element.getPropertyInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9341/buggy-version/appinventor.appengine.src.com.google.appinventor.client.explorer.commands.MiniProgressBar.java", "BodyUseAPI": [], "Fixed commit": "8da6b87b0cd37df07c2da0fa402d3002c04d2fab", "Url": "https://api.github.com/repos/ColinTree/appinventor-sources", "Date": "2018-10-11T07:40:00Z"},
{"Line": "251=>250", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "getElement().getStyle()=>getElement().getPropertyInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9341/buggy-version/appinventor.appengine.src.com.google.appinventor.client.explorer.commands.MiniProgressBar.java", "BodyUseAPI": [], "Fixed commit": "8da6b87b0cd37df07c2da0fa402d3002c04d2fab", "Url": "https://api.github.com/repos/ColinTree/appinventor-sources", "Date": "2018-10-11T07:40:00Z"},
{"Line": "250=>251", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "getElement().getStyle()=>getElement().getPropertyInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9341/buggy-version/appinventor.appengine.src.com.google.appinventor.client.explorer.commands.MiniProgressBar.java", "BodyUseAPI": [], "Fixed commit": "8da6b87b0cd37df07c2da0fa402d3002c04d2fab", "Url": "https://api.github.com/repos/ColinTree/appinventor-sources", "Date": "2018-10-11T07:40:00Z"},
{"Line": "198=>198", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.elasticsearch.index.query.QueryBuilders.boolQuery().filter(org.elasticsearch.index.query.QueryBuilders.rangeQuery(\"meetingDate\").from(searchRequest.getFrom()).to(searchRequest.getTo()))=>org.elasticsearch.index.query.BoolQueryBuilder.filter(org.elasticsearch.index.query.QueryBuilders.rangeQuery(\"meetingDate\").from(searchRequest.getFrom()).to(searchRequest.getTo()))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7543/buggy-version/egov.egov-council.src.main.java.org.egov.council.service.es.CouncilMeetingIndexService.java", "BodyUseAPI": [], "Fixed commit": "533ab875670d022c8654df865629cb149ab699a7", "Url": "https://api.github.com/repos/egovernments/egov-smartcity-suite", "Date": "2018-01-16T10:34:56Z"},
{"Line": "9=>9", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.indexOf(java.lang.String)=>java.lang.String.lastIndexOf(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/681/buggy-version/authid-edge-agent.src.main.java.ca.onepair.edgeagent.utils.Utils.java", "BodyUseAPI": [], "Fixed commit": "508c9f17b6fc32a5be153e778476b41351752bdc", "Url": "https://api.github.com/repos/OnePair/authid-edge-agent", "Date": "2018-09-05T02:22:10Z"},
{"Line": "82=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ch.epfl.sweng.swenggolf.profile.EditProfileActivity.getChangePPListener()=>ch.epfl.sweng.swenggolf.profile.EditProfileActivity.getChangePpListener()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/227/buggy-version/app.src.main.java.ch.epfl.sweng.swenggolf.profile.EditProfileActivity.java", "BodyUseAPI": [], "Fixed commit": "377525562f706502085b3b72067fe0fa1b69bbc4", "Url": "https://api.github.com/repos/SwengGolfTeam/Sweng_Golf", "Date": "2018-10-29T14:29:31Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.error(java.lang.String,java.lang.Exception)=>org.slf4j.Logger.error(java.lang.String,java.util.concurrent.ExecutionException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4347/buggy-version/src.main.java.org.tango.web.server.TangoProxyPool.java", "BodyUseAPI": [], "Fixed commit": "eb48db155c137ad0e93ab5b1133763b8062c39f1", "Url": "https://api.github.com/repos/Ingvord/mtangorest.server", "Date": "2018-06-29T10:18:58Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Drawing.drawCircle(double,double,double)=>Drawing.drawCircle(int,int,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8306/buggy-version/src.UI.java", "BodyUseAPI": [], "Fixed commit": "c2f18e390b99c41612b54b3fd934cea1f9437d39", "Url": "https://api.github.com/repos/Tomay0/RobotArm", "Date": "2018-10-13T10:00:29Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Drawing.drawCircle(double,double,double)=>Drawing.drawCircle(int,int,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8306/buggy-version/src.UI.java", "BodyUseAPI": [], "Fixed commit": "c2f18e390b99c41612b54b3fd934cea1f9437d39", "Url": "https://api.github.com/repos/Tomay0/RobotArm", "Date": "2018-10-13T10:00:29Z"},
{"Line": "105=>105", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.sunbird.models.course.batch.CourseBatch.init(java.lang.String)=>org.sunbird.models.course.batch.CourseBatch.initCount()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5869/buggy-version/actors.common.src.main.java.org.sunbird.learner.actors.coursebatch.CourseBatchManagementActor.java", "BodyUseAPI": [], "Fixed commit": "231b5f03bf7d15a09d600436f7d9db358243857e", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-09-25T12:43:28Z"},
{"Line": "112=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.sunbird.models.course.batch.CourseBatch.setContentDetails(java.util.Map<java.lang.String, java.lang.Object>)=>org.sunbird.models.course.batch.CourseBatch.setContentDetails(java.util.Map<java.lang.String, java.lang.Object>,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5869/buggy-version/actors.common.src.main.java.org.sunbird.learner.actors.coursebatch.CourseBatchManagementActor.java", "BodyUseAPI": [], "Fixed commit": "231b5f03bf7d15a09d600436f7d9db358243857e", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-09-25T12:43:28Z"},
{"Line": "388=>387", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "uk.co.senab.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)=>com.github.chrisbanes.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3017/buggy-version/src.com.owncloud.android.ui.activity.CropActivity.java", "BodyUseAPI": [], "Fixed commit": "2e645ba5624a9f4408b1dd51959a0bf60ead7f0e", "Url": "https://api.github.com/repos/sd1998/android", "Date": "2018-03-10T09:58:14Z"},
{"Line": "162=>162", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.dell.cpsd.includes.BondedNetworkDevice.setDevice(java.lang.String)=>com.dell.cpsd.includes.BondedNetworkDevice.setName(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8840/buggy-version/dne-paqx.src.main.java.com.dell.cpsd.paqx.dne.transformers.HostToInstallRhelRequestTransformer.java", "BodyUseAPI": [], "Fixed commit": "3a8ed3ee7e25dcbadd1dd34e67325a25db73d26e", "Url": "https://api.github.com/repos/sushilrai/dne-paqx-parent", "Date": "2018-01-25T14:57:24Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "server.Item.toString()=>Server.Item.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3684/buggy-version/client.client.ItemRenderer.java", "BodyUseAPI": [], "Fixed commit": "86b4b0dcb615dab9a2217a0eef4ca16ee9375d7a", "Url": "https://api.github.com/repos/scottlyoung/object_oriented_project", "Date": "2018-04-25T15:59:02Z"},
{"Line": "150=>150", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.RelativeLayout.removeAllViews()=>android.widget.RelativeLayout.removeView(android.widget.TableLayout)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4593/buggy-version/app.src.main.java.com.parkrun.main.fragments.myparkrun.MyParkrunNewsFragment.java", "BodyUseAPI": [], "Fixed commit": "025bdbfbd6ee6ed182768f32141e0d238799b0c6", "Url": "https://api.github.com/repos/chrissiemcc/parkrun", "Date": "2018-05-27T20:31:34Z"},
{"Line": "525=>523", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.RelativeLayout.removeAllViews()=>android.widget.RelativeLayout.removeView(android.widget.TableLayout)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4593/buggy-version/app.src.main.java.com.parkrun.main.fragments.myparkrun.MyParkrunNewsFragment.java", "BodyUseAPI": [], "Fixed commit": "025bdbfbd6ee6ed182768f32141e0d238799b0c6", "Url": "https://api.github.com/repos/chrissiemcc/parkrun", "Date": "2018-05-27T20:31:34Z"},
{"Line": "41=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.Toast.makeText(com.gpaschos_aikmpel.hotelbeaconapplication.activities.CheckInActivity,java.lang.String,Toast.LENGTH_LONG)=>com.gpaschos_aikmpel.hotelbeaconapplication.database.RoomDB.getInstance(com.gpaschos_aikmpel.hotelbeaconapplication.activities.CheckInActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4546/buggy-version/app.src.main.java.com.gpaschos_aikmpel.hotelbeaconapplication.activities.CheckInActivity.java", "BodyUseAPI": [], "Fixed commit": "e42d388b7f31a476fa4dbe64e0b86106bec0e7fe", "Url": "https://api.github.com/repos/ntelalis/HotelBeaconApplication", "Date": "2018-05-15T09:49:39Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.sql.PreparedStatement.setLong(int,long)=>java.sql.PreparedStatement.setString(int,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5189/buggy-version/modules.apps.dynamic-data-mapping.dynamic-data-mapping-service.src.main.java.com.liferay.dynamic.data.mapping.internal.upgrade.v2_0_3.UpgradeDDMFormInstanceEntries.java", "BodyUseAPI": [], "Fixed commit": "953b356a8da0fe583be3995bc08e399691e58e9c", "Url": "https://api.github.com/repos/drewbrokke/liferay-portal", "Date": "2018-07-02T18:24:47Z"},
{"Line": "58=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.sql.PreparedStatement.setString(int,java.lang.String)=>java.sql.PreparedStatement.setLong(int,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5189/buggy-version/modules.apps.dynamic-data-mapping.dynamic-data-mapping-service.src.main.java.com.liferay.dynamic.data.mapping.internal.upgrade.v2_0_3.UpgradeDDMFormInstanceEntries.java", "BodyUseAPI": [], "Fixed commit": "953b356a8da0fe583be3995bc08e399691e58e9c", "Url": "https://api.github.com/repos/drewbrokke/liferay-portal", "Date": "2018-07-02T18:24:47Z"},
{"Line": "22=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "PlayerForTeam05(int,boolean)=>PlayerForTeam05(int,boolean,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8223/buggy-version/src.main.java.PlayerForTeam05.java", "BodyUseAPI": [], "Fixed commit": "d908b411fe6b6edb57d56fd7029eb54aaafbc06c", "Url": "https://api.github.com/repos/KilnOfTheSecondFlame/connect-4_bot", "Date": "2018-05-03T11:39:55Z"},
{"Line": "22=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "PlayerForTeam05(int,boolean)=>PlayerForTeam05(int,boolean,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8223/buggy-version/src.main.java.PlayerForTeam05.java", "BodyUseAPI": [], "Fixed commit": "d908b411fe6b6edb57d56fd7029eb54aaafbc06c", "Url": "https://api.github.com/repos/KilnOfTheSecondFlame/connect-4_bot", "Date": "2018-05-03T11:39:55Z"},
{"Line": "41=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.ImageView.setImageResource(int)=>android.widget.ImageView.setImageDrawable(android.graphics.drawable.Drawable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5615/buggy-version/awesometoast.src.main.java.com.fendonus.awesometoast.AwesomeToast.java", "BodyUseAPI": [], "Fixed commit": "6f56aeb92ac25bc5cd1decfdf7bbf9bc7b3d4636", "Url": "https://api.github.com/repos/ariful06/Awesome-Toast", "Date": "2018-10-21T19:58:23Z"},
{"Line": "802=>802", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "ch.srg.mediaplayer.SRGMediaPlayerController.prepareInternal(android.net.Uri,int)=>ch.srg.mediaplayer.SRGMediaPlayerController.prepareInternal(android.net.Uri,java.lang.Long,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3071/buggy-version/srgmediaplayer.src.main.java.ch.srg.mediaplayer.SRGMediaPlayerController.java", "BodyUseAPI": [], "Fixed commit": "ca788e08a3abd4d49efaa16a2f6a494ca205c49d", "Url": "https://api.github.com/repos/SRGSSR/SRGMediaPlayer-Android", "Date": "2018-08-20T12:59:28Z"},
{"Line": "191=>193", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "water.fvec.Chunk.at8(int)=>java.lang.Math.max(long,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4780/buggy-version/h2o-core.src.main.java.water.rapids.RadixOrder.java", "BodyUseAPI": [], "Fixed commit": "f4637754fa531a245ba4706b3d057004bf825097", "Url": "https://api.github.com/repos/h2oai/h2o-3", "Date": "2018-06-06T01:44:44Z"},
{"Line": "21=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.springframework.data.elasticsearch.repository.ElasticsearchRepository<T, java.lang.String>.delete(T)=>org.springframework.data.elasticsearch.repository.ElasticsearchRepository<T, java.lang.String>.delete(T)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6324/buggy-version/back.src.main.java.org.crunchytorch.coddy.application.service.AbstractService.java", "BodyUseAPI": [], "Fixed commit": "bdf2c9cf21fe2397e852f66cdfdbeeec6fabc1c3", "Url": "https://api.github.com/repos/Crunchy-Torch/coddy", "Date": "2018-02-17T18:40:44Z"},
{"Line": "17=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.springframework.data.elasticsearch.repository.ElasticsearchRepository<T, java.lang.String>.save(T)=>org.springframework.data.elasticsearch.repository.ElasticsearchRepository<T, java.lang.String>.save(T)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6324/buggy-version/back.src.main.java.org.crunchytorch.coddy.application.service.AbstractService.java", "BodyUseAPI": [], "Fixed commit": "bdf2c9cf21fe2397e852f66cdfdbeeec6fabc1c3", "Url": "https://api.github.com/repos/Crunchy-Torch/coddy", "Date": "2018-02-17T18:40:44Z"},
{"Line": "96=>100", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "helmet.getItem().setMaxDamage(int)=>net.minecraft.nbt.NBTTagCompound.setBoolean(java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2236/buggy-version/src.main.java.mineguard.entity.EntityBodyguard.java", "BodyUseAPI": [], "Fixed commit": "b8218054cd209fec797873fc543eec4ca10e60c2", "Url": "https://api.github.com/repos/Tumlinh/Mineguard", "Date": "2018-09-21T13:10:01Z"},
{"Line": "35=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mongodb.async.client.MongoClientSettings.builder().codecRegistry(com.mongodb.MongoClient.getDefaultCodecRegistry()).socketSettings(com.mongodb.connection.SocketSettings)=>com.mongodb.async.client.MongoClientSettings.builder().codecRegistry(com.mongodb.MongoClient.getDefaultCodecRegistry()).clusterSettings(com.mongodb.connection.ClusterSettings)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4454/buggy-version/src.main.java.pl.ark.chr.timelyzer.config.MongoConfig.java", "BodyUseAPI": [], "Fixed commit": "4b4165c27c0ca8226ee36fc5b7830989d6630ace", "Url": "https://api.github.com/repos/arekchrobot/Timelyzer", "Date": "2018-02-28T16:22:04Z"},
{"Line": "35=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mongodb.async.client.MongoClientSettings.builder().codecRegistry(com.mongodb.MongoClient.getDefaultCodecRegistry()).socketSettings(com.mongodb.connection.SocketSettings)=>com.mongodb.async.client.MongoClientSettings.builder().codecRegistry(com.mongodb.MongoClient.getDefaultCodecRegistry()).clusterSettings(com.mongodb.connection.ClusterSettings)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4454/buggy-version/src.main.java.pl.ark.chr.timelyzer.config.MongoConfig.java", "BodyUseAPI": [], "Fixed commit": "4b4165c27c0ca8226ee36fc5b7830989d6630ace", "Url": "https://api.github.com/repos/arekchrobot/Timelyzer", "Date": "2018-02-28T16:22:04Z"},
{"Line": "35=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mongodb.async.client.MongoClientSettings.builder().codecRegistry(com.mongodb.MongoClient.getDefaultCodecRegistry()).socketSettings(socketSettings).connectionPoolSettings(com.mongodb.connection.ConnectionPoolSettings)=>com.mongodb.async.client.MongoClientSettings.builder().codecRegistry(com.mongodb.MongoClient.getDefaultCodecRegistry()).clusterSettings(clusterSettings).build()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4454/buggy-version/src.main.java.pl.ark.chr.timelyzer.config.MongoConfig.java", "BodyUseAPI": [], "Fixed commit": "4b4165c27c0ca8226ee36fc5b7830989d6630ace", "Url": "https://api.github.com/repos/arekchrobot/Timelyzer", "Date": "2018-02-28T16:22:04Z"},
{"Line": "63=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "gameContext.getScene().setFill(javafx.scene.paint.ImagePattern)=>gameContext.getChildren().add(javafx.scene.shape.Rectangle)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3900/buggy-version/gazeplay.src.main.java.net.gazeplay.games.bubbles.Bubble.java", "BodyUseAPI": [], "Fixed commit": "5d8c289dc497d407a1bf20c0601c5e5ed838b947", "Url": "https://api.github.com/repos/schwabdidier/GazePlay", "Date": "2018-01-27T18:28:02Z"},
{"Line": "63=>71", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "net.gazeplay.GameContext.getScene()=>net.gazeplay.GameContext.getChildren()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3900/buggy-version/gazeplay.src.main.java.net.gazeplay.games.bubbles.Bubble.java", "BodyUseAPI": [], "Fixed commit": "5d8c289dc497d407a1bf20c0601c5e5ed838b947", "Url": "https://api.github.com/repos/schwabdidier/GazePlay", "Date": "2018-01-27T18:28:02Z"},
{"Line": "169=>169", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.hibernate.query.Query<com.softserve.mosquito.entities.Task>.list()=>org.hibernate.query.Query<com.softserve.mosquito.entities.Task>.getResultList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/732/buggy-version/mosquito-repo-impl.src.main.java.com.softserve.mosquito.repo.impl.TaskRepoImpl.java", "BodyUseAPI": [], "Fixed commit": "fcb5ff8ce111bbade7ded3611451db343dab49b7", "Url": "https://api.github.com/repos/IF-086-Java/Mosquito", "Date": "2018-07-05T17:30:10Z"},
{"Line": "210=>210", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.augustana.csc285.game.AdventureGame.percentWidth(int)=>edu.augustana.csc285.game.AdventureGame.percentHeight(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3723/buggy-version/adventure-game.core.src.edu.augustana.csc285.game.MainMenuScreen.java", "BodyUseAPI": [], "Fixed commit": "4995589f7a9503148d92cb2f3bc0cf76a552e6b7", "Url": "https://api.github.com/repos/AugustanaCSC285Fall17/CurlewRepo", "Date": "2018-05-24T20:50:14Z"},
{"Line": "144=>144", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mocean.modules.Transmitter.urlEncodeUTF8(java.lang.String)=>com.mocean.modules.Transmitter.urlEncodeUTF8(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9307/buggy-version/src.com.mocean.modules.Transmitter.java", "BodyUseAPI": [], "Fixed commit": "bd603ba861c316969829c05b2d3ebaeebb123880", "Url": "https://api.github.com/repos/MoceanAPI/mocean-sdk-java", "Date": "2018-07-18T11:02:26Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mocean.modules.Transmitter.__get()=>com.mocean.modules.Transmitter.__get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9307/buggy-version/src.com.mocean.modules.Transmitter.java", "BodyUseAPI": [], "Fixed commit": "bd603ba861c316969829c05b2d3ebaeebb123880", "Url": "https://api.github.com/repos/MoceanAPI/mocean-sdk-java", "Date": "2018-07-18T11:02:26Z"},
{"Line": "39=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mocean.modules.Transmitter.__delete()=>com.mocean.modules.Transmitter.__delete()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9307/buggy-version/src.com.mocean.modules.Transmitter.java", "BodyUseAPI": [], "Fixed commit": "bd603ba861c316969829c05b2d3ebaeebb123880", "Url": "https://api.github.com/repos/MoceanAPI/mocean-sdk-java", "Date": "2018-07-18T11:02:26Z"},
{"Line": "145=>145", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mocean.modules.Transmitter.urlEncodeUTF8(java.lang.String)=>com.mocean.modules.Transmitter.urlEncodeUTF8(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9307/buggy-version/src.com.mocean.modules.Transmitter.java", "BodyUseAPI": [], "Fixed commit": "bd603ba861c316969829c05b2d3ebaeebb123880", "Url": "https://api.github.com/repos/MoceanAPI/mocean-sdk-java", "Date": "2018-07-18T11:02:26Z"},
{"Line": "80=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mocean.modules.Transmitter.urlEncodeUTF8(java.util.HashMap<java.lang.String, java.lang.String>)=>com.mocean.modules.Transmitter.urlEncodeUTF8(java.util.HashMap<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9307/buggy-version/src.com.mocean.modules.Transmitter.java", "BodyUseAPI": [], "Fixed commit": "bd603ba861c316969829c05b2d3ebaeebb123880", "Url": "https://api.github.com/repos/MoceanAPI/mocean-sdk-java", "Date": "2018-07-18T11:02:26Z"},
{"Line": "36=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mocean.modules.Transmitter.__put()=>com.mocean.modules.Transmitter.__put()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9307/buggy-version/src.com.mocean.modules.Transmitter.java", "BodyUseAPI": [], "Fixed commit": "bd603ba861c316969829c05b2d3ebaeebb123880", "Url": "https://api.github.com/repos/MoceanAPI/mocean-sdk-java", "Date": "2018-07-18T11:02:26Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mocean.modules.Transmitter.__post()=>com.mocean.modules.Transmitter.__post()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9307/buggy-version/src.com.mocean.modules.Transmitter.java", "BodyUseAPI": [], "Fixed commit": "bd603ba861c316969829c05b2d3ebaeebb123880", "Url": "https://api.github.com/repos/MoceanAPI/mocean-sdk-java", "Date": "2018-07-18T11:02:26Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mocean.modules.Transmitter.urlEncodeUTF8(java.util.HashMap<java.lang.String, java.lang.String>)=>com.mocean.modules.Transmitter.urlEncodeUTF8(java.util.HashMap<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9307/buggy-version/src.com.mocean.modules.Transmitter.java", "BodyUseAPI": [], "Fixed commit": "bd603ba861c316969829c05b2d3ebaeebb123880", "Url": "https://api.github.com/repos/MoceanAPI/mocean-sdk-java", "Date": "2018-07-18T11:02:26Z"},
{"Line": "473=>473", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "EntityType.MAJOR.getIndex()=>EntityType.COMPANY.getIndex()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1958/buggy-version/src.main.java.com.higgs.client.EntityIdClient.java", "BodyUseAPI": [], "Fixed commit": "7d0dc32d13b628a9e8a079e2f0caf198f628c7a9", "Url": "https://api.github.com/repos/shanghai-Jerry/ydgraph", "Date": "2018-07-19T09:22:28Z"},
{"Line": "473=>473", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "EntityType.MAJOR.getIndex()=>EntityType.COMPANY.getIndex()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1958/buggy-version/src.main.java.com.higgs.client.EntityIdClient.java", "BodyUseAPI": [], "Fixed commit": "7d0dc32d13b628a9e8a079e2f0caf198f628c7a9", "Url": "https://api.github.com/repos/shanghai-Jerry/ydgraph", "Date": "2018-07-19T09:22:28Z"},
{"Line": "89=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.microsoftopentechnologies.windowsazurestorage.helper.AzureCredentials.getStorageKey()=>com.microsoftopentechnologies.windowsazurestorage.helper.AzureCredentials.getPlainStorageKey()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8224/buggy-version/src.main.java.com.microsoftopentechnologies.windowsazurestorage.helper.AzureCredentialsBinding.java", "BodyUseAPI": [], "Fixed commit": "2457e6635d2a8c10b97f9f02087fbce9dacc2c0a", "Url": "https://api.github.com/repos/jenkinsci/windows-azure-storage-plugin", "Date": "2018-08-15T05:43:30Z"},
{"Line": "2111=>2112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.fossasia.pslab.communication.PacketHandler.getInt()=>org.fossasia.pslab.communication.PacketHandler.getVoltageSummation()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7733/buggy-version/app.src.main.java.org.fossasia.pslab.communication.ScienceLab.java", "BodyUseAPI": [], "Fixed commit": "0d95fc34900c0027f28ce6a092dac9d81becdd2d", "Url": "https://api.github.com/repos/abhinavraj23/pslab-android", "Date": "2018-07-13T15:50:59Z"},
{"Line": "390=>390", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "gui.TransactionTracker.4.signIn(java.lang.String,java.lang.String)=>gui.TransactionTracker.4.signIn(java.lang.String,char[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7425/buggy-version/src.gui.TransactionTracker.java", "BodyUseAPI": [], "Fixed commit": "a6df87b17d4f44c63c5eb45355e39296e57e90a6", "Url": "https://api.github.com/repos/ljamesd15/Transaction-Tracker", "Date": "2018-04-03T02:15:32Z"},
{"Line": "46=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.valueOf(java.lang.String)=>java.lang.String.trim()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2276/buggy-version/ios.ospf.src.main.java.io.frinx.cli.ospf.handler.AreaInterfaceConfigReader.java", "BodyUseAPI": [], "Fixed commit": "bda994084fe6cb6ee6d0e5052f4ef83266ee68a1", "Url": "https://api.github.com/repos/FRINXio/cli-units", "Date": "2018-03-09T09:31:35Z"},
{"Line": "89=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.time.ZonedDateTime.plusDays(int)=>java.time.ZonedDateTime.toInstant()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3800/buggy-version/src.main.java.com.shaowei.mydoctor.service.impl.custom.PdfExportServiceImplCustom.java", "BodyUseAPI": [], "Fixed commit": "9590ddcb5825f157afc5cc628b5edcac13ab43e6", "Url": "https://api.github.com/repos/Shaowei-Hu/MyDoctor", "Date": "2018-06-08T21:48:00Z"},
{"Line": "74=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.time.ZonedDateTime.plusDays(int)=>java.time.ZonedDateTime.toInstant()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3800/buggy-version/src.main.java.com.shaowei.mydoctor.service.impl.custom.PdfExportServiceImplCustom.java", "BodyUseAPI": [], "Fixed commit": "9590ddcb5825f157afc5cc628b5edcac13ab43e6", "Url": "https://api.github.com/repos/Shaowei-Hu/MyDoctor", "Date": "2018-06-08T21:48:00Z"},
{"Line": "97=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.ballerinalang.config.ConfigRegistry.getConfiguration(java.lang.String)=>org.ballerinalang.config.ConfigRegistry.getAsString(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3070/buggy-version/bvm.ballerina-logging.src.main.java.org.ballerinalang.logging.BLogManager.java", "BodyUseAPI": [], "Fixed commit": "1b88a29523a42275419fdca4bc2346b88a057a23", "Url": "https://api.github.com/repos/ayomawdb/ballerina", "Date": "2018-04-12T07:52:18Z"},
{"Line": "48=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Exception.printStackTrace()=>org.apache.log4j.Logger.warn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7327/buggy-version/Server.src.main.java.TaskManagerServer.Server.Processors.ChangeProcessor.java", "BodyUseAPI": [], "Fixed commit": "b9043d7a47f1f378caaf31f46006c350875eaafb", "Url": "https://api.github.com/repos/JavaStudentAlex/SecondLab", "Date": "2018-07-13T17:49:13Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.gluu.oxtrust.ldap.service.AuthOrganizationService.merge(org.gluu.oxtrust.model.GluuOrganization)=>org.gluu.persist.PersistenceEntryManager.merge(org.gluu.oxtrust.model.GluuOrganization)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/229/buggy-version/server.src.main.java.org.gluu.oxtrust.ldap.service.AuthOrganizationService.java", "BodyUseAPI": [], "Fixed commit": "01eeb85d6b560bc35face2fac2900604a7cdb189", "Url": "https://api.github.com/repos/GluuFederation/oxTrust", "Date": "2018-08-14T17:54:22Z"},
{"Line": "103=>103", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.gluu.persist.PersistenceEntryManager.removeWithSubtree(gluuCustomFidoDevice.getDn())=>org.gluu.persist.PersistenceEntryManager.removeRecursively(gluuCustomFidoDevice.getDn())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/229/buggy-version/server.src.main.java.org.gluu.oxtrust.ldap.service.FidoDeviceService.java", "BodyUseAPI": [], "Fixed commit": "01eeb85d6b560bc35face2fac2900604a7cdb189", "Url": "https://api.github.com/repos/GluuFederation/oxTrust", "Date": "2018-08-14T17:54:22Z"},
{"Line": "1317=>1301", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.gluu.oxtrust.action.Pattern.compile(java.lang.String)=>java.util.regex.Pattern.compile(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/229/buggy-version/server.src.main.java.org.gluu.oxtrust.action.UpdateClientAction.java", "BodyUseAPI": [], "Fixed commit": "01eeb85d6b560bc35face2fac2900604a7cdb189", "Url": "https://api.github.com/repos/GluuFederation/oxTrust", "Date": "2018-08-14T17:54:22Z"},
{"Line": "1321=>1305", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.gluu.oxtrust.action.Pattern.matcher(java.lang.String)=>java.util.regex.Pattern.matcher(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/229/buggy-version/server.src.main.java.org.gluu.oxtrust.action.UpdateClientAction.java", "BodyUseAPI": [], "Fixed commit": "01eeb85d6b560bc35face2fac2900604a7cdb189", "Url": "https://api.github.com/repos/GluuFederation/oxTrust", "Date": "2018-08-14T17:54:22Z"},
{"Line": "1317=>1301", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.gluu.oxtrust.action.Pattern.compile(java.lang.String)=>java.util.regex.Pattern.compile(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/229/buggy-version/server.src.main.java.org.gluu.oxtrust.action.UpdateClientAction.java", "BodyUseAPI": [], "Fixed commit": "01eeb85d6b560bc35face2fac2900604a7cdb189", "Url": "https://api.github.com/repos/GluuFederation/oxTrust", "Date": "2018-08-14T17:54:22Z"},
{"Line": "1321=>1305", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.regex.Matcher.matches()=>java.util.regex.Matcher.matches()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/229/buggy-version/server.src.main.java.org.gluu.oxtrust.action.UpdateClientAction.java", "BodyUseAPI": [], "Fixed commit": "01eeb85d6b560bc35face2fac2900604a7cdb189", "Url": "https://api.github.com/repos/GluuFederation/oxTrust", "Date": "2018-08-14T17:54:22Z"},
{"Line": "65=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.columbia.rdf.matcalc.toolbox.mutations.MutationsDialog.setDialogCardContent(javax.swing.Box)=>edu.columbia.rdf.matcalc.toolbox.mutations.MutationsDialog.setCard(javax.swing.Box)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3265/buggy-version/edu.columbia.rdf.matcalc.toolbox.mutations.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.mutations.MutationsDialog.java", "BodyUseAPI": [], "Fixed commit": "6c866ee7c14406e41dff4e75918edd10fabfd107", "Url": "https://api.github.com/repos/antonybholmes/matcalc-mutations", "Date": "2018-03-15T23:48:34Z"},
{"Line": "67=>66", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.openlmis.notification.web.UserContactDetailsDtoValidator.verifyEmail(dto.getReferenceDataUserId(),dto.getEmail(),org.springframework.validation.Errors)=>org.openlmis.notification.web.UserContactDetailsDtoValidator.verifyEmail(dto.getEmail(),org.springframework.validation.Errors)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2155/buggy-version/src.main.java.org.openlmis.notification.web.UserContactDetailsDtoValidator.java", "BodyUseAPI": [], "Fixed commit": "1b808d6bb9403a30832b188c604052d38de8af3f", "Url": "https://api.github.com/repos/OpenLMIS/openlmis-notification", "Date": "2018-06-15T14:29:29Z"},
{"Line": "775=>775", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.http.client.methods.HttpPost.addHeader(java.lang.String,java.lang.String)=>org.apache.http.client.methods.HttpGet.addHeader(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8935/buggy-version/rest.rest-client.src.main.java.org.ow2.proactive.scheduler.rest.SchedulerClient.java", "BodyUseAPI": [], "Fixed commit": "b92245075d144d4e9b318393947cbad6281bb45d", "Url": "https://api.github.com/repos/pedrovelho/scheduling", "Date": "2018-01-15T11:13:17Z"},
{"Line": "778=>778", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)=>org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpGet)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8935/buggy-version/rest.rest-client.src.main.java.org.ow2.proactive.scheduler.rest.SchedulerClient.java", "BodyUseAPI": [], "Fixed commit": "b92245075d144d4e9b318393947cbad6281bb45d", "Url": "https://api.github.com/repos/pedrovelho/scheduling", "Date": "2018-01-15T11:13:17Z"},
{"Line": "170=>170", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.lang.reflect.Method>.stream()=>java.util.Arrays.stream(java.lang.reflect.Method[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7269/buggy-version/varex-hom-finder.src.benchmark.BenchmarkedVarexSSHOMFinder.java", "BodyUseAPI": [], "Fixed commit": "68507dcdd73915143baab33f11a38b677b266b63", "Url": "https://api.github.com/repos/poosomooso/mutationtest-varex", "Date": "2018-08-14T23:47:14Z"},
{"Line": "70=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "brs.http.common.Parameters.isTrue(req.getParameter(brs.http.GOODS_IS_TEXT_PARAMETER))=>brs.http.common.Parameters.isFalse(req.getParameter(brs.http.GOODS_IS_TEXT_PARAMETER))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9693/buggy-version/src.brs.http.DGSDelivery.java", "BodyUseAPI": [], "Fixed commit": "8ccf1c2cdc33caa6e4b3f9be93cef3aee285855c", "Url": "https://api.github.com/repos/PoC-Consortium/burstcoin", "Date": "2018-05-30T23:07:42Z"},
{"Line": "557=>557", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.List<java.lang.String>.add(java.lang.String)=>java.util.List<java.lang.String>.add(int,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3509/buggy-version/components.org.wso2.carbon.identity.oauth.src.main.java.org.wso2.carbon.identity.openidconnect.DefaultIDTokenBuilder.java", "BodyUseAPI": [], "Fixed commit": "da42d3413d73524b356c2bdd381df12da60d5b6f", "Url": "https://api.github.com/repos/nuwandiw/identity-inbound-auth-oauth", "Date": "2018-06-12T13:30:48Z"},
{"Line": "90=>91", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Map<java.lang.Integer, java.util.List<app.point.Point>>.remove(int)=>java.util.Map<java.lang.Integer, java.util.List<app.point.Point>>.put(int,adjacentCellList.get(key))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3938/buggy-version/src.main.java.app.grid_analyser.GridAnalyser.java", "BodyUseAPI": [], "Fixed commit": "0e0a64cd23d33f3eb8a204435b6a6ad21d91b3a8", "Url": "https://api.github.com/repos/LeviSousa/Mindera_Graduate_Challenge", "Date": "2018-05-22T01:06:05Z"},
{"Line": "282=>282", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.nikr.eve.jeveasset.data.settings.Settings.get().getOwners().get(long)=>net.nikr.eve.jeveasset.data.settings.Settings.get().getOwners().get(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6975/buggy-version/src.main.java.net.nikr.eve.jeveasset.gui.shared.menu.JMenuUI.java", "BodyUseAPI": [], "Fixed commit": "d24aef0451380e8b34544cb7b012869373521e93", "Url": "https://api.github.com/repos/GoldenGnu/jeveassets", "Date": "2018-09-29T11:48:01Z"},
{"Line": "64=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "RecyclerView.Adapter.addEvent(java.lang.String,java.lang.String,java.util.Date,java.util.Date,java.lang.String)=>edu.grinnell.appdev.events.adapter.EventRecyclerAdapter.addEvent(java.lang.String,java.lang.String,java.util.Date,java.util.Date,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6797/buggy-version/app.src.main.java.edu.grinnell.appdev.events.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "5b4179af5ffce907b273efbb050c637e3d46899f", "Url": "https://api.github.com/repos/GrinnellAppDev/Events-Android", "Date": "2018-07-02T00:08:06Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.grinnell.appdev.events.MainActivity.add()=>edu.grinnell.appdev.events.MainActivity.add(RecyclerView.Adapter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6797/buggy-version/app.src.main.java.edu.grinnell.appdev.events.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "5b4179af5ffce907b273efbb050c637e3d46899f", "Url": "https://api.github.com/repos/GrinnellAppDev/Events-Android", "Date": "2018-07-02T00:08:06Z"},
{"Line": "182=>182", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Boolean.getBoolean(java.lang.String)=>java.lang.Boolean.valueOf(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9536/buggy-version/src.main.java.org.dsa.iot.mango.MangoFolder.java", "BodyUseAPI": [], "Fixed commit": "0ed307e39453aacb3c9960d85174afc577999019", "Url": "https://api.github.com/repos/jahm86/dslink-java-mango", "Date": "2018-02-01T14:47:10Z"},
{"Line": "126=>131", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mortr.soloviev.mdc2018soloviev.ui.launcher.LaunchPagesFragment.checkSortType()=>com.mortr.soloviev.mdc2018soloviev.ui.launcher.LaunchPagesFragment.refreshAppsToAdapter(Utils.SortType,getSortedApps(getListApplications(context), newSortType, context))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5272/buggy-version/app.src.main.java.com.mortr.soloviev.mdc2018soloviev.ui.launcher.LaunchPagesFragment.java", "BodyUseAPI": [], "Fixed commit": "d7c0e0a46bf15fa9931aa767bf8173ca4350a8ab", "Url": "https://api.github.com/repos/mortr/MDC2018Soloviev", "Date": "2018-02-20T09:22:05Z"},
{"Line": "495=>495", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "deliveryDetailsDao.queryBuilder().orderBy(DeliveryDetailsEntity.SERVER_SYNC_TIME, false).limit(long)=>deliveryDetailsDao.queryBuilder().orderBy(DeliveryDetailsEntity.SERVER_SYNC_TIME, false).queryForFirst()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9114/buggy-version/app.src.main.java.com.ordered.report.dao.OrderDAO.java", "BodyUseAPI": [], "Fixed commit": "c06084a13437d6893c6365073976140e916c2ee5", "Url": "https://api.github.com/repos/snithishkumar/CartonPacking", "Date": "2018-08-18T20:13:34Z"},
{"Line": "482=>482", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "orderDao.queryBuilder().orderBy(OrderEntity.SERVER_TIME, false).limit(long)=>orderDao.queryBuilder().orderBy(OrderEntity.SERVER_TIME, false).queryForFirst()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9114/buggy-version/app.src.main.java.com.ordered.report.dao.OrderDAO.java", "BodyUseAPI": [], "Fixed commit": "c06084a13437d6893c6365073976140e916c2ee5", "Url": "https://api.github.com/repos/snithishkumar/CartonPacking", "Date": "2018-08-18T20:13:34Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cuteam17.cuteam17rpi.Overlays.TelephoneOverlayService.1.removeOverlayView()=>cuteam17.cuteam17rpi.Overlays.TelephoneOverlayService.1.removeOverlayView(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5796/buggy-version/cuteam17rpi.src.main.java.cuteam17.cuteam17rpi.Overlays.TelephoneOverlayService.java", "BodyUseAPI": [], "Fixed commit": "9d4f3456ec93ae6f7cb3d7d64fa067a88e6dea4b", "Url": "https://api.github.com/repos/cu-team17/cu-team17-apps-phone", "Date": "2018-04-22T17:51:49Z"},
{"Line": "53=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.Acrobot.ChestShop.Listeners.PostTransaction.Sign.getLine(byte)=>org.bukkit.block.Sign.getLine(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3120/buggy-version/src.main.java.com.Acrobot.ChestShop.Listeners.PostTransaction.ItemManager.java", "BodyUseAPI": [], "Fixed commit": "820000b810a83c35fc45a11f681989f6d256d4f7", "Url": "https://api.github.com/repos/imDaniX/ChestShop-3", "Date": "2018-10-02T22:50:58Z"},
{"Line": "53=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.Acrobot.ChestShop.Listeners.PostTransaction.Sign.setLine(byte,((((sign.getLine(b)) + \" (\") + i) + \")\"))=>org.bukkit.block.Sign.setLine(int,((((sign.getLine(1)) + \" (\") + i) + \")\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3120/buggy-version/src.main.java.com.Acrobot.ChestShop.Listeners.PostTransaction.ItemManager.java", "BodyUseAPI": [], "Fixed commit": "820000b810a83c35fc45a11f681989f6d256d4f7", "Url": "https://api.github.com/repos/imDaniX/ChestShop-3", "Date": "2018-10-02T22:50:58Z"},
{"Line": "54=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.Acrobot.ChestShop.Listeners.PostTransaction.Sign.update()=>org.bukkit.block.Sign.update()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3120/buggy-version/src.main.java.com.Acrobot.ChestShop.Listeners.PostTransaction.ItemManager.java", "BodyUseAPI": [], "Fixed commit": "820000b810a83c35fc45a11f681989f6d256d4f7", "Url": "https://api.github.com/repos/imDaniX/ChestShop-3", "Date": "2018-10-02T22:50:58Z"},
{"Line": "109=>110", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "json.getJSONObject(\"details\").getString(java.lang.String)=>org.json.JSONObject.getString(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3973/buggy-version/chargereseller.src.main.java.com.zarinpal.libs.chargereseller.VerificationPurchase.java", "BodyUseAPI": [], "Fixed commit": "2c854d78c5c10f71860297bf59875bac27986221", "Url": "https://api.github.com/repos/ZarinPal/chargereseller-sdk", "Date": "2018-01-13T12:21:11Z"},
{"Line": "108=>109", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.json.JSONObject.getJSONObject(java.lang.String)=>org.json.JSONObject.getString(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3973/buggy-version/chargereseller.src.main.java.com.zarinpal.libs.chargereseller.VerificationPurchase.java", "BodyUseAPI": [], "Fixed commit": "2c854d78c5c10f71860297bf59875bac27986221", "Url": "https://api.github.com/repos/ZarinPal/chargereseller-sdk", "Date": "2018-01-13T12:21:11Z"},
{"Line": "108=>109", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "json.getJSONObject(\"details\").getString(java.lang.String)=>org.json.JSONObject.getString(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3973/buggy-version/chargereseller.src.main.java.com.zarinpal.libs.chargereseller.VerificationPurchase.java", "BodyUseAPI": [], "Fixed commit": "2c854d78c5c10f71860297bf59875bac27986221", "Url": "https://api.github.com/repos/ZarinPal/chargereseller-sdk", "Date": "2018-01-13T12:21:11Z"},
{"Line": "51=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.squareup.picasso.Picasso.with(movie_image.getContext()).load(br.com.leoassuncao.famousmovies.Utils.NetworkUtils.buildPosterUrl(movie.getPosterPath())).placeholder(R.drawable.placeholder_poster).into(android.widget.ImageView)=>com.squareup.picasso.Picasso.with(movie_image.getContext()).load(br.com.leoassuncao.famousmovies.Utils.NetworkUtils.buildPosterUrl(movie.getPosterPath())).fit().centerCrop()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3124/buggy-version/app.src.main.java.br.com.leoassuncao.famousmovies.DetailsActivity.java", "BodyUseAPI": [], "Fixed commit": "7486d97e42c3bd0a1b570ffcad6a90bf77e2a36c", "Url": "https://api.github.com/repos/leoassuncao/famousmovies", "Date": "2018-01-16T16:38:52Z"},
{"Line": "51=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.squareup.picasso.Picasso.with(movie_image.getContext()).load(br.com.leoassuncao.famousmovies.Utils.NetworkUtils.buildPosterUrl(movie.getPosterPath())).placeholder(R.drawable.placeholder_poster)=>com.squareup.picasso.Picasso.with(movie_image.getContext()).load(br.com.leoassuncao.famousmovies.Utils.NetworkUtils.buildPosterUrl(movie.getPosterPath())).fit()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3124/buggy-version/app.src.main.java.br.com.leoassuncao.famousmovies.DetailsActivity.java", "BodyUseAPI": [], "Fixed commit": "7486d97e42c3bd0a1b570ffcad6a90bf77e2a36c", "Url": "https://api.github.com/repos/leoassuncao/famousmovies", "Date": "2018-01-16T16:38:52Z"},
{"Line": "171=>171", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.format(java.lang.String,config.stopAfterFailure)=>java.lang.String.format(java.lang.String,config.stopAfterRecharge)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8346/buggy-version/app.src.main.java.top.easelink.mob.ui.main.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "902f70110a404122815df37109315c23f253115e", "Url": "https://api.github.com/repos/fabricezhang/Mob", "Date": "2018-07-08T16:17:23Z"},
{"Line": "62=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "app.SistemaInmobiliaria.getPropiedadesEnVenta()=>app.SistemaInmobiliaria.getVentas()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7531/buggy-version/src.views.VentaBaja.java", "BodyUseAPI": [], "Fixed commit": "538e3df45db4f9101f2994b8f737a1022c4e8924", "Url": "https://api.github.com/repos/tomasmalio/distribuidasTpUade", "Date": "2018-03-20T18:41:02Z"},
{"Line": "108=>108", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "oshi.util.platform.windows.WmiUtil.selectObjectsFrom(<nulltype>,java.lang.String,java.lang.String,(\"WHERE SerialNumber=\" + (diskStore.getSerial())),oshi.util.platform.windows.WmiUtil.ValueType[])=>oshi.util.platform.windows.WmiUtil.selectUint32sFrom(<nulltype>,java.lang.String,java.lang.String,(\"WHERE SerialNumber=\" + (diskStore.getSerial())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1194/buggy-version/oshi-core.src.main.java.oshi.hardware.platform.windows.WindowsDisks.java", "BodyUseAPI": [], "Fixed commit": "70f8fb6eff8c7c7caeb7a06339480f000b6b3800", "Url": "https://api.github.com/repos/dbwiddis/oshi", "Date": "2018-06-11T22:48:02Z"},
{"Line": "115=>114", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Object.toString()=>java.lang.Long.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1194/buggy-version/oshi-core.src.main.java.oshi.hardware.platform.windows.WindowsDisks.java", "BodyUseAPI": [], "Fixed commit": "70f8fb6eff8c7c7caeb7a06339480f000b6b3800", "Url": "https://api.github.com/repos/dbwiddis/oshi", "Date": "2018-06-11T22:48:02Z"},
{"Line": "203=>206", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.common.net.InternetDomainName.from(fqdn).topPrivateDomain()=>com.google.common.net.InternetDomainName.topPrivateDomain()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/585/buggy-version/Android.app.src.main.java.app.intra.RecyclerAdapter.java", "BodyUseAPI": [], "Fixed commit": "dc721ffc7d5a678e8c768778073ec1f6c90ac181", "Url": "https://api.github.com/repos/Jigsaw-Code/Intra", "Date": "2018-08-16T15:44:20Z"},
{"Line": "87=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Exception.getMessage()=>org.collectionspace.services.common.document.DocumentException.getMessage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1773/buggy-version/3rdparty.nuxeo.nuxeo-platform-listener.updaterelationsondelete.src.main.java.org.collectionspace.services.listener.UpdateRelationsOnDelete.java", "BodyUseAPI": [], "Fixed commit": "90930161814509aa5aef58d55a250de482b1b1c5", "Url": "https://api.github.com/repos/collectionspace/services", "Date": "2018-01-25T09:01:47Z"},
{"Line": "85=>86", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.commons.logging.Log.warn(((((((\"Error attempting to retrieve relation records where \" + \"record of type '\") + (docModel.getType())) + \"' with CSID \") + csid) + \" is the subject or object of any relation: \") + (ce.getMessage())))=>org.apache.commons.logging.Log.error(((((((\"Error attempting to retrieve relation records where \" + \"record of type '\") + (docModel.getType())) + \"' with CSID \") + csid) + \" is the subject or object of any relation: \") + (ce.getMessage())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1773/buggy-version/3rdparty.nuxeo.nuxeo-platform-listener.updaterelationsondelete.src.main.java.org.collectionspace.services.listener.UpdateRelationsOnDelete.java", "BodyUseAPI": [], "Fixed commit": "90930161814509aa5aef58d55a250de482b1b1c5", "Url": "https://api.github.com/repos/collectionspace/services", "Date": "2018-01-25T09:01:47Z"},
{"Line": "122=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Client.sendDATA(byte[],int)=>Client.sendDATA(byte[],int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9241/buggy-version/src.Client.java", "BodyUseAPI": [], "Fixed commit": "1803fad91e74dd3151b14eb9b1ed7d3caea6abd5", "Url": "https://api.github.com/repos/Benjaminmloo/3303_Project", "Date": "2018-02-04T03:21:37Z"},
{"Line": "209=>209", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Client.sendAPacket(byte[])=>Client.sendAPacket(byte[],int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9241/buggy-version/src.Client.java", "BodyUseAPI": [], "Fixed commit": "1803fad91e74dd3151b14eb9b1ed7d3caea6abd5", "Url": "https://api.github.com/repos/Benjaminmloo/3303_Project", "Date": "2018-02-04T03:21:37Z"},
{"Line": "74=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Client.sendAPacket(byte[])=>Client.sendAPacket(byte[],int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9241/buggy-version/src.Client.java", "BodyUseAPI": [], "Fixed commit": "1803fad91e74dd3151b14eb9b1ed7d3caea6abd5", "Url": "https://api.github.com/repos/Benjaminmloo/3303_Project", "Date": "2018-02-04T03:21:37Z"},
{"Line": "139=>139", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Client.sendACK()=>Client.sendACK(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9241/buggy-version/src.Client.java", "BodyUseAPI": [], "Fixed commit": "1803fad91e74dd3151b14eb9b1ed7d3caea6abd5", "Url": "https://api.github.com/repos/Benjaminmloo/3303_Project", "Date": "2018-02-04T03:21:37Z"},
{"Line": "180=>180", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Client.sendAPacket(byte[])=>Client.sendAPacket(byte[],int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9241/buggy-version/src.Client.java", "BodyUseAPI": [], "Fixed commit": "1803fad91e74dd3151b14eb9b1ed7d3caea6abd5", "Url": "https://api.github.com/repos/Benjaminmloo/3303_Project", "Date": "2018-02-04T03:21:37Z"},
{"Line": "139=>140", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.JFrame.getHeight()=>javax.swing.JComponent.getHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4622/buggy-version/src.GUI.java", "BodyUseAPI": [], "Fixed commit": "70c4447256e4b5009b4d61a3cde18c725a167dd3", "Url": "https://api.github.com/repos/gooblie/Cluedo", "Date": "2018-08-27T22:51:40Z"},
{"Line": "139=>140", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.JFrame.getHeight()=>javax.swing.JComponent.getHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4622/buggy-version/src.GUI.java", "BodyUseAPI": [], "Fixed commit": "70c4447256e4b5009b4d61a3cde18c725a167dd3", "Url": "https://api.github.com/repos/gooblie/Cluedo", "Date": "2018-08-27T22:51:40Z"},
{"Line": "135=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.JFrame.getWidth()=>javax.swing.JComponent.getWidth()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4622/buggy-version/src.GUI.java", "BodyUseAPI": [], "Fixed commit": "70c4447256e4b5009b4d61a3cde18c725a167dd3", "Url": "https://api.github.com/repos/gooblie/Cluedo", "Date": "2018-08-27T22:51:40Z"},
{"Line": "114=>115", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new android.support.v4.app.NotificationCompat.Builder(this, channelId).setSmallIcon(R.drawable.ic_arrow_back).setContentTitle(title).setContentText(messageBody).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(android.app.PendingIntent)=>new android.support.v4.app.NotificationCompat.Builder(this, channelId).setSmallIcon(R.drawable.ic_arrow_back).setContentTitle(title).setContentText(messageBody).setStyle(new android.support.v4.app.NotificationCompat.BigTextStyle().bigText(messageBody)).setAutoCancel(true).setSound(android.net.Uri)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6231/buggy-version/app.src.main.java.nitrr.ecell.e_cell.firebase.MyFirebaseMessagingService.java", "BodyUseAPI": [], "Fixed commit": "2c4a98cf712a50967cc79826c47f906950bdcf5c", "Url": "https://api.github.com/repos/ECellNitrr/ECellApp2k18", "Date": "2018-08-20T11:10:00Z"},
{"Line": "114=>115", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new android.support.v4.app.NotificationCompat.Builder(this, channelId).setSmallIcon(R.drawable.ic_arrow_back).setContentTitle(title).setContentText(messageBody).setAutoCancel(boolean)=>new android.support.v4.app.NotificationCompat.Builder(this, channelId).setSmallIcon(R.drawable.ic_arrow_back).setContentTitle(title).setContentText(messageBody).setStyle(new android.support.v4.app.NotificationCompat.BigTextStyle().bigText(messageBody))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6231/buggy-version/app.src.main.java.nitrr.ecell.e_cell.firebase.MyFirebaseMessagingService.java", "BodyUseAPI": [], "Fixed commit": "2c4a98cf712a50967cc79826c47f906950bdcf5c", "Url": "https://api.github.com/repos/ECellNitrr/ECellApp2k18", "Date": "2018-08-20T11:10:00Z"},
{"Line": "114=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new android.support.v4.app.NotificationCompat.Builder(this, channelId).setSmallIcon(R.drawable.ic_arrow_back).setContentTitle(title).setContentText(messageBody).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(android.app.PendingIntent)=>new android.support.v4.app.NotificationCompat.Builder(this, channelId).setSmallIcon(R.drawable.ic_arrow_back).setContentTitle(title).setContentText(messageBody).setStyle(new android.support.v4.app.NotificationCompat.BigTextStyle().bigText(messageBody)).setAutoCancel(true).setSound(android.net.Uri)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6231/buggy-version/app.src.main.java.nitrr.ecell.e_cell.firebase.MyFirebaseMessagingService.java", "BodyUseAPI": [], "Fixed commit": "2c4a98cf712a50967cc79826c47f906950bdcf5c", "Url": "https://api.github.com/repos/ECellNitrr/ECellApp2k18", "Date": "2018-08-20T11:10:00Z"},
{"Line": "107=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.Intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)=>android.content.Intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6231/buggy-version/app.src.main.java.nitrr.ecell.e_cell.firebase.MyFirebaseMessagingService.java", "BodyUseAPI": [], "Fixed commit": "2c4a98cf712a50967cc79826c47f906950bdcf5c", "Url": "https://api.github.com/repos/ECellNitrr/ECellApp2k18", "Date": "2018-08-20T11:10:00Z"},
{"Line": "25=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Model.Component.getName()=>Model.Unit.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2047/buggy-version/src.main.java.DAO.UnitDAO.java", "BodyUseAPI": [], "Fixed commit": "be1b5e76d53db826ff19427aa624f4bbc27218d1", "Url": "https://api.github.com/repos/Kubset/Whats-for-dinner", "Date": "2018-09-10T14:29:37Z"},
{"Line": "32=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Model.Component.getId()=>Model.Unit.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2047/buggy-version/src.main.java.DAO.UnitDAO.java", "BodyUseAPI": [], "Fixed commit": "be1b5e76d53db826ff19427aa624f4bbc27218d1", "Url": "https://api.github.com/repos/Kubset/Whats-for-dinner", "Date": "2018-09-10T14:29:37Z"},
{"Line": "26=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Model.Component.getId()=>Model.Unit.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2047/buggy-version/src.main.java.DAO.UnitDAO.java", "BodyUseAPI": [], "Fixed commit": "be1b5e76d53db826ff19427aa624f4bbc27218d1", "Url": "https://api.github.com/repos/Kubset/Whats-for-dinner", "Date": "2018-09-10T14:29:37Z"},
{"Line": "19=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Model.Component.getName()=>Model.Unit.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2047/buggy-version/src.main.java.DAO.UnitDAO.java", "BodyUseAPI": [], "Fixed commit": "be1b5e76d53db826ff19427aa624f4bbc27218d1", "Url": "https://api.github.com/repos/Kubset/Whats-for-dinner", "Date": "2018-09-10T14:29:37Z"},
{"Line": "249=>249", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<android.support.v4.app.Fragment>.add(fragmentList.get(i))=>java.util.List<android.support.v4.app.Fragment>.add(android.support.v4.app.Fragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9399/buggy-version/fragmentation_core.src.main.java.me.yokeyword.fragmentation.SupportHelper.java", "BodyUseAPI": [], "Fixed commit": "11ae2f7697c74c682a9093b20197847dd8e723d8", "Url": "https://api.github.com/repos/YoKeyword/Fragmentation", "Date": "2018-03-20T12:08:04Z"},
{"Line": "249=>249", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.List<android.support.v4.app.Fragment>.get(int)=>java.util.List<android.support.v4.app.Fragment>.add(android.support.v4.app.Fragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9399/buggy-version/fragmentation_core.src.main.java.me.yokeyword.fragmentation.SupportHelper.java", "BodyUseAPI": [], "Fixed commit": "11ae2f7697c74c682a9093b20197847dd8e723d8", "Url": "https://api.github.com/repos/YoKeyword/Fragmentation", "Date": "2018-03-20T12:08:04Z"},
{"Line": "2710=>2710", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.zeppelin.utils.SecurityUtils.getRoles()=>org.apache.zeppelin.utils.SecurityUtils.getAssociatedRoles()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6100/buggy-version/zeppelin-server.src.main.java.org.apache.zeppelin.socket.NotebookServer.java", "BodyUseAPI": [], "Fixed commit": "e071378c64c294d2ff6ce0f0ff1daba02de16576", "Url": "https://api.github.com/repos/TinkoffCreditSystems/zeppelin", "Date": "2018-07-30T15:54:15Z"},
{"Line": "165=>165", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.spine.examples.todolist.q.projection.ProjectionHelper.newTaskListView(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>)=>io.spine.examples.todolist.q.projection.Projections.newTaskListView(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2841/buggy-version/api-java.src.main.java.io.spine.examples.todolist.q.projection.MyListViewProjection.java", "BodyUseAPI": [], "Fixed commit": "d0ae0d3c187c5b938d58ade1fe3b494a628e5086", "Url": "https://api.github.com/repos/SpineEventEngine/todo-list", "Date": "2018-01-12T10:10:21Z"},
{"Line": "104=>104", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.spine.examples.todolist.q.projection.ProjectionHelper.updateTaskItemList(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,io.spine.examples.todolist.c.events.TaskDescriptionUpdated)=>io.spine.examples.todolist.q.projection.Projections.updateTaskItemList(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,io.spine.examples.todolist.c.events.TaskDescriptionUpdated)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2841/buggy-version/api-java.src.main.java.io.spine.examples.todolist.q.projection.MyListViewProjection.java", "BodyUseAPI": [], "Fixed commit": "d0ae0d3c187c5b938d58ade1fe3b494a628e5086", "Url": "https://api.github.com/repos/SpineEventEngine/todo-list", "Date": "2018-01-12T10:10:21Z"},
{"Line": "120=>120", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.spine.examples.todolist.q.projection.ProjectionHelper.updateTaskItemList(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,io.spine.examples.todolist.c.events.TaskDueDateUpdated)=>io.spine.examples.todolist.q.projection.Projections.updateTaskItemList(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,io.spine.examples.todolist.c.events.TaskDueDateUpdated)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2841/buggy-version/api-java.src.main.java.io.spine.examples.todolist.q.projection.MyListViewProjection.java", "BodyUseAPI": [], "Fixed commit": "d0ae0d3c187c5b938d58ade1fe3b494a628e5086", "Url": "https://api.github.com/repos/SpineEventEngine/todo-list", "Date": "2018-01-12T10:10:21Z"},
{"Line": "120=>120", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.spine.examples.todolist.q.projection.ProjectionHelper.updateTaskItemList(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,io.spine.examples.todolist.c.events.TaskDueDateUpdated)=>io.spine.examples.todolist.q.projection.Projections.updateTaskItemList(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,io.spine.examples.todolist.c.events.TaskDueDateUpdated)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2841/buggy-version/api-java.src.main.java.io.spine.examples.todolist.q.projection.MyListViewProjection.java", "BodyUseAPI": [], "Fixed commit": "d0ae0d3c187c5b938d58ade1fe3b494a628e5086", "Url": "https://api.github.com/repos/SpineEventEngine/todo-list", "Date": "2018-01-12T10:10:21Z"},
{"Line": "128=>128", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.spine.examples.todolist.q.projection.ProjectionHelper.updateTaskItemList(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,io.spine.examples.todolist.c.events.TaskCompleted)=>io.spine.examples.todolist.q.projection.Projections.updateTaskItemList(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,io.spine.examples.todolist.c.events.TaskCompleted)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2841/buggy-version/api-java.src.main.java.io.spine.examples.todolist.q.projection.MyListViewProjection.java", "BodyUseAPI": [], "Fixed commit": "d0ae0d3c187c5b938d58ade1fe3b494a628e5086", "Url": "https://api.github.com/repos/SpineEventEngine/todo-list", "Date": "2018-01-12T10:10:21Z"},
{"Line": "112=>112", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.spine.examples.todolist.q.projection.ProjectionHelper.updateTaskItemList(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,io.spine.examples.todolist.c.events.TaskPriorityUpdated)=>io.spine.examples.todolist.q.projection.Projections.updateTaskItemList(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,io.spine.examples.todolist.c.events.TaskPriorityUpdated)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2841/buggy-version/api-java.src.main.java.io.spine.examples.todolist.q.projection.MyListViewProjection.java", "BodyUseAPI": [], "Fixed commit": "d0ae0d3c187c5b938d58ade1fe3b494a628e5086", "Url": "https://api.github.com/repos/SpineEventEngine/todo-list", "Date": "2018-01-12T10:10:21Z"},
{"Line": "96=>96", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.spine.examples.todolist.q.projection.ProjectionHelper.removeViewsByTaskId(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,event.getTaskId())=>io.spine.examples.todolist.q.projection.Projections.removeViewsByTaskId(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,event.getTaskId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2841/buggy-version/api-java.src.main.java.io.spine.examples.todolist.q.projection.MyListViewProjection.java", "BodyUseAPI": [], "Fixed commit": "d0ae0d3c187c5b938d58ade1fe3b494a628e5086", "Url": "https://api.github.com/repos/SpineEventEngine/todo-list", "Date": "2018-01-12T10:10:21Z"},
{"Line": "136=>136", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.spine.examples.todolist.q.projection.ProjectionHelper.updateTaskItemList(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,io.spine.examples.todolist.c.events.TaskReopened)=>io.spine.examples.todolist.q.projection.Projections.updateTaskItemList(java.util.List<io.spine.examples.todolist.q.projection.TaskItem>,io.spine.examples.todolist.c.events.TaskReopened)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2841/buggy-version/api-java.src.main.java.io.spine.examples.todolist.q.projection.MyListViewProjection.java", "BodyUseAPI": [], "Fixed commit": "d0ae0d3c187c5b938d58ade1fe3b494a628e5086", "Url": "https://api.github.com/repos/SpineEventEngine/todo-list", "Date": "2018-01-12T10:10:21Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.hibernate.boot.registry.StandardServiceRegistryBuilder.addInitiator(org.jboss.as.jpa.hibernate5.service.CustomJtaPlatformInitiator)=>org.hibernate.boot.registry.StandardServiceRegistryBuilder.addInitiator(org.jboss.as.jpa.hibernate5.service.WildFlyCustomJtaPlatformInitiator)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/612/buggy-version/jpa.hibernate5_3.src.main.java.org.jboss.as.jpa.hibernate5.service.ServiceContributorImpl.java", "BodyUseAPI": [], "Fixed commit": "c9fb9687f29235e05a648f30e4c8f799d530c57e", "Url": "https://api.github.com/repos/scottmarlow/wildfly", "Date": "2018-05-15T20:36:32Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.kie.cloud.openshift.constants.ProjectSpecificPropertyNames.workbenchMavenPassword()=>org.kie.cloud.openshift.constants.ProjectSpecificPropertyNames.workbenchHttpsSecret()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2987/buggy-version/framework-cloud.framework-openshift-templates.src.main.java.org.kie.cloud.openshift.scenario.builder.WorkbenchKieServerPersistentScenarioBuilderImpl.java", "BodyUseAPI": [], "Fixed commit": "a749e43d2d3fc0ca6239f0865325ffb4782920df", "Url": "https://api.github.com/repos/jakubschwan/kie-cloud-tests", "Date": "2018-09-20T07:37:27Z"},
{"Line": "11=>12", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.megacrit.cardcrawl.helpers.EventHelper.getEvent(AbstractDungeon.eventList.remove(0))=>com.megacrit.cardcrawl.helpers.EventHelper.getEvent(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9544/buggy-version/src.main.java.basemod.CustomEventRoom.java", "BodyUseAPI": [], "Fixed commit": "9403cba881428c3af9d0246e0a78d351c317eaa9", "Url": "https://api.github.com/repos/kiooeht/BaseMod", "Date": "2018-03-22T21:38:51Z"},
{"Line": "211=>212", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.Math.max(int,float)=>java.lang.Math.max(int,float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4175/buggy-version/core.src.com.mygdx.game.WorldController.java", "BodyUseAPI": [], "Fixed commit": "fe8aad3a0aafd76e9146c94802fef0c6b385c4f3", "Url": "https://api.github.com/repos/pdeppen/CSC361_F18_G2", "Date": "2018-10-04T19:33:03Z"},
{"Line": "31=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.huaweicloud.dis.iface.data.request.PutRecordsRequestEntry.setData(java.nio.ByteBuffer)=>java.util.List<java.nio.ByteBuffer>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6166/buggy-version/src.main.java.com.bigdata.dis.sdk.demo.data.RandomData.java", "BodyUseAPI": [], "Fixed commit": "46cbb8e833a2fe3a60c267bd5dddb302e39442af", "Url": "https://api.github.com/repos/ihaolau/dis-perf", "Date": "2018-06-13T02:48:57Z"},
{"Line": "116=>117", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element.getName()=>gov.nasa.jpl.mbee.mdk.model.TableStructure.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7203/buggy-version/src.main.java.gov.nasa.jpl.mbee.mdk.model.TableStructure.java", "BodyUseAPI": [], "Fixed commit": "f6b380d1162ac77a79a238e5976d065a9ebfe54b", "Url": "https://api.github.com/repos/Open-MBEE/mdk", "Date": "2018-09-26T17:16:32Z"},
{"Line": "113=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "liquibase.resource.ClassLoaderResourceAccessor.endsWith(java.lang.String)=>java.lang.String.endsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/560/buggy-version/liquibase-core.src.main.java.liquibase.resource.ClassLoaderResourceAccessor.java", "BodyUseAPI": [], "Fixed commit": "ca2a42e00bc7eb4682bcee01b78b79b676b8fde3", "Url": "https://api.github.com/repos/liquibase/liquibase", "Date": "2018-01-27T07:15:48Z"},
{"Line": "83=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.bertogonz3000.surround.Song.setVolume(int)=>com.example.bertogonz3000.surround.Song.setVolume(float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1333/buggy-version/app.src.main.java.com.example.bertogonz3000.surround.ControllerPlayingActivity.java", "BodyUseAPI": [], "Fixed commit": "e93b9b1faf0bbca414a9b17f5c82cc4673c95c3c", "Url": "https://api.github.com/repos/BGHProductions/Surround", "Date": "2018-07-19T22:15:37Z"},
{"Line": "38=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.cpsc3770.listcalendar.ViewCalendarActivity.findViewByID(R.id.CalendarEventList)=>com.example.cpsc3770.listcalendar.ViewCalendarActivity.findViewById(R.id.CalendarEventList)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5840/buggy-version/app.src.main.java.com.example.cpsc3770.listcalendar.ViewCalendarActivity.java", "BodyUseAPI": [], "Fixed commit": "f6b0afba40cc6f5db89f5e2e4eeb6d291511c5f7", "Url": "https://api.github.com/repos/CPSC3770/List-Calendar", "Date": "2018-04-03T01:14:13Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.ImageView.setImageResource(R.drawable.calendarListImage)=>android.widget.ImageView.setImageResource(R.drawable.placeholder)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5840/buggy-version/app.src.main.java.com.example.cpsc3770.listcalendar.CustomAdapter.java", "BodyUseAPI": [], "Fixed commit": "f6b0afba40cc6f5db89f5e2e4eeb6d291511c5f7", "Url": "https://api.github.com/repos/CPSC3770/List-Calendar", "Date": "2018-04-03T01:14:13Z"},
{"Line": "99=>99", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "IntArray.Builder.setTime(int)=>IntArray.Builder.setTime(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/976/buggy-version/src.main.java.globesort.GlobeSortServer.java", "BodyUseAPI": [], "Fixed commit": "6907833c2c490c8e618bf8dad782782dce0a0969", "Url": "https://api.github.com/repos/slmnliu/sp18-hw2", "Date": "2018-05-09T10:57:05Z"},
{"Line": "684=>689", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.animation.ObjectAnimator.addListener(android.animation.Animator.AnimatorListener)=>android.animation.ObjectAnimator.addListener(android.animation.Animator.AnimatorListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8416/buggy-version/app.src.main.java.com.example.teleprompter.VideoActivity.java", "BodyUseAPI": [], "Fixed commit": "cee33967958e0acda7a2e7a9657c1b886755dd67", "Url": "https://api.github.com/repos/AhmedTaha201/TelePrompter", "Date": "2018-08-02T20:33:14Z"},
{"Line": "251=>251", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.ui.helpers.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7941/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "6d158e469dd4eea422a9974aeaf3baebb8d3be96", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "228=>228", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.ui.helpers.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7941/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "6d158e469dd4eea422a9974aeaf3baebb8d3be96", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "47=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "studentsservice.service.AppointStudentService.findByStudentId(int)=>studentsservice.service.AppointStudentService.findByPracticeId(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/63/buggy-version/backend.src.main.java.studentsservice.service.DeletionService.java", "BodyUseAPI": [], "Fixed commit": "c3f2299fc8aa62705087f3e1db8fcb83f24da71a", "Url": "https://api.github.com/repos/LittleMaverick/StudentsService", "Date": "2018-01-01T17:42:23Z"},
{"Line": "28=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.blamejared.mcbot.commands.api.CommandContext.sanitize(channel.getGuild(),java.lang.String)=>com.blamejared.mcbot.commands.api.CommandContext.sanitize(sx.blah.discord.handle.obj.IChannel,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6239/buggy-version/src.main.java.com.blamejared.mcbot.util.BakedMessage.java", "BodyUseAPI": [], "Fixed commit": "8d39e1ed97f98393df07733e3733f122ee3c4e02", "Url": "https://api.github.com/repos/tterrag1098/K9", "Date": "2018-01-08T18:56:52Z"},
{"Line": "28=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.blamejared.mcbot.commands.api.CommandContext.sanitize(channel.getGuild(),sx.blah.discord.api.internal.json.objects.EmbedObject)=>com.blamejared.mcbot.commands.api.CommandContext.sanitize(sx.blah.discord.handle.obj.IChannel,sx.blah.discord.api.internal.json.objects.EmbedObject)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6239/buggy-version/src.main.java.com.blamejared.mcbot.util.BakedMessage.java", "BodyUseAPI": [], "Fixed commit": "8d39e1ed97f98393df07733e3733f122ee3c4e02", "Url": "https://api.github.com/repos/tterrag1098/K9", "Date": "2018-01-08T18:56:52Z"},
{"Line": "68=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.concurrent.BlockingQueue<org.wso2.carbon.event.receiver.core.internal.management.BlockingEventQueue.WrappedEvent>.put(org.wso2.carbon.event.receiver.core.internal.management.BlockingEventQueue.WrappedEvent)=>java.util.concurrent.BlockingQueue<org.wso2.carbon.event.receiver.core.internal.management.BlockingEventQueue.WrappedEvent>.offer(org.wso2.carbon.event.receiver.core.internal.management.BlockingEventQueue.WrappedEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2268/buggy-version/components.event-receiver.org.wso2.carbon.event.receiver.core.src.main.java.org.wso2.carbon.event.receiver.core.internal.management.BlockingEventQueue.java", "BodyUseAPI": [], "Fixed commit": "8692b9ffb1d90ea882e4e7acd4b5b85f1f96d4a0", "Url": "https://api.github.com/repos/wso2/carbon-analytics-common", "Date": "2018-01-22T13:29:19Z"},
{"Line": "69=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.wso2.carbon.event.receiver.core.internal.management.BlockingEventQueue.put(org.wso2.carbon.databridge.commons.Event)=>org.wso2.carbon.event.receiver.core.internal.management.BlockingEventQueue.put(org.wso2.carbon.databridge.commons.Event,java.util.concurrent.locks.ReentrantLock)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2268/buggy-version/components.event-receiver.org.wso2.carbon.event.receiver.core.src.main.java.org.wso2.carbon.event.receiver.core.internal.management.QueueInputEventDispatcher.java", "BodyUseAPI": [], "Fixed commit": "8692b9ffb1d90ea882e4e7acd4b5b85f1f96d4a0", "Url": "https://api.github.com/repos/wso2/carbon-analytics-common", "Date": "2018-01-22T13:29:19Z"},
{"Line": "128=>128", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "n.f6.accept(visitor.localVariableCheckVisitor,visitor.MType)=>n.f6.accept(visitor.localVariableCheckVisitor,visitor.MClass)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8910/buggy-version/lab2.visitor.localVariableCheckVisitor.java", "BodyUseAPI": [], "Fixed commit": "6eef47cae91ca3af8d256ca387fe12a2dccb383e", "Url": "https://api.github.com/repos/headacheboy/minijava_compiler", "Date": "2018-04-19T15:30:36Z"},
{"Line": "128=>128", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "n.f6.accept(visitor.localVariableCheckVisitor,visitor.MType)=>n.f6.accept(visitor.localVariableCheckVisitor,visitor.MClass)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8910/buggy-version/lab2.visitor.localVariableCheckVisitor.java", "BodyUseAPI": [], "Fixed commit": "6eef47cae91ca3af8d256ca387fe12a2dccb383e", "Url": "https://api.github.com/repos/headacheboy/minijava_compiler", "Date": "2018-04-19T15:30:36Z"},
{"Line": "54=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "redisTemplate.opsForValue().getAndSet(java.lang.String,java.lang.String)=>redisTemplate.opsForValue().getAndSet(ServerConst.RedisLock.CLOSE_ORDER_LOCK_KEY,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1786/buggy-version/src.main.java.top.yeonon.lmmall.task.CloseOrderTask.java", "BodyUseAPI": [], "Fixed commit": "e6cbbbc6830f8622df41fe417a44eea96af496cb", "Url": "https://api.github.com/repos/Weiyanyu/LMMall", "Date": "2018-06-30T13:45:01Z"},
{"Line": "46=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "redisTemplate.opsForValue().get(java.lang.String)=>redisTemplate.opsForValue().get(ServerConst.RedisLock.CLOSE_ORDER_LOCK_KEY)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1786/buggy-version/src.main.java.top.yeonon.lmmall.task.CloseOrderTask.java", "BodyUseAPI": [], "Fixed commit": "e6cbbbc6830f8622df41fe417a44eea96af496cb", "Url": "https://api.github.com/repos/Weiyanyu/LMMall", "Date": "2018-06-30T13:45:01Z"},
{"Line": "61=>62", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "redisTemplate.opsForValue().set(user.getId().toString(),top.yeonon.lmmall.entity.User)=>redisTemplate.opsForValue().set(user.getId().toString(),top.yeonon.lmmall.entity.User,coreProperties.getSecurity().getToken().getRefreshTokenExpireIn(),java.util.concurrent.TimeUnit)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1786/buggy-version/src.main.java.top.yeonon.lmmall.controller.TokenController.java", "BodyUseAPI": [], "Fixed commit": "e6cbbbc6830f8622df41fe417a44eea96af496cb", "Url": "https://api.github.com/repos/Weiyanyu/LMMall", "Date": "2018-06-30T13:45:01Z"},
{"Line": "62=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "redisTemplate.opsForValue().set(user.getId().toString(),top.yeonon.lmmall.entity.User)=>redisTemplate.opsForValue().set(user.getId().toString(),top.yeonon.lmmall.entity.User,coreProperties.getSecurity().getToken().getRefreshTokenExpireIn(),java.util.concurrent.TimeUnit)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1786/buggy-version/src.main.java.top.yeonon.lmmall.controller.backend.TokenManagerController.java", "BodyUseAPI": [], "Fixed commit": "e6cbbbc6830f8622df41fe417a44eea96af496cb", "Url": "https://api.github.com/repos/Weiyanyu/LMMall", "Date": "2018-06-30T13:45:01Z"},
{"Line": "12=>8", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Main.simpleLogicCalc(java.lang.String[])=>Assignment4.simpleLogicCalc(int,Main,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/785/buggy-version/Assignment4.src.Main.java", "BodyUseAPI": [], "Fixed commit": "83522b7e34feda88d0d7e6c1e2fe1a5070cd4e3d", "Url": "https://api.github.com/repos/anorangesky/IV1303", "Date": "2018-03-28T19:43:02Z"},
{"Line": "12=>8", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Main.simpleLogicCalc(java.lang.String[])=>Assignment4.simpleLogicCalc(int,Main,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/785/buggy-version/Assignment4.src.Main.java", "BodyUseAPI": [], "Fixed commit": "83522b7e34feda88d0d7e6c1e2fe1a5070cd4e3d", "Url": "https://api.github.com/repos/anorangesky/IV1303", "Date": "2018-03-28T19:43:02Z"},
{"Line": "51=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.listview.ConnectivityCheck.isWifiReachable(android.content.Context)=>com.example.listview.ConnectivityCheck.isWifiReachable(com.example.listview.MainActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4311/buggy-version/app.src.main.java.com.example.listview.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "fffe50c989e4b83c2aa83b3c3d1eefc504c05443", "Url": "https://api.github.com/repos/CortlandLizer/Project4", "Date": "2018-04-01T01:48:56Z"},
{"Line": "51=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.listview.ConnectivityCheck.isNetworkReachable(android.content.Context)=>com.example.listview.ConnectivityCheck.isNetworkReachable(com.example.listview.MainActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4311/buggy-version/app.src.main.java.com.example.listview.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "fffe50c989e4b83c2aa83b3c3d1eefc504c05443", "Url": "https://api.github.com/repos/CortlandLizer/Project4", "Date": "2018-04-01T01:48:56Z"},
{"Line": "50=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "butterknife.ButterKnife.bind(android.view.View)=>butterknife.ButterKnife.bind(com.codingblocks.chatter.RoomsFragment,android.view.View)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4961/buggy-version/app.src.main.java.com.codingblocks.chatter.RoomsFragment.java", "BodyUseAPI": [], "Fixed commit": "98589b23159de1cf04cf3368209c888b486f39e6", "Url": "https://api.github.com/repos/aggarwalpulkit596/Chatter", "Date": "2018-05-15T06:58:16Z"},
{"Line": "67=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.xml.stream.XMLStreamReader.nextTag()=>javax.xml.stream.XMLStreamReader.next()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7143/buggy-version/src.main.java.org.pageseeder.bridge.xml.stax.ElementXMLStreamHandler.java", "BodyUseAPI": [], "Fixed commit": "eed7bb061646bb458b99020487bc1f1ea523f19b", "Url": "https://api.github.com/repos/pageseeder/bridge", "Date": "2018-02-06T07:22:19Z"},
{"Line": "1267=>1268", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "appeng.api.AEApi.instance().storage().getStorageChannel(appeng.api.storage.channels.IItemStorageChannel.class).poweredInsert(getPowerSource(),p455w0rd.wct.container.ContainerWCT,appeng.api.AEApi.instance().storage().getStorageChannel(appeng.api.storage.channels.IItemStorageChannel.class).createStack(input),getActionSource())=>appeng.api.AEApi.instance().storage().getStorageChannel(appeng.api.storage.channels.IItemStorageChannel.class).poweredInsert(getPowerSource(),p455w0rd.wct.container.ContainerWCT,appeng.api.AEApi.instance().storage().getStorageChannel(appeng.api.storage.channels.IItemStorageChannel.class).createStack(input),getActionSource())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8376/buggy-version/src.main.java.p455w0rd.wct.container.ContainerWCT.java", "BodyUseAPI": [], "Fixed commit": "2b27b8cf74ab8545d8a57df3348ed36c4ed242a4", "Url": "https://api.github.com/repos/p455w0rd/WirelessCraftingTerminal", "Date": "2018-07-11T20:47:37Z"},
{"Line": "565=>565", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<android.support.v4.app.Fragment>.get(((willPopFragments.size()) - 1))=>java.util.List<android.support.v4.app.Fragment>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2129/buggy-version/fragmentation_core.src.main.java.me.yokeyword.fragmentation.TransactionDelegate.java", "BodyUseAPI": [], "Fixed commit": "fb59e4a133ed5a92547939a071859bae4759c707", "Url": "https://api.github.com/repos/YoKeyword/Fragmentation", "Date": "2018-03-08T06:45:10Z"},
{"Line": "39=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.navexplorer.library.communityfund.entity.BlockCycle.getCycle()=>com.navexplorer.library.communityfund.entity.BlockCycle.getFirstBlock()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8990/buggy-version/src.main.java.com.navexplorer.library.communityfund.entity.BlockCycle.java", "BodyUseAPI": [], "Fixed commit": "e3c53a7545d5a9628536ede301adfccccfee173e", "Url": "https://api.github.com/repos/NavExplorer/navexplorer-library", "Date": "2018-09-08T22:36:56Z"},
{"Line": "1046=>1046", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ArrayInt.D1.set(int,int)=>ArrayDouble.D1.set(int,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8727/buggy-version/verdi_data_loaders.src.anl.verdi.loaders.MPASDataset.java", "BodyUseAPI": [], "Fixed commit": "0d14aac90e5b03d2a39a478a8a9764e09f1c4d2b", "Url": "https://api.github.com/repos/CEMPD/VERDI", "Date": "2018-05-12T02:52:31Z"},
{"Line": "1054=>1054", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "ucar.nc2.dataset.CoordinateAxis1D.setCachedData(ArrayInt.D1,boolean)=>ucar.nc2.dataset.CoordinateAxis1D.setCachedData(ArrayDouble.D1,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8727/buggy-version/verdi_data_loaders.src.anl.verdi.loaders.MPASDataset.java", "BodyUseAPI": [], "Fixed commit": "0d14aac90e5b03d2a39a478a8a9764e09f1c4d2b", "Url": "https://api.github.com/repos/CEMPD/VERDI", "Date": "2018-05-12T02:52:31Z"},
{"Line": "68=>68", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.util.Log.i(java.lang.String,(\"Attempting to start service discovery:\" + (mBluetoothGatt.discoverServices())))=>android.util.Log.i(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9604/buggy-version/mble.app.src.main.java.com.ni.mble.BleService.java", "BodyUseAPI": [], "Fixed commit": "16d27fd5a516e01cfddcc63150e6690f62b45359", "Url": "https://api.github.com/repos/liliyayaqiqi/wildCode", "Date": "2018-07-05T05:07:19Z"},
{"Line": "51=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((android.widget.EditText) (findViewById(R.id.txtGroupName))).toString()=>findViewById(R.id.txtGroupName).toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8761/buggy-version/app.src.main.java.com.example.nils_martin.hubba.ViewModel.CreateGroupVM.java", "BodyUseAPI": [], "Fixed commit": "91a90872ed1ab85ed23dc1da9d462e4bbaaaf55d", "Url": "https://api.github.com/repos/Ponnis/Hubba", "Date": "2018-10-28T17:07:19Z"},
{"Line": "94=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.database.Cursor.getColumnIndex(ProductEntry.COLUMN_RRODUCT_CATEGORY)=>android.database.Cursor.getColumnIndex(ProductEntry.COLUMN_PRODUCT_QUANTITY)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8836/buggy-version/app.src.main.java.com.example.android.inventory.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "74c6789fe0623c7095fe580768c904db2570ff20", "Url": "https://api.github.com/repos/minaisaacfawzy/Inventory", "Date": "2018-08-19T04:08:31Z"},
{"Line": "42=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.fernandocejas.arrow.checks.Preconditions.checkNotNull(com.fernandocejas.android10.sample.domain.interactor.GetUserDetails.Params)=>com.fernandocejas.android10.sample.utils.Preconditions.checkNotNull(com.fernandocejas.android10.sample.domain.interactor.GetUserDetails.Params)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1588/buggy-version/domain.src.main.java.com.fernandocejas.android10.sample.domain.interactor.GetUserDetails.java", "BodyUseAPI": [], "Fixed commit": "0e6700ef814c264d175002ea486861307ed59424", "Url": "https://api.github.com/repos/javier-tarazaga/channel-app-android", "Date": "2018-02-25T21:20:47Z"},
{"Line": "59=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.fernandocejas.android10.sample.domain.interactor.Preconditions.checkNotNull(io.reactivex.observers.DisposableObserver<T>)=>com.fernandocejas.android10.sample.utils.Preconditions.checkNotNull(io.reactivex.observers.DisposableObserver<T>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1588/buggy-version/domain.src.main.java.com.fernandocejas.android10.sample.domain.interactor.UseCase.java", "BodyUseAPI": [], "Fixed commit": "0e6700ef814c264d175002ea486861307ed59424", "Url": "https://api.github.com/repos/javier-tarazaga/channel-app-android", "Date": "2018-02-25T21:20:47Z"},
{"Line": "79=>80", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.fernandocejas.android10.sample.domain.interactor.Preconditions.checkNotNull(io.reactivex.disposables.Disposable)=>com.fernandocejas.android10.sample.utils.Preconditions.checkNotNull(io.reactivex.disposables.Disposable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1588/buggy-version/domain.src.main.java.com.fernandocejas.android10.sample.domain.interactor.UseCase.java", "BodyUseAPI": [], "Fixed commit": "0e6700ef814c264d175002ea486861307ed59424", "Url": "https://api.github.com/repos/javier-tarazaga/channel-app-android", "Date": "2018-02-25T21:20:47Z"},
{"Line": "80=>81", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.fernandocejas.android10.sample.domain.interactor.Preconditions.checkNotNull(io.reactivex.disposables.CompositeDisposable)=>com.fernandocejas.android10.sample.utils.Preconditions.checkNotNull(io.reactivex.disposables.CompositeDisposable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1588/buggy-version/domain.src.main.java.com.fernandocejas.android10.sample.domain.interactor.UseCase.java", "BodyUseAPI": [], "Fixed commit": "0e6700ef814c264d175002ea486861307ed59424", "Url": "https://api.github.com/repos/javier-tarazaga/channel-app-android", "Date": "2018-02-25T21:20:47Z"},
{"Line": "128=>129", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.nio.CharBuffer.flip()=>java.nio.CharBuffer.flip()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8219/buggy-version/AndroidRipperDriver.src.main.java.it.unina.android.ripper.tools.lib.WrapProcess.java", "BodyUseAPI": [], "Fixed commit": "24d797973126a3905718ba2d26c901fb3d53bd5c", "Url": "https://api.github.com/repos/sangamk/AndroidRipper", "Date": "2018-05-24T23:49:18Z"},
{"Line": "130=>131", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.nio.CharBuffer.clear()=>java.nio.CharBuffer.clear()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8219/buggy-version/AndroidRipperDriver.src.main.java.it.unina.android.ripper.tools.lib.WrapProcess.java", "BodyUseAPI": [], "Fixed commit": "24d797973126a3905718ba2d26c901fb3d53bd5c", "Url": "https://api.github.com/repos/sangamk/AndroidRipper", "Date": "2018-05-24T23:49:18Z"},
{"Line": "48=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.schemarepo.server.SchemaJsonRenderer.notAcceptable(java.lang.String)=>org.schemarepo.RepositoryUtil.propertiesToString(java.util.Properties,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7629/buggy-version/server.src.main.java.org.schemarepo.server.SchemaJsonRenderer.java", "BodyUseAPI": [], "Fixed commit": "f7a13da6c3fe93f7be03ed9f8269438f4416c52f", "Url": "https://api.github.com/repos/chekore/schema-repo", "Date": "2018-09-19T03:37:47Z"},
{"Line": "65=>62", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.List<ru.kozlov_victor.routeonmap.Data.Model.CoordsItem>.addAll(response.body().getCoords())=>response.body().getCoords().size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2389/buggy-version/app.src.main.java.ru.kozlov_victor.routeonmap.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "070f65dd7671101151da2c5788e1ac6105fdba10", "Url": "https://api.github.com/repos/KozlovVictor/RouteOnMap", "Date": "2018-10-30T04:48:11Z"},
{"Line": "68=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<ru.kozlov_victor.routeonmap.Data.Model.CoordsItem>.get(int)=>response.body().getCoords().get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2389/buggy-version/app.src.main.java.ru.kozlov_victor.routeonmap.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "070f65dd7671101151da2c5788e1ac6105fdba10", "Url": "https://api.github.com/repos/KozlovVictor/RouteOnMap", "Date": "2018-10-30T04:48:11Z"},
{"Line": "68=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<ru.kozlov_victor.routeonmap.Data.Model.CoordsItem>.get(int)=>response.body().getCoords().get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2389/buggy-version/app.src.main.java.ru.kozlov_victor.routeonmap.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "070f65dd7671101151da2c5788e1ac6105fdba10", "Url": "https://api.github.com/repos/KozlovVictor/RouteOnMap", "Date": "2018-10-30T04:48:11Z"},
{"Line": "84=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.dogethereum.agents.core.SuperblockChallengerClient.checkClaimFinished(org.dogethereum.agents.core.dogecoin.Keccak256Hash)=>org.dogethereum.agents.core.SuperblockChallengerClient.rejectClaim(org.dogethereum.agents.core.dogecoin.Keccak256Hash)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5117/buggy-version/src.main.java.org.dogethereum.agents.core.SuperblockChallengerClient.java", "BodyUseAPI": [], "Fixed commit": "fdbecabf0bfb4a1d4a2510af39afd5ff1fefb12e", "Url": "https://api.github.com/repos/dogethereum/dogethereum-agents", "Date": "2018-08-15T16:30:38Z"},
{"Line": "31=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Map<java.lang.Character, java.lang.Integer>.getOrDefault(char,int)=>java.util.Map<java.lang.Character, java.lang.Integer>.get(char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/775/buggy-version/src.main.java.UniqueCommonAlphabet.java", "BodyUseAPI": [], "Fixed commit": "939701c2cede943df92e3c084d31dea94507cb5f", "Url": "https://api.github.com/repos/mrkagelui/practice_alphabet_manipulation", "Date": "2018-04-25T17:25:07Z"},
{"Line": "211=>209", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.esotericsoftware.kryo.Kryo.register(java.lang.Class,com.esotericsoftware.kryo.serializers.CollectionSerializer)=>com.esotericsoftware.kryo.Kryo.register(java.lang.Class,com.esotericsoftware.kryo.serializers.CollectionSerializer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8011/buggy-version/plugins.gradle.src.org.jetbrains.plugins.gradle.service.project.data.ExternalProjectSerializer.java", "BodyUseAPI": [], "Fixed commit": "7ac47ff8f81959e7f107aa4165d3f08cb2e11db8", "Url": "https://api.github.com/repos/fitermay/intellij-community", "Date": "2018-03-09T05:13:10Z"},
{"Line": "217=>227", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.esotericsoftware.kryo.Kryo.register(java.lang.Class,com.esotericsoftware.kryo.serializers.MapSerializer)=>com.esotericsoftware.kryo.Kryo.register(java.lang.Class,com.esotericsoftware.kryo.serializers.MapSerializer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8011/buggy-version/plugins.gradle.src.org.jetbrains.plugins.gradle.service.project.data.ExternalProjectSerializer.java", "BodyUseAPI": [], "Fixed commit": "7ac47ff8f81959e7f107aa4165d3f08cb2e11db8", "Url": "https://api.github.com/repos/fitermay/intellij-community", "Date": "2018-03-09T05:13:10Z"},
{"Line": "199=>221", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.esotericsoftware.kryo.Kryo.register(java.lang.Class,com.esotericsoftware.kryo.serializers.CollectionSerializer)=>com.esotericsoftware.kryo.Kryo.register(java.lang.Class,com.esotericsoftware.kryo.serializers.CollectionSerializer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8011/buggy-version/plugins.gradle.src.org.jetbrains.plugins.gradle.service.project.data.ExternalProjectSerializer.java", "BodyUseAPI": [], "Fixed commit": "7ac47ff8f81959e7f107aa4165d3f08cb2e11db8", "Url": "https://api.github.com/repos/fitermay/intellij-community", "Date": "2018-03-09T05:13:10Z"},
{"Line": "205=>215", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.esotericsoftware.kryo.Kryo.register(java.lang.Class,com.esotericsoftware.kryo.serializers.CollectionSerializer)=>com.esotericsoftware.kryo.Kryo.register(java.lang.Class,com.esotericsoftware.kryo.serializers.CollectionSerializer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8011/buggy-version/plugins.gradle.src.org.jetbrains.plugins.gradle.service.project.data.ExternalProjectSerializer.java", "BodyUseAPI": [], "Fixed commit": "7ac47ff8f81959e7f107aa4165d3f08cb2e11db8", "Url": "https://api.github.com/repos/fitermay/intellij-community", "Date": "2018-03-09T05:13:10Z"},
{"Line": "193=>203", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.esotericsoftware.kryo.Kryo.register(java.lang.Class,com.esotericsoftware.kryo.serializers.CollectionSerializer)=>com.esotericsoftware.kryo.Kryo.register(java.lang.Class,com.esotericsoftware.kryo.serializers.CollectionSerializer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8011/buggy-version/plugins.gradle.src.org.jetbrains.plugins.gradle.service.project.data.ExternalProjectSerializer.java", "BodyUseAPI": [], "Fixed commit": "7ac47ff8f81959e7f107aa4165d3f08cb2e11db8", "Url": "https://api.github.com/repos/fitermay/intellij-community", "Date": "2018-03-09T05:13:10Z"},
{"Line": "31=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "_04_hospital.Doctor.assignPatient(patients.get(i))=>java.util.ArrayList<_04_hospital.Doctor>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4261/buggy-version/src._04_hospital.Hospital.java", "BodyUseAPI": [], "Fixed commit": "a1aff7c26c52f6ed46e9d6e18e2acd59e8ebb096", "Url": "https://api.github.com/repos/SquawkyToucan/Encapsulation_and_Polymorphism", "Date": "2018-04-02T23:08:46Z"},
{"Line": "228=>228", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Collections.sort(java.util.List<java.lang.String>)=>java.util.Arrays.sort(java.lang.Integer[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1741/buggy-version/src.main.java.edu.hm.hafner.java.ui.IssuesDetailController.java", "BodyUseAPI": [], "Fixed commit": "b92e458e7ac905ff8b8a44fc1f9a0ff8a2f47a8d", "Url": "https://api.github.com/repos/hafner-hm-edu/dashboard-tdd-aufgabe_2_houser_pohl", "Date": "2018-06-10T12:36:43Z"},
{"Line": "228=>228", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Collections.sort(java.util.List<java.lang.String>)=>java.util.Arrays.sort(java.lang.Integer[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1741/buggy-version/src.main.java.edu.hm.hafner.java.ui.IssuesDetailController.java", "BodyUseAPI": [], "Fixed commit": "b92e458e7ac905ff8b8a44fc1f9a0ff8a2f47a8d", "Url": "https://api.github.com/repos/hafner-hm-edu/dashboard-tdd-aufgabe_2_houser_pohl", "Date": "2018-06-10T12:36:43Z"},
{"Line": "213=>212", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "glueSemantics.linearLogic.LLTerm.toPlainString()=>glueSemantics.linearLogic.LLTerm.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5213/buggy-version/src.glueSemantics.linearLogic.LLFormula.java", "BodyUseAPI": [], "Fixed commit": "493d1766c55aa03d4fd160f8dcb35e46d9947f29", "Url": "https://api.github.com/repos/mmessmer/glueSemWorkbench", "Date": "2018-07-12T13:29:05Z"},
{"Line": "207=>203", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, java.lang.String>.putAll(java.util.Map<java.lang.String, java.lang.String>)=>java.io.PrintStream.println((((\"entity \" + (entity.getContent())) + \" content \") + (entity.getUserProvidedContent())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6963/buggy-version/core.src.main.java.de.unistuttgart.iaas.amyassist.amy.core.natlang.NLProcessingManagerImpl.java", "BodyUseAPI": [], "Fixed commit": "8003fe9d59da62629f45c7f7efcf0a2658a3e615", "Url": "https://api.github.com/repos/AmyAssist/Amy", "Date": "2018-08-29T07:27:33Z"},
{"Line": "207=>203", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, java.lang.String>.putAll(java.util.Map<java.lang.String, java.lang.String>)=>de.unistuttgart.iaas.amyassist.amy.core.natlang.agf.nodes.EntityNode.getContent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6963/buggy-version/core.src.main.java.de.unistuttgart.iaas.amyassist.amy.core.natlang.NLProcessingManagerImpl.java", "BodyUseAPI": [], "Fixed commit": "8003fe9d59da62629f45c7f7efcf0a2658a3e615", "Url": "https://api.github.com/repos/AmyAssist/Amy", "Date": "2018-08-29T07:27:33Z"},
{"Line": "200=>200", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "de.unistuttgart.iaas.amyassist.amy.core.natlang.agf.nodes.AGFNode.getChilds()=>de.unistuttgart.iaas.amyassist.amy.core.natlang.agf.nodes.AGFNode.getChildEntityNodes()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6963/buggy-version/core.src.main.java.de.unistuttgart.iaas.amyassist.amy.core.natlang.NLProcessingManagerImpl.java", "BodyUseAPI": [], "Fixed commit": "8003fe9d59da62629f45c7f7efcf0a2658a3e615", "Url": "https://api.github.com/repos/AmyAssist/Amy", "Date": "2018-08-29T07:27:33Z"},
{"Line": "115=>114", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.ortiz.touchdemo.ChangeSizeExampleActivity.3.processScaleType(com.ortiz.touchdemo.ChangeSizeExampleActivity.scaleTypes[scaleTypeIndex])=>com.ortiz.touchdemo.ChangeSizeExampleActivity.3.processScaleType(com.ortiz.touchdemo.ChangeSizeExampleActivity.scaleTypes[scaleTypeIndex],boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9162/buggy-version/app.src.main.java.com.ortiz.touchdemo.ChangeSizeExampleActivity.java", "BodyUseAPI": [], "Fixed commit": "79b7e6e31e433968f69c8b71f30312e83825d7a3", "Url": "https://api.github.com/repos/Ruberik/TouchImageView", "Date": "2018-10-30T19:16:48Z"},
{"Line": "92=>91", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.ortiz.touchdemo.ChangeSizeExampleActivity.1.processScaleType(com.ortiz.touchdemo.ChangeSizeExampleActivity.scaleTypes[scaleTypeIndex])=>com.ortiz.touchdemo.ChangeSizeExampleActivity.1.processScaleType(com.ortiz.touchdemo.ChangeSizeExampleActivity.scaleTypes[scaleTypeIndex],boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9162/buggy-version/app.src.main.java.com.ortiz.touchdemo.ChangeSizeExampleActivity.java", "BodyUseAPI": [], "Fixed commit": "79b7e6e31e433968f69c8b71f30312e83825d7a3", "Url": "https://api.github.com/repos/Ruberik/TouchImageView", "Date": "2018-10-30T19:16:48Z"},
{"Line": "116=>116", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "documents.get(docNum).getCheckResults(java.lang.String,com.sun.star.lang.Locale,com.sun.star.linguistic2.ProofreadingResult,int[],boolean)=>documents.get(docNum).getCheckResults(java.lang.String,com.sun.star.linguistic2.ProofreadingResult,int[],boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/2311/buggy-version/languagetool-office-extension.src.main.java.org.languagetool.openoffice.MultiDocumentsHandler.java", "BodyUseAPI": [], "Fixed commit": "6d6fe753d4e39aae542b1377142671460a38e329", "Url": "https://api.github.com/repos/languagetool-org/languagetool", "Date": "2018-08-08T14:04:26Z"},
{"Line": "199=>200", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.support.v7.app.AppCompatActivity.onBackPressed()=>com.reactnativenavigation.controllers.NavigationActivity.moveTaskToBack(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3825/buggy-version/android.app.src.main.java.com.reactnativenavigation.controllers.NavigationActivity.java", "BodyUseAPI": [], "Fixed commit": "ea633d1c760e811d27e2ea8e7adcd4edf5b4a2d1", "Url": "https://api.github.com/repos/willlaserlike/react-native-navigation", "Date": "2018-02-13T06:46:33Z"},
{"Line": "85=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.lang.String>.add(java.lang.String)=>org.languagetool.Language.getCountries()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1221/buggy-version/languagetool-core.src.main.java.org.languagetool.language.LanguageIdentifier.java", "BodyUseAPI": [], "Fixed commit": "108abe38da9d70f733fd1dc34da991e5337e65bb", "Url": "https://api.github.com/repos/hyousi/languagetool", "Date": "2018-08-02T11:37:59Z"},
{"Line": "84=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<java.lang.String>.add(java.lang.String)=>java.util.List<java.lang.String>.add(((langCode + \"-\") + (lang.getCountries()[0])))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1221/buggy-version/languagetool-core.src.main.java.org.languagetool.language.LanguageIdentifier.java", "BodyUseAPI": [], "Fixed commit": "108abe38da9d70f733fd1dc34da991e5337e65bb", "Url": "https://api.github.com/repos/hyousi/languagetool", "Date": "2018-08-02T11:37:59Z"},
{"Line": "142=>142", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.apache.sysml.parser.dml.DmlParser.IndexedExpressionContext.getText()=>ctx.name.getText()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8199/buggy-version/src.main.java.org.apache.sysml.parser.dml.InlineHelper.java", "BodyUseAPI": [], "Fixed commit": "d712f03e765dc4726d4f492fbfb3634f4e5d811a", "Url": "https://api.github.com/repos/niketanpansare/systemml", "Date": "2018-09-23T00:15:30Z"},
{"Line": "135=>135", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.antlr.v4.runtime.TokenStreamRewriter.insertBefore(ctx.start,java.lang.String)=>org.antlr.v4.runtime.TokenStreamRewriter.insertBefore(ctx.name,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8199/buggy-version/src.main.java.org.apache.sysml.parser.dml.InlineHelper.java", "BodyUseAPI": [], "Fixed commit": "d712f03e765dc4726d4f492fbfb3634f4e5d811a", "Url": "https://api.github.com/repos/niketanpansare/systemml", "Date": "2018-09-23T00:15:30Z"},
{"Line": "69=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.LinearLayout.setOnTouchListener(com.example.dpgra.defectdetect.SlidingSpringAnimation)=>android.widget.LinearLayout.setOnTouchListener(animations.SlidingSpringAnimation)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3191/buggy-version/app.src.main.java.com.example.dpgra.defectdetect.PotholeListAdapter.java", "BodyUseAPI": [], "Fixed commit": "bca0ca33e28eaf4fe98d0615deb85eccbe7156d5", "Url": "https://api.github.com/repos/pinsondg/DefectDetect", "Date": "2018-08-08T19:06:30Z"},
{"Line": "68=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Button.setOnClickListener(com.example.dpgra.defectdetect.DeleteAnimation)=>android.widget.Button.setOnClickListener(animations.DeleteAnimation)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3191/buggy-version/app.src.main.java.com.example.dpgra.defectdetect.PotholeListAdapter.java", "BodyUseAPI": [], "Fixed commit": "bca0ca33e28eaf4fe98d0615deb85eccbe7156d5", "Url": "https://api.github.com/repos/pinsondg/DefectDetect", "Date": "2018-08-08T19:06:30Z"},
{"Line": "70=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.dpgra.defectdetect.PotholeListAdapter.registerDataSetObserver(com.example.dpgra.defectdetect.SlidingSpringAnimation)=>com.example.dpgra.defectdetect.PotholeListAdapter.registerDataSetObserver(animations.SlidingSpringAnimation)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3191/buggy-version/app.src.main.java.com.example.dpgra.defectdetect.PotholeListAdapter.java", "BodyUseAPI": [], "Fixed commit": "bca0ca33e28eaf4fe98d0615deb85eccbe7156d5", "Url": "https://api.github.com/repos/pinsondg/DefectDetect", "Date": "2018-08-08T19:06:30Z"},
{"Line": "182=>181", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.android.gms.maps.CameraUpdateFactory.newLatLngZoom(com.google.android.gms.maps.model.LatLng,double)=>com.google.android.gms.maps.CameraUpdateFactory.newLatLngZoom(com.google.android.gms.maps.model.LatLng,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3191/buggy-version/app.src.main.java.com.example.dpgra.defectdetect.MapFragment.java", "BodyUseAPI": [], "Fixed commit": "bca0ca33e28eaf4fe98d0615deb85eccbe7156d5", "Url": "https://api.github.com/repos/pinsondg/DefectDetect", "Date": "2018-08-08T19:06:30Z"},
{"Line": "234=>232", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.android.gms.maps.GoogleMap.animateCamera(com.google.android.gms.maps.CameraUpdate)=>com.example.dpgra.defectdetect.MapFragment.moveToLocation(location.getLatitude(),location.getLongitude())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3191/buggy-version/app.src.main.java.com.example.dpgra.defectdetect.MapFragment.java", "BodyUseAPI": [], "Fixed commit": "bca0ca33e28eaf4fe98d0615deb85eccbe7156d5", "Url": "https://api.github.com/repos/pinsondg/DefectDetect", "Date": "2018-08-08T19:06:30Z"},
{"Line": "107=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.matches(java.lang.String)=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3191/buggy-version/app.src.main.java.com.example.dpgra.defectdetect.PotholeListFragment.java", "BodyUseAPI": [], "Fixed commit": "bca0ca33e28eaf4fe98d0615deb85eccbe7156d5", "Url": "https://api.github.com/repos/pinsondg/DefectDetect", "Date": "2018-08-08T19:06:30Z"},
{"Line": "191=>193", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "water.fvec.Chunk.at8(int)=>java.lang.Math.max(long,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7779/buggy-version/h2o-core.src.main.java.water.rapids.RadixOrder.java", "BodyUseAPI": [], "Fixed commit": "449256e5fc594816dcaf6c91ebc2d95ccf8431d7", "Url": "https://api.github.com/repos/h2oai/h2o-3", "Date": "2018-06-06T01:44:44Z"},
{"Line": "3=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ListTest.run(ListType.arrayList)=>Main.testMethodInSepThread(java.lang.reflect.Method,ListType.arrayList)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9061/buggy-version/src.Main.java", "BodyUseAPI": [], "Fixed commit": "bb1fc9b7b8484dfb47f6c78ef4110225b5eea65f", "Url": "https://api.github.com/repos/Hoymm/ListTests", "Date": "2018-04-13T07:02:48Z"},
{"Line": "4=>9", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ListTest.run(ListType.linkedList)=>java.io.PrintStream.println(java.lang.reflect.Method[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/9061/buggy-version/src.Main.java", "BodyUseAPI": [], "Fixed commit": "bb1fc9b7b8484dfb47f6c78ef4110225b5eea65f", "Url": "https://api.github.com/repos/Hoymm/ListTests", "Date": "2018-04-13T07:02:48Z"},
{"Line": "167=>167", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.toString(int,int)=>java.lang.Long.toString(long,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8803/buggy-version/automata-and-logic-engineering-server.src.main.java.ale.server.ale.calculations.TruthTableBuilder.java", "BodyUseAPI": [], "Fixed commit": "ad6be817ba869630ede65a84d242eac0798ee9a5", "Url": "https://api.github.com/repos/dmarkov00/logic-engineering", "Date": "2018-04-07T22:23:08Z"},
{"Line": "166=>166", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(java.lang.String,int)=>java.lang.Long.parseLong(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8803/buggy-version/automata-and-logic-engineering-server.src.main.java.ale.server.ale.calculations.TruthTableBuilder.java", "BodyUseAPI": [], "Fixed commit": "ad6be817ba869630ede65a84d242eac0798ee9a5", "Url": "https://api.github.com/repos/dmarkov00/logic-engineering", "Date": "2018-04-07T22:23:08Z"},
{"Line": "166=>166", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(java.lang.String,int)=>java.lang.Long.parseLong(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8803/buggy-version/automata-and-logic-engineering-server.src.main.java.ale.server.ale.calculations.TruthTableBuilder.java", "BodyUseAPI": [], "Fixed commit": "ad6be817ba869630ede65a84d242eac0798ee9a5", "Url": "https://api.github.com/repos/dmarkov00/logic-engineering", "Date": "2018-04-07T22:23:08Z"},
{"Line": "112=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.hivemq.spi.config.SystemInformation.getPluginFolder()=>com.hivemq.spi.config.SystemInformation.getConfigFolder()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1601/buggy-version/src.main.java.com.hivemq.plugin.fileauthentication.configuration.Configuration.java", "BodyUseAPI": [], "Fixed commit": "d4f6074b8c953a1f962815e3cb90c5a8b8d55ba6", "Url": "https://api.github.com/repos/peez80/file-auth-plugin", "Date": "2018-03-09T10:13:39Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and().authorizeRequests().antMatchers(\"/auth/**\").permitAll().anyRequest()=>httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().anonymous().and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and().authorizeRequests().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6053/buggy-version/src.main.java.com.lol.AppConfig.java", "BodyUseAPI": [], "Fixed commit": "b8c5eb1cf7af7af2b668eff5a1dcfda4ebad35a9", "Url": "https://api.github.com/repos/milosrs/PickRecommender", "Date": "2018-09-01T14:48:05Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests()=>httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().anonymous()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6053/buggy-version/src.main.java.com.lol.AppConfig.java", "BodyUseAPI": [], "Fixed commit": "b8c5eb1cf7af7af2b668eff5a1dcfda4ebad35a9", "Url": "https://api.github.com/repos/milosrs/PickRecommender", "Date": "2018-09-01T14:48:05Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and().authorizeRequests().antMatchers(\"/auth/**\").permitAll().anyRequest().authenticated().and().authorizeRequests()=>httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().anonymous().and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and().authorizeRequests().antMatchers(\"/auth/**\").permitAll().anyRequest().authenticated()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6053/buggy-version/src.main.java.com.lol.AppConfig.java", "BodyUseAPI": [], "Fixed commit": "b8c5eb1cf7af7af2b668eff5a1dcfda4ebad35a9", "Url": "https://api.github.com/repos/milosrs/PickRecommender", "Date": "2018-09-01T14:48:05Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and().authorizeRequests().antMatchers(\"/auth/**\").permitAll().anyRequest().authenticated().and()=>httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().anonymous().and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and().authorizeRequests().antMatchers(\"/auth/**\").permitAll().anyRequest()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6053/buggy-version/src.main.java.com.lol.AppConfig.java", "BodyUseAPI": [], "Fixed commit": "b8c5eb1cf7af7af2b668eff5a1dcfda4ebad35a9", "Url": "https://api.github.com/repos/milosrs/PickRecommender", "Date": "2018-09-01T14:48:05Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and().authorizeRequests().antMatchers(\"/auth/**\").permitAll()=>httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().anonymous().and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and().authorizeRequests()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6053/buggy-version/src.main.java.com.lol.AppConfig.java", "BodyUseAPI": [], "Fixed commit": "b8c5eb1cf7af7af2b668eff5a1dcfda4ebad35a9", "Url": "https://api.github.com/repos/milosrs/PickRecommender", "Date": "2018-09-01T14:48:05Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and()=>httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().anonymous().and().authorizeRequests().antMatchers(HttpMethod.OPTIONS,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6053/buggy-version/src.main.java.com.lol.AppConfig.java", "BodyUseAPI": [], "Fixed commit": "b8c5eb1cf7af7af2b668eff5a1dcfda4ebad35a9", "Url": "https://api.github.com/repos/milosrs/PickRecommender", "Date": "2018-09-01T14:48:05Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(HttpMethod.OPTIONS,java.lang.String)=>httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().anonymous().and()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6053/buggy-version/src.main.java.com.lol.AppConfig.java", "BodyUseAPI": [], "Fixed commit": "b8c5eb1cf7af7af2b668eff5a1dcfda4ebad35a9", "Url": "https://api.github.com/repos/milosrs/PickRecommender", "Date": "2018-09-01T14:48:05Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and().authorizeRequests().antMatchers(java.lang.String)=>httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().anonymous().and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6053/buggy-version/src.main.java.com.lol.AppConfig.java", "BodyUseAPI": [], "Fixed commit": "b8c5eb1cf7af7af2b668eff5a1dcfda4ebad35a9", "Url": "https://api.github.com/repos/milosrs/PickRecommender", "Date": "2018-09-01T14:48:05Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and().authorizeRequests()=>httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().anonymous().and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6053/buggy-version/src.main.java.com.lol.AppConfig.java", "BodyUseAPI": [], "Fixed commit": "b8c5eb1cf7af7af2b668eff5a1dcfda4ebad35a9", "Url": "https://api.github.com/repos/milosrs/PickRecommender", "Date": "2018-09-01T14:48:05Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and().authorizeRequests().antMatchers(\"/auth/**\").permitAll().anyRequest().authenticated()=>httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().anonymous().and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll().and().authorizeRequests().antMatchers(\"/auth/**\").permitAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6053/buggy-version/src.main.java.com.lol.AppConfig.java", "BodyUseAPI": [], "Fixed commit": "b8c5eb1cf7af7af2b668eff5a1dcfda4ebad35a9", "Url": "https://api.github.com/repos/milosrs/PickRecommender", "Date": "2018-09-01T14:48:05Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(HttpMethod.OPTIONS, \"/*\").permitAll()=>httpSecurity.csrf().disable().cors().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().anonymous().and().authorizeRequests()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6053/buggy-version/src.main.java.com.lol.AppConfig.java", "BodyUseAPI": [], "Fixed commit": "b8c5eb1cf7af7af2b668eff5a1dcfda4ebad35a9", "Url": "https://api.github.com/repos/milosrs/PickRecommender", "Date": "2018-09-01T14:48:05Z"},
{"Line": "276=>276", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "tokens[(i - 1)].getToken()=>org.languagetool.rules.de.VerbAgreementRule.isQuotationMark(tokens[(i - 1)])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/1325/buggy-version/languagetool-language-modules.de.src.main.java.org.languagetool.rules.de.VerbAgreementRule.java", "BodyUseAPI": [], "Fixed commit": "c93cf60668c6f03c80e3ab508ff122f98ca3a5de", "Url": "https://api.github.com/repos/oserikov/languagetool", "Date": "2018-03-07T18:00:24Z"},
{"Line": "138=>138", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.packetpub.libgdx.canyonbunny.game.objects.AbstractGameObject.equals(com.badlogic.gdx.graphics.g2d.Sprite)=>com.packetpub.libgdx.canyonbunny.game.objects.AbstractGameObject.equals(com.packetpub.libgdx.canyonbunny.game.objects.AbstractGameObject)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8658/buggy-version/core.src.com.packetpub.libgdx.canyonbunny.util.CameraHelper.java", "BodyUseAPI": [], "Fixed commit": "584b61153f3909031616e4910850d1dfc155989a", "Url": "https://api.github.com/repos/gw3003/CSC361_F18_G6", "Date": "2018-09-26T03:16:14Z"},
{"Line": "185=>186", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.badlogic.gdx.graphics.g2d.BitmapFont.drawMultiLine(com.badlogic.gdx.graphics.g2d.SpriteBatch,java.lang.String,float,float,int,BitmapFont.HAlignment.CENTER)=>com.badlogic.gdx.graphics.g2d.BitmapFont.draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,java.lang.String,float,float,int,Align.center,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8658/buggy-version/core.src.com.packetpub.libgdx.canyonbunny.game.WorldRenderer.java", "BodyUseAPI": [], "Fixed commit": "584b61153f3909031616e4910850d1dfc155989a", "Url": "https://api.github.com/repos/gw3003/CSC361_F18_G6", "Date": "2018-09-26T03:16:14Z"},
{"Line": "185=>186", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.badlogic.gdx.graphics.g2d.BitmapFont.drawMultiLine(com.badlogic.gdx.graphics.g2d.SpriteBatch,java.lang.String,float,float,int,BitmapFont.HAlignment.CENTER)=>com.badlogic.gdx.graphics.g2d.BitmapFont.draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,java.lang.String,float,float,int,Align.center,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/8658/buggy-version/core.src.com.packetpub.libgdx.canyonbunny.game.WorldRenderer.java", "BodyUseAPI": [], "Fixed commit": "584b61153f3909031616e4910850d1dfc155989a", "Url": "https://api.github.com/repos/gw3003/CSC361_F18_G6", "Date": "2018-09-26T03:16:14Z"},
{"Line": "78=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "ceregosetbuilder.WordReferenceEntry.getPOS(PartsOfSpeech.NOUN,java.lang.String)=>ceregosetbuilder.WordReferenceEntry.getPOS(PartsOfSpeech.ADJECTIVE,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7561/buggy-version/WordReferenceEntry.java", "BodyUseAPI": [], "Fixed commit": "a4df5b957e5538693307086c4d9e2bfe7514562f", "Url": "https://api.github.com/repos/GlennInDC/CeregoSetBuilder", "Date": "2018-03-10T05:03:13Z"},
{"Line": "134=>134", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.talend.hadoop.distribution.cdh5100.modulegroup.node.sparkbatch.CDH5100GraphFramesNodeModuleGroup.getModuleGroups(java.lang.String,java.lang.String)=>org.talend.hadoop.distribution.cdh5100.modulegroup.node.sparkbatch.CDH5100GraphFramesNodeModuleGroup.getModuleGroups(java.lang.String,java.lang.String,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4545/buggy-version/main.plugins.org.talend.hadoop.distribution.cdh5100.src.main.java.org.talend.hadoop.distribution.cdh5100.CDH5100Distribution.java", "BodyUseAPI": [], "Fixed commit": "fa1fd93d37fb1e96b05b05df8610167d3449f757", "Url": "https://api.github.com/repos/Talend/tbd-studio-se", "Date": "2018-01-09T17:28:10Z"},
{"Line": "31=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Set<org.talend.hadoop.distribution.DistributionModuleGroup>.add(org.talend.hadoop.distribution.DistributionModuleGroup)=>java.util.Set<org.talend.hadoop.distribution.DistributionModuleGroup>.addAll(org.talend.hadoop.distribution.utils.ModuleGroupsUtils.getModuleGroups(distribution, version, cc21, CDH5100Constant.SPARK2_GRAPHFRAMES_MRREQUIRED_MODULE_GROUP.getModuleName(), true))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4545/buggy-version/main.plugins.org.talend.hadoop.distribution.cdh5100.src.main.java.org.talend.hadoop.distribution.cdh5100.modulegroup.node.sparkbatch.CDH5100GraphFramesNodeModuleGroup.java", "BodyUseAPI": [], "Fixed commit": "fa1fd93d37fb1e96b05b05df8610167d3449f757", "Url": "https://api.github.com/repos/Talend/tbd-studio-se", "Date": "2018-01-09T17:28:10Z"},
{"Line": "31=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<org.talend.hadoop.distribution.DistributionModuleGroup>.add(org.talend.hadoop.distribution.DistributionModuleGroup)=>org.talend.hadoop.distribution.utils.ModuleGroupsUtils.getModuleGroups(java.lang.String,java.lang.String,org.talend.hadoop.distribution.condition.ComponentCondition,CDH5100Constant.SPARK2_GRAPHFRAMES_MRREQUIRED_MODULE_GROUP.getModuleName(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/4545/buggy-version/main.plugins.org.talend.hadoop.distribution.cdh5100.src.main.java.org.talend.hadoop.distribution.cdh5100.modulegroup.node.sparkbatch.CDH5100GraphFramesNodeModuleGroup.java", "BodyUseAPI": [], "Fixed commit": "fa1fd93d37fb1e96b05b05df8610167d3449f757", "Url": "https://api.github.com/repos/Talend/tbd-studio-se", "Date": "2018-01-09T17:28:10Z"},
{"Line": "174=>174", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "eu.europa.ec.fisheries.uvms.rules.service.business.generator.ActivityRequestFactGenerator.addFactsForVesselTransportMeansStructuresAddress(java.util.List<eu.europa.ec.fisheries.uvms.rules.service.business.AbstractFact>,activity.getRelatedVesselTransportMeans())=>eu.europa.ec.fisheries.uvms.rules.service.business.generator.ActivityRequestFactGenerator.addFactsForVesselTransportMeansStructuresAddress(java.util.List<eu.europa.ec.fisheries.uvms.rules.service.business.AbstractFact>,activity.getRelatedVesselTransportMeans(),eu.europa.ec.fisheries.uvms.rules.service.business.generator.RELATED_VESSEL_TRANSPORT_MEANS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3497/buggy-version/service.src.main.java.eu.europa.ec.fisheries.uvms.rules.service.business.generator.ActivityRequestFactGenerator.java", "BodyUseAPI": [], "Fixed commit": "f8cc7215d97dea12975f135d11011472bcc81125", "Url": "https://api.github.com/repos/UnionVMS/UVMS-RulesModule-APP", "Date": "2018-04-24T12:09:07Z"},
{"Line": "275=>275", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "xPathUtil.appendWithoutWrapping(partialXpath).appendWithIndex(eu.europa.ec.fisheries.uvms.rules.service.business.generator.RELATED_VESSEL_TRANSPORT_MEANS,int)=>xPathUtil.appendWithoutWrapping(partialXpath).appendWithIndex(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3497/buggy-version/service.src.main.java.eu.europa.ec.fisheries.uvms.rules.service.business.generator.ActivityRequestFactGenerator.java", "BodyUseAPI": [], "Fixed commit": "f8cc7215d97dea12975f135d11011472bcc81125", "Url": "https://api.github.com/repos/UnionVMS/UVMS-RulesModule-APP", "Date": "2018-04-24T12:09:07Z"},
{"Line": "139=>139", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "eu.europa.ec.fisheries.uvms.rules.service.business.generator.ActivityRequestFactGenerator.addFactsForVesselTransportMeansStructuresAddress(java.util.List<eu.europa.ec.fisheries.uvms.rules.service.business.AbstractFact>,java.util.List)=>eu.europa.ec.fisheries.uvms.rules.service.business.generator.ActivityRequestFactGenerator.addFactsForVesselTransportMeansStructuresAddress(java.util.List<eu.europa.ec.fisheries.uvms.rules.service.business.AbstractFact>,java.util.List,eu.europa.ec.fisheries.uvms.rules.service.business.generator.SPECIFIED_VESSEL_TRANSPORT_MEANS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/3497/buggy-version/service.src.main.java.eu.europa.ec.fisheries.uvms.rules.service.business.generator.ActivityRequestFactGenerator.java", "BodyUseAPI": [], "Fixed commit": "f8cc7215d97dea12975f135d11011472bcc81125", "Url": "https://api.github.com/repos/UnionVMS/UVMS-RulesModule-APP", "Date": "2018-04-24T12:09:07Z"},
{"Line": "38=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.sql.PreparedStatement.setInt(int,transaction.getTraderID())=>java.sql.PreparedStatement.setLong(int,transaction.getTraderID())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6949/buggy-version/src.main.java.com.cs.trader.dao.TransactionDao.java", "BodyUseAPI": [], "Fixed commit": "eebdbc0b722ac70099ac515eaa4676eaedc91cc3", "Url": "https://api.github.com/repos/kanakkabara/cs-trader", "Date": "2018-08-16T05:58:12Z"},
{"Line": "37=>37", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.sql.PreparedStatement.setInt(int,transaction.getOrderID())=>java.sql.PreparedStatement.setLong(int,transaction.getOrderID())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/6949/buggy-version/src.main.java.com.cs.trader.dao.TransactionDao.java", "BodyUseAPI": [], "Fixed commit": "eebdbc0b722ac70099ac515eaa4676eaedc91cc3", "Url": "https://api.github.com/repos/kanakkabara/cs-trader", "Date": "2018-08-16T05:58:12Z"},
{"Line": "40=>40", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "AvatarChatMessages.MSG_ANNOUNCEMENT.send(e.player,com.crowsofwar.avatar.common.AvatarAnnouncements.Announcement,long)=>AvatarChatMessages.MSG_ANNOUNCEMENT.send(e.player,java.lang.String,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/7256/buggy-version/src.main.java.com.crowsofwar.avatar.common.AvatarAnnouncements.java", "BodyUseAPI": [], "Fixed commit": "44ff111d14774f684dd8fbd570bfa3e9e98727a7", "Url": "https://api.github.com/repos/ProjectKorra/AvatarMod", "Date": "2018-01-09T02:06:04Z"},
{"Line": "67=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.PrintStream.println(double)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V145/5047/buggy-version/src.org.usfirst.frc1388.commands.Drive.java", "BodyUseAPI": [], "Fixed commit": "fc23dac53cfdf765042f3ad7242f6447e2da78f0", "Url": "https://api.github.com/repos/AGHSEagleRobotics/frc-1388-2018", "Date": "2018-01-31T03:18:17Z"},
{"Line": "41=>41", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Objects.toString(result.get(\"openid\"),java.lang.String)=>result.get(\"openid\").asText()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4012/buggy-version/src.main.java.com.laohans.amuse.ActivityController.java", "BodyUseAPI": [], "Fixed commit": "c6215acc1d8dafa4638f3e7eb42c630c982ebdb4", "Url": "https://api.github.com/repos/laohans/amuse", "Date": "2018-07-01T00:39:02Z"},
{"Line": "23=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getParent(modifier),jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory.getConcept(-935030926396207931L, -6610165693999523818L, 1068580123165L, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\"))=>jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(org.jetbrains.mps.openapi.model.SNode,jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory.getConcept(-935030926396207931L, -6610165693999523818L, 1068580123165L, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2282/buggy-version/languages.baseLanguage.jdk8.languages.jdk8.source_gen.jetbrains.mps.baseLanguage.jdk8.typesystem.check_DefaultMethodIsNotAbstract_NonTypesystemRule.java", "BodyUseAPI": [], "Fixed commit": "4d79edf09a019291abf0e2b19baa758e419888dc", "Url": "https://api.github.com/repos/JetBrains/MPS", "Date": "2018-10-25T18:18:33Z"},
{"Line": "67=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.flink.client.program.rest.RestClusterClient.setDetached(boolean)=>org.apache.flink.client.program.StandaloneClusterClient.setDetached(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/355/buggy-version/flinkx-launcher.src.main.java.com.dtstack.flinkx.launcher.ClusterClientFactory.java", "BodyUseAPI": [], "Fixed commit": "571ef325a5db3213f3844daca53f1d9c525b3267", "Url": "https://api.github.com/repos/DTStack/flinkx", "Date": "2018-10-16T08:50:59Z"},
{"Line": "241=>241", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.liferay.portal.kernel.editor.configuration.EditorConfigurationFactoryUtil.getEditorConfiguration(com.liferay.portal.kernel.portlet.PortletIdCodec.decodePortletName(portletDisplay.getId()),java.lang.String,StringPool.BLANK,java.util.Map<java.lang.Object, java.lang.Object>,com.liferay.portal.kernel.theme.ThemeDisplay,com.liferay.portal.kernel.portlet.RequestBackedPortletURLFactoryUtil.create(_renderRequest))=>com.liferay.portal.kernel.editor.configuration.EditorConfigurationFactoryUtil.getEditorConfiguration(com.liferay.portal.kernel.portlet.PortletIdCodec.decodePortletName(portletDisplay.getId()),java.lang.String,StringPool.BLANK,java.util.HashMap<java.lang.String, java.lang.Object>,com.liferay.portal.kernel.theme.ThemeDisplay,com.liferay.portal.kernel.portlet.RequestBackedPortletURLFactoryUtil.create(_renderRequest))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3511/buggy-version/modules.apps.fragment.fragment-display-web.src.main.java.com.liferay.fragment.display.web.internal.display.context.FragmentEntryDisplayContext.java", "BodyUseAPI": [], "Fixed commit": "9aaedf579e3442691ea70cd82059bc73376d3b8e", "Url": "https://api.github.com/repos/ealonso/liferay-portal", "Date": "2018-06-13T13:42:48Z"},
{"Line": "232=>232", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.liferay.portal.kernel.editor.configuration.EditorConfigurationFactoryUtil.getEditorConfiguration(com.liferay.portal.kernel.portlet.PortletIdCodec.decodePortletName(portletDisplay.getId()),java.lang.String,StringPool.BLANK,java.util.Map<java.lang.Object, java.lang.Object>,com.liferay.portal.kernel.theme.ThemeDisplay,com.liferay.portal.kernel.portlet.RequestBackedPortletURLFactoryUtil.create(_renderRequest))=>com.liferay.portal.kernel.editor.configuration.EditorConfigurationFactoryUtil.getEditorConfiguration(com.liferay.portal.kernel.portlet.PortletIdCodec.decodePortletName(portletDisplay.getId()),java.lang.String,StringPool.BLANK,java.util.HashMap<java.lang.String, java.lang.Object>,com.liferay.portal.kernel.theme.ThemeDisplay,com.liferay.portal.kernel.portlet.RequestBackedPortletURLFactoryUtil.create(_renderRequest))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3511/buggy-version/modules.apps.fragment.fragment-display-web.src.main.java.com.liferay.fragment.display.web.internal.display.context.FragmentEntryDisplayContext.java", "BodyUseAPI": [], "Fixed commit": "9aaedf579e3442691ea70cd82059bc73376d3b8e", "Url": "https://api.github.com/repos/ealonso/liferay-portal", "Date": "2018-06-13T13:42:48Z"},
{"Line": "25=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.bukkit.event.block.BlockPlaceEvent.getPlayer()=>org.bukkit.event.block.BlockPlaceEvent.getPlayer()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1733/buggy-version/src.main.java.net.dzikoysk.funnyguilds.listener.region.BlockPlace.java", "BodyUseAPI": [], "Fixed commit": "a0213abd2f5553d0c96069bbfcde47343cc21ddf", "Url": "https://api.github.com/repos/FunnyGuilds/FunnyGuilds", "Date": "2018-08-19T20:33:26Z"},
{"Line": "26=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.bukkit.inventory.ItemStack.setAmount(int)=>org.bukkit.inventory.ItemStack.setAmount(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1733/buggy-version/src.main.java.net.dzikoysk.funnyguilds.listener.region.BlockPlace.java", "BodyUseAPI": [], "Fixed commit": "a0213abd2f5553d0c96069bbfcde47343cc21ddf", "Url": "https://api.github.com/repos/FunnyGuilds/FunnyGuilds", "Date": "2018-08-19T20:33:26Z"},
{"Line": "21=>23", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.bukkit.Bukkit.getScheduler().runTaskLater(net.dzikoysk.funnyguilds.FunnyGuilds.getInstance(),() -> { e.getBlockReplacedState().update(true); if (config.buggedBlockReturn) { org.bukkit.inventory.ItemStack returnItem = e.getPlayer().getItemInHand().clone(); returnItem.setAmount(1); e.getPlayer().getInventory().addItem(returnItem); } },config.buggedBlocksTimer)=>org.bukkit.Bukkit.getScheduler().runTaskLater(net.dzikoysk.funnyguilds.FunnyGuilds.getInstance(),() -> { e.getBlockReplacedState().update(true); if (config.buggedBlockReturn) { e.getPlayer().getInventory().addItem(returnItem); } },config.buggedBlocksTimer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1733/buggy-version/src.main.java.net.dzikoysk.funnyguilds.listener.region.BlockPlace.java", "BodyUseAPI": [], "Fixed commit": "a0213abd2f5553d0c96069bbfcde47343cc21ddf", "Url": "https://api.github.com/repos/FunnyGuilds/FunnyGuilds", "Date": "2018-08-19T20:33:26Z"},
{"Line": "71=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "act.storage.StorageServiceManager.addDbHooker(act.storage.db.DbHooker)=>event.source().addDbHooker(act.storage.db.DbHooker)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7276/buggy-version/src.main.java.act.storage.db.DbProbe.java", "BodyUseAPI": [], "Fixed commit": "2d14a875737b2acc6a57c6b99220f4754cfcaf8e", "Url": "https://api.github.com/repos/actframework/act-storage", "Date": "2018-10-25T19:49:47Z"},
{"Line": "71=>71", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "act.storage.StorageServiceManager.addDbHooker(act.storage.db.DbHooker)=>act.storage.StorageServiceManagerInitialized.source()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7276/buggy-version/src.main.java.act.storage.db.DbProbe.java", "BodyUseAPI": [], "Fixed commit": "2d14a875737b2acc6a57c6b99220f4754cfcaf8e", "Url": "https://api.github.com/repos/actframework/act-storage", "Date": "2018-10-25T19:49:47Z"},
{"Line": "52=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.apollo.objects.OrderReply.getState()=>com.apollo.objects.OrderReply.getResult()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8938/buggy-version/apolloRunner.src.main.java.com.apollo.messaging.MessageReceiver.java", "BodyUseAPI": [], "Fixed commit": "cd46ec97fb5b27722a7a38d03a936b884c0a36b1", "Url": "https://api.github.com/repos/zoegrippo/apollo", "Date": "2018-08-01T21:10:33Z"},
{"Line": "23=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "isd.internship.ala.repositories.LeaveRequestTypeRepository.getOne(java.lang.Integer)=>isd.internship.ala.repositories.LeaveRequestTypeRepository.getOne(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8889/buggy-version/backend.src.main.java.isd.internship.ala.services.impl.LeaveRequestTypeServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "7adda0437d43e70ca3a9e218289515a6b6833270", "Url": "https://api.github.com/repos/isd-soft/annual-leave-assistant", "Date": "2018-07-06T12:06:55Z"},
{"Line": "41=>41", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "isd.internship.ala.repositories.LeaveRequestTypeRepository.deleteById(java.lang.Integer)=>isd.internship.ala.repositories.LeaveRequestTypeRepository.deleteById(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8889/buggy-version/backend.src.main.java.isd.internship.ala.services.impl.LeaveRequestTypeServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "7adda0437d43e70ca3a9e218289515a6b6833270", "Url": "https://api.github.com/repos/isd-soft/annual-leave-assistant", "Date": "2018-07-06T12:06:55Z"},
{"Line": "33=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "isd.internship.ala.services.LeaveRequestTypeService.deleteById(java.lang.Integer)=>isd.internship.ala.services.LeaveRequestTypeService.deleteById(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8889/buggy-version/backend.src.main.java.isd.internship.ala.controllers.LeaveRequestTypeController.java", "BodyUseAPI": [], "Fixed commit": "7adda0437d43e70ca3a9e218289515a6b6833270", "Url": "https://api.github.com/repos/isd-soft/annual-leave-assistant", "Date": "2018-07-06T12:06:55Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cs361.battleships.models.Board.placeShip(cs361.battleships.models.Ship,int,char,cs361.battleships.models.Game)=>cs361.battleships.models.Board.placeShip(cs361.battleships.models.Ship,int,char,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6300/buggy-version/src.main.java.cs361.battleships.models.Game.java", "BodyUseAPI": [], "Fixed commit": "23edbd4756d7aafb573767de207a4876142543ec", "Url": "https://api.github.com/repos/cs361fall2018/project-team17", "Date": "2018-10-12T23:50:57Z"},
{"Line": "40=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.format(java.lang.String,int,int,long)=>java.lang.String.format(java.util.Locale,java.lang.String,int,int,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3491/buggy-version/graphenej.src.main.java.cy.agorise.graphenej.GrapheneObject.java", "BodyUseAPI": [], "Fixed commit": "8bbf68ce6d87d3996d4271cc00ddf7f40509aca7", "Url": "https://api.github.com/repos/Agorise/graphenej", "Date": "2018-10-09T16:32:46Z"},
{"Line": "151=>151", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.uber.cadence.workflow.Async.procedure(() -> procedure.apply(arg1))=>com.uber.cadence.internal.sync.AsyncInternal.procedure(procedure,A1)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4290/buggy-version/src.main.java.com.uber.cadence.workflow.Async.java", "BodyUseAPI": [], "Fixed commit": "13c936b19c4ac3ab8c6ed2bef96175c33e06b868", "Url": "https://api.github.com/repos/mfateev/uber-java-cadence-client", "Date": "2018-04-25T22:59:44Z"},
{"Line": "34=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "sysADL_Sintax.Requirement.eContainer()=>sysADL_Sintax.util.SysADLCreationTools.getModel(sysADL_Sintax.Requirement)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/852/buggy-version/SysADL.viewpoints.src.sysadl.viewpoints.actions.RequirementAssignSatisfy.java", "BodyUseAPI": [], "Fixed commit": "e9413d2b4ef256526c67cd478846bd607c8b4229", "Url": "https://api.github.com/repos/eduardoafs/sysadl", "Date": "2018-03-17T18:16:43Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "pl.droidsonroids.gif.GifImageView.setImageResource(R.drawable.logowait)=>pl.droidsonroids.gif.GifImageView.setImageResource(R.drawable.logogif)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3970/buggy-version/app.src.main.java.fr.hs.explorateurfichier2.checkSd.java", "BodyUseAPI": [], "Fixed commit": "d42961e6510829475e64d3ef143c85dff23c08e6", "Url": "https://api.github.com/repos/hassansaadfr/SimpleFileExplorer", "Date": "2018-07-21T00:48:00Z"},
{"Line": "130=>125", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.debug(java.lang.String,int)=>org.slf4j.Logger.debug(java.lang.String,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3508/buggy-version/src.main.java.nl.junglecomputing.common_source_identification.CorrelationsNodeActivity.java", "BodyUseAPI": [], "Fixed commit": "834c90c792ca11b3f576088e9ffd7ad7b0130ce6", "Url": "https://api.github.com/repos/JungleComputing/common-source-identification-cashmere", "Date": "2018-09-20T18:04:09Z"},
{"Line": "41=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] onCreate(android.database.sqlite.SQLiteDatabase)=>[public] onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3267/buggy-version/app.src.main.java.com.orangetree.tcs.cis454proj1.Database.java", "BodyUseAPI": [], "Fixed commit": "a7656cbdd42018c18a979fbacf003e86871dbd38", "Url": "https://api.github.com/repos/BrainFRZ/cis454proj1", "Date": "2018-02-18T21:27:40Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "ide.view.dock.ProjectExplorerDock.add(javax.swing.JTree,java.lang.String)=>ide.view.dock.ProjectExplorerDock.add(javax.swing.JScrollPane,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5400/buggy-version/src.ide.view.dock.ProjectExplorerDock.java", "BodyUseAPI": [], "Fixed commit": "13d024ba934431c9548e84d2eca1ce6264f4eecd", "Url": "https://api.github.com/repos/suppressf0rce/groove", "Date": "2018-01-17T21:49:31Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.dbpedia.infoboxprov.io.CLParser.getThreadsF()=>org.dbpedia.infoboxprov.io.CLParser.getThreads()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/314/buggy-version/src.main.java.org.dbpedia.infoboxprov.rdf.ProvenanceManager.java", "BodyUseAPI": [], "Fixed commit": "b38198d076a8a0da2eba1aacb437c8790eb43cae", "Url": "https://api.github.com/repos/AKSW/InfoboxProvenanceTracking", "Date": "2018-08-05T23:54:52Z"},
{"Line": "105=>106", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.devbrackets.android.exomedia.ui.widget.FitsSystemWindowRelativeLayout.setPadding(originalPadding.left,int,int,int)=>com.devbrackets.android.exomedia.ui.widget.FitsSystemWindowRelativeLayout.setPadding(int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8876/buggy-version/library.src.main.java.com.devbrackets.android.exomedia.ui.widget.FitsSystemWindowRelativeLayout.java", "BodyUseAPI": [], "Fixed commit": "2202fb3e29aa9b8336d8c267b2dabab7ef0c3f3a", "Url": "https://api.github.com/repos/brianwernick/ExoMedia", "Date": "2018-05-07T21:17:55Z"},
{"Line": "194=>195", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.PrintWriter.write(char[])=>java.io.PrintWriter.write(char[],int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5755/buggy-version/src.main.java.catchat.data.auth.GroupMeOAuthService.java", "BodyUseAPI": [], "Fixed commit": "6a6ced4d6554daf56b1ee804765004f89e1c5777", "Url": "https://api.github.com/repos/HolmanA/CatChat", "Date": "2018-03-31T06:34:25Z"},
{"Line": "28=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.android.miwok.SearchableActivity.setContentView(R.layout.word_list)=>com.example.android.miwok.SearchableActivity.setContentView(R.layout.activity_main)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/778/buggy-version/app.src.main.java.com.example.android.miwok.SearchableActivity.java", "BodyUseAPI": [], "Fixed commit": "190696d92760783877b608067eb8482220050531", "Url": "https://api.github.com/repos/MalgoskaG/famous_women", "Date": "2018-02-10T15:42:05Z"},
{"Line": "31=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.gson.Gson.fromJson(java.lang.String,java.lang.Class)=>com.google.gson.Gson.fromJson(com.google.gson.JsonObject,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6570/buggy-version/src.main.java.server.messageHandler.SeaBattleGameMessageHandler.java", "BodyUseAPI": [], "Fixed commit": "2be56df4b681a5be238a8533a547865fb58f23e7", "Url": "https://api.github.com/repos/ZachteBank/zeeslag", "Date": "2018-04-12T16:05:46Z"},
{"Line": "31=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.gson.Gson.fromJson(java.lang.String,java.lang.Class)=>com.google.gson.Gson.fromJson(com.google.gson.JsonObject,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6570/buggy-version/src.main.java.server.messageHandler.SeaBattleGameMessageHandler.java", "BodyUseAPI": [], "Fixed commit": "2be56df4b681a5be238a8533a547865fb58f23e7", "Url": "https://api.github.com/repos/ZachteBank/zeeslag", "Date": "2018-04-12T16:05:46Z"},
{"Line": "58=>58", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "co.aurasphere.botmill.fb.messengerprofile.FbBotMillMessengerProfileConfiguration.setGetStartedButton(java.lang.String)=>co.aurasphere.botmill.fb.threadsettings.FbBotMillThreadSettingsConfiguration.setGetStartedButton(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4250/buggy-version/src.main.java.co.aurasphere.botmill.demo.fb.MessengerProfileConfiguration.java", "BodyUseAPI": [], "Fixed commit": "e4b44a20b0484374adac9f72cb5302bd16b4fa23", "Url": "https://api.github.com/repos/aurasphere/fb-botmill-simple-demo-bot", "Date": "2018-01-08T11:48:24Z"},
{"Line": "60=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "co.aurasphere.botmill.fb.messengerprofile.FbBotMillMessengerProfileConfiguration.setGreetingMessage(java.lang.String)=>co.aurasphere.botmill.fb.threadsettings.FbBotMillThreadSettingsConfiguration.setGreetingMessage(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4250/buggy-version/src.main.java.co.aurasphere.botmill.demo.fb.MessengerProfileConfiguration.java", "BodyUseAPI": [], "Fixed commit": "e4b44a20b0484374adac9f72cb5302bd16b4fa23", "Url": "https://api.github.com/repos/aurasphere/fb-botmill-simple-demo-bot", "Date": "2018-01-08T11:48:24Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "co.aurasphere.botmill.fb.messengerprofile.FbBotMillMessengerProfileConfiguration.setGetStartedButton(java.lang.String)=>co.aurasphere.botmill.fb.threadsettings.FbBotMillThreadSettingsConfiguration.setGetStartedButton(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4250/buggy-version/src.main.java.co.aurasphere.botmill.demo.fb.MessengerProfileConfiguration.java", "BodyUseAPI": [], "Fixed commit": "e4b44a20b0484374adac9f72cb5302bd16b4fa23", "Url": "https://api.github.com/repos/aurasphere/fb-botmill-simple-demo-bot", "Date": "2018-01-08T11:48:24Z"},
{"Line": "96=>96", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "dialog.setTitle((orig == 1 ? R.string.strchgl_titulo : R.string.menu_about_titulo)).setMessage((orig == 1 ? R.string.strchgl_contenido : R.string.menu_about_contenido)).setCancelable(false).setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>dialog.setTitle((orig == 1 ? R.string.strchgl_titulo : R.string.menu_about_titulo)).setMessage((orig == 1 ? R.string.strchgl_contenido : R.string.menu_about_contenido)).setCancelable(false).setPositiveButton(getString(R.string.cast_tracks_chooser_dialog_ok),android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8963/buggy-version/app.src.main.java.com.bkopellhill.gj.comisionlibre.ui.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "1bee7cd6e237a98b502a0249ea5d49f2a526bbeb", "Url": "https://api.github.com/repos/BKopellhill/CLW", "Date": "2018-01-26T05:41:30Z"},
{"Line": "21=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<net.dv8tion.jda.core.entities.Role>.get(int)=>java.util.List<java.lang.String>.add(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/391/buggy-version/src.main.java.cah.secretary.DotRoles.java", "BodyUseAPI": [], "Fixed commit": "8c28119dff3d79cf75c6495405ff96ebae2b8f32", "Url": "https://api.github.com/repos/CAH-Dev/CAH_Secretary", "Date": "2018-02-23T01:36:54Z"},
{"Line": "225=>225", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "nitrr.meghal.activity.MainActivity.hideTextEditor()=>nitrr.meghal.activity.MainActivity.showTextEditor()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4994/buggy-version/NitrrCompilerAndroidApp.libraries.sharedCode.src.main.java.nitrr.meghal.activity.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "18f19c1584b3c46b24386240af84fec8208f3b02", "Url": "https://api.github.com/repos/meghalagrawal/minor_project", "Date": "2018-05-15T09:44:47Z"},
{"Line": "128=>128", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.google.gson.stream.JsonWriter.jsonValue(((\"|\" + (((com.cinchapi.concourse.Timestamp) (value)).getMicros())) + \"|\"))=>com.google.gson.stream.JsonWriter.value(((\"|\" + (((com.cinchapi.concourse.Timestamp) (value)).getMicros())) + \"|\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7440/buggy-version/concourse-driver-java.src.main.java.com.cinchapi.concourse.util.TypeAdapters.java", "BodyUseAPI": [], "Fixed commit": "f79822550f50fadb967559bfd30fa49061f706ba", "Url": "https://api.github.com/repos/cinchapi/concourse", "Date": "2018-08-12T22:04:54Z"},
{"Line": "152=>153", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "de.stockpicker.backend.repository.TradeRepository.findAllByUserOrderByOpened(userService.getUserByPrincipal(principal))=>de.stockpicker.backend.repository.TradeRepository.findAllByUserAndClosedIsNotNullOrderByOpened(userService.getUserByPrincipal(principal))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/180/buggy-version/src.main.java.de.stockpicker.backend.controller.stock.TradeController.java", "BodyUseAPI": [], "Fixed commit": "7f7d554a20e837e499033905e6c96d246d0e38b7", "Url": "https://api.github.com/repos/eideckerh/stockpicker-backend", "Date": "2018-07-13T19:30:13Z"},
{"Line": "89=>89", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new org.apache.nifi.components.PropertyDescriptor.Builder().name(\"Input Language\").description(\"The language of incoming data\").required(true).defaultValue(java.lang.String)=>new org.apache.nifi.components.PropertyDescriptor.Builder().name(\"Input Language\").description(\"The language of incoming data\").required(false).defaultValue(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9808/buggy-version/nifi-nar-bundles.nifi-language-translation-bundle.nifi-yandex-processors.src.main.java.org.apache.nifi.processors.yandex.YandexTranslate.java", "BodyUseAPI": [], "Fixed commit": "3d797dcbfb96219ecc651eb505c6b3f49f9e9249", "Url": "https://api.github.com/repos/veteranbv/nifi", "Date": "2018-05-17T16:47:19Z"},
{"Line": "55=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.apereo.cas.pm.jdbc.JdbcPasswordManagementService.getJdbc()=>org.apereo.cas.pm.jdbc.JdbcPasswordManagementService.getJdbc()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7742/buggy-version/support.cas-server-support-pm-jdbc.src.main.java.org.apereo.cas.pm.jdbc.JdbcPasswordManagementService.java", "BodyUseAPI": [], "Fixed commit": "b8cbc82fbbe6a4bf95208b24344dd3cc5d376b7a", "Url": "https://api.github.com/repos/dacurry-tns/cas", "Date": "2018-01-21T17:22:39Z"},
{"Line": "80=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.TextView.setText(int)=>android.widget.TextView.setText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5378/buggy-version/app.src.main.java.com.example.daryacomputer.roomexample.util.SelectFromTable.java", "BodyUseAPI": [], "Fixed commit": "411c705dc9987b2e3be04de9a191328c668d1089", "Url": "https://api.github.com/repos/ArezooNazer/RoomExample", "Date": "2018-08-20T18:32:22Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.PrintStream.println(java.lang.String,java.lang.String)=>java.io.PrintStream.printf(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9634/buggy-version/HangMan.Prompter.java", "BodyUseAPI": [], "Fixed commit": "21cabbe2952b4a81fad6a6e610eb2504c4fc4b07", "Url": "https://api.github.com/repos/yahya09206/javarefreshercourse", "Date": "2018-09-12T20:28:56Z"},
{"Line": "17=>17", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.error(java.lang.String)=>org.apache.logging.log4j.Logger.debug(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2400/buggy-version/src.main.java.com.faina.euler17.Main.java", "BodyUseAPI": [], "Fixed commit": "466824d398b51e066dbf0ab271ed0743082e565f", "Url": "https://api.github.com/repos/sunny14/Euler", "Date": "2018-07-03T18:32:30Z"},
{"Line": "21=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.error(java.lang.String)=>org.apache.logging.log4j.Logger.debug(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2400/buggy-version/src.main.java.com.faina.euler17.Main.java", "BodyUseAPI": [], "Fixed commit": "466824d398b51e066dbf0ab271ed0743082e565f", "Url": "https://api.github.com/repos/sunny14/Euler", "Date": "2018-07-03T18:32:30Z"},
{"Line": "117=>121", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.evosuite.coverage.branch.ControlFlowDistanceCalculator.getDistance(org.evosuite.testcase.execution.ExecutionResult,bp.getBranch(),boolean,java.lang.String,java.lang.String)=>org.evosuite.coverage.branch.ControlFlowDistanceCalculator.getDistance(org.evosuite.testcase.execution.ExecutionResult,bp.getBranch(),boolean,java.lang.String,bp.getBranch().getMethodName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8201/buggy-version/client.src.main.java.org.evosuite.coverage.mcc.MccCoverageGoal.java", "BodyUseAPI": [], "Fixed commit": "95861cd1953401b168c02a763082085438e35401", "Url": "https://api.github.com/repos/Srujanab09/evosuite", "Date": "2018-01-22T17:35:50Z"},
{"Line": "408=>410", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.github.ambry.protocol.DeleteRequest.getContainerId()=>com.github.ambry.commons.BlobId.getContainerId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4602/buggy-version/ambry-server.src.main.java.com.github.ambry.server.AmbryRequests.java", "BodyUseAPI": [], "Fixed commit": "c4de1dd9566506f55e087bb7c219d8044204a940", "Url": "https://api.github.com/repos/dharju/ambry", "Date": "2018-07-13T00:31:58Z"},
{"Line": "409=>411", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.github.ambry.protocol.DeleteRequest.getAccountId()=>com.github.ambry.commons.BlobId.getAccountId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4602/buggy-version/ambry-server.src.main.java.com.github.ambry.server.AmbryRequests.java", "BodyUseAPI": [], "Fixed commit": "c4de1dd9566506f55e087bb7c219d8044204a940", "Url": "https://api.github.com/repos/dharju/ambry", "Date": "2018-07-13T00:31:58Z"},
{"Line": "410=>412", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.github.ambry.protocol.DeleteRequest.getContainerId()=>com.github.ambry.commons.BlobId.getContainerId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4602/buggy-version/ambry-server.src.main.java.com.github.ambry.server.AmbryRequests.java", "BodyUseAPI": [], "Fixed commit": "c4de1dd9566506f55e087bb7c219d8044204a940", "Url": "https://api.github.com/repos/dharju/ambry", "Date": "2018-07-13T00:31:58Z"},
{"Line": "76=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "authDatastore.getUser(userId).orElse(SingularityUser.DEFAULT_USER)=>com.hubspot.singularity.api.auth.SingularityUser.defaultUser()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3746/buggy-version/SingularityService.src.main.java.com.hubspot.singularity.resources.AuthResource.java", "BodyUseAPI": [], "Fixed commit": "f658dd56d4ef13d193d912cfab5938a0bc9ed77a", "Url": "https://api.github.com/repos/HubSpot/Singularity", "Date": "2018-03-02T18:40:00Z"},
{"Line": "62=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Optional.of(SingularityUser.DEFAULT_USER)=>com.hubspot.singularity.api.auth.SingularityUser.defaultUser()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3746/buggy-version/SingularityService.src.main.java.com.hubspot.singularity.auth.authenticator.SingularityMultiMethodAuthenticator.java", "BodyUseAPI": [], "Fixed commit": "f658dd56d4ef13d193d912cfab5938a0bc9ed77a", "Url": "https://api.github.com/repos/HubSpot/Singularity", "Date": "2018-03-02T18:40:00Z"},
{"Line": "41=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.System.setProperty(java.lang.String,java.lang.String)=>java.lang.Integer.toString(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6836/buggy-version/bmh-edge-spring-boot.src.main.java.gov.noaa.nws.bmh_edge.BmhEdgeCamelApplication.java", "BodyUseAPI": [], "Fixed commit": "da5f9b86fe4e506f1ca91418855f294458750abf", "Url": "https://api.github.com/repos/warrickmoran/bmh-edge", "Date": "2018-04-19T16:25:13Z"},
{"Line": "79=>75", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.google.android.gms.maps.GoogleMap.animateCamera(com.google.android.gms.maps.CameraUpdateFactory.newCameraPosition(cameraPosition))=>com.google.android.gms.maps.GoogleMap.moveCamera(com.google.android.gms.maps.CameraUpdateFactory.newCameraPosition(cameraPosition))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/670/buggy-version/app.src.main.java.io.gumil.cities.view.map.MapFragment.java", "BodyUseAPI": [], "Fixed commit": "a354131e4545f13f57fdb479a8341ae8d61d05a4", "Url": "https://api.github.com/repos/gumil/Cities", "Date": "2018-02-21T16:42:04Z"},
{"Line": "122=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "mContext.getResources().getColor(R.color.app_black)=>mContext.getResources().getColor(R.color.colorPrimary)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3915/buggy-version/app.src.main.java.org.fundacionparaguaya.advisorapp.adapters.SurveyListAdapter.java", "BodyUseAPI": [], "Fixed commit": "3d4e584d8d4aa411339143276e379b03b06b176d", "Url": "https://api.github.com/repos/FundacionParaguaya/ps-advisor-app", "Date": "2018-03-15T03:20:22Z"},
{"Line": "65=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.meti.Display.log(java.util.logging.Level,java.lang.String,java.lang.Exception)=>com.meti.Main.log(java.util.logging.Level,java.lang.String,java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8583/buggy-version/src.main.java.com.meti.Display.java", "BodyUseAPI": [], "Fixed commit": "32ac23c6ce4635d9bd5e3ecb16980476939d6e73", "Url": "https://api.github.com/repos/SirMathhman/Synkhronos", "Date": "2018-01-31T20:38:22Z"},
{"Line": "92=>90", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.meti.Display.log(java.util.logging.Level,java.lang.String)=>com.meti.Main.log(java.util.logging.Level,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8583/buggy-version/src.main.java.com.meti.Display.java", "BodyUseAPI": [], "Fixed commit": "32ac23c6ce4635d9bd5e3ecb16980476939d6e73", "Url": "https://api.github.com/repos/SirMathhman/Synkhronos", "Date": "2018-01-31T20:38:22Z"},
{"Line": "96=>96", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.meti.Display.log(java.util.logging.Level,java.lang.String,java.lang.Exception)=>com.meti.Main.log(java.util.logging.Level,java.lang.String,java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8583/buggy-version/src.main.java.com.meti.Display.java", "BodyUseAPI": [], "Fixed commit": "32ac23c6ce4635d9bd5e3ecb16980476939d6e73", "Url": "https://api.github.com/repos/SirMathhman/Synkhronos", "Date": "2018-01-31T20:38:22Z"},
{"Line": "533=>533", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.text.TextUtils.isEmpty(mQuestionsBean.getTitle())=>mQuestionsBean.getTitle().trim()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9463/buggy-version/app.src.main.java.com.yanxiu.gphone.faceshowadmin_android.createtasks.create_vote.EditVoteItemFragment.java", "BodyUseAPI": [], "Fixed commit": "7ed177d4f555ad0e6ff8e3c3e0bd5b810ca96e0e", "Url": "https://api.github.com/repos/caileiYanxiu/FaceShowAdmin_Android", "Date": "2018-07-02T05:42:49Z"},
{"Line": "455=>455", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.text.TextUtils.isEmpty(questionTitleEt.getText().toString())=>questionTitleEt.getText().toString().trim()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9463/buggy-version/app.src.main.java.com.yanxiu.gphone.faceshowadmin_android.createtasks.create_vote.EditVoteItemFragment.java", "BodyUseAPI": [], "Fixed commit": "7ed177d4f555ad0e6ff8e3c3e0bd5b810ca96e0e", "Url": "https://api.github.com/repos/caileiYanxiu/FaceShowAdmin_Android", "Date": "2018-07-02T05:42:49Z"},
{"Line": "482=>482", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.text.TextUtils.isEmpty(contentEt.getText().toString())=>contentEt.getText().toString().trim()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9463/buggy-version/app.src.main.java.com.yanxiu.gphone.faceshowadmin_android.createtasks.create_vote.EditVoteItemFragment.java", "BodyUseAPI": [], "Fixed commit": "7ed177d4f555ad0e6ff8e3c3e0bd5b810ca96e0e", "Url": "https://api.github.com/repos/caileiYanxiu/FaceShowAdmin_Android", "Date": "2018-07-02T05:42:49Z"},
{"Line": "299=>299", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.text.TextUtils.isEmpty(dataBean.getTitle())=>dataBean.getTitle().trim()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9463/buggy-version/app.src.main.java.com.yanxiu.gphone.faceshowadmin_android.createtasks.create_vote.CreateVoteFragment.java", "BodyUseAPI": [], "Fixed commit": "7ed177d4f555ad0e6ff8e3c3e0bd5b810ca96e0e", "Url": "https://api.github.com/repos/caileiYanxiu/FaceShowAdmin_Android", "Date": "2018-07-02T05:42:49Z"},
{"Line": "210=>210", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.text.Editable.length()=>s.toString().trim().length()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9463/buggy-version/app.src.main.java.com.yanxiu.gphone.faceshowadmin_android.createtasks.create_discuss.CreateDiscussTaskActivity.java", "BodyUseAPI": [], "Fixed commit": "7ed177d4f555ad0e6ff8e3c3e0bd5b810ca96e0e", "Url": "https://api.github.com/repos/caileiYanxiu/FaceShowAdmin_Android", "Date": "2018-07-02T05:42:49Z"},
{"Line": "312=>312", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.text.TextUtils.isEmpty(mEditAndSelectImagesFragment.getContent())=>mEditAndSelectImagesFragment.getContent().trim()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9463/buggy-version/app.src.main.java.com.yanxiu.gphone.faceshowadmin_android.createtasks.create_homework.CreateHomeworkTaskActivity.java", "BodyUseAPI": [], "Fixed commit": "7ed177d4f555ad0e6ff8e3c3e0bd5b810ca96e0e", "Url": "https://api.github.com/repos/caileiYanxiu/FaceShowAdmin_Android", "Date": "2018-07-02T05:42:49Z"},
{"Line": "283=>283", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.text.Editable.length()=>s.toString().trim().length()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9463/buggy-version/app.src.main.java.com.yanxiu.gphone.faceshowadmin_android.createtasks.create_homework.CreateHomeworkTaskActivity.java", "BodyUseAPI": [], "Fixed commit": "7ed177d4f555ad0e6ff8e3c3e0bd5b810ca96e0e", "Url": "https://api.github.com/repos/caileiYanxiu/FaceShowAdmin_Android", "Date": "2018-07-02T05:42:49Z"},
{"Line": "198=>198", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.hootboard.assignment.user.UserRepository.flush()=>com.hootboard.assignment.user.UserRepository.saveAndFlush(com.hootboard.assignment.model.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1169/buggy-version/src.main.java.com.hootboard.assignment.user.UserServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "7b1ba208de6d3884453ffa9c486def20cecc081b", "Url": "https://api.github.com/repos/MrSagarMH13/HootBoard", "Date": "2018-03-18T07:51:25Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.ittianyu.bottomnavigationviewex.BottomNavigationViewEx.enableItemShiftingMode(boolean)=>com.ittianyu.bottomnavigationviewex.BottomNavigationViewEx.enableShiftingMode(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/438/buggy-version/app.src.main.java.com.example.q.contackapp.Utils.BottomNavigationViewHelper.java", "BodyUseAPI": [], "Fixed commit": "7824344941b7565c198879f63b9cba638f0d8491", "Url": "https://api.github.com/repos/jyeongho/First_project", "Date": "2018-07-03T15:38:26Z"},
{"Line": "291=>292", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.lang.String>.add(main.java.memoranda.api.GithubService.getMergerUsername(githubOwner, githubRepoName, token, number))=>java.util.List<main.java.memoranda.api.dto.PullRequest>.add(main.java.memoranda.api.GithubService.getMergedPullRequest(githubOwner, githubRepoName, token, number))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2772/buggy-version/src.main.java.memoranda.ui.StatsPanel.java", "BodyUseAPI": [], "Fixed commit": "18e7cf404ecc77a79d9a43f58eceeb7a5e130d32", "Url": "https://api.github.com/repos/ser316asu-2018/Marksburg", "Date": "2018-04-28T00:55:01Z"},
{"Line": "291=>292", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.lang.String>.add(main.java.memoranda.api.GithubService.getMergerUsername(githubOwner, githubRepoName, token, number))=>java.util.List<main.java.memoranda.api.dto.PullRequest>.add(main.java.memoranda.api.GithubService.getMergedPullRequest(githubOwner, githubRepoName, token, number))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2772/buggy-version/src.main.java.memoranda.ui.StatsPanel.java", "BodyUseAPI": [], "Fixed commit": "18e7cf404ecc77a79d9a43f58eceeb7a5e130d32", "Url": "https://api.github.com/repos/ser316asu-2018/Marksburg", "Date": "2018-04-28T00:55:01Z"},
{"Line": "451=>452", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "main.java.memoranda.api.GithubService.getString(java.lang.String)=>org.json.JSONObject.getString(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2772/buggy-version/src.main.java.memoranda.api.GithubService.java", "BodyUseAPI": [], "Fixed commit": "18e7cf404ecc77a79d9a43f58eceeb7a5e130d32", "Url": "https://api.github.com/repos/ser316asu-2018/Marksburg", "Date": "2018-04-28T00:55:01Z"},
{"Line": "86=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.springframework.context.ApplicationContext.getEnvironment()=>org.springframework.context.ApplicationContext.getBeanFactory()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9185/buggy-version/src.com.bargetor.nest.common.springmvc.SpringApplicationUtil.java", "BodyUseAPI": [], "Fixed commit": "32234b10ef0404cbcc34cff2cea5d7a153a2977a", "Url": "https://api.github.com/repos/Bargetor/nest", "Date": "2018-01-30T16:51:02Z"},
{"Line": "86=>87", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.bargetor.nest.common.springmvc.SpringApplicationUtil.applicationContext.getEnvironment().getProperty(java.lang.String)=>((org.springframework.web.context.support.XmlWebApplicationContext) (com.bargetor.nest.common.springmvc.SpringApplicationUtil.applicationContext)).getBeanFactory().resolveEmbeddedValue(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9185/buggy-version/src.com.bargetor.nest.common.springmvc.SpringApplicationUtil.java", "BodyUseAPI": [], "Fixed commit": "32234b10ef0404cbcc34cff2cea5d7a153a2977a", "Url": "https://api.github.com/repos/Bargetor/nest", "Date": "2018-01-30T16:51:02Z"},
{"Line": "68=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.matsim.contrib.dvrp.schedule.Schedule.addTask(ch.ethz.matsim.av.schedule.AVDriveTask)=>org.matsim.contrib.dvrp.schedule.Schedule.addTask(org.matsim.contrib.dvrp.schedule.DriveTask)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8263/buggy-version/src.main.java.ch.ethz.idsc.amodeus.dispatcher.core.SharedGeneralStayDirective.java", "BodyUseAPI": [], "Fixed commit": "51291339b37f1575cecf35b83664380e079749b6", "Url": "https://api.github.com/repos/idsc-frazzoli/amodeus", "Date": "2018-06-27T13:47:06Z"},
{"Line": "117=>117", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.List<edu.ycp.cs320.otterspace.controller.game.Item>.remove(edu.ycp.cs320.otterspace.controller.game.Item)=>java.util.List<edu.ycp.cs320.otterspace.controller.game.Item>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7790/buggy-version/OtterSpace.src.edu.ycp.cs320.otterspace.controller.game.Player.java", "BodyUseAPI": [], "Fixed commit": "6ec8bdd08c9ffa480089f06b349a12f540140c63", "Url": "https://api.github.com/repos/asgervasio/OtterSpace", "Date": "2018-05-09T07:25:50Z"},
{"Line": "351=>351", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "player.getCurrentRoom().getRoomId()=>edu.ycp.cs320.otterspace.controller.game.Item.setRoomLocat(player.getRoomId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7790/buggy-version/OtterSpace.src.edu.ycp.cs320.otterspace.controller.game.GameEngine.java", "BodyUseAPI": [], "Fixed commit": "6ec8bdd08c9ffa480089f06b349a12f540140c63", "Url": "https://api.github.com/repos/asgervasio/OtterSpace", "Date": "2018-05-09T07:25:50Z"},
{"Line": "351=>351", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.ycp.cs320.otterspace.controller.game.Player.getCurrentRoom()=>edu.ycp.cs320.otterspace.controller.game.Player.getRoomId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7790/buggy-version/OtterSpace.src.edu.ycp.cs320.otterspace.controller.game.GameEngine.java", "BodyUseAPI": [], "Fixed commit": "6ec8bdd08c9ffa480089f06b349a12f540140c63", "Url": "https://api.github.com/repos/asgervasio/OtterSpace", "Date": "2018-05-09T07:25:50Z"},
{"Line": "77=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.lang.String>.contains(java.lang.String)=>java.lang.String.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/588/buggy-version/src.main.java.LDSToolsAppium.BaseDriver.java", "BodyUseAPI": [], "Fixed commit": "59f75b4f56f499fbdcf9fd5301993a39b0c10dd0", "Url": "https://api.github.com/repos/zademaxfield/LDSToolsAppium", "Date": "2018-04-13T15:33:52Z"},
{"Line": "74=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.lang.String>.contains(java.lang.String)=>java.lang.String.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/588/buggy-version/src.main.java.LDSToolsAppium.BaseDriver.java", "BodyUseAPI": [], "Fixed commit": "59f75b4f56f499fbdcf9fd5301993a39b0c10dd0", "Url": "https://api.github.com/repos/zademaxfield/LDSToolsAppium", "Date": "2018-04-13T15:33:52Z"},
{"Line": "60=>61", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println((((org.usfirst.frc1388.UsbLogging.className) + \": Log file: \") + (fLogFile)))=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6934/buggy-version/src.org.usfirst.frc1388.UsbLogging.java", "BodyUseAPI": [], "Fixed commit": "87f7738ff5d051d845f3bd353527c6b8ee5b2624", "Url": "https://api.github.com/repos/AGHSEagleRobotics/frc-1388-2018", "Date": "2018-02-06T04:38:42Z"},
{"Line": "134=>134", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.github.xfalcon.vhosts.vservice.VhostsService.stopVSPervice(com.github.xfalcon.vhosts.VhostsActivity)=>com.github.xfalcon.vhosts.vservice.VhostsService.stopVService(com.github.xfalcon.vhosts.VhostsActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9694/buggy-version/app.src.main.java.com.github.xfalcon.vhosts.VhostsActivity.java", "BodyUseAPI": [], "Fixed commit": "80c8bfef392a790ef94fe25164a5b53963fb5da7", "Url": "https://api.github.com/repos/x-falcon/Virtual-Hosts", "Date": "2018-01-10T07:10:52Z"},
{"Line": "42=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.psu.swe.scim.spec.protocol.search.Filter.info((\"Creating a filter - \" + (filterExpression.toString())))=>edu.psu.swe.scim.spec.protocol.search.Filter.debug((\"Creating a filter - \" + (filterExpression.toString())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2072/buggy-version/scim-spec.scim-spec-protocol.src.main.java.edu.psu.swe.scim.spec.protocol.search.Filter.java", "BodyUseAPI": [], "Fixed commit": "db2faa9bae7bc9f837bfbd671853f374ad46a55c", "Url": "https://api.github.com/repos/PennState/SCIMple-Identity", "Date": "2018-05-10T16:13:34Z"},
{"Line": "37=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.psu.swe.scim.spec.protocol.search.Filter.info(java.lang.String)=>edu.psu.swe.scim.spec.protocol.search.Filter.debug(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2072/buggy-version/scim-spec.scim-spec-protocol.src.main.java.edu.psu.swe.scim.spec.protocol.search.Filter.java", "BodyUseAPI": [], "Fixed commit": "db2faa9bae7bc9f837bfbd671853f374ad46a55c", "Url": "https://api.github.com/repos/PennState/SCIMple-Identity", "Date": "2018-05-10T16:13:34Z"},
{"Line": "31=>41", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.mongodb.morphia.query.Query<imu.recommender.models.weather.Weather>.asList()=>com.mongodb.DBCollection.find(com.mongodb.BasicDBObject,com.mongodb.BasicDBObject)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6082/buggy-version/src.main.java.imu.recommender.helpers.WeatherInfo.java", "BodyUseAPI": [], "Fixed commit": "1c873344a0959b8827a34970ae52bef40a9e9e22", "Url": "https://api.github.com/repos/mpthimios/optimum_recommender", "Date": "2018-01-09T16:16:24Z"},
{"Line": "30=>37", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "query.criteria(\"country\").equal(java.lang.String)=>com.mongodb.BasicDBObject.put(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6082/buggy-version/src.main.java.imu.recommender.helpers.WeatherInfo.java", "BodyUseAPI": [], "Fixed commit": "1c873344a0959b8827a34970ae52bef40a9e9e22", "Url": "https://api.github.com/repos/mpthimios/optimum_recommender", "Date": "2018-01-09T16:16:24Z"},
{"Line": "32=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<imu.recommender.models.weather.Weather>.size()=>java.util.List<com.mongodb.DBObject>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6082/buggy-version/src.main.java.imu.recommender.helpers.WeatherInfo.java", "BodyUseAPI": [], "Fixed commit": "1c873344a0959b8827a34970ae52bef40a9e9e22", "Url": "https://api.github.com/repos/mpthimios/optimum_recommender", "Date": "2018-01-09T16:16:24Z"},
{"Line": "32=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<imu.recommender.models.weather.Weather>.get(((weathers.size()) - 1))=>trip.get(0).get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6082/buggy-version/src.main.java.imu.recommender.helpers.WeatherInfo.java", "BodyUseAPI": [], "Fixed commit": "1c873344a0959b8827a34970ae52bef40a9e9e22", "Url": "https://api.github.com/repos/mpthimios/optimum_recommender", "Date": "2018-01-09T16:16:24Z"},
{"Line": "32=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "weathers.get(((weathers.size()) - 1)).getGoodWeather()=>java.lang.Boolean.valueOf(trip.get(0).get(\"GoodWeather\").toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6082/buggy-version/src.main.java.imu.recommender.helpers.WeatherInfo.java", "BodyUseAPI": [], "Fixed commit": "1c873344a0959b8827a34970ae52bef40a9e9e22", "Url": "https://api.github.com/repos/mpthimios/optimum_recommender", "Date": "2018-01-09T16:16:24Z"},
{"Line": "53=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "content.getTo().getId()=>content.getTo().getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5925/buggy-version/fuck.src.main.java.com.honeybadger.im.fuck.message.configuration.RabbitMqConfigurer.java", "BodyUseAPI": [], "Fixed commit": "22255146d7d44a49407eb2d8d1ec4cf4a9c221be", "Url": "https://api.github.com/repos/gengPATHoPATHoxin/fuckIM", "Date": "2018-02-10T08:05:36Z"},
{"Line": "161=>161", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.overture.codegen.vdm2cpp.CppCodeGen.computeDefTable(getUserModules(ast))=>org.overture.codegen.vdm2cpp.CodeGenBase.preProcessAst(java.util.List<org.overture.codegen.ir.INode>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2326/buggy-version/core.codegen.vdm2cpp.src.main.java.org.overture.codegen.vdm2cpp.CppCodeGen.java", "BodyUseAPI": [], "Fixed commit": "740bf91d1821b9fc7315936809962ad05060da53", "Url": "https://api.github.com/repos/MathiasJes/overture", "Date": "2018-03-02T10:10:17Z"},
{"Line": "672=>672", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.warn(java.lang.String,java.lang.String)=>org.apache.logging.log4j.Logger.info(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9912/buggy-version/src.org.yawlfoundation.yawl.resourcing.ResourceManager.java", "BodyUseAPI": [], "Fixed commit": "ddf2a9d83e385a12f78c1c441ffe4ce855c66373", "Url": "https://api.github.com/repos/mlawry/yawl", "Date": "2018-03-08T03:18:24Z"},
{"Line": "672=>672", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.warn(java.lang.String,java.lang.String)=>org.apache.logging.log4j.Logger.info(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9912/buggy-version/src.org.yawlfoundation.yawl.resourcing.ResourceManager.java", "BodyUseAPI": [], "Fixed commit": "ddf2a9d83e385a12f78c1c441ffe4ce855c66373", "Url": "https://api.github.com/repos/mlawry/yawl", "Date": "2018-03-08T03:18:24Z"},
{"Line": "644=>644", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.warn(java.lang.String,wir.getID())=>org.apache.logging.log4j.Logger.info(java.lang.String,wir.getID())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9912/buggy-version/src.org.yawlfoundation.yawl.resourcing.ResourceManager.java", "BodyUseAPI": [], "Fixed commit": "ddf2a9d83e385a12f78c1c441ffe4ce855c66373", "Url": "https://api.github.com/repos/mlawry/yawl", "Date": "2018-03-08T03:18:24Z"},
{"Line": "98=>98", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.codice.ddf.security.util.SAMLUtils.getSubjectAsStringNoSignature(org.w3c.dom.Element)=>org.codice.ddf.security.util.SAMLUtils.getInstance().getSubjectAsStringNoSignature(org.w3c.dom.Element)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8501/buggy-version/broker.broker-security-impl.src.main.java.org.codice.ddf.broker.security.impl.SubjectInjectorPlugin.java", "BodyUseAPI": [], "Fixed commit": "70507cd7a87663ecfd94b35e70e2dffd941b2aaa", "Url": "https://api.github.com/repos/harrison-tarr/ddf", "Date": "2018-01-09T23:32:50Z"},
{"Line": "95=>95", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.codice.ddf.security.util.SAMLUtils.getSecurityTokenFromSAMLAssertion(java.lang.String)=>org.codice.ddf.security.util.SAMLUtils.getInstance().getSecurityTokenFromSAMLAssertion(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8501/buggy-version/platform.security.handler.security-handler-saml.src.main.java.org.codice.ddf.security.handler.saml.SAMLAssertionHandler.java", "BodyUseAPI": [], "Fixed commit": "70507cd7a87663ecfd94b35e70e2dffd941b2aaa", "Url": "https://api.github.com/repos/harrison-tarr/ddf", "Date": "2018-01-09T23:32:50Z"},
{"Line": "57=>58", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "IngredientContract.IngredientEntry.getRecipeIngredientsUri(recipe.getId())=>StepContract.StepEntry.getRecipeStepsUri(recipe.getId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7273/buggy-version/app.src.main.java.it.communikein.bakingapp.widget.RecipesLoader.java", "BodyUseAPI": [], "Fixed commit": "0c397c45dacde49fc3a7ca2c2a5ed8bdf0b878e8", "Url": "https://api.github.com/repos/communikein/udacity-and-baking-app", "Date": "2018-03-23T13:22:45Z"},
{"Line": "57=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "IngredientContract.IngredientEntry.getRecipeIngredientsUri(recipe.getId())=>StepContract.StepEntry.getRecipeStepsUri(recipe.getId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7273/buggy-version/app.src.main.java.it.communikein.bakingapp.widget.RecipesLoader.java", "BodyUseAPI": [], "Fixed commit": "0c397c45dacde49fc3a7ca2c2a5ed8bdf0b878e8", "Url": "https://api.github.com/repos/communikein/udacity-and-baking-app", "Date": "2018-03-23T13:22:45Z"},
{"Line": "748=>751", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.jdcloud.JDApiBase.parseDate(java.lang.String)=>com.jdcloud.JDApiBase.parseDate(java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1382/buggy-version/jdcloud.src.com.jdcloud.JDApiBase.java", "BodyUseAPI": [], "Fixed commit": "1bf25d298c0af1fffce4d987d7ce6788a94c2012", "Url": "https://api.github.com/repos/skyshore2001/jdcloud-java", "Date": "2018-05-05T16:40:05Z"},
{"Line": "80=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.codecool.uml.overloading.Product.toString()=>java.lang.Object.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/292/buggy-version/src.com.codecool.uml.overloading.Product.java", "BodyUseAPI": [], "Fixed commit": "c239ff49391d47147f8f60f52342536a9ec75fc9", "Url": "https://api.github.com/repos/CodecoolBPoop/oop-java-overloading-robertkatona", "Date": "2018-07-29T12:53:33Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.codecool.uml.overloading.ProductCategory.toString()=>java.lang.Object.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/292/buggy-version/src.com.codecool.uml.overloading.ProductCategory.java", "BodyUseAPI": [], "Fixed commit": "c239ff49391d47147f8f60f52342536a9ec75fc9", "Url": "https://api.github.com/repos/CodecoolBPoop/oop-java-overloading-robertkatona", "Date": "2018-07-29T12:53:33Z"},
{"Line": "49=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "x1.stomp.boundary.var.addServersItem(x1.stomp.boundary.var)=>x1.stomp.boundary.var.addServersItem(io.swagger.v3.oas.models.servers.Server)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7114/buggy-version/src.main.java.x1.stomp.boundary.RestApplication.java", "BodyUseAPI": [], "Fixed commit": "b0bc593fac6719767dd2c63fe2634a7847716910", "Url": "https://api.github.com/repos/kifj/stomp-test", "Date": "2018-05-21T18:31:41Z"},
{"Line": "171=>171", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.teiid.query.optimizer.relational.rules.RuleApplySecurity.addView(org.teiid.query.metadata.QueryMetadataInterface,org.teiid.query.util.CommandContext,org.teiid.query.sql.symbol.GroupSymbol,java.util.List<org.teiid.query.sql.symbol.ElementSymbol>,java.util.List<org.teiid.query.sql.symbol.ElementSymbol>,org.teiid.query.optimizer.relational.plantree.PlanNode)=>org.teiid.query.optimizer.relational.rules.RuleApplySecurity.addView(org.teiid.query.metadata.QueryMetadataInterface,org.teiid.query.util.CommandContext,org.teiid.query.sql.symbol.GroupSymbol,java.util.List<org.teiid.query.sql.symbol.ElementSymbol>,org.teiid.query.optimizer.relational.plantree.PlanNode)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5267/buggy-version/engine.src.main.java.org.teiid.query.optimizer.relational.rules.RuleApplySecurity.java", "BodyUseAPI": [], "Fixed commit": "42e102e30da7ffad9c98d10da73d719638ab826e", "Url": "https://api.github.com/repos/vhalbert/teiid", "Date": "2018-08-20T16:11:01Z"},
{"Line": "188=>187", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.teiid.query.optimizer.relational.rules.RulePushAggregates.defineNewGroup(org.teiid.query.sql.symbol.GroupSymbol,java.util.List<? extends org.teiid.query.sql.symbol.Expression>,org.teiid.query.metadata.QueryMetadataInterface)=>org.teiid.query.optimizer.relational.rules.RulePushAggregates.defineNewGroup(org.teiid.query.sql.symbol.GroupSymbol,java.util.List<org.teiid.query.sql.symbol.ElementSymbol>,org.teiid.query.metadata.QueryMetadataInterface)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5267/buggy-version/engine.src.main.java.org.teiid.query.optimizer.relational.rules.RuleApplySecurity.java", "BodyUseAPI": [], "Fixed commit": "42e102e30da7ffad9c98d10da73d719638ab826e", "Url": "https://api.github.com/repos/vhalbert/teiid", "Date": "2018-08-20T16:11:01Z"},
{"Line": "110=>110", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Map<org.teiid.query.sql.symbol.ElementSymbol, org.teiid.query.sql.symbol.Expression>.put(cols.get(i),org.teiid.query.sql.symbol.Expression)=>java.util.Map<org.teiid.query.sql.symbol.ElementSymbol, org.teiid.query.sql.symbol.Expression>.put(cols.get(i),org.teiid.query.sql.util.SymbolMap.getExpression(maskedCol))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5267/buggy-version/engine.src.main.java.org.teiid.query.optimizer.relational.rules.RuleApplySecurity.java", "BodyUseAPI": [], "Fixed commit": "42e102e30da7ffad9c98d10da73d719638ab826e", "Url": "https://api.github.com/repos/vhalbert/teiid", "Date": "2018-08-20T16:11:01Z"},
{"Line": "138=>138", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.teiid.query.optimizer.relational.rules.RuleApplySecurity.addView(org.teiid.query.metadata.QueryMetadataInterface,org.teiid.query.util.CommandContext,org.teiid.query.sql.symbol.GroupSymbol,java.util.List<org.teiid.query.sql.symbol.ElementSymbol>,java.util.List<? extends org.teiid.query.sql.symbol.Expression>,org.teiid.query.optimizer.relational.plantree.PlanNode)=>org.teiid.query.optimizer.relational.rules.RuleApplySecurity.addView(org.teiid.query.metadata.QueryMetadataInterface,org.teiid.query.util.CommandContext,org.teiid.query.sql.symbol.GroupSymbol,java.util.List<org.teiid.query.sql.symbol.ElementSymbol>,org.teiid.query.optimizer.relational.plantree.PlanNode)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5267/buggy-version/engine.src.main.java.org.teiid.query.optimizer.relational.rules.RuleApplySecurity.java", "BodyUseAPI": [], "Fixed commit": "42e102e30da7ffad9c98d10da73d719638ab826e", "Url": "https://api.github.com/repos/vhalbert/teiid", "Date": "2018-08-20T16:11:01Z"},
{"Line": "88=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.log4j.Logger.info(java.lang.String)=>org.apache.log4j.Logger.debug(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4802/buggy-version/src.main.java.com.tul.production.oms.mail.MailResource.java", "BodyUseAPI": [], "Fixed commit": "c2b24ec034c54aa3b1f54c34caddf03682f1ba4b", "Url": "https://api.github.com/repos/gitpothanaboyina/oms-production", "Date": "2018-10-30T17:34:35Z"},
{"Line": "293=>293", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] close()=>[public] close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/672/buggy-version/flink-streaming-java.src.main.java.org.apache.flink.streaming.api.operators.AbstractStreamOperator.java", "BodyUseAPI": [], "Fixed commit": "ec8eddf3596670deca08decd01d54e0c699f67b0", "Url": "https://api.github.com/repos/StefanRRichter/flink", "Date": "2017-12-11T11:01:54Z"},
{"Line": "334=>303", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] dispose()=>[public] dispose()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/672/buggy-version/flink-streaming-java.src.main.java.org.apache.flink.streaming.api.operators.AbstractStreamOperator.java", "BodyUseAPI": [], "Fixed commit": "ec8eddf3596670deca08decd01d54e0c699f67b0", "Url": "https://api.github.com/repos/StefanRRichter/flink", "Date": "2017-12-11T11:01:54Z"},
{"Line": "136=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.salesforce.dva.argus.entity.Annotation.getUid()=>com.salesforce.dva.argus.service.tsdb.AbstractTSDBService.AnnotationWrapper.getUid()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6067/buggy-version/ArgusCore.src.main.java.com.salesforce.dva.argus.service.tsdb.AnnotationTransform.java", "BodyUseAPI": [], "Fixed commit": "f21fb5296d53cb452c195c2aa2af55b171e24d97", "Url": "https://api.github.com/repos/sundeepsf/Argus", "Date": "2018-09-07T23:01:03Z"},
{"Line": "136=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.salesforce.dva.argus.entity.Annotation.getUid()=>com.salesforce.dva.argus.service.tsdb.AbstractTSDBService.AnnotationWrapper.getUid()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6067/buggy-version/ArgusCore.src.main.java.com.salesforce.dva.argus.service.tsdb.AnnotationTransform.java", "BodyUseAPI": [], "Fixed commit": "f21fb5296d53cb452c195c2aa2af55b171e24d97", "Url": "https://api.github.com/repos/sundeepsf/Argus", "Date": "2018-09-07T23:01:03Z"},
{"Line": "119=>119", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "fredboat.FredBoat.getMainDbWrapper()=>BotController.INS.getMainDbWrapper()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2410/buggy-version/FredBoat.src.main.java.fredboat.db.entity.main.Prefix.java", "BodyUseAPI": [], "Fixed commit": "4845f927c1ccd11a44ae6383bd179524e05dc5b0", "Url": "https://api.github.com/repos/Frederikam/FredBoat", "Date": "2018-01-01T16:27:13Z"},
{"Line": "119=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "fredboat.FredBoat.getMainDbWrapper()=>BotController.INS.getMainDbWrapper()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2410/buggy-version/FredBoat.src.main.java.fredboat.db.entity.main.Prefix.java", "BodyUseAPI": [], "Fixed commit": "4845f927c1ccd11a44ae6383bd179524e05dc5b0", "Url": "https://api.github.com/repos/Frederikam/FredBoat", "Date": "2018-01-01T16:27:13Z"},
{"Line": "104=>107", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.amaze.filemanager.filesystem.FileUtil.checkFolder(baseFile.getPath(),android.content.Context)=>com.amaze.filemanager.filesystem.FileUtil.checkFolder(java.lang.String,android.content.Context)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/454/buggy-version/app.src.main.java.com.amaze.filemanager.asynchronous.services.DecryptService.java", "BodyUseAPI": [], "Fixed commit": "2f21cd300fc88f1f6264af0e028438f1c757ffd6", "Url": "https://api.github.com/repos/EmmanuelMess/AmazeFileManager", "Date": "2017-11-30T17:58:21Z"},
{"Line": "94=>95", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sphinx.controller.DisplayController.setScene(org.sphinx.controller.Controller.toScene(new org.sphinx.FXMLBundle(settingsURL)))=>javafx.stage.Stage.show()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1313/buggy-version/src.main.java.org.sphinx.controller.DisplayController.java", "BodyUseAPI": [], "Fixed commit": "0e473dcd36cd300aceb86806876a82d5d457fe8b", "Url": "https://api.github.com/repos/AbsoluteCos/Qwerty", "Date": "2018-03-11T10:09:06Z"},
{"Line": "94=>94", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.sphinx.controller.Controller.toScene(org.sphinx.FXMLBundle)=>org.sphinx.controller.Controller.toStage(org.sphinx.FXMLBundle)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1313/buggy-version/src.main.java.org.sphinx.controller.DisplayController.java", "BodyUseAPI": [], "Fixed commit": "0e473dcd36cd300aceb86806876a82d5d457fe8b", "Url": "https://api.github.com/repos/AbsoluteCos/Qwerty", "Date": "2018-03-11T10:09:06Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Object.getStart()=>java.lang.Object.getEnd()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4997/buggy-version/cql-engine.src.main.java.org.opencds.cqf.cql.elm.execution.BeforeEvaluator.java", "BodyUseAPI": [], "Fixed commit": "d2272a79de0268c09e0596729078e2a3094f8456", "Url": "https://api.github.com/repos/DBCG/cql_engine", "Date": "2018-06-05T17:36:47Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Object.getEnd()=>java.lang.Object.getStart()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4997/buggy-version/cql-engine.src.main.java.org.opencds.cqf.cql.elm.execution.BeforeEvaluator.java", "BodyUseAPI": [], "Fixed commit": "d2272a79de0268c09e0596729078e2a3094f8456", "Url": "https://api.github.com/repos/DBCG/cql_engine", "Date": "2018-06-05T17:36:47Z"},
{"Line": "88=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.netflix.hollow.core.memory.encoding.FixedLengthElementArray.getElementValue(long,int,long)=>com.netflix.hollow.core.memory.encoding.FixedLengthElementArray.getLargeElementValue(long,int,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3106/buggy-version/hollow.src.main.java.com.netflix.hollow.core.memory.encoding.FixedLengthMultipleOccurrenceElementArray.java", "BodyUseAPI": [], "Fixed commit": "59d2da989b056bf20be37c766ecd7fc705935bf1", "Url": "https://api.github.com/repos/akhaku/hollow", "Date": "2018-09-26T17:44:56Z"},
{"Line": "115=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.netflix.hollow.core.memory.encoding.FixedLengthElementArray.getElementValue(long,int,long)=>com.netflix.hollow.core.memory.encoding.FixedLengthElementArray.getLargeElementValue(long,int,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3106/buggy-version/hollow.src.main.java.com.netflix.hollow.core.memory.encoding.FixedLengthMultipleOccurrenceElementArray.java", "BodyUseAPI": [], "Fixed commit": "59d2da989b056bf20be37c766ecd7fc705935bf1", "Url": "https://api.github.com/repos/akhaku/hollow", "Date": "2018-09-26T17:44:56Z"},
{"Line": "90=>92", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.netflix.hollow.core.memory.encoding.FixedLengthElementArray.getElementValue(long,int,long)=>com.netflix.hollow.core.memory.encoding.FixedLengthElementArray.getLargeElementValue(long,int,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3106/buggy-version/hollow.src.main.java.com.netflix.hollow.core.memory.encoding.FixedLengthMultipleOccurrenceElementArray.java", "BodyUseAPI": [], "Fixed commit": "59d2da989b056bf20be37c766ecd7fc705935bf1", "Url": "https://api.github.com/repos/akhaku/hollow", "Date": "2018-09-26T17:44:56Z"},
{"Line": "149=>153", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.netflix.hollow.core.memory.encoding.FixedLengthElementArray.getElementValue(long,int,long)=>com.netflix.hollow.core.memory.encoding.FixedLengthElementArray.getLargeElementValue(long,int,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3106/buggy-version/hollow.src.main.java.com.netflix.hollow.core.memory.encoding.FixedLengthMultipleOccurrenceElementArray.java", "BodyUseAPI": [], "Fixed commit": "59d2da989b056bf20be37c766ecd7fc705935bf1", "Url": "https://api.github.com/repos/akhaku/hollow", "Date": "2018-09-26T17:44:56Z"},
{"Line": "1087=>1087", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "tile.box.getBox(pos).intersects(net.minecraft.util.math.AxisAlignedBB)=>tile.box.getBox(pos).intersectsWith(net.minecraft.util.math.AxisAlignedBB)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5664/buggy-version/src.main.java.com.creativemd.littletiles.common.blocks.BlockTile.java", "BodyUseAPI": [], "Fixed commit": "78c84b88510d49afec612ab4c82d6e788412d865", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-01-29T22:42:12Z"},
{"Line": "22=>22", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "table.getPlayers().put(event.getPlayer().getUniqueId(),net.porillo.objects.Player)=>table.getPlayers().put(event.getPlayer().getUniqueId(),net.porillo.objects.GPlayer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9742/buggy-version/src.main.java.net.porillo.listeners.PlayerListener.java", "BodyUseAPI": [], "Fixed commit": "64baff1230c4a015140e5fbb18720fd4cca9f3c7", "Url": "https://api.github.com/repos/nsporillo/GlobalWarming", "Date": "2018-08-21T00:35:16Z"},
{"Line": "349=>349", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.view.MenuItem.setVisible(boolean)=>android.view.MenuItem.setVisible(((this.info) != null))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2460/buggy-version/app.src.main.java.com.tomclaw.appsend.main.download.DownloadActivity.java", "BodyUseAPI": [], "Fixed commit": "47ee3d399ffb6f339f99cd6df6adb53c6323e2f0", "Url": "https://api.github.com/repos/solkin/appsend-android", "Date": "2018-01-22T19:48:45Z"},
{"Line": "92=>92", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "coinpurse.Coin.toString()=>coinpurse.Valuable.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3462/buggy-version/src.coinpurse.ConsoleDialog.java", "BodyUseAPI": [], "Fixed commit": "6c30469e71e0da28494a5e68b8b26cdc98bfb40a", "Url": "https://api.github.com/repos/OOP2018/coinpurse-KongSKE", "Date": "2018-02-09T05:04:18Z"},
{"Line": "93=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "coinpurse.Purse.insert(coinpurse.Coin)=>coinpurse.Purse.insert(coinpurse.Valuable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3462/buggy-version/src.coinpurse.ConsoleDialog.java", "BodyUseAPI": [], "Fixed commit": "6c30469e71e0da28494a5e68b8b26cdc98bfb40a", "Url": "https://api.github.com/repos/OOP2018/coinpurse-KongSKE", "Date": "2018-02-09T05:04:18Z"},
{"Line": "112=>111", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.ws.rs.ext.FactoryFinder.find(java.lang.String,java.lang.String,java.lang.Class)=>javax.ws.rs.ext.FactoryFinder.find(java.lang.String,<nulltype>,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7245/buggy-version/jaxrs-api.src.main.java.javax.ws.rs.ext.RuntimeDelegate.java", "BodyUseAPI": [], "Fixed commit": "d3188938dadade58cfa79d5bb4555fde79340528", "Url": "https://api.github.com/repos/asoldano/jaxrs-api", "Date": "2018-03-12T14:09:02Z"},
{"Line": "218=>225", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.firebase.database.FirebaseDatabase.getInstance()=>com.google.firebase.database.DataSnapshot.child(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/245/buggy-version/app.src.main.java.com.minjianyang.shout.createMsg.java", "BodyUseAPI": [], "Fixed commit": "ac14ac145e67e09b0e4b49b26e1e6f1a4e1b61e5", "Url": "https://api.github.com/repos/MinJianYang/ShoutApp", "Date": "2018-05-24T02:08:49Z"},
{"Line": "218=>225", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.google.firebase.database.FirebaseDatabase.getInstance().getReference()=>chat.child(\"members\").getValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/245/buggy-version/app.src.main.java.com.minjianyang.shout.createMsg.java", "BodyUseAPI": [], "Fixed commit": "ac14ac145e67e09b0e4b49b26e1e6f1a4e1b61e5", "Url": "https://api.github.com/repos/MinJianYang/ShoutApp", "Date": "2018-05-24T02:08:49Z"},
{"Line": "218=>225", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.google.firebase.database.FirebaseDatabase.getInstance().getReference().child(java.lang.String)=>chat.child(\"members\").getValue().toString().contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/245/buggy-version/app.src.main.java.com.minjianyang.shout.createMsg.java", "BodyUseAPI": [], "Fixed commit": "ac14ac145e67e09b0e4b49b26e1e6f1a4e1b61e5", "Url": "https://api.github.com/repos/MinJianYang/ShoutApp", "Date": "2018-05-24T02:08:49Z"},
{"Line": "146=>147", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.getEndDateTime()=>com.oop.view.Maintenance.getEndDateTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "116=>117", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.setWorkerName(java.lang.String)=>com.oop.view.Maintenance.setWorkerName(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "150=>151", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.setMaintenanceCost(com.oop.view.MaintenanceCost)=>com.oop.view.Maintenance.setMaintenanceCost(com.oop.view.MaintenanceCost)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "117=>118", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.setMaintenanceId(java.lang.String)=>com.oop.view.Maintenance.setMaintenanceId(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "133=>134", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.setStartDateTime(java.util.Date)=>com.oop.view.Maintenance.setStartDateTime(java.util.Date)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "140=>141", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.getStartDateTime()=>com.oop.view.Maintenance.getStartDateTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "135=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.setFacilityProblem(com.oop.view.FacilityProblem)=>com.oop.view.Maintenance.setFacilityProblem(com.oop.view.FacilityProblem)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "154=>155", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.toString()=>com.oop.view.Maintenance.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "140=>141", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.getEndDateTime()=>com.oop.view.Maintenance.getEndDateTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "122=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.setFacilityProblem(com.oop.view.FacilityProblem)=>com.oop.view.Maintenance.setFacilityProblem(com.oop.view.FacilityProblem)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "171=>172", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.calcMaintenanceCostForFacility()=>com.oop.view.Maintenance.calcMaintenanceCostForFacility()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "121=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.setEndDateTime(java.util.Date)=>com.oop.view.Maintenance.setEndDateTime(java.util.Date)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "130=>131", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.setMaintenanceId(java.lang.String)=>com.oop.view.Maintenance.setMaintenanceId(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.calcProblemRateForFacility()=>com.oop.view.Maintenance.calcProblemRateForFacility()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "129=>130", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.setWorkerName(java.lang.String)=>com.oop.view.Maintenance.setWorkerName(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "128=>129", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.setFacilityId(facility.getFacilityId())=>com.oop.view.Maintenance.setFacilityId(facility.getFacilityId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "120=>121", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.setStartDateTime(java.util.Date)=>com.oop.view.Maintenance.setStartDateTime(java.util.Date)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "149=>150", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.setMaintenanceCost(com.oop.view.MaintenanceCost)=>com.oop.view.Maintenance.setMaintenanceCost(com.oop.view.MaintenanceCost)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "153=>154", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.toString()=>com.oop.view.Maintenance.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "134=>135", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.setEndDateTime(java.util.Date)=>com.oop.view.Maintenance.setEndDateTime(java.util.Date)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "168=>169", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.calcDownTimeForFacility()=>com.oop.view.Maintenance.calcDownTimeForFacility()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "146=>147", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.oop.view.MaintenanceImpl.getStartDateTime()=>com.oop.view.Maintenance.getStartDateTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1205/buggy-version/src.com.oop.view.FacilityMaintClient.java", "BodyUseAPI": [], "Fixed commit": "2dafceaae0d0ec8b1893c37a5e3a3460148d99ba", "Url": "https://api.github.com/repos/DeveloperJW/FacilityManagementSpring", "Date": "2018-03-21T04:52:48Z"},
{"Line": "200=>200", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "akka.pattern.Patterns.ask(akka.actor.ActorRef,com.hashmapinc.server.common.msg.computation.ComputationMsg,int)=>akka.pattern.Patterns.ask(akka.actor.ActorRef,com.hashmapinc.server.common.msg.computation.ComputationMsg,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/286/buggy-version/application.src.main.java.com.hashmapinc.server.actors.service.DefaultActorService.java", "BodyUseAPI": [], "Fixed commit": "460f74f4335675cc00713d5bae2b97e9caf2914c", "Url": "https://api.github.com/repos/hashmapinc/Tempus", "Date": "2018-05-09T10:15:46Z"},
{"Line": "141=>133", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.andrea.lab11.MyUser.commit()=>com.example.andrea.lab11.editProfile.4.onBackPressed()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7692/buggy-version/app.src.main.java.com.example.andrea.lab11.editProfile.java", "BodyUseAPI": [], "Fixed commit": "b45a2b170ff6489585d3822a6ca61bc823b1381f", "Url": "https://api.github.com/repos/Andreadinenno/MADProject", "Date": "2018-04-09T10:10:14Z"},
{"Line": "155=>155", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "biocode.fims.projectConfig.models.Entity.getConceptAlias()=>biocode.fims.projectConfig.models.Entity.getConceptURI()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1420/buggy-version/src.main.java.biocode.fims.service.ExpeditionService.java", "BodyUseAPI": [], "Fixed commit": "3075d04271c6b597c0f3edfb373dd14ca6020b9c", "Url": "https://api.github.com/repos/biocodellc/biocode-fims-commons", "Date": "2018-06-10T19:53:54Z"},
{"Line": "211=>211", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "biocode.fims.models.Expedition.setEntityIdentifiers(java.util.List<biocode.fims.models.EntityIdentifier>)=>e.getEntityIdentifiers().addAll(java.util.List<biocode.fims.models.EntityIdentifier>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1420/buggy-version/src.main.java.biocode.fims.service.ProjectService.java", "BodyUseAPI": [], "Fixed commit": "3075d04271c6b597c0f3edfb373dd14ca6020b9c", "Url": "https://api.github.com/repos/biocodellc/biocode-fims-commons", "Date": "2018-06-10T19:53:54Z"},
{"Line": "395=>394", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.android.gms.maps.CameraUpdateFactory.newCameraPosition(com.google.android.gms.maps.model.CameraPosition)=>com.marius.pathmap.MapsActivity.initCamera(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.model.LatLng)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3294/buggy-version/app.src.main.java.com.marius.pathmap.MapsActivity.java", "BodyUseAPI": [], "Fixed commit": "fd844b2306594f1ea7c3ecedbb581456d5394fa2", "Url": "https://api.github.com/repos/flamingo31/PathMap", "Date": "2018-04-18T13:05:08Z"},
{"Line": "214=>216", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Toast.makeText(com.marius.pathmap.MapsActivity,java.lang.String,Toast.LENGTH_SHORT)=>android.widget.Toast.makeText(com.marius.pathmap.MapsActivity,getString(R.string.location_permission_denied),Toast.LENGTH_SHORT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3294/buggy-version/app.src.main.java.com.marius.pathmap.MapsActivity.java", "BodyUseAPI": [], "Fixed commit": "fd844b2306594f1ea7c3ecedbb581456d5394fa2", "Url": "https://api.github.com/repos/flamingo31/PathMap", "Date": "2018-04-18T13:05:08Z"},
{"Line": "153=>155", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Toast.makeText(getApplicationContext(),java.lang.String,Toast.LENGTH_LONG)=>android.widget.Toast.makeText(getApplicationContext(),getString(R.string.service_error),Toast.LENGTH_LONG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3294/buggy-version/app.src.main.java.com.marius.pathmap.MapsActivity.java", "BodyUseAPI": [], "Fixed commit": "fd844b2306594f1ea7c3ecedbb581456d5394fa2", "Url": "https://api.github.com/repos/flamingo31/PathMap", "Date": "2018-04-18T13:05:08Z"},
{"Line": "133=>134", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Toast.makeText(getApplicationContext(),java.lang.String,Toast.LENGTH_LONG)=>android.widget.Toast.makeText(getApplicationContext(),getString(R.string.tracking_service_not_working),Toast.LENGTH_LONG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3294/buggy-version/app.src.main.java.com.marius.pathmap.MapsActivity.java", "BodyUseAPI": [], "Fixed commit": "fd844b2306594f1ea7c3ecedbb581456d5394fa2", "Url": "https://api.github.com/repos/flamingo31/PathMap", "Date": "2018-04-18T13:05:08Z"},
{"Line": "13=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.Math.pow(int,int)=>java.lang.Math.pow(double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8188/buggy-version/hw1.GuitarHero.java", "BodyUseAPI": [], "Fixed commit": "db9a780144d3ff075e7a1340f9ef1507258a3593", "Url": "https://api.github.com/repos/zmkoo000/Berkeley-CS61B", "Date": "2018-01-06T13:27:32Z"},
{"Line": "50=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "pojo.com.jsgc.login.Login.getUserID()=>pojo.com.jsgc.admin.User.getUserId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2947/buggy-version/src.main.java.service.com.jsgc.login.LoginService.java", "BodyUseAPI": [], "Fixed commit": "dc9010be34d7095895c0aa072bf4443e902a1661", "Url": "https://api.github.com/repos/IvyB/JSGC_SSM_2018", "Date": "2018-07-25T07:45:45Z"},
{"Line": "51=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "pojo.com.jsgc.login.Login.getLevel()=>pojo.com.jsgc.admin.User.getPermissionLevel()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2947/buggy-version/src.main.java.service.com.jsgc.login.LoginService.java", "BodyUseAPI": [], "Fixed commit": "dc9010be34d7095895c0aa072bf4443e902a1661", "Url": "https://api.github.com/repos/IvyB/JSGC_SSM_2018", "Date": "2018-07-25T07:45:45Z"},
{"Line": "53=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "pojo.com.jsgc.login.Login.getLevel()=>pojo.com.jsgc.admin.User.getPermissionLevel()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2947/buggy-version/src.main.java.service.com.jsgc.login.LoginService.java", "BodyUseAPI": [], "Fixed commit": "dc9010be34d7095895c0aa072bf4443e902a1661", "Url": "https://api.github.com/repos/IvyB/JSGC_SSM_2018", "Date": "2018-07-25T07:45:45Z"},
{"Line": "292=>293", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.gmail.val59000mc.playuhc.mc1_8.configuration.BlockLootConfiguration.parseConfiguration(org.bukkit.configuration.ConfigurationSection)=>com.gmail.val59000mc.playuhc.mc1_13.configuration.MobLootConfiguration.parseConfiguration(org.bukkit.configuration.ConfigurationSection)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1020/buggy-version/src.com.gmail.val59000mc.playuhc.mc1_8.configuration.MainConfiguration.java", "BodyUseAPI": [], "Fixed commit": "877f7922489ae1330ebdadb7ded36b333d0d39d5", "Url": "https://api.github.com/repos/koca2000/PlayUHC-Community", "Date": "2018-08-27T11:33:59Z"},
{"Line": "293=>294", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<org.bukkit.Material, com.gmail.val59000mc.playuhc.mc1_8.configuration.BlockLootConfiguration>.put(mobLootConfig.getMaterial(),com.gmail.val59000mc.playuhc.mc1_8.configuration.BlockLootConfiguration)=>java.util.Map<org.bukkit.entity.EntityType, com.gmail.val59000mc.playuhc.mc1_13.configuration.MobLootConfiguration>.put(mobLootConfig.getEntityType(),com.gmail.val59000mc.playuhc.mc1_13.configuration.MobLootConfiguration)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1020/buggy-version/src.com.gmail.val59000mc.playuhc.mc1_8.configuration.MainConfiguration.java", "BodyUseAPI": [], "Fixed commit": "877f7922489ae1330ebdadb7ded36b333d0d39d5", "Url": "https://api.github.com/repos/koca2000/PlayUHC-Community", "Date": "2018-08-27T11:33:59Z"},
{"Line": "293=>294", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.gmail.val59000mc.playuhc.mc1_8.configuration.BlockLootConfiguration.getMaterial()=>com.gmail.val59000mc.playuhc.mc1_13.configuration.MobLootConfiguration.getEntityType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1020/buggy-version/src.com.gmail.val59000mc.playuhc.mc1_8.configuration.MainConfiguration.java", "BodyUseAPI": [], "Fixed commit": "877f7922489ae1330ebdadb7ded36b333d0d39d5", "Url": "https://api.github.com/repos/koca2000/PlayUHC-Community", "Date": "2018-08-27T11:33:59Z"},
{"Line": "293=>294", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<org.bukkit.Material, com.gmail.val59000mc.playuhc.mc1_8.configuration.BlockLootConfiguration>.put(mobLootConfig.getMaterial(),com.gmail.val59000mc.playuhc.mc1_8.configuration.BlockLootConfiguration)=>java.util.Map<org.bukkit.entity.EntityType, com.gmail.val59000mc.playuhc.mc1_13.configuration.MobLootConfiguration>.put(mobLootConfig.getEntityType(),com.gmail.val59000mc.playuhc.mc1_13.configuration.MobLootConfiguration)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1020/buggy-version/src.com.gmail.val59000mc.playuhc.mc1_8.configuration.MainConfiguration.java", "BodyUseAPI": [], "Fixed commit": "877f7922489ae1330ebdadb7ded36b333d0d39d5", "Url": "https://api.github.com/repos/koca2000/PlayUHC-Community", "Date": "2018-08-27T11:33:59Z"},
{"Line": "293=>293", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<org.bukkit.Material, com.gmail.val59000mc.playuhc.mc1_13.configuration.BlockLootConfiguration>.put(mobLootConfig.getMaterial(),com.gmail.val59000mc.playuhc.mc1_13.configuration.BlockLootConfiguration)=>java.util.Map<org.bukkit.entity.EntityType, com.gmail.val59000mc.playuhc.mc1_13.configuration.MobLootConfiguration>.put(mobLootConfig.getEntityType(),com.gmail.val59000mc.playuhc.mc1_13.configuration.MobLootConfiguration)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1020/buggy-version/src.com.gmail.val59000mc.playuhc.mc1_13.configuration.MainConfiguration.java", "BodyUseAPI": [], "Fixed commit": "877f7922489ae1330ebdadb7ded36b333d0d39d5", "Url": "https://api.github.com/repos/koca2000/PlayUHC-Community", "Date": "2018-08-27T11:33:59Z"},
{"Line": "293=>293", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.gmail.val59000mc.playuhc.mc1_13.configuration.BlockLootConfiguration.getMaterial()=>com.gmail.val59000mc.playuhc.mc1_13.configuration.MobLootConfiguration.getEntityType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1020/buggy-version/src.com.gmail.val59000mc.playuhc.mc1_13.configuration.MainConfiguration.java", "BodyUseAPI": [], "Fixed commit": "877f7922489ae1330ebdadb7ded36b333d0d39d5", "Url": "https://api.github.com/repos/koca2000/PlayUHC-Community", "Date": "2018-08-27T11:33:59Z"},
{"Line": "292=>292", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.gmail.val59000mc.playuhc.mc1_13.configuration.BlockLootConfiguration.parseConfiguration(org.bukkit.configuration.ConfigurationSection)=>com.gmail.val59000mc.playuhc.mc1_13.configuration.MobLootConfiguration.parseConfiguration(org.bukkit.configuration.ConfigurationSection)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1020/buggy-version/src.com.gmail.val59000mc.playuhc.mc1_13.configuration.MainConfiguration.java", "BodyUseAPI": [], "Fixed commit": "877f7922489ae1330ebdadb7ded36b333d0d39d5", "Url": "https://api.github.com/repos/koca2000/PlayUHC-Community", "Date": "2018-08-27T11:33:59Z"},
{"Line": "293=>293", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<org.bukkit.Material, com.gmail.val59000mc.playuhc.mc1_13.configuration.BlockLootConfiguration>.put(mobLootConfig.getMaterial(),com.gmail.val59000mc.playuhc.mc1_13.configuration.BlockLootConfiguration)=>java.util.Map<org.bukkit.entity.EntityType, com.gmail.val59000mc.playuhc.mc1_13.configuration.MobLootConfiguration>.put(mobLootConfig.getEntityType(),com.gmail.val59000mc.playuhc.mc1_13.configuration.MobLootConfiguration)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1020/buggy-version/src.com.gmail.val59000mc.playuhc.mc1_13.configuration.MainConfiguration.java", "BodyUseAPI": [], "Fixed commit": "877f7922489ae1330ebdadb7ded36b333d0d39d5", "Url": "https://api.github.com/repos/koca2000/PlayUHC-Community", "Date": "2018-08-27T11:33:59Z"},
{"Line": "157=>157", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javassist.offload.reify.FunctionTable<? extends javassist.offload.ast.JMethod, ? extends javassist.offload.ast.Dispatcher>.put(javassist.bytecode.MethodInfo,javassist.offload.ast.ASTree,javassist.offload.ast.ASTree[],javassist.offload.ast.Function)=>javassist.offload.reify.FunctionTable<? extends javassist.offload.ast.JMethod, ? extends javassist.offload.ast.Dispatcher>.put(javassist.bytecode.MethodInfo,javassist.offload.ast.ASTree,javassist.offload.ast.ASTree[],javassist.offload.ast.Function,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/839/buggy-version/src.main.javassist.offload.reify.Tracer.java", "BodyUseAPI": [], "Fixed commit": "f6dc5921cb99e0236c32304c2893a34165838082", "Url": "https://api.github.com/repos/csg-tokyo/bytespresso", "Date": "2018-02-02T04:48:05Z"},
{"Line": "124=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "redis.clients.jedis.Jedis.zrem(java.lang.String,java.lang.Object)=>redis.clients.jedis.Jedis.zrem(java.lang.String,java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4512/buggy-version/src.main.java.io.github.kigsmtua.milau.worker.Worker.java", "BodyUseAPI": [], "Fixed commit": "026e17f37b81481b496d66e0abfe06017c731778", "Url": "https://api.github.com/repos/kigsmtua/milau", "Date": "2018-10-02T14:21:12Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Class.getFields()=>java.lang.Class.getDeclaredFields()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6041/buggy-version/src.main.java.converter.classTree.ParsedTree.java", "BodyUseAPI": [], "Fixed commit": "1756a123d9c7cfec06844915186c95582b47b0d4", "Url": "https://api.github.com/repos/Withingwolf/CommonConverter", "Date": "2018-08-18T13:42:31Z"},
{"Line": "533=>534", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.creativemd.littletiles.LittleStructurePremade.getPremadeStack(java.lang.String)=>com.creativemd.littletiles.common.structure.premade.LittleStructurePremade.getPremadeStack(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1964/buggy-version/src.main.java.com.creativemd.littletiles.LittleTiles.java", "BodyUseAPI": [], "Fixed commit": "2143b0c07392ad8661aab056022f3a6aacdac0d8", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-10-06T19:10:23Z"},
{"Line": "531=>532", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.creativemd.littletiles.LittleStructurePremade.getPremadeStack(java.lang.String)=>com.creativemd.littletiles.common.structure.premade.LittleStructurePremade.getPremadeStack(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1964/buggy-version/src.main.java.com.creativemd.littletiles.LittleTiles.java", "BodyUseAPI": [], "Fixed commit": "2143b0c07392ad8661aab056022f3a6aacdac0d8", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-10-06T19:10:23Z"},
{"Line": "535=>536", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.creativemd.littletiles.LittleStructurePremade.getPremadeStack(java.lang.String)=>com.creativemd.littletiles.common.structure.premade.LittleStructurePremade.getPremadeStack(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1964/buggy-version/src.main.java.com.creativemd.littletiles.LittleTiles.java", "BodyUseAPI": [], "Fixed commit": "2143b0c07392ad8661aab056022f3a6aacdac0d8", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-10-06T19:10:23Z"},
{"Line": "531=>532", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.creativemd.littletiles.LittleStructurePremade.getPremadeStack(java.lang.String)=>com.creativemd.littletiles.common.structure.premade.LittleStructurePremade.getPremadeStack(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1964/buggy-version/src.main.java.com.creativemd.littletiles.LittleTiles.java", "BodyUseAPI": [], "Fixed commit": "2143b0c07392ad8661aab056022f3a6aacdac0d8", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-10-06T19:10:23Z"},
{"Line": "47=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.content.Intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)=>android.content.Intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5205/buggy-version/app.src.main.java.opencontacts.open.com.opencontacts.utils.AndroidUtils.java", "BodyUseAPI": [], "Fixed commit": "79a6c92da30063a43d7703c778c8b53f2fdcdc6d", "Url": "https://api.github.com/repos/sultanahamer/OpenContacts", "Date": "2018-01-17T01:37:41Z"},
{"Line": "409=>146", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "event.getBossInfo().setName(this.getDisplayName().setStyle(new net.minecraft.util.text.Style().setColor(com.teammetallurgy.atum.entity.undead.EntityPharaoh.God.getGod(this.getVariant()).getColor())))=>com.teammetallurgy.atum.entity.undead.BossInfoServer.setName(this.getDisplayName().setStyle(new net.minecraft.util.text.Style().setColor(com.teammetallurgy.atum.entity.undead.EntityPharaoh.God.getGod(this.getVariant()).getColor())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/465/buggy-version/src.main.java.com.teammetallurgy.atum.entity.undead.EntityPharaoh.java", "BodyUseAPI": [], "Fixed commit": "c576609b79f706efa97a717df6046305abe460e4", "Url": "https://api.github.com/repos/TeamMetallurgy/Atum2", "Date": "2018-10-30T18:52:56Z"},
{"Line": "31=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.twilio.video.VideoView.setVideoScaleType(VideoScaleType.ASPECT_FILL)=>com.twilio.video.VideoView.setVideoScaleType(VideoScaleType.ASPECT_FIT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9654/buggy-version/android.src.main.java.com.twiliorn.library.RNVideoViewGroup.java", "BodyUseAPI": [], "Fixed commit": "9a19832434637c64ae9d815fd49b0c3c63ffffb2", "Url": "https://api.github.com/repos/timmeh-m/react-native-twilio-video-webrtc", "Date": "2018-01-29T09:22:45Z"},
{"Line": "770=>771", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.optimizely.ab.android.user_profile.DefaultUserProfileService.newInstance(java.lang.String,android.content.Context)=>com.optimizely.ab.android.user_profile.DefaultUserProfileService.newInstance(config.getKey(),android.content.Context)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6696/buggy-version/android-sdk.src.main.java.com.optimizely.ab.android.sdk.OptimizelyManager.java", "BodyUseAPI": [], "Fixed commit": "e5789ec4d0869c92a242578923987d4cba06a428", "Url": "https://api.github.com/repos/optimizely/android-sdk", "Date": "2018-09-21T18:49:40Z"},
{"Line": "228=>228", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.ui.helpers.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2575/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "7bf3bf7fb5679ad9d97a40b9d4f48294ec57912f", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "251=>251", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.ui.helpers.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2575/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "7bf3bf7fb5679ad9d97a40b9d4f48294ec57912f", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "147=>148", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "speciesnetwork.simulator.Taxon.getID()=>java.util.Map<java.lang.String, speciesnetwork.NetworkNode>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9835/buggy-version/src.speciesnetwork.simulator.CoalescentSimulator.java", "BodyUseAPI": [], "Fixed commit": "2da2631b66bc0715716b7d7ac2ba795c59b12286", "Url": "https://api.github.com/repos/zhangchicool/speciesnetwork", "Date": "2018-03-22T02:42:47Z"},
{"Line": "150=>152", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Map<java.lang.String, beast.evolution.tree.Node>.get(geneTip.getID())=>java.util.Map<java.lang.String, beast.evolution.tree.Node>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9835/buggy-version/src.speciesnetwork.simulator.CoalescentSimulator.java", "BodyUseAPI": [], "Fixed commit": "2da2631b66bc0715716b7d7ac2ba795c59b12286", "Url": "https://api.github.com/repos/zhangchicool/speciesnetwork", "Date": "2018-03-22T02:42:47Z"},
{"Line": "147=>148", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Map<java.lang.String, speciesnetwork.NetworkNode>.get(speciesTip.getID())=>java.util.Map<java.lang.String, speciesnetwork.NetworkNode>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9835/buggy-version/src.speciesnetwork.simulator.CoalescentSimulator.java", "BodyUseAPI": [], "Fixed commit": "2da2631b66bc0715716b7d7ac2ba795c59b12286", "Url": "https://api.github.com/repos/zhangchicool/speciesnetwork", "Date": "2018-03-22T02:42:47Z"},
{"Line": "17=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Janda.makeDataFramFromCSV(java.util.Scanner)=>Janda.makeDataFrameFromCSV(java.util.Scanner)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1293/buggy-version/Janda.java", "BodyUseAPI": [], "Fixed commit": "d619c5f3ca4bce6bb125536fbbfed3d29919edf8", "Url": "https://api.github.com/repos/yashvig24/Janda", "Date": "2018-06-16T10:51:06Z"},
{"Line": "60=>58", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "totalcross.ui.ScrollContainer.add(totalcross.ui.Slider,totalcross.sample.components.ui.CENTER,(((AFTER) + (fmH)) + 50),((totalcross.sys.Settings.screenWidth) - (((totalcross.sys.Settings.screenWidth) / 10) * 2)),totalcross.sample.components.ui.PREFERRED)=>totalcross.sample.components.ui.SliderSample.add(totalcross.ui.Slider,totalcross.sample.components.ui.CENTER,(((AFTER) + (fmH)) + 50),((totalcross.sys.Settings.screenWidth) - (((totalcross.sys.Settings.screenWidth) / 10) * 2)),totalcross.sample.components.ui.PREFERRED)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7418/buggy-version/src.main.java.totalcross.sample.components.ui.SliderSample.java", "BodyUseAPI": [], "Fixed commit": "a46a4c1345f1a97b16b56e61bf456ccb8b20596c", "Url": "https://api.github.com/repos/TotalCross/TCSample", "Date": "2018-07-27T20:00:27Z"},
{"Line": "38=>36", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "totalcross.ui.ScrollContainer.add(totalcross.ui.Slider,totalcross.sample.components.ui.CENTER,(((TOP) + ((fmH) * 2)) + 150),((totalcross.sys.Settings.screenWidth) - (((totalcross.sys.Settings.screenWidth) / 10) * 2)),totalcross.sample.components.ui.PREFERRED)=>totalcross.sample.components.ui.SliderSample.add(totalcross.ui.Slider,totalcross.sample.components.ui.CENTER,(((TOP) + ((fmH) * 2)) + 150),((totalcross.sys.Settings.screenWidth) - (((totalcross.sys.Settings.screenWidth) / 10) * 2)),totalcross.sample.components.ui.PREFERRED)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7418/buggy-version/src.main.java.totalcross.sample.components.ui.SliderSample.java", "BodyUseAPI": [], "Fixed commit": "a46a4c1345f1a97b16b56e61bf456ccb8b20596c", "Url": "https://api.github.com/repos/TotalCross/TCSample", "Date": "2018-07-27T20:00:27Z"},
{"Line": "51=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "totalcross.ui.ScrollContainer.add(totalcross.ui.Slider,totalcross.sample.components.ui.CENTER,(((AFTER) + (fmH)) + 100),((totalcross.sys.Settings.screenWidth) - (((totalcross.sys.Settings.screenWidth) / 10) * 2)),totalcross.sample.components.ui.PREFERRED)=>totalcross.sample.components.ui.SliderSample.add(totalcross.ui.Slider,totalcross.sample.components.ui.CENTER,(((AFTER) + (fmH)) + 100),((totalcross.sys.Settings.screenWidth) - (((totalcross.sys.Settings.screenWidth) / 10) * 2)),totalcross.sample.components.ui.PREFERRED)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7418/buggy-version/src.main.java.totalcross.sample.components.ui.SliderSample.java", "BodyUseAPI": [], "Fixed commit": "a46a4c1345f1a97b16b56e61bf456ccb8b20596c", "Url": "https://api.github.com/repos/TotalCross/TCSample", "Date": "2018-07-27T20:00:27Z"},
{"Line": "69=>67", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "totalcross.ui.ScrollContainer.add(totalcross.ui.Slider,((BEFORE) + 200),(((AFTER) + (fmH)) + 200),totalcross.sample.components.ui.PREFERRED,((totalcross.sys.Settings.screenHeight) / 3))=>totalcross.sample.components.ui.SliderSample.add(totalcross.ui.Slider,((BEFORE) + 200),(((AFTER) + (fmH)) + 200),totalcross.sample.components.ui.PREFERRED,((totalcross.sys.Settings.screenHeight) / 3))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7418/buggy-version/src.main.java.totalcross.sample.components.ui.SliderSample.java", "BodyUseAPI": [], "Fixed commit": "a46a4c1345f1a97b16b56e61bf456ccb8b20596c", "Url": "https://api.github.com/repos/TotalCross/TCSample", "Date": "2018-07-27T20:00:27Z"},
{"Line": "87=>85", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "totalcross.ui.ScrollContainer.add(totalcross.ui.Slider,((AFTER) + 200),totalcross.sample.components.ui.SAME,totalcross.sample.components.ui.PREFERRED,((totalcross.sys.Settings.screenHeight) / 3))=>totalcross.sample.components.ui.SliderSample.add(totalcross.ui.Slider,((AFTER) + 200),totalcross.sample.components.ui.SAME,totalcross.sample.components.ui.PREFERRED,((totalcross.sys.Settings.screenHeight) / 3))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7418/buggy-version/src.main.java.totalcross.sample.components.ui.SliderSample.java", "BodyUseAPI": [], "Fixed commit": "a46a4c1345f1a97b16b56e61bf456ccb8b20596c", "Url": "https://api.github.com/repos/TotalCross/TCSample", "Date": "2018-07-27T20:00:27Z"},
{"Line": "78=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "totalcross.ui.ScrollContainer.add(totalcross.ui.Slider,totalcross.sample.components.ui.CENTER,totalcross.sample.components.ui.SAME,totalcross.sample.components.ui.PREFERRED,((totalcross.sys.Settings.screenHeight) / 3))=>totalcross.sample.components.ui.SliderSample.add(totalcross.ui.Slider,totalcross.sample.components.ui.CENTER,totalcross.sample.components.ui.SAME,totalcross.sample.components.ui.PREFERRED,((totalcross.sys.Settings.screenHeight) / 3))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7418/buggy-version/src.main.java.totalcross.sample.components.ui.SliderSample.java", "BodyUseAPI": [], "Fixed commit": "a46a4c1345f1a97b16b56e61bf456ccb8b20596c", "Url": "https://api.github.com/repos/TotalCross/TCSample", "Date": "2018-07-27T20:00:27Z"},
{"Line": "145=>141", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.dine.dinendash.dinendash.viewModels.NewReceiptViewModel.setProcessed(boolean)=>com.dine.dinendash.dinendash.util.PhotoAnalyzer.analyze(android.graphics.Bitmap,com.dine.dinendash.dinendash.viewModels.NewReceiptViewModel)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9812/buggy-version/app.src.main.java.com.dine.dinendash.dinendash.viewModels.NewReceiptViewModel.java", "BodyUseAPI": [], "Fixed commit": "35ce3ab1825bc2373ae8a96f7a83810d2eb95fc1", "Url": "https://api.github.com/repos/Dine-N-Dash/Android-App", "Date": "2018-10-29T04:12:13Z"},
{"Line": "308=>301", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.bither.bitherj.core.Address.getPubKey()=>net.bither.ui.base.QrCodeImageView.getContent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2881/buggy-version/bither-android.src.net.bither.SignHashActivity.java", "BodyUseAPI": [], "Fixed commit": "827f7bba3443dbaf9f2d3babae44358620716b67", "Url": "https://api.github.com/repos/bither/bither-android", "Date": "2018-02-06T06:37:11Z"},
{"Line": "308=>301", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.bither.bitherj.core.Address.getPubKey()=>net.bither.ui.base.QrCodeImageView.getContent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2881/buggy-version/bither-android.src.net.bither.SignHashActivity.java", "BodyUseAPI": [], "Fixed commit": "827f7bba3443dbaf9f2d3babae44358620716b67", "Url": "https://api.github.com/repos/bither/bither-android", "Date": "2018-02-06T06:37:11Z"},
{"Line": "308=>301", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.bither.bitherj.utils.Utils.bytesToHexString(address.getPubKey())=>net.bither.util.StringUtil.copyString(ivQr.getContent())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2881/buggy-version/bither-android.src.net.bither.SignHashActivity.java", "BodyUseAPI": [], "Fixed commit": "827f7bba3443dbaf9f2d3babae44358620716b67", "Url": "https://api.github.com/repos/bither/bither-android", "Date": "2018-02-06T06:37:11Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "web.ignoring().antMatchers(\"/loginSuccess\", \"/v2/api-docs\", \"/configuration/**\", \"/swagger-resources/**\", \"/swagger-ui.html\", \"/webjars/**\", \"/user/refreshToken/**\", \"/user/password/reset\", \"/password/create\", \"/user/create-roomie\", \"/user/social/fb-login\", \"/user/social/google-login\", \"/age-range\", \"/occupation\", \"/genders\", \"/property\", \"/states\", \"/cities/**\", \"/uploads/**\", \"/get-user-by-id/**\").antMatchers(HttpMethod.GET, \"/room-post/{id:[\\\\d+]}\").antMatchers(HttpMethod.GET,java.lang.String)=>web.ignoring().antMatchers(\"/loginSuccess\", \"/v2/api-docs\", \"/configuration/**\", \"/swagger-resources/**\", \"/swagger-ui.html\", \"/webjars/**\", \"/user/refreshToken/**\", \"/user/password/reset\", \"/password/create\", \"/user/create-roomie\", \"/user/social/fb-login\", \"/user/social/google-login\", \"/age-range\", \"/occupation\", \"/genders\", \"/property\", \"/states\", \"/cities/**\", \"/uploads/**\", \"/get-user-by-id/**\").antMatchers(HttpMethod.GET, \"/room-post/{id:[\\\\d]+}\").antMatchers(HttpMethod.GET,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2108/buggy-version/src.main.java.com.housematesfinder.housematesfinder.security.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "8a0f85763435690065bdc5591d6edf64f8cd70e8", "Url": "https://api.github.com/repos/prestigegodson/EP", "Date": "2018-10-11T08:41:24Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "web.ignoring().antMatchers(\"/loginSuccess\", \"/v2/api-docs\", \"/configuration/**\", \"/swagger-resources/**\", \"/swagger-ui.html\", \"/webjars/**\", \"/user/refreshToken/**\", \"/user/password/reset\", \"/password/create\", \"/user/create-roomie\", \"/user/social/fb-login\", \"/user/social/google-login\", \"/age-range\", \"/occupation\", \"/genders\", \"/property\", \"/states\", \"/cities/**\", \"/uploads/**\", \"/get-user-by-id/**\").antMatchers(HttpMethod.GET, \"/room-post/{id:[\\\\d+]}\").antMatchers(HttpMethod.GET, \"/room-post/user/{userId:[\\\\d+]}\").antMatchers(HttpMethod.GET, \"/room-post\").antMatchers(HttpMethod.GET,java.lang.String)=>web.ignoring().antMatchers(\"/loginSuccess\", \"/v2/api-docs\", \"/configuration/**\", \"/swagger-resources/**\", \"/swagger-ui.html\", \"/webjars/**\", \"/user/refreshToken/**\", \"/user/password/reset\", \"/password/create\", \"/user/create-roomie\", \"/user/social/fb-login\", \"/user/social/google-login\", \"/age-range\", \"/occupation\", \"/genders\", \"/property\", \"/states\", \"/cities/**\", \"/uploads/**\", \"/get-user-by-id/**\").antMatchers(HttpMethod.GET, \"/room-post/{id:[\\\\d]+}\").antMatchers(HttpMethod.GET, \"/room-post/user/{userId:[\\\\d]+}\").antMatchers(HttpMethod.GET, \"/room-post\").antMatchers(HttpMethod.GET,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2108/buggy-version/src.main.java.com.housematesfinder.housematesfinder.security.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "8a0f85763435690065bdc5591d6edf64f8cd70e8", "Url": "https://api.github.com/repos/prestigegodson/EP", "Date": "2018-10-11T08:41:24Z"},
{"Line": "185=>185", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.support.v4.app.FragmentTransaction.addToBackStack(fragment.getClass().getSimpleName())=>android.support.v4.app.FragmentTransaction.addToBackStack(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2879/buggy-version/router.src.main.java.com.navigation.logvin.router.Router.java", "BodyUseAPI": [], "Fixed commit": "c6d8f40fccd29fd38281a063b855b8266eb6f768", "Url": "https://api.github.com/repos/VaLgn/Router", "Date": "2018-03-08T15:55:51Z"},
{"Line": "59=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().requestMatchers(CorsUtils::isPreFlightRequest).permitAll().and().formLogin().successHandler(customAuthenticationSuccessHandler).failureHandler(customAuthenticationFailureHandler).and().exceptionHandling().accessDeniedHandler(customAccessDeniedHandler).and().cors().and().csrf()=>http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().requestMatchers(CorsUtils::isPreFlightRequest).permitAll().and().formLogin().successHandler(customAuthenticationSuccessHandler).failureHandler(customAuthenticationFailureHandler).and().authorizeRequests().antMatchers(\"/test\").permitAll().and().exceptionHandling().accessDeniedHandler(customAccessDeniedHandler).and().cors()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3845/buggy-version/src.main.java.com.oktobro.fondo.security.config.Oauth2ResourceServerConfig.java", "BodyUseAPI": [], "Fixed commit": "fcc9b6e22fee7fe70bcb2b08ed8fd2c48b30b8b6", "Url": "https://api.github.com/repos/oktfolio/fondo-security", "Date": "2018-09-27T03:48:15Z"},
{"Line": "59=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().requestMatchers(CorsUtils::isPreFlightRequest).permitAll().and().formLogin().successHandler(customAuthenticationSuccessHandler).failureHandler(customAuthenticationFailureHandler).and().exceptionHandling().accessDeniedHandler(com.oktobro.fondo.security.authentication.CustomAccessDeniedHandler)=>http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().requestMatchers(CorsUtils::isPreFlightRequest).permitAll().and().formLogin().successHandler(customAuthenticationSuccessHandler).failureHandler(customAuthenticationFailureHandler).and().authorizeRequests().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3845/buggy-version/src.main.java.com.oktobro.fondo.security.config.Oauth2ResourceServerConfig.java", "BodyUseAPI": [], "Fixed commit": "fcc9b6e22fee7fe70bcb2b08ed8fd2c48b30b8b6", "Url": "https://api.github.com/repos/oktfolio/fondo-security", "Date": "2018-09-27T03:48:15Z"},
{"Line": "59=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().requestMatchers(CorsUtils::isPreFlightRequest).permitAll().and().formLogin().successHandler(customAuthenticationSuccessHandler).failureHandler(customAuthenticationFailureHandler).and().exceptionHandling()=>http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().requestMatchers(CorsUtils::isPreFlightRequest).permitAll().and().formLogin().successHandler(customAuthenticationSuccessHandler).failureHandler(customAuthenticationFailureHandler).and().authorizeRequests()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3845/buggy-version/src.main.java.com.oktobro.fondo.security.config.Oauth2ResourceServerConfig.java", "BodyUseAPI": [], "Fixed commit": "fcc9b6e22fee7fe70bcb2b08ed8fd2c48b30b8b6", "Url": "https://api.github.com/repos/oktfolio/fondo-security", "Date": "2018-09-27T03:48:15Z"},
{"Line": "59=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().requestMatchers(CorsUtils::isPreFlightRequest).permitAll().and().formLogin().successHandler(customAuthenticationSuccessHandler).failureHandler(customAuthenticationFailureHandler).and().exceptionHandling().accessDeniedHandler(customAccessDeniedHandler).and().cors()=>http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().requestMatchers(CorsUtils::isPreFlightRequest).permitAll().and().formLogin().successHandler(customAuthenticationSuccessHandler).failureHandler(customAuthenticationFailureHandler).and().authorizeRequests().antMatchers(\"/test\").permitAll().and().exceptionHandling().accessDeniedHandler(com.oktobro.fondo.security.authentication.CustomAccessDeniedHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3845/buggy-version/src.main.java.com.oktobro.fondo.security.config.Oauth2ResourceServerConfig.java", "BodyUseAPI": [], "Fixed commit": "fcc9b6e22fee7fe70bcb2b08ed8fd2c48b30b8b6", "Url": "https://api.github.com/repos/oktfolio/fondo-security", "Date": "2018-09-27T03:48:15Z"},
{"Line": "59=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().requestMatchers(CorsUtils::isPreFlightRequest).permitAll().and().formLogin().successHandler(customAuthenticationSuccessHandler).failureHandler(customAuthenticationFailureHandler).and().exceptionHandling().accessDeniedHandler(customAccessDeniedHandler).and().cors().and().csrf().disable()=>http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().requestMatchers(CorsUtils::isPreFlightRequest).permitAll().and().formLogin().successHandler(customAuthenticationSuccessHandler).failureHandler(customAuthenticationFailureHandler).and().authorizeRequests().antMatchers(\"/test\").permitAll().and().exceptionHandling().accessDeniedHandler(customAccessDeniedHandler).and().cors().and()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3845/buggy-version/src.main.java.com.oktobro.fondo.security.config.Oauth2ResourceServerConfig.java", "BodyUseAPI": [], "Fixed commit": "fcc9b6e22fee7fe70bcb2b08ed8fd2c48b30b8b6", "Url": "https://api.github.com/repos/oktfolio/fondo-security", "Date": "2018-09-27T03:48:15Z"},
{"Line": "59=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().requestMatchers(CorsUtils::isPreFlightRequest).permitAll().and().formLogin().successHandler(customAuthenticationSuccessHandler).failureHandler(customAuthenticationFailureHandler).and().exceptionHandling().accessDeniedHandler(customAccessDeniedHandler).and()=>http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().requestMatchers(CorsUtils::isPreFlightRequest).permitAll().and().formLogin().successHandler(customAuthenticationSuccessHandler).failureHandler(customAuthenticationFailureHandler).and().authorizeRequests().antMatchers(\"/test\").permitAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3845/buggy-version/src.main.java.com.oktobro.fondo.security.config.Oauth2ResourceServerConfig.java", "BodyUseAPI": [], "Fixed commit": "fcc9b6e22fee7fe70bcb2b08ed8fd2c48b30b8b6", "Url": "https://api.github.com/repos/oktfolio/fondo-security", "Date": "2018-09-27T03:48:15Z"},
{"Line": "98=>100", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "this.url.getBooleanParameter(URLParamType.transExceptionStack.getName(),URLParamType.transExceptionStack.getBooleanValue())=>this.url.getBooleanParameter(URLParamType.transExceptionStack.getName(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6879/buggy-version/motan-core.src.main.java.com.weibo.api.motan.rpc.DefaultProvider.java", "BodyUseAPI": [], "Fixed commit": "d83ce8b63c3c8a239339950cc723f0a65e91e89c", "Url": "https://api.github.com/repos/sunnights/motan", "Date": "2018-07-10T09:17:54Z"},
{"Line": "75=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.Exception.getCause()=>response.getException().getCause()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6879/buggy-version/motan-core.src.main.java.com.weibo.api.motan.rpc.DefaultProvider.java", "BodyUseAPI": [], "Fixed commit": "d83ce8b63c3c8a239339950cc723f0a65e91e89c", "Url": "https://api.github.com/repos/sunnights/motan", "Date": "2018-07-10T09:17:54Z"},
{"Line": "75=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Exception.getCause()=>com.weibo.api.motan.rpc.DefaultResponse.getException()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6879/buggy-version/motan-core.src.main.java.com.weibo.api.motan.rpc.DefaultProvider.java", "BodyUseAPI": [], "Fixed commit": "d83ce8b63c3c8a239339950cc723f0a65e91e89c", "Url": "https://api.github.com/repos/sunnights/motan", "Date": "2018-07-10T09:17:54Z"},
{"Line": "75=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.Throwable.getClass()=>response.getException().getCause().getClass()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6879/buggy-version/motan-core.src.main.java.com.weibo.api.motan.rpc.DefaultProvider.java", "BodyUseAPI": [], "Fixed commit": "d83ce8b63c3c8a239339950cc723f0a65e91e89c", "Url": "https://api.github.com/repos/sunnights/motan", "Date": "2018-07-10T09:17:54Z"},
{"Line": "92=>92", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.xpay.pay.model.StoreGoods.getExtQrCodes()=>org.apache.commons.lang3.StringUtils.split(java.lang.String,char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1415/buggy-version/src.main.java.com.xpay.pay.model.StoreGoods.java", "BodyUseAPI": [], "Fixed commit": "31385ffaae23700f3c46570ab1cddf5c789bc5c3", "Url": "https://api.github.com/repos/zpingmapay/xpay", "Date": "2018-01-24T08:59:39Z"},
{"Line": "441=>441", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Map<java.lang.reflect.Type, org.eclipse.microprofile.config.spi.Converter>.add(java.lang.Class,fish.payara.nucleus.microprofile.config.converters.StringArrayConverter)=>java.util.Map<java.lang.reflect.Type, org.eclipse.microprofile.config.spi.Converter>.put(java.lang.Class,fish.payara.nucleus.microprofile.config.converters.StringArrayConverter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6956/buggy-version/nucleus.payara-modules.nucleus-microprofile.config-service.src.main.java.fish.payara.nucleus.microprofile.config.spi.ConfigProviderResolverImpl.java", "BodyUseAPI": [], "Fixed commit": "c205b8b8ba0077a33c33d301310466a67bea5512", "Url": "https://api.github.com/repos/MattGill98/Payara", "Date": "2018-05-29T17:26:41Z"},
{"Line": "22=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.alitoyou.TOOLS.MyClass.Keyword.getKeyword()=>com.alitoyou.TOOLS.Keyword.getKeyword()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7601/buggy-version/app.src.main.java.com.alitoyou.HELP.KeywordAdapter.java", "BodyUseAPI": [], "Fixed commit": "983efa4a866dc2ec475b2cfcf029df388da4b84c", "Url": "https://api.github.com/repos/singtolee/ALITOYOUANDROID", "Date": "2018-09-07T06:35:31Z"},
{"Line": "80=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.alitoyou.TOOLS.MyClass.Keyword.getKeyword()=>com.alitoyou.TOOLS.Keyword.getKeyword()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7601/buggy-version/app.src.main.java.com.alitoyou.Search.SearchActivity.java", "BodyUseAPI": [], "Fixed commit": "983efa4a866dc2ec475b2cfcf029df388da4b84c", "Url": "https://api.github.com/repos/singtolee/ALITOYOUANDROID", "Date": "2018-09-07T06:35:31Z"},
{"Line": "113=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.neo4j.io.mem.GrabAllocator.Grab.canAllocate(long)=>org.neo4j.io.mem.GrabAllocator.Grab.canAllocate(long,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5983/buggy-version/community.io.src.main.java.org.neo4j.io.mem.GrabAllocator.java", "BodyUseAPI": [], "Fixed commit": "7780d8c7f6d5df0c94069d954ca56ee0a497599f", "Url": "https://api.github.com/repos/systay/neo4j", "Date": "2018-04-30T11:00:06Z"},
{"Line": "101=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.neo4j.io.mem.GrabAllocator.Grab.canAllocate(long)=>org.neo4j.io.mem.GrabAllocator.Grab.canAllocate(long,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5983/buggy-version/community.io.src.main.java.org.neo4j.io.mem.GrabAllocator.java", "BodyUseAPI": [], "Fixed commit": "7780d8c7f6d5df0c94069d954ca56ee0a497599f", "Url": "https://api.github.com/repos/systay/neo4j", "Date": "2018-04-30T11:00:06Z"},
{"Line": "119=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.neo4j.io.mem.GrabAllocator.Grab.canAllocate(long)=>org.neo4j.io.mem.GrabAllocator.Grab.canAllocate(long,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5983/buggy-version/community.io.src.main.java.org.neo4j.io.mem.GrabAllocator.java", "BodyUseAPI": [], "Fixed commit": "7780d8c7f6d5df0c94069d954ca56ee0a497599f", "Url": "https://api.github.com/repos/systay/neo4j", "Date": "2018-04-30T11:00:06Z"},
{"Line": "79=>79", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getActivity().getIntent()=>getActivity().recreate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1532/buggy-version/app.src.main.java.org.ldscd.callingworkflow.display.ConflictInfoFragment.java", "BodyUseAPI": [], "Fixed commit": "e2e462ee2c15483e1c51b5beba13c2117521cf9c", "Url": "https://api.github.com/repos/mstauff/cwf-android", "Date": "2018-05-04T14:49:48Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.sql.PreparedStatement.setLong(int,command.id)=>java.sql.PreparedStatement.setString(int,command.code)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5275/buggy-version/twitch-chat-bot.src.main.java.com.etherblood.twitch.chat.bot.commands.CommandRepository.java", "BodyUseAPI": [], "Fixed commit": "9c37f422b92dbc90b0c25464d9ab2c54cee65509", "Url": "https://api.github.com/repos/etherblood/twitch-chat-bot", "Date": "2018-07-15T11:37:29Z"},
{"Line": "33=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.sql.PreparedStatement.setString(int,command.author)=>java.sql.PreparedStatement.setLong(int,command.useCount)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5275/buggy-version/twitch-chat-bot.src.main.java.com.etherblood.twitch.chat.bot.commands.CommandRepository.java", "BodyUseAPI": [], "Fixed commit": "9c37f422b92dbc90b0c25464d9ab2c54cee65509", "Url": "https://api.github.com/repos/etherblood/twitch-chat-bot", "Date": "2018-07-15T11:37:29Z"},
{"Line": "34=>34", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.sql.PreparedStatement.setLong(int,command.useCount)=>java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5275/buggy-version/twitch-chat-bot.src.main.java.com.etherblood.twitch.chat.bot.commands.CommandRepository.java", "BodyUseAPI": [], "Fixed commit": "9c37f422b92dbc90b0c25464d9ab2c54cee65509", "Url": "https://api.github.com/repos/etherblood/twitch-chat-bot", "Date": "2018-07-15T11:37:29Z"},
{"Line": "1184=>1184", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "gregtech.api.metatileentity.GT_CoverBehavior.letsFluidIn(((byte) (aSide.ordinal())),int,int,((mMetaTileEntity.getFluid()) == null ? null : mMetaTileEntity.getFluid().getFluid()),gregtech.api.metatileentity.BaseMetaPipeEntity)=>gregtech.api.metatileentity.GT_CoverBehavior.letsFluidIn(((byte) (aSide.ordinal())),int,int,net.minecraftforge.fluids.Fluid,gregtech.api.metatileentity.BaseMetaPipeEntity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9445/buggy-version/src.main.java.gregtech.api.metatileentity.BaseMetaPipeEntity.java", "BodyUseAPI": [], "Fixed commit": "9028e3cabe2a28ef4c68c4f9ac0372f3669dc05a", "Url": "https://api.github.com/repos/IdealIndustrial/GT5Unofficial", "Date": "2018-03-22T17:38:00Z"},
{"Line": "1188=>1188", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "gregtech.api.metatileentity.GT_CoverBehavior.letsFluidOut(((byte) (aSide.ordinal())),int,int,((mMetaTileEntity.getFluid()) == null ? null : mMetaTileEntity.getFluid().getFluid()),gregtech.api.metatileentity.BaseMetaPipeEntity)=>gregtech.api.metatileentity.GT_CoverBehavior.letsFluidOut(((byte) (aSide.ordinal())),int,int,net.minecraftforge.fluids.Fluid,gregtech.api.metatileentity.BaseMetaPipeEntity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9445/buggy-version/src.main.java.gregtech.api.metatileentity.BaseMetaPipeEntity.java", "BodyUseAPI": [], "Fixed commit": "9028e3cabe2a28ef4c68c4f9ac0372f3669dc05a", "Url": "https://api.github.com/repos/IdealIndustrial/GT5Unofficial", "Date": "2018-03-22T17:38:00Z"},
{"Line": "343=>343", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.preference.CheckBoxPreference.setChecked(boolean)=>android.preference.SwitchPreference.setChecked(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4695/buggy-version/app.src.main.java.ac.robinson.pod.SettingsActivity.java", "BodyUseAPI": [], "Fixed commit": "ec116d8ae1ff5fd1302a2caba0fcc56ce3298108", "Url": "https://api.github.com/repos/reshaping-the-future/appropriate", "Date": "2018-10-07T09:12:00Z"},
{"Line": "264=>264", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.preference.CheckBoxPreference.setOnPreferenceChangeListener(ac.robinson.pod.SettingsActivity)=>android.preference.SwitchPreference.setOnPreferenceChangeListener(ac.robinson.pod.SettingsActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4695/buggy-version/app.src.main.java.ac.robinson.pod.SettingsActivity.java", "BodyUseAPI": [], "Fixed commit": "ec116d8ae1ff5fd1302a2caba0fcc56ce3298108", "Url": "https://api.github.com/repos/reshaping-the-future/appropriate", "Date": "2018-10-07T09:12:00Z"},
{"Line": "265=>265", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.preference.CheckBoxPreference.isChecked()=>android.preference.SwitchPreference.isChecked()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4695/buggy-version/app.src.main.java.ac.robinson.pod.SettingsActivity.java", "BodyUseAPI": [], "Fixed commit": "ec116d8ae1ff5fd1302a2caba0fcc56ce3298108", "Url": "https://api.github.com/repos/reshaping-the-future/appropriate", "Date": "2018-10-07T09:12:00Z"},
{"Line": "378=>377", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.preference.CheckBoxPreference.setChecked(boolean)=>android.preference.SwitchPreference.setChecked(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4695/buggy-version/app.src.main.java.ac.robinson.pod.SettingsActivity.java", "BodyUseAPI": [], "Fixed commit": "ec116d8ae1ff5fd1302a2caba0fcc56ce3298108", "Url": "https://api.github.com/repos/reshaping-the-future/appropriate", "Date": "2018-10-07T09:12:00Z"},
{"Line": "360=>359", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.preference.CheckBoxPreference.setChecked(boolean)=>android.preference.SwitchPreference.setChecked(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4695/buggy-version/app.src.main.java.ac.robinson.pod.SettingsActivity.java", "BodyUseAPI": [], "Fixed commit": "ec116d8ae1ff5fd1302a2caba0fcc56ce3298108", "Url": "https://api.github.com/repos/reshaping-the-future/appropriate", "Date": "2018-10-07T09:12:00Z"},
{"Line": "70=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.madrefoca.alumnostango.fragments.TimePickerFragment.getContext()=>android.view.View.getContext()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6863/buggy-version/app.src.main.java.com.madrefoca.alumnostango.fragments.TimePickerFragment.java", "BodyUseAPI": [], "Fixed commit": "09f6c9042160534e368f9ba380d04c0374ae830a", "Url": "https://api.github.com/repos/imfCordoba/AlumnosTango", "Date": "2018-01-16T00:25:24Z"},
{"Line": "150=>149", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, com.PATHoleilu.hutool.bean.BeanDesc.PropDesc>.put(java.lang.String,com.PATHoleilu.hutool.bean.BeanDesc.PropDesc)=>java.lang.reflect.Field.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1049/buggy-version/hutool-core.src.main.java.com.PATHoleilu.hutool.bean.BeanDesc.java", "BodyUseAPI": [], "Fixed commit": "51e83ced5869f35c262abd9e0b6869f00ed8058f", "Url": "https://api.github.com/repos/looly/hutool", "Date": "2018-01-13T04:17:53Z"},
{"Line": "29=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "a.getCurrency().length()=>a.getCurrency().compareToIgnoreCase(b.getCurrency())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5343/buggy-version/src.coinpurse.ValueComparator.java", "BodyUseAPI": [], "Fixed commit": "a92c52c834af36693c33c0eb6ebcf150fb2d029f", "Url": "https://api.github.com/repos/OOP2018/coinpurse-Driveiei", "Date": "2018-02-06T15:43:54Z"},
{"Line": "30=>30", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "events.filter(java.lang.String.format(\"day between %s and %s\", start, end)).filter(java.lang.String.format(\"event_id in (%s)\", com.aura.funnel.spark.FunnelAnalysis.mkString(eventIds, \",\", \"\", \"\"))).orderBy(java.lang.String,java.lang.String)=>events.filter(java.lang.String.format(\"day between %s and %s\", start, end)).filter(java.lang.String.format(\"event_id in (%s)\", com.aura.funnel.spark.FunnelAnalysis.mkString(eventIds, \",\", \"\", \"\"))).select(java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7865/buggy-version/funnel-analysis.src.main.java.com.aura.funnel.spark.FunnelAnalysis.java", "BodyUseAPI": [], "Fixed commit": "d0ee8850b54d281dc348a97a104af930bfd6aa02", "Url": "https://api.github.com/repos/bigdataguide/AuraCasesTraining", "Date": "2018-07-14T05:49:07Z"},
{"Line": "51=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map.Entry<metier.Produit, java.lang.Integer>.getValue()=>metier.QuantiteProduit.getQuantite()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3319/buggy-version/src.solution.Simple.java", "BodyUseAPI": [], "Fixed commit": "54d407cd89d627721e4e5ab1a7a982d185740c25", "Url": "https://api.github.com/repos/Alcalimex/ig2i-le4-poo-2018-projet-poower-rangers", "Date": "2018-05-24T09:19:00Z"},
{"Line": "51=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map.Entry<metier.Produit, java.lang.Integer>.getValue()=>metier.QuantiteProduit.getQuantite()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3319/buggy-version/src.solution.Simple.java", "BodyUseAPI": [], "Fixed commit": "54d407cd89d627721e4e5ab1a7a982d185740c25", "Url": "https://api.github.com/repos/Alcalimex/ig2i-le4-poo-2018-projet-poower-rangers", "Date": "2018-05-24T09:19:00Z"},
{"Line": "50=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map.Entry<metier.Produit, java.lang.Integer>.getKey()=>metier.QuantiteProduit.getProduit()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3319/buggy-version/src.solution.Simple.java", "BodyUseAPI": [], "Fixed commit": "54d407cd89d627721e4e5ab1a7a982d185740c25", "Url": "https://api.github.com/repos/Alcalimex/ig2i-le4-poo-2018-projet-poower-rangers", "Date": "2018-05-24T09:19:00Z"},
{"Line": "48=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "c.getProduitCommande().entrySet()=>metier.Commande.getProduitsCommandes()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3319/buggy-version/src.solution.Simple.java", "BodyUseAPI": [], "Fixed commit": "54d407cd89d627721e4e5ab1a7a982d185740c25", "Url": "https://api.github.com/repos/Alcalimex/ig2i-le4-poo-2018-projet-poower-rangers", "Date": "2018-05-24T09:19:00Z"},
{"Line": "119=>120", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "nz.org.nesi.common.db.project.pojo.ProjectProperty.setFacilityId(int)=>nz.org.nesi.common.db.project.pojo.ProjectProperty.setFacilityId(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1612/buggy-version/src.main.java.nz.org.nesi.project.service.impl.ProjectServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "eb1fab128437de836f43c844d69aba9b3e64f480", "Url": "https://api.github.com/repos/nesi/ssp", "Date": "2018-08-01T00:06:51Z"},
{"Line": "95=>102", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.scavi.de.gw2imp.preferences.IPreferenceAccess.writeIsWordIndexComplete(android.content.Context,boolean)=>com.scavi.de.gw2imp.preferences.IPreferenceAccess.writeIsWordIndexComplete(android.content.Context,(isUnchanged && ((mDatabaseAccess.itemsDAO().selectItemCount()) > 24000)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2025/buggy-version/app.src.main.java.com.scavi.de.gw2imp.background.collector.SearchIndexUpdater.java", "BodyUseAPI": [], "Fixed commit": "7a56b9a57225bb1f1ef33174ce7473bcc60f31c5", "Url": "https://api.github.com/repos/Scavi/Gw2Imp", "Date": "2018-07-08T18:07:54Z"},
{"Line": "35=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/\").permitAll().antMatchers(\"/users/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(\"/numbers/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(HttpMethod.DELETE, \"/tickets/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(HttpMethod.POST, \"/tickets/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).anyRequest()=>http.authorizeRequests().antMatchers(\"/\").permitAll().antMatchers(\"/users/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(\"/numbers/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(HttpMethod.DELETE, \"/tickets/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(HttpMethod.POST, \"/tickets/\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(HttpMethod.GET,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/654/buggy-version/src.main.java.com.ticket.checker.ticketchecker.security.SpringSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "46d48d976c6f46a71f33ba34c5a5d482709671c6", "Url": "https://api.github.com/repos/DanInci/ticket-checker-rest-api", "Date": "2018-02-16T21:10:39Z"},
{"Line": "35=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/\").permitAll().antMatchers(\"/users/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(\"/numbers/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(HttpMethod.DELETE, \"/tickets/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(HttpMethod.POST, \"/tickets/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).anyRequest().authenticated()=>http.authorizeRequests().antMatchers(\"/\").permitAll().antMatchers(\"/users/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(\"/numbers/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(HttpMethod.DELETE, \"/tickets/**\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(HttpMethod.POST, \"/tickets/\").hasRole(com.ticket.checker.ticketchecker.security.SpringSecurityConfig.ADMIN).antMatchers(HttpMethod.GET, \"/tickets/\").hasRole(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/654/buggy-version/src.main.java.com.ticket.checker.ticketchecker.security.SpringSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "46d48d976c6f46a71f33ba34c5a5d482709671c6", "Url": "https://api.github.com/repos/DanInci/ticket-checker-rest-api", "Date": "2018-02-16T21:10:39Z"},
{"Line": "150=>150", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.contains(java.lang.String)=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2439/buggy-version/app.src.main.java.com.cubico.donationtracker.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "94ef67a0202ae8ebd5344bfce02c45a189e2f042", "Url": "https://api.github.com/repos/nojanv/donation-tracker", "Date": "2018-09-21T18:10:19Z"},
{"Line": "150=>150", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.contains(java.lang.String)=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2439/buggy-version/app.src.main.java.com.cubico.donationtracker.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "94ef67a0202ae8ebd5344bfce02c45a189e2f042", "Url": "https://api.github.com/repos/nojanv/donation-tracker", "Date": "2018-09-21T18:10:19Z"},
{"Line": "235=>236", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.bergerkiller.bukkit.common.internal.hooks.EntityHook.getSavedName()=>com.bergerkiller.bukkit.common.internal.hooks.EntityHook.instanceBaseType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6422/buggy-version/src.main.java.com.bergerkiller.bukkit.common.internal.hooks.EntityHook.java", "BodyUseAPI": [], "Fixed commit": "18e26c11ee74c3df46fa454b6724550ddf9a7b2e", "Url": "https://api.github.com/repos/bergerhealer/BKCommonLib", "Date": "2018-10-06T11:13:19Z"},
{"Line": "557=>557", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.minecraftforge.items.ItemHandlerHelper.insertItem(net.minecraftforge.items.IItemHandler,stack.copy(),boolean)=>net.minecraftforge.items.ItemHandlerHelper.insertItem(net.minecraftforge.items.IItemHandler,net.minecraft.item.ItemStack,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4021/buggy-version/src.main.java.cam72cam.immersiverailroading.tile.TileRailBase.java", "BodyUseAPI": [], "Fixed commit": "95d32d0e9487983465056aae891cf91af1d88b34", "Url": "https://api.github.com/repos/cam72cam/ImmersiveRailroading", "Date": "2018-09-07T01:34:50Z"},
{"Line": "37=>37", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.minecraftforge.items.ItemStackHandler.insertItem(int,net.minecraft.item.ItemStack,boolean)=>net.minecraftforge.items.ItemStackHandler.insertItem(int,stack.copy(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4021/buggy-version/src.main.java.cam72cam.immersiverailroading.inventory.FilteredStackHandler.java", "BodyUseAPI": [], "Fixed commit": "95d32d0e9487983465056aae891cf91af1d88b34", "Url": "https://api.github.com/repos/cam72cam/ImmersiveRailroading", "Date": "2018-09-07T01:34:50Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.minecraftforge.items.ItemStackHandler.setStackInSlot(int,net.minecraft.item.ItemStack)=>net.minecraftforge.items.ItemStackHandler.setStackInSlot(int,stack.copy())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4021/buggy-version/src.main.java.cam72cam.immersiverailroading.inventory.FilteredStackHandler.java", "BodyUseAPI": [], "Fixed commit": "95d32d0e9487983465056aae891cf91af1d88b34", "Url": "https://api.github.com/repos/cam72cam/ImmersiveRailroading", "Date": "2018-09-07T01:34:50Z"},
{"Line": "46=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.validation.BindingResult.hasErrors()=>org.springframework.web.servlet.ModelAndView.addObject(java.lang.String,com.apu.TcpServerForAccessControlDB.entity.SystemUser)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3051/buggy-version/src.main.java.com.apu.TcpServerForAccessControlMVC.controller.LoginController.java", "BodyUseAPI": [], "Fixed commit": "71035126a97e7b6e411ccb6eb20a35f8107f6389", "Url": "https://api.github.com/repos/anikeec/TcpServerForAccessControlMVC", "Date": "2018-10-11T12:22:35Z"},
{"Line": "159=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Spinner.setSelection(LedgerEntry.ENTRY_TYPE_INCOME)=>android.widget.Spinner.setSelection(LedgerEntry.ENTRY_TYPE_EXPENSE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4877/buggy-version/app.src.main.java.com.example.pventer.saveme.presentation.details.LedgerEntryDetail.java", "BodyUseAPI": [], "Fixed commit": "0dc9565ae0170e7bf09fcedf963bc76cebcfd3d6", "Url": "https://api.github.com/repos/PieterVenter77/SaveMe", "Date": "2018-02-23T20:38:34Z"},
{"Line": "53=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.support.v4.content.ContextCompat.getDrawable(getContext(),android.support.v7.appcompat.R.drawable.abc_ic_clear_material)=>android.support.v4.content.ContextCompat.getDrawable(getContext(),android.R.drawable.ic_delete)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4390/buggy-version/app.src.main.java.kr.co.ramza.moviemanager.ui.view.ClearEditText.java", "BodyUseAPI": [], "Fixed commit": "5e6e23e49012f45ac282347930740b151fc861e5", "Url": "https://api.github.com/repos/ramza2/MovieManager", "Date": "2018-02-21T08:51:05Z"},
{"Line": "68=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new java.lang.Thread(expiredCoupon)=>new com.ron.coupon.system.utilities.ExpiredCoupons(context)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3224/buggy-version/src.main.java.com.ron.coupon.system.entry.CouponSystem.java", "BodyUseAPI": [], "Fixed commit": "fb9b4f260dd14417561f38aa52024049c02a57d2", "Url": "https://api.github.com/repos/ShoshaniRon/CouponSystem-Spring", "Date": "2018-03-12T10:28:33Z"},
{"Line": "74=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getRepo().getTaxonService()=>eu.etaxonomy.cdm.api.application.CdmRepository.getTaxonService()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8329/buggy-version/src.main.java.eu.etaxonomy.cdm.vaadin.view.distributionStatus.DistributionTablePresenter.java", "BodyUseAPI": [], "Fixed commit": "8eebc58a81d2d8ebd7bf804af1abc6844c8e86c7", "Url": "https://api.github.com/repos/cybertaxonomy/cdm-vaadin", "Date": "2017-10-20T15:18:57Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.cruat.tools.stash.utils.DefaultMap.getOrDefault(java.lang.Object,E)=>com.cruat.tools.stash.utils.DefaultMap.getOrDefault(java.lang.Object,E)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5820/buggy-version/src.main.java.com.cruat.tools.stash.utils.DefaultMap.java", "BodyUseAPI": [], "Fixed commit": "8fa9e3ab23a71aa46a25fcd9dda7dc08551fc914", "Url": "https://api.github.com/repos/Aelphaeis/tools_stash", "Date": "2018-10-24T21:12:42Z"},
{"Line": "77=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.indexOf(java.lang.String)=>java.lang.String.lastIndexOf(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3112/buggy-version/src.main.java.src.impl.ServerSocketImpl.java", "BodyUseAPI": [], "Fixed commit": "1a9a91be26f6c4efd33eda28585c3ee06a536494", "Url": "https://api.github.com/repos/SSII-Maat/ssii-pai5-srv", "Date": "2018-05-18T21:39:59Z"},
{"Line": "38=>37", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.teco.pavos.pke.FileType.getFileWriter()=>edu.teco.pavos.pke.FileTypesUtility.getFileWriterForFileExtension(edu.teco.pavos.pke.ExportProperties)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3526/buggy-version/src.main.java.edu.teco.pavos.pke.FileExporter.java", "BodyUseAPI": [], "Fixed commit": "a7697bb029cc2d63ccc3e519a5901b3f54e6b2e7", "Url": "https://api.github.com/repos/PaVoS-TECO/Kafka-export", "Date": "2018-09-03T19:14:00Z"},
{"Line": "130=>126", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.tbm.server.support.MarkdownMessage.setTitle(java.lang.String)=>org.tbm.server.support.MarkdownMessage.setTitle(((org.tbm.common.util.Utils.getHost()) + \" TBM\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3340/buggy-version/tbm-server.src.main.java.org.tbm.server.support.DingTalkWebHook.java", "BodyUseAPI": [], "Fixed commit": "4d86a94dbe36e84e8116d4ec341e0f326ebe3579", "Url": "https://api.github.com/repos/PATHyuqing/tbm", "Date": "2017-12-06T10:54:26Z"},
{"Line": "37=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "event.getMessage().toString().trim()=>java.lang.String.trim()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3340/buggy-version/tbm-client.src.main.java.org.tbm.client.log4tbm.Shaper.java", "BodyUseAPI": [], "Fixed commit": "4d86a94dbe36e84e8116d4ec341e0f326ebe3579", "Url": "https://api.github.com/repos/PATHyuqing/tbm", "Date": "2017-12-06T10:54:26Z"},
{"Line": "37=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "event.getMessage().toString()=>java.lang.Object.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3340/buggy-version/tbm-client.src.main.java.org.tbm.client.log4tbm.Shaper.java", "BodyUseAPI": [], "Fixed commit": "4d86a94dbe36e84e8116d4ec341e0f326ebe3579", "Url": "https://api.github.com/repos/PATHyuqing/tbm", "Date": "2017-12-06T10:54:26Z"},
{"Line": "36=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.gatech.oad.antlab.person.Person5.substring(int,int)=>java.lang.String.substring(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1884/buggy-version/src.main.java.edu.gatech.oad.antlab.person.Person5.java", "BodyUseAPI": [], "Fixed commit": "f9d9e2d1ef44c03c6ec7d9196371e69211661b2d", "Url": "https://api.github.com/repos/TheBuzzBots/M2", "Date": "2018-01-31T15:21:32Z"},
{"Line": "16=>16", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.yousafkhan.miwok.PhrasesActivity.setContentView(R.layout.activity_numbers)=>com.example.yousafkhan.miwok.PhrasesActivity.setContentView(R.layout.activity_phrases)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3786/buggy-version/app.src.main.java.com.example.yousafkhan.miwok.PhrasesActivity.java", "BodyUseAPI": [], "Fixed commit": "74b7b6177463781f40f3718ec1f6a44b30f4532b", "Url": "https://api.github.com/repos/Yousaf184/Miwok-App", "Date": "2018-10-24T20:51:54Z"},
{"Line": "68=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.talend.hadoop.distribution.databricks.modulegroup.DatabricksSparkBatchModuleGroup.getModuleGroups()=>org.talend.hadoop.distribution.databricks.modulegroup.DatabricksHiveOnSparkModuleGroup.getModuleGroups()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2346/buggy-version/main.plugins.org.talend.hadoop.distribution.databricks.src.main.java.org.talend.hadoop.distribution.databricks.DatabricksDistribution.java", "BodyUseAPI": [], "Fixed commit": "fd367f77e280cfa1c0f5fc30f319eabecfc84d33", "Url": "https://api.github.com/repos/Talend/tbd-studio-se", "Date": "2018-06-14T09:14:19Z"},
{"Line": "35=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.techboon.utils.TokenGenerator.buildToken(caseItem.getOrganization().getCode())=>com.techboon.utils.TokenGenerator.buildToken(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1967/buggy-version/src.main.java.com.techboon.service.ShareService.java", "BodyUseAPI": [], "Fixed commit": "99eaff5a8b683243db8c790ec72253400e482421", "Url": "https://api.github.com/repos/easyit/techboon", "Date": "2018-08-21T15:28:00Z"},
{"Line": "123=>124", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "courseBatchResult.getCourseAdditionalInfo().get(JsonKey.APP_ICON)=>courseBatchResult.getCourseAdditionalInfo().get(JsonKey.COURSE_LOGO_URL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8554/buggy-version/actors.common.src.main.java.org.sunbird.learner.actors.coursebatch.CourseEnrollmentActor.java", "BodyUseAPI": [], "Fixed commit": "a1936d1150da80140af26b75db9190f27188804b", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-10-09T06:03:02Z"},
{"Line": "126=>127", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "courseBatchResult.getCourseAdditionalInfo().get(JsonKey.NAME)=>courseBatchResult.getCourseAdditionalInfo().get(JsonKey.COURSE_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8554/buggy-version/actors.common.src.main.java.org.sunbird.learner.actors.coursebatch.CourseEnrollmentActor.java", "BodyUseAPI": [], "Fixed commit": "a1936d1150da80140af26b75db9190f27188804b", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-10-09T06:03:02Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.app.NotificationManager.cancelAll()=>android.app.NotificationManager.cancel(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7965/buggy-version/app.src.main.java.com.jinglangtech.teamchat.activity.AppStartActivity.java", "BodyUseAPI": [], "Fixed commit": "87a0ea44332021457e528ea0cba528083d910d32", "Url": "https://api.github.com/repos/icebery425/TeamChat", "Date": "2018-04-03T15:51:03Z"},
{"Line": "250=>250", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "item.allowedValues.toArray()=>item.allowedValues.toArray(java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7398/buggy-version/src.main.java.net.sf.rails.ui.swing.ConfigWindow.java", "BodyUseAPI": [], "Fixed commit": "56909888f5fad7f05c81f1d363a85054822047a0", "Url": "https://api.github.com/repos/utecht/Rails", "Date": "2018-03-21T19:17:34Z"},
{"Line": "40=>41", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "silo.data.DataFrame<T>.addRow(data.getRow(i),testSet.size())=>silo.data.DataFrame<T>.addRow(silo.data.HashMapDataRow,testSet.size())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5885/buggy-version/java-core.SILO.src.main.java.silo.data.utils.DataUtils.java", "BodyUseAPI": [], "Fixed commit": "6b549ba2a3076a1109b5ddc73d0cdcfa7f15cd5d", "Url": "https://api.github.com/repos/NoahGibson/silo", "Date": "2018-08-18T02:52:36Z"},
{"Line": "42=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "silo.data.DataFrame<T>.addRow(data.getRow(i),trainSet.size())=>silo.data.DataFrame<T>.addRow(silo.data.HashMapDataRow,trainSet.size())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5885/buggy-version/java-core.SILO.src.main.java.silo.data.utils.DataUtils.java", "BodyUseAPI": [], "Fixed commit": "6b549ba2a3076a1109b5ddc73d0cdcfa7f15cd5d", "Url": "https://api.github.com/repos/NoahGibson/silo", "Date": "2018-08-18T02:52:36Z"},
{"Line": "57=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.support.v7.widget.RecyclerView.setAdapter(com.example.facultyapp.ui.main.adapter.StudentAdapter)=>android.support.v7.widget.RecyclerView.setAdapter(com.example.facultyapp.ui.main.adapter.BooksAdapter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1033/buggy-version/app.src.main.java.com.example.facultyapp.ui.main.ui.BooksActivity.java", "BodyUseAPI": [], "Fixed commit": "412041fa6f7f567d8a9b4ff662c2fb8f5f911905", "Url": "https://api.github.com/repos/katherine95/Faculty-Repository", "Date": "2018-07-15T20:46:06Z"},
{"Line": "73=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "clients.inMemory().withClient(\"android\").scopes(\"xx\").secret(\"android\").authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\").and().withClient(\"webapp\").scopes(java.lang.String)=>clients.inMemory().withClient(\"android\").scopes(\"xx\").secret(\"android\").authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\").resourceIds(\"oauth2-resource\").accessTokenValiditySeconds(1200).and()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3801/buggy-version/auth-server.src.main.java.com.hfcsbc.config.AuthorizationServerConfig.java", "BodyUseAPI": [], "Fixed commit": "a00fd593da2f7ac823c0ac1071bfd3790ac9ccea", "Url": "https://api.github.com/repos/344553788/uaa-zuul", "Date": "2018-07-03T06:58:15Z"},
{"Line": "73=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "clients.inMemory().withClient(\"android\").scopes(\"xx\").secret(\"android\").authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\").and().withClient(\"webapp\").scopes(\"xx\").authorizedGrantTypes(java.lang.String)=>clients.inMemory().withClient(\"android\").scopes(\"xx\").secret(\"android\").authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\").resourceIds(\"oauth2-resource\").accessTokenValiditySeconds(1200).and().withClient(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3801/buggy-version/auth-server.src.main.java.com.hfcsbc.config.AuthorizationServerConfig.java", "BodyUseAPI": [], "Fixed commit": "a00fd593da2f7ac823c0ac1071bfd3790ac9ccea", "Url": "https://api.github.com/repos/344553788/uaa-zuul", "Date": "2018-07-03T06:58:15Z"},
{"Line": "73=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "clients.inMemory().withClient(\"android\").scopes(\"xx\").secret(\"android\").authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\").and()=>clients.inMemory().withClient(\"android\").scopes(\"xx\").secret(\"android\").authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\").resourceIds(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3801/buggy-version/auth-server.src.main.java.com.hfcsbc.config.AuthorizationServerConfig.java", "BodyUseAPI": [], "Fixed commit": "a00fd593da2f7ac823c0ac1071bfd3790ac9ccea", "Url": "https://api.github.com/repos/344553788/uaa-zuul", "Date": "2018-07-03T06:58:15Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "clients.inMemory().withClient(\"android\").scopes(\"xx\").secret(\"android\").authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\").and().withClient(java.lang.String)=>clients.inMemory().withClient(\"android\").scopes(\"xx\").secret(\"android\").authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\").resourceIds(\"oauth2-resource\").accessTokenValiditySeconds(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3801/buggy-version/auth-server.src.main.java.com.hfcsbc.config.AuthorizationServerConfig.java", "BodyUseAPI": [], "Fixed commit": "a00fd593da2f7ac823c0ac1071bfd3790ac9ccea", "Url": "https://api.github.com/repos/344553788/uaa-zuul", "Date": "2018-07-03T06:58:15Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "clients.inMemory().withClient(\"android\").scopes(\"xx\").secret(\"android\").authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\").and().withClient(\"webapp\").scopes(\"xx\").authorizedGrantTypes(java.lang.String)=>clients.inMemory().withClient(\"android\").scopes(\"xx\").secret(\"android\").authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\").resourceIds(\"oauth2-resource\").accessTokenValiditySeconds(1200).and().withClient(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3801/buggy-version/auth-server.src.main.java.com.hfcsbc.config.AuthorizationServerConfig.java", "BodyUseAPI": [], "Fixed commit": "a00fd593da2f7ac823c0ac1071bfd3790ac9ccea", "Url": "https://api.github.com/repos/344553788/uaa-zuul", "Date": "2018-07-03T06:58:15Z"},
{"Line": "62=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.hyracks.dataflow.common.comm.io.FrameTupleAccessor.removeTuple(int)=>org.apache.asterix.external.util.FeedFrameUtil.removeBadTuple(org.apache.hyracks.api.context.IHyracksTaskContext,int,org.apache.hyracks.dataflow.common.comm.io.FrameTupleAccessor)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2487/buggy-version/asterixdb.asterix-external-data.src.main.java.org.apache.asterix.external.feed.dataflow.FeedExceptionHandler.java", "BodyUseAPI": [], "Fixed commit": "6e179438dbf968f370771f8cdf1e6a6c470e1b47", "Url": "https://api.github.com/repos/luochen01/asterixdb", "Date": "2018-10-20T18:29:01Z"},
{"Line": "37=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.saiapi.topic.TopicRepository.deleteById(java.lang.String)=>com.example.saiapi.topic.TopicRepository.delete(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5625/buggy-version/src.main.java.com.example.saiapi.topic.TopicService.java", "BodyUseAPI": [], "Fixed commit": "e46b715afaef2172b201bedc9806095439d0b8f1", "Url": "https://api.github.com/repos/Jestfer/sai-api", "Date": "2018-07-03T22:08:30Z"},
{"Line": "25=>24", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.saiapi.topic.TopicRepository.findById(java.lang.String)=>com.example.saiapi.topic.TopicRepository.findOne(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5625/buggy-version/src.main.java.com.example.saiapi.topic.TopicService.java", "BodyUseAPI": [], "Fixed commit": "e46b715afaef2172b201bedc9806095439d0b8f1", "Url": "https://api.github.com/repos/Jestfer/sai-api", "Date": "2018-07-03T22:08:30Z"},
{"Line": "38=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.StringBuilder.append(java.lang.String)=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7532/buggy-version/src.com.minxing.client.ocu.AppMessage.java", "BodyUseAPI": [], "Fixed commit": "791f8f3e0204f9c308746998df253345e6ed3fe8", "Url": "https://api.github.com/repos/dehuinet/minxing_java_sdk", "Date": "2018-03-13T04:27:59Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "thientrang.com.chat.StartActivity.findViewById(R.id.btn_goes)=>thientrang.com.chat.StartActivity.findViewById(R.id.btn_go)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2904/buggy-version/p2p2.app.src.main.java.thientrang.com.chat.StartActivity.java", "BodyUseAPI": [], "Fixed commit": "559a6d30153c702be03d517aba09adb15d1825a7", "Url": "https://api.github.com/repos/lttt-itus/WeChat", "Date": "2018-05-05T05:27:26Z"},
{"Line": "108=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.toronto.cs.se.modelepedia.safetycase.AssuranceCase.eResource()=>edu.toronto.cs.se.modelepedia.safetycase.SafetyCase.eResource()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4375/buggy-version/plugins.Types.SafetyCase.edu.toronto.cs.se.modelepedia.safetycase.operator.src.edu.toronto.cs.se.modelepedia.safetycase.operator.GSNAnnotate.java", "BodyUseAPI": [], "Fixed commit": "c2a0041b99ec26d16e11847b5849021d2423871c", "Url": "https://api.github.com/repos/nlsfung/MMINT", "Date": "2018-06-16T21:33:28Z"},
{"Line": "323=>323", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "scModel.getMetatype().createInstanceAndEditor(edu.toronto.cs.se.modelepedia.safetycase.AssuranceCase,java.lang.String,edu.toronto.cs.se.mmint.mid.MID)=>scModel.getMetatype().createInstanceAndEditor(edu.toronto.cs.se.modelepedia.safetycase.SafetyCase,java.lang.String,edu.toronto.cs.se.mmint.mid.MID)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4375/buggy-version/plugins.Types.SafetyCase.edu.toronto.cs.se.modelepedia.safetycase.operator.src.edu.toronto.cs.se.modelepedia.safetycase.operator.GSNAnnotate.java", "BodyUseAPI": [], "Fixed commit": "c2a0041b99ec26d16e11847b5849021d2423871c", "Url": "https://api.github.com/repos/nlsfung/MMINT", "Date": "2018-06-16T21:33:28Z"},
{"Line": "253=>253", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.toronto.cs.se.modelepedia.safetycase.AssuranceCase.eAllContents()=>edu.toronto.cs.se.modelepedia.safetycase.SafetyCase.eAllContents()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4375/buggy-version/plugins.Types.SafetyCase.edu.toronto.cs.se.modelepedia.safetycase.operator.src.edu.toronto.cs.se.modelepedia.safetycase.operator.GSNAnnotate.java", "BodyUseAPI": [], "Fixed commit": "c2a0041b99ec26d16e11847b5849021d2423871c", "Url": "https://api.github.com/repos/nlsfung/MMINT", "Date": "2018-06-16T21:33:28Z"},
{"Line": "65=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "dialog.setPositiveListener(getString(R.string.delete), new com.pranavj7.TimerDialog.TimerDialog.OnPositiveListener() { @java.lang.Override public void onClick(com.pranavj7.TimerDialog.TimerDialog dialog) { android.widget.Toast.makeText(com.pranavj7.example.TimerDialog.MainActivity.this, dialog.getPositiveText().toString(), Toast.LENGTH_SHORT).show(); } }).setNegativeListener(getString(R.string.cancel),com.pranavj7.TimerDialog.TimerDialog.OnNegativeListener)=>dialog.setPositiveListener(\"watch video\", new com.pranavj7.TimerDialog.TimerDialog.OnPositiveListener() { @java.lang.Override public void onClick(com.pranavj7.TimerDialog.TimerDialog dialog) { android.widget.Toast.makeText(com.pranavj7.example.TimerDialog.MainActivity.this, dialog.getPositiveText().toString(), Toast.LENGTH_SHORT).show(); } }).setNegativeListener(java.lang.String,com.pranavj7.TimerDialog.TimerDialog.OnNegativeListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7659/buggy-version/Example.src.main.java.com.pranavj7.example.TimerDialog.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "74fa9f1ee69d3ec8a43886172f65d504053a2aa1", "Url": "https://api.github.com/repos/pranavj7Z/Timer-Dialog", "Date": "2018-04-18T04:16:40Z"},
{"Line": "60=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.pranavj7.TimerDialog.TimerDialog.setTitle(getString(R.string.operation))=>com.pranavj7.TimerDialog.TimerDialog.setTitle(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7659/buggy-version/Example.src.main.java.com.pranavj7.example.TimerDialog.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "74fa9f1ee69d3ec8a43886172f65d504053a2aa1", "Url": "https://api.github.com/repos/pranavj7Z/Timer-Dialog", "Date": "2018-04-18T04:16:40Z"},
{"Line": "65=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.pranavj7.TimerDialog.TimerDialog.setPositiveListener(getString(R.string.delete),com.pranavj7.TimerDialog.TimerDialog.OnPositiveListener)=>com.pranavj7.TimerDialog.TimerDialog.setPositiveListener(java.lang.String,com.pranavj7.TimerDialog.TimerDialog.OnPositiveListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7659/buggy-version/Example.src.main.java.com.pranavj7.example.TimerDialog.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "74fa9f1ee69d3ec8a43886172f65d504053a2aa1", "Url": "https://api.github.com/repos/pranavj7Z/Timer-Dialog", "Date": "2018-04-18T04:16:40Z"},
{"Line": "38=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.app.Activity.onCreate(android.os.Bundle)=>android.support.v7.app.AppCompatActivity.onCreate(android.os.Bundle)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6220/buggy-version/ScienceFair.app.src.main.java.fr.istic.mmm.sciencefair.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "1c5defa981dc3f966494ea72b2af1bbacbf6650f", "Url": "https://api.github.com/repos/PierreGaudichon/MMM-projet-android", "Date": "2018-02-21T15:52:25Z"},
{"Line": "12=>13", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.app.Activity.onCreate(android.os.Bundle)=>android.support.v7.app.AppCompatActivity.onCreate(android.os.Bundle)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6220/buggy-version/ScienceFair.app.src.main.java.fr.istic.mmm.sciencefair.SearchResultsActivity.java", "BodyUseAPI": [], "Fixed commit": "1c5defa981dc3f966494ea72b2af1bbacbf6650f", "Url": "https://api.github.com/repos/PierreGaudichon/MMM-projet-android", "Date": "2018-02-21T15:52:25Z"},
{"Line": "94=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.android.popularmovies.utilities.retrofitQueries.APIInterface.getPopularMovies(int,java.lang.String)=>com.example.android.popularmovies.utilities.retrofitQueries.APIInterface.getPopularMovies(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5350/buggy-version/app.src.main.java.com.example.android.popularmovies.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "6971e00877cb5321498419358ac13d7c3ba07222", "Url": "https://api.github.com/repos/hskocadag/PopularMovies2", "Date": "2018-03-12T12:23:31Z"},
{"Line": "98=>98", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.android.popularmovies.utilities.retrofitQueries.APIInterface.getTopRatedMovies(int,java.lang.String)=>com.example.android.popularmovies.utilities.retrofitQueries.APIInterface.getTopRatedMovies(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5350/buggy-version/app.src.main.java.com.example.android.popularmovies.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "6971e00877cb5321498419358ac13d7c3ba07222", "Url": "https://api.github.com/repos/hskocadag/PopularMovies2", "Date": "2018-03-12T12:23:31Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "net.cyclestreets.liveride.Arrivee.context()=>net.cyclestreets.liveride.Arrivee.getContext()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8052/buggy-version/libraries.cyclestreets-view.src.main.java.net.cyclestreets.liveride.Arrivee.java", "BodyUseAPI": [], "Fixed commit": "d4b8eccfa1d3b665522a80f5438c1ecf5f4e7420", "Url": "https://api.github.com/repos/cyclestreets/android", "Date": "2018-08-27T07:14:43Z"},
{"Line": "20=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ie.dit.BufferedReader.readLine()=>java.io.BufferedReader.readLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6896/buggy-version/ie.dit.TuneBook.java", "BodyUseAPI": [], "Fixed commit": "f50040f97ae248f16e204d97acf7b0e3c9febc89", "Url": "https://api.github.com/repos/CrimsonPrince/JavaTest", "Date": "2018-02-14T17:46:22Z"},
{"Line": "56=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.ArrayList<ie.dit.Tune>.add(ie.dit.TuneBook)=>java.util.ArrayList<ie.dit.Tune>.add(ie.dit.Tune)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6896/buggy-version/ie.dit.TuneBook.java", "BodyUseAPI": [], "Fixed commit": "f50040f97ae248f16e204d97acf7b0e3c9febc89", "Url": "https://api.github.com/repos/CrimsonPrince/JavaTest", "Date": "2018-02-14T17:46:22Z"},
{"Line": "69=>72", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ie.dit.BufferedReader.close()=>java.io.BufferedReader.close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6896/buggy-version/ie.dit.TuneBook.java", "BodyUseAPI": [], "Fixed commit": "f50040f97ae248f16e204d97acf7b0e3c9febc89", "Url": "https://api.github.com/repos/CrimsonPrince/JavaTest", "Date": "2018-02-14T17:46:22Z"},
{"Line": "62=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ie.dit.IOException.printStackTrace()=>java.io.IOException.printStackTrace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6896/buggy-version/ie.dit.TuneBook.java", "BodyUseAPI": [], "Fixed commit": "f50040f97ae248f16e204d97acf7b0e3c9febc89", "Url": "https://api.github.com/repos/CrimsonPrince/JavaTest", "Date": "2018-02-14T17:46:22Z"},
{"Line": "413=>420", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "realm.where(ru.lod_misis.ithappened.Models.DbModelV1.class).equalTo(\"userId\", userId).findFirst().getEventSourceCollection()=>ru.lod_misis.ithappened.Models.DbModelV1.getEventSourceCollection()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3395/buggy-version/Android.ItHappenedAndroid.app.src.main.java.ru.lod_misis.ithappened.Infrastructure.TrackingRepository.java", "BodyUseAPI": [], "Fixed commit": "fb214334d43804d3c9365d03c57dcc529b314c41", "Url": "https://api.github.com/repos/LeagueOfDevelopers/ItHappened", "Date": "2018-07-01T11:51:14Z"},
{"Line": "81=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.reflect.Method.getDeclaringClass()=>java.lang.Object.getClass()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3884/buggy-version/merest.src.main.java.com.teammental.merest.RestApiProxyInvocationHandler.java", "BodyUseAPI": [], "Fixed commit": "3b094c33a797f8514e32bdee0d44c0c3631481ab", "Url": "https://api.github.com/repos/mental-party/meparty", "Date": "2018-02-15T13:47:55Z"},
{"Line": "81=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.reflect.Method.getDeclaringClass()=>java.lang.Object.getClass()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3884/buggy-version/merest.src.main.java.com.teammental.merest.RestApiProxyInvocationHandler.java", "BodyUseAPI": [], "Fixed commit": "3b094c33a797f8514e32bdee0d44c0c3631481ab", "Url": "https://api.github.com/repos/mental-party/meparty", "Date": "2018-02-15T13:47:55Z"},
{"Line": "102=>99", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.math3.fraction.BigFraction.multiply(score.getDenominator())=>java.math.BigInteger.multiply(nextAccumulated.getDenominator())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1775/buggy-version/src.main.org.deidentifier.arx.dp.ExponentialMechanismReliable.java", "BodyUseAPI": [], "Fixed commit": "8c0992b921bfb09cb8f72a08dbc1340fb0156c8d", "Url": "https://api.github.com/repos/RaffaelBild/arx", "Date": "2018-01-15T20:12:09Z"},
{"Line": "111=>108", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cumulativeDistributionFractions[index].multiply(org.apache.commons.math3.fraction.BigFraction)=>cumulativeDistributionFractions[index].multiply(java.math.BigInteger)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1775/buggy-version/src.main.org.deidentifier.arx.dp.ExponentialMechanismReliable.java", "BodyUseAPI": [], "Fixed commit": "8c0992b921bfb09cb8f72a08dbc1340fb0156c8d", "Url": "https://api.github.com/repos/RaffaelBild/arx", "Date": "2018-01-15T20:12:09Z"},
{"Line": "52=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.substring(int,int)=>java.lang.String.replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5417/buggy-version/kstream-app.src.main.java.cn.issboy.streamapp.structure.SelectValueMapper.java", "BodyUseAPI": [], "Fixed commit": "57b7a07095093b24dfd1a213bd3dbcab13791a25", "Url": "https://api.github.com/repos/ISS-Boy/Monitor-Engine", "Date": "2018-05-07T11:08:41Z"},
{"Line": "232=>232", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.sqlapp.graphviz.AbstractCommonElement<T>.setStyle(<nulltype>)=>com.sqlapp.graphviz.AbstractCommonElement<T>.setStyle(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6206/buggy-version/sqlapp-graphviz.src.main.java.com.sqlapp.graphviz.AbstractEdge.java", "BodyUseAPI": [], "Fixed commit": "b8f60d6323331e4f612ef905dd0aba087f406396", "Url": "https://api.github.com/repos/satotatsu/sqlapp", "Date": "2018-10-14T13:31:25Z"},
{"Line": "148=>148", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.ImageView.getWidth()=>getResources().getDimension(R.dimen.larger_image_size)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7039/buggy-version/app.src.main.java.com.example.denver.recorder_ui.ViewDetails.java", "BodyUseAPI": [], "Fixed commit": "d7e58d11c09989e5476482e60d48620ab3915ae8", "Url": "https://api.github.com/repos/Team-LED/fragment_ui", "Date": "2018-04-24T00:27:03Z"},
{"Line": "132=>130", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "crush.playServices.isSignedIn()=>CastleCrush.playServices.isSignedIn()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5852/buggy-version/core.src.states.menuStates.StartMenuScreen.java", "BodyUseAPI": [], "Fixed commit": "9b89352ca4f3fb52535a824efffc7cc91cd3feeb", "Url": "https://api.github.com/repos/jorgenmortensen/CastleCrush", "Date": "2018-04-15T15:53:39Z"},
{"Line": "138=>136", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "crush.playServices.signIn()=>CastleCrush.playServices.signIn()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5852/buggy-version/core.src.states.menuStates.StartMenuScreen.java", "BodyUseAPI": [], "Fixed commit": "9b89352ca4f3fb52535a824efffc7cc91cd3feeb", "Url": "https://api.github.com/repos/jorgenmortensen/CastleCrush", "Date": "2018-04-15T15:53:39Z"},
{"Line": "132=>130", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "crush.playServices.isSignedIn()=>CastleCrush.playServices.isSignedIn()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5852/buggy-version/core.src.states.menuStates.StartMenuScreen.java", "BodyUseAPI": [], "Fixed commit": "9b89352ca4f3fb52535a824efffc7cc91cd3feeb", "Url": "https://api.github.com/repos/jorgenmortensen/CastleCrush", "Date": "2018-04-15T15:53:39Z"},
{"Line": "133=>131", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "crush.playServices.signOut()=>CastleCrush.playServices.signOut()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5852/buggy-version/core.src.states.menuStates.StartMenuScreen.java", "BodyUseAPI": [], "Fixed commit": "9b89352ca4f3fb52535a824efffc7cc91cd3feeb", "Url": "https://api.github.com/repos/jorgenmortensen/CastleCrush", "Date": "2018-04-15T15:53:39Z"},
{"Line": "224=>221", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.List<org.jsfml.system.Vector3i>.remove(org.jsfml.system.Vector3i)=>java.util.List<org.jsfml.system.Vector3i>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7035/buggy-version/src.core.Map.java", "BodyUseAPI": [], "Fixed commit": "935d8ceda5ebf6293455d1101181bf8c6ae0392b", "Url": "https://api.github.com/repos/JulianSobott/Catan", "Date": "2018-02-15T09:57:51Z"},
{"Line": "334=>293", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] dispose()=>[public] close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3086/buggy-version/flink-streaming-java.src.main.java.org.apache.flink.streaming.api.operators.AbstractStreamOperator.java", "BodyUseAPI": [], "Fixed commit": "3ffd8d33110518b6bc4125e856b295c6083c1dd3", "Url": "https://api.github.com/repos/StefanRRichter/flink", "Date": "2017-12-11T11:01:54Z"},
{"Line": "293=>303", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] close()=>[public] dispose()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3086/buggy-version/flink-streaming-java.src.main.java.org.apache.flink.streaming.api.operators.AbstractStreamOperator.java", "BodyUseAPI": [], "Fixed commit": "3ffd8d33110518b6bc4125e856b295c6083c1dd3", "Url": "https://api.github.com/repos/StefanRRichter/flink", "Date": "2017-12-11T11:01:54Z"},
{"Line": "251=>251", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.github.adriens.chocolateysdk.chocolatey.sdk.NuspecPackageMetaData.setPackageSourceUrl(java.net.URL)=>com.github.adriens.chocolateysdk.chocolatey.sdk.NuspecPackageMetaData.setProjectSourceUrl(java.net.URL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6944/buggy-version/src.main.java.com.github.adriens.chocolateysdk.chocolatey.sdk.NuspecParser.java", "BodyUseAPI": [], "Fixed commit": "ca262a314ee2ff53ccccd1ff5f8bfe0b31ff234c", "Url": "https://api.github.com/repos/adriens/chocolatey-sdk", "Date": "2018-03-23T01:27:08Z"},
{"Line": "268=>268", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.objectweb.asm.ByteVector.putUTF8(java.lang.String)=>org.objectweb.asm.ByteVector.encodeUTF8(java.lang.String,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9124/buggy-version/asm.src.main.java.org.objectweb.asm.ClassWriter.java", "BodyUseAPI": [], "Fixed commit": "b03be00497c96fb2a4fe996a7dfd1e0d84938eb4", "Url": "https://api.github.com/repos/JetBrains/intellij-deps-asm", "Date": "2018-01-20T08:34:00Z"},
{"Line": "28=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Patterns.EMAIL_ADDRESS.matcher(((android.widget.EditText) (((android.widget.EditText) (findViewById(R.id.sender_email))).getText().toString())))=>Patterns.EMAIL_ADDRESS.matcher(((android.widget.EditText) (findViewById(R.id.sender_email))).getText().toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4793/buggy-version/app.src.main.java.com.lejr.lejr.RequestActivity.java", "BodyUseAPI": [], "Fixed commit": "db98afc2a3d8996f2307f841dd84cf3acb4baf42", "Url": "https://api.github.com/repos/kallentu/Lejr", "Date": "2018-01-20T14:52:40Z"},
{"Line": "434=>434", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.opencb.commons.datastore.mongodb.MongoDBQueryUtils.converStringToDate(java.lang.String)=>org.opencb.commons.datastore.mongodb.MongoDBQueryUtils.convertStringToDate(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6834/buggy-version/commons-datastore.commons-datastore-mongodb.src.main.java.org.opencb.commons.datastore.mongodb.MongoDBQueryUtils.java", "BodyUseAPI": [], "Fixed commit": "ecaac874576b1cdf77e1c1295d41d80197e260f9", "Url": "https://api.github.com/repos/opencb/java-common-libs", "Date": "2018-10-01T08:38:34Z"},
{"Line": "441=>441", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.opencb.commons.datastore.mongodb.MongoDBQueryUtils.converStringToDate(java.lang.String)=>org.opencb.commons.datastore.mongodb.MongoDBQueryUtils.convertStringToDate(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6834/buggy-version/commons-datastore.commons-datastore-mongodb.src.main.java.org.opencb.commons.datastore.mongodb.MongoDBQueryUtils.java", "BodyUseAPI": [], "Fixed commit": "ecaac874576b1cdf77e1c1295d41d80197e260f9", "Url": "https://api.github.com/repos/opencb/java-common-libs", "Date": "2018-10-01T08:38:34Z"},
{"Line": "432=>432", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.opencb.commons.datastore.mongodb.MongoDBQueryUtils.converStringToDate(java.lang.String)=>org.opencb.commons.datastore.mongodb.MongoDBQueryUtils.convertStringToDate(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6834/buggy-version/commons-datastore.commons-datastore-mongodb.src.main.java.org.opencb.commons.datastore.mongodb.MongoDBQueryUtils.java", "BodyUseAPI": [], "Fixed commit": "ecaac874576b1cdf77e1c1295d41d80197e260f9", "Url": "https://api.github.com/repos/opencb/java-common-libs", "Date": "2018-10-01T08:38:34Z"},
{"Line": "32=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.kardana.androidcourse.RoomType.valueOf(java.lang.String)=>com.example.kardana.androidcourse.RoomType.getRoomTypeByName(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4990/buggy-version/app.src.main.java.com.example.kardana.androidcourse.Converter.java", "BodyUseAPI": [], "Fixed commit": "41a7ec634be63a66ffe09935ccd8d62d17e72951", "Url": "https://api.github.com/repos/danak95/AndroidCourse", "Date": "2018-08-06T17:32:32Z"},
{"Line": "137=>137", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.hisp.dhis.user.UserSettingService.saveUserSetting(org.hisp.dhis.user.UserSettingKey,java.lang.String,org.hisp.dhis.user.User)=>org.hisp.dhis.user.UserSettingService.saveUserSetting(org.hisp.dhis.user.UserSettingKey,org.hisp.dhis.user.UserSettingKey.getAsRealClass(key, newValue),org.hisp.dhis.user.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9893/buggy-version/dhis-2.dhis-web.dhis-web-api.src.main.java.org.hisp.dhis.webapi.controller.UserSettingController.java", "BodyUseAPI": [], "Fixed commit": "1d45b42c218fdb0edb7a706a97b6be0e9a45c7cc", "Url": "https://api.github.com/repos/dhis2/dhis2-core", "Date": "2018-04-06T11:55:51Z"},
{"Line": "250=>250", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.creativemd.littletiles.client.render.VertexBuilder.setTranslation(int,int,int)=>net.minecraft.client.renderer.VertexBuffer.setTranslation(int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.client.render.RenderingThread.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "295=>295", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.optifine.shaders.SVertexBuilder.calcNormalChunkLayer(com.creativemd.littletiles.client.render.VertexBuilder)=>net.optifine.shaders.SVertexBuilder.calcNormalChunkLayer(net.minecraft.client.renderer.VertexBuffer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.client.render.RenderingThread.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "232=>232", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.creativemd.littletiles.client.render.VertexBuilder.begin(int,DefaultVertexFormats.BLOCK)=>net.minecraft.client.renderer.VertexBuffer.begin(int,DefaultVertexFormats.BLOCK)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.client.render.RenderingThread.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "269=>269", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.optifine.shaders.SVertexBuilder.pushEntity(net.minecraft.block.state.IBlockState,net.minecraft.util.math.BlockPos,data.te.getWorld(),com.creativemd.littletiles.client.render.VertexBuilder)=>net.optifine.shaders.SVertexBuilder.pushEntity(net.minecraft.block.state.IBlockState,net.minecraft.util.math.BlockPos,data.te.getWorld(),net.minecraft.client.renderer.VertexBuffer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.client.render.RenderingThread.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "258=>258", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.creativemd.littletiles.client.render.VertexBuilder.setTranslation(int,int,int)=>net.minecraft.client.renderer.VertexBuffer.setTranslation(int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.client.render.RenderingThread.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "281=>281", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.creativemd.littletiles.client.render.RenderingThread.renderQuad(com.creativemd.littletiles.client.render.VertexBuilder,net.minecraft.client.renderer.block.model.BakedQuad)=>com.creativemd.littletiles.client.render.RenderingThread.renderQuad(net.minecraft.client.renderer.VertexBuffer,net.minecraft.client.renderer.block.model.BakedQuad)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.client.render.RenderingThread.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "300=>300", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.creativemd.littletiles.client.render.BlockLayerRenderBuffer.setBufferByLayer(com.creativemd.littletiles.client.render.VertexBuilder,net.minecraft.util.BlockRenderLayer)=>com.creativemd.littletiles.client.render.BlockLayerRenderBuffer.setBufferByLayer(net.minecraft.client.renderer.VertexBuffer,net.minecraft.util.BlockRenderLayer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.client.render.RenderingThread.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "288=>288", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.optifine.shaders.SVertexBuilder.popEntity(com.creativemd.littletiles.client.render.VertexBuilder)=>net.optifine.shaders.SVertexBuilder.popEntity(net.minecraft.client.renderer.VertexBuffer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.client.render.RenderingThread.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "297=>297", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.creativemd.littletiles.client.render.VertexBuilder.finishDrawing()=>net.minecraft.client.renderer.VertexBuffer.finishDrawing()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.client.render.RenderingThread.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "372=>370", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)=>com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.LittleTiles.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "272=>270", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.littletiles.common.gui.handler.LittleGuiHandler)=>com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.littletiles.common.gui.handler.LittleGuiHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.LittleTiles.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "400=>398", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)=>com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.LittleTiles.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "386=>384", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)=>com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.LittleTiles.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "290=>288", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.littletiles.common.gui.handler.LittleGuiHandler)=>com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.littletiles.common.gui.handler.LittleGuiHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.LittleTiles.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "358=>356", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)=>com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.LittleTiles.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "328=>326", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)=>com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.LittleTiles.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "342=>340", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)=>com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.LittleTiles.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "308=>306", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)=>com.creativemd.creativecore.gui.opener.GuiHandler.registerGuiHandler(java.lang.String,com.creativemd.creativecore.gui.opener.CustomGuiHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8565/buggy-version/src.main.java.com.creativemd.littletiles.LittleTiles.java", "BodyUseAPI": [], "Fixed commit": "56517dfa2d8a5d8a4574d1899cafa73ac59c4106", "Url": "https://api.github.com/repos/CreativeMD/LittleTiles", "Date": "2018-08-11T18:02:30Z"},
{"Line": "132=>132", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.my_message_image_body)=>android.view.View.findViewById(R.id.sender_message_image_body)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1069/buggy-version/app.src.main.java.nsi.firechatter.adapters.MessagesRecyclerViewAdapter.java", "BodyUseAPI": [], "Fixed commit": "04a9f28a61081bc691b6a62c63167abaeaa4f32d", "Url": "https://api.github.com/repos/milosjajac/FireChatter", "Date": "2018-01-05T14:16:26Z"},
{"Line": "306=>306", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "nsi.firechatter.models.Message.getDateTime()=>nsi.firechatter.models.Message.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1069/buggy-version/app.src.main.java.nsi.firechatter.activities.ChatActivity.java", "BodyUseAPI": [], "Fixed commit": "04a9f28a61081bc691b6a62c63167abaeaa4f32d", "Url": "https://api.github.com/repos/milosjajac/FireChatter", "Date": "2018-01-05T14:16:26Z"},
{"Line": "8=>12", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.PrintStream.println()=>java.io.PrintStream.println((((player.getName()) + \" submitted the word \") + word))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1379/buggy-version/src.Board.java", "BodyUseAPI": [], "Fixed commit": "9891bea5be220709a5887f480e28ea59cd2383e8", "Url": "https://api.github.com/repos/codrinalex1994/Scrabble", "Date": "2018-04-04T14:26:40Z"},
{"Line": "1685=>1685", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Collections.unmodifiableCollection(java.util.Collection<org.apache.kafka.common.TopicPartition>)=>java.util.Collections.unmodifiableSet(java.util.HashSet)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5246/buggy-version/clients.src.main.java.org.apache.kafka.clients.consumer.KafkaConsumer.java", "BodyUseAPI": [], "Fixed commit": "19ec26fc8c36fe70df0b6245572952728616ec3e", "Url": "https://api.github.com/repos/h0nIg/kafka", "Date": "2018-09-27T11:24:17Z"},
{"Line": "33=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.kanteen.service.IAccountService.saveAccount(io.kanteen.dto.AccountDto)=>io.kanteen.service.IAccountService.saveAccount(io.kanteen.persistance.entity.Account)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5785/buggy-version/src.main.java.io.kanteen.controller.AccountController.java", "BodyUseAPI": [], "Fixed commit": "d45f6d59e06ac6da5f8fcf6237d02d4d8ac9e644", "Url": "https://api.github.com/repos/robusta-code/kanteen", "Date": "2018-09-03T08:47:30Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "simplepets.brainsynder.utils.ItemBuilder.withName(java.lang.String)=>simplepets.brainsynder.utils.ItemBuilder.withLore(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7077/buggy-version/src.main.java.simplepets.brainsynder.menu.menuItems.Color.java", "BodyUseAPI": [], "Fixed commit": "a18e2ce407a2901dff2a72b99af1cbb8113d691d", "Url": "https://api.github.com/repos/brainsynder-Dev/SimplePets", "Date": "2018-03-30T06:45:51Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "item.toJSON().get(java.lang.String)=>simplepets.brainsynder.utils.ItemBuilder.withLore(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7077/buggy-version/src.main.java.simplepets.brainsynder.menu.menuItems.Color.java", "BodyUseAPI": [], "Fixed commit": "a18e2ce407a2901dff2a72b99af1cbb8113d691d", "Url": "https://api.github.com/repos/brainsynder-Dev/SimplePets", "Date": "2018-03-30T06:45:51Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "simplepets.brainsynder.utils.ItemBuilder.withName(java.lang.String)=>simplepets.brainsynder.utils.ItemBuilder.withLore(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7077/buggy-version/src.main.java.simplepets.brainsynder.menu.menuItems.ShulkerColor.java", "BodyUseAPI": [], "Fixed commit": "a18e2ce407a2901dff2a72b99af1cbb8113d691d", "Url": "https://api.github.com/repos/brainsynder-Dev/SimplePets", "Date": "2018-03-30T06:45:51Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "simplepets.brainsynder.utils.ItemBuilder.withName(java.lang.String)=>simplepets.brainsynder.utils.ItemBuilder.withLore(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7077/buggy-version/src.main.java.simplepets.brainsynder.menu.menuItems.ShulkerColor.java", "BodyUseAPI": [], "Fixed commit": "a18e2ce407a2901dff2a72b99af1cbb8113d691d", "Url": "https://api.github.com/repos/brainsynder-Dev/SimplePets", "Date": "2018-03-30T06:45:51Z"},
{"Line": "123=>123", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.regex.Pattern.compile(java.lang.String)=>java.util.regex.Pattern.compile(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4514/buggy-version/AdvancedCore.src.com.Ben12345rocks.AdvancedCore.Util.Misc.StringUtils.java", "BodyUseAPI": [], "Fixed commit": "fa274c18381e873927c7eac7de7d12cc64b0c114", "Url": "https://api.github.com/repos/Ben12345rocks/AdvancedCore", "Date": "2018-03-04T19:15:03Z"},
{"Line": "254=>256", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.cyclestreets.CycleStreetsNotifications.getBuilder(net.cyclestreets.track.RecordingService,net.cyclestreets.CycleStreetsNotifications.CHANNEL_TRACK_ID)=>net.cyclestreets.CycleStreetsNotifications.getBuilder()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6312/buggy-version/libraries.cyclestreets-track.src.main.java.net.cyclestreets.track.RecordingService.java", "BodyUseAPI": [], "Fixed commit": "1ca12f80a0035271446de991db2891fa4f0488d0", "Url": "https://api.github.com/repos/cyclestreets/android", "Date": "2018-08-23T13:47:57Z"},
{"Line": "151=>153", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.content.Context.getApplicationContext()=>net.cyclestreets.CycleStreetsNotifications.getBuilder()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6312/buggy-version/libraries.cyclestreets-track.src.main.java.net.cyclestreets.track.TripDataUploader.java", "BodyUseAPI": [], "Fixed commit": "1ca12f80a0035271446de991db2891fa4f0488d0", "Url": "https://api.github.com/repos/cyclestreets/android", "Date": "2018-08-23T13:47:57Z"},
{"Line": "55=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "web.ignoring().antMatchers(java.lang.String,java.lang.String,java.lang.String)=>http.csrf().disable().authorizeRequests().antMatchers(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9040/buggy-version/backend.src.main.java.com.ncgroup2.eventmanager.authorization.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "54e59280dbac2203b258fd4a3904e184a15556c5", "Url": "https://api.github.com/repos/vv0rkman/eventmanager", "Date": "2018-05-06T14:05:04Z"},
{"Line": "38=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.csrf().disable().sessionManagement()=>http.csrf().disable().authorizeRequests()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9040/buggy-version/backend.src.main.java.com.ncgroup2.eventmanager.authorization.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "54e59280dbac2203b258fd4a3904e184a15556c5", "Url": "https://api.github.com/repos/vv0rkman/eventmanager", "Date": "2018-05-06T14:05:04Z"},
{"Line": "38=>40", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.csrf().disable().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().addFilterBefore(authenticationTokenFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).headers().cacheControl()=>web.ignoring().antMatchers(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9040/buggy-version/backend.src.main.java.com.ncgroup2.eventmanager.authorization.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "54e59280dbac2203b258fd4a3904e184a15556c5", "Url": "https://api.github.com/repos/vv0rkman/eventmanager", "Date": "2018-05-06T14:05:04Z"},
{"Line": "55=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "web.ignoring().antMatchers(java.lang.String,java.lang.String,java.lang.String)=>http.csrf().disable().authorizeRequests().antMatchers(\"/api/reset/**\", \"/api/auth\", \"/api/register\", \"/api/registrationConfirm\").permitAll().and().authorizeRequests().anyRequest().authenticated().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().addFilterBefore(authenticationTokenFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class).headers().cacheControl()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9040/buggy-version/backend.src.main.java.com.ncgroup2.eventmanager.authorization.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "54e59280dbac2203b258fd4a3904e184a15556c5", "Url": "https://api.github.com/repos/vv0rkman/eventmanager", "Date": "2018-05-06T14:05:04Z"},
{"Line": "15=>13", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "tech.tablesaw.plotly.api.TimeSeriesPlot.show(java.lang.String,java.lang.String,tech.tablesaw.api.DateColumn,java.lang.String,tech.tablesaw.api.NumberColumn)=>tech.tablesaw.plotly.api.TimeSeriesPlot.show(java.lang.String,tech.tablesaw.api.Table,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/473/buggy-version/jsplot.src.examples.java.tech.tablesaw.plotly.TimeSeriesExample.java", "BodyUseAPI": [], "Fixed commit": "877267016f6c42b48e74f76a4a67467bfc475652", "Url": "https://api.github.com/repos/jtablesaw/tablesaw", "Date": "2018-07-26T05:53:56Z"},
{"Line": "15=>13", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "tech.tablesaw.plotly.api.TimeSeriesPlot.show(java.lang.String,java.lang.String,tech.tablesaw.api.DateColumn,java.lang.String,tech.tablesaw.api.NumberColumn)=>tech.tablesaw.plotly.api.TimeSeriesPlot.show(java.lang.String,tech.tablesaw.api.Table,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/473/buggy-version/jsplot.src.examples.java.tech.tablesaw.plotly.TimeSeriesExample.java", "BodyUseAPI": [], "Fixed commit": "877267016f6c42b48e74f76a4a67467bfc475652", "Url": "https://api.github.com/repos/jtablesaw/tablesaw", "Date": "2018-07-26T05:53:56Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<tech.tablesaw.api.Table>.get(int)=>tech.tablesaw.api.Table.dateColumn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/473/buggy-version/jsplot.src.main.java.tech.tablesaw.plotly.api.TimeSeriesPlot.java", "BodyUseAPI": [], "Fixed commit": "877267016f6c42b48e74f76a4a67467bfc475652", "Url": "https://api.github.com/repos/jtablesaw/tablesaw", "Date": "2018-07-26T05:53:56Z"},
{"Line": "30=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "tableList.get(i).dateColumn(java.lang.String)=>tableList.get(i).sortOn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/473/buggy-version/jsplot.src.main.java.tech.tablesaw.plotly.api.TimeSeriesPlot.java", "BodyUseAPI": [], "Fixed commit": "877267016f6c42b48e74f76a4a67467bfc475652", "Url": "https://api.github.com/repos/jtablesaw/tablesaw", "Date": "2018-07-26T05:53:56Z"},
{"Line": "31=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "tableList.get(i).numberColumn(java.lang.String)=>tech.tablesaw.api.Table.numberColumn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/473/buggy-version/jsplot.src.main.java.tech.tablesaw.plotly.api.TimeSeriesPlot.java", "BodyUseAPI": [], "Fixed commit": "877267016f6c42b48e74f76a4a67467bfc475652", "Url": "https://api.github.com/repos/jtablesaw/tablesaw", "Date": "2018-07-26T05:53:56Z"},
{"Line": "19=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "product.CatalogItem(long,java.lang.String,java.lang.String,float,int,java.lang.String,float,java.lang.String,byte[])=>product.CatalogItem(long,java.lang.String,java.lang.String,float,int,java.lang.String,float,java.lang.String,byte[],int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8737/buggy-version/src.catalog.CatalogItemView.java", "BodyUseAPI": [], "Fixed commit": "0ea9eb1a7863edf2654c140d35e507a96b5070ea", "Url": "https://api.github.com/repos/XmakerenX/prototype", "Date": "2018-01-11T10:03:02Z"},
{"Line": "150=>150", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.normandra.meta.GraphMeta.getEdgeMeta(java.lang.Class<T>)=>org.normandra.meta.GraphMeta.getNodeMeta(java.lang.Class<T>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5698/buggy-version/src.main.java.org.normandra.graph.GraphManager.java", "BodyUseAPI": [], "Fixed commit": "abea4bf08b217243347f61edf26c4ffbc66760db", "Url": "https://api.github.com/repos/trajar/normandra", "Date": "2018-08-05T11:27:20Z"},
{"Line": "328=>329", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "childNode.getQName().getLocalName()=>org.opendaylight.netconf.sal.rest.doc.impl.ModelGenerator.resolveNodesName(org.opendaylight.yangtools.yang.model.api.DataSchemaNode,java.lang.Module,org.opendaylight.yangtools.yang.model.api.SchemaContext)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/910/buggy-version/restconf.sal-rest-docgen.src.main.java.org.opendaylight.netconf.sal.rest.doc.impl.ModelGenerator.java", "BodyUseAPI": [], "Fixed commit": "f30f898a71705fab01f6a12f081100974f07aea2", "Url": "https://api.github.com/repos/UltimateDogg/netconf", "Date": "2018-01-18T04:12:35Z"},
{"Line": "305=>304", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.opendaylight.netconf.sal.rest.doc.impl.ModelGenerator.createPropertiesForPost(org.opendaylight.yangtools.yang.model.api.DataNodeContainer,org.opendaylight.yangtools.yang.model.api.SchemaContext,java.lang.String)=>org.opendaylight.netconf.sal.rest.doc.impl.ModelGenerator.createPropertiesForPost(org.opendaylight.yangtools.yang.model.api.DataNodeContainer,org.opendaylight.yangtools.yang.model.api.SchemaContext,java.lang.String,java.lang.Module)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/910/buggy-version/restconf.sal-rest-docgen.src.main.java.org.opendaylight.netconf.sal.rest.doc.impl.ModelGenerator.java", "BodyUseAPI": [], "Fixed commit": "f30f898a71705fab01f6a12f081100974f07aea2", "Url": "https://api.github.com/repos/UltimateDogg/netconf", "Date": "2018-01-18T04:12:35Z"},
{"Line": "114=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.opendaylight.netconf.sal.rest.doc.impl.ModelGenerator.createPropertiesForPost(java.lang.Module,org.opendaylight.yangtools.yang.model.api.SchemaContext,java.lang.String)=>org.opendaylight.netconf.sal.rest.doc.impl.ModelGenerator.createPropertiesForPost(java.lang.Module,org.opendaylight.yangtools.yang.model.api.SchemaContext,java.lang.String,java.lang.Module)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/910/buggy-version/restconf.sal-rest-docgen.src.main.java.org.opendaylight.netconf.sal.rest.doc.impl.ModelGenerator.java", "BodyUseAPI": [], "Fixed commit": "f30f898a71705fab01f6a12f081100974f07aea2", "Url": "https://api.github.com/repos/UltimateDogg/netconf", "Date": "2018-01-18T04:12:35Z"},
{"Line": "353=>353", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.hisp.dhis.android.sdk.ui.fragments.selectprogram.SelectProgramFragmentState.getProgramName()=>org.hisp.dhis.android.sdk.ui.fragments.selectprogram.SelectProgramFragmentState.getCategoryOptionComboName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4452/buggy-version/core.src.main.java.org.hisp.dhis.android.sdk.ui.fragments.selectprogram.SelectProgramFragment.java", "BodyUseAPI": [], "Fixed commit": "9b8415a862147923e59d423a604c5eec40ea604a", "Url": "https://api.github.com/repos/EyeSeeTea/dhis2-android-sdk", "Date": "2018-09-25T17:18:55Z"},
{"Line": "117=>118", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.sonar.php.checks.formatting.TokenUtils.isOnSameLine(org.sonar.plugins.php.api.tree.lexical.SyntaxToken,org.sonar.plugins.php.api.tree.lexical.SyntaxToken)=>org.sonar.php.checks.formatting.TokenUtils.getNbSpaceBetween(org.sonar.plugins.php.api.tree.lexical.SyntaxToken,org.sonar.plugins.php.api.tree.lexical.SyntaxToken)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8164/buggy-version/php-checks.src.main.java.org.sonar.php.checks.formatting.ControlStructureSpacingCheck.java", "BodyUseAPI": [], "Fixed commit": "6bb8da0e487bce2b59becb20a9b9214657dc5f95", "Url": "https://api.github.com/repos/SonarSource/sonar-php", "Date": "2018-07-27T16:18:10Z"},
{"Line": "117=>118", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.sonar.php.checks.formatting.TokenUtils.isOnSameLine(org.sonar.plugins.php.api.tree.lexical.SyntaxToken,org.sonar.plugins.php.api.tree.lexical.SyntaxToken)=>org.sonar.php.checks.formatting.TokenUtils.getNbSpaceBetween(org.sonar.plugins.php.api.tree.lexical.SyntaxToken,org.sonar.plugins.php.api.tree.lexical.SyntaxToken)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8164/buggy-version/php-checks.src.main.java.org.sonar.php.checks.formatting.ControlStructureSpacingCheck.java", "BodyUseAPI": [], "Fixed commit": "6bb8da0e487bce2b59becb20a9b9214657dc5f95", "Url": "https://api.github.com/repos/SonarSource/sonar-php", "Date": "2018-07-27T16:18:10Z"},
{"Line": "114=>114", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sonar.php.checks.formatting.TokenUtils.getNbSpaceBetween(org.sonar.plugins.php.api.tree.lexical.SyntaxToken,org.sonar.plugins.php.api.tree.lexical.SyntaxToken)=>org.sonar.php.checks.formatting.ControlStructureSpacingCheck.isExactlyOneSpaceBetweenOrLineSplit(org.sonar.plugins.php.api.tree.lexical.SyntaxToken,org.sonar.plugins.php.api.tree.lexical.SyntaxToken)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8164/buggy-version/php-checks.src.main.java.org.sonar.php.checks.formatting.ControlStructureSpacingCheck.java", "BodyUseAPI": [], "Fixed commit": "6bb8da0e487bce2b59becb20a9b9214657dc5f95", "Url": "https://api.github.com/repos/SonarSource/sonar-php", "Date": "2018-07-27T16:18:10Z"},
{"Line": "114=>114", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sonar.php.checks.formatting.TokenUtils.isOnSameLine(org.sonar.plugins.php.api.tree.lexical.SyntaxToken,org.sonar.plugins.php.api.tree.lexical.SyntaxToken)=>org.sonar.php.checks.formatting.ControlStructureSpacingCheck.isExactlyOneSpaceBetweenOrLineSplit(org.sonar.plugins.php.api.tree.lexical.SyntaxToken,org.sonar.plugins.php.api.tree.lexical.SyntaxToken)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8164/buggy-version/php-checks.src.main.java.org.sonar.php.checks.formatting.ControlStructureSpacingCheck.java", "BodyUseAPI": [], "Fixed commit": "6bb8da0e487bce2b59becb20a9b9214657dc5f95", "Url": "https://api.github.com/repos/SonarSource/sonar-php", "Date": "2018-07-27T16:18:10Z"},
{"Line": "111=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[static, private] isExactlyOneSpaceAroundOrLineSplit(org.sonar.php.checks.utils.TokenVisitor,org.sonar.plugins.php.api.tree.lexical.SyntaxToken)=>[static, private] isExactlyOneSpaceAroundOrLineSplit(org.sonar.php.checks.utils.TokenVisitor,org.sonar.plugins.php.api.tree.lexical.SyntaxToken)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8164/buggy-version/php-checks.src.main.java.org.sonar.php.checks.formatting.ControlStructureSpacingCheck.java", "BodyUseAPI": [], "Fixed commit": "6bb8da0e487bce2b59becb20a9b9214657dc5f95", "Url": "https://api.github.com/repos/SonarSource/sonar-php", "Date": "2018-07-27T16:18:10Z"},
{"Line": "92=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Map<seedu.address.model.user.Username, seedu.address.model.ReadOnlyAddressBook>.put(seedu.address.model.user.Username,seedu.address.model.util.SampleDataUtil.getSampleAddressBook())=>java.util.Map<seedu.address.model.user.Username, seedu.address.model.ReadOnlyAddressBook>.put(sampleAddressBook.getUsername(),seedu.address.model.ReadOnlyAddressBook)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7908/buggy-version/src.main.java.seedu.address.MainApp.java", "BodyUseAPI": [], "Fixed commit": "e0879d2901bb11a8705f8a3cc573a57e9ea43efb", "Url": "https://api.github.com/repos/winsonhys/expense-tracker", "Date": "2018-09-30T16:16:45Z"},
{"Line": "456=>456", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "hmvv.io.DatabaseCommands.getIntegerOrNull(java.sql.ResultSet,java.lang.String)=>java.sql.ResultSet.getString(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2161/buggy-version/HMVV.src.hmvv.io.DatabaseCommands.java", "BodyUseAPI": [], "Fixed commit": "1faf0bf7a4968a5e0b5702d48321cb76d6338709", "Url": "https://api.github.com/repos/hmvv/hmvv", "Date": "2018-09-24T18:51:46Z"},
{"Line": "82=>82", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "userNameInput.getText().toString().isEmpty()=>userNameInput.getText().toString().trim()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1129/buggy-version/app.src.main.java.com.example.android.programminglanguageselection.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "2d0ca36439b6b7389aab74d0399f4ddbc06c2295", "Url": "https://api.github.com/repos/VladShaternik/ProgrammingLanguageSelection", "Date": "2018-06-06T04:07:53Z"},
{"Line": "71=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.HashMap<com.redmart.evaluator.model.ReferenceTypeCell, java.util.HashSet<com.redmart.evaluator.entity.Cell>>.containsKey(com.redmart.evaluator.entity.Cell)=>java.util.HashMap<com.redmart.evaluator.model.ReferenceTypeCell, java.util.HashSet<com.redmart.evaluator.entity.Cell>>.containsKey(com.redmart.evaluator.model.ReferenceTypeCell)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7392/buggy-version/src.com.redmart.evaluator.service.SheetEvaluator.java", "BodyUseAPI": [], "Fixed commit": "d3201f2a4aa4009d5a421e1678139585f15f34cf", "Url": "https://api.github.com/repos/rajnishkr/sheet_formula_evaluator", "Date": "2018-07-03T19:17:50Z"},
{"Line": "72=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.HashMap<com.redmart.evaluator.model.ReferenceTypeCell, java.util.HashSet<com.redmart.evaluator.entity.Cell>>.get(com.redmart.evaluator.entity.Cell)=>java.util.HashMap<com.redmart.evaluator.model.ReferenceTypeCell, java.util.HashSet<com.redmart.evaluator.entity.Cell>>.get(com.redmart.evaluator.model.ReferenceTypeCell)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7392/buggy-version/src.com.redmart.evaluator.service.SheetEvaluator.java", "BodyUseAPI": [], "Fixed commit": "d3201f2a4aa4009d5a421e1678139585f15f34cf", "Url": "https://api.github.com/repos/rajnishkr/sheet_formula_evaluator", "Date": "2018-07-03T19:17:50Z"},
{"Line": "72=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.HashMap<com.redmart.evaluator.model.ReferenceTypeCell, java.util.HashSet<com.redmart.evaluator.entity.Cell>>.get(com.redmart.evaluator.entity.Cell)=>java.util.HashMap<com.redmart.evaluator.model.ReferenceTypeCell, java.util.HashSet<com.redmart.evaluator.entity.Cell>>.get(com.redmart.evaluator.model.ReferenceTypeCell)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7392/buggy-version/src.com.redmart.evaluator.service.SheetEvaluator.java", "BodyUseAPI": [], "Fixed commit": "d3201f2a4aa4009d5a421e1678139585f15f34cf", "Url": "https://api.github.com/repos/rajnishkr/sheet_formula_evaluator", "Date": "2018-07-03T19:17:50Z"},
{"Line": "593=>596", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.Object.getBytes()=>java.lang.Object.getBytes(java.nio.charset.Charset)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6390/buggy-version/src.org.exist.xmldb.RemoteCollection.java", "BodyUseAPI": [], "Fixed commit": "880f8ee29bae87514cdef102af4a9cac4f5e4884", "Url": "https://api.github.com/repos/adamretter/exist", "Date": "2018-06-07T21:27:10Z"},
{"Line": "46=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new java.io.File(folderPath, outputName)=>new java.io.File(outputFolder, vepName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6145/buggy-version/src.main.java.no.uib.pathwaymatcher.vep.VepFolderProcessor.java", "BodyUseAPI": [], "Fixed commit": "fce95c02a85f56ccbcf700fccdbaac64aa854df7", "Url": "https://api.github.com/repos/PathwayAnalysisPlatform/PathwayMatcher", "Date": "2017-07-25T08:53:42Z"},
{"Line": "451=>451", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.valkryst.VTerminal.Screen.addChildComponentsOfLayer(java.awt.Component)=>com.valkryst.VTerminal.Screen.setupChildComponentsOfLayer(java.awt.Component)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6754/buggy-version/src.com.valkryst.VTerminal.Screen.java", "BodyUseAPI": [], "Fixed commit": "c4edd384092395ca86374ab2eee46e772cf137a1", "Url": "https://api.github.com/repos/Valkryst/VTerminal", "Date": "2018-08-28T20:05:38Z"},
{"Line": "485=>493", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.valkryst.VTerminal.Screen.addChildComponentsOfLayer(java.awt.Component)=>com.valkryst.VTerminal.Screen.setupChildComponentsOfLayer(java.awt.Component)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6754/buggy-version/src.com.valkryst.VTerminal.Screen.java", "BodyUseAPI": [], "Fixed commit": "c4edd384092395ca86374ab2eee46e772cf137a1", "Url": "https://api.github.com/repos/Valkryst/VTerminal", "Date": "2018-08-28T20:05:38Z"},
{"Line": "482=>489", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.valkryst.VTerminal.Screen.addComponent(java.awt.Component)=>com.valkryst.VTerminal.Screen.addListener(java.util.EventListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6754/buggy-version/src.com.valkryst.VTerminal.Screen.java", "BodyUseAPI": [], "Fixed commit": "c4edd384092395ca86374ab2eee46e772cf137a1", "Url": "https://api.github.com/repos/Valkryst/VTerminal", "Date": "2018-08-28T20:05:38Z"},
{"Line": "482=>489", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.valkryst.VTerminal.Screen.addComponent(java.awt.Component)=>com.valkryst.VTerminal.Screen.addListener(java.util.EventListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6754/buggy-version/src.com.valkryst.VTerminal.Screen.java", "BodyUseAPI": [], "Fixed commit": "c4edd384092395ca86374ab2eee46e772cf137a1", "Url": "https://api.github.com/repos/Valkryst/VTerminal", "Date": "2018-08-28T20:05:38Z"},
{"Line": "183=>184", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.lateral.lateral.service.implementation.DefaultUserService.getIdByUsername(java.lang.String)=>defaultUserService.getUserByUsername(username).getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/184/buggy-version/app.src.main.java.com.lateral.lateral.activity.SignUpActivity.java", "BodyUseAPI": [], "Fixed commit": "52f71f8bb5273e08009d882be37447e06a197b87", "Url": "https://api.github.com/repos/CMPUT301W18T13/Lateral", "Date": "2018-03-20T23:36:03Z"},
{"Line": "89=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "iztechify.controllers.UserController.addSong()=>iztechify.controllers.UserController.addSong(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1772/buggy-version/SocialMusicPlatform.src.iztechify.views.UserWindow.java", "BodyUseAPI": [], "Fixed commit": "075f8a5bc5271345c22bea9e46a587bc38f48456", "Url": "https://api.github.com/repos/emrsmsrli/DesignPatterns", "Date": "2018-04-22T20:54:00Z"},
{"Line": "204=>204", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "club.spreadme.database.dao.CrudOption.queryOne(java.lang.String,club.spreadme.database.core.resultset.RecordRowMapper,java.lang.Object[])=>club.spreadme.database.dao.CrudOption.query(java.lang.String,club.spreadme.database.core.resultset.RecordRowMapper,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9732/buggy-version/src.main.java.club.spreadme.database.binding.IDaoMethod.java", "BodyUseAPI": [], "Fixed commit": "7df91ac8b21a9eb9c7272e28ec37d3aa183c70a7", "Url": "https://api.github.com/repos/WangShuwill/SpreadDatabase", "Date": "2018-08-25T14:29:37Z"},
{"Line": "112=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.split(java.lang.String)=>java.lang.String.lastIndexOf(char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1966/buggy-version/src.java.com.zimbra.oauth.utilities.LdapConfiguration.java", "BodyUseAPI": [], "Fixed commit": "1e0d2fcd6993ca07ecb440aac6e7ec75415ed21e", "Url": "https://api.github.com/repos/Zimbra/zm-oauth-social", "Date": "2018-06-13T08:34:28Z"},
{"Line": "96=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.lastIndexOf(java.lang.String)=>java.lang.String.lastIndexOf(char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1966/buggy-version/src.java.com.zimbra.oauth.utilities.LdapConfiguration.java", "BodyUseAPI": [], "Fixed commit": "1e0d2fcd6993ca07ecb440aac6e7ec75415ed21e", "Url": "https://api.github.com/repos/Zimbra/zm-oauth-social", "Date": "2018-06-13T08:34:28Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.ImageButton.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4836/buggy-version/app.src.main.java.com.example.siddharthm.blogapp.SetupActivity.java", "BodyUseAPI": [], "Fixed commit": "31eb0c5ec0425e4ccb59dc8d70cde44b163c8893", "Url": "https://api.github.com/repos/Siddharth1698/Blog-App", "Date": "2018-07-02T11:02:39Z"},
{"Line": "47=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.theartofdev.edmodo.cropper.CropImage.activity()=>com.theartofdev.edmodo.cropper.CropImage.activity(android.net.Uri)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4836/buggy-version/app.src.main.java.com.example.siddharthm.blogapp.SetupActivity.java", "BodyUseAPI": [], "Fixed commit": "31eb0c5ec0425e4ccb59dc8d70cde44b163c8893", "Url": "https://api.github.com/repos/Siddharth1698/Blog-App", "Date": "2018-07-02T11:02:39Z"},
{"Line": "323=>327", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.util.ResourceUtils.getFile(java.lang.String)=>org.springframework.core.io.ResourceLoader.getResource(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7166/buggy-version/src.main.java.com.songzi.service.ExportImportService.java", "BodyUseAPI": [], "Fixed commit": "5405e90cf6aab7b4c049814e0c17ca7defedfb7a", "Url": "https://api.github.com/repos/bxyb214/lei_tiku", "Date": "2018-08-04T14:04:35Z"},
{"Line": "56=>56", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getActivity().findViewById(R.id.drawer_layout)=>android.support.v7.app.AppCompatActivity.findViewById(R.id.drawer_layout)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5114/buggy-version/app.src.main.java.com.photonfighterlabs.particleweather.FragmentNavigationDrawer.java", "BodyUseAPI": [], "Fixed commit": "c32ce76ac2fb3f72ddbe588b4dcfebffd3703fe8", "Url": "https://api.github.com/repos/photonfighterlabs/ParticleWeather", "Date": "2018-02-18T04:11:09Z"},
{"Line": "26=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.ArrayList<java.lang.String>.get(int)=>java.util.ArrayList<java.lang.String>.add(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3023/buggy-version/src.main.java.RandomATron.java", "BodyUseAPI": [], "Fixed commit": "1e337abe681a7d33f3c1444dc0b2a3ef161cc74b", "Url": "https://api.github.com/repos/Conalter/Random-A-Tron", "Date": "2018-05-22T08:25:41Z"},
{"Line": "103=>105", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "io.fundrequest.core.request.fund.infrastructure.ProcessedBlockchainEventRepository.findOne(result.getTransactionHash())=>io.fundrequest.core.request.fund.infrastructure.ProcessedBlockchainEventRepository.findOne(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6816/buggy-version/tweb.src.main.java.io.fundreqest.platform.tweb.request.messsaging.AzraelMessageReceiver.java", "BodyUseAPI": [], "Fixed commit": "078a43c1316c25a22e5bf2e0398d4e976beb19d0", "Url": "https://api.github.com/repos/FundRequest/platform", "Date": "2018-05-02T18:14:20Z"},
{"Line": "103=>105", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.fundrequest.core.request.fund.messaging.dto.FundedEthDto.getTransactionHash()=>io.fundrequest.core.request.fund.infrastructure.ProcessedBlockchainEventRepository.findOne(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6816/buggy-version/tweb.src.main.java.io.fundreqest.platform.tweb.request.messsaging.AzraelMessageReceiver.java", "BodyUseAPI": [], "Fixed commit": "078a43c1316c25a22e5bf2e0398d4e976beb19d0", "Url": "https://api.github.com/repos/FundRequest/platform", "Date": "2018-05-02T18:14:20Z"},
{"Line": "39=>41", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.elasticsearch.transport.client.PreBuiltTransportClient.addTransportAddress(org.elasticsearch.common.transport.TransportAddress)=>org.elasticsearch.transport.client.PreBuiltTransportClient.addTransportAddress(org.elasticsearch.common.transport.InetSocketTransportAddress)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5568/buggy-version/src.main.java.com.baeldung.spring.data.es.config.Config.java", "BodyUseAPI": [], "Fixed commit": "80ac06046a8d557d444f186befda93159cdc418e", "Url": "https://api.github.com/repos/alexoxmt/spring-data-elasticsearch", "Date": "2018-07-25T08:00:22Z"},
{"Line": "160=>163", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.JTable.removeColumn(javax.swing.table.TableColumn)=>tools.CustomTableModel.removeColumn(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9129/buggy-version/src.com.sciquizapp.sciquizserver.Table.java", "BodyUseAPI": [], "Fixed commit": "a178242a335e5c44e50f200e207beaeb795e17d1", "Url": "https://api.github.com/repos/maximerchrd/sciquiz_server", "Date": "2018-01-25T20:54:14Z"},
{"Line": "59=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.table.DefaultTableModel.addColumn(java.lang.String)=>tools.CustomTableModel.addColumn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9129/buggy-version/src.com.sciquizapp.sciquizserver.Table.java", "BodyUseAPI": [], "Fixed commit": "a178242a335e5c44e50f200e207beaeb795e17d1", "Url": "https://api.github.com/repos/maximerchrd/sciquiz_server", "Date": "2018-01-25T20:54:14Z"},
{"Line": "55=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.table.DefaultTableModel.addColumn(java.lang.String)=>tools.CustomTableModel.addColumn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9129/buggy-version/src.com.sciquizapp.sciquizserver.Table.java", "BodyUseAPI": [], "Fixed commit": "a178242a335e5c44e50f200e207beaeb795e17d1", "Url": "https://api.github.com/repos/maximerchrd/sciquiz_server", "Date": "2018-01-25T20:54:14Z"},
{"Line": "153=>156", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.table.TableColumn.setPreferredWidth(int)=>javax.swing.JTable.getColumnModel()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9129/buggy-version/src.com.sciquizapp.sciquizserver.Table.java", "BodyUseAPI": [], "Fixed commit": "a178242a335e5c44e50f200e207beaeb795e17d1", "Url": "https://api.github.com/repos/maximerchrd/sciquiz_server", "Date": "2018-01-25T20:54:14Z"},
{"Line": "57=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.table.DefaultTableModel.addColumn(java.lang.String)=>tools.CustomTableModel.addColumn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9129/buggy-version/src.com.sciquizapp.sciquizserver.Table.java", "BodyUseAPI": [], "Fixed commit": "a178242a335e5c44e50f200e207beaeb795e17d1", "Url": "https://api.github.com/repos/maximerchrd/sciquiz_server", "Date": "2018-01-25T20:54:14Z"},
{"Line": "676=>676", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "PDBIdentifierPanel.pdbNameLabel.setHTML(java.lang.String)=>PDBIdentifierPanel.pdbNameLabel.setHTML((((((\"<a target='_blank' href='\" + (ch.systemsx.sybit.crkwebui.client.commons.appdata.ApplicationContext.getSettings().getPdbLinkUrl())) + pdbCode) + \"'>\") + pdbCode) + \"</a>\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1413/buggy-version/eppic-wui.src.main.java.ch.systemsx.sybit.crkwebui.client.results.gui.panels.AssemblyResultsGridPanel.java", "BodyUseAPI": [], "Fixed commit": "cc312361d2cf63e82daf9471e9e700da76a0e2df", "Url": "https://api.github.com/repos/eppic-team/eppic", "Date": "2018-06-13T00:36:18Z"},
{"Line": "20=>20", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.csrf().disable().authorizeRequests().antMatchers(\"/login\").access(\"isAnonymous()\").antMatchers(\"/register\").access(java.lang.String)=>http.csrf().disable().authorizeRequests().antMatchers(\"/login\").anonymous().antMatchers(\"/register\").anonymous()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4590/buggy-version/src.main.java.votingsystem.menuvote.config.SpringSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "9e50c1cd4a910b3f9f85825225f3ab87007f8491", "Url": "https://api.github.com/repos/zamyslov/menuvote", "Date": "2018-02-23T14:09:56Z"},
{"Line": "20=>20", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.csrf().disable().authorizeRequests().antMatchers(\"/login\").access(java.lang.String)=>http.csrf().disable().authorizeRequests().antMatchers(\"/login\").anonymous()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4590/buggy-version/src.main.java.votingsystem.menuvote.config.SpringSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "9e50c1cd4a910b3f9f85825225f3ab87007f8491", "Url": "https://api.github.com/repos/zamyslov/menuvote", "Date": "2018-02-23T14:09:56Z"},
{"Line": "20=>20", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.csrf().disable().authorizeRequests().antMatchers(\"/login\").access(\"isAnonymous()\").antMatchers(\"/register\").access(\"isAnonymous()\").antMatchers(\"/admin/**\").hasAnyRole(\"ADMIN\").antMatchers(\"/**\").access(java.lang.String)=>http.csrf().disable().authorizeRequests().antMatchers(\"/login\").anonymous().antMatchers(\"/register\").anonymous().antMatchers(\"/admin/**\").hasAnyRole(\"ADMIN\").antMatchers(\"/**\").authenticated()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4590/buggy-version/src.main.java.votingsystem.menuvote.config.SpringSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "9e50c1cd4a910b3f9f85825225f3ab87007f8491", "Url": "https://api.github.com/repos/zamyslov/menuvote", "Date": "2018-02-23T14:09:56Z"},
{"Line": "255=>255", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Timer.schedule(java.util.TimerTask,int)=>java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7761/buggy-version/app.src.main.java.com.danhasting.radar.RadarActivity.java", "BodyUseAPI": [], "Fixed commit": "e99a204c80631511a83d58e6abe63ecc93e53ade", "Url": "https://api.github.com/repos/dh4/WeatherRadar", "Date": "2018-03-13T16:22:28Z"},
{"Line": "20=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.ArrayList<java.lang.String>.get(float)=>java.util.ArrayList<java.lang.String>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1278/buggy-version/app.src.main.java.valentin8dev.by.MeteoStation.MyXAxisValueFormatter.java", "BodyUseAPI": [], "Fixed commit": "31d6e2e3f642db027b57c30be2246dd800897b00", "Url": "https://api.github.com/repos/Valentin-Golyonko/MeteoStation", "Date": "2018-03-27T08:09:49Z"},
{"Line": "64=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mydraw.BMPFile.write(java.lang.String,java.awt.Image)=>mydraw.MyBMPFile.write(java.lang.String,java.awt.Image)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/461/buggy-version/src.mydraw.Draw.java", "BodyUseAPI": [], "Fixed commit": "daedec60560c663752b4a1a4620f767492872a58", "Url": "https://api.github.com/repos/pawap/PTP", "Date": "2018-04-08T14:45:59Z"},
{"Line": "68=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mydraw.BMPFile.read(java.lang.String)=>mydraw.MyBMPFile.read(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/461/buggy-version/src.mydraw.Draw.java", "BodyUseAPI": [], "Fixed commit": "daedec60560c663752b4a1a4620f767492872a58", "Url": "https://api.github.com/repos/pawap/PTP", "Date": "2018-04-08T14:45:59Z"},
{"Line": "598=>598", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.mapdb.DB.compact()=>org.apache.logging.log4j.Logger.warn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/813/buggy-version/src.tsdb.streamdb.StreamDB.java", "BodyUseAPI": [], "Fixed commit": "332f89e8a4cd7d4a28cdb74ea6a1601ce6b570f0", "Url": "https://api.github.com/repos/environmentalinformatics-marburg/tubedb", "Date": "2018-09-03T13:03:14Z"},
{"Line": "598=>598", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.mapdb.DB.compact()=>org.apache.logging.log4j.Logger.warn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/813/buggy-version/src.tsdb.streamdb.StreamDB.java", "BodyUseAPI": [], "Fixed commit": "332f89e8a4cd7d4a28cdb74ea6a1601ce6b570f0", "Url": "https://api.github.com/repos/environmentalinformatics-marburg/tubedb", "Date": "2018-09-03T13:03:14Z"},
{"Line": "153=>157", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.harrisonwelch.paint.DrawActivity.findViewById(R.id.linearLayout)=>com.harrisonwelch.paint.DrawActivity.findViewById(R.id.linearLayout_color)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9002/buggy-version/app.src.main.java.com.harrisonwelch.paint.DrawActivity.java", "BodyUseAPI": [], "Fixed commit": "bb716b0465cf3309f50967008f331aa51ecb4574", "Url": "https://api.github.com/repos/HarrisonWelch/Paint", "Date": "2018-04-17T03:44:35Z"},
{"Line": "122=>126", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "findViewById(R.id.radioButton_frame).setOnClickListener(android.view.View.OnClickListener)=>findViewById(R.id.radioButton_frame).setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9002/buggy-version/app.src.main.java.com.harrisonwelch.paint.DrawActivity.java", "BodyUseAPI": [], "Fixed commit": "bb716b0465cf3309f50967008f331aa51ecb4574", "Url": "https://api.github.com/repos/HarrisonWelch/Paint", "Date": "2018-04-17T03:44:35Z"},
{"Line": "136=>140", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "abak.tr.com.boxedverticalseekbar.BoxedVertical.setOnBoxedPointsChangeListener(abak.tr.com.boxedverticalseekbar.BoxedVertical.OnValuesChangeListener)=>abak.tr.com.boxedverticalseekbar.BoxedVertical.setOnBoxedPointsChangeListener(abak.tr.com.boxedverticalseekbar.BoxedVertical.OnValuesChangeListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9002/buggy-version/app.src.main.java.com.harrisonwelch.paint.DrawActivity.java", "BodyUseAPI": [], "Fixed commit": "bb716b0465cf3309f50967008f331aa51ecb4574", "Url": "https://api.github.com/repos/HarrisonWelch/Paint", "Date": "2018-04-17T03:44:35Z"},
{"Line": "170=>174", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "AlertDialog.Builder.setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>AlertDialog.Builder.setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9002/buggy-version/app.src.main.java.com.harrisonwelch.paint.DrawActivity.java", "BodyUseAPI": [], "Fixed commit": "bb716b0465cf3309f50967008f331aa51ecb4574", "Url": "https://api.github.com/repos/HarrisonWelch/Paint", "Date": "2018-04-17T03:44:35Z"},
{"Line": "101=>105", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "findViewById(R.id.button_new_page).setOnClickListener(android.view.View.OnClickListener)=>findViewById(R.id.button_new_page).setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9002/buggy-version/app.src.main.java.com.harrisonwelch.paint.DrawActivity.java", "BodyUseAPI": [], "Fixed commit": "bb716b0465cf3309f50967008f331aa51ecb4574", "Url": "https://api.github.com/repos/HarrisonWelch/Paint", "Date": "2018-04-17T03:44:35Z"},
{"Line": "265=>269", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "AlertDialog.Builder.setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>AlertDialog.Builder.setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9002/buggy-version/app.src.main.java.com.harrisonwelch.paint.DrawActivity.java", "BodyUseAPI": [], "Fixed commit": "bb716b0465cf3309f50967008f331aa51ecb4574", "Url": "https://api.github.com/repos/HarrisonWelch/Paint", "Date": "2018-04-17T03:44:35Z"},
{"Line": "114=>118", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "findViewById(R.id.radioButton_sticker).setOnClickListener(android.view.View.OnClickListener)=>findViewById(R.id.radioButton_sticker).setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9002/buggy-version/app.src.main.java.com.harrisonwelch.paint.DrawActivity.java", "BodyUseAPI": [], "Fixed commit": "bb716b0465cf3309f50967008f331aa51ecb4574", "Url": "https://api.github.com/repos/HarrisonWelch/Paint", "Date": "2018-04-17T03:44:35Z"},
{"Line": "574=>574", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.microsoft.azure.mobile.utils.async.DefaultSimpleFuture<java.lang.Boolean>.complete(<nulltype>)=>com.microsoft.azure.mobile.utils.async.DefaultSimpleFuture<java.lang.Boolean>.complete(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7538/buggy-version/sdk.mobile-center.src.main.java.com.microsoft.azure.mobile.MobileCenter.java", "BodyUseAPI": [], "Fixed commit": "9f9d092b65445385d4f8368c176eba3d53b73981", "Url": "https://api.github.com/repos/pniko/AppCenter-SDK-Android", "Date": "2017-05-31T22:06:46Z"},
{"Line": "91=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.microsoft.azure.mobile.AbstractMobileCenterService.post(java.lang.Runnable,boolean)=>com.microsoft.azure.mobile.AbstractMobileCenterService.post(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7538/buggy-version/sdk.mobile-center.src.main.java.com.microsoft.azure.mobile.AbstractMobileCenterService.java", "BodyUseAPI": [], "Fixed commit": "9f9d092b65445385d4f8368c176eba3d53b73981", "Url": "https://api.github.com/repos/pniko/AppCenter-SDK-Android", "Date": "2017-05-31T22:06:46Z"},
{"Line": "335=>335", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "a.v().mod(b.v())=>a.v().remainder(b.v())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3453/buggy-version/src.main.java.nom.bdezonia.zorbage.type.data.bigint.UnboundedIntGroup.java", "BodyUseAPI": [], "Fixed commit": "6cbc24b3c1f144631be50e9bcb5571f48b3efe78", "Url": "https://api.github.com/repos/bdezonia/zorbage", "Date": "2018-10-20T04:12:55Z"},
{"Line": "61=>61", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.souschef.logic.parser.contextparser.RecipeParser.parseCommand(modelSet.getFavouriteModel(),modelSet.getMealPlannerModel(),java.lang.String)=>seedu.souschef.logic.parser.contextparser.RecipeParser.parseCommand(modelSet.getFavouriteModel(),modelSet.getMealPlannerModel(),seedu.souschef.storage.Storage,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3866/buggy-version/src.main.java.seedu.souschef.logic.parser.AppContentParser.java", "BodyUseAPI": [], "Fixed commit": "60ad406257d9d96f8c10bb6975ae8d94bfd02171", "Url": "https://api.github.com/repos/BennTay/main", "Date": "2018-10-25T11:01:42Z"},
{"Line": "64=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.souschef.logic.parser.contextparser.RecipeParser.parseCommand(modelSet.getRecipeModel(),modelSet.getMealPlannerModel(),java.lang.String)=>seedu.souschef.logic.parser.contextparser.RecipeParser.parseCommand(modelSet.getRecipeModel(),modelSet.getMealPlannerModel(),seedu.souschef.storage.Storage,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3866/buggy-version/src.main.java.seedu.souschef.logic.parser.AppContentParser.java", "BodyUseAPI": [], "Fixed commit": "60ad406257d9d96f8c10bb6975ae8d94bfd02171", "Url": "https://api.github.com/repos/BennTay/main", "Date": "2018-10-25T11:01:42Z"},
{"Line": "69=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.pargroup.view.BoardView.getChildren()=>javafx.scene.layout.StackPane.getChildren()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2732/buggy-version/src.java.com.pargroup.view.BoardView.java", "BodyUseAPI": [], "Fixed commit": "98a53d7627a9eb72907bda1eb440154961be3357", "Url": "https://api.github.com/repos/PARGroup/Connect-4", "Date": "2018-07-02T00:31:27Z"},
{"Line": "206=>206", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.sunmi.pay.hardware.aidl.readcard.ReadCardOpt.ledStatusOnDevice(args.getInt(0),args.getInt(1))=>com.sunmi.pay.hardware.aidl.system.BasicOpt.ledStatusOnDevice(args.getInt(0),args.getInt(1))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5440/buggy-version/src.android.it.piratafrancis.SunmiCardReader.java", "BodyUseAPI": [], "Fixed commit": "bd9de4a3e539825bd8c48d914bc8beefe6d6b961", "Url": "https://api.github.com/repos/PirataFrancis/sunmi-card-reader", "Date": "2018-02-10T12:53:18Z"},
{"Line": "206=>206", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.sunmi.pay.hardware.aidl.readcard.ReadCardOpt.ledStatusOnDevice(args.getInt(0),args.getInt(1))=>com.sunmi.pay.hardware.aidl.system.BasicOpt.ledStatusOnDevice(args.getInt(0),args.getInt(1))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5440/buggy-version/src.android.it.piratafrancis.SunmiCardReader.java", "BodyUseAPI": [], "Fixed commit": "bd9de4a3e539825bd8c48d914bc8beefe6d6b961", "Url": "https://api.github.com/repos/PirataFrancis/sunmi-card-reader", "Date": "2018-02-10T12:53:18Z"},
{"Line": "22=>7", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "base.SelectionSort.sorting(java.lang.Integer[])=>base.SelectionSort.sorting(java.lang.Integer[],int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8320/buggy-version/Search-algorithms.src.base.SelectionSort.java", "BodyUseAPI": [], "Fixed commit": "6672052e2b17d6f8c1a2facb57f2e0fd5712562b", "Url": "https://api.github.com/repos/DanerSound/Sort-Algorithms", "Date": "2018-03-13T16:19:42Z"},
{"Line": "1721=>1722", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sunbird.user.actors.UserManagementActor.sendOnboardingMail(java.util.Map<java.lang.String, java.lang.Object>)=>org.sunbird.common.models.util.ProjectLogger.log(java.lang.String,LoggerEnum.INFO.name())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2518/buggy-version/actors.user.src.main.java.org.sunbird.user.actors.UserManagementActor.java", "BodyUseAPI": [], "Fixed commit": "621a6153b5b58a629fc92e4a9f281ac936df4ea5", "Url": "https://api.github.com/repos/anujtech46/sunbird-lms-mw", "Date": "2018-05-31T09:20:27Z"},
{"Line": "141=>141", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.silicolife.textmining.core.interfaces.core.document.IPublication.getCategory()=>com.silicolife.textmining.core.interfaces.core.document.IPublication.getType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1326/buggy-version/src.main.java.com.silicolife.textmining.core.datastructures.dataaccess.database.dataaccess.implementation.wrapper.publications.PublicationsWrapper.java", "BodyUseAPI": [], "Fixed commit": "ab95e4810ee55bbf71a5aa54c90bd5ff1b172d1b", "Url": "https://api.github.com/repos/biotextmining/core", "Date": "2018-01-24T17:59:34Z"},
{"Line": "13=>14", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.List<Question>.put(question.getQuestion(),question.getId())=>java.util.List<Question>.add(Question)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6953/buggy-version/RuleRepository.java", "BodyUseAPI": [], "Fixed commit": "fbc50e40ba51d0bcc8122f62a5123fb8f35d817f", "Url": "https://api.github.com/repos/CodecoolKRK20173/expert-system-razdwatrzy-1", "Date": "2018-05-06T20:27:40Z"},
{"Line": "136=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.sk89q.worldedit.blocks.BaseBlock.setId(int)=>com.sk89q.worldedit.blocks.BaseBlock.internalSetId(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/328/buggy-version/worldedit-core.src.main.java.com.sk89q.worldedit.blocks.BaseBlock.java", "BodyUseAPI": [], "Fixed commit": "116cc37cb17ee843f76b94ce27b2a7e9deb33a35", "Url": "https://api.github.com/repos/sk89q/WorldEdit", "Date": "2018-01-03T07:06:58Z"},
{"Line": "84=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.sk89q.worldedit.blocks.BaseBlock.setId(int)=>com.sk89q.worldedit.blocks.BaseBlock.internalSetId(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/328/buggy-version/worldedit-core.src.main.java.com.sk89q.worldedit.blocks.BaseBlock.java", "BodyUseAPI": [], "Fixed commit": "116cc37cb17ee843f76b94ce27b2a7e9deb33a35", "Url": "https://api.github.com/repos/sk89q/WorldEdit", "Date": "2018-01-03T07:06:58Z"},
{"Line": "107=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.sk89q.worldedit.blocks.BaseBlock.setId(int)=>com.sk89q.worldedit.blocks.BaseBlock.internalSetId(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/328/buggy-version/worldedit-core.src.main.java.com.sk89q.worldedit.blocks.BaseBlock.java", "BodyUseAPI": [], "Fixed commit": "116cc37cb17ee843f76b94ce27b2a7e9deb33a35", "Url": "https://api.github.com/repos/sk89q/WorldEdit", "Date": "2018-01-03T07:06:58Z"},
{"Line": "70=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.sql.ResultSet.getInt(java.lang.String)=>java.sql.ResultSet.getString(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1126/buggy-version/class-mediators.MockProject.src.main.java.com.arcana.gdcb.stubs.in.Script.java", "BodyUseAPI": [], "Fixed commit": "9cf284ee74ba0c5e12b7a5c626f8dd809b7f5b64", "Url": "https://api.github.com/repos/bombasta1/gdcb-stubs", "Date": "2018-01-21T10:51:12Z"},
{"Line": "287=>305", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Ledger.getBlockchain()=>Ledger.getBlockchainAndMempool()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7549/buggy-version/src.Ledger.java", "BodyUseAPI": [], "Fixed commit": "a663534dcbf5fa556a137d670bb5c9892aa82c20", "Url": "https://api.github.com/repos/markd315/Cmdledger", "Date": "2018-05-02T20:27:19Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.app.ActivityOptions.makeSceneTransitionAnimation(com.example.xyzreader.ui.ArticleListActivity.Adapter.1,com.example.xyzreader.ui.DynamicHeightNetworkImageView,java.lang.String)=>android.app.ActivityOptions.makeSceneTransitionAnimation(com.example.xyzreader.ui.ArticleListActivity,com.example.xyzreader.ui.DynamicHeightNetworkImageView,vh.thumbnailView.getTransitionName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5528/buggy-version/XYZReader.src.main.java.com.example.xyzreader.ui.ArticleListActivity.java", "BodyUseAPI": [], "Fixed commit": "15f14ebfe88f6a1f873dfd1e87c4445f366f78f4", "Url": "https://api.github.com/repos/khkavinha/xyz-reader-starter", "Date": "2018-04-27T06:29:50Z"},
{"Line": "14=>13", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.waltonrobotics.command.SimpleSpline(double,double,double,double,boolean,org.waltonrobotics.controller.Pose[])=>org.waltonrobotics.command.SimpleSpline(double,double,boolean,org.waltonrobotics.controller.Pose[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6147/buggy-version/src.org.waltonrobotics.command.SimpleSpline.java", "BodyUseAPI": [], "Fixed commit": "375045115609baba563bc8c742515a057c38fe05", "Url": "https://api.github.com/repos/ThundrHawk/Actually-Simple-Splines", "Date": "2018-07-27T15:12:40Z"},
{"Line": "35=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.waltonrobotics.command.SimpleSpline(double,double,double,double,boolean,int,int,int,int,org.waltonrobotics.controller.Pose[])=>org.waltonrobotics.command.SimpleSpline(double,double,boolean,int,int,int,int,org.waltonrobotics.controller.Pose[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6147/buggy-version/src.org.waltonrobotics.command.SimpleSpline.java", "BodyUseAPI": [], "Fixed commit": "375045115609baba563bc8c742515a057c38fe05", "Url": "https://api.github.com/repos/ThundrHawk/Actually-Simple-Splines", "Date": "2018-07-27T15:12:40Z"},
{"Line": "28=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Map<java.lang.String, com.kksionek.gdzietentramwaj.DataSource.TramData>.keySet()=>java.util.Map<java.lang.String, com.kksionek.gdzietentramwaj.DataSource.TramData>.values()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3665/buggy-version/app.src.main.java.com.kksionek.gdzietentramwaj.Repository.FavoriteLinesConsumer.java", "BodyUseAPI": [], "Fixed commit": "d1ecbf4f3b3301e99729d8c300dee09f70f946f3", "Url": "https://api.github.com/repos/karlkar/gdzietentramwaj", "Date": "2018-03-17T21:44:07Z"},
{"Line": "123=>124", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.ibra.chatappdemo.fragment.ChatFragment.ChatViewHolder.setMessage(java.lang.String,java.lang.String)=>com.ibra.chatappdemo.fragment.ChatFragment.ChatViewHolder.setMessage(java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1241/buggy-version/app.src.main.java.com.ibra.chatappdemo.fragment.ChatFragment.java", "BodyUseAPI": [], "Fixed commit": "8a01bfc26f788272952870f54fc525eac39b281e", "Url": "https://api.github.com/repos/ibrahimothman/chatapp", "Date": "2018-08-06T18:51:22Z"},
{"Line": "68=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "androidx.fragment.app.Fragment.onStop()=>androidx.fragment.app.Fragment.onDestroyView()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7382/buggy-version/app.src.main.java.net.xcreen.restsms.AboutFragment.java", "BodyUseAPI": [], "Fixed commit": "6bf38306466c14c451cc4d3eae5af6ebff353af9", "Url": "https://api.github.com/repos/Xcreen/RestSMS", "Date": "2018-10-02T14:18:36Z"},
{"Line": "104=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.sergiomoral.appcitas.presentation.ui.view.LoginActivity.LoginActivity.hideLoading()=>com.example.sergiomoral.appcitas.presentation.ui.view.LoginActivity.LoginActivity.finish()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6409/buggy-version/AppCitas.app.src.main.java.com.example.sergiomoral.appcitas.presentation.ui.view.LoginActivity.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "21f95dee161b5c90cb744d04c5229a68f39d1b7a", "Url": "https://api.github.com/repos/smoralb/AppCitas", "Date": "2018-02-10T14:27:22Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.logging.log4j.Logger.error(java.lang.String)=>org.apache.logging.log4j.Logger.error(java.lang.String,java.io.IOException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4906/buggy-version/src.main.java.life.qbic.service.Client.java", "BodyUseAPI": [], "Fixed commit": "ac356a1e1574c16c52a7abb82164ea5a2feb386a", "Url": "https://api.github.com/repos/qbicsoftware/nexus-listener-service", "Date": "2018-08-17T12:34:35Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.modern.UIService.getInstance()=>org.jebtk.modern.AssetService.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8413/buggy-version/edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.newdendrogram.NewDendrogramModule.java", "BodyUseAPI": [], "Fixed commit": "2991ecd24ef8e3a91e60acb719cee079ebf5d84a", "Url": "https://api.github.com/repos/antonybholmes/matcalc-newdendrogram", "Date": "2018-05-22T00:04:27Z"},
{"Line": "96=>96", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.core.settings.SettingsService.getInstance().getAsInt(java.lang.String)=>org.jebtk.core.settings.SettingsService.getInstance().getInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8413/buggy-version/edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.newdendrogram.NewDendrogramDialog.java", "BodyUseAPI": [], "Fixed commit": "2991ecd24ef8e3a91e60acb719cee079ebf5d84a", "Url": "https://api.github.com/repos/antonybholmes/matcalc-newdendrogram", "Date": "2018-05-22T00:04:27Z"},
{"Line": "109=>109", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.core.settings.SettingsService.getInstance().getAsBool(java.lang.String)=>org.jebtk.core.settings.SettingsService.getInstance().getBool(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8413/buggy-version/edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.newdendrogram.NewDendrogramDialog.java", "BodyUseAPI": [], "Fixed commit": "2991ecd24ef8e3a91e60acb719cee079ebf5d84a", "Url": "https://api.github.com/repos/antonybholmes/matcalc-newdendrogram", "Date": "2018-05-22T00:04:27Z"},
{"Line": "111=>111", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.core.settings.SettingsService.getInstance().getAsDouble(java.lang.String)=>org.jebtk.core.settings.SettingsService.getInstance().getDouble(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8413/buggy-version/edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.newdendrogram.NewDendrogramDialog.java", "BodyUseAPI": [], "Fixed commit": "2991ecd24ef8e3a91e60acb719cee079ebf5d84a", "Url": "https://api.github.com/repos/antonybholmes/matcalc-newdendrogram", "Date": "2018-05-22T00:04:27Z"},
{"Line": "114=>114", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.core.settings.SettingsService.getInstance().getAsDouble(java.lang.String)=>org.jebtk.core.settings.SettingsService.getInstance().getDouble(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8413/buggy-version/edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.newdendrogram.NewDendrogramDialog.java", "BodyUseAPI": [], "Fixed commit": "2991ecd24ef8e3a91e60acb719cee079ebf5d84a", "Url": "https://api.github.com/repos/antonybholmes/matcalc-newdendrogram", "Date": "2018-05-22T00:04:27Z"},
{"Line": "13=>13", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.modern.UIService.getInstance()=>org.jebtk.modern.AssetService.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8413/buggy-version/edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.NewDendrogramInfo.java", "BodyUseAPI": [], "Fixed commit": "2991ecd24ef8e3a91e60acb719cee079ebf5d84a", "Url": "https://api.github.com/repos/antonybholmes/matcalc-newdendrogram", "Date": "2018-05-22T00:04:27Z"},
{"Line": "12=>12", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.modern.UIService.getInstance()=>org.jebtk.modern.AssetService.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8413/buggy-version/edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.NewDendrogramInfo.java", "BodyUseAPI": [], "Fixed commit": "2991ecd24ef8e3a91e60acb719cee079ebf5d84a", "Url": "https://api.github.com/repos/antonybholmes/matcalc-newdendrogram", "Date": "2018-05-22T00:04:27Z"},
{"Line": "12=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.modern.UIService.getInstance()=>org.jebtk.modern.AssetService.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8413/buggy-version/edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.newdendrogram.app.NewDendrogramInfo.java", "BodyUseAPI": [], "Fixed commit": "2991ecd24ef8e3a91e60acb719cee079ebf5d84a", "Url": "https://api.github.com/repos/antonybholmes/matcalc-newdendrogram", "Date": "2018-05-22T00:04:27Z"},
{"Line": "391=>388", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.github.oxygenPlugins.common.text.TextSource.resolveFile(java.net.URL)=>com.github.oxygenPlugins.common.text.TextSource.resolveFile(java.net.URL,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9422/buggy-version/src.main.java.com.github.oxygenPlugins.common.text.TextSource.java", "BodyUseAPI": [], "Fixed commit": "526e60dc23606acd1f53307fd1ef7508ef322256", "Url": "https://api.github.com/repos/oxygen-plugins/common-xml", "Date": "2017-11-14T17:19:52Z"},
{"Line": "25=>24", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.ozero.drugsreminder.DataBase.IdManager.nextDrugId()=>net.ozero.drugsreminder.DataStructures.Prescription.getDrugId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/766/buggy-version/app.src.main.java.net.ozero.drugsreminder.DataStructures.EventsMaker.java", "BodyUseAPI": [], "Fixed commit": "e2aa0956799dcc8519165109aa07ff39f472b68c", "Url": "https://api.github.com/repos/lexasok/DrugsReminder", "Date": "2018-09-06T23:39:15Z"},
{"Line": "26=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.ozero.drugsreminder.DataBase.IdManager.nextPrescriptionId()=>net.ozero.drugsreminder.DataStructures.Prescription.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/766/buggy-version/app.src.main.java.net.ozero.drugsreminder.DataStructures.EventsMaker.java", "BodyUseAPI": [], "Fixed commit": "e2aa0956799dcc8519165109aa07ff39f472b68c", "Url": "https://api.github.com/repos/lexasok/DrugsReminder", "Date": "2018-09-06T23:39:15Z"},
{"Line": "89=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "mx.infotec.domain.api.EstadoReporte.name()=>mx.infotec.domain.api.EstadoReporte.nombre()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8390/buggy-version/src.main.java.mx.infotec.service.client.cnbv.SolicitudReporteCnbvServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "f3266ef86eb2e4d5c94d718bc623ad7e3cb66d97", "Url": "https://api.github.com/repos/danimaniarqsoft/cnbv-itf", "Date": "2018-10-29T23:16:36Z"},
{"Line": "92=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Exception.getMessage()=>org.joget.apps.userview.service.UserviewUtil.getTemplate(org.joget.apps.userview.model.UserviewV5Theme,java.util.Map<java.lang.String, java.lang.Object>,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1912/buggy-version/wflow-core.src.main.java.org.joget.apps.userview.model.UserviewV5Theme.java", "BodyUseAPI": [], "Fixed commit": "2ce106c2430ab15c6341536317fbdc029edefaa4", "Url": "https://api.github.com/repos/jogetworkflow/jw-community", "Date": "2018-05-14T11:48:28Z"},
{"Line": "92=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.lang.StringEscapeUtils.escapeHtml(java.lang.String)=>org.joget.apps.userview.service.UserviewUtil.getTemplate(org.joget.apps.userview.model.UserviewV5Theme,java.util.Map<java.lang.String, java.lang.Object>,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1912/buggy-version/wflow-core.src.main.java.org.joget.apps.userview.model.UserviewV5Theme.java", "BodyUseAPI": [], "Fixed commit": "2ce106c2430ab15c6341536317fbdc029edefaa4", "Url": "https://api.github.com/repos/jogetworkflow/jw-community", "Date": "2018-05-14T11:48:28Z"},
{"Line": "63=>63", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jppf.admin.web.JPPFWebSession.getTopologyData()=>org.jppf.admin.web.JPPFWebSession.getHealthData()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9167/buggy-version/admin-web.src.java.org.jppf.admin.web.health.HeapDumpLink.java", "BodyUseAPI": [], "Fixed commit": "534110ba319e30d597e64e4dc7c32cafb8eff883", "Url": "https://api.github.com/repos/jppf-grid/JPPF", "Date": "2018-05-22T05:45:03Z"},
{"Line": "62=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jppf.admin.web.JPPFWebSession.getTopologyData()=>org.jppf.admin.web.JPPFWebSession.getHealthData()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9167/buggy-version/admin-web.src.java.org.jppf.admin.web.health.GCLink.java", "BodyUseAPI": [], "Fixed commit": "534110ba319e30d597e64e4dc7c32cafb8eff883", "Url": "https://api.github.com/repos/jppf-grid/JPPF", "Date": "2018-05-22T05:45:03Z"},
{"Line": "72=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.yonyou.iuap.baseservice.vo.GenericAssoVo<T>.getList(java.lang.String)=>java.util.List<java.util.Map>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1085/buggy-version/controller.src.main.java.com.yonyou.iuap.baseservice.controller.GenericAssoController.java", "BodyUseAPI": [], "Fixed commit": "ca7055546cf26defa5b4112d71f51b68ab13c6c9", "Url": "https://api.github.com/repos/yonyou-iuap/iuap-pap-baseservice", "Date": "2018-07-12T13:29:34Z"},
{"Line": "72=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "vo.getList(sublistKey).size()=>java.util.List<java.util.Map>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1085/buggy-version/controller.src.main.java.com.yonyou.iuap.baseservice.controller.GenericAssoController.java", "BodyUseAPI": [], "Fixed commit": "ca7055546cf26defa5b4112d71f51b68ab13c6c9", "Url": "https://api.github.com/repos/yonyou-iuap/iuap-pap-baseservice", "Date": "2018-07-12T13:29:34Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jgrapht.alg.intervalgraph.IntervalGraphRecognizer<V, E>.isIntervalGraph(org.jgrapht.alg.intervalgraph.Graph<V, E>)=>org.jgrapht.alg.intervalgraph.IntervalGraphRecognizer<V, E>.recognizeIntervalGraph(org.jgrapht.alg.intervalgraph.Graph<V, E>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8461/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.intervalgraph.IntervalGraphRecognizer.java", "BodyUseAPI": [], "Fixed commit": "e2654f2425cf809a20db6c905fa4ee6f83bea1f2", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-05-15T19:32:32Z"},
{"Line": "178=>184", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.jebtk.graphplot.plotbox.PlotBoxContainer.fireChanged()=>org.jebtk.graphplot.plotbox.PlotBoxContainer.fireChanged()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8254/buggy-version/org.jebtk.graphplot.src.main.java.org.jebtk.graphplot.plotbox.PlotBoxContainer.java", "BodyUseAPI": [], "Fixed commit": "cabf0977653fcdb885a43cafa9866256bc02b1f5", "Url": "https://api.github.com/repos/antonybholmes/jebtk-graphplot", "Date": "2018-10-16T22:27:56Z"},
{"Line": "360=>366", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.jebtk.graphplot.plotbox.PlotBoxContainer.fireChanged()=>org.jebtk.graphplot.plotbox.PlotBoxContainer.fireChanged()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8254/buggy-version/org.jebtk.graphplot.src.main.java.org.jebtk.graphplot.plotbox.PlotBoxContainer.java", "BodyUseAPI": [], "Fixed commit": "cabf0977653fcdb885a43cafa9866256bc02b1f5", "Url": "https://api.github.com/repos/antonybholmes/jebtk-graphplot", "Date": "2018-10-16T22:27:56Z"},
{"Line": "101=>94", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.sap.cloud.sdk.cloudplatform.connectivity.HttpEntityUtil.getResponseBody(com.sap.cloud.s4hana.examples.addressmgr.machine_learning.commands.MlTranslationCommand)=>com.sap.cloud.sdk.cloudplatform.connectivity.HttpEntityUtil.getResponseBody(org.apache.http.HttpResponse)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1301/buggy-version/application.src.main.java.com.sap.cloud.s4hana.examples.addressmgr.machine_learning.commands.MlTranslationCommand.java", "BodyUseAPI": [], "Fixed commit": "1526c51817cf1d0d56e165a8f33f7867c0f015d8", "Url": "https://api.github.com/repos/SAP/cloud-s4-sdk-book", "Date": "2018-07-08T15:56:41Z"},
{"Line": "103=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.sap.cloud.s4hana.examples.addressmgr.machine_learning.commands.MlTranslationCommand.getStatusLine()=>org.apache.http.HttpResponse.getStatusLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1301/buggy-version/application.src.main.java.com.sap.cloud.s4hana.examples.addressmgr.machine_learning.commands.MlTranslationCommand.java", "BodyUseAPI": [], "Fixed commit": "1526c51817cf1d0d56e165a8f33f7867c0f015d8", "Url": "https://api.github.com/repos/SAP/cloud-s4-sdk-book", "Date": "2018-07-08T15:56:41Z"},
{"Line": "187=>194", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "es.pymasde.SIS.user_data.Measurements.setUserId(int)=>es.pymasde.SIS.user_data.Measurements.setUserId(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3465/buggy-version/app.src.main.java.es.pymasde.SIS.Login.java", "BodyUseAPI": [], "Fixed commit": "fc7269e33d0e0a0fdd35aa2adb03d971e37e4e40", "Url": "https://api.github.com/repos/dovi10/SIS", "Date": "2018-06-10T14:18:28Z"},
{"Line": "123=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Iterator<org.eclipse.scout.rt.platform.util.EventListenerList>.remove()=>java.util.Map<java.lang.String, org.eclipse.scout.rt.platform.util.EventListenerList>.remove(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7981/buggy-version/org.eclipse.scout.rt.client.src.main.java.org.eclipse.scout.rt.client.ui.desktop.internal.VirtualDesktop.java", "BodyUseAPI": [], "Fixed commit": "d23d6c487c08aaf2e9233d7073543df134bab09a", "Url": "https://api.github.com/repos/eclipse/scout.rt", "Date": "2018-04-12T08:48:27Z"},
{"Line": "119=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.Object, org.eclipse.scout.rt.platform.util.EventListenerList>.values()=>java.util.Map<java.lang.String, org.eclipse.scout.rt.platform.util.EventListenerList>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7981/buggy-version/org.eclipse.scout.rt.client.src.main.java.org.eclipse.scout.rt.client.ui.desktop.internal.VirtualDesktop.java", "BodyUseAPI": [], "Fixed commit": "d23d6c487c08aaf2e9233d7073543df134bab09a", "Url": "https://api.github.com/repos/eclipse/scout.rt", "Date": "2018-04-12T08:48:27Z"},
{"Line": "137=>137", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "root.join(IdPoolIdEntity_.idPool).get(IdPoolEntity_.name)=>root.join(IdPoolIdEntity_.idPool).get(IdPoolEntity_.id)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2150/buggy-version/src.main.java.edu.emory.cci.aiw.cvrg.eureka.etl.dao.JpaIdPoolIdDao.java", "BodyUseAPI": [], "Fixed commit": "fb34b95664420b9185ede6fdcffb84985ede8416", "Url": "https://api.github.com/repos/eurekaclinical/eurekaclinical-protempa-service", "Date": "2018-08-31T04:57:46Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.table.TableColumn.setCellRenderer(javax.swing.table.TableCellRenderer)=>org.incha.ui.classview.AbstractHierarchicalView.createCellRenderer(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7484/buggy-version/jswingripples.src.main.java.org.incha.ui.classview.AbstractHierarchicalView.java", "BodyUseAPI": [], "Fixed commit": "2ba901f0d867cc102366f33026f3b845419ffa17", "Url": "https://api.github.com/repos/hlibbabii/jswingripples", "Date": "2018-01-21T10:23:08Z"},
{"Line": "120=>120", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.slf4j.Logger.isDebugEnabled()=>org.slf4j.Logger.isTraceEnabled()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4443/buggy-version/camp.camp-brooklyn.src.main.java.org.apache.brooklyn.camp.brooklyn.spi.dsl.BrooklynDslDeferredSupplier.java", "BodyUseAPI": [], "Fixed commit": "33e0eeaaf43e3209cc16b7c5e531c1bccdd1589b", "Url": "https://api.github.com/repos/apache/brooklyn-server", "Date": "2018-02-14T13:56:05Z"},
{"Line": "125=>125", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.slf4j.Logger.debug(java.lang.String)=>org.slf4j.Logger.trace(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4443/buggy-version/camp.camp-brooklyn.src.main.java.org.apache.brooklyn.camp.brooklyn.spi.dsl.BrooklynDslDeferredSupplier.java", "BodyUseAPI": [], "Fixed commit": "33e0eeaaf43e3209cc16b7c5e531c1bccdd1589b", "Url": "https://api.github.com/repos/apache/brooklyn-server", "Date": "2018-02-14T13:56:05Z"},
{"Line": "89=>90", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.congresy.congresy.domain.Comment>.get(int)=>android.widget.ImageButton.setVisibility(View.VISIBLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7131/buggy-version/app.src.main.java.com.congresy.congresy.adapters.CommentListAdapter.java", "BodyUseAPI": [], "Fixed commit": "08b8812ba62c9d071bd3fafd29a72f0f3b14045e", "Url": "https://api.github.com/repos/Congresy/FrontendAndroid", "Date": "2018-09-09T12:15:48Z"},
{"Line": "75=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.mu.util.stream.MoreStreams.mapBySpliterator(java.util.stream.Stream<? extends java.util.stream.Stream<? extends T>>,int,java.util.function.Function<? super java.util.Spliterator<? extends java.util.stream.Stream<? extends T>>, ? extends java.util.Spliterator<T>>)=>java.util.function.Function.identity()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7607/buggy-version/core.src.main.java.com.google.mu.util.stream.MoreStreams.java", "BodyUseAPI": [], "Fixed commit": "f223e3dde7aa3d52308c6ff89e3ad87e274134be", "Url": "https://api.github.com/repos/bhchandra/mug", "Date": "2018-04-03T00:03:00Z"},
{"Line": "184=>184", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "unalcol.descriptors.Descriptors.set(java.lang.Class,unalcol.search.population.PopulationDescriptors<double[]>)=>unalcol.descriptors.Descriptors.set(java.lang.Class,emst.evolution.search.population.PopulationDescriptors<double[]>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8933/buggy-version/VREPControl.src.evolHAEA.HAEAEmP.java", "BodyUseAPI": [], "Fixed commit": "57e53df44d8127dd8fc158afe5cc6db0dfa5c871", "Url": "https://api.github.com/repos/rmorenoga/Evolution", "Date": "2018-05-30T17:06:09Z"},
{"Line": "106=>106", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.apache.commons.math3.linear.RealMatrix.multiply(org.apache.commons.math3.linear.RealMatrix)=>meanW1.subtract(meanW2).multiply(org.apache.commons.math3.linear.RealMatrix)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2960/buggy-version/meander-detectors.src.main.java.uk.ac.bangor.meander.detectors.Hotelling.java", "BodyUseAPI": [], "Fixed commit": "cf032d1946fc59e2319ab5c3e6f34cc44ec60d33", "Url": "https://api.github.com/repos/wfaithfull/meander", "Date": "2018-03-10T12:04:44Z"},
{"Line": "106=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.apache.commons.math3.linear.RealMatrix.transpose()=>org.apache.commons.math3.linear.RealMatrix.subtract(org.apache.commons.math3.linear.RealMatrix)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2960/buggy-version/meander-detectors.src.main.java.uk.ac.bangor.meander.detectors.Hotelling.java", "BodyUseAPI": [], "Fixed commit": "cf032d1946fc59e2319ab5c3e6f34cc44ec60d33", "Url": "https://api.github.com/repos/wfaithfull/meander", "Date": "2018-03-10T12:04:44Z"},
{"Line": "1431=>1431", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Std.out.println(java.lang.String)=>Std.err.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/995/buggy-version/src.org.javarosa.core.model.FormDef.java", "BodyUseAPI": [], "Fixed commit": "4a2aeac1e2f7f17934d3817dc74ba7a356298d30", "Url": "https://api.github.com/repos/ggalmazor/javarosa", "Date": "2018-02-27T09:03:19Z"},
{"Line": "1431=>1431", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Std.out.println(java.lang.String)=>Std.err.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/995/buggy-version/src.org.javarosa.core.model.FormDef.java", "BodyUseAPI": [], "Fixed commit": "4a2aeac1e2f7f17934d3817dc74ba7a356298d30", "Url": "https://api.github.com/repos/ggalmazor/javarosa", "Date": "2018-02-27T09:03:19Z"},
{"Line": "20=>22", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "hr.popic.danijel.javapractice.assignments.StringsAssignments.assignment16()=>hr.popic.danijel.javapractice.assignments.LoopsAssignments.assignment9()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3015/buggy-version/src.hr.popic.danijel.javapractice.Main.java", "BodyUseAPI": [], "Fixed commit": "929e6ab66a15041c0d9fb33e29c741352a6348f8", "Url": "https://api.github.com/repos/dpopic/java-practice", "Date": "2018-03-20T12:36:37Z"},
{"Line": "20=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "hr.popic.danijel.javapractice.assignments.StringsAssignments.assignment16()=>hr.popic.danijel.javapractice.assignments.LoopsAssignments.assignment9()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3015/buggy-version/src.hr.popic.danijel.javapractice.Main.java", "BodyUseAPI": [], "Fixed commit": "929e6ab66a15041c0d9fb33e29c741352a6348f8", "Url": "https://api.github.com/repos/dpopic/java-practice", "Date": "2018-03-20T12:36:37Z"},
{"Line": "76=>75", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Objects.equals(java.lang.Class<?>,java.lang.Class)=>java.lang.Class<?>.getComponentType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6066/buggy-version/app.src.main.java.com.gianlu.aria2app.NetIO.CertUtils.java", "BodyUseAPI": [], "Fixed commit": "51b200d6c527fcf0a70d7fd22139c4ff19e71539", "Url": "https://api.github.com/repos/devgianlu/Aria2App", "Date": "2018-10-10T17:04:17Z"},
{"Line": "76=>75", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Objects.equals(java.lang.Class<?>,java.lang.Class)=>java.lang.Class<?>.isArray()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6066/buggy-version/app.src.main.java.com.gianlu.aria2app.NetIO.CertUtils.java", "BodyUseAPI": [], "Fixed commit": "51b200d6c527fcf0a70d7fd22139c4ff19e71539", "Url": "https://api.github.com/repos/devgianlu/Aria2App", "Date": "2018-10-10T17:04:17Z"},
{"Line": "121=>121", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.text.MessageFormat.format(java.lang.String,category.getRootID(),category.getID())=>java.text.MessageFormat.format(java.lang.String,category.getRootID(),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3770/buggy-version/mycore-mods.src.main.java.org.mycore.mods.classification.MCRMODSClassificationSupport.java", "BodyUseAPI": [], "Fixed commit": "289b995d3b9ed1eb75b49a69eb9ca7a8a43803df", "Url": "https://api.github.com/repos/MyCoRe-Org/mycore", "Date": "2018-01-18T16:15:43Z"},
{"Line": "122=>121", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.mycore.datamodel.classifications2.MCRCategoryID.getID()=>java.text.MessageFormat.format(java.lang.String,category.getRootID(),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3770/buggy-version/mycore-mods.src.main.java.org.mycore.mods.classification.MCRMODSClassificationSupport.java", "BodyUseAPI": [], "Fixed commit": "289b995d3b9ed1eb75b49a69eb9ca7a8a43803df", "Url": "https://api.github.com/repos/MyCoRe-Org/mycore", "Date": "2018-01-18T16:15:43Z"},
{"Line": "2775=>2777", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "p.getIntpText().contains(java.lang.String)=>java.lang.String.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6823/buggy-version/zeppelin-server.src.main.java.org.apache.zeppelin.socket.NotebookServer.java", "BodyUseAPI": [], "Fixed commit": "57c1685e2e0588ac0a1005aba1043e94e996c805", "Url": "https://api.github.com/repos/TinkoffCreditSystems/zeppelin", "Date": "2018-07-27T17:44:54Z"},
{"Line": "77=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Collections.sort(java.util.List<ch.scrooge.Transaction>,java.util.Comparator<ch.scrooge.Transaction>)=>java.util.List<ch.scrooge.Transaction>.sort(java.util.Comparator<ch.scrooge.Transaction>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/600/buggy-version/ScroogeCoin.src.ch.scrooge.MaxFeeTxHandler.java", "BodyUseAPI": [], "Fixed commit": "d214dc320b33fbbe1cd72249e1e987ad874bae88", "Url": "https://api.github.com/repos/tararanaki/Coursera", "Date": "2018-01-17T11:31:50Z"},
{"Line": "261=>262", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.length()=>java.lang.String.codePointCount(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5803/buggy-version/main.plugins.org.talend.dataquality.src.org.talend.dataquality.indicators.impl.LengthIndicatorImpl.java", "BodyUseAPI": [], "Fixed commit": "0c5d992d6fb33e8b3b2d93e742f0e1ced9da4686", "Url": "https://api.github.com/repos/Talend/tdq-studio-se", "Date": "2018-04-23T03:42:46Z"},
{"Line": "227=>228", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Collection<java.util.List<java.lang.String>>.contains(java.lang.String)=>java.util.List<java.lang.String>.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5130/buggy-version/corelib-search.src.main.java.eu.europeana.corelib.search.impl.WebMetaInfo.java", "BodyUseAPI": [], "Fixed commit": "dcd9e78e823c90714355c3538dfa89fbf0ebd7dd", "Url": "https://api.github.com/repos/europeana/corelib", "Date": "2018-03-28T07:39:51Z"},
{"Line": "228=>229", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Collection<java.util.List<java.lang.String>>.contains(java.lang.String)=>java.util.List<java.lang.String>.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5130/buggy-version/corelib-search.src.main.java.eu.europeana.corelib.search.impl.WebMetaInfo.java", "BodyUseAPI": [], "Fixed commit": "dcd9e78e823c90714355c3538dfa89fbf0ebd7dd", "Url": "https://api.github.com/repos/europeana/corelib", "Date": "2018-03-28T07:39:51Z"},
{"Line": "228=>229", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, java.util.List<java.lang.String>>.values()=>java.util.List<java.lang.String>.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5130/buggy-version/corelib-search.src.main.java.eu.europeana.corelib.search.impl.WebMetaInfo.java", "BodyUseAPI": [], "Fixed commit": "dcd9e78e823c90714355c3538dfa89fbf0ebd7dd", "Url": "https://api.github.com/repos/europeana/corelib", "Date": "2018-03-28T07:39:51Z"},
{"Line": "34=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "edu.ucdavis.dss.ipa.services.ScheduleService.findById(long)=>edu.ucdavis.dss.ipa.services.ScheduleService.findByWorkgroupIdAndYear(long,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/154/buggy-version/src.main.java.edu.ucdavis.dss.ipa.api.entities.InstructorController.java", "BodyUseAPI": [], "Fixed commit": "0b32c49d958641ea641c92b1806d960210174816", "Url": "https://api.github.com/repos/ucdavis/ipa-web", "Date": "2018-05-09T23:51:33Z"},
{"Line": "45=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "edu.ucdavis.dss.ipa.services.InstructorService.findAssignedByScheduleId(long)=>edu.ucdavis.dss.ipa.services.InstructorService.findAssignedByScheduleId(schedule.getId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/154/buggy-version/src.main.java.edu.ucdavis.dss.ipa.api.entities.InstructorController.java", "BodyUseAPI": [], "Fixed commit": "0b32c49d958641ea641c92b1806d960210174816", "Url": "https://api.github.com/repos/ucdavis/ipa-web", "Date": "2018-05-09T23:51:33Z"},
{"Line": "29=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "edu.ucdavis.dss.ipa.services.ScheduleService.findById(long)=>edu.ucdavis.dss.ipa.services.ScheduleService.findByWorkgroupIdAndYear(long,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/154/buggy-version/src.main.java.edu.ucdavis.dss.ipa.api.entities.CourseController.java", "BodyUseAPI": [], "Fixed commit": "0b32c49d958641ea641c92b1806d960210174816", "Url": "https://api.github.com/repos/ucdavis/ipa-web", "Date": "2018-05-09T23:51:33Z"},
{"Line": "29=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "edu.ucdavis.dss.ipa.services.ScheduleService.findById(long)=>edu.ucdavis.dss.ipa.services.ScheduleService.findByWorkgroupIdAndYear(long,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/154/buggy-version/src.main.java.edu.ucdavis.dss.ipa.api.entities.CourseController.java", "BodyUseAPI": [], "Fixed commit": "0b32c49d958641ea641c92b1806d960210174816", "Url": "https://api.github.com/repos/ucdavis/ipa-web", "Date": "2018-05-09T23:51:33Z"},
{"Line": "29=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "edu.ucdavis.dss.ipa.services.ScheduleService.findById(long)=>edu.ucdavis.dss.ipa.services.ScheduleService.findByWorkgroupIdAndYear(long,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/154/buggy-version/src.main.java.edu.ucdavis.dss.ipa.api.entities.TeachingAssignmentController.java", "BodyUseAPI": [], "Fixed commit": "0b32c49d958641ea641c92b1806d960210174816", "Url": "https://api.github.com/repos/ucdavis/ipa-web", "Date": "2018-05-09T23:51:33Z"},
{"Line": "31=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "edu.ucdavis.dss.ipa.services.ScheduleService.findById(long)=>edu.ucdavis.dss.ipa.services.ScheduleService.findByWorkgroupIdAndYear(long,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/154/buggy-version/src.main.java.edu.ucdavis.dss.ipa.api.entities.SectionGroupController.java", "BodyUseAPI": [], "Fixed commit": "0b32c49d958641ea641c92b1806d960210174816", "Url": "https://api.github.com/repos/ucdavis/ipa-web", "Date": "2018-05-09T23:51:33Z"},
{"Line": "40=>41", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "edu.ucdavis.dss.ipa.services.SectionGroupService.findByScheduleId(long)=>edu.ucdavis.dss.ipa.services.SectionGroupService.findByScheduleId(schedule.getId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/154/buggy-version/src.main.java.edu.ucdavis.dss.ipa.api.entities.SectionGroupController.java", "BodyUseAPI": [], "Fixed commit": "0b32c49d958641ea641c92b1806d960210174816", "Url": "https://api.github.com/repos/ucdavis/ipa-web", "Date": "2018-05-09T23:51:33Z"},
{"Line": "255=>257", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.jenkinsci.plugins.casc.Configurator.describe(jenkins.model.Jenkins.getInstance().proxy)=>org.jenkinsci.plugins.casc.Configurator.describe(hudson.ProxyConfiguration)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8212/buggy-version/src.main.java.org.jenkinsci.plugins.casc.plugins.PluginManagerConfigurator.java", "BodyUseAPI": [], "Fixed commit": "6a75720fe3f2dedf0753ccd1c9a7405b400e13dd", "Url": "https://api.github.com/repos/voyages-sncf-technologies/configuration-as-code-plugin", "Date": "2018-06-05T11:09:34Z"},
{"Line": "61=>69", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ch.epfl.sweng.swenggolf.database.Database.getInstance().write((\"/users/\" + (user.getUserId())),java.lang.String,java.lang.String,ch.epfl.sweng.swenggolf.database.CompletionListener)=>ch.epfl.sweng.swenggolf.database.Database.getInstance().write((\"/users/\" + (user.getUserId())),java.lang.String,java.lang.String,ch.epfl.sweng.swenggolf.database.CompletionListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8616/buggy-version/app.src.main.java.ch.epfl.sweng.swenggolf.profile.EditProfileActivity.java", "BodyUseAPI": [], "Fixed commit": "78ee1d9340ed49ea8c5aefd0c28e0791be176e2a", "Url": "https://api.github.com/repos/SwengGolfTeam/Sweng_Golf", "Date": "2018-10-17T09:05:28Z"},
{"Line": "69=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "tech.tablesaw.api.NumberColumn.append(tech.tablesaw.columns.datetimes.MISSING_VALUE)=>tech.tablesaw.api.NumberColumn.append(NumberColumn.MISSING_VALUE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3571/buggy-version/core.src.main.java.tech.tablesaw.columns.datetimes.DateTimeMapFunctions.java", "BodyUseAPI": [], "Fixed commit": "65b14b9d9344904a75f4fb8f0555ce24b47de6bc", "Url": "https://api.github.com/repos/jtablesaw/tablesaw", "Date": "2018-06-18T20:05:03Z"},
{"Line": "117=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.FileOutputStream.write(byte[])=>java.io.FileOutputStream.write(byte[],int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4503/buggy-version/src.Connection.java", "BodyUseAPI": [], "Fixed commit": "92557f8c64c0498499bec545d344e5d84554aff5", "Url": "https://api.github.com/repos/mspringsits/spucky", "Date": "2018-07-13T08:39:10Z"},
{"Line": "414=>414", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Integer.valueOf(java.lang.String)=>java.lang.Integer.parseInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1259/buggy-version/plugins.de.opendiabetes.vault.plugin.importer.mysugr.MySugrCSVValidator.java", "BodyUseAPI": [], "Fixed commit": "b72d44eb45c9bad00e048e5780592ce5edf91fd0", "Url": "https://api.github.com/repos/lucasbuschlinger/BachelorPraktikum", "Date": "2018-01-24T18:32:11Z"},
{"Line": "417=>417", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Integer.valueOf(java.lang.String)=>java.lang.Integer.parseInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1259/buggy-version/plugins.de.opendiabetes.vault.plugin.importer.mysugr.MySugrCSVValidator.java", "BodyUseAPI": [], "Fixed commit": "b72d44eb45c9bad00e048e5780592ce5edf91fd0", "Url": "https://api.github.com/repos/lucasbuschlinger/BachelorPraktikum", "Date": "2018-01-24T18:32:11Z"},
{"Line": "420=>420", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Integer.valueOf(java.lang.String)=>java.lang.Integer.parseInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1259/buggy-version/plugins.de.opendiabetes.vault.plugin.importer.mysugr.MySugrCSVValidator.java", "BodyUseAPI": [], "Fixed commit": "b72d44eb45c9bad00e048e5780592ce5edf91fd0", "Url": "https://api.github.com/repos/lucasbuschlinger/BachelorPraktikum", "Date": "2018-01-24T18:32:11Z"},
{"Line": "411=>411", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Integer.valueOf(java.lang.String)=>java.lang.Integer.parseInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1259/buggy-version/plugins.de.opendiabetes.vault.plugin.importer.mysugr.MySugrCSVValidator.java", "BodyUseAPI": [], "Fixed commit": "b72d44eb45c9bad00e048e5780592ce5edf91fd0", "Url": "https://api.github.com/repos/lucasbuschlinger/BachelorPraktikum", "Date": "2018-01-24T18:32:11Z"},
{"Line": "264=>264", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<bka.uml.run.StateNode<A>, bka.uml.run.StateMachine<E, G, A>.Join>.notifyAll()=>bka.uml.run.StateMachine<E, G, A>.Join.notifyAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2352/buggy-version/src.bka.uml.run.StateMachine.java", "BodyUseAPI": [], "Fixed commit": "c322554ef0cb4faef0c38b4768dde69b99c7dd8c", "Url": "https://api.github.com/repos/BKampers/UMLSwing", "Date": "2018-09-22T15:34:44Z"},
{"Line": "268=>268", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<bka.uml.run.StateNode<A>, bka.uml.run.StateMachine<E, G, A>.Join>.wait()=>bka.uml.run.StateMachine<E, G, A>.Join.wait()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2352/buggy-version/src.bka.uml.run.StateMachine.java", "BodyUseAPI": [], "Fixed commit": "c322554ef0cb4faef0c38b4768dde69b99c7dd8c", "Url": "https://api.github.com/repos/BKampers/UMLSwing", "Date": "2018-09-22T15:34:44Z"},
{"Line": "223=>223", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "p.getPlayerCannon().setCannonAngle(int)=>p.getPlayerCannon().setCannonAngle(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6918/buggy-version/Tykkipeli.src.main.java.tykkipeli.logic.GameLogic.java", "BodyUseAPI": [], "Fixed commit": "b6d5a95d68ee3ed2e9206c1c3f7bcbcd65f2e5dc", "Url": "https://api.github.com/repos/oskarioskari/otm-harjoitustyo", "Date": "2018-05-09T13:26:16Z"},
{"Line": "39=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.gatech.hackgt.budslist.models.UserManager.getUserByName(java.lang.String)=>edu.gatech.hackgt.budslist.models.UserManager.getUserByEmail(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1270/buggy-version/app.src.main.java.edu.gatech.hackgt.budslist.models.Model.java", "BodyUseAPI": [], "Fixed commit": "67360779a738ee4078593682baa736eee0b45e07", "Url": "https://api.github.com/repos/cking90/BudsList", "Date": "2018-10-20T17:40:58Z"},
{"Line": "17=>15", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "event.EventEmitter.setImmediate(() -> subscriber.notify(event))=>observer.Subscriber<? super E>.notify(E)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2216/buggy-version/src.main.java.event.EventEmitter.java", "BodyUseAPI": [], "Fixed commit": "1eb040d05509399c9cd7d747c31e9aaa7cc05f44", "Url": "https://api.github.com/repos/vitaminac/scheduler", "Date": "2018-08-03T19:43:17Z"},
{"Line": "128=>128", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.trim()=>java.lang.String.replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2434/buggy-version/PES_Editor.src.editor.PSDStatPaste.java", "BodyUseAPI": [], "Fixed commit": "532ebb66afab448bde1f3d4ef84e69f8e54ba18c", "Url": "https://api.github.com/repos/lazanet/PES-Editor-6", "Date": "2018-01-02T17:42:49Z"},
{"Line": "128=>128", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.toUpperCase()=>java.lang.String.trim()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2434/buggy-version/PES_Editor.src.editor.PSDStatPaste.java", "BodyUseAPI": [], "Fixed commit": "532ebb66afab448bde1f3d4ef84e69f8e54ba18c", "Url": "https://api.github.com/repos/lazanet/PES-Editor-6", "Date": "2018-01-02T17:42:49Z"},
{"Line": "283=>283", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.trim()=>java.lang.String.replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2434/buggy-version/PES_Editor.src.editor.PSDStatPaste.java", "BodyUseAPI": [], "Fixed commit": "532ebb66afab448bde1f3d4ef84e69f8e54ba18c", "Url": "https://api.github.com/repos/lazanet/PES-Editor-6", "Date": "2018-01-02T17:42:49Z"},
{"Line": "75=>75", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.lang.Exception.getMessage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1577/buggy-version/src.main.java.org.scm4j.installer.CLI.java", "BodyUseAPI": [], "Fixed commit": "ae785b7cf09aa0215d9d33cf1601330d16ff00d3", "Url": "https://api.github.com/repos/scm4j/scm4j-installer", "Date": "2018-01-30T15:39:57Z"},
{"Line": "205=>205", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.imageio.ImageIO.read(java.net.URL)=>javax.imageio.ImageIO.read(java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/498/buggy-version/src.main.java.org.magic.services.MTGControler.java", "BodyUseAPI": [], "Fixed commit": "c8d431bca351dffc4426b17cf87089a69ebc4717", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-04-23T19:46:27Z"},
{"Line": "259=>255", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.android.vending.expansion.zipfile.APKExpansionSupport.getAPKExpansionZipFile(com.facebook.react.uimanager.ThemedReactContext,int,int)=>ir.android.vending.expansion.zipfile.APKExpansionSupport.getAPKExpansionZipFile(com.facebook.react.uimanager.ThemedReactContext,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2598/buggy-version/android.src.main.java.ir.tapsell.react.ReactVideoView.java", "BodyUseAPI": [], "Fixed commit": "508645bbef6a28ab66b97a235ec23a7381bf8fac", "Url": "https://api.github.com/repos/tapselladnet/react-native-video", "Date": "2018-05-28T04:11:12Z"},
{"Line": "260=>257", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.android.vending.expansion.zipfile.ZipResourceFile.getAssetFileDescriptor(java.lang.String)=>ir.android.vending.expansion.zipfile.ZipResourceFile.getAssetFileDescriptor(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2598/buggy-version/android.src.main.java.ir.tapsell.react.ReactVideoView.java", "BodyUseAPI": [], "Fixed commit": "508645bbef6a28ab66b97a235ec23a7381bf8fac", "Url": "https://api.github.com/repos/tapselladnet/react-native-video", "Date": "2018-05-28T04:11:12Z"},
{"Line": "259=>255", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.android.vending.expansion.zipfile.APKExpansionSupport.getAPKExpansionZipFile(com.facebook.react.uimanager.ThemedReactContext,int,int)=>ir.android.vending.expansion.zipfile.APKExpansionSupport.getAPKExpansionZipFile(com.facebook.react.uimanager.ThemedReactContext,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2598/buggy-version/android.src.main.java.ir.tapsell.react.ReactVideoView.java", "BodyUseAPI": [], "Fixed commit": "508645bbef6a28ab66b97a235ec23a7381bf8fac", "Url": "https://api.github.com/repos/tapselladnet/react-native-video", "Date": "2018-05-28T04:11:12Z"},
{"Line": "135=>135", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.nuls.kernel.model.Result.getFailed(AccountErrorCode.FAILED,java.lang.String)=>io.nuls.kernel.model.Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5136/buggy-version/account-module.base.account-base.src.main.java.io.nuls.account.service.AccountBaseService.java", "BodyUseAPI": [], "Fixed commit": "8e62dd52f75aa2fde66e503bdb5882b893338c97", "Url": "https://api.github.com/repos/ruislan/nuls", "Date": "2018-05-25T08:34:10Z"},
{"Line": "191=>207", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "myRef.child(\"mycart\").addListenerForSingleValueEvent(com.google.firebase.database.ValueEventListener)=>myRef.child(\"mycart\").addListenerForSingleValueEvent(com.google.firebase.database.ValueEventListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8964/buggy-version/app.src.main.java.malcolmmaima.dishi.View.Adapters.NduthiAdapter.java", "BodyUseAPI": [], "Fixed commit": "3c76165cd258d13904fcff0990ba9100afe4c2d1", "Url": "https://api.github.com/repos/malcolmmaima/Dishi", "Date": "2018-07-04T11:14:58Z"},
{"Line": "172=>187", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new android.app.AlertDialog.Builder(v.getContext()).setTitle((\"Select \" + (nduthiNearMe.name))).setCancelable(false).setMessage(((\"Do you want \" + (nduthiNearMe.name)) + \" to fulfil your order?\")).setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>new android.app.AlertDialog.Builder(v.getContext()).setTitle((\"Select \" + (nduthiNearMe.name))).setCancelable(false).setMessage(((\"Do you want \" + (nduthiNearMe.name)) + \" to fulfil your order?\")).setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8964/buggy-version/app.src.main.java.malcolmmaima.dishi.View.Adapters.NduthiAdapter.java", "BodyUseAPI": [], "Fixed commit": "3c76165cd258d13904fcff0990ba9100afe4c2d1", "Url": "https://api.github.com/repos/malcolmmaima/Dishi", "Date": "2018-07-04T11:14:58Z"},
{"Line": "200=>216", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "nduthiRequests.child(key).setValue(myCartDetails).addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener<java.lang.Void>)=>nduthiRequests.child(key).setValue(myCartDetails).addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener<java.lang.Void>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8964/buggy-version/app.src.main.java.malcolmmaima.dishi.View.Adapters.NduthiAdapter.java", "BodyUseAPI": [], "Fixed commit": "3c76165cd258d13904fcff0990ba9100afe4c2d1", "Url": "https://api.github.com/repos/malcolmmaima/Dishi", "Date": "2018-07-04T11:14:58Z"},
{"Line": "160=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "myRef.child(\"name\").addListenerForSingleValueEvent(com.google.firebase.database.ValueEventListener)=>myRef.child(\"name\").addListenerForSingleValueEvent(com.google.firebase.database.ValueEventListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8964/buggy-version/app.src.main.java.malcolmmaima.dishi.View.Adapters.NduthiAdapter.java", "BodyUseAPI": [], "Fixed commit": "3c76165cd258d13904fcff0990ba9100afe4c2d1", "Url": "https://api.github.com/repos/malcolmmaima/Dishi", "Date": "2018-07-04T11:14:58Z"},
{"Line": "172=>187", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new android.app.AlertDialog.Builder(v.getContext()).setTitle((\"Select \" + (nduthiNearMe.name))).setCancelable(false).setMessage(((\"Do you want \" + (nduthiNearMe.name)) + \" to fulfil your order?\")).setPositiveButton(\"Yes\", new android.content.DialogInterface.OnClickListener() { public void onClick(android.content.DialogInterface dialog, int whichButton) { final java.lang.String key = requestRideRef.push().getKey(); malcolmmaima.dishi.Model.RequestNduthi requestNduthi = new malcolmmaima.dishi.Model.RequestNduthi(); requestNduthi.status = \"pending\"; requestNduthi.name = myName[0]; requestNduthi.phone = myPhone; requestRideRef.child(key).setValue(requestNduthi).addOnSuccessListener(new com.google.android.gms.tasks.OnSuccessListener<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void aVoid) { myRef.child(\"mycart\").addListenerForSingleValueEvent(new com.google.firebase.database.ValueEventListener() { @java.lang.Override public void onDataChange(@android.support.annotation.NonNull com.google.firebase.database.DataSnapshot dataSnapshot) { for (com.google.firebase.database.DataSnapshot cart : dataSnapshot.getChildren()) { final malcolmmaima.dishi.Model.MyCartDetails myCartDetails = cart.getValue(malcolmmaima.dishi.Model.MyCartDetails.class); java.lang.String key = nduthiRequests.push().getKey(); nduthiRequests.child(key).setValue(myCartDetails).addOnSuccessListener(new com.google.android.gms.tasks.OnSuccessListener<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void aVoid) { android.widget.Toast.makeText(context, ((\"Request sent to \" + (nduthiNearMe.name)) + \"! wait for confirmation or call nduthi!\"), Toast.LENGTH_SHORT).show(); holder.selectBtn.setEnabled(false); holder.selectBtn.setText(\"Sent\"); } }); } } @java.lang.Override public void onCancelled(@android.support.annotation.NonNull com.google.firebase.database.DatabaseError databaseError) { } }); } }); } }).setNegativeButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>new android.app.AlertDialog.Builder(v.getContext()).setTitle((\"Select \" + (nduthiNearMe.name))).setCancelable(false).setMessage(((\"Do you want \" + (nduthiNearMe.name)) + \" to fulfil your order?\")).setPositiveButton(\"Yes\", new android.content.DialogInterface.OnClickListener() { public void onClick(android.content.DialogInterface dialog, int whichButton) { final java.lang.String key = requestRideRef.push().getKey(); malcolmmaima.dishi.Model.RequestNduthi requestNduthi = new malcolmmaima.dishi.Model.RequestNduthi(); requestNduthi.status = \"pending\"; requestNduthi.name = myName[0]; requestNduthi.phone = myPhone; requestNduthi.profilepic = profilepic[0]; requestRideRef.child(key).setValue(requestNduthi).addOnSuccessListener(new com.google.android.gms.tasks.OnSuccessListener<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void aVoid) { myRef.child(\"mycart\").addListenerForSingleValueEvent(new com.google.firebase.database.ValueEventListener() { @java.lang.Override public void onDataChange(@android.support.annotation.NonNull com.google.firebase.database.DataSnapshot dataSnapshot) { for (com.google.firebase.database.DataSnapshot cart : dataSnapshot.getChildren()) { final malcolmmaima.dishi.Model.MyCartDetails myCartDetails = cart.getValue(malcolmmaima.dishi.Model.MyCartDetails.class); java.lang.String key = nduthiRequests.push().getKey(); nduthiRequests.child(key).setValue(myCartDetails).addOnSuccessListener(new com.google.android.gms.tasks.OnSuccessListener<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void aVoid) { android.widget.Toast.makeText(context, ((\"Request sent to \" + (nduthiNearMe.name)) + \"! wait for confirmation or call nduthi!\"), Toast.LENGTH_SHORT).show(); holder.selectBtn.setEnabled(false); holder.selectBtn.setText(\"Sent\"); } }); } } @java.lang.Override public void onCancelled(@android.support.annotation.NonNull com.google.firebase.database.DatabaseError databaseError) { } }); } }); } }).setNegativeButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8964/buggy-version/app.src.main.java.malcolmmaima.dishi.View.Adapters.NduthiAdapter.java", "BodyUseAPI": [], "Fixed commit": "3c76165cd258d13904fcff0990ba9100afe4c2d1", "Url": "https://api.github.com/repos/malcolmmaima/Dishi", "Date": "2018-07-04T11:14:58Z"},
{"Line": "187=>203", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "requestRideRef.child(key).setValue(requestNduthi).addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener<java.lang.Void>)=>requestRideRef.child(key).setValue(requestNduthi).addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener<java.lang.Void>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8964/buggy-version/app.src.main.java.malcolmmaima.dishi.View.Adapters.NduthiAdapter.java", "BodyUseAPI": [], "Fixed commit": "3c76165cd258d13904fcff0990ba9100afe4c2d1", "Url": "https://api.github.com/repos/malcolmmaima/Dishi", "Date": "2018-07-04T11:14:58Z"},
{"Line": "187=>189", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "sango.spring.service.DeviceService.findByMacAddr(device.getMacAddr())=>sango.spring.service.DeviceService.findByMacAddr(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6404/buggy-version/src.main.java.sango.spring.controller.DeviceIdContoller.java", "BodyUseAPI": [], "Fixed commit": "6bd77ac2b70ebe231e2a671d962ed197d2ad74fe", "Url": "https://api.github.com/repos/rick032/sango", "Date": "2018-05-26T00:03:35Z"},
{"Line": "187=>189", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "sango.spring.model.Device.getMacAddr()=>sango.spring.service.DeviceService.findByMacAddr(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6404/buggy-version/src.main.java.sango.spring.controller.DeviceIdContoller.java", "BodyUseAPI": [], "Fixed commit": "6bd77ac2b70ebe231e2a671d962ed197d2ad74fe", "Url": "https://api.github.com/repos/rick032/sango", "Date": "2018-05-26T00:03:35Z"},
{"Line": "426=>426", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "startNode.getStepOverPrevious().getLineNumber()=>startNode.getStepOverPrevious().getBreakPoint()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2482/buggy-version/tregression.src.main.tregression.empiricalstudy.Simulator.java", "BodyUseAPI": [], "Fixed commit": "bd89cb947a9a28b6af9b878eb5255b8f97419cff", "Url": "https://api.github.com/repos/llmhyy/tregression", "Date": "2018-02-16T14:33:45Z"},
{"Line": "211=>219", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.uark.uarkregisterapp.models.api.ShoppingCart.add(new edu.uark.uarkregisterapp.models.api.Product().loadFromJson(jsonItems.getJSONObject(i)))=>edu.uark.uarkregisterapp.models.api.ShoppingCart.add(new edu.uark.uarkregisterapp.models.api.Product().loadFromJson(jsonItems.getJSONObject(i)),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4884/buggy-version/app.src.main.java.edu.uark.uarkregisterapp.models.api.ShoppingCart.java", "BodyUseAPI": [], "Fixed commit": "6f001536436e6102468160114dfcc10d54f7a099", "Url": "https://api.github.com/repos/getoffmylawncsce3513/RegisterClient", "Date": "2018-05-01T19:06:18Z"},
{"Line": "106=>107", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "1.startActivity(android.content.Intent)=>android.content.Intent.addFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5396/buggy-version/app.src.main.java.example.imrozquazi.cover_flow.Signup.java", "BodyUseAPI": [], "Fixed commit": "16a2bb0f0d440155e5569398a6ab6b0f3f0ef496", "Url": "https://api.github.com/repos/Imrozquazi/Agnitio", "Date": "2018-02-18T19:44:51Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN,org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(boolean)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON,org.ballerinalang.plugins.idea.BallerinaTypes.LT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.GT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT,org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.INDEX)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.GT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(boolean)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP,org.ballerinalang.plugins.idea.BallerinaTypes.LT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL,org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(boolean)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT,org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT,org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.FIELD)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN,org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML,org.ballerinalang.plugins.idea.BallerinaTypes.LT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.GT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.GT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN,org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL,org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML,org.ballerinalang.plugins.idea.BallerinaTypes.LT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP,org.ballerinalang.plugins.idea.BallerinaTypes.LT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN,org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT,org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT,org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN,org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN,org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN,org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSFORMER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSFORMER_INVOCATION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSFORMER)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.GT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML,org.ballerinalang.plugins.idea.BallerinaTypes.LT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML,org.ballerinalang.plugins.idea.BallerinaTypes.LT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSFORMER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSFORMER_INVOCATION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.ACTION_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL,org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_REFERENCE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTRIBUTE_VALUE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_LITERAL).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACH).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.INDEX)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ACTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FAILED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONNECTOR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CREATE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.SOURCE_NOTATION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9911/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "4416ee071cd0bb797419b54ee0632d39b1fa399b", "Url": "https://api.github.com/repos/chintana/ballerina", "Date": "2018-03-01T09:48:50Z"},
{"Line": "420=>425", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "project.cs495.splitit.models.UserReceipt.setTax(((receipt.getTax()) * percentOfSubtotal))=>project.cs495.splitit.models.UserReceipt.setTax(float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3359/buggy-version/SplitIt.app.src.main.java.project.cs495.splitit.ReceiptViewActivity.java", "BodyUseAPI": [], "Fixed commit": "597daac998a961257670fcffe7fc74a049880b52", "Url": "https://api.github.com/repos/bpsokol/split-it", "Date": "2018-04-25T00:12:28Z"},
{"Line": "12=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[static] howManyGames(int,int,int,int)=>[static] howManyGames(int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/749/buggy-version/Algorithms.Implementation.HalloweenSale.java", "BodyUseAPI": [], "Fixed commit": "939ff32e0dab8fbd0ea4500713699527376ca422", "Url": "https://api.github.com/repos/rowantran/HackerRank", "Date": "2018-06-18T23:18:27Z"},
{"Line": "59=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "drive.fitness.controller.LiftingHistory.getDate()=>drive.fitness.controller.LiftingHistory.getUserId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6077/buggy-version/Drive_API.src.main.java.drive.fitness.controller.LiftingHistoryController.java", "BodyUseAPI": [], "Fixed commit": "e90486f432d8f3e0c3fe901887b9b1367e53134e", "Url": "https://api.github.com/repos/blakepastra/driveapi", "Date": "2018-05-30T00:31:45Z"},
{"Line": "96=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lv.ctco.javaschool.auth.entity.domain.User.getName()=>lv.ctco.javaschool.app.entity.domain.Trip.getPassengers()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9465/buggy-version/src.main.java.lv.ctco.javaschool.app.boundary.TripApi.java", "BodyUseAPI": [], "Fixed commit": "6be4ee1d904272091171004ddb6feb885b0ff010", "Url": "https://api.github.com/repos/ctco-dev/carpooling-2018", "Date": "2018-09-05T13:57:26Z"},
{"Line": "42=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, java.lang.Object>.put(java.lang.String,java.lang.String)=>java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5772/buggy-version/src.main.java.com.hu.tran.xcomm.demo.Application.java", "BodyUseAPI": [], "Fixed commit": "acf353f084aa88fa12478d1180de06a8ce11b9c3", "Url": "https://api.github.com/repos/huPATHotian9527/xcomm", "Date": "2018-06-28T03:35:49Z"},
{"Line": "1674=>1675", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.wso2.carbon.governance.api.generic.GenericArtifactManager.findGenericArtifacts(org.wso2.carbon.governance.api.generic.GenericArtifactFilter)=>java.util.Map<java.lang.String, java.util.List<java.lang.String>>.put(APIConstants.API_OVERVIEW_BUSS_OWNER,java.util.ArrayList<java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/168/buggy-version/components.apimgt.org.wso2.carbon.apimgt.impl.src.main.java.org.wso2.carbon.apimgt.impl.APIConsumerImpl.java", "BodyUseAPI": [], "Fixed commit": "92a16fda010b8fbe903bc85219f3e8b26374746c", "Url": "https://api.github.com/repos/dinusha92/carbon-apimgt", "Date": "2018-04-25T08:33:10Z"},
{"Line": "127=>126", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(java.lang.String)=>com.tmw.etl.etlapp.db.repositories.GameRepository.findById(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/385/buggy-version/src.main.java.com.tmw.etl.etlapp.EtlController.java", "BodyUseAPI": [], "Fixed commit": "e65cd3815e92569072217d6650f5c1cd222bf4be", "Url": "https://api.github.com/repos/brq0/etl-app", "Date": "2018-10-29T22:03:32Z"},
{"Line": "127=>126", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.tmw.etl.etlapp.db.repositories.GameRepository.findById(int)=>com.tmw.etl.etlapp.db.repositories.GameRepository.findById(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/385/buggy-version/src.main.java.com.tmw.etl.etlapp.EtlController.java", "BodyUseAPI": [], "Fixed commit": "e65cd3815e92569072217d6650f5c1cd222bf4be", "Url": "https://api.github.com/repos/brq0/etl-app", "Date": "2018-10-29T22:03:32Z"},
{"Line": "145=>148", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "iterator.next().getBasicRemote().sendText(java.lang.String)=>iterator.next().getBasicRemote().sendText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4764/buggy-version/Dat076.TicTacToe.src.java.websocket.GameServerEndpoint.java", "BodyUseAPI": [], "Fixed commit": "0907e3fe9a128898240164fbb0de8a22b70273f4", "Url": "https://api.github.com/repos/Cykelpojken/DAT076", "Date": "2018-03-06T16:26:18Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.epam.dlab.backendapi.core.commands.PythonBackupCommand(configuration.getBackupScriptPath()).withConfig(dto.getConfigFiles()).withJars(dto.getJars()).withKeys(dto.getKeys()).withDBBackup(dto.isDatabaseBackup()).withLogsBackup(dto.isLogsBackup()).withResponsePath(configuration.getBackupDirectory()).withRequestId(dto.getId()).withSystemUser().toCMD()=>new com.epam.dlab.backendapi.core.commands.PythonBackupCommand(configuration.getBackupScriptPath()).withConfig(dto.getConfigFiles()).withJars(dto.getJars()).withKeys(dto.getKeys()).withDBBackup(dto.isDatabaseBackup()).withLogsBackup(dto.isLogsBackup()).withResponsePath(configuration.getBackupDirectory()).withRequestId(dto.getId()).withSystemUser().withCertificates(dto.getCertificates())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1271/buggy-version/services.provisioning-service.src.main.java.com.epam.dlab.backendapi.resources.BackupResource.java", "BodyUseAPI": [], "Fixed commit": "ed633b00c32b2a919db3739235240d3d65f4b239", "Url": "https://api.github.com/repos/epam/DLab", "Date": "2018-02-16T09:23:35Z"},
{"Line": "91=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.codehaus.jettison.json.JSONObject.put(java.lang.String,com.dna_analyzer.Utils.MathUtils.roundTwoDecimals((second / first)))=>java.util.Map.Entry<java.lang.String, java.lang.Long>.getKey()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3656/buggy-version/src.main.java.com.dna_analyzer.services.DNAMagnetoBussiness.java", "BodyUseAPI": [], "Fixed commit": "22952195888cadd834b8ffbdfe81b35afe7e09dc", "Url": "https://api.github.com/repos/robertoavilla/DNA-Analyzer", "Date": "2018-06-08T01:45:01Z"},
{"Line": "892=>892", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.springframework.ui.Model.addAttribute(java.lang.String,double)=>org.springframework.ui.Model.addAttribute(java.lang.String,java.math.BigDecimal)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4190/buggy-version/omod.src.main.java.org.openmrs.module.inventory.web.controller.global.AjaxController.java", "BodyUseAPI": [], "Fixed commit": "fd870236a5c861a250af1942051660359a8082e1", "Url": "https://api.github.com/repos/hispindia/his-inventory", "Date": "2018-01-03T06:42:07Z"},
{"Line": "23=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.lateroad.buber.command.CommandMap.getCommandsMap(java.lang.String)=>com.lateroad.buber.command.CommandMap.getCommand(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6029/buggy-version/src.java.com.lateroad.buber.command.CommandManager.java", "BodyUseAPI": [], "Fixed commit": "060c54aa61547e3f780b382a63e1b1d7cdc4f4e0", "Url": "https://api.github.com/repos/LateRoad/Buber", "Date": "2018-03-09T16:57:54Z"},
{"Line": "88=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "viewHolder.listView.setVisibility(View.VISIBLE)=>viewHolder.no_courses.setVisibility(View.GONE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/877/buggy-version/OpenEdXMobile.src.main.java.org.edx.mobile.view.dialog.NativeFindCoursesFragment.java", "BodyUseAPI": [], "Fixed commit": "aa15d80d1fb2de8be7f86c3559458f6c0f9c4dbb", "Url": "https://api.github.com/repos/proversity-org/edx-app-android", "Date": "2018-07-26T14:07:29Z"},
{"Line": "80=>80", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cz.gattserver.grass3.model.util.QuerydslUtil.transformOffsetLimit(int,int)=>cz.gattserver.grass3.model.util.QuerydslUtil.transformOffsetLimit(int,int,<nulltype>,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5111/buggy-version/modules.core.src.main.java.cz.gattserver.grass3.model.util.QuerydslUtil.java", "BodyUseAPI": [], "Fixed commit": "600e82001f4072458ec1da3619588413e7c48c7e", "Url": "https://api.github.com/repos/gattaka/grass3-vaadin-osgi", "Date": "2018-03-17T23:24:54Z"},
{"Line": "488=>487", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javafx.scene.control.TreeItem<java.lang.String>.getChildren()=>javafx.scene.control.TreeItem<java.lang.String>.getChildren()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5648/buggy-version/src.main.java.threads.classes.FileManagerThreadControl.java", "BodyUseAPI": [], "Fixed commit": "c14c98f5adca8f8351fbb4afccb6ac2936a6f980", "Url": "https://api.github.com/repos/Alexander-Lukacs/VFS_GUI", "Date": "2018-03-13T12:46:15Z"},
{"Line": "488=>487", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javafx.scene.control.TreeItem<java.lang.String>.getChildren()=>javafx.scene.control.TreeItem<java.lang.String>.getChildren()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5648/buggy-version/src.main.java.threads.classes.FileManagerThreadControl.java", "BodyUseAPI": [], "Fixed commit": "c14c98f5adca8f8351fbb4afccb6ac2936a6f980", "Url": "https://api.github.com/repos/Alexander-Lukacs/VFS_GUI", "Date": "2018-03-13T12:46:15Z"},
{"Line": "492=>491", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javafx.scene.control.TreeItem<java.lang.String>.getChildren()=>javafx.scene.control.TreeItem<java.lang.String>.getChildren()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5648/buggy-version/src.main.java.threads.classes.FileManagerThreadControl.java", "BodyUseAPI": [], "Fixed commit": "c14c98f5adca8f8351fbb4afccb6ac2936a6f980", "Url": "https://api.github.com/repos/Alexander-Lukacs/VFS_GUI", "Date": "2018-03-13T12:46:15Z"},
{"Line": "487=>487", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javafx.application.Platform.runLater(() -> lob_parent.getChildren().addAll(lob_item.getChildren()))=>lob_parent.getChildren().addAll(lob_item.getChildren())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5648/buggy-version/src.main.java.threads.classes.FileManagerThreadControl.java", "BodyUseAPI": [], "Fixed commit": "c14c98f5adca8f8351fbb4afccb6ac2936a6f980", "Url": "https://api.github.com/repos/Alexander-Lukacs/VFS_GUI", "Date": "2018-03-13T12:46:15Z"},
{"Line": "491=>491", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javafx.application.Platform.runLater(() -> lob_parent.getChildren().remove(lob_item))=>lob_parent.getChildren().remove(javafx.scene.control.TreeItem<java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5648/buggy-version/src.main.java.threads.classes.FileManagerThreadControl.java", "BodyUseAPI": [], "Fixed commit": "c14c98f5adca8f8351fbb4afccb6ac2936a6f980", "Url": "https://api.github.com/repos/Alexander-Lukacs/VFS_GUI", "Date": "2018-03-13T12:46:15Z"},
{"Line": "72=>72", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.vaadin.client.ui.VTextField.isReadOnly()=>com.vaadin.client.ui.VTextField.isEnabled()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1744/buggy-version/GridFastNavigation-addon.src.main.java.org.vaadin.patrik.client.EditorWidgets.java", "BodyUseAPI": [], "Fixed commit": "c183600523f9f6d3da8186df72b8453229d7ee69", "Url": "https://api.github.com/repos/TatuLund/GridFastNavigation", "Date": "2018-03-18T09:41:29Z"},
{"Line": "115=>115", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "widget.getElement().focus()=>com.vaadin.client.ui.VComboBox.focus()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1744/buggy-version/GridFastNavigation-addon.src.main.java.org.vaadin.patrik.client.EditorWidgets.java", "BodyUseAPI": [], "Fixed commit": "c183600523f9f6d3da8186df72b8453229d7ee69", "Url": "https://api.github.com/repos/TatuLund/GridFastNavigation", "Date": "2018-03-18T09:41:29Z"},
{"Line": "79=>81", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.ballerinalang.model.values.BStruct.addNativeData(org.ballerinalang.net.grpc.MessageHeaders.METADATA_KEY,headerCapture.get())=>org.ballerinalang.model.values.BStruct.addNativeData(org.ballerinalang.net.grpc.MessageHeaders.METADATA_KEY,org.ballerinalang.net.grpc.MessageHeaders)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6269/buggy-version/stdlib.ballerina-grpc.src.main.java.org.ballerinalang.net.grpc.stubs.DefaultStreamObserver.java", "BodyUseAPI": [], "Fixed commit": "d4125b818d478dde0e396b5de58fed3dcb79cfc7", "Url": "https://api.github.com/repos/uthaiyashankar/ballerina", "Date": "2018-04-11T11:22:35Z"},
{"Line": "130=>134", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.ballerinalang.model.values.BStruct.addNativeData(org.ballerinalang.net.grpc.MessageHeaders.METADATA_KEY,headerCapture.get())=>org.ballerinalang.model.values.BStruct.addNativeData(org.ballerinalang.net.grpc.MessageHeaders.METADATA_KEY,org.ballerinalang.net.grpc.MessageHeaders)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6269/buggy-version/stdlib.ballerina-grpc.src.main.java.org.ballerinalang.net.grpc.stubs.DefaultStreamObserver.java", "BodyUseAPI": [], "Fixed commit": "d4125b818d478dde0e396b5de58fed3dcb79cfc7", "Url": "https://api.github.com/repos/uthaiyashankar/ballerina", "Date": "2018-04-11T11:22:35Z"},
{"Line": "107=>110", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.ballerinalang.model.values.BStruct.addNativeData(org.ballerinalang.net.grpc.MessageHeaders.METADATA_KEY,headerCapture.get())=>org.ballerinalang.model.values.BStruct.addNativeData(org.ballerinalang.net.grpc.MessageHeaders.METADATA_KEY,org.ballerinalang.net.grpc.MessageHeaders)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6269/buggy-version/stdlib.ballerina-grpc.src.main.java.org.ballerinalang.net.grpc.stubs.DefaultStreamObserver.java", "BodyUseAPI": [], "Fixed commit": "d4125b818d478dde0e396b5de58fed3dcb79cfc7", "Url": "https://api.github.com/repos/uthaiyashankar/ballerina", "Date": "2018-04-11T11:22:35Z"},
{"Line": "126=>127", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.johanaanesen.imt3673_lab04.MainActivity.getSystemService(com.example.johanaanesen.imt3673_lab04.ALARM_SERVICE)=>com.example.johanaanesen.imt3673_lab04.MainActivity.getSystemService(Context.ALARM_SERVICE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3822/buggy-version/app.src.main.java.com.example.johanaanesen.imt3673_lab04.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "3a84741b4799b94b63f11b0490b9e52650081a34", "Url": "https://api.github.com/repos/JohanAanesen/imt3673-Lab04", "Date": "2018-04-05T18:08:42Z"},
{"Line": "126=>127", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.johanaanesen.imt3673_lab04.MainActivity.getSystemService(com.example.johanaanesen.imt3673_lab04.ALARM_SERVICE)=>com.example.johanaanesen.imt3673_lab04.MainActivity.getSystemService(Context.ALARM_SERVICE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3822/buggy-version/app.src.main.java.com.example.johanaanesen.imt3673_lab04.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "3a84741b4799b94b63f11b0490b9e52650081a34", "Url": "https://api.github.com/repos/JohanAanesen/imt3673-Lab04", "Date": "2018-04-05T18:08:42Z"},
{"Line": "99=>99", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.hspt.dao.jpa.HospitalDAO.findOne(((long) (reqHospital.getHospitalId())))=>org.hspt.dao.jpa.HospitalDAO.findByHospitalId(reqHospital.getHospitalId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2198/buggy-version/hspt-survey.src.main.java.org.hspt.service.impl.HospitalServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "f76a615beb0eab66df9361710d466cf7171f980f", "Url": "https://api.github.com/repos/lht142934/HSPT", "Date": "2018-09-18T12:49:59Z"},
{"Line": "127=>127", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.teammental.merest.RestApiProxyInvocationHandler.extractReturnType(java.lang.reflect.Type,boolean)=>com.teammental.merest.RestApiProxyInvocationHandler.extractReturnType(java.lang.reflect.Type,boolean,java.lang.Class<? extends java.lang.Object>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/840/buggy-version/merest.src.main.java.com.teammental.merest.RestApiProxyInvocationHandler.java", "BodyUseAPI": [], "Fixed commit": "c52130d84d421aa5052c780f5050a7e6c32f7612", "Url": "https://api.github.com/repos/mental-party/meparty", "Date": "2018-02-16T18:13:05Z"},
{"Line": "233=>237", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.teammental.merest.RestApiProxyInvocationHandler.extractReturnType(java.lang.reflect.Type,boolean)=>com.teammental.merest.RestApiProxyInvocationHandler.extractReturnType(java.lang.reflect.Type,boolean,java.lang.Class<?>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/840/buggy-version/merest.src.main.java.com.teammental.merest.RestApiProxyInvocationHandler.java", "BodyUseAPI": [], "Fixed commit": "c52130d84d421aa5052c780f5050a7e6c32f7612", "Url": "https://api.github.com/repos/mental-party/meparty", "Date": "2018-02-16T18:13:05Z"},
{"Line": "128=>129", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.teammental.merest.RestApiProxyInvocationHandler.extractReturnType(java.lang.reflect.Type,boolean)=>com.teammental.merest.RestApiProxyInvocationHandler.extractReturnType(java.lang.reflect.Type,boolean,java.lang.Class<? extends java.lang.Object>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/840/buggy-version/merest.src.main.java.com.teammental.merest.RestApiProxyInvocationHandler.java", "BodyUseAPI": [], "Fixed commit": "c52130d84d421aa5052c780f5050a7e6c32f7612", "Url": "https://api.github.com/repos/mental-party/meparty", "Date": "2018-02-16T18:13:05Z"},
{"Line": "80=>81", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.android.build.api.transform.TransformOutputProvider.getContentLocation(directoryInput.getName(),java.util.Set<QualifiedContent.ContentType>,java.util.Set<QualifiedContent.Scope>,Format.DIRECTORY)=>com.android.build.api.transform.TransformOutputProvider.getContentLocation(directoryInput.getName(),directoryInput.getContentTypes(),directoryInput.getScopes(),Format.DIRECTORY)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/752/buggy-version/bouquet-plugin.src.main.java.com.quanturium.bouquet.plugin.configure.AspectJAndroidTransform.java", "BodyUseAPI": [], "Fixed commit": "1d086c8ec337482f5d4dbe54857a2b77bd70eb59", "Url": "https://api.github.com/repos/quanturium/bouquet", "Date": "2018-05-24T00:50:29Z"},
{"Line": "90=>91", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.android.build.api.transform.TransformOutputProvider.getContentLocation(jarInput.getName(),java.util.Set<QualifiedContent.ContentType>,java.util.Set<QualifiedContent.Scope>,Format.JAR)=>com.android.build.api.transform.TransformOutputProvider.getContentLocation(jarInput.getName(),jarInput.getContentTypes(),jarInput.getScopes(),Format.JAR)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/752/buggy-version/bouquet-plugin.src.main.java.com.quanturium.bouquet.plugin.configure.AspectJAndroidTransform.java", "BodyUseAPI": [], "Fixed commit": "1d086c8ec337482f5d4dbe54857a2b77bd70eb59", "Url": "https://api.github.com/repos/quanturium/bouquet", "Date": "2018-05-24T00:50:29Z"},
{"Line": "122=>123", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.android.build.api.transform.TransformOutputProvider.getContentLocation(jarInput.getName(),java.util.Set<QualifiedContent.ContentType>,java.util.Set<QualifiedContent.Scope>,Format.JAR)=>com.android.build.api.transform.TransformOutputProvider.getContentLocation(jarInput.getName(),jarInput.getContentTypes(),jarInput.getScopes(),Format.JAR)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/752/buggy-version/bouquet-plugin.src.main.java.com.quanturium.bouquet.plugin.configure.AspectJAndroidTransform.java", "BodyUseAPI": [], "Fixed commit": "1d086c8ec337482f5d4dbe54857a2b77bd70eb59", "Url": "https://api.github.com/repos/quanturium/bouquet", "Date": "2018-05-24T00:50:29Z"},
{"Line": "42=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.badlogic.gdx.files.FileHandle.file()=>com.badlogic.gdx.files.FileHandle.read()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3911/buggy-version/core.src.com.afts.core.Utility.Parsers.LoadLevelFromXML.java", "BodyUseAPI": [], "Fixed commit": "7cc725570bfb89cc1af9fa5ad2abefe0d2b559b0", "Url": "https://api.github.com/repos/Danelido/AFTS", "Date": "2018-06-14T14:14:38Z"},
{"Line": "85=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.OriginInfoDefinition.getDateIssued()=>cz.cas.lib.proarc.mods.OriginInfoDefinition.getDateIssued()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "62=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cz.cas.lib.proarc.common.object.ndk.RdaRules.checkOriginInfoRdaRules(cz.cas.lib.proarc.common.object.ndk.OriginInfoDefinition)=>cz.cas.lib.proarc.common.object.ndk.RdaRules.checkOriginInfoRdaRules(cz.cas.lib.proarc.mods.OriginInfoDefinition)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "132=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.ModsDefinition.getPhysicalDescription()=>cz.cas.lib.proarc.mods.ModsDefinition.getPhysicalDescription()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "125=>129", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.RecordInfoDefinition.getDescriptionStandard()=>cz.cas.lib.proarc.mods.RecordInfoDefinition.getDescriptionStandard()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "116=>120", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.ModsDefinition.getRecordInfo()=>cz.cas.lib.proarc.mods.ModsDefinition.getRecordInfo()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "83=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.OriginInfoDefinition.getDateIssued()=>cz.cas.lib.proarc.mods.OriginInfoDefinition.getDateIssued()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "72=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.OriginInfoDefinition.getEventType()=>cz.cas.lib.proarc.mods.OriginInfoDefinition.getEventType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "86=>90", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.OriginInfoDefinition.getDateIssued()=>cz.cas.lib.proarc.mods.OriginInfoDefinition.getDateIssued()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "76=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.OriginInfoDefinition.getDateIssued()=>cz.cas.lib.proarc.mods.OriginInfoDefinition.getDateIssued()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "81=>85", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.OriginInfoDefinition.getCopyrightDate()=>cz.cas.lib.proarc.mods.OriginInfoDefinition.getCopyrightDate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "119=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.ModsDefinition.getRecordInfo()=>cz.cas.lib.proarc.mods.ModsDefinition.getRecordInfo()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "140=>144", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.PhysicalDescriptionDefinition.getForm()=>cz.cas.lib.proarc.mods.PhysicalDescriptionDefinition.getForm()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "126=>130", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "mods.getRecordInfo().add(cz.cas.lib.proarc.common.object.ndk.RecordInfoDefinition)=>mods.getRecordInfo().add(cz.cas.lib.proarc.mods.RecordInfoDefinition)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "87=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.OriginInfoDefinition.getDateOther()=>cz.cas.lib.proarc.mods.OriginInfoDefinition.getDateOther()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "126=>130", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.ModsDefinition.getRecordInfo()=>cz.cas.lib.proarc.mods.ModsDefinition.getRecordInfo()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "140=>144", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.PhysicalDescriptionDefinition.getForm()=>cz.cas.lib.proarc.mods.PhysicalDescriptionDefinition.getForm()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "74=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.OriginInfoDefinition.getCopyrightDate()=>cz.cas.lib.proarc.mods.OriginInfoDefinition.getCopyrightDate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "61=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.ModsDefinition.getOriginInfo()=>cz.cas.lib.proarc.mods.ModsDefinition.getOriginInfo()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "125=>129", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "recordInfoDefinition.getDescriptionStandard().add(cz.cas.lib.proarc.common.object.ndk.StringPlusLanguagePlusAuthority)=>recordInfoDefinition.getDescriptionStandard().add(cz.cas.lib.proarc.mods.StringPlusLanguagePlusAuthority)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "77=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.OriginInfoDefinition.getDateIssued()=>cz.cas.lib.proarc.mods.OriginInfoDefinition.getDateIssued()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "135=>139", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.OriginInfoDefinition.getEventType()=>cz.cas.lib.proarc.mods.OriginInfoDefinition.getEventType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "131=>135", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.ModsDefinition.getOriginInfo()=>cz.cas.lib.proarc.mods.ModsDefinition.getOriginInfo()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "60=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cz.cas.lib.proarc.common.object.ndk.RdaRules.checkRules(cz.cas.lib.proarc.common.object.ndk.ModsDefinition)=>cz.cas.lib.proarc.common.object.ndk.RdaRules.checkRules(cz.cas.lib.proarc.mods.ModsDefinition)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "123=>127", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.StringPlusLanguagePlusAuthority.setValue(ModsConstants.VALUE_DESCRIPTIONSTANDARD_AACR)=>cz.cas.lib.proarc.mods.StringPlusLanguagePlusAuthority.setValue(ModsConstants.VALUE_DESCRIPTIONSTANDARD_AACR)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "75=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.OriginInfoDefinition.getDateOther()=>cz.cas.lib.proarc.mods.OriginInfoDefinition.getDateOther()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "82=>86", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cz.cas.lib.proarc.common.object.ndk.OriginInfoDefinition.getDateIssued()=>cz.cas.lib.proarc.mods.OriginInfoDefinition.getDateIssued()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8672/buggy-version/proarc-common.src.main.java.cz.cas.lib.proarc.common.object.ndk.RdaRules.java", "BodyUseAPI": [], "Fixed commit": "8522bec0b6701c8a3c4e3cf5de780ec863b15742", "Url": "https://api.github.com/repos/moravianlibrary/proarc", "Date": "2018-02-15T12:31:44Z"},
{"Line": "15=>15", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "httpSecurity.csrf().disable().requiresChannel().antMatchers(HttpMethod.POST,java.lang.String)=>httpSecurity.csrf().disable().requiresChannel().antMatchers(HttpMethod.PUT,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2948/buggy-version/src.main.java.com.charter.enterprise.motd.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "821096afe8d36b370993372fe519ad5f34cb939c", "Url": "https://api.github.com/repos/abcdp/code-sample", "Date": "2018-05-07T16:42:46Z"},
{"Line": "247=>241", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "FetchRequest.Builder.fetchData()=>org.apache.kafka.common.Node.id()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4731/buggy-version/clients.src.main.java.org.apache.kafka.clients.consumer.internals.Fetcher.java", "BodyUseAPI": [], "Fixed commit": "b41a2f204dd29085d7575caf3bf0a8f68d1dac14", "Url": "https://api.github.com/repos/cmccabe/kafka", "Date": "2018-01-31T20:04:51Z"},
{"Line": "247=>241", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "FetchRequest.Builder.fetchData()=>org.apache.kafka.common.Node.id()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4731/buggy-version/clients.src.main.java.org.apache.kafka.clients.consumer.internals.Fetcher.java", "BodyUseAPI": [], "Fixed commit": "b41a2f204dd29085d7575caf3bf0a8f68d1dac14", "Url": "https://api.github.com/repos/cmccabe/kafka", "Date": "2018-01-31T20:04:51Z"},
{"Line": "247=>241", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.slf4j.Logger.debug(java.lang.String,request.fetchData(),org.apache.kafka.common.Node,java.lang.RuntimeException)=>java.util.Map<java.lang.Integer, org.apache.kafka.clients.FetchSessionHandler>.get(fetchTarget.id())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4731/buggy-version/clients.src.main.java.org.apache.kafka.clients.consumer.internals.Fetcher.java", "BodyUseAPI": [], "Fixed commit": "b41a2f204dd29085d7575caf3bf0a8f68d1dac14", "Url": "https://api.github.com/repos/cmccabe/kafka", "Date": "2018-01-31T20:04:51Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.kafka.common.errors.ApiException(java.lang.String)=>org.apache.kafka.common.errors.RetriableException(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4731/buggy-version/clients.src.main.java.org.apache.kafka.common.errors.FetchSessionIdNotFoundException.java", "BodyUseAPI": [], "Fixed commit": "b41a2f204dd29085d7575caf3bf0a8f68d1dac14", "Url": "https://api.github.com/repos/cmccabe/kafka", "Date": "2018-01-31T20:04:51Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.kafka.common.errors.ApiException(java.lang.String)=>org.apache.kafka.common.errors.RetriableException(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4731/buggy-version/clients.src.main.java.org.apache.kafka.common.errors.InvalidFetchSessionEpochException.java", "BodyUseAPI": [], "Fixed commit": "b41a2f204dd29085d7575caf3bf0a8f68d1dac14", "Url": "https://api.github.com/repos/cmccabe/kafka", "Date": "2018-01-31T20:04:51Z"},
{"Line": "77=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.api.services.cloudtasks.v2beta2.CloudTasksScopes.all()=>com.google.api.services.cloudtasks.v2beta3.CloudTasksScopes.all()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7885/buggy-version/flexible.cloud-tasks.src.main.java.com.example.cloudtasks.CreateTaskServlet.java", "BodyUseAPI": [], "Fixed commit": "f8b3fd4696de72f004a33614fe9b782fe2e667b5", "Url": "https://api.github.com/repos/GoogleCloudPlatform/java-docs-samples", "Date": "2018-09-18T16:39:25Z"},
{"Line": "117=>117", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.api.services.cloudtasks.v2beta2.model.Task.getName()=>com.google.api.services.cloudtasks.v2beta3.model.Task.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7885/buggy-version/flexible.cloud-tasks.src.main.java.com.example.cloudtasks.CreateTaskServlet.java", "BodyUseAPI": [], "Fixed commit": "f8b3fd4696de72f004a33614fe9b782fe2e667b5", "Url": "https://api.github.com/repos/GoogleCloudPlatform/java-docs-samples", "Date": "2018-09-18T16:39:25Z"},
{"Line": "110=>110", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.api.services.cloudtasks.v2beta2.CloudTasks.projects()=>com.google.api.services.cloudtasks.v2beta3.CloudTasks.projects()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7885/buggy-version/flexible.cloud-tasks.src.main.java.com.example.cloudtasks.CreateTaskServlet.java", "BodyUseAPI": [], "Fixed commit": "f8b3fd4696de72f004a33614fe9b782fe2e667b5", "Url": "https://api.github.com/repos/GoogleCloudPlatform/java-docs-samples", "Date": "2018-09-18T16:39:25Z"},
{"Line": "100=>100", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.api.services.cloudtasks.v2beta2.model.AppEngineHttpRequest.setHttpMethod(java.lang.String)=>com.google.api.services.cloudtasks.v2beta3.model.AppEngineHttpRequest.setHttpMethod(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7885/buggy-version/flexible.cloud-tasks.src.main.java.com.example.cloudtasks.CreateTaskServlet.java", "BodyUseAPI": [], "Fixed commit": "f8b3fd4696de72f004a33614fe9b782fe2e667b5", "Url": "https://api.github.com/repos/GoogleCloudPlatform/java-docs-samples", "Date": "2018-09-18T16:39:25Z"},
{"Line": "100=>100", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new com.google.api.services.cloudtasks.v2beta2.model.AppEngineHttpRequest().setHttpMethod(\"POST\").setRelativeUrl(\"/example_task_handler\").setPayload(java.lang.String)=>new com.google.api.services.cloudtasks.v2beta3.model.AppEngineHttpRequest().setHttpMethod(\"POST\").setRelativeUri(\"/example_task_handler\").setBody(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7885/buggy-version/flexible.cloud-tasks.src.main.java.com.example.cloudtasks.CreateTaskServlet.java", "BodyUseAPI": [], "Fixed commit": "f8b3fd4696de72f004a33614fe9b782fe2e667b5", "Url": "https://api.github.com/repos/GoogleCloudPlatform/java-docs-samples", "Date": "2018-09-18T16:39:25Z"},
{"Line": "110=>110", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "client.projects().locations().queues().tasks().create(java.lang.String,com.google.api.services.cloudtasks.v2beta2.model.CreateTaskRequest)=>client.projects().locations().queues().tasks().create(java.lang.String,com.google.api.services.cloudtasks.v2beta3.model.CreateTaskRequest)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7885/buggy-version/flexible.cloud-tasks.src.main.java.com.example.cloudtasks.CreateTaskServlet.java", "BodyUseAPI": [], "Fixed commit": "f8b3fd4696de72f004a33614fe9b782fe2e667b5", "Url": "https://api.github.com/repos/GoogleCloudPlatform/java-docs-samples", "Date": "2018-09-18T16:39:25Z"},
{"Line": "77=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.api.services.cloudtasks.v2beta2.CloudTasksScopes.all()=>com.google.api.services.cloudtasks.v2beta3.CloudTasksScopes.all()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7885/buggy-version/flexible.cloud-tasks.src.main.java.com.example.cloudtasks.CreateTaskServlet.java", "BodyUseAPI": [], "Fixed commit": "f8b3fd4696de72f004a33614fe9b782fe2e667b5", "Url": "https://api.github.com/repos/GoogleCloudPlatform/java-docs-samples", "Date": "2018-09-18T16:39:25Z"},
{"Line": "100=>100", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new com.google.api.services.cloudtasks.v2beta2.model.AppEngineHttpRequest().setHttpMethod(\"POST\").setRelativeUrl(java.lang.String)=>new com.google.api.services.cloudtasks.v2beta3.model.AppEngineHttpRequest().setHttpMethod(\"POST\").setRelativeUri(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7885/buggy-version/flexible.cloud-tasks.src.main.java.com.example.cloudtasks.CreateTaskServlet.java", "BodyUseAPI": [], "Fixed commit": "f8b3fd4696de72f004a33614fe9b782fe2e667b5", "Url": "https://api.github.com/repos/GoogleCloudPlatform/java-docs-samples", "Date": "2018-09-18T16:39:25Z"},
{"Line": "107=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.api.services.cloudtasks.v2beta2.model.CreateTaskRequest.setTask(com.google.api.services.cloudtasks.v2beta2.model.Task)=>com.google.api.services.cloudtasks.v2beta3.model.CreateTaskRequest.setTask(com.google.api.services.cloudtasks.v2beta3.model.Task)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7885/buggy-version/flexible.cloud-tasks.src.main.java.com.example.cloudtasks.CreateTaskServlet.java", "BodyUseAPI": [], "Fixed commit": "f8b3fd4696de72f004a33614fe9b782fe2e667b5", "Url": "https://api.github.com/repos/GoogleCloudPlatform/java-docs-samples", "Date": "2018-09-18T16:39:25Z"},
{"Line": "104=>104", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.api.services.cloudtasks.v2beta2.model.Task.setAppEngineHttpRequest(com.google.api.services.cloudtasks.v2beta2.model.AppEngineHttpRequest)=>com.google.api.services.cloudtasks.v2beta3.model.Task.setAppEngineHttpRequest(com.google.api.services.cloudtasks.v2beta3.model.AppEngineHttpRequest)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7885/buggy-version/flexible.cloud-tasks.src.main.java.com.example.cloudtasks.CreateTaskServlet.java", "BodyUseAPI": [], "Fixed commit": "f8b3fd4696de72f004a33614fe9b782fe2e667b5", "Url": "https://api.github.com/repos/GoogleCloudPlatform/java-docs-samples", "Date": "2018-09-18T16:39:25Z"},
{"Line": "108=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "gitflow.actions.FinishHotfixAction.runAction(com.intellij.openapi.project.Project,java.lang.String,java.lang.String,<nulltype>)=>gitflow.actions.FinishHotfixAction.runAction(com.intellij.openapi.project.Project,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3091/buggy-version/src.gitflow.ui.GitflowCloseTaskPanel.java", "BodyUseAPI": [], "Fixed commit": "7a2e652ff80e85670ebd53ff43770760c152e424", "Url": "https://api.github.com/repos/OpherV/gitflow4idea", "Date": "2018-03-25T13:19:54Z"},
{"Line": "58=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ajimatech.android.jokesprovider.Joker.getJoke()=>android.content.Intent.putExtra(getString(R.string.jokeIntentId),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7457/buggy-version/app.src.main.java.com.udacity.gradle.builditbigger.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "65832983f9ed0bf90a17b2c3b37cbfd8fa12dacf", "Url": "https://api.github.com/repos/anishsainju/BuildMuchBigger", "Date": "2018-10-26T02:09:39Z"},
{"Line": "58=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.content.Intent.putExtra(getString(R.string.jokeIntentId),myJoker.getJoke())=>android.content.Intent.putExtra(getString(R.string.jokeIntentId),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7457/buggy-version/app.src.main.java.com.udacity.gradle.builditbigger.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "65832983f9ed0bf90a17b2c3b37cbfd8fa12dacf", "Url": "https://api.github.com/repos/anishsainju/BuildMuchBigger", "Date": "2018-10-26T02:09:39Z"},
{"Line": "152=>152", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "blog.yisheng.bookstore.db.JDBConnection.executeQuery(java.lang.String)=>java.sql.PreparedStatement.executeQuery()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/12/buggy-version/src.main.java.blog.yisheng.bookstore.dao.impl.BookDAOImpl.java", "BodyUseAPI": [], "Fixed commit": "00d0b2dfd984f456e1ecc8176f18e4b66600e08f", "Url": "https://api.github.com/repos/suoigwg/BookStore", "Date": "2018-06-07T16:03:23Z"},
{"Line": "70=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "77=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "115=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "166=>166", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculations.subtraction(double,double)=>com.example.lda.simple_calculator.Calculations.subtraction(double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "172=>172", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculations.regularDivision(double,double)=>com.example.lda.simple_calculator.Calculations.regularDivision(double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "175=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculations.divisionWithRemainder(double,double)=>com.example.lda.simple_calculator.Calculations.divisionWithRemainder(double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "63=>63", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculator.4.whenClicked1(int,android.widget.TextView)=>com.example.lda.simple_calculator.Calculator.4.whenClicked1(int,android.widget.TextView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "135=>135", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "45=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculator.1.whenClicked1(int,android.widget.TextView)=>com.example.lda.simple_calculator.Calculator.1.whenClicked1(int,android.widget.TextView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "145=>145", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "125=>125", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "94=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculator.8.whenClicked1(int,android.widget.TextView)=>com.example.lda.simple_calculator.Calculator.8.whenClicked1(int,android.widget.TextView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculator.3.whenClicked1(int,android.widget.TextView)=>com.example.lda.simple_calculator.Calculator.3.whenClicked1(int,android.widget.TextView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "169=>169", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculations.multiplication(double,double)=>com.example.lda.simple_calculator.Calculations.multiplication(double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "101=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculator.9.whenClicked1(int,android.widget.TextView)=>com.example.lda.simple_calculator.Calculator.9.whenClicked1(int,android.widget.TextView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "105=>105", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "163=>163", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculations.addition(double,double)=>com.example.lda.simple_calculator.Calculations.addition(double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "42=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "80=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculator.6.whenClicked1(int,android.widget.TextView)=>com.example.lda.simple_calculator.Calculator.6.whenClicked1(int,android.widget.TextView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "98=>98", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "52=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculator.2.whenClicked1(int,android.widget.TextView)=>com.example.lda.simple_calculator.Calculator.2.whenClicked1(int,android.widget.TextView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculator.5.whenClicked1(int,android.widget.TextView)=>com.example.lda.simple_calculator.Calculator.5.whenClicked1(int,android.widget.TextView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "91=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "188=>188", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "87=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.linusanddave.simple_calculator.Calculator.7.whenClicked1(int,android.widget.TextView)=>com.example.lda.simple_calculator.Calculator.7.whenClicked1(int,android.widget.TextView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "155=>155", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "84=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9431/buggy-version/app.src.main.java.com.example.lda.simple_calculator.Calculator.java", "BodyUseAPI": [], "Fixed commit": "3f895dace07cec5eb7d1b075e3bf73a6dad0a063", "Url": "https://api.github.com/repos/linusHche/Simple-Calculator", "Date": "2018-09-23T08:09:29Z"},
{"Line": "66=>66", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.vertx.reactivex.ext.web.client.WebClient.post(request.getUrl())=>io.vertx.reactivex.ext.web.client.WebClient.postAbs(request.getUrl())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6984/buggy-version/core.src.main.java.com.cv4j.netdiscovery.core.downloader.vertx.VertxDownloader.java", "BodyUseAPI": [], "Fixed commit": "01e9323e4c4c5584f8d4235ea549551610b2ca66", "Url": "https://api.github.com/repos/fengzhizi715/NetDiscovery", "Date": "2018-03-25T09:18:23Z"},
{"Line": "1161=>1164", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.endsWith(java.lang.String)=>java.lang.String.indexOf(char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5668/buggy-version/src.main.java.org.jawk.jrt.JRT.java", "BodyUseAPI": [], "Fixed commit": "b5a9ffa0ade0d3dfb88eef0e38b7b660e13affca", "Url": "https://api.github.com/repos/sentrysoftware/Jawk", "Date": "2018-02-08T23:34:37Z"},
{"Line": "30=>30", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Displayer.lineSeparatorsIn(java.lang.String)=>Displayer.lineSeparatorsIn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4940/buggy-version/v0.Displayer.java", "BodyUseAPI": [], "Fixed commit": "36d5e2bdaf3fd411acdb659bf220e746814f279d", "Url": "https://api.github.com/repos/hlin8/SenioritisIsAMyth_Lin-H_Yang-M", "Date": "2018-04-12T00:02:23Z"},
{"Line": "270=>272", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.akaxin.site.storage.bean.PluginBean.setPermissionStatus(int)=>com.akaxin.site.storage.bean.PluginBean.setDisplayMode(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8302/buggy-version/openzaly-storage.src.main.java.com.akaxin.site.storage.sqlite.SQLitePluginDao.java", "BodyUseAPI": [], "Fixed commit": "32cd5d074b57d8984d7312c94e270bc12ceafeb4", "Url": "https://api.github.com/repos/akaxincom/openzaly", "Date": "2018-05-30T07:17:54Z"},
{"Line": "271=>273", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.akaxin.site.storage.bean.PluginBean.setDisplayMode(int)=>com.akaxin.site.storage.bean.PluginBean.setPermissionStatus(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8302/buggy-version/openzaly-storage.src.main.java.com.akaxin.site.storage.sqlite.SQLitePluginDao.java", "BodyUseAPI": [], "Fixed commit": "32cd5d074b57d8984d7312c94e270bc12ceafeb4", "Url": "https://api.github.com/repos/akaxincom/openzaly", "Date": "2018-05-30T07:17:54Z"},
{"Line": "314=>317", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.akaxin.site.storage.bean.PluginBean.setPermissionStatus(int)=>com.akaxin.site.storage.bean.PluginBean.setDisplayMode(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8302/buggy-version/openzaly-storage.src.main.java.com.akaxin.site.storage.sqlite.SQLitePluginDao.java", "BodyUseAPI": [], "Fixed commit": "32cd5d074b57d8984d7312c94e270bc12ceafeb4", "Url": "https://api.github.com/repos/akaxincom/openzaly", "Date": "2018-05-30T07:17:54Z"},
{"Line": "223=>224", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.akaxin.site.storage.bean.PluginBean.setPermissionStatus(int)=>com.akaxin.site.storage.bean.PluginBean.setDisplayMode(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8302/buggy-version/openzaly-storage.src.main.java.com.akaxin.site.storage.sqlite.SQLitePluginDao.java", "BodyUseAPI": [], "Fixed commit": "32cd5d074b57d8984d7312c94e270bc12ceafeb4", "Url": "https://api.github.com/repos/akaxincom/openzaly", "Date": "2018-05-30T07:17:54Z"},
{"Line": "810=>810", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.industry.printer.DataTransferThread.initDataBuffer(android.content.Context,java.util.List<com.industry.printer.MessageTask>)=>com.industry.printer.DataTransferThread.resetTask(java.util.List<com.industry.printer.MessageTask>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5161/buggy-version/src.com.industry.printer.ControlTabActivity.java", "BodyUseAPI": [], "Fixed commit": "0721a42261052e3274c43bc1fd755549f33079bc", "Url": "https://api.github.com/repos/kevin-zhaotk/Printer", "Date": "2018-09-12T10:06:01Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.Object(java.lang.String,RegistryType.FULL,Material.AIR,MapColor.LIGHT_BLUE)=>java.lang.Object(java.lang.String,RegistryType.FULL,Material.BARRIER,MapColor.LIGHT_BLUE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1920/buggy-version/src.main.java.com.hypeirochus.scmc.blocks.BlockProtossShield.java", "BodyUseAPI": [], "Fixed commit": "4a58877cdeb738fb7f1f9f35769fffcf892bd6c1", "Url": "https://api.github.com/repos/SCMCMod/Starcraft-Mod", "Date": "2018-06-16T20:28:05Z"},
{"Line": "46=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bumptech.glide.Glide.with(android.content.Context)=>com.squareup.picasso.Picasso.get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2959/buggy-version/app.src.main.java.com.doublespeak.android.doublespeak.recycler.RecyclerViewAdapter.java", "BodyUseAPI": [], "Fixed commit": "1dd8883ca613b82742d71dfc660ae1bd55e12f63", "Url": "https://api.github.com/repos/vaaz1/DoubleSpeak", "Date": "2018-04-12T09:11:29Z"},
{"Line": "46=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bumptech.glide.Glide.with(android.content.Context)=>com.squareup.picasso.Picasso.get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2959/buggy-version/app.src.main.java.com.doublespeak.android.doublespeak.recycler.RecyclerViewAdapter.java", "BodyUseAPI": [], "Fixed commit": "1dd8883ca613b82742d71dfc660ae1bd55e12f63", "Url": "https://api.github.com/repos/vaaz1/DoubleSpeak", "Date": "2018-04-12T09:11:29Z"},
{"Line": "549=>549", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.bioinformatics.genomic.ChromosomeService.getInstance().parse(m.getText(r, chrCol))=>org.jebtk.bioinformatics.genomic.GenomeService.getInstance().human(m.getText(r, chrCol))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5502/buggy-version/edu.columbia.rdf.matcalc.toolbox.annotation.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.annotation.AnnotationModule.java", "BodyUseAPI": [], "Fixed commit": "aa92eade0638ce3b5c549268ebf22f769c003bf3", "Url": "https://api.github.com/repos/antonybholmes/matcalc-annotation", "Date": "2018-02-03T01:30:03Z"},
{"Line": "363=>363", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.bioinformatics.genomic.ChromosomeService.getInstance()=>org.jebtk.bioinformatics.genomic.GenomeService.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5502/buggy-version/edu.columbia.rdf.matcalc.toolbox.annotation.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.annotation.AnnotationModule.java", "BodyUseAPI": [], "Fixed commit": "aa92eade0638ce3b5c549268ebf22f769c003bf3", "Url": "https://api.github.com/repos/antonybholmes/matcalc-annotation", "Date": "2018-02-03T01:30:03Z"},
{"Line": "363=>363", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.bioinformatics.genomic.ChromosomeService.getInstance().parse(m.getText(r, chrCol))=>org.jebtk.bioinformatics.genomic.GenomeService.getInstance().human(m.getText(r, chrCol))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5502/buggy-version/edu.columbia.rdf.matcalc.toolbox.annotation.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.annotation.AnnotationModule.java", "BodyUseAPI": [], "Fixed commit": "aa92eade0638ce3b5c549268ebf22f769c003bf3", "Url": "https://api.github.com/repos/antonybholmes/matcalc-annotation", "Date": "2018-02-03T01:30:03Z"},
{"Line": "204=>215", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.EditText.setOnEditorActionListener(android.widget.TextView.OnEditorActionListener)=>android.widget.EditText.setOnEditorActionListener(android.widget.TextView.OnEditorActionListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6563/buggy-version/android.src.main.java.im.shimo.react.prompt.RNPromptFragment.java", "BodyUseAPI": [], "Fixed commit": "dd428a864880209114ff9708f76e21e9d1937aa5", "Url": "https://api.github.com/repos/fogil/react-native-prompt-android", "Date": "2018-03-10T00:30:05Z"},
{"Line": "59=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.silicolife.textmining.processes.ir.epopatent.opshandler.OPSPatentFamilyHandler.getSetEpoDoc(org.w3c.dom.Node)=>com.silicolife.textmining.processes.ir.epopatent.opshandler.OPSPatentFamilyHandler.getPatentFamilyIds(org.w3c.dom.Node)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5300/buggy-version/src.main.java.com.silicolife.textmining.processes.ir.epopatent.opshandler.OPSPatentFamilyHandler.java", "BodyUseAPI": [], "Fixed commit": "e91b919480959a0f75cae802cd51344a00c52314", "Url": "https://api.github.com/repos/biotextmining/processes", "Date": "2018-04-19T14:22:11Z"},
{"Line": "90=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "players.SpoonPlayer.evaluateDefensive(main.Game)=>players.SpoonPlayer.evaluateAgressive(main.Game)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3212/buggy-version/src.players.SpoonPlayer.java", "BodyUseAPI": [], "Fixed commit": "c72d1cfd1ae31ec26c5f2e06c7bf8bab8b0492e3", "Url": "https://api.github.com/repos/3rtert/HeartStone", "Date": "2018-03-07T18:56:33Z"},
{"Line": "88=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[private] evaluateAgrAndDef(main.Game)=>[private] evaluate(java.util.ArrayList)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3212/buggy-version/src.players.SpoonPlayer.java", "BodyUseAPI": [], "Fixed commit": "c72d1cfd1ae31ec26c5f2e06c7bf8bab8b0492e3", "Url": "https://api.github.com/repos/3rtert/HeartStone", "Date": "2018-03-07T18:56:33Z"},
{"Line": "441=>439", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.util.Log.d(java.lang.String,java.lang.String)=>cc.dot.rtc.RTCStream.2.d(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9833/buggy-version/rtcengine.src.main.java.cc.dot.rtc.RTCStream.java", "BodyUseAPI": [], "Fixed commit": "791e80fe73184ab982335d059389fa696259f591", "Url": "https://api.github.com/repos/RTCEngine/RTCEngine-android-sdk", "Date": "2018-09-12T03:02:46Z"},
{"Line": "94=>94", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "load(userIDAuth, dataFileFQN, de.adorsys.sts.persistence.FsResourceServerRepository.RESOURCE_SERVER_LIST_TYPE).orElse(java.util.List<java.lang.Object>)=>load(userIDAuth, dataFileFQN, de.adorsys.sts.persistence.FsResourceServerRepository.RESOURCE_SERVER_LIST_TYPE).orElse(java.util.ArrayList)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1555/buggy-version/sts-persistence-docusafe.src.main.java.de.adorsys.sts.persistence.FsResourceServerRepository.java", "BodyUseAPI": [], "Fixed commit": "452babcf45aba2fb2f3c18aab5694898d7e3b35a", "Url": "https://api.github.com/repos/adorsys/secure-token-service", "Date": "2018-05-05T17:07:45Z"},
{"Line": "378=>378", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "de.wwu.criticalsystems.libhpng.simulation.SimulationEvent.setEventType(SimulationEventType.place_internaltransition)=>de.wwu.criticalsystems.libhpng.simulation.SimulationEvent.setEventType(SimulationEventType.place_boundary)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/443/buggy-version/src.main.java.de.wwu.criticalsystems.libhpng.simulation.Simulator.java", "BodyUseAPI": [], "Fixed commit": "7321a642cc0e6825659be5021fe427edd2642cda", "Url": "https://api.github.com/repos/jannikhuels/libhpng", "Date": "2018-04-04T13:40:02Z"},
{"Line": "404=>404", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Long.parseLong(this.etAmount.getText().toString())=>java.lang.Double.parseDouble(this.etAmount.getText().toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/304/buggy-version/app.src.main.java.cy.agorise.crystalwallet.fragments.SendTransactionFragment.java", "BodyUseAPI": [], "Fixed commit": "d38d0ed7edf9b0c0fbbdca39fac43572ce12c912", "Url": "https://api.github.com/repos/Agorise/crystal-wallet-android", "Date": "2018-09-20T01:47:26Z"},
{"Line": "668=>668", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "spreadsheet.getSheet().addMergedRegion(org.apache.poi.hssf.util.Region)=>spreadsheet.getSheet().addMergedRegion(org.apache.poi.ss.util.CellRangeAddress)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1026/buggy-version/fenixedu-ist-parking.src.main.java.pt.ist.fenixedu.parking.ui.struts.action.ParkingManagerDispatchAction.java", "BodyUseAPI": [], "Fixed commit": "e4005d5c99f48794b0a3ec756204ec171cd9a1c6", "Url": "https://api.github.com/repos/ricardorcr/fenixedu-ist", "Date": "2018-07-16T11:20:03Z"},
{"Line": "590=>590", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "oldStudentCurricularPlan.getGratuityEvent(getExecutionYear(), org.fenixedu.academic.domain.accounting.events.gratuity.GratuityEventWithPaymentPlan.class).isCancelled()=>oldStudentCurricularPlan.getGratuityEvent(getExecutionYear(), org.fenixedu.academic.domain.accounting.events.gratuity.GratuityEventWithPaymentPlan.class).get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1026/buggy-version/fenixedu-ist-integration.src.main.java.pt.ist.fenixedu.integration.domain.student.SeparationCyclesManagement.java", "BodyUseAPI": [], "Fixed commit": "e4005d5c99f48794b0a3ec756204ec171cd9a1c6", "Url": "https://api.github.com/repos/ricardorcr/fenixedu-ist", "Date": "2018-07-16T11:20:03Z"},
{"Line": "49=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "userRepo.findByUserName(userDefine.getUserName()).getId()=>com.asu.MovieRecommender.User.User.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1055/buggy-version/src.main.java.com.asu.MovieRecommender.Services.RegisterService.java", "BodyUseAPI": [], "Fixed commit": "3f32878ab87840b8cd6e79aa3f179d9efad45d83", "Url": "https://api.github.com/repos/mohantysabyasachi27/MovieRecommender", "Date": "2018-10-13T05:53:40Z"},
{"Line": "14=>14", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "event.getJDA().getSelfUser().getId()=>net.dv8tion.jda.core.events.message.MessageReceivedEvent.getAuthor()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8662/buggy-version/src.main.java.listeners.commandListener.java", "BodyUseAPI": [], "Fixed commit": "7113f1f4d85bb24488a65109c72cf6cf8c76a3cb", "Url": "https://api.github.com/repos/Henry440/DiscordBotTest", "Date": "2018-04-01T15:54:40Z"},
{"Line": "483=>482", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.android.exoplayer2.ExoPlayerFactory.newSimpleInstance(com.google.android.exoplayer2.DefaultRenderersFactory,com.google.android.exoplayer2.trackselection.DefaultTrackSelector)=>com.google.android.exoplayer2.ExoPlayerFactory.newSimpleInstance(com.google.android.exoplayer2.DefaultRenderersFactory,com.google.android.exoplayer2.trackselection.DefaultTrackSelector,com.google.android.exoplayer2.DefaultLoadControl)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6198/buggy-version/exoplayeractivity.src.main.java.com.liskovsoft.smartyoutubetv.flavors.exoplayer.player.PlayerActivity.java", "BodyUseAPI": [], "Fixed commit": "bb478eb7c8cd35bc2c718737ddd0701f29d567be", "Url": "https://api.github.com/repos/yuliskov/SmartYouTubeTV", "Date": "2018-08-16T13:03:17Z"},
{"Line": "142=>135", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new org.roda.wui.client.common.lists.RepresentationInformationList(filter, facets, org.roda.wui.client.planning.RepresentationInformationAssociations.messages.representationInformationTitle(), false)=>new org.roda.wui.client.common.lists.RepresentationInformationList(org.roda.core.data.v2.index.filter.Filter.NULL, org.roda.core.data.v2.index.facet.Facets.NONE, org.roda.wui.client.planning.RepresentationInformationAssociations.messages.representationInformationTitle(), false)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/500/buggy-version/roda-ui.roda-wui.src.main.java.org.roda.wui.client.planning.RepresentationInformationAssociations.java", "BodyUseAPI": [], "Fixed commit": "01ad0af507fc79ca0b60556e4e4d6eafdb8337d8", "Url": "https://api.github.com/repos/keeps/roda", "Date": "2018-01-23T18:32:26Z"},
{"Line": "265=>265", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(int)=>android.view.View.findViewById(R.id.TAB_ID)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4559/buggy-version/app.src.main.java.jp.ddo.hotmist.unicodepad.CharacterAdapter.java", "BodyUseAPI": [], "Fixed commit": "e04dbe82b596568a97c03afccc2cbffc6ad9ac3f", "Url": "https://api.github.com/repos/Ryosuke839/UnicodePad", "Date": "2018-03-03T04:48:19Z"},
{"Line": "266=>266", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(int)=>android.view.View.findViewById(R.id.TAB_ID)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4559/buggy-version/app.src.main.java.jp.ddo.hotmist.unicodepad.CharacterAdapter.java", "BodyUseAPI": [], "Fixed commit": "e04dbe82b596568a97c03afccc2cbffc6ad9ac3f", "Url": "https://api.github.com/repos/Ryosuke839/UnicodePad", "Date": "2018-03-03T04:48:19Z"},
{"Line": "181=>181", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.support.v4.view.PagerTabStrip.setId(int)=>android.support.v4.view.PagerTabStrip.setId(R.id.TAB_ID)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4559/buggy-version/app.src.main.java.jp.ddo.hotmist.unicodepad.PageAdapter.java", "BodyUseAPI": [], "Fixed commit": "e04dbe82b596568a97c03afccc2cbffc6ad9ac3f", "Url": "https://api.github.com/repos/Ryosuke839/UnicodePad", "Date": "2018-03-03T04:48:19Z"},
{"Line": "101=>102", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.smartregister.bidan.activity.LoginActivity.getActionBar()=>org.smartregister.bidan.activity.LoginActivity.getSupportActionBar()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1471/buggy-version/opensrp-bidan.src.main.java.org.smartregister.bidan.activity.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "b3030039d3a98515a068341a5f2687d546a086d7", "Url": "https://api.github.com/repos/OpenSRP/opensrp-client-sid", "Date": "2018-05-09T03:33:37Z"},
{"Line": "106=>104", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.smartregister.bidan.activity.LoginActivity.getActionBar()=>org.smartregister.bidan.activity.LoginActivity.getSupportActionBar()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1471/buggy-version/opensrp-bidan.src.main.java.org.smartregister.bidan.activity.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "b3030039d3a98515a068341a5f2687d546a086d7", "Url": "https://api.github.com/repos/OpenSRP/opensrp-client-sid", "Date": "2018-05-09T03:33:37Z"},
{"Line": "104=>103", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.smartregister.bidan.activity.LoginActivity.getActionBar()=>org.smartregister.bidan.activity.LoginActivity.getSupportActionBar()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1471/buggy-version/opensrp-bidan.src.main.java.org.smartregister.bidan.activity.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "b3030039d3a98515a068341a5f2687d546a086d7", "Url": "https://api.github.com/repos/OpenSRP/opensrp-client-sid", "Date": "2018-05-09T03:33:37Z"},
{"Line": "132=>132", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.teammental.memapper.util.FieldUtil.findGetMethod(java.lang.reflect.Field)=>com.teammental.memapper.util.FieldUtil.findSetMethod(java.lang.reflect.Field)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5358/buggy-version/memapper.src.main.java.com.teammental.memapper.util.FieldUtil.java", "BodyUseAPI": [], "Fixed commit": "5384ec1c5bfd8f77456403e0326edef725d0785f", "Url": "https://api.github.com/repos/mental-party/meparty", "Date": "2018-03-14T08:48:54Z"},
{"Line": "10=>11", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.support.v7.app.AppCompatActivity.onCreate(android.os.Bundle)=>android.app.Activity.onCreate(android.os.Bundle)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9780/buggy-version/app.src.main.java.com.example.damian.acdat.ej1_activity.java", "BodyUseAPI": [], "Fixed commit": "1b179b775c31eec5ecf554b89881253d58b7b6ab", "Url": "https://api.github.com/repos/yezarou/AcDat001", "Date": "2018-10-12T15:20:02Z"},
{"Line": "585=>587", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.text.NumberFormat.getCurrencyInstance(java.util.Locale)=>java.text.NumberFormat.format(java.lang.Double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5461/buggy-version/src.main.java.shippo.global.Mapping.java", "BodyUseAPI": [], "Fixed commit": "a460ff4efccc72e84b0e77aeb8d9d240d7e1b202", "Url": "https://api.github.com/repos/virutbk94/sync-service", "Date": "2018-07-16T04:12:42Z"},
{"Line": "585=>587", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.text.NumberFormat.getCurrencyInstance(java.util.Locale)=>java.text.NumberFormat.format(java.lang.Double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5461/buggy-version/src.main.java.shippo.global.Mapping.java", "BodyUseAPI": [], "Fixed commit": "a460ff4efccc72e84b0e77aeb8d9d240d7e1b202", "Url": "https://api.github.com/repos/virutbk94/sync-service", "Date": "2018-07-16T04:12:42Z"},
{"Line": "72=>72", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "dk.pension_consulting.Frontpage_Activity.findViewById(R.id.imageView4)=>dk.pension_consulting.Frontpage_Activity.findViewById(R.id.pensionbtn)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2453/buggy-version/app.src.main.java.dk.pension_consulting.Frontpage_Activity.java", "BodyUseAPI": [], "Fixed commit": "690b1559a2dd786f12ecd2f0a8de7bf2fbda5b2b", "Url": "https://api.github.com/repos/JakobsenSWT/Pension_consulting", "Date": "2018-01-17T13:11:22Z"},
{"Line": "19=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Arrays.asList(java.lang.String,java.lang.String)=>java.util.Arrays.asList(java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1594/buggy-version/src.main.java.br.com.eric.telegram.kerobot.action.map.MapAction.java", "BodyUseAPI": [], "Fixed commit": "f6569bec82e0038ac59ad022dd476e0cac64f727", "Url": "https://api.github.com/repos/ericvinicius/KeroBot", "Date": "2018-02-02T14:38:31Z"},
{"Line": "139=>139", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Toast.makeText(edu.neu.madcourse.michellelee.dangerzone.UserProfileActivity,java.lang.String,Toast.LENGTH_LONG)=>android.widget.Toast.makeText(edu.neu.madcourse.michellelee.dangerzone.UserProfileActivity,java.lang.String,Toast.LENGTH_SHORT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5988/buggy-version/app.src.main.java.edu.neu.madcourse.michellelee.dangerzone.UserProfileActivity.java", "BodyUseAPI": [], "Fixed commit": "48da2dc3d41c43490cb905e9793c65a8cc081142", "Url": "https://api.github.com/repos/michelledlee/SittingInTheDangerZone", "Date": "2018-08-07T20:50:57Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.openlmis.core.service.MessageService.message(java.lang.String)=>org.openlmis.core.service.MessageService.allMessages()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3949/buggy-version/modules.report.src.main.java.org.openlmis.report.generator.AbstractReportModelGenerator.java", "BodyUseAPI": [], "Fixed commit": "26ee9310af5e91cbcfc87239e2232de9c5bdd3ef", "Url": "https://api.github.com/repos/SIGLUS/open-lmis", "Date": "2018-09-21T07:34:34Z"},
{"Line": "228=>228", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.ui.helpers.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7492/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "748a3ac873dbc548967329704e169c1d8881a03a", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "251=>251", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.ui.helpers.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7492/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "748a3ac873dbc548967329704e169c1d8881a03a", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "56=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "correlation.SpanInfo.client().withTraceId(requestContext.getHeaderString(CorrelationHeaders.TRACE_ID)).withParentSpanId(requestContext.getHeaderString(CorrelationHeaders.PARENT_SPAN_ID)).withSpanId(requestContext.getHeaderString(CorrelationHeaders.SPAN_ID)).startAt(start).withDuration(duration).withIpv4(requestContext.getUri().getHost()).withPort(requestContext.getUri().getPort()).withServiceName(requestContext.getUri().getPath()).sendTo(java.lang.String)=>correlation.SpanInfo.client().withTraceId(requestContext.getHeaderString(CorrelationHeaders.TRACE_ID)).withParentSpanId(requestContext.getHeaderString(CorrelationHeaders.PARENT_SPAN_ID)).withSpanId(requestContext.getHeaderString(CorrelationHeaders.SPAN_ID)).startAt(start).withDuration(duration).withIpv4(requestContext.getUri().getHost()).withPort(requestContext.getUri().getPort()).withServiceName(requestContext.getUri().getPath()).sendTo(correlation.Configuration.zipkinURi())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4807/buggy-version/core.src.main.java.correlation.CorrelationClientFilter.java", "BodyUseAPI": [], "Fixed commit": "5b77fc2e6393c038f40de0568df48e7adaec0dc6", "Url": "https://api.github.com/repos/nmahoude/correlation4j", "Date": "2018-09-21T13:39:17Z"},
{"Line": "72=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "correlation.SpanInfo.server().withTraceId(traceId).withParentSpanId(parentSpanId).withSpanId(newSpanId).startAt(start).withDuration((end - start)).withServiceName(request.getRequestURI()).withIpv4(request.getLocalAddr()).withPort(request.getLocalPort()).sendTo(java.lang.String)=>correlation.SpanInfo.server().withTraceId(traceId).withParentSpanId(parentSpanId).withSpanId(newSpanId).startAt(start).withDuration((end - start)).withServiceName(request.getRequestURI()).withIpv4(request.getLocalAddr()).withPort(request.getLocalPort()).sendTo(correlation.Configuration.zipkinURi())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4807/buggy-version/core.src.main.java.correlation.CorrelationFilter.java", "BodyUseAPI": [], "Fixed commit": "5b77fc2e6393c038f40de0568df48e7adaec0dc6", "Url": "https://api.github.com/repos/nmahoude/correlation4j", "Date": "2018-09-21T13:39:17Z"},
{"Line": "692=>694", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "common.Log.errorDialog(java.lang.String,java.lang.String)=>common.Log.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7038/buggy-version/src.gui.MainWindow.java", "BodyUseAPI": [], "Fixed commit": "e2a198f1f4a3e16ebd3bed8e3f1d12accf1b77a2", "Url": "https://api.github.com/repos/ac2cz/FoxTelem", "Date": "2017-11-12T20:32:04Z"},
{"Line": "23=>23", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "topic.getText().equalsIgnoreCase(magazineTitle.title)=>topic.getText().equalsIgnoreCase(magazine.magazineTopics)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8168/buggy-version/src.main.java.pageObjects.MagazinePage.java", "BodyUseAPI": [], "Fixed commit": "74d1f165f247bdde336d529341c6b7d63d981aa6", "Url": "https://api.github.com/repos/mshafea/HomifyWeb", "Date": "2018-08-27T16:37:34Z"},
{"Line": "176=>176", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "pageObjects.IdeabooksPage.selectOptionFromListByValue(org.openqa.selenium.WebElement,java.lang.String)=>pageObjects.IdeabooksPage.selectOptionFromListByText(org.openqa.selenium.WebElement,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8168/buggy-version/src.main.java.pageObjects.IdeabooksPage.java", "BodyUseAPI": [], "Fixed commit": "74d1f165f247bdde336d529341c6b7d63d981aa6", "Url": "https://api.github.com/repos/mshafea/HomifyWeb", "Date": "2018-08-27T16:37:34Z"},
{"Line": "176=>176", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "pageObjects.IdeabooksPage.selectOptionFromListByValue(org.openqa.selenium.WebElement,java.lang.String)=>pageObjects.IdeabooksPage.selectOptionFromListByText(org.openqa.selenium.WebElement,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8168/buggy-version/src.main.java.pageObjects.IdeabooksPage.java", "BodyUseAPI": [], "Fixed commit": "74d1f165f247bdde336d529341c6b7d63d981aa6", "Url": "https://api.github.com/repos/mshafea/HomifyWeb", "Date": "2018-08-27T16:37:34Z"},
{"Line": "112=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.hc.core5.reactor.IOSession.clearEvent(int)=>org.apache.hc.core5.reactor.ssl.SSLIOSession.clearEvent(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2010/buggy-version/httpcore5.src.main.java.org.apache.hc.core5.reactor.InternalDataChannel.java", "BodyUseAPI": [], "Fixed commit": "5bb559844a5bc3c3b2a9e8b660435f932ae7265d", "Url": "https://api.github.com/repos/rschmitt/httpcomponents-core", "Date": "2018-10-10T09:39:29Z"},
{"Line": "95=>95", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.PrintWriter.println((\"OK\" + (TmpTerm.getPDId())))=>java.io.PrintWriter.print((\"OK\" + (TmpTerm.getPDId())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9158/buggy-version/ProdocWeb2.src.java.OpenProdocServ.AddTerm.java", "BodyUseAPI": [], "Fixed commit": "e2fd2495bcd9c973e0dec537e25f2b4a6d4404c8", "Url": "https://api.github.com/repos/JHierrot/openprodoc", "Date": "2018-03-07T19:39:53Z"},
{"Line": "93=>95", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.springframework.http.ResponseEntity.status(HttpStatus.OK).body(java.util.LinkedList<com.htl.crm.transferclasses.Conversation>)=>org.springframework.http.ResponseEntity.status(HttpStatus.OK).body(java.util.ArrayList<com.htl.crm.transferclasses.Conversation>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/383/buggy-version/CRM_Backend_2.src.main.java.com.htl.crm.restControllers.RestAndreas.java", "BodyUseAPI": [], "Fixed commit": "b3776df582e3f9d10958d075eef900a1644acc41", "Url": "https://api.github.com/repos/Mich039/HTLGKR_CRM_Backend", "Date": "2018-03-13T11:55:29Z"},
{"Line": "80=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.htl.crm.repositories.PersonRepo.findOne(long)=>com.htl.crm.repositories.PersonRepo.findByid(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/383/buggy-version/CRM_Backend_2.src.main.java.com.htl.crm.restControllers.RestAndreas.java", "BodyUseAPI": [], "Fixed commit": "b3776df582e3f9d10958d075eef900a1644acc41", "Url": "https://api.github.com/repos/Mich039/HTLGKR_CRM_Backend", "Date": "2018-03-13T11:55:29Z"},
{"Line": "86=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.LinkedList<com.htl.crm.transferclasses.Conversation>.add(com.htl.crm.transferclasses.Conversation)=>java.util.ArrayList<com.htl.crm.transferclasses.Conversation>.add(com.htl.crm.transferclasses.Conversation)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/383/buggy-version/CRM_Backend_2.src.main.java.com.htl.crm.restControllers.RestAndreas.java", "BodyUseAPI": [], "Fixed commit": "b3776df582e3f9d10958d075eef900a1644acc41", "Url": "https://api.github.com/repos/Mich039/HTLGKR_CRM_Backend", "Date": "2018-03-13T11:55:29Z"},
{"Line": "178=>178", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "OkHttpClient.Builder.interceptors()=>clientBuilder.retryOnConnectionFailure(false).interceptors()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/310/buggy-version/lia-core.src.main.java.com.lithium.community.android.rest.LiRestClient.java", "BodyUseAPI": [], "Fixed commit": "ad88ec9b3490997ce4b58ce081d909f21c32cd29", "Url": "https://api.github.com/repos/lithiumtech/li-android-sdk", "Date": "2018-07-18T08:51:14Z"},
{"Line": "97=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "PluginTechReborn.SAP.copy()=>PluginTechReborn.sap.copy()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7433/buggy-version/src.main.java.forestry.farming.logic.crops.CropRubber.java", "BodyUseAPI": [], "Fixed commit": "d0251f8ed746d1052102e740741554e8097072d2", "Url": "https://api.github.com/repos/temp1011/ForestryMC", "Date": "2018-04-12T13:48:44Z"},
{"Line": "119=>118", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "resObj.getData().getMovie().getBackgroundImageOriginal()=>resObj.getData().getMovie().getMediumScreenshotImage1()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5277/buggy-version/app.src.main.java.com.jproject.ytsmoviebrowser.view.DetailsView.java", "BodyUseAPI": [], "Fixed commit": "7decc03843e323675561895dabf32ef24cb19230", "Url": "https://api.github.com/repos/jenriellegaon/yts-movie-browser", "Date": "2018-08-17T17:04:56Z"},
{"Line": "61=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getTxData()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getTxData()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "139=>139", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getBlockHeight()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getBlockHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "170=>170", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getTime()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "136=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getBlockHeight()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getBlockHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "141=>141", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getBlockHeight()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getBlockHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "197=>197", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getTime()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "193=>193", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getTime()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "163=>163", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getTxData()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getTxData()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "219=>219", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getBlockHeight()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getBlockHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "123=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getBlockHeight()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getBlockHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "168=>168", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getBlockHeight()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getBlockHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "249=>249", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getBlockHeight()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getBlockHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "113=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getBlockHeight()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getBlockHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "118=>118", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getBlockHeight()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getBlockHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "142=>142", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getBlockHeight()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getBlockHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "128=>128", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getBlockHeight()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getBlockHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.processor.RedPunishTxProcessor.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.nuls.consensus.poc.protocol.tx.RedPunishTransaction1.getTxData()=>io.nuls.consensus.poc.protocol.tx.RedPunishTransaction.getTxData()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1874/buggy-version/consensus-module.poc.consensus-poc-base.src.main.java.io.nuls.consensus.poc.tx.validator.RedPunishValidator.java", "BodyUseAPI": [], "Fixed commit": "9089923622d7e95ded8437524202c980c7363d09", "Url": "https://api.github.com/repos/nuls-io/nuls", "Date": "2018-05-30T09:38:08Z"},
{"Line": "50=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "balanceSheet.getCalledUpShareCapitalNotPaid().getPreviousAmount().intValue()=>uk.gov.companieshouse.api.model.accounts.smallfull.BalanceSheetApi.setCalledUpShareCapitalNotPaid(balanceSheet.getCalledUpShareCapitalNotPaid().getPreviousAmount())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3816/buggy-version/src.main.java.uk.gov.companieshouse.web.accounts.transformer.smallfull.impl.BalanceSheetTransformerImpl.java", "BodyUseAPI": [], "Fixed commit": "91847bbbe13e66290c340a624417b98bc28b709a", "Url": "https://api.github.com/repos/companieshouse/company-accounts.web.ch.gov.uk", "Date": "2018-10-04T11:35:43Z"},
{"Line": "36=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "balanceSheet.getCalledUpShareCapitalNotPaid().getCurrentAmount().intValue()=>uk.gov.companieshouse.api.model.accounts.smallfull.BalanceSheetApi.setCalledUpShareCapitalNotPaid(balanceSheet.getCalledUpShareCapitalNotPaid().getCurrentAmount())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3816/buggy-version/src.main.java.uk.gov.companieshouse.web.accounts.transformer.smallfull.impl.BalanceSheetTransformerImpl.java", "BodyUseAPI": [], "Fixed commit": "91847bbbe13e66290c340a624417b98bc28b709a", "Url": "https://api.github.com/repos/companieshouse/company-accounts.web.ch.gov.uk", "Date": "2018-10-04T11:35:43Z"},
{"Line": "199=>199", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.guide.green.green_guide.Dialogs.CityPickerDialog2.setSelectedCityButton(android.widget.Button)=>com.guide.green.green_guide.Dialogs.CityPickerDialog.setSelectedCityButton(android.widget.Button)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5133/buggy-version/app.src.main.java.com.guide.green.green_guide.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "12c21146516107bfc853b284e390d6923cf8df46", "Url": "https://api.github.com/repos/sandunr/GreenGuide-New", "Date": "2018-10-23T02:17:17Z"},
{"Line": "200=>200", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.guide.green.green_guide.Dialogs.CityPickerDialog2.show(getSupportFragmentManager(),java.lang.String)=>com.guide.green.green_guide.Dialogs.CityPickerDialog.show(getSupportFragmentManager(),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5133/buggy-version/app.src.main.java.com.guide.green.green_guide.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "12c21146516107bfc853b284e390d6923cf8df46", "Url": "https://api.github.com/repos/sandunr/GreenGuide-New", "Date": "2018-10-23T02:17:17Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "androidx.preference.DialogPreference.onBindDialogView(android.view.View)=>android.preference.DialogPreference.onBindDialogView(android.view.View)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7886/buggy-version/app.src.main.java.com.edricchan.studybuddy.preference.TimePreference.java", "BodyUseAPI": [], "Fixed commit": "9fbffccdd34ef4a626b639b89713b6c837c4c344", "Url": "https://api.github.com/repos/Chan4077/StudyBuddy", "Date": "2018-07-29T07:32:03Z"},
{"Line": "60=>186", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ballerinalang.langserver.compiler.LSServiceOperationContext.get(DocumentServiceKeys.PARSER_RULE_CONTEXT_KEY)=>org.antlr.v4.runtime.ParserRuleContext.getParent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/648/buggy-version/language-server.modules.langserver-core.src.main.java.org.ballerinalang.langserver.completions.util.CompletionUtil.java", "BodyUseAPI": [], "Fixed commit": "26398e945d5b8f5e94099394a74c33ad26aa15d9", "Url": "https://api.github.com/repos/ldclakmal/ballerina-lang", "Date": "2018-05-09T06:56:14Z"},
{"Line": "60=>186", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "completionContext.get(DocumentServiceKeys.PARSER_RULE_CONTEXT_KEY).getParent()=>org.antlr.v4.runtime.ParserRuleContext.getParent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/648/buggy-version/language-server.modules.langserver-core.src.main.java.org.ballerinalang.langserver.completions.util.CompletionUtil.java", "BodyUseAPI": [], "Fixed commit": "26398e945d5b8f5e94099394a74c33ad26aa15d9", "Url": "https://api.github.com/repos/ldclakmal/ballerina-lang", "Date": "2018-05-09T06:56:14Z"},
{"Line": "105=>105", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.talend.core.utils.TalendQuoteUtils.addQuotesIfNotExist(java.lang.String)=>org.talend.core.utils.TalendQuoteUtils.addPairQuotesIfNotExist(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4752/buggy-version/main.plugins.org.talend.core.runtime.src.main.java.org.talend.core.utils.TalendQuoteUtils.java", "BodyUseAPI": [], "Fixed commit": "8c72fded2ffebad0a1b4a3ec947abd017aea7ebe", "Url": "https://api.github.com/repos/Talend/tcommon-studio-se", "Date": "2018-10-19T02:55:01Z"},
{"Line": "239=>254", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.support.design.widget.Snackbar.setAction(R.string.try_again,android.view.View.OnClickListener)=>android.support.design.widget.Snackbar.setAction(R.string.try_again,android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7732/buggy-version/app.src.main.java.th.ac.mju.maejonavigation.screen.main.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "938d13164fc2a9989c13be73234ce8130a2d8cba", "Url": "https://api.github.com/repos/parkpoom2984/MaejoNavigation", "Date": "2018-09-20T14:58:50Z"},
{"Line": "131=>135", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.jfinal.ext.plugin.activerecord.ModelExt<M>.redisColumnKey(java.lang.String[])=>com.jfinal.ext.plugin.activerecord.ModelExt<M>.redisColumnKey(java.lang.String[],SqlpKit.FLAG.ALL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8272/buggy-version/src.main.java.com.jfinal.ext.plugin.activerecord.ModelExt.java", "BodyUseAPI": [], "Fixed commit": "548eb242370bab41bf0315c2027f04d4de625ed4", "Url": "https://api.github.com/repos/E7du/jfinal-ext3", "Date": "2018-09-26T12:31:04Z"},
{"Line": "156=>160", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.jfinal.ext.plugin.activerecord.ModelExt<M>.redisColumnKey(java.lang.String[])=>com.jfinal.ext.plugin.activerecord.ModelExt<M>.redisColumnKey(java.lang.String[],SqlpKit.FLAG.ONE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8272/buggy-version/src.main.java.com.jfinal.ext.plugin.activerecord.ModelExt.java", "BodyUseAPI": [], "Fixed commit": "548eb242370bab41bf0315c2027f04d4de625ed4", "Url": "https://api.github.com/repos/E7du/jfinal-ext3", "Date": "2018-09-26T12:31:04Z"},
{"Line": "43=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.sunbird.common.request.Request.get(JsonKey.CONTEXT)=>request.getRequest().get(JsonKey.CONTEXT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2975/buggy-version/common-util.src.main.java.org.sunbird.telemetry.util.lmaxdisruptor.WriteEventHandler.java", "BodyUseAPI": [], "Fixed commit": "2e92ffe5d7b3a9958263f5d8276d9f262c0f23e3", "Url": "https://api.github.com/repos/project-sunbird/sunbird-utils", "Date": "2018-03-23T11:16:30Z"},
{"Line": "44=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.sunbird.common.request.Request.get(JsonKey.PARAMS)=>request.getRequest().get(JsonKey.PARAMS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2975/buggy-version/common-util.src.main.java.org.sunbird.telemetry.util.lmaxdisruptor.WriteEventHandler.java", "BodyUseAPI": [], "Fixed commit": "2e92ffe5d7b3a9958263f5d8276d9f262c0f23e3", "Url": "https://api.github.com/repos/project-sunbird/sunbird-utils", "Date": "2018-03-23T11:16:30Z"},
{"Line": "81=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.regex.Matcher.find()=>java.util.regex.Matcher.matches()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5530/buggy-version/app.src.main.java.tmu2018.trunkcarassistant.activity.EditLuggageActivity.java", "BodyUseAPI": [], "Fixed commit": "933ce977d6c24d37519fec89811d87c156a74b93", "Url": "https://api.github.com/repos/Hikamare/TrunkCarAssistant", "Date": "2018-06-07T20:34:22Z"},
{"Line": "115=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.regex.Matcher.find()=>java.util.regex.Matcher.matches()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5530/buggy-version/app.src.main.java.tmu2018.trunkcarassistant.activity.AddTrunkActivity.java", "BodyUseAPI": [], "Fixed commit": "933ce977d6c24d37519fec89811d87c156a74b93", "Url": "https://api.github.com/repos/Hikamare/TrunkCarAssistant", "Date": "2018-06-07T20:34:22Z"},
{"Line": "67=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.regex.Matcher.find()=>java.util.regex.Matcher.matches()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5530/buggy-version/app.src.main.java.tmu2018.trunkcarassistant.activity.AddLuggageActivity.java", "BodyUseAPI": [], "Fixed commit": "933ce977d6c24d37519fec89811d87c156a74b93", "Url": "https://api.github.com/repos/Hikamare/TrunkCarAssistant", "Date": "2018-06-07T20:34:22Z"},
{"Line": "129=>129", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.regex.Matcher.find()=>java.util.regex.Matcher.matches()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5530/buggy-version/app.src.main.java.tmu2018.trunkcarassistant.activity.EditTrunkActivity.java", "BodyUseAPI": [], "Fixed commit": "933ce977d6c24d37519fec89811d87c156a74b93", "Url": "https://api.github.com/repos/Hikamare/TrunkCarAssistant", "Date": "2018-06-07T20:34:22Z"},
{"Line": "74=>79", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "akka.routing.FromConfig.getInstance().props(akka.actor.Props.create(actor))=>akka.routing.FromConfig.getInstance().props(akka.actor.Props)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8891/buggy-version/actor-core.src.main.java.org.sunbird.actor.core.BaseRouter.java", "BodyUseAPI": [], "Fixed commit": "db5ea71fd247bfc10e02bbd6d249d26b174afc5b", "Url": "https://api.github.com/repos/project-sunbird/sunbird-utils", "Date": "2018-06-11T07:45:48Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.sunbird.actor.core.BaseRouter.createActor(org.sunbird.actor.core.ActorContext,java.lang.Class<? extends org.sunbird.actor.core.BaseActor>,java.lang.String[])=>org.sunbird.actor.core.BaseRouter.createActor(org.sunbird.actor.core.ActorContext,java.lang.Class<? extends org.sunbird.actor.core.BaseActor>,java.lang.String[],java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8891/buggy-version/actor-core.src.main.java.org.sunbird.actor.core.BaseRouter.java", "BodyUseAPI": [], "Fixed commit": "db5ea71fd247bfc10e02bbd6d249d26b174afc5b", "Url": "https://api.github.com/repos/project-sunbird/sunbird-utils", "Date": "2018-06-11T07:45:48Z"},
{"Line": "52=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.sunbird.actor.core.BaseRouter.createActor(org.sunbird.actor.core.ActorContext,java.lang.Class<? extends org.sunbird.actor.core.BaseActor>,java.lang.String[])=>org.sunbird.actor.core.BaseRouter.createActor(org.sunbird.actor.core.ActorContext,java.lang.Class<? extends org.sunbird.actor.core.BaseActor>,java.lang.String[],java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8891/buggy-version/actor-core.src.main.java.org.sunbird.actor.core.BaseRouter.java", "BodyUseAPI": [], "Fixed commit": "db5ea71fd247bfc10e02bbd6d249d26b174afc5b", "Url": "https://api.github.com/repos/project-sunbird/sunbird-utils", "Date": "2018-06-11T07:45:48Z"},
{"Line": "51=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.archsystemsinc.qam.repository.QamEnvironmentChangeFormRepository.getOne(java.lang.Long)=>com.archsystemsinc.qam.repository.QamEnvironmentChangeFormRepository.findOne(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1173/buggy-version/src.main.java.com.archsystemsinc.qam.service.QamEnvironmentChangeFormService.java", "BodyUseAPI": [], "Fixed commit": "790cc1429c6a4e13c74f30c90e778d176fea0bcc", "Url": "https://api.github.com/repos/Archsystemsllc/radservices", "Date": "2018-05-08T01:34:58Z"},
{"Line": "106=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.zsihuo.jobspread.core.dao.auto.client.ShopInfoMapper.updateByPrimaryKey(com.zsihuo.jobspread.common.model.auto.ShopInfo)=>com.zsihuo.jobspread.core.dao.auto.client.ShopInfoMapper.updateByPrimaryKeySelective(com.zsihuo.jobspread.common.model.auto.ShopInfo)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7115/buggy-version/jobspread-core.src.main.java.com.zsihuo.jobspread.core.service.ShopInfoService.java", "BodyUseAPI": [], "Fixed commit": "5a3b42fcf14c26e4489e1df8afa0105068eb10f4", "Url": "https://api.github.com/repos/changsong/job-spread", "Date": "2018-01-15T13:40:54Z"},
{"Line": "100=>100", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Set<java.lang.String>.remove(java.lang.String)=>java.util.Set<java.lang.String>.add(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8714/buggy-version/src.PubSub.RegistryServerImpl.java", "BodyUseAPI": [], "Fixed commit": "8651d72cd22ec4f7b70f712c5be200c4fe5225b9", "Url": "https://api.github.com/repos/ayushb666/Publisher_Subscriber", "Date": "2018-05-24T13:01:36Z"},
{"Line": "334=>343", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.concurrent.LinkedBlockingQueue<Message>.add(Message)=>java.util.concurrent.LinkedBlockingQueue<Message>.put(Message)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3154/buggy-version/Assignment1.src.User.java", "BodyUseAPI": [], "Fixed commit": "65805d61e8598033b51da000569090104f00bb1e", "Url": "https://api.github.com/repos/agrzesiak33/Distributed-Systems", "Date": "2018-02-22T01:35:12Z"},
{"Line": "333=>339", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.concurrent.LinkedBlockingQueue<Message>.add(Message)=>java.util.concurrent.LinkedBlockingQueue<Message>.put(Message)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3154/buggy-version/Assignment1.src.User.java", "BodyUseAPI": [], "Fixed commit": "65805d61e8598033b51da000569090104f00bb1e", "Url": "https://api.github.com/repos/agrzesiak33/Distributed-Systems", "Date": "2018-02-22T01:35:12Z"},
{"Line": "64=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.vaadin.ui.ComboBox.setValue(supportedReports.get(0))=>supportedReports.get(0).getTitle()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4669/buggy-version/app.src.com.constellio.app.ui.framework.components.ReportSelector.java", "BodyUseAPI": [], "Fixed commit": "919b96daf42f85126c52ca9e7114f326585c9188", "Url": "https://api.github.com/repos/doculibre/constellio", "Date": "2018-05-07T16:38:51Z"},
{"Line": "37=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Arrays.sort(long[])=>java.util.Arrays.sort(java.math.BigInteger[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6393/buggy-version/competitiveprogramming-java.src.com.mounacheikhna.codeforces.cf439.DevuTheDumbGuy.java", "BodyUseAPI": [], "Fixed commit": "a8ff23f86ae61085e042c49bbd6b361d8ad9dc59", "Url": "https://api.github.com/repos/chemouna/competitiveprogramming", "Date": "2018-01-15T09:14:23Z"},
{"Line": "46=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.PrintWriter.print(long)=>java.io.PrintWriter.print(java.math.BigInteger)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6393/buggy-version/competitiveprogramming-java.src.com.mounacheikhna.codeforces.cf439.DevuTheDumbGuy.java", "BodyUseAPI": [], "Fixed commit": "a8ff23f86ae61085e042c49bbd6b361d8ad9dc59", "Url": "https://api.github.com/repos/chemouna/competitiveprogramming", "Date": "2018-01-15T09:14:23Z"},
{"Line": "463=>463", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<com.briancottrell.hiretv.Movie>.add(com.briancottrell.hiretv.Movie)=>java.util.List<com.briancottrell.hiretv.Movie>.add(com.briancottrell.hiretv.Movie)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5089/buggy-version/app.src.main.java.com.briancottrell.hiretv.MovieList.java", "BodyUseAPI": [], "Fixed commit": "1c162396e44849c70d2ea2df0698d335ad6bcdbf", "Url": "https://api.github.com/repos/BrianCottrell/hire-tv", "Date": "2018-03-08T08:06:41Z"},
{"Line": "76=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.ilite.frc.robot.modules.Intake.setIntakePneumatics(boolean)=>org.ilite.frc.robot.modules.Intake.setIntakePneumaticsOut(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5183/buggy-version/src.main.java.org.ilite.frc.robot.modules.DriverControl.java", "BodyUseAPI": [], "Fixed commit": "51b89474c1c9c7167c3aca8fcc37d622a58b54f9", "Url": "https://api.github.com/repos/iliterobotics/FRC-Robot-2018", "Date": "2018-02-08T23:54:41Z"},
{"Line": "78=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.ilite.frc.robot.modules.Intake.setIntakePneumatics(boolean)=>org.ilite.frc.robot.modules.Intake.setIntakePneumaticsOut(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5183/buggy-version/src.main.java.org.ilite.frc.robot.modules.DriverControl.java", "BodyUseAPI": [], "Fixed commit": "51b89474c1c9c7167c3aca8fcc37d622a58b54f9", "Url": "https://api.github.com/repos/iliterobotics/FRC-Robot-2018", "Date": "2018-02-08T23:54:41Z"},
{"Line": "76=>80", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.logisticscraft.logisticsapi.energy.EnergyInput.receiveEnergy(LogisticBlockFace.NORTH,int,boolean)=>com.logisticscraft.logisticsapi.energy.EnergyInput.receiveEnergy(LogisticBlockFace.NORTH,long,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4497/buggy-version/src.main.java.de.robotricker.electricwires.WireNetwork.java", "BodyUseAPI": [], "Fixed commit": "ba7a0ea9acfc6d921e3a7175d7383276b743fe5b", "Url": "https://api.github.com/repos/RoboTricker/ElectricWires", "Date": "2018-01-14T16:57:47Z"},
{"Line": "76=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<cyruslee487.donteatalone.EventRoomDatabase.Event>.remove(cyruslee487.donteatalone.EventRoomDatabase.Event)=>java.util.List<cyruslee487.donteatalone.EventRoomDatabase.Event>.remove(list.get(i))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9394/buggy-version/app.src.main.java.cyruslee487.donteatalone.Fragments.tab1Fragment.java", "BodyUseAPI": [], "Fixed commit": "4949e40b3450e633850208eb70a5f165be7d8f33", "Url": "https://api.github.com/repos/lemonlee487/DontEatAlone", "Date": "2018-04-21T21:03:15Z"},
{"Line": "75=>75", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cyruslee487.donteatalone.Fragments.tab1Fragment.checkExpiredEvent(cyruslee487.donteatalone.EventRoomDatabase.Event)=>java.util.List<cyruslee487.donteatalone.EventRoomDatabase.Event>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9394/buggy-version/app.src.main.java.cyruslee487.donteatalone.Fragments.tab1Fragment.java", "BodyUseAPI": [], "Fixed commit": "4949e40b3450e633850208eb70a5f165be7d8f33", "Url": "https://api.github.com/repos/lemonlee487/DontEatAlone", "Date": "2018-04-21T21:03:15Z"},
{"Line": "109=>109", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.yakin.fastpager.PageContainer.PageChangeListener.finishPage(com.yakin.fastpager.AbstractPage)=>com.yakin.fastpager.PageContainer.PageChangeListener.finishPage(com.yakin.fastpager.AbstractPage,AbstractPage.CODE_NONE,android.content.Intent,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3423/buggy-version/pager_module.src.main.java.com.yakin.fastpager.PageContainer.java", "BodyUseAPI": [], "Fixed commit": "d4eb4fcc8a7c7d4b5ed29de5f629075475bf4dea", "Url": "https://api.github.com/repos/YakinBlog/FastPager-android", "Date": "2018-07-17T13:35:49Z"},
{"Line": "164=>165", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.ole.planet.takeout.utilities.DialogUtils.getDowloadDialog(getActivity()).items(java.lang.CharSequence[])=>MaterialDialog.Builder.items(java.lang.CharSequence[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2842/buggy-version/app.src.main.java.org.ole.planet.takeout.DashboardFragment.java", "BodyUseAPI": [], "Fixed commit": "3d96e41cc12c6c4cacaac18c29bbc47d91628196", "Url": "https://api.github.com/repos/ole-vi/takeout", "Date": "2018-07-12T09:29:59Z"},
{"Line": "182=>162", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ole.planet.takeout.utilities.DialogUtils.getDowloadDialog(getActivity())=>org.ole.planet.takeout.utilities.Utilities.log((\"List size \" + (db_myLibrary.size())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2842/buggy-version/app.src.main.java.org.ole.planet.takeout.DashboardFragment.java", "BodyUseAPI": [], "Fixed commit": "3d96e41cc12c6c4cacaac18c29bbc47d91628196", "Url": "https://api.github.com/repos/ole-vi/takeout", "Date": "2018-07-12T09:29:59Z"},
{"Line": "182=>162", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.ole.planet.takeout.utilities.DialogUtils.getDowloadDialog(getActivity()).show()=>org.ole.planet.takeout.utilities.Utilities.log((\"List size \" + (db_myLibrary.size())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2842/buggy-version/app.src.main.java.org.ole.planet.takeout.DashboardFragment.java", "BodyUseAPI": [], "Fixed commit": "3d96e41cc12c6c4cacaac18c29bbc47d91628196", "Url": "https://api.github.com/repos/ole-vi/takeout", "Date": "2018-07-12T09:29:59Z"},
{"Line": "116=>118", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.lang.String>.add(jiraConfig.getAutomationLabel())=>java.util.Set<java.lang.String>.add(jiraConfig.getAutomationLabel())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6175/buggy-version/src.me.shib.lib.jirabugsbuddy.VulnerabilityIssueHandler.java", "BodyUseAPI": [], "Fixed commit": "f22d8933c23651e7d4ba0445811658909d451560", "Url": "https://api.github.com/repos/shibme/jira-bugs-buddy", "Date": "2018-05-19T06:59:21Z"},
{"Line": "128=>131", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.lang.String>.toArray()=>java.util.Set<java.lang.String>.toArray()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6175/buggy-version/src.me.shib.lib.jirabugsbuddy.VulnerabilityIssueHandler.java", "BodyUseAPI": [], "Fixed commit": "f22d8933c23651e7d4ba0445811658909d451560", "Url": "https://api.github.com/repos/shibme/jira-bugs-buddy", "Date": "2018-05-19T06:59:21Z"},
{"Line": "53=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.lothrazar.cyclicmagic.item.storagesack.ItemStorageBag.getId(player.getHeldItemMainhand())=>com.lothrazar.cyclicmagic.item.storagesack.ItemStorageBag.getId(net.minecraft.item.ItemStack)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8919/buggy-version/src.main.java.com.lothrazar.cyclicmagic.item.storagesack.ContainerStorage.java", "BodyUseAPI": [], "Fixed commit": "6a60672f71c2c74110efd5894ebc57075b7788da", "Url": "https://api.github.com/repos/PrinceOfAmber/Cyclic", "Date": "2018-05-26T19:33:49Z"},
{"Line": "51=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.github.jjobes.slidedaytimepicker.DayFragment.getTargetFragment()=>com.github.jjobes.slidedaytimepicker.DayFragment.getParentFragment()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1455/buggy-version/slideDayTimePicker.src.main.java.com.github.jjobes.slidedaytimepicker.DayFragment.java", "BodyUseAPI": [], "Fixed commit": "911c374c513da293a60e64ff621d073ee20c7ab4", "Url": "https://api.github.com/repos/huzaifa0024/SlideDayTimePicker", "Date": "2018-03-07T15:40:11Z"},
{"Line": "26=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.sunbird.actor.router.BackgroundRequestRouter.initActors(getContext(),java.lang.String)=>org.sunbird.actor.router.BackgroundRequestRouter.initActors(getContext(),java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7673/buggy-version/actor-core.src.main.java.org.sunbird.actor.router.BackgroundRequestRouter.java", "BodyUseAPI": [], "Fixed commit": "f3f290f9de1047785be0f9b1753f72593c10a995", "Url": "https://api.github.com/repos/project-sunbird/sunbird-utils", "Date": "2018-06-05T19:59:17Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.sunbird.actor.router.RequestRouter.initActors(getContext(),java.lang.String)=>org.sunbird.actor.router.RequestRouter.initActors(getContext(),java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7673/buggy-version/actor-core.src.main.java.org.sunbird.actor.router.RequestRouter.java", "BodyUseAPI": [], "Fixed commit": "f3f290f9de1047785be0f9b1753f72593c10a995", "Url": "https://api.github.com/repos/project-sunbird/sunbird-utils", "Date": "2018-06-05T19:59:17Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.sunbird.actor.core.BaseRouter.createActor(org.sunbird.actor.core.ActorContext,java.lang.Class<? extends org.sunbird.actor.core.BaseActor>,java.lang.String[])=>org.sunbird.actor.core.BaseRouter.createActor(org.sunbird.actor.core.ActorContext,java.lang.Class<? extends org.sunbird.actor.core.BaseActor>,java.lang.String[],java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7673/buggy-version/actor-core.src.main.java.org.sunbird.actor.core.BaseRouter.java", "BodyUseAPI": [], "Fixed commit": "f3f290f9de1047785be0f9b1753f72593c10a995", "Url": "https://api.github.com/repos/project-sunbird/sunbird-utils", "Date": "2018-06-05T19:59:17Z"},
{"Line": "52=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.sunbird.actor.core.BaseRouter.createActor(org.sunbird.actor.core.ActorContext,java.lang.Class<? extends org.sunbird.actor.core.BaseActor>,java.lang.String[])=>org.sunbird.actor.core.BaseRouter.createActor(org.sunbird.actor.core.ActorContext,java.lang.Class<? extends org.sunbird.actor.core.BaseActor>,java.lang.String[],java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7673/buggy-version/actor-core.src.main.java.org.sunbird.actor.core.BaseRouter.java", "BodyUseAPI": [], "Fixed commit": "f3f290f9de1047785be0f9b1753f72593c10a995", "Url": "https://api.github.com/repos/project-sunbird/sunbird-utils", "Date": "2018-06-05T19:59:17Z"},
{"Line": "254=>254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ed_simulation.SimResults.registerAbandonment(int)=>ed_simulation.SimResults.registerAbandonment(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3569/buggy-version/src.ed_simulation.TimeDependentSimResults.java", "BodyUseAPI": [], "Fixed commit": "58d9c2a444159870f2732c1e5975fb95c138fec7", "Url": "https://api.github.com/repos/LivePersonInc/ED_Simulation", "Date": "2018-09-06T08:51:39Z"},
{"Line": "254=>254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ed_simulation.TimeDependentSimResults.getCurrTimeSimResult(double)=>ed_simulation.Patient.getArrivalTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3569/buggy-version/src.ed_simulation.TimeDependentSimResults.java", "BodyUseAPI": [], "Fixed commit": "58d9c2a444159870f2732c1e5975fb95c138fec7", "Url": "https://api.github.com/repos/LivePersonInc/ED_Simulation", "Date": "2018-09-06T08:51:39Z"},
{"Line": "84=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.dogethereum.agents.core.SuperblockChallengerClient.invalidate(org.dogethereum.agents.core.dogecoin.Keccak256Hash,org.dogethereum.agents.core.SuperblockChallengerClient)=>org.dogethereum.agents.core.SuperblockChallengerClient.checkClaimFinished(org.dogethereum.agents.core.dogecoin.Keccak256Hash)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1621/buggy-version/src.main.java.org.dogethereum.agents.core.SuperblockChallengerClient.java", "BodyUseAPI": [], "Fixed commit": "77e6079e5805b2d4d4907ab3e01f6dc2ca3c53ce", "Url": "https://api.github.com/repos/dogethereum/dogethereum-agents", "Date": "2018-08-15T16:09:15Z"},
{"Line": "19=>19", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "br.com.restful.dao.TreinosDAO.getInstance().listarTodos()=>br.com.restful.dao.TreinosDAO.getInstance().listarTodos(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/962/buggy-version/src.main.java.br.com.restful.controller.TreinosController.java", "BodyUseAPI": [], "Fixed commit": "5bdc4c9257f46ec58f9a1dd21cf695eca7c840a6", "Url": "https://api.github.com/repos/maikeuduarte/howToMake", "Date": "2018-04-25T01:09:08Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "br.com.restful.controller.TreinosController.listarTodos()=>br.com.restful.controller.TreinosController.listarTodos(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/962/buggy-version/src.main.java.br.com.restful.resource.TreinosResource.java", "BodyUseAPI": [], "Fixed commit": "5bdc4c9257f46ec58f9a1dd21cf695eca7c840a6", "Url": "https://api.github.com/repos/maikeuduarte/howToMake", "Date": "2018-04-25T01:09:08Z"},
{"Line": "109=>109", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "br.com.restful.model.Exercicios.setDescricao(java.lang.String)=>br.com.restful.model.Exercicios.setLink(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/962/buggy-version/src.main.java.br.com.restful.dao.ExerciciosDAO.java", "BodyUseAPI": [], "Fixed commit": "5bdc4c9257f46ec58f9a1dd21cf695eca7c840a6", "Url": "https://api.github.com/repos/maikeuduarte/howToMake", "Date": "2018-04-25T01:09:08Z"},
{"Line": "19=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.replace(java.lang.String,java.lang.String)=>Album.setJSONPath(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/692/buggy-version/src.Album.java", "BodyUseAPI": [], "Fixed commit": "7b8796d32f86790d0d0cb80a15074d9c85cba01b", "Url": "https://api.github.com/repos/Dejai/JF_ConfigTool", "Date": "2018-03-28T19:47:12Z"},
{"Line": "102=>102", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.view.View.setAlpha(int)=>android.view.View.setAlpha((me.zhanghai.android.douya.util.ViewUtils.isVisible(view) ? view.getAlpha() : 0))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6769/buggy-version/app.src.main.java.me.zhanghai.android.douya.util.ViewUtils.java", "BodyUseAPI": [], "Fixed commit": "3f9ce81123a8e8490c5c7dea52cf445165e30a3c", "Url": "https://api.github.com/repos/DreaminginCodeZH/Douya", "Date": "2018-04-04T23:52:23Z"},
{"Line": "90=>90", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.Ben12345rocks.VotingPlugin.Config.Config.getInstance().getVotePartyVotesRequired()=>com.Ben12345rocks.VotingPlugin.VoteParty.VoteParty.getVotesRequired()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4760/buggy-version/VotingPlugin.src.com.Ben12345rocks.VotingPlugin.VoteParty.VoteParty.java", "BodyUseAPI": [], "Fixed commit": "f8ee0bba1701e9759e484ed6c129bae0b8fc78b6", "Url": "https://api.github.com/repos/Ben12345rocks/VotingPlugin", "Date": "2018-03-22T20:52:05Z"},
{"Line": "113=>112", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.Ben12345rocks.VotingPlugin.Config.Config.getInstance().getVotePartyVotesRequired()=>com.Ben12345rocks.VotingPlugin.VoteParty.VoteParty.getInstance().getVotesRequired()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4760/buggy-version/VotingPlugin.src.com.Ben12345rocks.VotingPlugin.Util.PlaceHolders.PlaceHolders.java", "BodyUseAPI": [], "Fixed commit": "f8ee0bba1701e9759e484ed6c129bae0b8fc78b6", "Url": "https://api.github.com/repos/Ben12345rocks/VotingPlugin", "Date": "2018-03-22T20:52:05Z"},
{"Line": "113=>112", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.Ben12345rocks.VotingPlugin.Config.Config.getInstance()=>com.Ben12345rocks.VotingPlugin.VoteParty.VoteParty.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4760/buggy-version/VotingPlugin.src.com.Ben12345rocks.VotingPlugin.Util.PlaceHolders.PlaceHolders.java", "BodyUseAPI": [], "Fixed commit": "f8ee0bba1701e9759e484ed6c129bae0b8fc78b6", "Url": "https://api.github.com/repos/Ben12345rocks/VotingPlugin", "Date": "2018-03-22T20:52:05Z"},
{"Line": "113=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.Ben12345rocks.VotingPlugin.Config.Config.getInstance()=>com.Ben12345rocks.VotingPlugin.VoteParty.VoteParty.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4760/buggy-version/VotingPlugin.src.com.Ben12345rocks.VotingPlugin.Util.PlaceHolders.PlaceHolders.java", "BodyUseAPI": [], "Fixed commit": "f8ee0bba1701e9759e484ed6c129bae0b8fc78b6", "Url": "https://api.github.com/repos/Ben12345rocks/VotingPlugin", "Date": "2018-03-22T20:52:05Z"},
{"Line": "25=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.badlogic.gdx.graphics.g2d.Batch.draw(com.badlogic.gdx.graphics.Texture,getX(),getY())=>com.badlogic.gdx.graphics.g2d.Batch.draw(com.badlogic.gdx.graphics.Texture,getX(),getY(),((texture.getWidth()) / 2),((texture.getHeight()) / 2),texture.getWidth(),texture.getHeight(),int,int,getRotation(),int,int,texture.getWidth(),texture.getHeight(),boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1234/buggy-version/common.src.main.java.de.fragstyle.spacehunters.common.drawing.Ship.java", "BodyUseAPI": [], "Fixed commit": "cb982b1ea0515efbd5495cd049b9848e8b436d23", "Url": "https://api.github.com/repos/randombyte-developer/space-hunters", "Date": "2018-02-01T20:12:51Z"},
{"Line": "402=>407", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.gwt.user.client.ui.FlowPanel.add(com.google.gwt.user.client.ui.Label)=>com.google.gwt.user.client.ui.FlowPanel.add(com.google.gwt.user.client.ui.HTML)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8656/buggy-version/roda-ui.roda-wui.src.main.java.org.roda.wui.client.ingest.process.ShowJob.java", "BodyUseAPI": [], "Fixed commit": "83ad61df8a3f2b7b347af3092a222ff5120cfabd", "Url": "https://api.github.com/repos/keeps/roda", "Date": "2018-06-04T13:49:20Z"},
{"Line": "232=>232", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.time.ZoneId.systemDefault()=>java.time.ZoneId.of(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/429/buggy-version/src.main.java.com.pure.service.web.rest.ClassArrangementResource.java", "BodyUseAPI": [], "Fixed commit": "2543c6b7b8806108544901f807f91e5620d7d994", "Url": "https://api.github.com/repos/bluecitymoon/simple-service", "Date": "2018-09-27T14:32:36Z"},
{"Line": "170=>171", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "co.sisu.mobile.api.AsyncServerEventListener.onEventCompleted(co.sisu.mobile.models.JWTObject,java.lang.String)=>co.sisu.mobile.api.AsyncServerEventListener.onEventFailed(<nulltype>,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3681/buggy-version/Sisu.app.src.main.java.co.sisu.mobile.api.AsyncAuthenticator.java", "BodyUseAPI": [], "Fixed commit": "53dd814f5bac44c54f5c384c4aa5e54a731b660b", "Url": "https://api.github.com/repos/sisuco/sisu-android", "Date": "2018-05-22T00:34:49Z"},
{"Line": "170=>171", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "co.sisu.mobile.api.AsyncServerEventListener.onEventCompleted(co.sisu.mobile.models.JWTObject,java.lang.String)=>co.sisu.mobile.api.AsyncServerEventListener.onEventFailed(<nulltype>,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3681/buggy-version/Sisu.app.src.main.java.co.sisu.mobile.api.AsyncAuthenticator.java", "BodyUseAPI": [], "Fixed commit": "53dd814f5bac44c54f5c384c4aa5e54a731b660b", "Url": "https://api.github.com/repos/sisuco/sisu-android", "Date": "2018-05-22T00:34:49Z"},
{"Line": "77=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory.createObject(java.net.URI,org.apache.jena.rdf.model.Model)=>edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory.createOrTransformObject(java.net.URI,org.apache.jena.rdf.model.Model)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9826/buggy-version/fcrepo-clients.src.main.java.edu.unc.lib.dl.fcrepo4.RepositoryInitializer.java", "BodyUseAPI": [], "Fixed commit": "88287ea1b531c7efea9d48b40f654d5a2352ebd8", "Url": "https://api.github.com/repos/UNC-Libraries/Carolina-Digital-Repository", "Date": "2018-05-31T15:54:23Z"},
{"Line": "157=>162", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.media.module.audio.AudioManagerModule.AudioPlayerAsync.execute()=>com.media.module.audio.AudioManagerModule.AudioPlayerAsync.cancel(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/676/buggy-version/android.src.main.java.com.media.module.audio.AudioManagerModule.java", "BodyUseAPI": [], "Fixed commit": "15e5eefbc71053cbd4e3817c01e9b07f5a636834", "Url": "https://api.github.com/repos/renanpupin/react-native-media", "Date": "2018-03-07T19:58:45Z"},
{"Line": "685=>689", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.exist.util.RuleBasedCollator.freeze()=>org.exist.util.Collator.freeze()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6723/buggy-version/src.org.exist.util.Collations.java", "BodyUseAPI": [], "Fixed commit": "e0490d84ba230172a431a54bdca588074044ed13", "Url": "https://api.github.com/repos/RemiKoutcherawy/exist", "Date": "2017-12-24T19:58:01Z"},
{"Line": "118=>118", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Player.displayLineInRed(int,int)=>Player.displayLineInColor(int,int,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9663/buggy-version/Player.java", "BodyUseAPI": [], "Fixed commit": "4c199f9f523c0c8197249a77fe9e317114efaac2", "Url": "https://api.github.com/repos/CodecoolKRK20173/battle-of-cards-cygany", "Date": "2018-04-26T10:38:53Z"},
{"Line": "36=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Card.Color.equals(Card.Color)=>Color.equals(Color)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9663/buggy-version/Card.java", "BodyUseAPI": [], "Fixed commit": "4c199f9f523c0c8197249a77fe9e317114efaac2", "Url": "https://api.github.com/repos/CodecoolKRK20173/battle-of-cards-cygany", "Date": "2018-04-26T10:38:53Z"},
{"Line": "54=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Card.Color.equals(Card.Color)=>Color.equals(Color.RED)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9663/buggy-version/Card.java", "BodyUseAPI": [], "Fixed commit": "4c199f9f523c0c8197249a77fe9e317114efaac2", "Url": "https://api.github.com/repos/CodecoolKRK20173/battle-of-cards-cygany", "Date": "2018-04-26T10:38:53Z"},
{"Line": "86=>86", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Card.Color.equals(Card.Color)=>Color.equals(Color.RED)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9663/buggy-version/Card.java", "BodyUseAPI": [], "Fixed commit": "4c199f9f523c0c8197249a77fe9e317114efaac2", "Url": "https://api.github.com/repos/CodecoolKRK20173/battle-of-cards-cygany", "Date": "2018-04-26T10:38:53Z"},
{"Line": "43=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.regex.Matcher.group()=>java.lang.String.toLowerCase()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2688/buggy-version/modules.TextHandling.WordCounter.src.main.java.ru.edu.java.tasks.WordCounterImp.java", "BodyUseAPI": [], "Fixed commit": "7d2e5aa46e55da5a44a430dccaee154ea8d6d57e", "Url": "https://api.github.com/repos/evgenyrybishew/studentTasks", "Date": "2018-06-09T13:26:15Z"},
{"Line": "444=>450", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.talend.sdk.component.studio.metadata.provider.TaCoKitMetadataContentProvider.MetadataTaCoKitChildrenNodeVisitor.getTopLevelNodes()=>org.talend.sdk.component.studio.metadata.provider.TaCoKitMetadataContentProvider.MetadataTaCoKitChildrenNodeVisitor.getTopLevelNodes()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/173/buggy-version/component-studio-integration.src.main.java.org.talend.sdk.component.studio.metadata.provider.TaCoKitMetadataContentProvider.java", "BodyUseAPI": [], "Fixed commit": "f25bd807a7043262d22b2d513da695d73771257c", "Url": "https://api.github.com/repos/Talend/component-runtime", "Date": "2018-02-23T14:22:06Z"},
{"Line": "365=>364", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.android.minmaxagent.fruit.FruitGame.advanceTurn()=>com.example.android.minmaxagent.fruit.FruitGame.advanceTurnIfPossible()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6915/buggy-version/app.src.main.java.com.example.android.minmaxagent.GameActivity.java", "BodyUseAPI": [], "Fixed commit": "3328be5d373de334089721e7c977500b79276672", "Url": "https://api.github.com/repos/RohitSahasrabuddhe/MinMaxAgent", "Date": "2018-01-06T19:19:20Z"},
{"Line": "334=>333", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.android.minmaxagent.fruit.FruitGame.advanceTurn()=>com.example.android.minmaxagent.fruit.FruitGame.advanceTurnIfPossible()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6915/buggy-version/app.src.main.java.com.example.android.minmaxagent.GameActivity.java", "BodyUseAPI": [], "Fixed commit": "3328be5d373de334089721e7c977500b79276672", "Url": "https://api.github.com/repos/RohitSahasrabuddhe/MinMaxAgent", "Date": "2018-01-06T19:19:20Z"},
{"Line": "585=>596", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.android.minmaxagent.fruit.FruitGame.advanceTurn()=>com.example.android.minmaxagent.fruit.FruitGame.advanceTurnIfPossible()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6915/buggy-version/app.src.main.java.com.example.android.minmaxagent.fruit.FruitGame.java", "BodyUseAPI": [], "Fixed commit": "3328be5d373de334089721e7c977500b79276672", "Url": "https://api.github.com/repos/RohitSahasrabuddhe/MinMaxAgent", "Date": "2018-01-06T19:19:20Z"},
{"Line": "411=>412", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.nametagedit.plugin.NametagHandler.8.formatWithPlaceholders(org.bukkit.entity.Player,nametag.getSuffix())=>com.nametagedit.plugin.NametagHandler.8.formatWithPlaceholders(org.bukkit.entity.Player,nametag.getSuffix(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7817/buggy-version/src.main.java.com.nametagedit.plugin.NametagHandler.java", "BodyUseAPI": [], "Fixed commit": "f2c1cdaa35ad3aeebb03387a8a34649fa9bc1a10", "Url": "https://api.github.com/repos/sgtcaze/NametagEdit", "Date": "2018-02-04T18:11:31Z"},
{"Line": "411=>411", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.nametagedit.plugin.NametagHandler.8.formatWithPlaceholders(org.bukkit.entity.Player,nametag.getPrefix())=>com.nametagedit.plugin.NametagHandler.8.formatWithPlaceholders(org.bukkit.entity.Player,nametag.getPrefix(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7817/buggy-version/src.main.java.com.nametagedit.plugin.NametagHandler.java", "BodyUseAPI": [], "Fixed commit": "f2c1cdaa35ad3aeebb03387a8a34649fa9bc1a10", "Url": "https://api.github.com/repos/sgtcaze/NametagEdit", "Date": "2018-02-04T18:11:31Z"},
{"Line": "418=>419", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.nametagedit.plugin.utils.Utils.format((((nametag.getPrefix()) + (player.getName())) + (nametag.getSuffix())))=>com.nametagedit.plugin.NametagHandler.8.formatWithPlaceholders(org.bukkit.entity.Player,(((nametag.getPrefix()) + (player.getName())) + (nametag.getSuffix())),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7817/buggy-version/src.main.java.com.nametagedit.plugin.NametagHandler.java", "BodyUseAPI": [], "Fixed commit": "f2c1cdaa35ad3aeebb03387a8a34649fa9bc1a10", "Url": "https://api.github.com/repos/sgtcaze/NametagEdit", "Date": "2018-02-04T18:11:31Z"},
{"Line": "150=>151", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "main.MainServer.getChat(c.getChatName())=>main.MainServer.getChat(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8967/buggy-version/src.main.ClientThread.java", "BodyUseAPI": [], "Fixed commit": "e9fa516ac84fa528baf0e2fa210918ad4222ed3e", "Url": "https://api.github.com/repos/AkredD/ChatDogServer", "Date": "2018-01-15T00:12:39Z"},
{"Line": "162=>163", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "main.MainServer.getChat(c.getChatName())=>main.MainServer.getChat(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8967/buggy-version/src.main.ClientThread.java", "BodyUseAPI": [], "Fixed commit": "e9fa516ac84fa528baf0e2fa210918ad4222ed3e", "Url": "https://api.github.com/repos/AkredD/ChatDogServer", "Date": "2018-01-15T00:12:39Z"},
{"Line": "215=>224", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "((org.teiid.query.sql.symbol.Reference) (entry.getValue())).getExpression()=>RuleMergeCriteria.ReferenceReplacementVisitor.replaceExpression(entry.getValue())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2950/buggy-version/engine.src.main.java.org.teiid.query.optimizer.relational.rules.RuleMergeVirtual.java", "BodyUseAPI": [], "Fixed commit": "49f067309bec95f264a2537737e46b83877de032", "Url": "https://api.github.com/repos/zmyer/teiid", "Date": "2018-03-05T17:13:18Z"},
{"Line": "559=>556", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "de.cismet.tools.gui.log4jquickconfig.Log4JQuickConfig.configure4LumbermillOn(java.lang.String,int)=>de.cismet.tools.gui.log4jquickconfig.Log4JQuickConfig.configure4LumbermillOn(java.lang.String,int,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5160/buggy-version/src.main.java.de.cismet.tools.gui.log4jquickconfig.Log4JQuickConfig.java", "BodyUseAPI": [], "Fixed commit": "6ef98776d5396e77389f98626359feb52b263752", "Url": "https://api.github.com/repos/cismet/cismet-gui-commons", "Date": "2018-08-03T14:26:55Z"},
{"Line": "33=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<java.lang.Integer>.clear()=>java.util.Arrays.setAll(int[],java.util.function.IntUnaryOperator)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1352/buggy-version/src.ru.sbrf.Solution.java", "BodyUseAPI": [], "Fixed commit": "85d9cd075cf8e932e9718384c495d32d963b98ec", "Url": "https://api.github.com/repos/cherkovskiyandrey/PriorityQueueAndHashSort", "Date": "2018-01-17T10:44:23Z"},
{"Line": "85=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "renderer.Color.scale((ks * (java.lang.Math.pow(java.lang.Math.abs(v.dot_product(r)), nShininess))))=>renderer.Color.scale(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9822/buggy-version/src.renderer.Render.java", "BodyUseAPI": [], "Fixed commit": "f1fc722d91acec69fa5cea180465574e8a54adc7", "Url": "https://api.github.com/repos/yeo4/Jct-Software-Engineering-Project", "Date": "2018-05-23T16:20:29Z"},
{"Line": "85=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.Math.abs(v.dot_product(r))=>java.lang.Math.abs(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9822/buggy-version/src.renderer.Render.java", "BodyUseAPI": [], "Fixed commit": "f1fc722d91acec69fa5cea180465574e8a54adc7", "Url": "https://api.github.com/repos/yeo4/Jct-Software-Engineering-Project", "Date": "2018-05-23T16:20:29Z"},
{"Line": "139=>139", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "MaSuiteCore.db.hikari.getConnection()=>db.hikari.getConnection()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5714/buggy-version/src.main.java.fi.matiaspaavilainen.masuitewarps.Warp.java", "BodyUseAPI": [], "Fixed commit": "63cedcc9a7c1c05f79a0e59eedf907c8cb3eabed", "Url": "https://api.github.com/repos/masagameplay/MaSuiteWarps", "Date": "2018-10-03T13:04:57Z"},
{"Line": "91=>91", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "MaSuiteCore.db.hikari.getConnection()=>db.hikari.getConnection()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5714/buggy-version/src.main.java.fi.matiaspaavilainen.masuitewarps.Warp.java", "BodyUseAPI": [], "Fixed commit": "63cedcc9a7c1c05f79a0e59eedf907c8cb3eabed", "Url": "https://api.github.com/repos/masagameplay/MaSuiteWarps", "Date": "2018-10-03T13:04:57Z"},
{"Line": "232=>232", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mx.com.cesarcorona.directorio.pojo.Negocio.getHora_apertura()=>mx.com.cesarcorona.directorio.activities.CloseTomeActivity.isOpenNow(mx.com.cesarcorona.directorio.pojo.Negocio)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6394/buggy-version/app.src.main.java.mx.com.cesarcorona.directorio.activities.NegocioDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "4e4923af4ef967b24985f1653d730b0ebaf5ab40", "Url": "https://api.github.com/repos/cccorona/DirectorioApp", "Date": "2018-02-15T18:42:39Z"},
{"Line": "111=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "NotificationCompat.Builder.setPriority(NotificationCompat.PRIORITY_MAX)=>NotificationCompat.Builder.setPriority(NotificationCompat.PRIORITY_LOW)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7897/buggy-version/agentweb-download.src.main.java.com.just.agentweb.download.DownloadNotifier.java", "BodyUseAPI": [], "Fixed commit": "3e5e5dd3039225d8e12b23e528ebc275445abb1d", "Url": "https://api.github.com/repos/Justson/AgentWeb", "Date": "2018-03-08T13:09:13Z"},
{"Line": "24=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Direction.UP.getDelta()=>com.robotzero.counter.domain.Direction.getDelta()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1923/buggy-version/src.main.java.com.robotzero.counter.domain.clock.TickMode.java", "BodyUseAPI": [], "Fixed commit": "dda8af7df541cedd328d9358b089b72c8a4dd081", "Url": "https://api.github.com/repos/robotzero/FXCounter", "Date": "2018-08-28T20:30:41Z"},
{"Line": "27=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Direction.UP.getDelta()=>com.robotzero.counter.domain.Direction.getDelta()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1923/buggy-version/src.main.java.com.robotzero.counter.domain.clock.TickMode.java", "BodyUseAPI": [], "Fixed commit": "dda8af7df541cedd328d9358b089b72c8a4dd081", "Url": "https://api.github.com/repos/robotzero/FXCounter", "Date": "2018-08-28T20:30:41Z"},
{"Line": "128=>129", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "app.metatron.discovery.domain.mdm.catalog.Catalog.getId()=>app.metatron.discovery.domain.mdm.catalog.CatalogTreeRepository.deteleAllTree(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5225/buggy-version/discovery-server.src.main.java.app.metatron.discovery.domain.mdm.catalog.CatalogTreeService.java", "BodyUseAPI": [], "Fixed commit": "b66810638c3d1d06868a8126b5317cf06f3a00fa", "Url": "https://api.github.com/repos/metatron-app/metatron-discovery", "Date": "2018-09-14T07:44:57Z"},
{"Line": "128=>129", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "app.metatron.discovery.domain.mdm.catalog.CatalogTreeRepository.deteleAllTree(catalog.getId())=>app.metatron.discovery.domain.mdm.catalog.CatalogTreeRepository.deteleAllTree(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5225/buggy-version/discovery-server.src.main.java.app.metatron.discovery.domain.mdm.catalog.CatalogTreeService.java", "BodyUseAPI": [], "Fixed commit": "b66810638c3d1d06868a8126b5317cf06f3a00fa", "Url": "https://api.github.com/repos/metatron-app/metatron-discovery", "Date": "2018-09-14T07:44:57Z"},
{"Line": "127=>128", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "app.metatron.discovery.domain.mdm.catalog.CatalogRepository.delete(catalogTree.getId().getDescendant())=>app.metatron.discovery.domain.mdm.catalog.CatalogRepository.delete(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5225/buggy-version/discovery-server.src.main.java.app.metatron.discovery.domain.mdm.catalog.CatalogTreeService.java", "BodyUseAPI": [], "Fixed commit": "b66810638c3d1d06868a8126b5317cf06f3a00fa", "Url": "https://api.github.com/repos/metatron-app/metatron-discovery", "Date": "2018-09-14T07:44:57Z"},
{"Line": "277=>284", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openmrs.Order.getDateActivated()=>org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.getActiveOrderSortDate(org.openmrs.Order)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7350/buggy-version/omod-1.10.src.main.java.org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.java", "BodyUseAPI": [], "Fixed commit": "9e2d7930b9a748ac5f4c0f2e995613db2f4167c4", "Url": "https://api.github.com/repos/fanyui/openmrs-module-webservices.rest", "Date": "2018-06-01T10:12:45Z"},
{"Line": "277=>284", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openmrs.Order.getDateActivated()=>org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.getActiveOrderSortDate(org.openmrs.Order)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7350/buggy-version/omod-1.10.src.main.java.org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.java", "BodyUseAPI": [], "Fixed commit": "9e2d7930b9a748ac5f4c0f2e995613db2f4167c4", "Url": "https://api.github.com/repos/fanyui/openmrs-module-webservices.rest", "Date": "2018-06-01T10:12:45Z"},
{"Line": "277=>284", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openmrs.Order.getDateActivated()=>org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.getActiveOrderSortDate(org.openmrs.Order)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7350/buggy-version/omod-1.10.src.main.java.org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.java", "BodyUseAPI": [], "Fixed commit": "9e2d7930b9a748ac5f4c0f2e995613db2f4167c4", "Url": "https://api.github.com/repos/fanyui/openmrs-module-webservices.rest", "Date": "2018-06-01T10:12:45Z"},
{"Line": "278=>284", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openmrs.Order.getDateActivated()=>org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.getActiveOrderSortDate(org.openmrs.Order)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7350/buggy-version/omod-1.10.src.main.java.org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.java", "BodyUseAPI": [], "Fixed commit": "9e2d7930b9a748ac5f4c0f2e995613db2f4167c4", "Url": "https://api.github.com/repos/fanyui/openmrs-module-webservices.rest", "Date": "2018-06-01T10:12:45Z"},
{"Line": "273=>280", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openmrs.Order.getDateStopped()=>org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.getUsableDate(org.openmrs.Order)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7350/buggy-version/omod-1.10.src.main.java.org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.java", "BodyUseAPI": [], "Fixed commit": "9e2d7930b9a748ac5f4c0f2e995613db2f4167c4", "Url": "https://api.github.com/repos/fanyui/openmrs-module-webservices.rest", "Date": "2018-06-01T10:12:45Z"},
{"Line": "274=>280", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openmrs.Order.getDateStopped()=>org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.getUsableDate(org.openmrs.Order)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7350/buggy-version/omod-1.10.src.main.java.org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.java", "BodyUseAPI": [], "Fixed commit": "9e2d7930b9a748ac5f4c0f2e995613db2f4167c4", "Url": "https://api.github.com/repos/fanyui/openmrs-module-webservices.rest", "Date": "2018-06-01T10:12:45Z"},
{"Line": "273=>280", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openmrs.Order.getDateStopped()=>org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.getUsableDate(org.openmrs.Order)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7350/buggy-version/omod-1.10.src.main.java.org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.java", "BodyUseAPI": [], "Fixed commit": "9e2d7930b9a748ac5f4c0f2e995613db2f4167c4", "Url": "https://api.github.com/repos/fanyui/openmrs-module-webservices.rest", "Date": "2018-06-01T10:12:45Z"},
{"Line": "273=>280", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openmrs.Order.getDateStopped()=>org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.getUsableDate(org.openmrs.Order)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7350/buggy-version/omod-1.10.src.main.java.org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_10.OrderResource1_10.java", "BodyUseAPI": [], "Fixed commit": "9e2d7930b9a748ac5f4c0f2e995613db2f4167c4", "Url": "https://api.github.com/repos/fanyui/openmrs-module-webservices.rest", "Date": "2018-06-01T10:12:45Z"},
{"Line": "126=>126", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "javax.swing.JFrame.add(javax.swing.JLabel)=>javax.swing.JFrame.getContentPane()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5021/buggy-version/src.view.EmpAppWindow.java", "BodyUseAPI": [], "Fixed commit": "eb3402fa104ff4076ccfb6f530e17987925f81f7", "Url": "https://api.github.com/repos/jskainos/shesh2today", "Date": "2018-06-28T14:51:35Z"},
{"Line": "75=>75", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.example.nils_martin.hubba.HubbaModel.getInstance().setUsers(gson.fromJson(json, type))=>com.example.nils_martin.hubba.HubbaModel.getInstance().setUsers(((java.util.ArrayList<com.example.nils_martin.hubba.User>) (gson.fromJson(json, type))))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7218/buggy-version/app.src.main.java.com.example.nils_martin.hubba.MainActivityController.java", "BodyUseAPI": [], "Fixed commit": "9e9ba444f46029f201dfe3f8831b4b6c653d6873", "Url": "https://api.github.com/repos/Ponnis/Hubba", "Date": "2018-10-11T12:51:49Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.mycompany.websocket.server.ListUsersEndpoint.sendToOne(javax.websocket.Session,java.lang.String)=>com.mycompany.websocket.server.ListUsersEndpoint.sendToOne(javax.websocket.Session)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5721/buggy-version/src.main.java.com.mycompany.websocket.server.ListUsersEndpoint.java", "BodyUseAPI": [], "Fixed commit": "e705703481e0970eac80125146f04e58070a390a", "Url": "https://api.github.com/repos/Szopenix/websocket", "Date": "2018-01-14T23:12:24Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.mycompany.websocket.server.ListUsersEndpoint.sendToAll(javax.websocket.Session,java.lang.String)=>com.mycompany.websocket.server.ListUsersEndpoint.sendToAll(javax.websocket.Session)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5721/buggy-version/src.main.java.com.mycompany.websocket.server.ListUsersEndpoint.java", "BodyUseAPI": [], "Fixed commit": "e705703481e0970eac80125146f04e58070a390a", "Url": "https://api.github.com/repos/Szopenix/websocket", "Date": "2018-01-14T23:12:24Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.mycompany.websocket.server.ListUsersEndpoint.sendToOne(javax.websocket.Session,java.lang.String)=>com.mycompany.websocket.server.ListUsersEndpoint.sendToOne(javax.websocket.Session)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5721/buggy-version/src.main.java.com.mycompany.websocket.server.ListUsersEndpoint.java", "BodyUseAPI": [], "Fixed commit": "e705703481e0970eac80125146f04e58070a390a", "Url": "https://api.github.com/repos/Szopenix/websocket", "Date": "2018-01-14T23:12:24Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "starterbot.Bot.handleGotShot(starterbot.Coordinate)=>starterbot.Bot.gotShot(starterbot.Coordinate)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6708/buggy-version/src.starterbot.GameHandler.java", "BodyUseAPI": [], "Fixed commit": "a73894606ddab6dfb5e11ba263d985b609f903d6", "Url": "https://api.github.com/repos/kliyer-ai/StarterBot", "Date": "2018-05-13T15:11:19Z"},
{"Line": "26=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "starterbot.ExampleBot.findSipCoordinates(state.getMyBoard(),starterbot.BattleShip)=>starterbot.ExampleBot.findShipCoordinates(state.getMyBoard(),starterbot.BattleShip)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6708/buggy-version/src.starterbot.ExampleBot.java", "BodyUseAPI": [], "Fixed commit": "a73894606ddab6dfb5e11ba263d985b609f903d6", "Url": "https://api.github.com/repos/kliyer-ai/StarterBot", "Date": "2018-05-13T15:11:19Z"},
{"Line": "37=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "software.enclavegroup.counter.MainActivity.findViewById(R.id.Res)=>software.enclavegroup.counter.MainActivity.findViewById(R.id.res_Symbols)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2921/buggy-version/app.src.main.java.software.enclavegroup.counter.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "e2a8aec8992cc525aff9252b6d93af86ae1121cf", "Url": "https://api.github.com/repos/Enclave-Software/Counter", "Date": "2018-07-04T22:50:55Z"},
{"Line": "176=>204", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "app.service.CryptoService.addBlock(java.lang.String,txnDao.getTxn(\"Sharath\", app.controller.REDEEM))=>java.util.List<app.model.Block>.get(((blocks.size()) - 1))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3456/buggy-version/src.main.java.app.controller.BlockchainController.java", "BodyUseAPI": [], "Fixed commit": "369a7dce426767fdf2e6274331af73eb0e7d8de1", "Url": "https://api.github.com/repos/devssh/Prototype-Private-Chain", "Date": "2018-03-21T12:49:27Z"},
{"Line": "158=>176", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "app.service.CryptoService.addBlock(java.lang.String,txnDao.getTxn(\"Sharath\", app.controller.REDEEM))=>java.util.List<app.model.Block>.get(((blocks.size()) - 1))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3456/buggy-version/src.main.java.app.controller.BlockchainController.java", "BodyUseAPI": [], "Fixed commit": "369a7dce426767fdf2e6274331af73eb0e7d8de1", "Url": "https://api.github.com/repos/devssh/Prototype-Private-Chain", "Date": "2018-03-21T12:49:27Z"},
{"Line": "56=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.logic.Model.getFilteredPersonList()=>seedu.address.model.Model.getFilteredPersonList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4992/buggy-version/src.main.java.seedu.address.logic.LogicManager.java", "BodyUseAPI": [], "Fixed commit": "c2af98977b5a0b7be1d8ea82d6e447eee3885998", "Url": "https://api.github.com/repos/CS2103-AY1819S1-W16-4/main", "Date": "2018-10-12T02:36:52Z"},
{"Line": "45=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.logic.commands.Command.execute(seedu.address.logic.Model,seedu.address.logic.PatientQueue,seedu.address.model.person.ServedPatient,seedu.address.logic.ServedPatientList,seedu.address.logic.CommandHistory)=>seedu.address.logic.commands.Command.execute(seedu.address.model.Model,seedu.address.model.PatientQueue,seedu.address.model.person.ServedPatient,seedu.address.model.ServedPatientList,seedu.address.logic.CommandHistory)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4992/buggy-version/src.main.java.seedu.address.logic.LogicManager.java", "BodyUseAPI": [], "Fixed commit": "c2af98977b5a0b7be1d8ea82d6e447eee3885998", "Url": "https://api.github.com/repos/CS2103-AY1819S1-W16-4/main", "Date": "2018-10-12T02:36:52Z"},
{"Line": "48=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.logic.commands.Command.execute(seedu.address.logic.Model,seedu.address.logic.CommandHistory)=>seedu.address.logic.commands.Command.execute(seedu.address.model.Model,seedu.address.logic.CommandHistory)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4992/buggy-version/src.main.java.seedu.address.logic.LogicManager.java", "BodyUseAPI": [], "Fixed commit": "c2af98977b5a0b7be1d8ea82d6e447eee3885998", "Url": "https://api.github.com/repos/CS2103-AY1819S1-W16-4/main", "Date": "2018-10-12T02:36:52Z"},
{"Line": "25=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "javafx.scene.control.Button.setText(java.lang.String)=>javafx.scene.control.Button.getText()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1179/buggy-version/src.controllers.UIController.java", "BodyUseAPI": [], "Fixed commit": "5e6629633c8db22a6958d21c93e56e781424f71b", "Url": "https://api.github.com/repos/gt23669/DnD-Map-Util", "Date": "2018-02-28T21:14:13Z"},
{"Line": "215=>215", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "fr.paris.lutece.plugins.library.business.LibraryMappingHome.findByPrimaryKey(mediaType.getMediaId(),fr.paris.lutece.portal.service.plugin.Plugin)=>fr.paris.lutece.plugins.library.business.LibraryMappingHome.findAllMappingsByMedia(mediaType.getMediaId(),fr.paris.lutece.portal.service.plugin.Plugin)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5977/buggy-version/src.java.fr.paris.lutece.plugins.library.web.UploadInsertServiceJspBean.java", "BodyUseAPI": [], "Fixed commit": "576d829cd92db498750e27fb144c7cc997760baa", "Url": "https://api.github.com/repos/lutece-platform/lutece-cms-plugin-library", "Date": "2018-02-01T15:40:31Z"},
{"Line": "257=>264", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "fr.paris.lutece.plugins.library.business.LibraryMappingHome.findByPrimaryKey(mediaType.getMediaId(),fr.paris.lutece.portal.service.plugin.Plugin)=>fr.paris.lutece.plugins.library.business.LibraryMappingHome.findAllMappingsByMedia(mediaType.getMediaId(),fr.paris.lutece.portal.service.plugin.Plugin)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5977/buggy-version/src.java.fr.paris.lutece.plugins.library.web.UploadInsertServiceJspBean.java", "BodyUseAPI": [], "Fixed commit": "576d829cd92db498750e27fb144c7cc997760baa", "Url": "https://api.github.com/repos/lutece-platform/lutece-cms-plugin-library", "Date": "2018-02-01T15:40:31Z"},
{"Line": "44=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.event.player.PlayerInteractEvent.getClickedBlock()=>org.bukkit.entity.Player.getItemInHand()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2435/buggy-version/src.main.java.me.george.devpractice.Game.Listeners.Combat.Dash.java", "BodyUseAPI": [], "Fixed commit": "8837566f0c4fdb63247586099d377f2a31d7fa00", "Url": "https://api.github.com/repos/Lorm1/dpractice", "Date": "2018-03-11T16:17:19Z"},
{"Line": "51=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "p.getItemInHand().getItemMeta().getDisplayName()=>p.getItemInHand().getItemMeta().hasDisplayName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2435/buggy-version/src.main.java.me.george.devpractice.Game.Listeners.Combat.Dash.java", "BodyUseAPI": [], "Fixed commit": "8837566f0c4fdb63247586099d377f2a31d7fa00", "Url": "https://api.github.com/repos/Lorm1/dpractice", "Date": "2018-03-11T16:17:19Z"},
{"Line": "44=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.bukkit.event.player.PlayerInteractEvent.getClickedBlock()=>p.getItemInHand().getType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2435/buggy-version/src.main.java.me.george.devpractice.Game.Listeners.Combat.Dash.java", "BodyUseAPI": [], "Fixed commit": "8837566f0c4fdb63247586099d377f2a31d7fa00", "Url": "https://api.github.com/repos/Lorm1/dpractice", "Date": "2018-03-11T16:17:19Z"},
{"Line": "19=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "gov.ca.cwds.jobs.common.configuration.JobOptions.getLastRunLoc()=>gov.ca.cwds.jobs.common.configuration.JobOptions.getConfigFileLocation()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6265/buggy-version/jobs-cap-users.src.main.java.gov.ca.cwds.jobs.cap.users.CapUsersJobRunner.java", "BodyUseAPI": [], "Fixed commit": "9d575af87a68a0a48ed1d3560a938e88e2b6ce0b", "Url": "https://api.github.com/repos/ca-cwds/cwds-jobs", "Date": "2018-10-17T19:00:06Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "gov.ca.cwds.jobs.common.configuration.JobOptions.getLastRunLoc()=>gov.ca.cwds.jobs.common.configuration.JobOptions.getConfigFileLocation()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6265/buggy-version/jobs-facilities-cws.src.main.java.gov.ca.cwds.jobs.cals.facility.cws.CwsFacilityJobRunner.java", "BodyUseAPI": [], "Fixed commit": "9d575af87a68a0a48ed1d3560a938e88e2b6ce0b", "Url": "https://api.github.com/repos/ca-cwds/cwds-jobs", "Date": "2018-10-17T19:00:06Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "gov.ca.cwds.jobs.common.configuration.JobOptions.getLastRunLoc()=>gov.ca.cwds.jobs.common.configuration.JobOptions.getConfigFileLocation()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6265/buggy-version/jobs-facilities-lis.src.main.java.gov.ca.cwds.jobs.cals.facility.lisfas.LisFacilityJobRunner.java", "BodyUseAPI": [], "Fixed commit": "9d575af87a68a0a48ed1d3560a938e88e2b6ce0b", "Url": "https://api.github.com/repos/ca-cwds/cwds-jobs", "Date": "2018-10-17T19:00:06Z"},
{"Line": "50=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.slf4j.Logger.info(java.lang.String)=>org.slf4j.Logger.info(((((((\"New build submitted (id: \" + (build.getId())) + \") Total: \") + (this.nbSubmittedBuilds)) + \" | Limit: \") + (maxSubmittedBuilds)) + \")\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6091/buggy-version/repairnator.repairnator-realtime.src.main.java.fr.inria.spirals.repairnator.realtime.InspectBuilds.java", "BodyUseAPI": [], "Fixed commit": "72b2cda5bf9606ce700a6462beb75963eb2276e1", "Url": "https://api.github.com/repos/Spirals-Team/repairnator", "Date": "2018-01-16T15:58:02Z"},
{"Line": "46=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.slf4j.Logger.debug((((\"New status for build id: \" + (this.getId())) + \" : \") + (this.getBuildStatus())))=>org.slf4j.Logger.warn((((\"New status for build id: \" + (this.getId())) + \" : \") + (this.getBuildStatus())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6091/buggy-version/jtravis.src.main.java.fr.inria.spirals.jtravis.entities.Build.java", "BodyUseAPI": [], "Fixed commit": "72b2cda5bf9606ce700a6462beb75963eb2276e1", "Url": "https://api.github.com/repos/Spirals-Team/repairnator", "Date": "2018-01-16T15:58:02Z"},
{"Line": "82=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "dev.danielholmberg.improve.Activities.AddOnMyMindActivity.findViewById(R.id.add_omm_content)=>dev.danielholmberg.improve.Activities.AddOnMyMindActivity.findViewById(R.id.add_omm_layout)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3774/buggy-version/app.src.main.java.dev.danielholmberg.improve.Activities.AddOnMyMindActivity.java", "BodyUseAPI": [], "Fixed commit": "f59411d4d9f60d4865cd64f632e8481aa55d17ee", "Url": "https://api.github.com/repos/danielholmberg/Improve", "Date": "2018-03-11T16:02:24Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "dev.danielholmberg.improve.Activities.AddContactActivity.findViewById(R.id.activity_add_contact_layout)=>dev.danielholmberg.improve.Activities.AddContactActivity.findViewById(R.id.add_contact_layout)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3774/buggy-version/app.src.main.java.dev.danielholmberg.improve.Activities.AddContactActivity.java", "BodyUseAPI": [], "Fixed commit": "f59411d4d9f60d4865cd64f632e8481aa55d17ee", "Url": "https://api.github.com/repos/danielholmberg/Improve", "Date": "2018-03-11T16:02:24Z"},
{"Line": "211=>211", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "eisbw.BwapiUtility.getType(jnibwapi.Unit)=>jnibwapi.Unit.getType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6122/buggy-version/eisbw.src.main.java.eisbw.debugger.draw.DrawUnitInfo.java", "BodyUseAPI": [], "Fixed commit": "753133e0da3fe47ea5d15401b24389ef2814bddd", "Url": "https://api.github.com/repos/eishub/Starcraft", "Date": "2018-05-31T05:52:34Z"},
{"Line": "179=>180", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "LL<java.lang.String>.getNth(int)=>LL<java.lang.String>.GetNth(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8835/buggy-version/main.java", "BodyUseAPI": [], "Fixed commit": "fd8aa36f0ebc146982cea3645843497822afb5d7", "Url": "https://api.github.com/repos/mariebarr/TaylorSwift", "Date": "2018-05-11T18:35:30Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "LL<java.lang.String>.getNth(int)=>LL<java.lang.String>.GetNth(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8835/buggy-version/main.java", "BodyUseAPI": [], "Fixed commit": "fd8aa36f0ebc146982cea3645843497822afb5d7", "Url": "https://api.github.com/repos/mariebarr/TaylorSwift", "Date": "2018-05-11T18:35:30Z"},
{"Line": "183=>184", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "LL<java.lang.String>.getNth(int)=>LL<java.lang.String>.GetNth(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8835/buggy-version/main.java", "BodyUseAPI": [], "Fixed commit": "fd8aa36f0ebc146982cea3645843497822afb5d7", "Url": "https://api.github.com/repos/mariebarr/TaylorSwift", "Date": "2018-05-11T18:35:30Z"},
{"Line": "154=>155", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "LL<java.lang.String>.getNth(int)=>LL<java.lang.String>.GetNth(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8835/buggy-version/main.java", "BodyUseAPI": [], "Fixed commit": "fd8aa36f0ebc146982cea3645843497822afb5d7", "Url": "https://api.github.com/repos/mariebarr/TaylorSwift", "Date": "2018-05-11T18:35:30Z"},
{"Line": "88=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.sql.Connection.prepareStatement(java.lang.String)=>java.sql.Connection.prepareStatement(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3829/buggy-version/src.com.mirahome.lib.FastMysqlClient2.java", "BodyUseAPI": [], "Fixed commit": "0248f1b009d24bbd9fe09a604a54d7e3aa2ba2cd", "Url": "https://api.github.com/repos/kyozhou/java_lib", "Date": "2018-06-12T09:16:33Z"},
{"Line": "92=>92", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.sql.PreparedStatement.executeUpdate(java.lang.String,int)=>java.sql.PreparedStatement.executeUpdate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3829/buggy-version/src.com.mirahome.lib.FastMysqlClient2.java", "BodyUseAPI": [], "Fixed commit": "0248f1b009d24bbd9fe09a604a54d7e3aa2ba2cd", "Url": "https://api.github.com/repos/kyozhou/java_lib", "Date": "2018-06-12T09:16:33Z"},
{"Line": "69=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.sun.tools.javac.util.JavacMessages.instance(com.sun.tools.javac.util.Context)=>com.google.errorprone.BaseErrorProneJavaCompiler.setupMessageBundle(com.sun.tools.javac.util.Context)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1147/buggy-version/src.java_tools.buildjar.java.com.google.devtools.build.buildjar.javac.plugins.errorprone.ErrorPronePlugin.java", "BodyUseAPI": [], "Fixed commit": "8c306559e6bc5e5dde3d302f43bb0ccd92daf46b", "Url": "https://api.github.com/repos/orcguru/bazel", "Date": "2018-09-11T05:18:22Z"},
{"Line": "69=>69", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.sun.tools.javac.util.JavacMessages.add(java.lang.String)=>com.google.errorprone.BaseErrorProneJavaCompiler.setupMessageBundle(com.sun.tools.javac.util.Context)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1147/buggy-version/src.java_tools.buildjar.java.com.google.devtools.build.buildjar.javac.plugins.errorprone.ErrorPronePlugin.java", "BodyUseAPI": [], "Fixed commit": "8c306559e6bc5e5dde3d302f43bb0ccd92daf46b", "Url": "https://api.github.com/repos/orcguru/bazel", "Date": "2018-09-11T05:18:22Z"},
{"Line": "68=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.content.Context.startActivity(android.content.Intent)=>android.bluetooth.BluetoothAdapter.startDiscovery()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7944/buggy-version/app.src.main.java.com.example.marta.domain.Bluetooth.java", "BodyUseAPI": [], "Fixed commit": "877989160df9d73397cade169f5fa30f8f194890", "Url": "https://api.github.com/repos/Martydude15/BlueTeeth", "Date": "2018-04-19T18:53:42Z"},
{"Line": "98=>99", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "okhttp3.OkHttpClient.Builder.cache(okhttp3.Cache)=>new okhttp3.OkHttpClient.Builder().connectTimeout(TravisConstants.DEFAULT_CONNECTION_TIMOUT, java.util.concurrent.TimeUnit.SECONDS).writeTimeout(TravisConstants.DEFAULT_WRITE_TIMEOUT, java.util.concurrent.TimeUnit.SECONDS).readTimeout(TravisConstants.DEFAULT_READ_TIMEOUT, java.util.concurrent.TimeUnit.SECONDS).cache(okhttp3.Cache)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4078/buggy-version/src.main.java.fr.inria.jtravis.JTravis.java", "BodyUseAPI": [], "Fixed commit": "71afca3f3ce78e0b96ae0ad7f421884cc5140f29", "Url": "https://api.github.com/repos/Spirals-Team/jtravis", "Date": "2018-04-12T11:33:34Z"},
{"Line": "133=>133", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "eu.city4age.dashboard.api.pojo.ws.JerseyResponse.build(java.lang.String,int)=>eu.city4age.dashboard.api.pojo.ws.JerseyResponse.buildTextPlain(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1165/buggy-version/backend.src.main.java.eu.city4age.dashboard.api.rest.MeasuresService.java", "BodyUseAPI": [], "Fixed commit": "0c4ce14e6937b414b8e9c7e12e58f0712b833f00", "Url": "https://api.github.com/repos/City4AgeProject/individual-monitoring-C4A", "Date": "2018-02-05T11:10:18Z"},
{"Line": "199=>203", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.minecraft.block.state.IBlockState.getValue(BlockCarpentrySlope.CEILING)=>net.minecraft.block.state.IBlockState.getValue(BlockCarpentrySlope.ORIENTATION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1300/buggy-version/src.main.java.com.elytradev.carpentrycubes.client.render.model.CarpentrySlopeModel.java", "BodyUseAPI": [], "Fixed commit": "457cd6fc9b1af4c1509f5a8824b440c35ce06e11", "Url": "https://api.github.com/repos/elytra/CarpentryCubes", "Date": "2018-04-04T07:38:41Z"},
{"Line": "35=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "operationResourceInfo.getClassResourceInfo().getResourceProvider().getInstance()=>operationResourceInfo.getClassResourceInfo().getResourceProvider().getInstance(org.apache.cxf.message.XMLMessage)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6995/buggy-version/parfait-cxf.src.main.java.com.custardsource.parfait.cxf.MonitoringInterceptor.java", "BodyUseAPI": [], "Fixed commit": "14e60a13a2ba3e264bbb505ab8f233e816d48550", "Url": "https://api.github.com/repos/pdiegodios/parfait", "Date": "2018-05-17T02:05:51Z"},
{"Line": "545=>545", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.format(java.lang.String,java.lang.String,compiledSB.getNumLocals())=>java.lang.String.format(java.lang.String,java.lang.String,java.lang.String,compiledSB.getNumLocals())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1730/buggy-version/src.main.Parser.java", "BodyUseAPI": [], "Fixed commit": "19d3fb70d84b9e5868749db9dffae631253744f2", "Url": "https://api.github.com/repos/chrisshyi/JackCompiler", "Date": "2018-08-27T01:56:52Z"},
{"Line": "110=>102", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "play.mvc.Http.Request.getHeader(HeaderParam.X_Access_TokenId.getName())=>util.AuthenticationHelper.verifyUserAccesToken(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6281/buggy-version/service.app.util.RequestInterceptor.java", "BodyUseAPI": [], "Fixed commit": "ada3159a4f0fc89dad443a5df528880d5a213d3a", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service", "Date": "2018-03-24T08:57:48Z"},
{"Line": "99=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sunbird.common.models.util.ProjectUtil.isStringNullOREmpty(request.getHeader(HeaderParam.X_Authenticated_Client_Id.getName()))=>org.apache.commons.lang3.StringUtils.isBlank(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6281/buggy-version/service.app.util.RequestInterceptor.java", "BodyUseAPI": [], "Fixed commit": "ada3159a4f0fc89dad443a5df528880d5a213d3a", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service", "Date": "2018-03-24T08:57:48Z"},
{"Line": "83=>86", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sunbird.common.models.util.ProjectUtil.isStringNullOREmpty(request.getHeader(HeaderParam.X_Access_TokenId.getName()))=>org.apache.commons.lang3.StringUtils.isBlank(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6281/buggy-version/service.app.util.RequestInterceptor.java", "BodyUseAPI": [], "Fixed commit": "ada3159a4f0fc89dad443a5df528880d5a213d3a", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service", "Date": "2018-03-24T08:57:48Z"},
{"Line": "97=>94", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sunbird.common.models.util.ProjectUtil.isStringNullOREmpty(request.getHeader(HeaderParam.X_Authenticated_Client_Token.getName()))=>org.apache.commons.lang3.StringUtils.isBlank(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6281/buggy-version/service.app.util.RequestInterceptor.java", "BodyUseAPI": [], "Fixed commit": "ada3159a4f0fc89dad443a5df528880d5a213d3a", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service", "Date": "2018-03-24T08:57:48Z"},
{"Line": "85=>86", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sunbird.common.models.util.ProjectUtil.isStringNullOREmpty(request.getHeader(HeaderParam.X_Authenticated_Client_Token.getName()))=>org.apache.commons.lang3.StringUtils.isBlank(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6281/buggy-version/service.app.util.RequestInterceptor.java", "BodyUseAPI": [], "Fixed commit": "ada3159a4f0fc89dad443a5df528880d5a213d3a", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service", "Date": "2018-03-24T08:57:48Z"},
{"Line": "109=>102", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "util.AuthenticationHelper.verifyUserAccesToken(request.getHeader(HeaderParam.X_Access_TokenId.getName()))=>util.AuthenticationHelper.verifyUserAccesToken(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6281/buggy-version/service.app.util.RequestInterceptor.java", "BodyUseAPI": [], "Fixed commit": "ada3159a4f0fc89dad443a5df528880d5a213d3a", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service", "Date": "2018-03-24T08:57:48Z"},
{"Line": "101=>95", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "util.AuthenticationHelper.verifyClientAccessToken(request.getHeader(HeaderParam.X_Authenticated_Client_Id.getName()),request.getHeader(HeaderParam.X_Authenticated_Client_Token.getName()))=>util.AuthenticationHelper.verifyClientAccessToken(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6281/buggy-version/service.app.util.RequestInterceptor.java", "BodyUseAPI": [], "Fixed commit": "ada3159a4f0fc89dad443a5df528880d5a213d3a", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service", "Date": "2018-03-24T08:57:48Z"},
{"Line": "137=>144", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.support.v4.app.FragmentTransaction.commit()=>android.support.v4.app.FragmentTransaction.commitAllowingStateLoss()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3806/buggy-version/app.src.main.java.com.febers.iuestc.home.view.HomeActivity.java", "BodyUseAPI": [], "Fixed commit": "1434da8329c75aaa083480754ea3eba031a91520", "Url": "https://api.github.com/repos/Febers/iUESTC", "Date": "2018-06-06T15:44:54Z"},
{"Line": "83=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "de.oth.joa44741.swprojektjohn.services.weatherservice.DetailWettervorhersage.getAvgTemperature()=>de.oth.joa44741.swprojektjohn.services.weatherservice.DetailWettervorhersage.getAvgTemperatur()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3516/buggy-version/SWProjektJohn-web.src.main.java.de.oth.joa44741.swprojektjohn.services.weatherservice.WeatherSoapServiceClient.java", "BodyUseAPI": [], "Fixed commit": "9e5995163f40656b396c7acdf9f0ea9e55712e6d", "Url": "https://api.github.com/repos/joa44741/FestivalPlaner", "Date": "2018-01-09T09:47:44Z"},
{"Line": "111=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.mrPATH.snake.module.Snake.contains(com.mrPATH.snake.module.Point)=>com.mrPATH.snake.module.Snake.isBody(com.mrPATH.snake.module.Point)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7089/buggy-version/src.com.mrPATH.snake.module.Panel.java", "BodyUseAPI": [], "Fixed commit": "be83d0762fdcb2c4487b24b3cc2075f109b0964d", "Url": "https://api.github.com/repos/MRXia/gluttonous-snake", "Date": "2018-05-29T10:58:53Z"},
{"Line": "46=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class.valueOf(java.lang.String)=>java.lang.Double.valueOf(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/309/buggy-version/src.QuasiTiler.App.java", "BodyUseAPI": [], "Fixed commit": "136331efc5ca148e8cd583af3a9d1c05760fb175", "Url": "https://api.github.com/repos/kinianlo/QuasiTiler", "Date": "2018-07-21T01:52:39Z"},
{"Line": "61=>61", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "double.class.valueOf(args[((i + 2) + ((QuasiTiler.App.default_dim) * 2))]).doubleValue()=>java.lang.Double.doubleValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/309/buggy-version/src.QuasiTiler.App.java", "BodyUseAPI": [], "Fixed commit": "136331efc5ca148e8cd583af3a9d1c05760fb175", "Url": "https://api.github.com/repos/kinianlo/QuasiTiler", "Date": "2018-07-21T01:52:39Z"},
{"Line": "61=>61", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class.valueOf(java.lang.String)=>java.lang.Double.valueOf(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/309/buggy-version/src.QuasiTiler.App.java", "BodyUseAPI": [], "Fixed commit": "136331efc5ca148e8cd583af3a9d1c05760fb175", "Url": "https://api.github.com/repos/kinianlo/QuasiTiler", "Date": "2018-07-21T01:52:39Z"},
{"Line": "53=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "double.class.valueOf(args[(i + 2)]).doubleValue()=>java.lang.Double.doubleValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/309/buggy-version/src.QuasiTiler.App.java", "BodyUseAPI": [], "Fixed commit": "136331efc5ca148e8cd583af3a9d1c05760fb175", "Url": "https://api.github.com/repos/kinianlo/QuasiTiler", "Date": "2018-07-21T01:52:39Z"},
{"Line": "46=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "double.class.valueOf(args[1]).doubleValue()=>java.lang.Double.doubleValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/309/buggy-version/src.QuasiTiler.App.java", "BodyUseAPI": [], "Fixed commit": "136331efc5ca148e8cd583af3a9d1c05760fb175", "Url": "https://api.github.com/repos/kinianlo/QuasiTiler", "Date": "2018-07-21T01:52:39Z"},
{"Line": "53=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class.valueOf(java.lang.String)=>java.lang.Double.valueOf(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/309/buggy-version/src.QuasiTiler.App.java", "BodyUseAPI": [], "Fixed commit": "136331efc5ca148e8cd583af3a9d1c05760fb175", "Url": "https://api.github.com/repos/kinianlo/QuasiTiler", "Date": "2018-07-21T01:52:39Z"},
{"Line": "115=>115", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.bumptech.glide.Glide.with(this).load(R.drawable.bg_qrcode_01).centerCrop()=>com.bumptech.glide.Glide.with(this).load(R.drawable.bg_qrcode_01).into(android.widget.ImageView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/555/buggy-version/app.src.main.java.kr.co.company.jjigawesome.QrcodeActivity.java", "BodyUseAPI": [], "Fixed commit": "5b58207c55820109bc62b200507c840714bc8739", "Url": "https://api.github.com/repos/inomp3042/jjigawesome", "Date": "2018-08-11T07:36:16Z"},
{"Line": "302=>302", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "de.lessvoid.nifty.builder.LayerBuilder.align(Align.Center)=>de.lessvoid.nifty.builder.LayerBuilder.align(Align.Left)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8367/buggy-version/src.main.java.game.gui.hud.HudController.java", "BodyUseAPI": [], "Fixed commit": "6546628c8eb315ef6d8aed87a9dddb8097652088", "Url": "https://api.github.com/repos/raLaaaa/dungeonRunner", "Date": "2018-03-08T11:18:47Z"},
{"Line": "53=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.skilldistillery.puzzlepieces.entities.Puzzle.setName(java.lang.String)=>com.skilldistillery.puzzlepieces.entities.User.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4396/buggy-version/MVCPuzzlePieces.src.main.java.com.skilldistillery.puzzlepieces.data.PuzzleDAOImpl.java", "BodyUseAPI": [], "Fixed commit": "818ea5260c135cbf27b09254e5e5569964aacd55", "Url": "https://api.github.com/repos/chopsticksally/PuzzlePieces", "Date": "2018-05-01T21:44:44Z"},
{"Line": "52=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.skilldistillery.puzzlepieces.entities.Puzzle.setImageUrl(java.lang.String)=>com.skilldistillery.puzzlepieces.entities.InventoryItem.setPuzzle(com.skilldistillery.puzzlepieces.entities.Puzzle)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4396/buggy-version/MVCPuzzlePieces.src.main.java.com.skilldistillery.puzzlepieces.data.PuzzleDAOImpl.java", "BodyUseAPI": [], "Fixed commit": "818ea5260c135cbf27b09254e5e5569964aacd55", "Url": "https://api.github.com/repos/chopsticksally/PuzzlePieces", "Date": "2018-05-01T21:44:44Z"},
{"Line": "54=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.persistence.EntityManager.persist(com.skilldistillery.puzzlepieces.entities.Puzzle)=>javax.persistence.EntityManager.persist(com.skilldistillery.puzzlepieces.entities.InventoryItem)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4396/buggy-version/MVCPuzzlePieces.src.main.java.com.skilldistillery.puzzlepieces.data.PuzzleDAOImpl.java", "BodyUseAPI": [], "Fixed commit": "818ea5260c135cbf27b09254e5e5569964aacd55", "Url": "https://api.github.com/repos/chopsticksally/PuzzlePieces", "Date": "2018-05-01T21:44:44Z"},
{"Line": "53=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.skilldistillery.puzzlepieces.entities.Puzzle.setName(java.lang.String)=>java.io.PrintStream.println(com.skilldistillery.puzzlepieces.entities.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4396/buggy-version/MVCPuzzlePieces.src.main.java.com.skilldistillery.puzzlepieces.data.PuzzleDAOImpl.java", "BodyUseAPI": [], "Fixed commit": "818ea5260c135cbf27b09254e5e5569964aacd55", "Url": "https://api.github.com/repos/chopsticksally/PuzzlePieces", "Date": "2018-05-01T21:44:44Z"},
{"Line": "70=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.nxp.nfclib.ntag.NTagFactory.getInstance().getNTAG213(nxpLib.getCustomModules())=>com.nxp.nfclib.ntag.NTagFactory.getInstance().getNTAG216(nxpLib.getCustomModules())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1806/buggy-version/android.src.main.java.io.davide.nfcwriteprotected.Module.java", "BodyUseAPI": [], "Fixed commit": "c42e183b4c5fb3bf765507aeaa662cd178f97253", "Url": "https://api.github.com/repos/dvdcsc/react-native-nfc-protected-write", "Date": "2018-10-08T15:48:38Z"},
{"Line": "283=>285", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.eclipse.che.api.deploy.WsMasterModule.install(org.eclipse.che.api.deploy.ReplicationModule)=>bind(org.eclipse.che.api.core.notification.RemoteSubscriptionStorage.class).to(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1585/buggy-version/assembly.assembly-wsmaster-war.src.main.java.org.eclipse.che.api.deploy.WsMasterModule.java", "BodyUseAPI": [], "Fixed commit": "78dda67b2a237c384738a869c8d5d0bb022c29ba", "Url": "https://api.github.com/repos/eclipse/che", "Date": "2018-04-24T09:14:26Z"},
{"Line": "180=>181", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.ImageView.setImageBitmap(com.itsmap.memoryapp.appprojektmemoryapp.Activities.Bitmap)=>android.widget.ImageView.setImageBitmap(android.graphics.Bitmap)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4804/buggy-version/AppProjektMemoryApp.app.src.main.java.com.itsmap.memoryapp.appprojektmemoryapp.Activities.CreateNoteActivity.java", "BodyUseAPI": [], "Fixed commit": "8da5f2d86b479723c8af68921f42f514d2944129", "Url": "https://api.github.com/repos/Simon1612/Group13_ITSMAP18_spring_AppProject", "Date": "2018-05-06T14:16:17Z"},
{"Line": "114=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.itsmap.memoryapp.appprojektmemoryapp.Activities.EditNotesActivity.startActivityForResult(android.content.Intent,com.itsmap.memoryapp.appprojektmemoryapp.Activities.CAMERA_PERMISSIONS_REQUEST)=>com.itsmap.memoryapp.appprojektmemoryapp.Activities.EditNotesActivity.startActivityForResult(android.content.Intent,com.itsmap.memoryapp.appprojektmemoryapp.Activities.CreateNoteActivity.CAMERA_PERMISSIONS_REQUEST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4804/buggy-version/AppProjektMemoryApp.app.src.main.java.com.itsmap.memoryapp.appprojektmemoryapp.Activities.EditNotesActivity.java", "BodyUseAPI": [], "Fixed commit": "8da5f2d86b479723c8af68921f42f514d2944129", "Url": "https://api.github.com/repos/Simon1612/Group13_ITSMAP18_spring_AppProject", "Date": "2018-05-06T14:16:17Z"},
{"Line": "546=>547", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new android.content.Intent(action)=>new android.content.Intent(context, com.blueshift.pn.BlueshiftNotificationEventsActivity.class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1592/buggy-version/android-sdk.src.main.java.com.blueshift.rich_push.CustomNotificationFactory.java", "BodyUseAPI": [], "Fixed commit": "734851927cdae201041c2643f642388387984514", "Url": "https://api.github.com/repos/blueshift-labs/Blueshift-Android-SDK", "Date": "2018-01-19T07:11:17Z"},
{"Line": "556=>558", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.app.PendingIntent.getBroadcast(android.content.Context,com.blueshift.rich_push.NotificationFactory.getRandomPIRequestCode(),android.content.Intent,PendingIntent.FLAG_ONE_SHOT)=>android.app.PendingIntent.getActivity(android.content.Context,com.blueshift.rich_push.NotificationFactory.getRandomPIRequestCode(),android.content.Intent,PendingIntent.FLAG_ONE_SHOT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1592/buggy-version/android-sdk.src.main.java.com.blueshift.rich_push.CustomNotificationFactory.java", "BodyUseAPI": [], "Fixed commit": "734851927cdae201041c2643f642388387984514", "Url": "https://api.github.com/repos/blueshift-labs/Blueshift-Android-SDK", "Date": "2018-01-19T07:11:17Z"},
{"Line": "118=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.eviware.soapui.impl.support.AbstractMockRequest.setRequestContent(java.lang.String)=>com.eviware.soapui.impl.wsdl.mock.WsdlMockRequest.setRequestContent(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2146/buggy-version/soapui.src.main.java.com.eviware.soapui.impl.wsdl.mock.WsdlMockRequest.java", "BodyUseAPI": [], "Fixed commit": "44373edb84c433f63b08ba9e440667b76475bb47", "Url": "https://api.github.com/repos/modax/soapui", "Date": "2018-10-28T00:04:03Z"},
{"Line": "100=>100", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "crazydl.gallery.ImageDownloader.execute()=>crazydl.gallery.ImageDownloader.execute()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1756/buggy-version/app.src.main.java.crazydl.gallery.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "6140bbe4b838a9db4ca6981935feb49fea8a6784", "Url": "https://api.github.com/repos/CrazyDL/YandexGalleryTest", "Date": "2018-04-27T14:05:37Z"},
{"Line": "46=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "crazydl.gallery.MainActivity.RefreshItems()=>android.support.v4.widget.SwipeRefreshLayout.setOnRefreshListener(crazydl.gallery.MainActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1756/buggy-version/app.src.main.java.crazydl.gallery.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "6140bbe4b838a9db4ca6981935feb49fea8a6784", "Url": "https://api.github.com/repos/CrazyDL/YandexGalleryTest", "Date": "2018-04-27T14:05:37Z"},
{"Line": "71=>71", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.support.v4.content.ContextCompat.checkSelfPermission(getApplicationContext(),Manifest.permission.CAMERA)=>android.support.v4.content.ContextCompat.checkSelfPermission(getApplicationContext(),Manifest.permission.INTERNET)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1756/buggy-version/app.src.main.java.crazydl.gallery.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "6140bbe4b838a9db4ca6981935feb49fea8a6784", "Url": "https://api.github.com/repos/CrazyDL/YandexGalleryTest", "Date": "2018-04-27T14:05:37Z"},
{"Line": "47=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "fr.onecraft.chestevent.ChestEvent.getDescription()=>fr.onecraft.chestevent.ChestEvent.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4493/buggy-version/src.fr.onecraft.chestevent.ChestEvent.java", "BodyUseAPI": [], "Fixed commit": "8b2cd3f83527744fac04cc13c421fbc2e5732d6b", "Url": "https://api.github.com/repos/TheFoxy41/ChestEvent", "Date": "2018-09-23T22:04:33Z"},
{"Line": "42=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "fr.onecraft.chestevent.ChestEvent.getDescription()=>fr.onecraft.chestevent.ChestEvent.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4493/buggy-version/src.fr.onecraft.chestevent.ChestEvent.java", "BodyUseAPI": [], "Fixed commit": "8b2cd3f83527744fac04cc13c421fbc2e5732d6b", "Url": "https://api.github.com/repos/TheFoxy41/ChestEvent", "Date": "2018-09-23T22:04:33Z"},
{"Line": "23=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new japa.parser.ast.expr.UnaryExpr(condition, japa.parser.ast.expr.UnaryExpr.Operator.not)=>new japa.parser.ast.expr.UnaryExpr(expr, japa.parser.ast.expr.UnaryExpr.Operator.not)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3081/buggy-version/microbat_trace_predication.src.microbat.mutation.mutation.ControlDominatedMutationVisitor.java", "BodyUseAPI": [], "Fixed commit": "a229c8766176dcbf27616e09402b2b5a223b51e8", "Url": "https://api.github.com/repos/llmhyy/microbat", "Date": "2018-04-21T05:52:54Z"},
{"Line": "28=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Utils.Md5Utils.getMd5(java.lang.String,java.lang.String)=>com.me.Utils.Md5Utils.getMd5(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6743/buggy-version/src.main.java.com.me.service.EmployeeService.java", "BodyUseAPI": [], "Fixed commit": "cc8f9e8ff1edc4528e069bc40f4377876a108d30", "Url": "https://api.github.com/repos/LLLRS/SSMCollmeeting", "Date": "2018-07-04T14:34:13Z"},
{"Line": "28=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Utils.Md5Utils.getMd5(java.lang.String,java.lang.String)=>com.me.Utils.Md5Utils.getMd5(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6743/buggy-version/src.main.java.com.me.service.EmployeeService.java", "BodyUseAPI": [], "Fixed commit": "cc8f9e8ff1edc4528e069bc40f4377876a108d30", "Url": "https://api.github.com/repos/LLLRS/SSMCollmeeting", "Date": "2018-07-04T14:34:13Z"},
{"Line": "485=>480", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Utils.Md5Utils.getMd5(loginUser.getUsername(),java.lang.String)=>com.me.Utils.Md5Utils.getMd5(loginUser.getUsername(),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6743/buggy-version/src.main.java.com.me.web.EmployeeController.java", "BodyUseAPI": [], "Fixed commit": "cc8f9e8ff1edc4528e069bc40f4377876a108d30", "Url": "https://api.github.com/repos/LLLRS/SSMCollmeeting", "Date": "2018-07-04T14:34:13Z"},
{"Line": "473=>468", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Utils.Md5Utils.getMd5(loginUser.getUsername(),request.getParameter(\"origin\"))=>com.me.Utils.Md5Utils.getMd5(loginUser.getUsername(),request.getParameter(\"origin\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6743/buggy-version/src.main.java.com.me.web.EmployeeController.java", "BodyUseAPI": [], "Fixed commit": "cc8f9e8ff1edc4528e069bc40f4377876a108d30", "Url": "https://api.github.com/repos/LLLRS/SSMCollmeeting", "Date": "2018-07-04T14:34:13Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "no.nordicsemi.android.meshprovisioner.transport.GenericLevelGet.setMessage(no.nordicsemi.android.meshprovisioner.transport.GenericLevelSetState)=>no.nordicsemi.android.meshprovisioner.transport.GenericLevelSet.setMessage(no.nordicsemi.android.meshprovisioner.transport.GenericLevelSetState)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3558/buggy-version/android-nrf-mesh-library.meshprovisioner.src.main.java.no.nordicsemi.android.meshprovisioner.transport.GenericLevelSetState.java", "BodyUseAPI": [], "Fixed commit": "ad979f8e6f0c69dab2c30db67467f8574fb2a58d", "Url": "https://api.github.com/repos/NordicSemiconductor/Android-nRF-Mesh-Library", "Date": "2018-10-25T13:07:25Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "no.nordicsemi.android.meshprovisioner.transport.GenericLevelGet.getAkf()=>no.nordicsemi.android.meshprovisioner.transport.GenericLevelSet.getAkf()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3558/buggy-version/android-nrf-mesh-library.meshprovisioner.src.main.java.no.nordicsemi.android.meshprovisioner.transport.GenericLevelSetState.java", "BodyUseAPI": [], "Fixed commit": "ad979f8e6f0c69dab2c30db67467f8574fb2a58d", "Url": "https://api.github.com/repos/NordicSemiconductor/Android-nRF-Mesh-Library", "Date": "2018-10-25T13:07:25Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "no.nordicsemi.android.meshprovisioner.transport.GenericLevelGet.getAid()=>no.nordicsemi.android.meshprovisioner.transport.GenericLevelSet.getAid()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3558/buggy-version/android-nrf-mesh-library.meshprovisioner.src.main.java.no.nordicsemi.android.meshprovisioner.transport.GenericLevelSetState.java", "BodyUseAPI": [], "Fixed commit": "ad979f8e6f0c69dab2c30db67467f8574fb2a58d", "Url": "https://api.github.com/repos/NordicSemiconductor/Android-nRF-Mesh-Library", "Date": "2018-10-25T13:07:25Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "no.nordicsemi.android.meshprovisioner.transport.GenericLevelGet.getOpCode()=>no.nordicsemi.android.meshprovisioner.transport.GenericLevelSet.getOpCode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3558/buggy-version/android-nrf-mesh-library.meshprovisioner.src.main.java.no.nordicsemi.android.meshprovisioner.transport.GenericLevelSetState.java", "BodyUseAPI": [], "Fixed commit": "ad979f8e6f0c69dab2c30db67467f8574fb2a58d", "Url": "https://api.github.com/repos/NordicSemiconductor/Android-nRF-Mesh-Library", "Date": "2018-10-25T13:07:25Z"},
{"Line": "47=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "no.nordicsemi.android.meshprovisioner.transport.GenericLevelGet.getParameters()=>no.nordicsemi.android.meshprovisioner.transport.GenericLevelSet.getParameters()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3558/buggy-version/android-nrf-mesh-library.meshprovisioner.src.main.java.no.nordicsemi.android.meshprovisioner.transport.GenericLevelSetState.java", "BodyUseAPI": [], "Fixed commit": "ad979f8e6f0c69dab2c30db67467f8574fb2a58d", "Url": "https://api.github.com/repos/NordicSemiconductor/Android-nRF-Mesh-Library", "Date": "2018-10-25T13:07:25Z"},
{"Line": "42=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "no.nordicsemi.android.meshprovisioner.transport.GenericLevelGet.getAppKey()=>no.nordicsemi.android.meshprovisioner.transport.GenericLevelSet.getAppKey()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3558/buggy-version/android-nrf-mesh-library.meshprovisioner.src.main.java.no.nordicsemi.android.meshprovisioner.transport.GenericLevelSetState.java", "BodyUseAPI": [], "Fixed commit": "ad979f8e6f0c69dab2c30db67467f8574fb2a58d", "Url": "https://api.github.com/repos/NordicSemiconductor/Android-nRF-Mesh-Library", "Date": "2018-10-25T13:07:25Z"},
{"Line": "45=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "no.nordicsemi.android.meshprovisioner.transport.GenericLevelGet.getAszmic()=>no.nordicsemi.android.meshprovisioner.transport.GenericLevelSet.getAszmic()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3558/buggy-version/android-nrf-mesh-library.meshprovisioner.src.main.java.no.nordicsemi.android.meshprovisioner.transport.GenericLevelSetState.java", "BodyUseAPI": [], "Fixed commit": "ad979f8e6f0c69dab2c30db67467f8574fb2a58d", "Url": "https://api.github.com/repos/NordicSemiconductor/Android-nRF-Mesh-Library", "Date": "2018-10-25T13:07:25Z"},
{"Line": "298=>299", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.nio.ByteBuffer.put(char)=>java.nio.ByteBuffer.put(byte)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9512/buggy-version/core.src.main.java.io.undertow.server.protocol.http.HttpResponseConduit.java", "BodyUseAPI": [], "Fixed commit": "85d4478e598105fe94ac152d3e11e388374e8b86", "Url": "https://api.github.com/repos/undertow-io/undertow", "Date": "2018-03-09T04:24:17Z"},
{"Line": "148=>148", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "net.pocrd.util.PocMethodVisitor.visitIntInsn(net.pocrd.util.BIPUSH,int)=>net.pocrd.util.PocMethodVisitor.loadConst(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5330/buggy-version/api-util.src.main.java.net.pocrd.util.POJOSerializerProvider.java", "BodyUseAPI": [], "Fixed commit": "b2678f8e4c883ba6ae70d2c10157347dc7a77399", "Url": "https://api.github.com/repos/pocrd/net.pocrd.core", "Date": "2018-04-08T04:05:45Z"},
{"Line": "62=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.linkedin.drelephant.mapreduce.data.MapReduceApplicationData.getStartTime()=>com.linkedin.drelephant.mapreduce.data.MapReduceApplicationData.getSubmitTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2593/buggy-version/app.com.linkedin.drelephant.mapreduce.MapReduceMetricsAggregator.java", "BodyUseAPI": [], "Fixed commit": "8ea28508f80ddf316a988ba8675586b7a48fb7c9", "Url": "https://api.github.com/repos/chinmayms/dr-elephant", "Date": "2018-02-23T09:46:06Z"},
{"Line": "81=>80", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintWriter.print((((((\"Task \" + i) + \": \") + (taskList.get(i).getName())) + \" ID: \") + (taskList.get(i).getID())))=>java.io.PrintStream.println((((((\"Task \" + i) + \": \") + (taskList.get(i).getName())) + \" ID: \") + (taskList.get(i).getID())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7967/buggy-version/SchedulingTool.src.Project.java", "BodyUseAPI": [], "Fixed commit": "e3ffdb64c89d50eacf39d72b8b1ff29b2a4dabf9", "Url": "https://api.github.com/repos/anishprasad01/461SchedulingTool", "Date": "2018-05-28T01:00:15Z"},
{"Line": "158=>162", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.StringBuilder.append(((\" * \" + (deprecatedApiAnnotation.value())) + \"\\n\"))=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6430/buggy-version/hollow.src.main.java.com.netflix.hollow.api.codegen.objects.HollowObjectJavaGenerator.java", "BodyUseAPI": [], "Fixed commit": "bb055768cc25c5858b167b781454bd76c898dc4f", "Url": "https://api.github.com/repos/koperm/hollow", "Date": "2018-10-11T12:58:45Z"},
{"Line": "158=>167", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "builder.append(\" /**\\n\").append(((\" * \" + (deprecatedApiAnnotation.value())) + \"\\n\")).append(\" */\\n\").append(java.lang.String)=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6430/buggy-version/hollow.src.main.java.com.netflix.hollow.api.codegen.objects.HollowObjectJavaGenerator.java", "BodyUseAPI": [], "Fixed commit": "bb055768cc25c5858b167b781454bd76c898dc4f", "Url": "https://api.github.com/repos/koperm/hollow", "Date": "2018-10-11T12:58:45Z"},
{"Line": "68=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.add(int,java.util.ArrayList<>)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.put(int,java.util.ArrayList<>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "92=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.get(java.lang.Integer)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.get(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "88=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.jgrapht.alg.color.ColorRefinementAlgorithm<V, E>.calculateColorPartition(java.util.Map<V, java.lang.Integer>,java.util.ArrayList<java.util.List<V>>,java.util.ArrayList<java.util.List<V>>,java.util.Deque<java.lang.Integer>,java.lang.Integer,java.util.ArrayList<java.lang.Integer>,int[],int[],java.util.Map<V, java.lang.Integer>)=>org.jgrapht.alg.color.ColorRefinementAlgorithm<V, E>.calculateColorPartition(java.util.Map<V, java.lang.Integer>,java.util.HashMap<java.lang.Integer, java.util.List<V>>,java.util.HashMap<java.lang.Integer, java.util.List<V>>,java.util.Deque<java.lang.Integer>,java.lang.Integer,java.util.ArrayList<java.lang.Integer>,int[],int[],java.util.Map<V, java.lang.Integer>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "209=>213", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.get(java.lang.Integer)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.get(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "97=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.lang.Integer>.remove(java.lang.Integer)=>java.util.Iterator<java.lang.Integer>.remove()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "73=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.get(alpha.getColors().get(v))=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.get(alpha.getColors().get(v))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "229=>233", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.get(java.lang.Integer)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.get(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "230=>234", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.get(java.lang.Integer)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.get(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "147=>151", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.get(java.lang.Integer)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.get(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "212=>216", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.get(java.lang.Integer)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.get(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "85=>85", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.jgrapht.alg.color.ColorRefinementAlgorithm<V, E>.calculateColorDegree(java.lang.Integer,java.util.Map<V, java.lang.Integer>,java.util.ArrayList<java.util.List<V>>,java.util.ArrayList<java.util.List<V>>,java.util.ArrayList<java.lang.Integer>,int[],int[],java.util.Map<V, java.lang.Integer>)=>org.jgrapht.alg.color.ColorRefinementAlgorithm<V, E>.calculateColorDegree(java.lang.Integer,java.util.Map<V, java.lang.Integer>,java.util.HashMap<java.lang.Integer, java.util.List<V>>,java.util.HashMap<java.lang.Integer, java.util.List<V>>,java.util.ArrayList<java.lang.Integer>,int[],int[],java.util.Map<V, java.lang.Integer>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "147=>151", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.get(java.lang.Integer)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.get(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "117=>121", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.get(java.lang.Integer)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.get(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "151=>155", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.get(java.lang.Integer)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.get(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "209=>213", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.get(java.lang.Integer)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.get(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "69=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.add(int,java.util.ArrayList<>)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.put(int,java.util.ArrayList<>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "182=>186", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.jgrapht.alg.color.ColorRefinementAlgorithm<V, E>.splitUpColor(java.lang.Integer,java.util.Map<V, java.lang.Integer>,java.util.ArrayList<java.util.List<V>>,java.util.ArrayList<java.util.List<V>>,java.util.Deque<java.lang.Integer>,java.lang.Integer,int[],int[],java.util.Map<V, java.lang.Integer>)=>org.jgrapht.alg.color.ColorRefinementAlgorithm<V, E>.splitUpColor(java.lang.Integer,java.util.Map<V, java.lang.Integer>,java.util.HashMap<java.lang.Integer, java.util.List<V>>,java.util.HashMap<java.lang.Integer, java.util.List<V>>,java.util.Deque<java.lang.Integer>,java.lang.Integer,int[],int[],java.util.Map<V, java.lang.Integer>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "135=>139", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.get(java.lang.Integer)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.get(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "227=>231", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.List<V>>.get(java.lang.Integer)=>java.util.HashMap<java.lang.Integer, java.util.List<V>>.get(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7778/buggy-version/jgrapht-core.src.main.java.org.jgrapht.alg.color.ColorRefinementAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "e2c28594ae164414bd5bf827c3d54e79528339ab", "Url": "https://api.github.com/repos/tj-developers/jgrapht", "Date": "2018-06-11T22:45:21Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.yhussein.helloworld.HomeActivity.getString(R.string.thankyou)=>com.example.yhussein.helloworld.HomeActivity.getString(R.string.thanks)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6590/buggy-version/app.src.main.java.com.example.yhussein.helloworld.HomeActivity.java", "BodyUseAPI": [], "Fixed commit": "08cd14c9417b8051463f6fe6984e40be3722295c", "Url": "https://api.github.com/repos/yahya09206/AD340-Android-Mobile-App-Development", "Date": "2018-04-26T04:17:55Z"},
{"Line": "29=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.TextView.setText((((getString(R.string.thankyou)) + username) + \"!\"))=>android.widget.TextView.setText(((((getString(R.string.thanks)) + \" \") + username) + \"!\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6590/buggy-version/app.src.main.java.com.example.yhussein.helloworld.HomeActivity.java", "BodyUseAPI": [], "Fixed commit": "08cd14c9417b8051463f6fe6984e40be3722295c", "Url": "https://api.github.com/repos/yahya09206/AD340-Android-Mobile-App-Development", "Date": "2018-04-26T04:17:55Z"},
{"Line": "74=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.server.entities.Travel.setForm(com.server.entities.Form)=>travel.getForm().add(com.server.entities.Form)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1988/buggy-version/src.main.java.com.server.services.impl.TravelServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "05925a15e284499dbfc54b7b9110af3ff1d9c63a", "Url": "https://api.github.com/repos/BrenoSouza/MOBILIDADE-UFCG-SERVER", "Date": "2018-02-08T00:08:39Z"},
{"Line": "26=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.lang.String.substring(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1620/buggy-version/src.UIscenes.concatWorker.java", "BodyUseAPI": [], "Fixed commit": "35229528463b5fc37aea6faf7d133b8c243ddd97", "Url": "https://api.github.com/repos/jake-good/name-sayer", "Date": "2018-10-22T08:19:14Z"},
{"Line": "26=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1620/buggy-version/src.UIscenes.concatWorker.java", "BodyUseAPI": [], "Fixed commit": "35229528463b5fc37aea6faf7d133b8c243ddd97", "Url": "https://api.github.com/repos/jake-good/name-sayer", "Date": "2018-10-22T08:19:14Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.qualcomm.robotcore.hardware.DcMotor.setDirection(DcMotor.Direction.FORWARD)=>com.qualcomm.robotcore.hardware.DcMotor.setDirection(DcMotor.Direction.REVERSE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5711/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.PracWheels.java", "BodyUseAPI": [], "Fixed commit": "6f09eb6b740a814e557e66097b5442f8738235b6", "Url": "https://api.github.com/repos/hudsons1033/ftc_app_lmhs_dark_matter", "Date": "2017-10-18T01:46:45Z"},
{"Line": "280=>298", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.awt.event.ActionListener() { @java.lang.Override public void actionPerformed(java.awt.event.ActionEvent event) { codemetropolis.toolchain.gui.beans.ExecutionOptions executionOptions = controller.getExecutionOptions(); fillOptions(executionOptions); if (!(fillAndValidateMetricOptions(executionOptions))) { return; } if (codemetropolis.toolchain.gui.utils.GuiUtils.validateOptions(controller.getExecutionOptions())) { java.io.PipedOutputStream out = new java.io.PipedOutputStream(); codemetropolis.toolchain.gui.ExecutionDialog dialog = new codemetropolis.toolchain.gui.ExecutionDialog(self, out); dialog.setVisible(true); codemetropolis.toolchain.gui.utils.ExecutionWorker worker = new codemetropolis.toolchain.gui.utils.ExecutionWorker(start, controller, out); worker.execute(); } } }=>new java.awt.event.ActionListener() { @java.lang.Override public void actionPerformed(java.awt.event.ActionEvent event) { codemetropolis.toolchain.gui.beans.ExecutionOptions executionOptions = controller.getExecutionOptions(); fillOptions(executionOptions); if (!(fillAndValidateMetricOptions(executionOptions))) { return; } if (codemetropolis.toolchain.gui.utils.GuiUtils.validateOptions(controller.getExecutionOptions())) { java.io.PipedOutputStream out = new java.io.PipedOutputStream(); codemetropolis.toolchain.gui.ExecutionDialog dialog = new codemetropolis.toolchain.gui.ExecutionDialog(self, out); dialog.setVisible(true); codemetropolis.toolchain.gui.utils.ExecutionWorker worker = new codemetropolis.toolchain.gui.utils.ExecutionWorker(start, controller, out); worker.execute(); } } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3513/buggy-version/sources.codemetropolis-toolchain-gui.src.main.java.codemetropolis.toolchain.gui.CodeMetropolisGUI.java", "BodyUseAPI": [], "Fixed commit": "dce3a3bea1d67794d963cda7b52370f3d4531569", "Url": "https://api.github.com/repos/meviktor/CodeMetropolis", "Date": "2018-04-15T09:31:49Z"},
{"Line": "280=>298", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "codemetropolis.toolchain.gui.components.CMButton.addActionListener(java.awt.event.ActionListener)=>codemetropolis.toolchain.gui.components.CMButton.addActionListener(java.awt.event.ActionListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3513/buggy-version/sources.codemetropolis-toolchain-gui.src.main.java.codemetropolis.toolchain.gui.CodeMetropolisGUI.java", "BodyUseAPI": [], "Fixed commit": "dce3a3bea1d67794d963cda7b52370f3d4531569", "Url": "https://api.github.com/repos/meviktor/CodeMetropolis", "Date": "2018-04-15T09:31:49Z"},
{"Line": "215=>216", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "codemetropolis.toolchain.gui.components.CMButton.addActionListener(codemetropolis.toolchain.gui.components.listeners.MappingEditorListener)=>codemetropolis.toolchain.gui.components.CMButton.addActionListener(java.awt.event.ActionListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3513/buggy-version/sources.codemetropolis-toolchain-gui.src.main.java.codemetropolis.toolchain.gui.CodeMetropolisGUI.java", "BodyUseAPI": [], "Fixed commit": "dce3a3bea1d67794d963cda7b52370f3d4531569", "Url": "https://api.github.com/repos/meviktor/CodeMetropolis", "Date": "2018-04-15T09:31:49Z"},
{"Line": "90=>92", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.toLowerCase()=>java.lang.String.toLowerCase(java.util.Locale)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/519/buggy-version/src.main.java.com.owncloud.android.utils.FileSortOrderByName.java", "BodyUseAPI": [], "Fixed commit": "3d0877be26a14206d9bba5aed421e755340c94ff", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2018-04-24T08:51:23Z"},
{"Line": "83=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.toLowerCase()=>java.lang.String.toLowerCase(java.util.Locale)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/519/buggy-version/src.main.java.com.owncloud.android.utils.FileSortOrderByName.java", "BodyUseAPI": [], "Fixed commit": "3d0877be26a14206d9bba5aed421e755340c94ff", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2018-04-24T08:51:23Z"},
{"Line": "89=>90", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.toLowerCase()=>java.lang.String.toLowerCase(java.util.Locale)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/519/buggy-version/src.main.java.com.owncloud.android.utils.FileSortOrderByName.java", "BodyUseAPI": [], "Fixed commit": "3d0877be26a14206d9bba5aed421e755340c94ff", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2018-04-24T08:51:23Z"},
{"Line": "83=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.toLowerCase()=>java.lang.String.toLowerCase(java.util.Locale)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/519/buggy-version/src.main.java.com.owncloud.android.utils.FileSortOrderByName.java", "BodyUseAPI": [], "Fixed commit": "3d0877be26a14206d9bba5aed421e755340c94ff", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2018-04-24T08:51:23Z"},
{"Line": "75=>75", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.TreeMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.values()=>java.util.concurrent.ConcurrentSkipListMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.values()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4102/buggy-version/src.Donky.core.src.main.java.net.donky.core.lifecycle.ApplicationStartEventBuffer.java", "BodyUseAPI": [], "Fixed commit": "5ecc63f26bf21cc9c59d48c977aa85a8aa5c245e", "Url": "https://api.github.com/repos/Donky-Network/DonkySDK-Android-Modular", "Date": "2018-10-24T20:26:27Z"},
{"Line": "80=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.TreeMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.values()=>java.util.concurrent.ConcurrentSkipListMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.values()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4102/buggy-version/src.Donky.core.src.main.java.net.donky.core.lifecycle.ApplicationStartEventBuffer.java", "BodyUseAPI": [], "Fixed commit": "5ecc63f26bf21cc9c59d48c977aa85a8aa5c245e", "Url": "https://api.github.com/repos/Donky-Network/DonkySDK-Android-Modular", "Date": "2018-10-24T20:26:27Z"},
{"Line": "92=>92", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.TreeMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.clear()=>java.util.concurrent.ConcurrentSkipListMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.clear()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4102/buggy-version/src.Donky.core.src.main.java.net.donky.core.lifecycle.ApplicationStartEventBuffer.java", "BodyUseAPI": [], "Fixed commit": "5ecc63f26bf21cc9c59d48c977aa85a8aa5c245e", "Url": "https://api.github.com/repos/Donky-Network/DonkySDK-Android-Modular", "Date": "2018-10-24T20:26:27Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.TreeMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.put(long,net.donky.core.events.ApplicationStartEvent)=>java.util.concurrent.ConcurrentSkipListMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.put(long,net.donky.core.events.ApplicationStartEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4102/buggy-version/src.Donky.core.src.main.java.net.donky.core.lifecycle.ApplicationStartEventBuffer.java", "BodyUseAPI": [], "Fixed commit": "5ecc63f26bf21cc9c59d48c977aa85a8aa5c245e", "Url": "https://api.github.com/repos/Donky-Network/DonkySDK-Android-Modular", "Date": "2018-10-24T20:26:27Z"},
{"Line": "74=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.TreeMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.size()=>java.util.concurrent.ConcurrentSkipListMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4102/buggy-version/src.Donky.core.src.main.java.net.donky.core.lifecycle.ApplicationStartEventBuffer.java", "BodyUseAPI": [], "Fixed commit": "5ecc63f26bf21cc9c59d48c977aa85a8aa5c245e", "Url": "https://api.github.com/repos/Donky-Network/DonkySDK-Android-Modular", "Date": "2018-10-24T20:26:27Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.TreeMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.isEmpty()=>java.util.concurrent.ConcurrentSkipListMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4102/buggy-version/src.Donky.core.src.main.java.net.donky.core.lifecycle.ApplicationStartEventBuffer.java", "BodyUseAPI": [], "Fixed commit": "5ecc63f26bf21cc9c59d48c977aa85a8aa5c245e", "Url": "https://api.github.com/repos/Donky-Network/DonkySDK-Android-Modular", "Date": "2018-10-24T20:26:27Z"},
{"Line": "87=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.TreeMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.lastEntry()=>java.util.concurrent.ConcurrentSkipListMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.lastEntry()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4102/buggy-version/src.Donky.core.src.main.java.net.donky.core.lifecycle.ApplicationStartEventBuffer.java", "BodyUseAPI": [], "Fixed commit": "5ecc63f26bf21cc9c59d48c977aa85a8aa5c245e", "Url": "https://api.github.com/repos/Donky-Network/DonkySDK-Android-Modular", "Date": "2018-10-24T20:26:27Z"},
{"Line": "78=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.TreeMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.isEmpty()=>java.util.concurrent.ConcurrentSkipListMap<java.lang.Long, net.donky.core.events.ApplicationStartEvent>.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4102/buggy-version/src.Donky.core.src.main.java.net.donky.core.lifecycle.ApplicationStartEventBuffer.java", "BodyUseAPI": [], "Fixed commit": "5ecc63f26bf21cc9c59d48c977aa85a8aa5c245e", "Url": "https://api.github.com/repos/Donky-Network/DonkySDK-Android-Modular", "Date": "2018-10-24T20:26:27Z"},
{"Line": "34=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.beigeoranges.ecms.Dao.UserDao.getUserIdByEmail(invitation.getEmail())=>com.beigeoranges.ecms.Dao.UserDao.findUserAccount(invitation.getEmail())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/880/buggy-version/src.main.java.com.beigeoranges.ecms.Controllers.InvitationController.java", "BodyUseAPI": [], "Fixed commit": "caa2ccb37ef9ab8dd73a0db8df6fb8934adb3e56", "Url": "https://api.github.com/repos/malynch7/ecms", "Date": "2018-07-16T20:51:01Z"},
{"Line": "480=>481", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.ekstep.content.tool.service.SyncService.createQuestion(java.util.Map<java.lang.String, java.lang.Object>,java.lang.String,boolean)=>org.ekstep.content.tool.service.SyncService.updateQuestion(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>,java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8296/buggy-version/platform-tools.spikes.content-tool.src.main.java.org.ekstep.content.tool.service.SyncService.java", "BodyUseAPI": [], "Fixed commit": "18050159288f51d0c03d38fefbce185427669844", "Url": "https://api.github.com/repos/project-sunbird/sunbird-learning-platform", "Date": "2018-10-13T11:12:33Z"},
{"Line": "203=>203", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, java.lang.Object>.get(java.lang.String)=>java.lang.Object.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8296/buggy-version/platform-tools.spikes.content-tool.src.main.java.org.ekstep.content.tool.service.SyncService.java", "BodyUseAPI": [], "Fixed commit": "18050159288f51d0c03d38fefbce185427669844", "Url": "https://api.github.com/repos/project-sunbird/sunbird-learning-platform", "Date": "2018-10-13T11:12:33Z"},
{"Line": "203=>204", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.Object.put(java.lang.String,java.lang.Object)=>java.lang.Object.put(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8296/buggy-version/platform-tools.spikes.content-tool.src.main.java.org.ekstep.content.tool.service.SyncService.java", "BodyUseAPI": [], "Fixed commit": "18050159288f51d0c03d38fefbce185427669844", "Url": "https://api.github.com/repos/project-sunbird/sunbird-learning-platform", "Date": "2018-10-13T11:12:33Z"},
{"Line": "59=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.util.Log.d(java.lang.String,java.lang.String)=>dk.mahj.miniprojekt2.JourneyAdapter.changeCursor(dk.mahj.miniprojekt2.Controller.getInstance().getJourneys())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2284/buggy-version/app.src.main.java.dk.mahj.miniprojekt2.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "4052a9897a6de62c62c026562864ae1daf6d9616", "Url": "https://api.github.com/repos/Spurux/MiniProjekt2", "Date": "2018-04-26T08:39:39Z"},
{"Line": "7258=>7267", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.wso2.carbon.registry.core.Resource.getProperty(APIConstants.DISPLAY_PUBLISHER_ROLES)=>org.wso2.carbon.registry.core.Resource.getProperty(APIConstants.PUBLISHER_ROLES)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8543/buggy-version/components.apimgt.org.wso2.carbon.apimgt.impl.src.main.java.org.wso2.carbon.apimgt.impl.utils.APIUtil.java", "BodyUseAPI": [], "Fixed commit": "90f5d065678de0794fcb97e1baa5bce09ad2fe6c", "Url": "https://api.github.com/repos/wso2/carbon-apimgt", "Date": "2018-07-04T04:58:56Z"},
{"Line": "7257=>7263", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.wso2.carbon.apimgt.api.model.API.setAccessControlRoles((APIConstants.NULL_USER_ROLE_LIST.equals(apiResource.getProperty(APIConstants.DISPLAY_PUBLISHER_ROLES)) ? null : apiResource.getProperty(APIConstants.DISPLAY_PUBLISHER_ROLES)))=>org.wso2.carbon.registry.core.Resource.getProperty(APIConstants.PUBLISHER_ROLES)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8543/buggy-version/components.apimgt.org.wso2.carbon.apimgt.impl.src.main.java.org.wso2.carbon.apimgt.impl.utils.APIUtil.java", "BodyUseAPI": [], "Fixed commit": "90f5d065678de0794fcb97e1baa5bce09ad2fe6c", "Url": "https://api.github.com/repos/wso2/carbon-apimgt", "Date": "2018-07-04T04:58:56Z"},
{"Line": "116=>116", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.badlogic.gdx.scenes.scene2d.ui.TextButton(\"Refresh list\", btnStyle)=>new com.badlogic.gdx.scenes.scene2d.ui.TextButton(\"Refresh list\", skin)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6536/buggy-version/core.src.com.panic.tdt4240.view.ViewClasses.GameListView.java", "BodyUseAPI": [], "Fixed commit": "1395f8f9a72daa7e8fc7c5943700cb3272cf6d62", "Url": "https://api.github.com/repos/EirikOsnes/panic", "Date": "2018-04-19T13:28:38Z"},
{"Line": "54=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.panic.tdt4240.states.GameListState.1.connectToLobby(int)=>com.panic.tdt4240.states.GameListState.1.connectToLobby(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6536/buggy-version/core.src.com.panic.tdt4240.states.GameListState.java", "BodyUseAPI": [], "Fixed commit": "1395f8f9a72daa7e8fc7c5943700cb3272cf6d62", "Url": "https://api.github.com/repos/EirikOsnes/panic", "Date": "2018-04-19T13:28:38Z"},
{"Line": "118=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.eviware.soapui.impl.support.AbstractMockRequest.setRequestContent(java.lang.String)=>com.eviware.soapui.impl.wsdl.mock.WsdlMockRequest.setRequestContent(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8601/buggy-version/soapui.src.main.java.com.eviware.soapui.impl.wsdl.mock.WsdlMockRequest.java", "BodyUseAPI": [], "Fixed commit": "fd53559a8c75a6e4b751d63bb6361db4032e44fb", "Url": "https://api.github.com/repos/modax/soapui", "Date": "2018-10-27T22:26:04Z"},
{"Line": "140=>140", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.qrContent)=>android.view.View.findViewById(R.id.qr_content)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1842/buggy-version/app.src.main.java.com.example.ahmed_tarek.graduationapplication.QRActivity.java", "BodyUseAPI": [], "Fixed commit": "a4be59a113976b28acc427310da30c1b4ead4f7e", "Url": "https://api.github.com/repos/AhmedTarek-Fahiem/GraduationApplication", "Date": "2018-06-05T11:32:52Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.view.ViewGroup.findViewById(R.id.rv)=>android.view.View.findViewById(R.id.rv)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8795/buggy-version/app.src.main.java.com.example.aniket.businga.BusTrack.java", "BodyUseAPI": [], "Fixed commit": "2954fbdf598632a10d90316399d8f26064df141a", "Url": "https://api.github.com/repos/aniket0702/Businga", "Date": "2018-09-21T17:56:46Z"},
{"Line": "73=>75", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "xyz.hotrain.app.launcher.preference.IconPackPreference.setSelectedIconPack(mList.getByPackageName(persisted))=>android.widget.ImageView.setImageDrawable(iconPack.icon)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5118/buggy-version/my.src.xyz.hotrain.app.launcher.preference.IconPackPreference.java", "BodyUseAPI": [], "Fixed commit": "025072d7c634d564faf95400954922399f3d4628", "Url": "https://api.github.com/repos/GggXp/Launcher3", "Date": "2018-10-10T10:29:43Z"},
{"Line": "41=>41", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.Context.getSharedPreferences(Constant.PREFERENCE_NAME,Context.MODE_WORLD_READABLE)=>android.content.Context.getSharedPreferences(Constant.PREFERENCE_NAME,Context.MODE_PRIVATE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/647/buggy-version/MainApp.src.main.java.site.duqian.wchook.xposed.SettingsHelper.java", "BodyUseAPI": [], "Fixed commit": "8a4fe36cc49052a7a25b0fc764f663aa60505494", "Url": "https://api.github.com/repos/duqian291902259/WechatHook-Dusan", "Date": "2018-08-01T11:58:02Z"},
{"Line": "2545=>2564", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.jcodegen.java.FunctionDeclaration.addArgument(org.jcodegen.java.FunctionArgument)=>new org.jcodegen.java.FunctionDeclaration(\"updateRecord\").visibility(Visibility.PRIVATE).addArgument(org.jcodegen.java.FunctionArgument)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3778/buggy-version/src.org.beanmaker.BaseClassSourceFile.java", "BodyUseAPI": [], "Fixed commit": "74112c08999d240eece41b98552c2bf9c821b5f3", "Url": "https://api.github.com/repos/cpythoud/beanmaker", "Date": "2018-03-30T22:44:54Z"},
{"Line": "2529=>2580", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.jcodegen.java.FunctionCall.addArgument(java.lang.String)=>org.jcodegen.java.FunctionCall.byItself()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3778/buggy-version/src.org.beanmaker.BaseClassSourceFile.java", "BodyUseAPI": [], "Fixed commit": "74112c08999d240eece41b98552c2bf9c821b5f3", "Url": "https://api.github.com/repos/cpythoud/beanmaker", "Date": "2018-03-30T22:44:54Z"},
{"Line": "2381=>2455", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.jcodegen.java.FunctionDeclaration.addContent(new org.jcodegen.java.FunctionCall(\"updateLabels\").addArgument(\"transaction\").byItself())=>org.jcodegen.java.FunctionDeclaration.addContent(new org.jcodegen.java.VarDeclaration(\"long\", \"id\", new org.jcodegen.java.FunctionCall(\"addRecordCreation\", \"transaction\").addArgument(quickQuote(getInsertSQLQuery())).addArgument(new org.jcodegen.java.ObjectCreation(\"RecordCreationSetup\"))).markAsFinal())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3778/buggy-version/src.org.beanmaker.BaseClassSourceFile.java", "BodyUseAPI": [], "Fixed commit": "74112c08999d240eece41b98552c2bf9c821b5f3", "Url": "https://api.github.com/repos/cpythoud/beanmaker", "Date": "2018-03-30T22:44:54Z"},
{"Line": "2544=>2585", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.beanmaker.BaseClassSourceFile.addContent(new org.jcodegen.java.FunctionDeclaration(\"updateRecord\").addArgument(new org.jcodegen.java.FunctionArgument(\"DBTransaction\", \"transaction\")).visibility(Visibility.PRIVATE).addContent(new org.jcodegen.java.FunctionCall(\"addUpdate\", \"transaction\").byItself().addArgument(quickQuote(getUpdateSQLQuery())).addArgument(new org.jcodegen.java.ObjectCreation(\"RecordUpdateSetup\"))))=>org.beanmaker.BaseClassSourceFile.addContent(org.jcodegen.java.FunctionDeclaration)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3778/buggy-version/src.org.beanmaker.BaseClassSourceFile.java", "BodyUseAPI": [], "Fixed commit": "74112c08999d240eece41b98552c2bf9c821b5f3", "Url": "https://api.github.com/repos/cpythoud/beanmaker", "Date": "2018-03-30T22:44:54Z"},
{"Line": "2382=>2464", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.jcodegen.java.FunctionCall.addArgument(java.lang.String)=>org.jcodegen.java.FunctionCall.byItself()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3778/buggy-version/src.org.beanmaker.BaseClassSourceFile.java", "BodyUseAPI": [], "Fixed commit": "74112c08999d240eece41b98552c2bf9c821b5f3", "Url": "https://api.github.com/repos/cpythoud/beanmaker", "Date": "2018-03-30T22:44:54Z"},
{"Line": "2528=>2579", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.jcodegen.java.FunctionDeclaration.addContent(new org.jcodegen.java.FunctionCall(\"updateLabels\").addArgument(\"transaction\").byItself())=>org.jcodegen.java.FunctionDeclaration.addContent(new org.jcodegen.java.FunctionCall(\"updateLabels\").byItself().addArgument(\"transaction\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3778/buggy-version/src.org.beanmaker.BaseClassSourceFile.java", "BodyUseAPI": [], "Fixed commit": "74112c08999d240eece41b98552c2bf9c821b5f3", "Url": "https://api.github.com/repos/cpythoud/beanmaker", "Date": "2018-03-30T22:44:54Z"},
{"Line": "47=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.concurrent.locks.ReentrantLock.isLocked()=>java.util.concurrent.locks.ReentrantLock.isHeldByCurrentThread()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2362/buggy-version/src.main.java.transactionalMemory.Register.java", "BodyUseAPI": [], "Fixed commit": "f686515b162103fd38d199bcbb07511511cc1f3a", "Url": "https://api.github.com/repos/FlorentALAPETITE/project_TL2", "Date": "2018-03-29T12:58:27Z"},
{"Line": "114=>114", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.math.BigDecimal.equals(java.math.BigDecimal)=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1110/buggy-version/domain.src.main.java.za.co.global.domain.fileupload.mapping.IssuerMappings.java", "BodyUseAPI": [], "Fixed commit": "a714fec83e042f46695ab67a9bd6c57ee4e44e5e", "Url": "https://api.github.com/repos/pradeepgirsa/GIRSA", "Date": "2018-10-12T17:58:02Z"},
{"Line": "125=>125", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.math.BigDecimal.hashCode()=>java.lang.String.hashCode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1110/buggy-version/domain.src.main.java.za.co.global.domain.fileupload.mapping.IssuerMappings.java", "BodyUseAPI": [], "Fixed commit": "a714fec83e042f46695ab67a9bd6c57ee4e44e5e", "Url": "https://api.github.com/repos/pradeepgirsa/GIRSA", "Date": "2018-10-12T17:58:02Z"},
{"Line": "23=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "FileAndObjectResolver.ADDITIONAL_CLASSIFICATION.getFileType()=>FileAndObjectResolver.DERIVATIVE_TYPES.getFileType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1110/buggy-version/web.src.main.java.za.co.global.controllers.fileupload.mapping.DerivativeTypesController.java", "BodyUseAPI": [], "Fixed commit": "a714fec83e042f46695ab67a9bd6c57ee4e44e5e", "Url": "https://api.github.com/repos/pradeepgirsa/GIRSA", "Date": "2018-10-12T17:58:02Z"},
{"Line": "116=>116", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.druid.math.expr.ExprEval.isNull()=>io.druid.math.expr.ExprEval.value()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1956/buggy-version/processing.src.main.java.io.druid.query.expression.TrimExprMacro.java", "BodyUseAPI": [], "Fixed commit": "9a21ad8381920aa19b26b91d12c659ede2a7bc2f", "Url": "https://api.github.com/repos/nishantmonu51/druid", "Date": "2018-02-28T20:41:18Z"},
{"Line": "32=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.liferay.frontend.editor.taglib.internal.activator.EditorRendererUtil.stop()=>com.liferay.frontend.editor.taglib.internal.EditorRendererUtil.stop()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/823/buggy-version/modules.apps.foundation.frontend-editor.frontend-editor-taglib.src.main.java.com.liferay.frontend.editor.taglib.internal.activator.EditorRendererBundleActivator.java", "BodyUseAPI": [], "Fixed commit": "c7ece693a125adf967bb97b28e8c072bd589db0a", "Url": "https://api.github.com/repos/Ithildir/liferay-portal", "Date": "2018-03-10T00:31:51Z"},
{"Line": "27=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.liferay.frontend.editor.taglib.internal.activator.EditorRendererUtil.start(org.osgi.framework.BundleContext)=>com.liferay.frontend.editor.taglib.internal.EditorRendererUtil.start(org.osgi.framework.BundleContext)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/823/buggy-version/modules.apps.foundation.frontend-editor.frontend-editor-taglib.src.main.java.com.liferay.frontend.editor.taglib.internal.activator.EditorRendererBundleActivator.java", "BodyUseAPI": [], "Fixed commit": "c7ece693a125adf967bb97b28e8c072bd589db0a", "Url": "https://api.github.com/repos/Ithildir/liferay-portal", "Date": "2018-03-10T00:31:51Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.debug(java.lang.String)=>org.slf4j.Logger.debug(java.lang.String,java.lang.Class<?>,java.lang.Class<?>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9081/buggy-version/util.src.main.java.com.lgsim.engine.graphEditor.util.ImplementationUtil.java", "BodyUseAPI": [], "Fixed commit": "bed0148786b8c3edcbccb090f2ee376e7f3dbca1", "Url": "https://api.github.com/repos/lgsimu/graph-editor", "Date": "2018-04-26T02:15:58Z"},
{"Line": "74=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.getbase.floatingactionbutton.FloatingActionButton.setOnClickListener(android.view.View.OnClickListener)=>com.github.clans.fab.FloatingActionButton.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9642/buggy-version/app.src.main.java.voiceapp.samarthgupta.com.voiceproject.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "330c8e8f3ee39830b0f31c9491c9ce4fd287b718", "Url": "https://api.github.com/repos/utkarshnath/voice_activation", "Date": "2018-10-15T18:05:01Z"},
{"Line": "82=>85", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.getbase.floatingactionbutton.FloatingActionButton.setOnClickListener(android.view.View.OnClickListener)=>com.github.clans.fab.FloatingActionButton.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9642/buggy-version/app.src.main.java.voiceapp.samarthgupta.com.voiceproject.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "330c8e8f3ee39830b0f31c9491c9ce4fd287b718", "Url": "https://api.github.com/repos/utkarshnath/voice_activation", "Date": "2018-10-15T18:05:01Z"},
{"Line": "51=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Optional<java.lang.Integer>.get()=>java.util.Optional<java.lang.Integer>.orElse(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7093/buggy-version/src.main.java.org.openlmis.requisition.dto.StockCardRangeSummaryDto.java", "BodyUseAPI": [], "Fixed commit": "32976588aad48f2aaaa2808b7da7edfbf0166463", "Url": "https://api.github.com/repos/OpenLMIS/openlmis-requisition", "Date": "2018-06-04T11:03:25Z"},
{"Line": "97=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ballerinalang.packerina.BuilderUtils.compileWithTestsAndWrite(java.nio.file.Path,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)=>java.nio.file.Path.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1215/buggy-version/cli.ballerina-packerina.src.main.java.org.ballerinalang.packerina.cmd.BuildCommand.java", "BodyUseAPI": [], "Fixed commit": "1b11122c7cbecd6bb55ef8fd6b14b5c0431c6031", "Url": "https://api.github.com/repos/pranavan15/ballerina-lang", "Date": "2018-08-16T01:07:12Z"},
{"Line": "76=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.ftlrobots.link.ros.RosLink.notifyRobotDisabledChanged(msg.getValues().get(\"disabled\"))=>com.ftlrobots.link.ros.RosLink.notifyRobotDisabledChanged(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3464/buggy-version/link_ros.src.main.java.com.ftlrobots.link.ros.RosLink.java", "BodyUseAPI": [], "Fixed commit": "136f2808c9d38c5b6793d59dba622a9604bef499", "Url": "https://api.github.com/repos/ftl-robots/ftl-wpilib-bridge", "Date": "2018-08-14T21:20:29Z"},
{"Line": "69=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "like.entity.LogEntity.setId(java.lang.String)=>like.entity.LogEntity.setIp(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2982/buggy-version/src.main.java.like.aop.WebControllerAop.java", "BodyUseAPI": [], "Fixed commit": "8e9799f5be60763c7df43ad45f360e0095fa140f", "Url": "https://api.github.com/repos/like2372/like-blog-api", "Date": "2018-03-07T02:28:04Z"},
{"Line": "59=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "T.toString()=>java.lang.String.valueOf(T)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2294/buggy-version/jgrapht-io.src.main.java.org.jgrapht.io.DefaultAttribute.java", "BodyUseAPI": [], "Fixed commit": "c954dc0cd1a28a19b57415d5d53ce6096ca643f4", "Url": "https://api.github.com/repos/d-michail/jgrapht", "Date": "2018-06-26T12:54:53Z"},
{"Line": "65=>65", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "T.toString()=>java.lang.String.valueOf(T)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2294/buggy-version/jgrapht-io.src.main.java.org.jgrapht.io.DefaultAttribute.java", "BodyUseAPI": [], "Fixed commit": "c954dc0cd1a28a19b57415d5d53ce6096ca643f4", "Url": "https://api.github.com/repos/d-michail/jgrapht", "Date": "2018-06-26T12:54:53Z"},
{"Line": "11=>11", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Calc.topostfix(java.lang.String[])=>Calc.toPostfix(java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9761/buggy-version/LAB03.src.Calc.java", "BodyUseAPI": [], "Fixed commit": "1f2d07fd0945dabe3eac303817bad986af2de5ca", "Url": "https://api.github.com/repos/vilhelmmelkstam/TDDC77_lab", "Date": "2018-09-26T16:59:12Z"},
{"Line": "8=>8", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Scanner.next()=>java.util.Scanner.nextLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9761/buggy-version/LAB03.src.Calc.java", "BodyUseAPI": [], "Fixed commit": "1f2d07fd0945dabe3eac303817bad986af2de5ca", "Url": "https://api.github.com/repos/vilhelmmelkstam/TDDC77_lab", "Date": "2018-09-26T16:59:12Z"},
{"Line": "516=>516", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cn.hutool.db.DbUtil.buildLikeValue(java.lang.String,cn.hutool.db.sql.Condition.LikeType)=>cn.hutool.db.DbUtil.buildLikeValue(java.lang.String,cn.hutool.db.sql.Condition.LikeType,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7945/buggy-version/hutool-db.src.main.java.cn.hutool.db.AbstractSqlRunner.java", "BodyUseAPI": [], "Fixed commit": "fa1ddcc5a7b280f6d99c7004c2fa76e0b937d80c", "Url": "https://api.github.com/repos/looly/hutool", "Date": "2018-01-15T04:05:55Z"},
{"Line": "613=>613", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.hutool.core.util.StrUtil.builder(java.lang.String)=>cn.hutool.core.util.StrUtil.builder((withLikeKeyword ? \"LIKE \" : \"\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7945/buggy-version/hutool-db.src.main.java.cn.hutool.db.DbUtil.java", "BodyUseAPI": [], "Fixed commit": "fa1ddcc5a7b280f6d99c7004c2fa76e0b937d80c", "Url": "https://api.github.com/repos/looly/hutool", "Date": "2018-01-15T04:05:55Z"},
{"Line": "397=>397", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cn.hutool.db.DbUtil.buildLikeValue(java.lang.String,cn.hutool.db.sql.Condition.LikeType)=>cn.hutool.db.DbUtil.buildLikeValue(java.lang.String,cn.hutool.db.sql.Condition.LikeType,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7945/buggy-version/hutool-db.src.main.java.cn.hutool.db.SqlConnRunner.java", "BodyUseAPI": [], "Fixed commit": "fa1ddcc5a7b280f6d99c7004c2fa76e0b937d80c", "Url": "https://api.github.com/repos/looly/hutool", "Date": "2018-01-15T04:05:55Z"},
{"Line": "118=>118", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cn.hutool.db.DbUtil.buildLikeValue(java.lang.String,cn.hutool.db.sql.Condition.LikeType)=>cn.hutool.db.DbUtil.buildLikeValue(java.lang.String,cn.hutool.db.sql.Condition.LikeType,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7945/buggy-version/hutool-db.src.main.java.cn.hutool.db.sql.Condition.java", "BodyUseAPI": [], "Fixed commit": "fa1ddcc5a7b280f6d99c7004c2fa76e0b937d80c", "Url": "https://api.github.com/repos/looly/hutool", "Date": "2018-01-15T04:05:55Z"},
{"Line": "536=>536", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.indexOf(java.lang.String)=>java.lang.String.lastIndexOf(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3376/buggy-version/src.gov.nih.nlm.ling.brat.StandoffAnnotationReader.java", "BodyUseAPI": [], "Fixed commit": "45fbd9346901ed47ceac2f7b7dd615ea551f0c78", "Url": "https://api.github.com/repos/kilicogluh/Bio-SCoRes", "Date": "2018-09-04T21:12:53Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "uk.gov.hmcts.cmc.ccd.domain.CCDPaymentState.isFinished()=>payment.getFinished().equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3826/buggy-version/ccd-adapter.src.main.java.uk.gov.hmcts.cmc.ccd.mapper.PaymentStateMapper.java", "BodyUseAPI": [], "Fixed commit": "f3d0e493730662bf9050559a6eb82f547aea99dd", "Url": "https://api.github.com/repos/hmcts/cmc-claim-store", "Date": "2018-01-17T11:11:14Z"},
{"Line": "55=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "mcalzaferri.net.http.HttpKeyValueString.toString()=>mcalzaferri.net.http.HttpKeyValueString.encode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7385/buggy-version/Common.src.main.mcalzaferri.net.http.HttpMessage.java", "BodyUseAPI": [], "Fixed commit": "25e232036bb04a18f1ee67c25cc89efe1377dfc6", "Url": "https://api.github.com/repos/mcalzaferri/HeatMap", "Date": "2018-10-20T11:52:08Z"},
{"Line": "388=>387", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "uk.co.senab.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)=>com.github.chrisbanes.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1887/buggy-version/src.com.owncloud.android.ui.activity.CropActivity.java", "BodyUseAPI": [], "Fixed commit": "3c20de8c51fb708c008ae821ccf9a414d2f2aa16", "Url": "https://api.github.com/repos/sd1998/android", "Date": "2018-03-10T09:58:14Z"},
{"Line": "67=>67", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.esq.toddrom.CivicGeo.Models.Data.CandidateDao.findOne(int)=>candidateDao.findById(candidateId).orElse(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4410/buggy-version/Controllers.CandidateController.java", "BodyUseAPI": [], "Fixed commit": "ffaaadfdcfc8313f287e865e824cb5fbfa298b72", "Url": "https://api.github.com/repos/Todd-Ro/CivicGeo", "Date": "2018-06-06T14:13:48Z"},
{"Line": "53=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.esq.toddrom.CivicGeo.Models.Data.CandidateDao.findOne(int)=>candidateDao.findById(candidateId).orElse(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4410/buggy-version/Controllers.CandidateController.java", "BodyUseAPI": [], "Fixed commit": "ffaaadfdcfc8313f287e865e824cb5fbfa298b72", "Url": "https://api.github.com/repos/Todd-Ro/CivicGeo", "Date": "2018-06-06T14:13:48Z"},
{"Line": "72=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.esq.toddrom.CivicGeo.Models.Data.CandidateDao.findOne(int)=>candidateDao.findById(candidateId).orElse(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4410/buggy-version/Controllers.CandidateController.java", "BodyUseAPI": [], "Fixed commit": "ffaaadfdcfc8313f287e865e824cb5fbfa298b72", "Url": "https://api.github.com/repos/Todd-Ro/CivicGeo", "Date": "2018-06-06T14:13:48Z"},
{"Line": "76=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.swing.ButtonGroup.add(javax.swing.JMenuItem)=>javax.swing.ButtonGroup.add(javax.swing.JRadioButtonMenuItem)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5445/buggy-version/src.sw_menu.MenuFrame.java", "BodyUseAPI": [], "Fixed commit": "f02be7ddf7ad213ca13a1e7343d9876deda36497", "Url": "https://api.github.com/repos/BenceSan/java_practice", "Date": "2018-08-20T16:40:28Z"},
{"Line": "51=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java_template.AppendLn()=>java_template.appendLn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/320/buggy-version/java_template.java", "BodyUseAPI": [], "Fixed commit": "986db50815e519122b23f8478c84e420b0bbc6f8", "Url": "https://api.github.com/repos/NBKelly/Java-Template-Maker-Maker", "Date": "2018-08-05T04:03:08Z"},
{"Line": "53=>52", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.apache.qpid.proton4j.buffer.ProtonBuffer.readByte()=>state.getDecoder().readNextTypeDecoder(org.apache.qpid.proton4j.buffer.ProtonBuffer,org.apache.qpid.proton4j.codec.DecoderState)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/305/buggy-version/qpid-proton4j-codec.src.main.java.org.apache.qpid.proton4j.codec.decoders.messaging.DeleteOnNoMessagesTypeDecoder.java", "BodyUseAPI": [], "Fixed commit": "68b4551491501a38028dcb97d1718c74b6e69802", "Url": "https://api.github.com/repos/tabish121/proton4j", "Date": "2018-04-30T22:26:29Z"},
{"Line": "109=>109", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Double.toString()=>java.lang.String.format(java.lang.String,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9599/buggy-version/app.src.main.java.ca.codein.immi_utils.immi_utils.Feature4Units.java", "BodyUseAPI": [], "Fixed commit": "8b879bc24cb22670268431d27e94252bd7928ecd", "Url": "https://api.github.com/repos/codein-ca/immi-utils", "Date": "2018-01-08T21:06:34Z"},
{"Line": "117=>117", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Double.toString()=>java.lang.String.format(java.lang.String,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9599/buggy-version/app.src.main.java.ca.codein.immi_utils.immi_utils.Feature4Units.java", "BodyUseAPI": [], "Fixed commit": "8b879bc24cb22670268431d27e94252bd7928ecd", "Url": "https://api.github.com/repos/codein-ca/immi-utils", "Date": "2018-01-08T21:06:34Z"},
{"Line": "87=>87", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Double.toString()=>java.lang.String.format(java.lang.String,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9599/buggy-version/app.src.main.java.ca.codein.immi_utils.immi_utils.Feature4Units.java", "BodyUseAPI": [], "Fixed commit": "8b879bc24cb22670268431d27e94252bd7928ecd", "Url": "https://api.github.com/repos/codein-ca/immi-utils", "Date": "2018-01-08T21:06:34Z"},
{"Line": "97=>97", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Double.toString()=>java.lang.String.format(java.lang.String,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9599/buggy-version/app.src.main.java.ca.codein.immi_utils.immi_utils.Feature4Units.java", "BodyUseAPI": [], "Fixed commit": "8b879bc24cb22670268431d27e94252bd7928ecd", "Url": "https://api.github.com/repos/codein-ca/immi-utils", "Date": "2018-01-08T21:06:34Z"},
{"Line": "54=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.File.createNewFile()=>java.io.FileOutputStream.close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7931/buggy-version/src.main.java.com.soapexample.service.FileServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "fa8791d2d162a74a9cff5d542d578cd30596f842", "Url": "https://api.github.com/repos/Malynovsky-Ivan/SoapExampleClient", "Date": "2018-02-05T14:34:08Z"},
{"Line": "92=>107", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "brs.db.sql.EntitySqlTable<brs.AssetTransfer>.getManyBy(org.jooq.DSLContext,ctx.selectFrom(brs.schema.Tables.ASSET_TRANSFER).where(ASSET_TRANSFER.SENDER_ID.eq(accountId).and(ASSET_TRANSFER.ASSET_ID.eq(assetId))).unionAll(ctx.selectFrom(brs.schema.Tables.ASSET_TRANSFER).where(ASSET_TRANSFER.RECIPIENT_ID.eq(accountId)).and(ASSET_TRANSFER.SENDER_ID.ne(accountId)).and(ASSET_TRANSFER.ASSET_ID.eq(assetId))).orderBy(ASSET_TRANSFER.HEIGHT.desc()).limit(from, to).getQuery(),boolean)=>brs.db.sql.EntitySqlTable<brs.AssetTransfer>.getManyBy(org.jooq.DSLContext,org.jooq.SelectQuery,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5594/buggy-version/src.brs.db.sql.SqlAssetTransferStore.java", "BodyUseAPI": [], "Fixed commit": "b3d5705d7bb4ea72d4e03a14f400ff26d8abb865", "Url": "https://api.github.com/repos/PoC-Consortium/burstcoin", "Date": "2018-05-13T00:49:03Z"},
{"Line": "94=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ctx.selectFrom(brs.schema.Tables.ASSET_TRANSFER).where(ASSET_TRANSFER.SENDER_ID.eq(accountId).and(ASSET_TRANSFER.ASSET_ID.eq(assetId))).unionAll(ctx.selectFrom(brs.schema.Tables.ASSET_TRANSFER).where(ASSET_TRANSFER.RECIPIENT_ID.eq(accountId)).and(ASSET_TRANSFER.SENDER_ID.ne(accountId)).and(ASSET_TRANSFER.ASSET_ID.eq(assetId))).orderBy(ASSET_TRANSFER.HEIGHT.desc()).limit(int,int)=>ctx.selectFrom(brs.schema.Tables.ASSET_TRANSFER).where(ASSET_TRANSFER.SENDER_ID.eq(accountId).and(ASSET_TRANSFER.ASSET_ID.eq(assetId))).unionAll(ctx.selectFrom(brs.schema.Tables.ASSET_TRANSFER).where(ASSET_TRANSFER.RECIPIENT_ID.eq(accountId)).and(ASSET_TRANSFER.SENDER_ID.ne(accountId)).and(ASSET_TRANSFER.ASSET_ID.eq(assetId))).orderBy(ASSET_TRANSFER.HEIGHT.desc()).getQuery()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5594/buggy-version/src.brs.db.sql.SqlAssetTransferStore.java", "BodyUseAPI": [], "Fixed commit": "b3d5705d7bb4ea72d4e03a14f400ff26d8abb865", "Url": "https://api.github.com/repos/PoC-Consortium/burstcoin", "Date": "2018-05-13T00:49:03Z"},
{"Line": "72=>86", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "brs.db.sql.EntitySqlTable<brs.AssetTransfer>.getManyBy(org.jooq.DSLContext,ctx.selectFrom(brs.schema.Tables.ASSET_TRANSFER).where(ASSET_TRANSFER.SENDER_ID.eq(accountId)).unionAll(ctx.selectFrom(brs.schema.Tables.ASSET_TRANSFER).where(ASSET_TRANSFER.RECIPIENT_ID.eq(accountId).and(ASSET_TRANSFER.SENDER_ID.ne(accountId)))).orderBy(ASSET_TRANSFER.HEIGHT.desc()).limit(from, to).getQuery(),boolean)=>brs.db.sql.EntitySqlTable<brs.AssetTransfer>.getManyBy(org.jooq.DSLContext,org.jooq.SelectQuery,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5594/buggy-version/src.brs.db.sql.SqlAssetTransferStore.java", "BodyUseAPI": [], "Fixed commit": "b3d5705d7bb4ea72d4e03a14f400ff26d8abb865", "Url": "https://api.github.com/repos/PoC-Consortium/burstcoin", "Date": "2018-05-13T00:49:03Z"},
{"Line": "74=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ctx.selectFrom(brs.schema.Tables.ASSET_TRANSFER).where(ASSET_TRANSFER.SENDER_ID.eq(accountId)).unionAll(ctx.selectFrom(brs.schema.Tables.ASSET_TRANSFER).where(ASSET_TRANSFER.RECIPIENT_ID.eq(accountId).and(ASSET_TRANSFER.SENDER_ID.ne(accountId)))).orderBy(ASSET_TRANSFER.HEIGHT.desc()).limit(int,int)=>ctx.selectFrom(brs.schema.Tables.ASSET_TRANSFER).where(ASSET_TRANSFER.SENDER_ID.eq(accountId)).unionAll(ctx.selectFrom(brs.schema.Tables.ASSET_TRANSFER).where(ASSET_TRANSFER.RECIPIENT_ID.eq(accountId).and(ASSET_TRANSFER.SENDER_ID.ne(accountId)))).orderBy(ASSET_TRANSFER.HEIGHT.desc()).getQuery()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5594/buggy-version/src.brs.db.sql.SqlAssetTransferStore.java", "BodyUseAPI": [], "Fixed commit": "b3d5705d7bb4ea72d4e03a14f400ff26d8abb865", "Url": "https://api.github.com/repos/PoC-Consortium/burstcoin", "Date": "2018-05-13T00:49:03Z"},
{"Line": "77=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "brs.db.sql.EntitySqlTable<brs.Trade>.getManyBy(org.jooq.DSLContext,ctx.selectFrom(brs.db.sql.TRADE).where(TRADE.SELLER_ID.eq(accountId).and(TRADE.ASSET_ID.eq(assetId))).unionAll(ctx.selectFrom(brs.db.sql.TRADE).where(TRADE.BUYER_ID.eq(accountId)).and(TRADE.SELLER_ID.ne(accountId)).and(TRADE.ASSET_ID.eq(assetId))).orderBy(TRADE.HEIGHT.desc()).limit(from, to).getQuery(),boolean)=>brs.db.sql.EntitySqlTable<brs.Trade>.getManyBy(org.jooq.DSLContext,org.jooq.SelectQuery,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5594/buggy-version/src.brs.db.sql.SqlTradeStore.java", "BodyUseAPI": [], "Fixed commit": "b3d5705d7bb4ea72d4e03a14f400ff26d8abb865", "Url": "https://api.github.com/repos/PoC-Consortium/burstcoin", "Date": "2018-05-13T00:49:03Z"},
{"Line": "55=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "brs.db.sql.EntitySqlTable<brs.Trade>.getManyBy(org.jooq.DSLContext,ctx.selectFrom(brs.db.sql.TRADE).where(TRADE.SELLER_ID.eq(accountId)).unionAll(ctx.selectFrom(brs.db.sql.TRADE).where(TRADE.BUYER_ID.eq(accountId).and(TRADE.SELLER_ID.ne(accountId)))).orderBy(TRADE.HEIGHT.desc()).limit(from, to).getQuery(),boolean)=>brs.db.sql.EntitySqlTable<brs.Trade>.getManyBy(org.jooq.DSLContext,org.jooq.SelectQuery,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5594/buggy-version/src.brs.db.sql.SqlTradeStore.java", "BodyUseAPI": [], "Fixed commit": "b3d5705d7bb4ea72d4e03a14f400ff26d8abb865", "Url": "https://api.github.com/repos/PoC-Consortium/burstcoin", "Date": "2018-05-13T00:49:03Z"},
{"Line": "79=>79", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ctx.selectFrom(brs.db.sql.TRADE).where(TRADE.SELLER_ID.eq(accountId).and(TRADE.ASSET_ID.eq(assetId))).unionAll(ctx.selectFrom(brs.db.sql.TRADE).where(TRADE.BUYER_ID.eq(accountId)).and(TRADE.SELLER_ID.ne(accountId)).and(TRADE.ASSET_ID.eq(assetId))).orderBy(TRADE.HEIGHT.desc()).limit(int,int)=>ctx.selectFrom(brs.db.sql.TRADE).where(TRADE.SELLER_ID.eq(accountId).and(TRADE.ASSET_ID.eq(assetId))).unionAll(ctx.selectFrom(brs.db.sql.TRADE).where(TRADE.BUYER_ID.eq(accountId)).and(TRADE.SELLER_ID.ne(accountId)).and(TRADE.ASSET_ID.eq(assetId))).orderBy(TRADE.HEIGHT.desc()).getQuery()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5594/buggy-version/src.brs.db.sql.SqlTradeStore.java", "BodyUseAPI": [], "Fixed commit": "b3d5705d7bb4ea72d4e03a14f400ff26d8abb865", "Url": "https://api.github.com/repos/PoC-Consortium/burstcoin", "Date": "2018-05-13T00:49:03Z"},
{"Line": "57=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ctx.selectFrom(brs.db.sql.TRADE).where(TRADE.SELLER_ID.eq(accountId)).unionAll(ctx.selectFrom(brs.db.sql.TRADE).where(TRADE.BUYER_ID.eq(accountId).and(TRADE.SELLER_ID.ne(accountId)))).orderBy(TRADE.HEIGHT.desc()).limit(int,int)=>ctx.selectFrom(brs.db.sql.TRADE).where(TRADE.SELLER_ID.eq(accountId)).unionAll(ctx.selectFrom(brs.db.sql.TRADE).where(TRADE.BUYER_ID.eq(accountId).and(TRADE.SELLER_ID.ne(accountId)))).orderBy(TRADE.HEIGHT.desc()).getQuery()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5594/buggy-version/src.brs.db.sql.SqlTradeStore.java", "BodyUseAPI": [], "Fixed commit": "b3d5705d7bb4ea72d4e03a14f400ff26d8abb865", "Url": "https://api.github.com/repos/PoC-Consortium/burstcoin", "Date": "2018-05-13T00:49:03Z"},
{"Line": "143=>156", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ctx.selectFrom(brs.db.sql.TRANSACTION).where(conditions).and(TRANSACTION.RECIPIENT_ID.eq(account.getId()).and(TRANSACTION.SENDER_ID.ne(account.getId()))).unionAll(ctx.selectFrom(brs.db.sql.TRANSACTION).where(conditions).and(TRANSACTION.SENDER_ID.eq(account.getId()))).orderBy(TRANSACTION.BLOCK_TIMESTAMP.desc(), TRANSACTION.ID.desc()).limit(from, ((to - from) + 1)).fetchResultSet()=>org.jooq.SelectQuery.fetchResultSet()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5594/buggy-version/src.brs.db.sql.SqlBlockchainStore.java", "BodyUseAPI": [], "Fixed commit": "b3d5705d7bb4ea72d4e03a14f400ff26d8abb865", "Url": "https://api.github.com/repos/PoC-Consortium/burstcoin", "Date": "2018-05-13T00:49:03Z"},
{"Line": "143=>142", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ctx.selectFrom(brs.db.sql.TRANSACTION).where(conditions).and(TRANSACTION.RECIPIENT_ID.eq(account.getId()).and(TRANSACTION.SENDER_ID.ne(account.getId()))).unionAll(ctx.selectFrom(brs.db.sql.TRANSACTION).where(conditions).and(TRANSACTION.SENDER_ID.eq(account.getId()))).orderBy(TRANSACTION.BLOCK_TIMESTAMP.desc(), TRANSACTION.ID.desc()).limit(int,int)=>ctx.selectFrom(brs.db.sql.TRANSACTION).where(conditions).and(TRANSACTION.RECIPIENT_ID.eq(account.getId()).and(TRANSACTION.SENDER_ID.ne(account.getId()))).unionAll(ctx.selectFrom(brs.db.sql.TRANSACTION).where(conditions).and(TRANSACTION.SENDER_ID.eq(account.getId()))).orderBy(TRANSACTION.BLOCK_TIMESTAMP.desc(), TRANSACTION.ID.desc()).getQuery()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5594/buggy-version/src.brs.db.sql.SqlBlockchainStore.java", "BodyUseAPI": [], "Fixed commit": "b3d5705d7bb4ea72d4e03a14f400ff26d8abb865", "Url": "https://api.github.com/repos/PoC-Consortium/burstcoin", "Date": "2018-05-13T00:49:03Z"},
{"Line": "33=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.sw.domain.facade.note.NoteFacade.merge(com.sw.domain.entity.note.Note)=>com.sw.domain.entity.note.Note.setRecommend(note.getRecommend())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1375/buggy-version/src.main.java.com.sw.domain.facade.note.NoteFacade.java", "BodyUseAPI": [], "Fixed commit": "0183da1533a4adb3a1c3ef2e2df3ab4a64dc923c", "Url": "https://api.github.com/repos/suishanwen/sw", "Date": "2018-01-18T07:40:59Z"},
{"Line": "89=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.ObjectOutputStream.writeLong(java.lang.Object)=>java.io.ObjectOutputStream.writeInt(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6813/buggy-version/robo4j-core.src.main.java.com.robo4j.net.MessageClient.java", "BodyUseAPI": [], "Fixed commit": "5ab280ef28192badfe70cdd99e7a62ec7c49d8e6", "Url": "https://api.github.com/repos/Robo4J/robo4j", "Date": "2018-02-02T16:06:25Z"},
{"Line": "85=>85", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.ObjectOutputStream.writeByte(MessageProtocolConstants.LONG)=>java.io.ObjectOutputStream.writeByte(MessageProtocolConstants.FLOAT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6813/buggy-version/robo4j-core.src.main.java.com.robo4j.net.MessageClient.java", "BodyUseAPI": [], "Fixed commit": "5ab280ef28192badfe70cdd99e7a62ec7c49d8e6", "Url": "https://api.github.com/repos/Robo4J/robo4j", "Date": "2018-02-02T16:06:25Z"},
{"Line": "104=>104", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.ObjectOutputStream.writeByte(MessageProtocolConstants.BYTE)=>java.io.ObjectOutputStream.writeByte(MessageProtocolConstants.CHAR)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6813/buggy-version/robo4j-core.src.main.java.com.robo4j.net.MessageClient.java", "BodyUseAPI": [], "Fixed commit": "5ab280ef28192badfe70cdd99e7a62ec7c49d8e6", "Url": "https://api.github.com/repos/Robo4J/robo4j", "Date": "2018-02-02T16:06:25Z"},
{"Line": "101=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.ObjectOutputStream.writeLong(java.lang.Object)=>java.io.ObjectOutputStream.writeShort(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6813/buggy-version/robo4j-core.src.main.java.com.robo4j.net.MessageClient.java", "BodyUseAPI": [], "Fixed commit": "5ab280ef28192badfe70cdd99e7a62ec7c49d8e6", "Url": "https://api.github.com/repos/Robo4J/robo4j", "Date": "2018-02-02T16:06:25Z"},
{"Line": "144=>144", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "em.createQuery(\"SELECT transaction FROM Transaction transaction WHERE transaction.transactionId = :value1\", at.accounting_otter.entity.Transaction.class).setParameter(\"value1\", transactionId).getSingleResult()=>em.createQuery(\"SELECT transaction FROM Transaction transaction WHERE transaction.transactionId = :value1\", at.accounting_otter.entity.Transaction.class).setParameter(\"value1\", transactionId).getResultList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/665/buggy-version/data-be.src.main.java.at.accounting_otter.DatabaseAdapterImpl.java", "BodyUseAPI": [], "Fixed commit": "f7f3eab05da2f45409bb138452e28792b0bae217", "Url": "https://api.github.com/repos/georg-un/Accounting-Otter", "Date": "2018-09-22T16:50:14Z"},
{"Line": "190=>194", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "em.createQuery(\"SELECT debit FROM Debit debit WHERE debit.debitId = :value1\", at.accounting_otter.entity.Debit.class).setParameter(\"value1\", debitId).getSingleResult()=>em.createQuery(\"SELECT debit FROM Debit debit WHERE debit.debitId = :value1\", at.accounting_otter.entity.Debit.class).setParameter(\"value1\", debitId).getResultList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/665/buggy-version/data-be.src.main.java.at.accounting_otter.DatabaseAdapterImpl.java", "BodyUseAPI": [], "Fixed commit": "f7f3eab05da2f45409bb138452e28792b0bae217", "Url": "https://api.github.com/repos/georg-un/Accounting-Otter", "Date": "2018-09-22T16:50:14Z"},
{"Line": "54=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.intern_desc)=>android.view.View.findViewById(R.id.job_desc)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3345/buggy-version/app.src.main.java.com.dzone.placement_for_engineers.jobExpAdapter.java", "BodyUseAPI": [], "Fixed commit": "3f1b85686c734d87871be6e1fd507608c40778f5", "Url": "https://api.github.com/repos/guptavijay/Placement_for_engineers", "Date": "2018-06-29T20:18:36Z"},
{"Line": "53=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.intern_title)=>android.view.View.findViewById(R.id.job_title)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3345/buggy-version/app.src.main.java.com.dzone.placement_for_engineers.jobExpAdapter.java", "BodyUseAPI": [], "Fixed commit": "3f1b85686c734d87871be6e1fd507608c40778f5", "Url": "https://api.github.com/repos/guptavijay/Placement_for_engineers", "Date": "2018-06-29T20:18:36Z"},
{"Line": "52=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.intern_name)=>android.view.View.findViewById(R.id.job_name)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3345/buggy-version/app.src.main.java.com.dzone.placement_for_engineers.jobExpAdapter.java", "BodyUseAPI": [], "Fixed commit": "3f1b85686c734d87871be6e1fd507608c40778f5", "Url": "https://api.github.com/repos/guptavijay/Placement_for_engineers", "Date": "2018-06-29T20:18:36Z"},
{"Line": "68=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class<net.openhft.chronicle.bytes.BytesRingBuffer>.getMethod(java.lang.String,java.lang.Class,java.lang.Class)=>java.lang.Class<net.openhft.chronicle.bytes.MultiReaderBytesRingBuffer>.getMethod(java.lang.String,java.lang.Class,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/99/buggy-version/src.main.java.net.openhft.chronicle.bytes.BytesRingBuffer.java", "BodyUseAPI": [], "Fixed commit": "a6e3da4cf53bc4c2d337b8f2b5294eef42bc318f", "Url": "https://api.github.com/repos/OpenHFT/Chronicle-Bytes", "Date": "2018-06-14T00:46:59Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class<net.openhft.chronicle.bytes.BytesRingBuffer>.getDeclaredConstructor(java.lang.Class,java.lang.Class)=>java.lang.Class<net.openhft.chronicle.bytes.MultiReaderBytesRingBuffer>.getDeclaredConstructor(java.lang.Class,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/99/buggy-version/src.main.java.net.openhft.chronicle.bytes.BytesRingBuffer.java", "BodyUseAPI": [], "Fixed commit": "a6e3da4cf53bc4c2d337b8f2b5294eef42bc318f", "Url": "https://api.github.com/repos/OpenHFT/Chronicle-Bytes", "Date": "2018-06-14T00:46:59Z"},
{"Line": "45=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.reflect.Constructor<net.openhft.chronicle.bytes.BytesRingBuffer>.newInstance(net.openhft.chronicle.bytes.NativeBytesStore<java.lang.Void>,int)=>java.lang.reflect.Constructor<net.openhft.chronicle.bytes.MultiReaderBytesRingBuffer>.newInstance(net.openhft.chronicle.bytes.NativeBytesStore<java.lang.Void>,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/99/buggy-version/src.main.java.net.openhft.chronicle.bytes.BytesRingBuffer.java", "BodyUseAPI": [], "Fixed commit": "a6e3da4cf53bc4c2d337b8f2b5294eef42bc318f", "Url": "https://api.github.com/repos/OpenHFT/Chronicle-Bytes", "Date": "2018-06-14T00:46:59Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "me.wendysa.contactsdemo.Main.keepNewContact(me.wendysa.contactsdemo.Contact)=>me.wendysa.contactsdemo.IContactBehaviour.keepNewContact(me.wendysa.contactsdemo.Contact,me.wendysa.contactsdemo.Contact[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5132/buggy-version/contacts-demo.me.wendysa.contactsdemo.Main.java", "BodyUseAPI": [], "Fixed commit": "a75f9a416eb7e5b7ac60e5c333f6cb71ef73e3f8", "Url": "https://api.github.com/repos/WendySanarwanto/learn-java", "Date": "2018-02-27T05:52:24Z"},
{"Line": "98=>98", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "model.TaskList.deleteTask(model.Task)=>model.TaskList.removeTask(model.Task)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1838/buggy-version/src.controller.TaskMgrDriver.java", "BodyUseAPI": [], "Fixed commit": "ad60cf9da548dce337c365a94f896bdd8da007d1", "Url": "https://api.github.com/repos/BeastyBuffalos/Tskmgr2.0", "Date": "2018-04-19T23:06:38Z"},
{"Line": "258=>258", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.regex.Pattern.compile(java.lang.String)=>java.util.regex.Pattern.compile(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9903/buggy-version/name-parser.src.main.java.org.gbif.nameparser.ParsingJob.java", "BodyUseAPI": [], "Fixed commit": "94b4b98c9b68e6f966320db5007edb9dc71ec13e", "Url": "https://api.github.com/repos/gbif/name-parser", "Date": "2018-07-05T13:42:24Z"},
{"Line": "52=>52", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.ridecrew.ridecrew.ui.GalleryFragment.startActivityForResult(android.content.Intent,int)=>com.ridecrew.ridecrew.ui.GalleryFragment.startActivityForResult(android.content.Intent,DefineValue.GALLERY_FRAGMENT_REQUEST_CODE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6641/buggy-version/app.src.main.java.com.ridecrew.ridecrew.ui.GalleryFragment.java", "BodyUseAPI": [], "Fixed commit": "6a1b09a8bc284aa9a36278438a21cc1df3e97c25", "Url": "https://api.github.com/repos/pennya/ridecrew_client", "Date": "2018-01-20T15:18:11Z"},
{"Line": "69=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "online.kheops.proxy.tokens.AccessToken.CLIENT.target(uri).request(java.lang.String)=>online.kheops.proxy.tokens.AccessToken.CLIENT.target(uri).request(online.kheops.proxy.tokens.APPLICATION_JSON_TYPE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9132/buggy-version/src.main.java.online.kheops.proxy.tokens.AccessToken.java", "BodyUseAPI": [], "Fixed commit": "0d1cfb226599c040aa49aef3c6cd502cd9c9c2d9", "Url": "https://api.github.com/repos/OsiriX-Foundation/KheopsDICOMwebProxy", "Date": "2018-10-29T20:41:03Z"},
{"Line": "189=>187", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "commander.speaker.playBGM(java.lang.String)=>ure.sys.UCommander.postPlayerLevelportEvent(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/622/buggy-version/src.main.java.ure.examplegame.ExampleGame.java", "BodyUseAPI": [], "Fixed commit": "ea98f0f08ed25d8afa25348400ecc156eaf565e9", "Url": "https://api.github.com/repos/gilmore606/ure", "Date": "2018-07-25T04:48:17Z"},
{"Line": "615=>614", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Error.name()=>com.spotify.sdk.android.player.Error.name()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5763/buggy-version/app.src.main.java.v.blade.library.Source.java", "BodyUseAPI": [], "Fixed commit": "e6f5fdc20b141e9df237889b42b2d157653488f6", "Url": "https://api.github.com/repos/Valou3433/blade-player", "Date": "2018-09-06T16:17:25Z"},
{"Line": "214=>212", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "seemoo.fitbit.miscellaneous.InternalStorage.loadString(ConstantValues.LAST_DEVICE,android.app.Activity)=>seemoo.fitbit.miscellaneous.InternalStorage.loadLastDevice(android.app.Activity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3073/buggy-version/app.src.main.java.seemoo.fitbit.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "c397b1c1d0b7d9c5ff60f9b6e4ffa272f7b530f5", "Url": "https://api.github.com/repos/seemoo-lab/fitness-app", "Date": "2018-07-18T10:50:18Z"},
{"Line": "223=>221", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "seemoo.fitbit.miscellaneous.InternalStorage.loadString(ConstantValues.LAST_DEVICE,android.app.Activity)=>seemoo.fitbit.miscellaneous.InternalStorage.loadLastDevice(android.app.Activity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3073/buggy-version/app.src.main.java.seemoo.fitbit.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "c397b1c1d0b7d9c5ff60f9b6e4ffa272f7b530f5", "Url": "https://api.github.com/repos/seemoo-lab/fitness-app", "Date": "2018-07-18T10:50:18Z"},
{"Line": "143=>143", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "seemoo.fitbit.miscellaneous.InternalStorage.saveString(java.lang.String,ConstantValues.LAST_DEVICE,android.app.Activity)=>seemoo.fitbit.miscellaneous.InternalStorage.save(java.lang.String,ConstantValues.LAST_DEVICE,android.app.Activity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3073/buggy-version/app.src.main.java.seemoo.fitbit.miscellaneous.InternalStorage.java", "BodyUseAPI": [], "Fixed commit": "c397b1c1d0b7d9c5ff60f9b6e4ffa272f7b530f5", "Url": "https://api.github.com/repos/seemoo-lab/fitness-app", "Date": "2018-07-18T10:50:18Z"},
{"Line": "40=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getUI().get().navigateTo(java.lang.String)=>getUI().get().navigate(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2109/buggy-version/src.main.java.com.vaadin.flow.tutorial.spring.Scopes.java", "BodyUseAPI": [], "Fixed commit": "b5eddf5891c0a66147abf790f8f183519b3ef727", "Url": "https://api.github.com/repos/vaadin/flow-and-components-documentation", "Date": "2018-02-28T15:37:34Z"},
{"Line": "60=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getUI().get().navigateTo(java.lang.String)=>getUI().get().navigate(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2109/buggy-version/src.main.java.com.vaadin.flow.tutorial.spring.Scopes.java", "BodyUseAPI": [], "Fixed commit": "b5eddf5891c0a66147abf790f8f183519b3ef727", "Url": "https://api.github.com/repos/vaadin/flow-and-components-documentation", "Date": "2018-02-28T15:37:34Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cam72cam.immersiverailroading.items.nbt.ItemDefinition.get(net.minecraft.item.ItemStack)=>cam72cam.immersiverailroading.items.nbt.ItemDefinition.get(stack.copy())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8790/buggy-version/src.main.java.cam72cam.immersiverailroading.items.nbt.ItemGauge.java", "BodyUseAPI": [], "Fixed commit": "5d4dc4f7ed76228060fd62dfbbe24f609545336e", "Url": "https://api.github.com/repos/cam72cam/ImmersiveRailroading", "Date": "2018-03-14T22:35:46Z"},
{"Line": "58=>58", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "aTable.addHeaderRow().addCells(java.lang.String,java.lang.String)=>aTable.addHeaderRow().addCells(java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7174/buggy-version/peppol-directory-publisher.src.main.java.com.helger.pd.publisher.app.secure.page.PageSecureParticipantActions.java", "BodyUseAPI": [], "Fixed commit": "fe5056b8af6a8af15a2f0357d072c7564d88e59e", "Url": "https://api.github.com/repos/phax/peppol-directory", "Date": "2018-03-05T09:17:53Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "aTable.addHeaderRow().addCells(java.lang.String,java.lang.String)=>aTable.addHeaderRow().addCells(java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7174/buggy-version/peppol-directory-publisher.src.main.java.com.helger.pd.publisher.app.secure.page.PageSecureParticipantActions.java", "BodyUseAPI": [], "Fixed commit": "fe5056b8af6a8af15a2f0357d072c7564d88e59e", "Url": "https://api.github.com/repos/phax/peppol-directory", "Date": "2018-03-05T09:17:53Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Scanner.nextInt()=>com.gcit.lms.app.administratorlink.creation.CREATEOperation.getIntFromInput()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7307/buggy-version/src.main.java.com.gcit.lms.app.administratorlink.creation.CREATEOperation.java", "BodyUseAPI": [], "Fixed commit": "349f3ee803d1ac83c5fd99550648fd28d6e959dc", "Url": "https://api.github.com/repos/KillOKCHOK/GCITDAO", "Date": "2018-09-26T00:50:15Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "data.LocationDAO.create(java.lang.String,int)=>data.LocationDAO.create(java.lang.String,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8139/buggy-version/MVCProject.src.controllers.LocationController.java", "BodyUseAPI": [], "Fixed commit": "4849da89d70a52a1867fba1af969ec88d59a85b1", "Url": "https://api.github.com/repos/simmsjt/VeteranDiscounts", "Date": "2018-01-12T21:07:39Z"},
{"Line": "7=>9", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "TimeUnit.SECONDS.sleep(int)=>java.util.concurrent.TimeUnit.sleep(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3817/buggy-version/output.java", "BodyUseAPI": [], "Fixed commit": "5df658a7568bc6daa2d2491c5f143abeea94fa67", "Url": "https://api.github.com/repos/felixwiberg/FeraldsWorld", "Date": "2018-04-03T13:56:11Z"},
{"Line": "11=>13", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Timunit.SECONDS.sleep(int)=>java.util.concurrent.TimeUnit.sleep(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3817/buggy-version/output.java", "BodyUseAPI": [], "Fixed commit": "5df658a7568bc6daa2d2491c5f143abeea94fa67", "Url": "https://api.github.com/repos/felixwiberg/FeraldsWorld", "Date": "2018-04-03T13:56:11Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.inbar.bicycle_client.OptionMenu.findViewById(R.id.checkBox_Museums)=>com.example.inbar.bicycle_client.OptionMenu.findViewById(R.id.checkBox_Spa)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5062/buggy-version/app.src.main.java.com.example.inbar.bicycle_client.OptionMenu.java", "BodyUseAPI": [], "Fixed commit": "c23fb0ce2960ef931588f06e6b390761e8a01e52", "Url": "https://api.github.com/repos/noamshafran/Bicycle-Project", "Date": "2018-10-06T10:56:48Z"},
{"Line": "44=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.logic.UndoRedoStack.push(seedu.address.logic.Command)=>seedu.address.logic.UndoRedoStack.push(seedu.address.logic.commands.Command)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7085/buggy-version/src.main.java.seedu.address.logic.LogicManager.java", "BodyUseAPI": [], "Fixed commit": "ed68aaf0d758db303d52fac7378dde07fd1cfa2f", "Url": "https://api.github.com/repos/Jason1im/main", "Date": "2018-04-13T15:46:22Z"},
{"Line": "42=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.logic.Command.setData(seedu.address.model.Model,seedu.address.logic.CommandHistory,seedu.address.logic.UndoRedoStack)=>seedu.address.logic.commands.Command.setData(seedu.address.model.Model,seedu.address.logic.CommandHistory,seedu.address.logic.UndoRedoStack)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7085/buggy-version/src.main.java.seedu.address.logic.LogicManager.java", "BodyUseAPI": [], "Fixed commit": "ed68aaf0d758db303d52fac7378dde07fd1cfa2f", "Url": "https://api.github.com/repos/Jason1im/main", "Date": "2018-04-13T15:46:22Z"},
{"Line": "53=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.logic.LogicManager.isUnrestrictedCommand(seedu.address.logic.Command)=>seedu.address.logic.LogicManager.isUnrestrictedCommand(seedu.address.logic.commands.Command)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7085/buggy-version/src.main.java.seedu.address.logic.LogicManager.java", "BodyUseAPI": [], "Fixed commit": "ed68aaf0d758db303d52fac7378dde07fd1cfa2f", "Url": "https://api.github.com/repos/Jason1im/main", "Date": "2018-04-13T15:46:22Z"},
{"Line": "54=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.logic.Command.execute()=>seedu.address.logic.commands.Command.execute()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7085/buggy-version/src.main.java.seedu.address.logic.LogicManager.java", "BodyUseAPI": [], "Fixed commit": "ed68aaf0d758db303d52fac7378dde07fd1cfa2f", "Url": "https://api.github.com/repos/Jason1im/main", "Date": "2018-04-13T15:46:22Z"},
{"Line": "137=>137", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.bigkoo.pickerview.listener.OnItemSelectedListener.onItemSelected(com.bigkoo.pickerview.lib.WheelView)=>com.bigkoo.pickerview.listener.OnItemSelectedListener.onItemSelected(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5672/buggy-version/pickerview.src.main.java.com.bigkoo.pickerview.view.MyWheelOptions.java", "BodyUseAPI": [], "Fixed commit": "c29055863d5b6f7b7d7db81b6b7dba5b67ed5a69", "Url": "https://api.github.com/repos/hanihashemi/PickerView", "Date": "2018-08-20T21:16:14Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.mongolz.service.TransactionService.save(com.mongolz.domain.Transaction)=>com.mongolz.service.TransactionService.transaction(com.mongolz.domain.Transaction)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5022/buggy-version/MongolzRest.src.main.java.com.mongolz.controller.TransactionController.java", "BodyUseAPI": [], "Fixed commit": "db78a44b3cd3c903d1ae67fd267639d7098d0d00", "Url": "https://api.github.com/repos/deegii22/mongolz_online_banking", "Date": "2018-05-22T22:46:17Z"},
{"Line": "336=>336", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.parquet.crypto.ParquetEncryptionFactory.createFileEncryptor(byte[],org.apache.parquet.crypto.KeyMetaData,<nulltype>)=>org.apache.parquet.crypto.ParquetEncryptionFactory.createFileEncryptor(org.apache.parquet.crypto.EncryptionSetup)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2782/buggy-version/parquet-hadoop.src.main.java.org.apache.parquet.hadoop.ParquetWriter.java", "BodyUseAPI": [], "Fixed commit": "50817d1e59d1bf9f8425b0612efb128cf93e6cd8", "Url": "https://api.github.com/repos/ggershinsky/parquet-mr", "Date": "2018-05-10T07:51:39Z"},
{"Line": "74=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.post_author)=>android.view.View.findViewById(R.id.post_cardview_author_name)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5647/buggy-version/app.src.main.java.com.sjsu.se195.uniride.viewholder.PostListRecyclerAdapter.java", "BodyUseAPI": [], "Fixed commit": "749a61979782212752c2ea9caca7ecca2e2a93ae", "Url": "https://api.github.com/repos/ManinderjitS/UniRideAndroid", "Date": "2018-04-22T22:48:43Z"},
{"Line": "72=>72", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.post_author)=>android.view.View.findViewById(R.id.post_cardview_author_name)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5647/buggy-version/app.src.main.java.com.sjsu.se195.uniride.viewholder.PotentialCarpoolListRecyclerAdapter.java", "BodyUseAPI": [], "Fixed commit": "749a61979782212752c2ea9caca7ecca2e2a93ae", "Url": "https://api.github.com/repos/ManinderjitS/UniRideAndroid", "Date": "2018-04-22T22:48:43Z"},
{"Line": "43=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "de.rub.nds.tlsattacker.attacks.pkcs1.LOGGER.debug(java.lang.String)=>de.rub.nds.tlsattacker.attacks.pkcs1.LOGGER.info(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9700/buggy-version/Attacks.src.main.java.de.rub.nds.tlsattacker.attacks.pkcs1.Bleichenbacher.java", "BodyUseAPI": [], "Fixed commit": "3a07a4758decbaedb3a91c6e983c29da3d09f688", "Url": "https://api.github.com/repos/RUB-NDS/TLS-Attacker", "Date": "2017-12-14T03:27:24Z"},
{"Line": "151=>151", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.concurrent.ConcurrentMap<java.lang.String, java.time.LocalDateTime>.putIfAbsent(java.lang.String,java.time.LocalDateTime)=>java.util.concurrent.ConcurrentMap<java.lang.String, java.time.LocalDateTime>.put(java.lang.String,java.time.LocalDateTime)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1996/buggy-version/libraries.bot-connector.src.main.java.com.microsoft.bot.connector.authentication.MicrosoftAppCredentials.java", "BodyUseAPI": [], "Fixed commit": "22384e9dc9e38d7b37596cc543012f34d1134a9b", "Url": "https://api.github.com/repos/DanielFedorowsky/botbuilder-java", "Date": "2018-08-16T08:49:33Z"},
{"Line": "128=>128", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.concurrent.ConcurrentMap<java.lang.String, java.time.LocalDateTime>.putIfAbsent(java.lang.String,java.time.LocalDateTime)=>java.util.concurrent.ConcurrentMap<java.lang.String, java.time.LocalDateTime>.put(java.lang.String,java.time.LocalDateTime)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1996/buggy-version/libraries.bot-connector.src.main.java.com.microsoft.bot.connector.authentication.MicrosoftAppCredentials.java", "BodyUseAPI": [], "Fixed commit": "22384e9dc9e38d7b37596cc543012f34d1134a9b", "Url": "https://api.github.com/repos/DanielFedorowsky/botbuilder-java", "Date": "2018-08-16T08:49:33Z"},
{"Line": "48=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.figaro.model.Item>.get(int)=>com.figaro.model.Item.getDescripcionProducto()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1696/buggy-version/src.main.java.com.figaro.service.VentaService.java", "BodyUseAPI": [], "Fixed commit": "a7f9cd2e0860750b4405457e6922aeec9193d2dc", "Url": "https://api.github.com/repos/jfongarini/figaro", "Date": "2018-02-24T11:36:55Z"},
{"Line": "48=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "items.get(i).getDescripcionProducto()=>com.figaro.model.Item.getDescripcionProducto()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1696/buggy-version/src.main.java.com.figaro.service.VentaService.java", "BodyUseAPI": [], "Fixed commit": "a7f9cd2e0860750b4405457e6922aeec9193d2dc", "Url": "https://api.github.com/repos/jfongarini/figaro", "Date": "2018-02-24T11:36:55Z"},
{"Line": "50=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "items.get(i).getCantidad()=>com.figaro.model.Item.getCantidad()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1696/buggy-version/src.main.java.com.figaro.service.VentaService.java", "BodyUseAPI": [], "Fixed commit": "a7f9cd2e0860750b4405457e6922aeec9193d2dc", "Url": "https://api.github.com/repos/jfongarini/figaro", "Date": "2018-02-24T11:36:55Z"},
{"Line": "48=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "items.get(i).getNombreProducto()=>com.figaro.model.Item.getNombreProducto()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1696/buggy-version/src.main.java.com.figaro.service.VentaService.java", "BodyUseAPI": [], "Fixed commit": "a7f9cd2e0860750b4405457e6922aeec9193d2dc", "Url": "https://api.github.com/repos/jfongarini/figaro", "Date": "2018-02-24T11:36:55Z"},
{"Line": "135=>149", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "it.next().getValue().registerAdapter(com.espertech.esperio.jms.JMSOutputAdapter)=>com.espertech.esperio.jms.EPStatement.addListener(com.espertech.esperio.jms.UpdateListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/722/buggy-version/esperio-springjms.src.main.java.com.espertech.esperio.jms.JMSOutputAdapter.java", "BodyUseAPI": [], "Fixed commit": "b98e8c5592a1c73207d32c3bbc37cd5d324313b3", "Url": "https://api.github.com/repos/espertechinc/esper", "Date": "2018-03-08T18:09:27Z"},
{"Line": "302=>302", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1196/buggy-version/app.src.main.java.app.stundenplan.ms.rats.ratsapp.VertretungsPlanMethoden.java", "BodyUseAPI": [], "Fixed commit": "2246ba2cf06f78a2ed5a5d7bbc946434d00990a3", "Url": "https://api.github.com/repos/nebur115/RatsApp", "Date": "2018-09-01T19:09:37Z"},
{"Line": "87=>87", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "courseapp.models.Widget.setOrder(newWidget.getOrder())=>courseapp.models.Widget.setWidgetOrder(newWidget.getWidgetOrder())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2239/buggy-version/src.main.java.courseapp.services.WidgetService.java", "BodyUseAPI": [], "Fixed commit": "6a0b883bc64a22ff243415c3e82619184e02579f", "Url": "https://api.github.com/repos/sandiri-s/webdev-summer1-2018-java-server-ssandiri", "Date": "2018-05-28T21:54:19Z"},
{"Line": "87=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "courseapp.models.Widget.getOrder()=>courseapp.models.Widget.getWidgetOrder()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2239/buggy-version/src.main.java.courseapp.services.WidgetService.java", "BodyUseAPI": [], "Fixed commit": "6a0b883bc64a22ff243415c3e82619184e02579f", "Url": "https://api.github.com/repos/sandiri-s/webdev-summer1-2018-java-server-ssandiri", "Date": "2018-05-28T21:54:19Z"},
{"Line": "44=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bluesnap.androidapi.services.CreditCard.getExpirationYear()=>com.bluesnap.androidapi.models.CreditCard.getExpirationYear()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "237=>242", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bluesnap.androidapi.services.ContactInfo.getCountry()=>com.bluesnap.androidapi.models.ContactInfo.getCountry()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "246=>251", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bluesnap.androidapi.services.ContactInfo.getAddress()=>com.bluesnap.androidapi.models.ContactInfo.getAddress()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "239=>244", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bluesnap.androidapi.services.ContactInfo.getZip()=>com.bluesnap.androidapi.models.ContactInfo.getZip()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "245=>250", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bluesnap.androidapi.services.ContactInfo.getCity()=>com.bluesnap.androidapi.models.ContactInfo.getCity()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "42=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bluesnap.androidapi.services.CreditCard.getNumber()=>com.bluesnap.androidapi.models.CreditCard.getNumber()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "235=>240", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bluesnap.androidapi.services.ContactInfo.getFullName()=>com.bluesnap.androidapi.models.ContactInfo.getFullName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "215=>220", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bluesnap.androidapi.services.BillingContactInfo.getEmail()=>com.bluesnap.androidapi.models.BillingContactInfo.getEmail()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "243=>248", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bluesnap.androidapi.services.ContactInfo.getState()=>com.bluesnap.androidapi.models.ContactInfo.getState()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "44=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bluesnap.androidapi.services.CreditCard.getExpirationMonth()=>com.bluesnap.androidapi.models.CreditCard.getExpirationMonth()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "225=>230", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.bluesnap.androidapi.services.BlueSnapValidator.contactInfoValidation(com.bluesnap.androidapi.services.ShippingContactInfo,boolean)=>com.bluesnap.androidapi.services.BlueSnapValidator.contactInfoValidation(com.bluesnap.androidapi.models.ShippingContactInfo,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "43=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bluesnap.androidapi.services.CreditCard.getCvc()=>com.bluesnap.androidapi.models.CreditCard.getCvc()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "213=>218", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.bluesnap.androidapi.services.BlueSnapValidator.contactInfoValidation(com.bluesnap.androidapi.services.BillingContactInfo,boolean)=>com.bluesnap.androidapi.services.BlueSnapValidator.contactInfoValidation(com.bluesnap.androidapi.models.BillingContactInfo,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "43=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bluesnap.androidapi.services.CreditCard.getCardType()=>com.bluesnap.androidapi.models.CreditCard.getCardType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9340/buggy-version/bluesnap-android.src.main.java.com.bluesnap.androidapi.services.BlueSnapValidator.java", "BodyUseAPI": [], "Fixed commit": "5b5eb23974366bd43edec621a12d807bb9e3c3a0", "Url": "https://api.github.com/repos/bluesnap/bluesnap-android-int", "Date": "2018-09-12T20:07:45Z"},
{"Line": "92=>97", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.valueOf(guestListExport.size())=>java.lang.String.valueOf(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7825/buggy-version/app.src.main.java.com.vegantravels.activities.ExportExcursionGuestListActivity.java", "BodyUseAPI": [], "Fixed commit": "77d8c571fd4cb1353f7acd74dbe002612f6ee722", "Url": "https://api.github.com/repos/sauravMir/VeganTravels", "Date": "2018-07-30T11:02:27Z"},
{"Line": "92=>97", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.TextView.setText((((java.lang.String.valueOf(guestListExport.size())) + \" Guests in \") + (excName)))=>android.widget.TextView.setText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7825/buggy-version/app.src.main.java.com.vegantravels.activities.ExportExcursionGuestListActivity.java", "BodyUseAPI": [], "Fixed commit": "77d8c571fd4cb1353f7acd74dbe002612f6ee722", "Url": "https://api.github.com/repos/sauravMir/VeganTravels", "Date": "2018-07-30T11:02:27Z"},
{"Line": "52=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.suikasoft.jOptions.Interfaces.DataStore.set(org.suikasoft.jOptions.Datakey.DataKey<java.util.List<java.lang.String>>,java.util.List<java.lang.String>)=>org.suikasoft.jOptions.Interfaces.DataStore.set(org.suikasoft.jOptions.Datakey.DataKey<java.util.List<java.lang.String>>,java.util.ArrayList)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4125/buggy-version/ClavaAst.src.pt.up.fe.specs.clava.context.ClavaContext.java", "BodyUseAPI": [], "Fixed commit": "1bbdf21b12c44745067cb89b8e2e17606d0e83d6", "Url": "https://api.github.com/repos/specs-feup/clava", "Date": "2018-04-29T17:52:29Z"},
{"Line": "178=>176", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.richardprojects.autismchat3.ACParty.getColor()=>net.richardprojects.autismchat3.ACPlayer.getCurrentColor(net.richardprojects.autismchat3.AutismChat3)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7277/buggy-version/src.net.richardprojects.autismchat3.Utils.java", "BodyUseAPI": [], "Fixed commit": "5904321d9175608a34772eadda767d97e2a877d2", "Url": "https://api.github.com/repos/fallerOfFalls/AutismChat4", "Date": "2018-05-24T19:38:52Z"},
{"Line": "100=>100", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<jason.asSyntax.Structure, jason.asSemantics.Intention>.get(jason.asSyntax.Structure)=>java.util.HashMap<java.lang.String, jason.asSemantics.Intention>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6358/buggy-version/src.java.plotmas.PlotEnvironment.java", "BodyUseAPI": [], "Fixed commit": "bf81841f7d76198537faf844193e9192828f6e1a", "Url": "https://api.github.com/repos/cartisan/plotmas", "Date": "2018-05-07T17:10:53Z"},
{"Line": "106=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<jason.asSyntax.Structure, jason.asSemantics.Intention>.remove(jason.asSyntax.Structure)=>java.util.HashMap<java.lang.String, jason.asSemantics.Intention>.remove(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6358/buggy-version/src.java.plotmas.PlotEnvironment.java", "BodyUseAPI": [], "Fixed commit": "bf81841f7d76198537faf844193e9192828f6e1a", "Url": "https://api.github.com/repos/cartisan/plotmas", "Date": "2018-05-07T17:10:53Z"},
{"Line": "119=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<jason.asSyntax.Structure, jason.asSemantics.Intention>.put(jason.asSyntax.Structure,jason.asSemantics.Intention)=>java.util.HashMap<java.lang.String, jason.asSemantics.Intention>.put(java.lang.String,jason.asSemantics.Intention)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6358/buggy-version/src.java.plotmas.PlotEnvironment.java", "BodyUseAPI": [], "Fixed commit": "bf81841f7d76198537faf844193e9192828f6e1a", "Url": "https://api.github.com/repos/cartisan/plotmas", "Date": "2018-05-07T17:10:53Z"},
{"Line": "119=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<jason.asSyntax.Structure, jason.asSemantics.Intention>.put(jason.asSyntax.Structure,jason.asSemantics.Intention)=>java.util.HashMap<java.lang.String, jason.asSemantics.Intention>.put(java.lang.String,jason.asSemantics.Intention)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6358/buggy-version/src.java.plotmas.PlotEnvironment.java", "BodyUseAPI": [], "Fixed commit": "bf81841f7d76198537faf844193e9192828f6e1a", "Url": "https://api.github.com/repos/cartisan/plotmas", "Date": "2018-05-07T17:10:53Z"},
{"Line": "687=>687", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.microsoft.azure.management.profile_2018_03_01_hybrid.com.microsoft.azure.management.authorization.v2016_12_01.implementation.AuthorizationManager.authenticate(com.microsoft.rest.RestClient,java.lang.String)=>com.microsoft.azure.management.profile_2018_03_01_hybrid.com.microsoft.azure.management.policy.v2016_12_01.implementation.PolicyManager.authenticate(com.microsoft.rest.RestClient,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8066/buggy-version/profiles.2018-03-01-hybrid.azure.src.main.java.com.microsoft.azure.management.profile_2018_03_01_hybrid.Azure.java", "BodyUseAPI": [], "Fixed commit": "17fbfec55504d38b3cc7d8a6fffb6f450634579a", "Url": "https://api.github.com/repos/jianghaolu/azure-sdk-for-java", "Date": "2018-06-05T21:07:58Z"},
{"Line": "687=>687", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.microsoft.azure.management.profile_2018_03_01_hybrid.com.microsoft.azure.management.authorization.v2016_12_01.implementation.AuthorizationManager.authenticate(com.microsoft.rest.RestClient,java.lang.String)=>com.microsoft.azure.management.profile_2018_03_01_hybrid.com.microsoft.azure.management.policy.v2016_12_01.implementation.PolicyManager.authenticate(com.microsoft.rest.RestClient,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8066/buggy-version/profiles.2018-03-01-hybrid.azure.src.main.java.com.microsoft.azure.management.profile_2018_03_01_hybrid.Azure.java", "BodyUseAPI": [], "Fixed commit": "17fbfec55504d38b3cc7d8a6fffb6f450634579a", "Url": "https://api.github.com/repos/jianghaolu/azure-sdk-for-java", "Date": "2018-06-05T21:07:58Z"},
{"Line": "154=>154", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.microsoft.azure.management.authorization.v2016_12_01.implementation.AuthorizationManager.policyDefinitions()=>com.microsoft.azure.management.policy.v2016_12_01.implementation.PolicyManager.policyDefinitions()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8066/buggy-version/profiles.2018-03-01-hybrid.azure.src.main.java.com.microsoft.azure.management.profile_2018_03_01_hybrid.Azure.java", "BodyUseAPI": [], "Fixed commit": "17fbfec55504d38b3cc7d8a6fffb6f450634579a", "Url": "https://api.github.com/repos/jianghaolu/azure-sdk-for-java", "Date": "2018-06-05T21:07:58Z"},
{"Line": "161=>161", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.microsoft.azure.management.authorization.v2016_12_01.implementation.AuthorizationManager.policyAssignments()=>com.microsoft.azure.management.policy.v2016_12_01.implementation.PolicyManager.policyAssignments()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8066/buggy-version/profiles.2018-03-01-hybrid.azure.src.main.java.com.microsoft.azure.management.profile_2018_03_01_hybrid.Azure.java", "BodyUseAPI": [], "Fixed commit": "17fbfec55504d38b3cc7d8a6fffb6f450634579a", "Url": "https://api.github.com/repos/jianghaolu/azure-sdk-for-java", "Date": "2018-06-05T21:07:58Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.bookkeeper.mledger.impl.ReadOnlyCursorImpl.getPositionAfterN(org.apache.bookkeeper.mledger.impl.ReadOnlyCursorImpl,int,PositionBound.startExcluded)=>org.apache.bookkeeper.mledger.impl.ReadOnlyCursorImpl.getPositionAfterN(org.apache.bookkeeper.mledger.impl.ReadOnlyCursorImpl,int,PositionBound.startIncluded)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/119/buggy-version/managed-ledger.src.main.java.org.apache.bookkeeper.mledger.impl.ReadOnlyCursorImpl.java", "BodyUseAPI": [], "Fixed commit": "36cea75ccb51c9d3cc0e1accd33f9f6d8ccf7013", "Url": "https://api.github.com/repos/merlimat/pulsar", "Date": "2018-06-29T01:14:02Z"},
{"Line": "56=>56", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.apache.bookkeeper.mledger.impl.ReadOnlyCursorImpl.getPositionAfterN(org.apache.bookkeeper.mledger.impl.ReadOnlyCursorImpl,int,PositionBound.startExcluded)=>ledger.getPositionAfterN(readPosition, numEntriesToSkip, PositionBound.startIncluded).getNext()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/119/buggy-version/managed-ledger.src.main.java.org.apache.bookkeeper.mledger.impl.ReadOnlyCursorImpl.java", "BodyUseAPI": [], "Fixed commit": "36cea75ccb51c9d3cc0e1accd33f9f6d8ccf7013", "Url": "https://api.github.com/repos/merlimat/pulsar", "Date": "2018-06-29T01:14:02Z"},
{"Line": "147=>148", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.soffid.iam.bpm.service.SoffidStackTrace.getStackTrace(java.lang.Exception)=>es.caib.seycon.ng.exception.SoffidStackTrace.getStackTrace(java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/31/buggy-version/core.src.main.java.com.soffid.iam.bpm.service.BpmJobExecutorImpl.java", "BodyUseAPI": [], "Fixed commit": "80ecb5952cc0bb5cff72fb8696372c2f8644c01f", "Url": "https://api.github.com/repos/SoffidIAM/console", "Date": "2018-04-08T10:33:52Z"},
{"Line": "144=>145", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "kind.name().toLowerCase()=>kind.name().toLowerCase(java.util.Locale)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4156/buggy-version/tika.src.main.java.org.gagravarr.tika.OggParser.java", "BodyUseAPI": [], "Fixed commit": "ed779fcd2de404ba57862ceb6937a7fe6d61bbcc", "Url": "https://api.github.com/repos/croger42/VorbisJava", "Date": "2018-04-20T10:46:03Z"},
{"Line": "101=>102", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.toLowerCase()=>java.lang.String.toLowerCase(java.util.Locale)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4156/buggy-version/core.src.main.java.org.gagravarr.vorbis.VorbisStyleComments.java", "BodyUseAPI": [], "Fixed commit": "ed779fcd2de404ba57862ceb6937a7fe6d61bbcc", "Url": "https://api.github.com/repos/croger42/VorbisJava", "Date": "2018-04-20T10:46:03Z"},
{"Line": "107=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "pcgen.cdom.grouping.GroupingInfoFactory.continueTypeSafeProcessing(pcgen.cdom.reference.ReferenceManufacturer<? extends pcgen.cdom.base.Loadable>,java.lang.String)=>pcgen.cdom.grouping.GroupingInfoFactory.continueTypeSafeProcessing(pcgen.cdom.reference.ReferenceManufacturer<? extends pcgen.cdom.base.Loadable>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1970/buggy-version/code.src.java.pcgen.cdom.grouping.GroupingInfoFactory.java", "BodyUseAPI": [], "Fixed commit": "96768604d84cfd082970e022996ebe8dfc7c2a87", "Url": "https://api.github.com/repos/grimreaper/pcgen", "Date": "2018-04-15T17:09:21Z"},
{"Line": "233=>235", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.pkteam.measure_happiness.network.NetworkUtil.getRetrofit(java.lang.String)=>com.pkteam.measure_happiness.network.NetworkUtil.getRetrofit()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6275/buggy-version/Android.app.src.main.java.com.pkteam.measure_happiness.View.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "fe8877ce3a31a3240d243b32f51c03e4268bc486", "Url": "https://api.github.com/repos/teampk/cs_project", "Date": "2018-09-18T11:15:46Z"},
{"Line": "169=>188", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.pkteam.measure_happiness.View.MainActivity.initSharedPreferences()=>com.pkteam.measure_happiness.View.MainActivity.loadData()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6275/buggy-version/Android.app.src.main.java.com.pkteam.measure_happiness.View.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "fe8877ce3a31a3240d243b32f51c03e4268bc486", "Url": "https://api.github.com/repos/teampk/cs_project", "Date": "2018-09-18T11:15:46Z"},
{"Line": "26=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "CoinChangeProblem.getWays(int[],int)=>CoinChange.getWays(int[],int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7942/buggy-version/Dynamic_Programming.CoinChangeProblem.java", "BodyUseAPI": [], "Fixed commit": "5b3cc5b5f3aed410e6f577aa61e869a6c55e3a1a", "Url": "https://api.github.com/repos/aJimmer/hackerrank_questions", "Date": "2018-07-20T03:28:33Z"},
{"Line": "26=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "CoinChangeProblem.getWays(int[],int)=>CoinChange.getWays(int[],int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7942/buggy-version/Dynamic_Programming.CoinChangeProblem.java", "BodyUseAPI": [], "Fixed commit": "5b3cc5b5f3aed410e6f577aa61e869a6c55e3a1a", "Url": "https://api.github.com/repos/aJimmer/hackerrank_questions", "Date": "2018-07-20T03:28:33Z"},
{"Line": "153=>153", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Toast.makeText(com.example.android.bookishinventory.EditorActivity,java.lang.String,Toast.LENGTH_SHORT)=>android.widget.Toast.makeText(com.example.android.bookishinventory.EditorActivity,R.string.insert_toast,Toast.LENGTH_SHORT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/48/buggy-version/app.src.main.java.com.example.android.bookishinventory.EditorActivity.java", "BodyUseAPI": [], "Fixed commit": "5a10c13991809bea41f65e86b7f2358820f7ee20", "Url": "https://api.github.com/repos/jae0120/BookishInventory", "Date": "2018-10-05T21:36:03Z"},
{"Line": "155=>155", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Toast.makeText(com.example.android.bookishinventory.EditorActivity,java.lang.String,Toast.LENGTH_SHORT)=>android.widget.Toast.makeText(com.example.android.bookishinventory.EditorActivity,R.string.insert_failed_toast,Toast.LENGTH_SHORT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/48/buggy-version/app.src.main.java.com.example.android.bookishinventory.EditorActivity.java", "BodyUseAPI": [], "Fixed commit": "5a10c13991809bea41f65e86b7f2358820f7ee20", "Url": "https://api.github.com/repos/jae0120/BookishInventory", "Date": "2018-10-05T21:36:03Z"},
{"Line": "145=>145", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Toast.makeText(com.example.android.bookishinventory.EditorActivity,java.lang.String,Toast.LENGTH_SHORT)=>android.widget.Toast.makeText(com.example.android.bookishinventory.EditorActivity,R.string.update_toast,Toast.LENGTH_SHORT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/48/buggy-version/app.src.main.java.com.example.android.bookishinventory.EditorActivity.java", "BodyUseAPI": [], "Fixed commit": "5a10c13991809bea41f65e86b7f2358820f7ee20", "Url": "https://api.github.com/repos/jae0120/BookishInventory", "Date": "2018-10-05T21:36:03Z"},
{"Line": "147=>147", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Toast.makeText(com.example.android.bookishinventory.EditorActivity,java.lang.String,Toast.LENGTH_SHORT)=>android.widget.Toast.makeText(com.example.android.bookishinventory.EditorActivity,R.string.update_fail_toast,Toast.LENGTH_SHORT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/48/buggy-version/app.src.main.java.com.example.android.bookishinventory.EditorActivity.java", "BodyUseAPI": [], "Fixed commit": "5a10c13991809bea41f65e86b7f2358820f7ee20", "Url": "https://api.github.com/repos/jae0120/BookishInventory", "Date": "2018-10-05T21:36:03Z"},
{"Line": "23=>23", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "event.getChannel().sendMessage(\"This Command is reserved for the bot owner.\").queue()=>event.getChannel().sendMessage(\"This Command is reserved for the bot owner.\").queue(<nulltype>,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7472/buggy-version/src.main.java.ml.enzodevelopment.enzobot.commands.owner.Eval.java", "BodyUseAPI": [], "Fixed commit": "7c218d5be8ed95168613a1a415eb26466c8c786a", "Url": "https://api.github.com/repos/EnzoDevelop/EnzoBot", "Date": "2018-07-14T10:48:24Z"},
{"Line": "1736=>1736", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.codename1.ui.Form.getResponderAt(int,int)=>com.codename1.ui.Form.getComponentAt(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3044/buggy-version/Ports.JavaSE.src.com.codename1.impl.javase.JavaSEPort.java", "BodyUseAPI": [], "Fixed commit": "ae2b4ec1f5ec9badcfeb326a7c41757d16f49561", "Url": "https://api.github.com/repos/codenameone/CodenameOne", "Date": "2018-04-14T14:10:16Z"},
{"Line": "1821=>1823", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.codename1.ui.Form.getResponderAt(int,int)=>com.codename1.ui.Form.getComponentAt(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3044/buggy-version/Ports.JavaSE.src.com.codename1.impl.javase.JavaSEPort.java", "BodyUseAPI": [], "Fixed commit": "ae2b4ec1f5ec9badcfeb326a7c41757d16f49561", "Url": "https://api.github.com/repos/codenameone/CodenameOne", "Date": "2018-04-14T14:10:16Z"},
{"Line": "1785=>1787", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.codename1.ui.Form.getResponderAt(int,int)=>com.codename1.ui.Form.getComponentAt(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3044/buggy-version/Ports.JavaSE.src.com.codename1.impl.javase.JavaSEPort.java", "BodyUseAPI": [], "Fixed commit": "ae2b4ec1f5ec9badcfeb326a7c41757d16f49561", "Url": "https://api.github.com/repos/codenameone/CodenameOne", "Date": "2018-04-14T14:10:16Z"},
{"Line": "1803=>1805", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.codename1.ui.Form.getResponderAt(int,int)=>com.codename1.ui.Form.getComponentAt(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3044/buggy-version/Ports.JavaSE.src.com.codename1.impl.javase.JavaSEPort.java", "BodyUseAPI": [], "Fixed commit": "ae2b4ec1f5ec9badcfeb326a7c41757d16f49561", "Url": "https://api.github.com/repos/codenameone/CodenameOne", "Date": "2018-04-14T14:10:16Z"},
{"Line": "1767=>1768", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.codename1.ui.Form.getResponderAt(int,int)=>com.codename1.ui.Form.getComponentAt(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3044/buggy-version/Ports.JavaSE.src.com.codename1.impl.javase.JavaSEPort.java", "BodyUseAPI": [], "Fixed commit": "ae2b4ec1f5ec9badcfeb326a7c41757d16f49561", "Url": "https://api.github.com/repos/codenameone/CodenameOne", "Date": "2018-04-14T14:10:16Z"},
{"Line": "53=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javafx.stage.Stage.setFullScreen(boolean)=>javafx.stage.Stage.setFullScreen(Property.START_IN_FULLSCREEN.isTrue())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7027/buggy-version/src.main.java.se.pingstteknik.propresenter.stagedisplayviewer.Main.java", "BodyUseAPI": [], "Fixed commit": "73b575f1b16e21983f3c6bd461bbf7772bfc1f29", "Url": "https://api.github.com/repos/danielkihlgren/stagedisplayviewer", "Date": "2018-02-15T16:42:12Z"},
{"Line": "89=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.bukkit.event.inventory.InventoryClickEvent.getInventory()=>org.bukkit.event.inventory.InventoryClickEvent.getView()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7901/buggy-version/PGM.src.main.java.tc.oc.pgm.mutation.types.kit.TeamChestMutation.java", "BodyUseAPI": [], "Fixed commit": "cb0d015b4ae4b57d357cccde2112e42383376310", "Url": "https://api.github.com/repos/DirkyJerky/projectares", "Date": "2018-06-08T05:30:44Z"},
{"Line": "28=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println((((\"found list of \" + (current.rule.name)) + \" with separator \") + separator))=>java.util.logging.Logger.info((((((\"In rule \" + (parserRule.name)) + \" I found list of \") + ((current.rule) instanceof premun.mps.ingrid.transformer.LiteralRule ? ((premun.mps.ingrid.transformer.LiteralRule) (current.rule)).value : current.rule.name)) + \" with separator \") + separator))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8463/buggy-version/plugin.idea.transformer.src.premun.mps.ingrid.transformer.DetectListWithSeparatorsAlgorithm.java", "BodyUseAPI": [], "Fixed commit": "2d19a1c8e45f7a931c1cfcf51952eec9510c8168", "Url": "https://api.github.com/repos/d-kozak/ingrid", "Date": "2018-08-21T17:41:51Z"},
{"Line": "147=>152", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setOnClickListener(android.view.View.OnClickListener)=>android.widget.RelativeLayout.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1137/buggy-version/app.src.main.java.com.example.swugger.Events_EditEventDialogFragment.java", "BodyUseAPI": [], "Fixed commit": "7b7b51de26ecf9cfe569ff23e36147f5f51bb80a", "Url": "https://api.github.com/repos/dvscheng/AIO-android", "Date": "2018-08-10T10:18:31Z"},
{"Line": "137=>141", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setOnClickListener(android.view.View.OnClickListener)=>android.widget.RelativeLayout.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1137/buggy-version/app.src.main.java.com.example.swugger.Events_EditEventDialogFragment.java", "BodyUseAPI": [], "Fixed commit": "7b7b51de26ecf9cfe569ff23e36147f5f51bb80a", "Url": "https://api.github.com/repos/dvscheng/AIO-android", "Date": "2018-08-10T10:18:31Z"},
{"Line": "147=>152", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setOnClickListener(android.view.View.OnClickListener)=>android.widget.RelativeLayout.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1137/buggy-version/app.src.main.java.com.example.swugger.Events_EditEventDialogFragment.java", "BodyUseAPI": [], "Fixed commit": "7b7b51de26ecf9cfe569ff23e36147f5f51bb80a", "Url": "https://api.github.com/repos/dvscheng/AIO-android", "Date": "2018-08-10T10:18:31Z"},
{"Line": "77=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.support.v7.widget.RecyclerView.setLayoutManager(com.codewaves.stickyheadergrid.StickyHeaderGridLayoutManager)=>android.support.v7.widget.RecyclerView.setAdapter(com.wblachowski.swarzedzkibus.adapters.FavouritesAdapter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4302/buggy-version/SwarzedzkiBus.app.src.main.java.com.wblachowski.swarzedzkibus.fragments.FavouritesFragment.java", "BodyUseAPI": [], "Fixed commit": "3a89f37d94cd13805f58b3fd9a40d76277eae57d", "Url": "https://api.github.com/repos/wblachowski/SwarzedzkiBusV2", "Date": "2018-03-03T13:09:43Z"},
{"Line": "30=>30", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "o.getType().equals(java.lang.String)=>java.lang.String.equals(o.getType().getClassName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2321/buggy-version/src.main.java.jbse.rules.TriggerRuleAliasesInstanceof.java", "BodyUseAPI": [], "Fixed commit": "05d2687d53bb65e4283310df3ac8c6001577c411", "Url": "https://api.github.com/repos/pietrobraione/jbse", "Date": "2018-02-07T07:49:19Z"},
{"Line": "208=>211", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.syntel.inventoryForecasting.model.SearchParam.getFactor()=>java.util.List<com.syntel.inventoryForecasting.model.QueryResult>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3708/buggy-version/src.main.java.com.syntel.inventoryForecasting.dao.ForecastDao.java", "BodyUseAPI": [], "Fixed commit": "43da99002cb607c215749191bf1116f7cd4420ae", "Url": "https://api.github.com/repos/HunterMcAfee/inventoryForecasting", "Date": "2018-06-12T21:17:53Z"},
{"Line": "392=>392", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "de.reichelt.moritz.vertretungsplangenschergymnasium.SynchroniseJobService.getString(R.string.plan_notif_title)=>de.reichelt.moritz.vertretungsplangenschergymnasium.SynchroniseJobService.getString(R.string.notif_title)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9457/buggy-version/app.src.main.java.de.reichelt.moritz.vertretungsplangenschergymnasium.SynchroniseJobService.java", "BodyUseAPI": [], "Fixed commit": "e46ba5fe32e13e8db9b0fdd7239e58e4a8b19c37", "Url": "https://api.github.com/repos/StardOva/VertretungsplanGenschergymnasium", "Date": "2018-08-29T13:18:33Z"},
{"Line": "347=>347", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new android.support.v4.app.NotificationCompat.Builder(getApplicationContext(), channel_id).setSmallIcon(R.drawable.ic_job_plan).setContentTitle(java.lang.String)=>new android.support.v4.app.NotificationCompat.Builder(getApplicationContext(), channel_id).setSmallIcon(R.drawable.ic_job_plan).setContentTitle(getString(R.string.notif_title))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9457/buggy-version/app.src.main.java.de.reichelt.moritz.vertretungsplangenschergymnasium.SynchroniseJobService.java", "BodyUseAPI": [], "Fixed commit": "e46ba5fe32e13e8db9b0fdd7239e58e4a8b19c37", "Url": "https://api.github.com/repos/StardOva/VertretungsplanGenschergymnasium", "Date": "2018-08-29T13:18:33Z"},
{"Line": "388=>387", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "uk.co.senab.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)=>com.github.chrisbanes.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3466/buggy-version/src.com.owncloud.android.ui.activity.CropActivity.java", "BodyUseAPI": [], "Fixed commit": "3c170f99f4394a14ab75fabe6b4368aba76dfa4b", "Url": "https://api.github.com/repos/sd1998/android", "Date": "2018-03-10T09:58:14Z"},
{"Line": "199=>199", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(java.lang.String)=>java.lang.Double.parseDouble(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1007/buggy-version/src.cf4j.Kernel.java", "BodyUseAPI": [], "Fixed commit": "96f16551b87d55e96b32392590ee67f26b9354c5", "Url": "https://api.github.com/repos/ferortega/cf4j", "Date": "2018-01-16T15:55:56Z"},
{"Line": "199=>199", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(java.lang.String)=>java.lang.Double.parseDouble(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1007/buggy-version/src.cf4j.Kernel.java", "BodyUseAPI": [], "Fixed commit": "96f16551b87d55e96b32392590ee67f26b9354c5", "Url": "https://api.github.com/repos/ferortega/cf4j", "Date": "2018-01-16T15:55:56Z"},
{"Line": "326=>332", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.applitools.eyes.selenium.EyesSeleniumUtils.isLandscapeOrientation(com.applitools.eyes.selenium.WebDriver)=>com.applitools.eyes.selenium.EyesSeleniumUtils.isLandscapeOrientation(com.applitools.eyes.selenium.Logger,com.applitools.eyes.selenium.WebDriver)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8798/buggy-version/eyes.selenium.java.src.main.java.com.applitools.eyes.selenium.EyesSeleniumUtils.java", "BodyUseAPI": [], "Fixed commit": "cd67308b2bdab1335f116b9e29bce60fb980287d", "Url": "https://api.github.com/repos/applitools/eyes.sdk.java3", "Date": "2018-10-16T11:56:19Z"},
{"Line": "7=>7", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(double)=>java.io.PrintStream.println(Fahrenheit.convert(java.lang.Double.parseDouble(arg)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3996/buggy-version/3.F2C.java", "BodyUseAPI": [], "Fixed commit": "ad1d547af67ef40ffce2d2be88b608c98410fc92", "Url": "https://api.github.com/repos/simonstadlinger/pt2uebungSS2018", "Date": "2018-05-14T18:58:57Z"},
{"Line": "70=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.dsa.iot.dslink.node.Node.getPassword()=>org.dsa.iot.dslink.node.Node.getConfig(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8238/buggy-version/src.main.java.org.dsa.iot.alarm.AbstractAlarmObject.java", "BodyUseAPI": [], "Fixed commit": "9b7ccdc01b8cabcbd57c6881578ffdc9e5ce1a7b", "Url": "https://api.github.com/repos/BitBoxUSA/dslink-java-alarm", "Date": "2018-04-24T22:36:30Z"},
{"Line": "60=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.dsa.iot.dslink.node.Node.getPassword()=>org.dsa.iot.dslink.node.Node.getConfig(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8238/buggy-version/src.main.java.org.dsa.iot.alarm.AbstractAlarmObject.java", "BodyUseAPI": [], "Fixed commit": "9b7ccdc01b8cabcbd57c6881578ffdc9e5ce1a7b", "Url": "https://api.github.com/repos/BitBoxUSA/dslink-java-alarm", "Date": "2018-04-24T22:36:30Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.dsa.iot.dslink.node.Node.setPassword(char[])=>org.dsa.iot.dslink.node.Node.setConfig(java.lang.String,org.dsa.iot.dslink.node.value.Value)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8238/buggy-version/src.main.java.org.dsa.iot.alarm.AbstractAlarmObject.java", "BodyUseAPI": [], "Fixed commit": "9b7ccdc01b8cabcbd57c6881578ffdc9e5ce1a7b", "Url": "https://api.github.com/repos/BitBoxUSA/dslink-java-alarm", "Date": "2018-04-24T22:36:30Z"},
{"Line": "70=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.valueOf(node.getPassword())=>org.dsa.iot.dslink.node.value.Value.getString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8238/buggy-version/src.main.java.org.dsa.iot.alarm.AbstractAlarmObject.java", "BodyUseAPI": [], "Fixed commit": "9b7ccdc01b8cabcbd57c6881578ffdc9e5ce1a7b", "Url": "https://api.github.com/repos/BitBoxUSA/dslink-java-alarm", "Date": "2018-04-24T22:36:30Z"},
{"Line": "164=>164", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.dsa.iot.dslink.node.actions.table.Table.sendReady()=>org.dsa.iot.dslink.node.actions.table.Table.close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8238/buggy-version/src.main.java.org.dsa.iot.alarm.AlarmStreamer.java", "BodyUseAPI": [], "Fixed commit": "9b7ccdc01b8cabcbd57c6881578ffdc9e5ce1a7b", "Url": "https://api.github.com/repos/BitBoxUSA/dslink-java-alarm", "Date": "2018-04-24T22:36:30Z"},
{"Line": "88=>90", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.ImageView.setVisibility(View.INVISIBLE)=>android.widget.ImageView.setVisibility(View.VISIBLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6615/buggy-version/app.src.main.java.com.jeeps.gamecollector.adapters.GameCardAdapter.java", "BodyUseAPI": [], "Fixed commit": "7d4f18bb89336cd9ec59baed370cfe2629d5d895", "Url": "https://api.github.com/repos/JamesJose7/GameCollector", "Date": "2018-01-07T21:11:02Z"},
{"Line": "73=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.ipcamera.demo.utils.ToastUtils.show(com.ipcamera.demo.MessageActivity,java.lang.String)=>com.ipcamera.demo.utils.ToastUtils.show(com.ipcamera.demo.MessageActivity,getString(R.string.input_null))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5412/buggy-version/AS_CamDemo.IPCamerDemoEYE.app.src.main.java.com.ipcamera.demo.MessageActivity.java", "BodyUseAPI": [], "Fixed commit": "4aeda404f7b621c4c6bd54b1ea4c3b08f63e71c0", "Url": "https://api.github.com/repos/vstarcam/android_cam_eclipse", "Date": "2018-10-25T02:49:11Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.contains(java.lang.String)=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4631/buggy-version/src.ListHandler.java", "BodyUseAPI": [], "Fixed commit": "7fd656fa48ca44cd4c1bf5aadbed162efbcd92c0", "Url": "https://api.github.com/repos/christians342/whitelist-blacklist-manager", "Date": "2018-09-02T15:51:28Z"},
{"Line": "153=>154", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.em_projects.omdan.main.fragments.NewRecordFragment.getString(R.string.new_record_id_title,java.lang.String)=>com.em_projects.omdan.main.fragments.NewRecordFragment.getString(R.string.new_record_id_title,com.em_projects.omdan.config.Dynamics.getInstance(context).getCurrentRecordId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6484/buggy-version/app.src.main.java.com.em_projects.omdan.main.fragments.NewRecordFragment.java", "BodyUseAPI": [], "Fixed commit": "9ac72b282023ffa7fb8cc36b0feea6d99ed6df0d", "Url": "https://api.github.com/repos/eyalmnm/Omdan", "Date": "2018-03-26T12:56:22Z"},
{"Line": "176=>176", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ChannelSftp.lpwd()=>ChannelSftp.pwd()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7001/buggy-version/src.main.java.Client.java", "BodyUseAPI": [], "Fixed commit": "914e39ea94d12ada509b7682bab2383ebe1a739a", "Url": "https://api.github.com/repos/bamcmanus/AGILE", "Date": "2018-07-30T18:28:17Z"},
{"Line": "54=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.firecraftmc.shared.enforcer.punishments.Punishment.getPunisherName()=>net.firecraftmc.core.managers.Utils.getPlayerName(plugin.getDatabase(),net.firecraftmc.core.managers.Utils.convertToUUID(punishment.getPunisher()))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6/buggy-version/src.java.net.firecraftmc.core.managers.PlayerManager.java", "BodyUseAPI": [], "Fixed commit": "de002ab7a78b8ae591837670bfd0dda8eef5f108", "Url": "https://api.github.com/repos/Firestar311/FirecraftCore", "Date": "2018-05-07T19:36:30Z"},
{"Line": "87=>86", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "me.libraryaddict.disguise.DisguiseAPI.disguiseToAll(org.bukkit.command.CommandSender,me.libraryaddict.disguise.disguisetypes.Disguise)=>me.libraryaddict.disguise.disguisetypes.Disguise.startDisguise()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4869/buggy-version/src.me.libraryaddict.disguise.commands.DisguiseCommand.java", "BodyUseAPI": [], "Fixed commit": "f4173e94492fac3bcf79350436ffc2b3be15515c", "Url": "https://api.github.com/repos/Telesphoreo/TF-LibsDisguises-1", "Date": "2018-09-10T05:39:56Z"},
{"Line": "76=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.valueOf(java.lang.String)=>java.lang.Integer.parseInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4652/buggy-version/app.src.main.java.com.example.user.Timer.presentation.View.CircleSeekBarView.java", "BodyUseAPI": [], "Fixed commit": "c5f2324e729de2ddcc705d8c73c5bcb3669b062d", "Url": "https://api.github.com/repos/Nikita322322/Timer", "Date": "2018-05-25T06:37:49Z"},
{"Line": "458=>458", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "getBounds().getLocation()=>org.audiveris.omr.image.ShapeDescriptor.getBounds(this.getBounds())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/227/buggy-version/src.main.org.audiveris.omr.sig.inter.HeadInter.java", "BodyUseAPI": [], "Fixed commit": "ce28ff615021ff29851d2045ac2a7ea37f1a66cb", "Url": "https://api.github.com/repos/Audiveris/audiveris", "Date": "2018-03-06T08:31:31Z"},
{"Line": "43=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.shadow5353.Managers.SettingsManager.getNotes().set(java.lang.String,java.util.UUID)=>com.shadow5353.Managers.SettingsManager.getNotes().set(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6095/buggy-version/src.main.java.com.shadow5353.FlatSaving.java", "BodyUseAPI": [], "Fixed commit": "ee1011b144c83da237e111ced289db8de47fef0a", "Url": "https://api.github.com/repos/Hinz3/StaffNotes", "Date": "2018-03-18T17:28:04Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.shadow5353.Managers.SettingsManager.getNotes().set(java.lang.String,java.util.UUID)=>com.shadow5353.Managers.SettingsManager.getNotes().set(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6095/buggy-version/src.main.java.com.shadow5353.FlatSaving.java", "BodyUseAPI": [], "Fixed commit": "ee1011b144c83da237e111ced289db8de47fef0a", "Url": "https://api.github.com/repos/Hinz3/StaffNotes", "Date": "2018-03-18T17:28:04Z"},
{"Line": "62=>62", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.moglan.eac.model.connection.LOGGER.log(java.util.logging.Level,java.lang.String,int)=>com.moglan.eac.model.connection.LOGGER.log(java.util.logging.Level,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8913/buggy-version/src.main.java.com.moglan.eac.model.connection.Monitor.java", "BodyUseAPI": [], "Fixed commit": "17d13ab8de61d65e3b9d55ea4cbd574378f8da9d", "Url": "https://api.github.com/repos/vmoglan/eaton-application-challenge", "Date": "2018-09-14T17:14:46Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Map<java.util.UUID, java.util.List<java.lang.Integer>>.get(java.util.UUID)=>java.util.Map<java.util.UUID, java.util.List<java.lang.Integer>>.getOrDefault(java.util.UUID,java.util.List<java.lang.Integer>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4636/buggy-version/src.main.java.netcracker.study.monopoly.managers.SellOfferManager.java", "BodyUseAPI": [], "Fixed commit": "5a0b8e9b5a3d4ccb3b9ebebee865bc42b264fc9b", "Url": "https://api.github.com/repos/DimaStoyanov/Monopoly", "Date": "2018-05-20T20:45:35Z"},
{"Line": "71=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(java.lang.String)=>MagicianAwakening.CastDetectLifeSpellOutcome()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8552/buggy-version/MagicianAwakening.java", "BodyUseAPI": [], "Fixed commit": "12653525d6f9183678d9f986d9f7dde830e86ce9", "Url": "https://api.github.com/repos/Gaddiator/Progma", "Date": "2018-07-07T13:40:43Z"},
{"Line": "50=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "frc.team2220.robot.subsystems.Converter.getInstance().maxVelToFGainWRONG(int,int)=>frc.team2220.robot.subsystems.Converter.getInstance().maxVelToFGainWrong(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4546/buggy-version/src.main.java.frc.team2220.robot.subsystems.TwilightDrive.java", "BodyUseAPI": [], "Fixed commit": "09a0e08375490de488f3f3cb5885bc37c05a8657", "Url": "https://api.github.com/repos/Test2220/PowerUp_2018_Repo", "Date": "2018-02-05T01:16:38Z"},
{"Line": "58=>58", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "frc.team2220.robot.subsystems.Converter.getInstance().maxVelToFGainWRONG(int,int)=>frc.team2220.robot.subsystems.Converter.getInstance().maxVelToFGainWrong(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4546/buggy-version/src.main.java.frc.team2220.robot.subsystems.TwilightDrive.java", "BodyUseAPI": [], "Fixed commit": "09a0e08375490de488f3f3cb5885bc37c05a8657", "Url": "https://api.github.com/repos/Test2220/PowerUp_2018_Repo", "Date": "2018-02-05T01:16:38Z"},
{"Line": "65=>65", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "frc.team2220.robot.subsystems.Converter.getInstance().maxVelToFGainWRONG(int,int)=>frc.team2220.robot.subsystems.Converter.getInstance().maxVelToFGainWrong(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4546/buggy-version/src.main.java.frc.team2220.robot.subsystems.TwilightDrive.java", "BodyUseAPI": [], "Fixed commit": "09a0e08375490de488f3f3cb5885bc37c05a8657", "Url": "https://api.github.com/repos/Test2220/PowerUp_2018_Repo", "Date": "2018-02-05T01:16:38Z"},
{"Line": "43=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "frc.team2220.robot.subsystems.Converter.getInstance().maxVelToFGainWRONG(int,int)=>frc.team2220.robot.subsystems.Converter.getInstance().maxVelToFGainWrong(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4546/buggy-version/src.main.java.frc.team2220.robot.subsystems.TwilightDrive.java", "BodyUseAPI": [], "Fixed commit": "09a0e08375490de488f3f3cb5885bc37c05a8657", "Url": "https://api.github.com/repos/Test2220/PowerUp_2018_Repo", "Date": "2018-02-05T01:16:38Z"},
{"Line": "80=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.codecool.uml.overloading.Product.toString()=>java.lang.Object.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8752/buggy-version/src.com.codecool.uml.overloading.Product.java", "BodyUseAPI": [], "Fixed commit": "e74fa1f4cde32e075da62d6ccabbd71b851306b3", "Url": "https://api.github.com/repos/CodecoolBPoop/oop-java-overloading-robertkatona", "Date": "2018-07-29T12:52:30Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.codecool.uml.overloading.ProductCategory.toString()=>java.lang.Object.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8752/buggy-version/src.com.codecool.uml.overloading.ProductCategory.java", "BodyUseAPI": [], "Fixed commit": "e74fa1f4cde32e075da62d6ccabbd71b851306b3", "Url": "https://api.github.com/repos/CodecoolBPoop/oop-java-overloading-robertkatona", "Date": "2018-07-29T12:52:30Z"},
{"Line": "121=>122", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "autofe.util.DataSetUtils.matricesToInstances(autofe.util.DataSet)=>autofe.util.DataSet.getInstances()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4227/buggy-version/softwareconfiguration.autofe.src.autofe.algorithm.hasco.AutoFEMLTwoPhase.java", "BodyUseAPI": [], "Fixed commit": "51afd4fe2e1798545ff864e269389d021b0d0d7a", "Url": "https://api.github.com/repos/julilien/AILibs", "Date": "2018-10-19T15:11:36Z"},
{"Line": "65=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.structr.web.entity.dom.Page.getFirstChild()=>org.structr.web.entity.dom.Page.treeGetFirstChild()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2805/buggy-version/structr-ui.src.main.java.org.structr.websocket.command.ClonePageCommand.java", "BodyUseAPI": [], "Fixed commit": "27dedd8ad15c4870566c893a6eaadadc24d1913c", "Url": "https://api.github.com/repos/structr/structr", "Date": "2018-04-23T11:00:15Z"},
{"Line": "359=>368", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.intermine.metadata.StringUtil.join(java.util.Set<java.lang.Integer>,java.lang.String)=>javax.net.ssl.HttpsURLConnection.setRequestMethod(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8785/buggy-version/bio.sources.update-publications.main.src.org.intermine.bio.dataconversion.EntrezPublicationsRetriever.java", "BodyUseAPI": [], "Fixed commit": "7ac75082a9e1affd3b3fc87f9d56cfd350a6fdb6", "Url": "https://api.github.com/repos/nauer/CHOmine", "Date": "2018-06-28T14:07:31Z"},
{"Line": "363=>377", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.DataOutputStream.writeBytes(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8785/buggy-version/bio.sources.update-publications.main.src.org.intermine.bio.dataconversion.EntrezPublicationsRetriever.java", "BodyUseAPI": [], "Fixed commit": "7ac75082a9e1affd3b3fc87f9d56cfd350a6fdb6", "Url": "https://api.github.com/repos/nauer/CHOmine", "Date": "2018-06-28T14:07:31Z"},
{"Line": "364=>386", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.net.URL.openStream()=>javax.net.ssl.HttpsURLConnection.getInputStream()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8785/buggy-version/bio.sources.update-publications.main.src.org.intermine.bio.dataconversion.EntrezPublicationsRetriever.java", "BodyUseAPI": [], "Fixed commit": "7ac75082a9e1affd3b3fc87f9d56cfd350a6fdb6", "Url": "https://api.github.com/repos/nauer/CHOmine", "Date": "2018-06-28T14:07:31Z"},
{"Line": "245=>245", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.view.HardwareLayer.getLayer()=>android.view.HardwareLayer.getLayerHandle()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/16/buggy-version/core.java.android.view.GLES20Canvas.java", "BodyUseAPI": [], "Fixed commit": "4b19b7aaff1d1ff972ebe68101c2107454bbe5de", "Url": "https://api.github.com/repos/sudosurootdev/frameworks_base", "Date": "2014-11-07T18:34:53Z"},
{"Line": "160=>170", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setVisibility(View.VISIBLE)=>android.support.v7.widget.RecyclerView.setVisibility(View.VISIBLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5989/buggy-version/S03.01-Exercise-RecyclerView.app.src.main.java.com.example.android.sunshine.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "626edee052b9ed95b43e27761d61f17cc448d8a5", "Url": "https://api.github.com/repos/benktesh/ud851-Sunshine", "Date": "2018-01-25T23:45:09Z"},
{"Line": "248=>259", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setText(java.lang.String)=>com.example.android.sunshine.utilities.ForecastAdapter.setmWeatherData(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5989/buggy-version/S03.01-Exercise-RecyclerView.app.src.main.java.com.example.android.sunshine.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "626edee052b9ed95b43e27761d61f17cc448d8a5", "Url": "https://api.github.com/repos/benktesh/ud851-Sunshine", "Date": "2018-01-25T23:45:09Z"},
{"Line": "173=>185", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setVisibility(View.INVISIBLE)=>android.support.v7.widget.RecyclerView.setVisibility(View.INVISIBLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5989/buggy-version/S03.01-Exercise-RecyclerView.app.src.main.java.com.example.android.sunshine.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "626edee052b9ed95b43e27761d61f17cc448d8a5", "Url": "https://api.github.com/repos/benktesh/ud851-Sunshine", "Date": "2018-01-25T23:45:09Z"},
{"Line": "248=>259", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setText(java.lang.String)=>com.example.android.sunshine.utilities.ForecastAdapter.setmWeatherData(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5989/buggy-version/S03.01-Exercise-RecyclerView.app.src.main.java.com.example.android.sunshine.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "626edee052b9ed95b43e27761d61f17cc448d8a5", "Url": "https://api.github.com/repos/benktesh/ud851-Sunshine", "Date": "2018-01-25T23:45:09Z"},
{"Line": "107=>116", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.android.sunshine.MainActivity.findViewById(R.id.tv_weather_data)=>com.example.android.sunshine.MainActivity.findViewById(R.id.recyclerview_forecast)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5989/buggy-version/S03.01-Exercise-RecyclerView.app.src.main.java.com.example.android.sunshine.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "626edee052b9ed95b43e27761d61f17cc448d8a5", "Url": "https://api.github.com/repos/benktesh/ud851-Sunshine", "Date": "2018-01-25T23:45:09Z"},
{"Line": "400=>400", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.playposse.landoftherooster.dialog.BaseDialogFragment.EnterBuildingZoneListener.updateRemoteIndications()=>com.playposse.landoftherooster.dialog.BaseDialogFragment.EnterBuildingZoneListener.reload(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4391/buggy-version/app.src.main.java.com.playposse.landoftherooster.dialog.BaseDialogFragment.java", "BodyUseAPI": [], "Fixed commit": "0d290bc276ca6eb2e1d2fa2f2f842cd5e143c313", "Url": "https://api.github.com/repos/thomasfischersm/LandOfTheRooster", "Date": "2018-06-14T18:34:14Z"},
{"Line": "258=>258", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.eclipse.jetty.http2.frames.ResetFrame.toString()=>org.eclipse.jetty.http2.frames.ResetFrame.getError()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3952/buggy-version/http2.src.main.java.com.blazemeter.jmeter.http2.sampler.HTTP2StreamHandler.java", "BodyUseAPI": [], "Fixed commit": "f04f0926f078ed83759bb8c50d26090f2bec5c77", "Url": "https://api.github.com/repos/abstracta/jmeter-bzm-plugins", "Date": "2018-06-06T14:34:47Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.engining.pg.support.utils.ExceptionUtilsExt.dump(java.lang.Throwable)=>net.engining.pg.support.utils.ExceptionUtilsExt.dump(java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/375/buggy-version/control-core.src.main.java.net.engining.control.core.transactional.CommonRocketMqTransactionalProducer.java", "BodyUseAPI": [], "Fixed commit": "a93023a2ed899fd0951cf19994b2dbf69db67ceb", "Url": "https://api.github.com/repos/crazythinking/trans-flow", "Date": "2018-09-05T11:15:09Z"},
{"Line": "762=>757", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.unlucky.ui.inventory.ItemTooltip.setVisible(boolean)=>com.unlucky.ui.inventory.InventoryUI.unselectItem()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8492/buggy-version/core.src.com.unlucky.ui.inventory.InventoryUI.java", "BodyUseAPI": [], "Fixed commit": "03f9065d8d803438dea984a546e98efeea3580b2", "Url": "https://api.github.com/repos/mingli1/Unlucky", "Date": "2018-05-01T20:30:36Z"},
{"Line": "69=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.logic.commands.EditCommand.EditPersonDescriptor.setFormat(argMultimap.getValue(seedu.address.logic.parser.CliSyntax.PREFIX_FORMAT).get())=>seedu.address.logic.parser.ParserUtil.parseFormat(argMultimap.getValue(seedu.address.logic.parser.CliSyntax.PREFIX_FORMAT).get())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6084/buggy-version/src.main.java.seedu.address.logic.parser.EditCommandParser.java", "BodyUseAPI": [], "Fixed commit": "dda9c8f88219a87a5008d14960dd43506642023e", "Url": "https://api.github.com/repos/CS2103-AY1819S1-F11-4/main", "Date": "2018-10-29T12:33:34Z"},
{"Line": "73=>75", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.logic.commands.EditCommand.EditPersonDescriptor.setStoredLocation(argMultimap.getValue(seedu.address.logic.parser.CliSyntax.PREFIX_STORED_LOCATION).get())=>seedu.address.logic.parser.ParserUtil.parseLocation(argMultimap.getValue(seedu.address.logic.parser.CliSyntax.PREFIX_STORED_LOCATION).get())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6084/buggy-version/src.main.java.seedu.address.logic.parser.EditCommandParser.java", "BodyUseAPI": [], "Fixed commit": "dda9c8f88219a87a5008d14960dd43506642023e", "Url": "https://api.github.com/repos/CS2103-AY1819S1-F11-4/main", "Date": "2018-10-29T12:33:34Z"},
{"Line": "79=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new seedu.address.model.person.Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, \"default\", null, null)=>new seedu.address.model.person.Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, null, null, null)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6084/buggy-version/src.main.java.seedu.address.logic.commands.DeleteTimetableCommand.java", "BodyUseAPI": [], "Fixed commit": "dda9c8f88219a87a5008d14960dd43506642023e", "Url": "https://api.github.com/repos/CS2103-AY1819S1-F11-4/main", "Date": "2018-10-29T12:33:34Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.springframework.web.method.HandlerMethod.getMethod()=>org.springframework.web.method.HandlerMethod.getBean()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6852/buggy-version/src.main.java.com.sevendegree.common.intercepter.AuthorityInterceptor.java", "BodyUseAPI": [], "Fixed commit": "c73055d55a8c4f5a475c20f66d2db8aa649d07b0", "Url": "https://api.github.com/repos/AgentNo7/sevendegree_learning", "Date": "2018-02-13T12:48:39Z"},
{"Line": "106=>110", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.PrintStream.println()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4780/buggy-version/app.src.main.java.edu.illinois.cs125.sagittario.sagittario.MineSweeper.java", "BodyUseAPI": [], "Fixed commit": "fc75f63e0d28d1f9d17d6fbd122d42a6bca35b6a", "Url": "https://api.github.com/repos/nusgart/sagittario", "Date": "2018-04-24T20:03:39Z"},
{"Line": "116=>116", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Loan.getId()=>java.util.Map<java.lang.Integer, Loan>.remove(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3266/buggy-version/src.Member.java", "BodyUseAPI": [], "Fixed commit": "927b3764536131527adfb2d18c57ef9996334f1a", "Url": "https://api.github.com/repos/fguckian-11630129/Charter", "Date": "2018-08-18T06:20:22Z"},
{"Line": "116=>116", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Map<java.lang.Integer, Loan>.remove(loan.getId())=>java.util.Map<java.lang.Integer, Loan>.remove(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3266/buggy-version/src.Member.java", "BodyUseAPI": [], "Fixed commit": "927b3764536131527adfb2d18c57ef9996334f1a", "Url": "https://api.github.com/repos/fguckian-11630129/Charter", "Date": "2018-08-18T06:20:22Z"},
{"Line": "137=>137", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.List<codeu.model.data.User>.get(((users.size()) - 1))=>users.stream().max(java.util.Comparator.comparing(User::getCreationTime)).get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1622/buggy-version/src.main.java.codeu.model.store.basic.UserStore.java", "BodyUseAPI": [], "Fixed commit": "5a205c914e8861809f22e211b65ca9415fdaa841", "Url": "https://api.github.com/repos/CodeU-S2018-T26/CodeU-Spring-2018", "Date": "2018-06-08T18:23:38Z"},
{"Line": "21=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.app.Fragment.onCreate(android.os.Bundle)=>android.support.v4.app.Fragment.onCreate(android.os.Bundle)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6324/buggy-version/app.src.main.java.com.dev.skillconnect.User_login.java", "BodyUseAPI": [], "Fixed commit": "f0243f458379d477d5a512315e7f135083459236", "Url": "https://api.github.com/repos/StartupTinder/Skill-Connect", "Date": "2018-03-02T10:15:39Z"},
{"Line": "28=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.LayoutInflater.inflate(R.layout.activity_login,android.view.ViewGroup,boolean)=>android.view.LayoutInflater.inflate(R.layout.fragment_user_login,android.view.ViewGroup,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6324/buggy-version/app.src.main.java.com.dev.skillconnect.User_login.java", "BodyUseAPI": [], "Fixed commit": "f0243f458379d477d5a512315e7f135083459236", "Url": "https://api.github.com/repos/StartupTinder/Skill-Connect", "Date": "2018-03-02T10:15:39Z"},
{"Line": "23=>14", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.dev.skillconnect.Login.setContentView(R.layout.activity_main)=>com.dev.skillconnect.Login.setContentView(R.layout.activity_login)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6324/buggy-version/app.src.main.java.com.dev.skillconnect.Login.java", "BodyUseAPI": [], "Fixed commit": "f0243f458379d477d5a512315e7f135083459236", "Url": "https://api.github.com/repos/StartupTinder/Skill-Connect", "Date": "2018-03-02T10:15:39Z"},
{"Line": "168=>168", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.swing.GroupLayout.ParallelGroup.addComponent(javax.swing.JLabel,javax.swing.GroupLayout.Alignment,int,int,int)=>javax.swing.GroupLayout.ParallelGroup.addComponent(javax.swing.JLabel,int,int,short)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4454/buggy-version/src.redblacktrees.GUI.java", "BodyUseAPI": [], "Fixed commit": "55a6e423871fa1d54f59e9c9c89f113a3c9f4d1e", "Url": "https://api.github.com/repos/ahmednawar1997/Red-Black-Trees-Implementation", "Date": "2018-05-12T12:30:15Z"},
{"Line": "168=>168", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.swing.GroupLayout.ParallelGroup.addComponent(javax.swing.JLabel,javax.swing.GroupLayout.Alignment,int,int,int)=>javax.swing.GroupLayout.ParallelGroup.addComponent(javax.swing.JLabel,int,int,short)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4454/buggy-version/src.redblacktrees.GUI.java", "BodyUseAPI": [], "Fixed commit": "55a6e423871fa1d54f59e9c9c89f113a3c9f4d1e", "Url": "https://api.github.com/repos/ahmednawar1997/Red-Black-Trees-Implementation", "Date": "2018-05-12T12:30:15Z"},
{"Line": "36=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.toLowerCase()=>Model.findAgentInModel(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5981/buggy-version/src.Model.java", "BodyUseAPI": [], "Fixed commit": "f9932781fa57546ec2747e38402f0d28148da9b3", "Url": "https://api.github.com/repos/Roti12/UnwindModel", "Date": "2018-02-26T08:05:33Z"},
{"Line": "37=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "state.getRelations().isEmpty()=>state.getRelations().size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5981/buggy-version/src.Model.java", "BodyUseAPI": [], "Fixed commit": "f9932781fa57546ec2747e38402f0d28148da9b3", "Url": "https://api.github.com/repos/Roti12/UnwindModel", "Date": "2018-02-26T08:05:33Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.rohantaneja.monitoringvisits.data.MinistryDatabase.getInstance(com.rohantaneja.monitoringvisits.ui.ViewTaskActivity)=>com.rohantaneja.monitoringvisits.Utils.saveRetrofitTasks(tasksResponse.taskList,com.rohantaneja.monitoringvisits.ui.ViewTaskActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/911/buggy-version/app.src.main.java.com.rohantaneja.monitoringvisits.ui.ViewTaskActivity.java", "BodyUseAPI": [], "Fixed commit": "fff334a73a77da5fb1783f88d2f868d2cf6db124", "Url": "https://api.github.com/repos/rohan20/monitoring-visits", "Date": "2018-03-31T10:30:05Z"},
{"Line": "56=>56", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.rohantaneja.monitoringvisits.data.MinistryDatabase.getInstance(this).getMinistryDAO().insertTasks(tasksResponse.taskList)=>com.rohantaneja.monitoringvisits.Utils.saveRetrofitTasks(tasksResponse.taskList,com.rohantaneja.monitoringvisits.ui.ViewTaskActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/911/buggy-version/app.src.main.java.com.rohantaneja.monitoringvisits.ui.ViewTaskActivity.java", "BodyUseAPI": [], "Fixed commit": "fff334a73a77da5fb1783f88d2f868d2cf6db124", "Url": "https://api.github.com/repos/rohan20/monitoring-visits", "Date": "2018-03-31T10:30:05Z"},
{"Line": "63=>63", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<java.lang.String>.contains(java.lang.String)=>java.lang.Class<? extends java.lang.Object>.isEnum()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2548/buggy-version/xap-core.xap-datagrid.src.main.java.com.gigaspaces.internal.utils.ReflectionUtils.java", "BodyUseAPI": [], "Fixed commit": "f13fbfcd170ba9220af862f80f33868f1b566dcb", "Url": "https://api.github.com/repos/xap/xap", "Date": "2018-05-07T08:58:38Z"},
{"Line": "63=>63", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<java.lang.String>.contains(java.lang.String)=>java.lang.Class<? extends java.lang.Object>.isEnum()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2548/buggy-version/xap-core.xap-datagrid.src.main.java.com.gigaspaces.internal.utils.ReflectionUtils.java", "BodyUseAPI": [], "Fixed commit": "f13fbfcd170ba9220af862f80f33868f1b566dcb", "Url": "https://api.github.com/repos/xap/xap", "Date": "2018-05-07T08:58:38Z"},
{"Line": "63=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<java.lang.String>.contains(java.lang.String)=>com.gigaspaces.internal.utils.ReflectionUtils.isCommonJavaType(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/2548/buggy-version/xap-core.xap-datagrid.src.main.java.com.gigaspaces.internal.utils.ReflectionUtils.java", "BodyUseAPI": [], "Fixed commit": "f13fbfcd170ba9220af862f80f33868f1b566dcb", "Url": "https://api.github.com/repos/xap/xap", "Date": "2018-05-07T08:58:38Z"},
{"Line": "308=>308", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.hadoop.metrics2.sink.relocated.google.common.collect.Sets.newHashSet()=>com.google.common.collect.Sets.newHashSet()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8109/buggy-version/ambari-server.src.main.java.org.apache.ambari.server.checks.AbstractCheckDescriptor.java", "BodyUseAPI": [], "Fixed commit": "9443c76de3e3d8a85cafe946b2d5017a6730f8ae", "Url": "https://api.github.com/repos/jonathan-hurley/ambari", "Date": "2018-04-30T14:01:01Z"},
{"Line": "202=>203", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.firebase.database.DatabaseReference.child(mContext.getString(R.string.dbname_user_account_settings))=>com.google.firebase.database.DatabaseReference.child(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1653/buggy-version/app.src.main.java.to.rent.rentto.Utils.FirebaseMethods.java", "BodyUseAPI": [], "Fixed commit": "c7db5df3935d33cdc9ddc8cb7cd0b4f936ca3c85", "Url": "https://api.github.com/repos/minhwebc/Rent.To", "Date": "2018-04-17T23:32:16Z"},
{"Line": "68=>68", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.elasticsearch.xpack.XPackPlugin.isTribeNode(org.elasticsearch.common.settings.Settings)=>org.elasticsearch.xpack.XPackClientActionPlugin.isTribeNode(org.elasticsearch.common.settings.Settings)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8311/buggy-version/x-pack.plugin.src.main.java.org.elasticsearch.xpack.ccr.Ccr.java", "BodyUseAPI": [], "Fixed commit": "38aea9588bda1f8e57c6bc690572b1d6cc487cf3", "Url": "https://api.github.com/repos/seratch/elasticsearch", "Date": "2018-01-04T17:18:46Z"},
{"Line": "69=>69", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.elasticsearch.xpack.XPackPlugin.isTribeClientNode(org.elasticsearch.common.settings.Settings)=>org.elasticsearch.xpack.XPackClientActionPlugin.isTribeClientNode(org.elasticsearch.common.settings.Settings)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8311/buggy-version/x-pack.plugin.src.main.java.org.elasticsearch.xpack.ccr.Ccr.java", "BodyUseAPI": [], "Fixed commit": "38aea9588bda1f8e57c6bc690572b1d6cc487cf3", "Url": "https://api.github.com/repos/seratch/elasticsearch", "Date": "2018-01-04T17:18:46Z"},
{"Line": "68=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.elasticsearch.xpack.XPackPlugin.isTribeNode(org.elasticsearch.common.settings.Settings)=>org.elasticsearch.xpack.XPackClientActionPlugin.isTribeNode(org.elasticsearch.common.settings.Settings)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8311/buggy-version/x-pack.plugin.src.main.java.org.elasticsearch.xpack.ccr.Ccr.java", "BodyUseAPI": [], "Fixed commit": "38aea9588bda1f8e57c6bc690572b1d6cc487cf3", "Url": "https://api.github.com/repos/seratch/elasticsearch", "Date": "2018-01-04T17:18:46Z"},
{"Line": "106=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.math.ui.MinExpFilterDialog.setDialogCardContent(org.jebtk.modern.panel.VBoxAutoWidth)=>org.jebtk.math.ui.MinExpFilterDialog.setCard(org.jebtk.modern.panel.VBoxAutoWidth)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4159/buggy-version/org.jebtk.math.ui.src.main.java.org.jebtk.math.ui.MinExpFilterDialog.java", "BodyUseAPI": [], "Fixed commit": "d63bb094999de7d3092db6bf97b436a2bbaa133d", "Url": "https://api.github.com/repos/antonybholmes/jebtk-math-ui", "Date": "2018-03-15T23:51:52Z"},
{"Line": "106=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.math.ui.SimpleFilterDialog.setDialogCardContent(javax.swing.Box)=>org.jebtk.math.ui.SimpleFilterDialog.setCard(javax.swing.Box)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4159/buggy-version/org.jebtk.math.ui.src.main.java.org.jebtk.math.ui.SimpleFilterDialog.java", "BodyUseAPI": [], "Fixed commit": "d63bb094999de7d3092db6bf97b436a2bbaa133d", "Url": "https://api.github.com/repos/antonybholmes/jebtk-math-ui", "Date": "2018-03-15T23:51:52Z"},
{"Line": "108=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.math.ui.MinMaxThresholdDialog.setDialogCardContent(javax.swing.Box)=>org.jebtk.math.ui.MinMaxThresholdDialog.setCard(javax.swing.Box)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4159/buggy-version/org.jebtk.math.ui.src.main.java.org.jebtk.math.ui.MinMaxThresholdDialog.java", "BodyUseAPI": [], "Fixed commit": "d63bb094999de7d3092db6bf97b436a2bbaa133d", "Url": "https://api.github.com/repos/antonybholmes/jebtk-math-ui", "Date": "2018-03-15T23:51:52Z"},
{"Line": "37=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "rsvier.workshop.controller.OrderController.runView()=>rsvier.workshop.controller.MainController.setController(TypeOfController.EMPLOYEE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9279/buggy-version/src.main.java.rsvier.workshop.controller.OrderController.java", "BodyUseAPI": [], "Fixed commit": "5ec1fa7efd626cad941e19625e31b4b542a8b4f8", "Url": "https://api.github.com/repos/VLKNK/workshop1-RS4", "Date": "2018-05-08T10:06:24Z"},
{"Line": "419=>419", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bds.lang.Type.isBool()=>org.bds.lang.BdsNode.isBool()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5403/buggy-version/src.org.bds.lang.BdsNode.java", "BodyUseAPI": [], "Fixed commit": "edb00690ee322d493cf132f879378f83c914c330", "Url": "https://api.github.com/repos/pcingola/BigDataScript", "Date": "2018-01-03T15:28:34Z"},
{"Line": "419=>419", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bds.lang.Type.isInt()=>org.bds.lang.BdsNode.isInt()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5403/buggy-version/src.org.bds.lang.BdsNode.java", "BodyUseAPI": [], "Fixed commit": "edb00690ee322d493cf132f879378f83c914c330", "Url": "https://api.github.com/repos/pcingola/BigDataScript", "Date": "2018-01-03T15:28:34Z"},
{"Line": "419=>419", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bds.lang.Type.isReal()=>org.bds.lang.BdsNode.isReal()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5403/buggy-version/src.org.bds.lang.BdsNode.java", "BodyUseAPI": [], "Fixed commit": "edb00690ee322d493cf132f879378f83c914c330", "Url": "https://api.github.com/repos/pcingola/BigDataScript", "Date": "2018-01-03T15:28:34Z"},
{"Line": "67=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Runnable.run()=>org.jboss.errai.ui.nav.client.local.api.NavigationControl.Interrupt.interrupt(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3615/buggy-version/errai-navigation.src.main.java.org.jboss.errai.ui.nav.client.local.api.NavigationControl.java", "BodyUseAPI": [], "Fixed commit": "d4e7c1354e34ac8859bfe72e6bc76737e0fc7014", "Url": "https://api.github.com/repos/BenDol/errai", "Date": "2018-10-05T19:29:24Z"},
{"Line": "89=>98", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.jboss.errai.ui.nav.client.local.api.NavigationControl.interrupt()=>org.jboss.errai.ui.nav.client.local.api.NavigationControl.interrupt(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3615/buggy-version/errai-navigation.src.main.java.org.jboss.errai.ui.nav.client.local.api.NavigationControl.java", "BodyUseAPI": [], "Fixed commit": "d4e7c1354e34ac8859bfe72e6bc76737e0fc7014", "Url": "https://api.github.com/repos/BenDol/errai", "Date": "2018-10-05T19:29:24Z"},
{"Line": "88=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "net.openhft.chronicle.core.tcp.ISocketChannel.wrapUnsafe(nc.socketChannel())=>net.openhft.chronicle.core.tcp.ISocketChannel.wrap(nc.socketChannel())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7932/buggy-version/src.main.java.net.openhft.chronicle.network.TcpEventHandler.java", "BodyUseAPI": [], "Fixed commit": "df5338b717cf5c6bd0eea2305117fc074997b542", "Url": "https://api.github.com/repos/OpenHFT/Chronicle-Network", "Date": "2018-07-10T09:21:12Z"},
{"Line": "130=>130", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.orientechnologies.orient.core.sql.executor.OResultInternal.setProperty(java.lang.String,java.lang.Object)=>com.orientechnologies.orient.core.sql.executor.OResultInternal.setProperty(java.lang.String,this.transformer.toResult(eval))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4550/buggy-version/driver.src.main.java.org.apache.tinkerpop.gremlin.orientdb.executor.OCommandGremlinExecutor.java", "BodyUseAPI": [], "Fixed commit": "73407766da9bdfa49fdc029e610b3c2c7a064c9a", "Url": "https://api.github.com/repos/orientechnologies/orientdb-gremlin", "Date": "2018-07-09T15:32:35Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.project5.AsyncWorker.tasksAreNotDone()=>com.project5.AsyncWorker.tasksAreDone()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3290/buggy-version/src.com.project5.screens.LoadingScreen.java", "BodyUseAPI": [], "Fixed commit": "43bda82360a44b2c6dbdae82942904587815cfe8", "Url": "https://api.github.com/repos/petterroea/Project-5", "Date": "2018-07-09T20:14:16Z"},
{"Line": "23=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "gov.nist.toolkit.xdstools2.client.widgets.PasswordTextBox.addKeyPressHandler(com.google.gwt.event.dom.client.KeyPressHandler)=>gov.nist.toolkit.xdstools2.client.widgets.PasswordTextBox.addKeyUpHandler(com.google.gwt.event.dom.client.KeyUpHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5186/buggy-version/xdstools2.src.main.java.gov.nist.toolkit.xdstools2.client.widgets.AdminPasswordDialogBox.java", "BodyUseAPI": [], "Fixed commit": "178e8b49462824edca503e6280ff9cf29df9ced2", "Url": "https://api.github.com/repos/usnistgov/iheos-toolkit2", "Date": "2018-02-02T18:40:29Z"},
{"Line": "23=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "gov.nist.toolkit.xdstools2.client.widgets.PasswordTextBox.addKeyPressHandler(com.google.gwt.event.dom.client.KeyPressHandler)=>gov.nist.toolkit.xdstools2.client.widgets.PasswordTextBox.addKeyUpHandler(com.google.gwt.event.dom.client.KeyUpHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5186/buggy-version/xdstools2.src.main.java.gov.nist.toolkit.xdstools2.client.widgets.AdminPasswordDialogBox.java", "BodyUseAPI": [], "Fixed commit": "178e8b49462824edca503e6280ff9cf29df9ced2", "Url": "https://api.github.com/repos/usnistgov/iheos-toolkit2", "Date": "2018-02-02T18:40:29Z"},
{"Line": "26=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.gwt.event.dom.client.KeyPressEvent.getCharCode()=>com.google.gwt.event.dom.client.KeyUpEvent.getNativeKeyCode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5186/buggy-version/xdstools2.src.main.java.gov.nist.toolkit.xdstools2.client.widgets.AdminPasswordDialogBox.java", "BodyUseAPI": [], "Fixed commit": "178e8b49462824edca503e6280ff9cf29df9ced2", "Url": "https://api.github.com/repos/usnistgov/iheos-toolkit2", "Date": "2018-02-02T18:40:29Z"},
{"Line": "26=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.gwt.event.dom.client.KeyPressEvent.getCharCode()=>com.google.gwt.event.dom.client.KeyUpEvent.getNativeKeyCode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5186/buggy-version/xdstools2.src.main.java.gov.nist.toolkit.xdstools2.client.widgets.AdminPasswordDialogBox.java", "BodyUseAPI": [], "Fixed commit": "178e8b49462824edca503e6280ff9cf29df9ced2", "Url": "https://api.github.com/repos/usnistgov/iheos-toolkit2", "Date": "2018-02-02T18:40:29Z"},
{"Line": "59=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<org.springframework.web.multipart.MultipartFile>.size()=>org.springframework.web.multipart.MultipartFile.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9317/buggy-version/lingshi.src.lingshi.web.model.RequestFile.java", "BodyUseAPI": [], "Fixed commit": "95b27f408039eeda8e40727ff523d393c8adb6d2", "Url": "https://api.github.com/repos/MyAuntIsPost90s/lingshiframework", "Date": "2018-02-02T13:40:38Z"},
{"Line": "512=>512", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Map<com.skcc.cloudz.zcp.common.model.DeploymentStatus, com.skcc.cloudz.zcp.common.model.DeploymentStatusMetric>.put(DeploymentStatus.Available,com.skcc.cloudz.zcp.common.model.DeploymentStatusMetric)=>java.util.Map<com.skcc.cloudz.zcp.common.model.DeploymentStatus, com.skcc.cloudz.zcp.common.model.DeploymentStatusMetric>.put(DeploymentStatus.Unavailable,com.skcc.cloudz.zcp.common.model.DeploymentStatusMetric)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/862/buggy-version/src.main.java.com.skcc.cloudz.zcp.metric.service.MetricService.java", "BodyUseAPI": [], "Fixed commit": "d502f7dc49e01db1ed7000a614316f88ff72f261", "Url": "https://api.github.com/repos/cnpst/zcp-iam", "Date": "2018-07-04T02:54:31Z"},
{"Line": "140=>148", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.sysml.runtime.instructions.gpu.context.GPUObject.toIntExact(((gpuObj.mat.getNumRows()) * (gpuObj.mat.getNumColumns())))=>org.apache.sysml.runtime.instructions.gpu.context.ShadowBuffer.getSizeOfFloat(((gpuObj.mat.getNumRows()) * (gpuObj.mat.getNumColumns())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9693/buggy-version/src.main.java.org.apache.sysml.runtime.instructions.gpu.context.ShadowBuffer.java", "BodyUseAPI": [], "Fixed commit": "7c54631c6cb97c7cbd557cf6d3238d8a60dfd79a", "Url": "https://api.github.com/repos/niketanpansare/systemml", "Date": "2018-09-19T03:39:58Z"},
{"Line": "78=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "jcuda.runtime.JCuda.cudaMemcpy(jcuda.Pointer.to(shadowPointer),gpuObj.jcudaDenseMatrixPtr,(numElems * (org.apache.sysml.runtime.matrix.data.LibMatrixCUDA.sizeOfDataType)),jcuda.runtime.cudaMemcpyKind.cudaMemcpyDeviceToHost)=>jcuda.runtime.JCuda.cudaMemcpy(jcuda.Pointer.to(shadowPointer),gpuObj.jcudaDenseMatrixPtr,long,jcuda.runtime.cudaMemcpyKind.cudaMemcpyDeviceToHost)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/9693/buggy-version/src.main.java.org.apache.sysml.runtime.instructions.gpu.context.ShadowBuffer.java", "BodyUseAPI": [], "Fixed commit": "7c54631c6cb97c7cbd557cf6d3238d8a60dfd79a", "Url": "https://api.github.com/repos/niketanpansare/systemml", "Date": "2018-09-19T03:39:58Z"},
{"Line": "40=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "app.order.Order.getId()=>app.order.OrderController.getOrderById(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3117/buggy-version/src.main.java.app.order.OrderController.java", "BodyUseAPI": [], "Fixed commit": "042e0df700dca8e68d48804d9a0dd5fe2737f792", "Url": "https://api.github.com/repos/Kalk88/BeaverCoffee", "Date": "2018-06-01T14:13:09Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "app.employee.Employee.getId()=>app.employee.EmployeeController.getEmployeeById(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3117/buggy-version/src.main.java.app.employee.EmployeeController.java", "BodyUseAPI": [], "Fixed commit": "042e0df700dca8e68d48804d9a0dd5fe2737f792", "Url": "https://api.github.com/repos/Kalk88/BeaverCoffee", "Date": "2018-06-01T14:13:09Z"},
{"Line": "21=>24", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.ArrayList<Servidor.DBO.Sala>.add(Servidor.DBO.Sala)=>java.util.ArrayList<Servidor.DBO.Sala>.add(Servidor.DBO.Sala)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4922/buggy-version/src.Servidor.DAO.Salas.java", "BodyUseAPI": [], "Fixed commit": "9fd2ebe9e845d49f4a0affdfc2c8af9b8cf6bf51", "Url": "https://api.github.com/repos/RodrigoCSoares/ChattingInJava", "Date": "2018-06-16T18:00:27Z"},
{"Line": "19=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.toLowerCase()=>java.lang.String.replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7103/buggy-version/src.com.tsunderebug.discordintellij.FileChange.java", "BodyUseAPI": [], "Fixed commit": "06674ad3147644bc75f2cf90971cf0c8bdb54868", "Url": "https://api.github.com/repos/sorenbug/discord-intellij", "Date": "2018-03-22T01:23:35Z"},
{"Line": "208=>212", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.egov.bpa.transaction.entity.BpaApplication.getAdmissionfeeAmount()=>org.egov.bpa.transaction.entity.BpaApplication.getServiceType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7593/buggy-version/egov.egov-bpa.src.main.java.org.egov.bpa.transaction.service.collection.ApplicationBpaBillService.java", "BodyUseAPI": [], "Fixed commit": "ac3cd2ca626d1af1c338da8e3d77ac4966c9f023", "Url": "https://api.github.com/repos/egovernments/egov-smartcity-suite", "Date": "2018-02-01T09:27:40Z"},
{"Line": "105=>105", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getResources().getString(R.string.txt_anonymous)=>getResources().getString(R.string.user)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3483/buggy-version/app.src.main.java.openfoodfacts.github.scrachx.openfood.views.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "43f2a7c1b480e4a396d9b2c19b9a68ee189fffd2", "Url": "https://api.github.com/repos/Rutvikmodi/openfoodfacts-androidapp", "Date": "2018-07-04T14:10:05Z"},
{"Line": "104=>104", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.content.SharedPreferences.getString(java.lang.String,getResources().getString(R.string.txt_anonymous))=>android.content.SharedPreferences.getString(getResources().getString(R.string.user),getResources().getString(R.string.txt_anonymous))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3483/buggy-version/app.src.main.java.openfoodfacts.github.scrachx.openfood.views.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "43f2a7c1b480e4a396d9b2c19b9a68ee189fffd2", "Url": "https://api.github.com/repos/Rutvikmodi/openfoodfacts-androidapp", "Date": "2018-07-04T14:10:05Z"},
{"Line": "57=>58", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.partners.parser.ClivarXmlSAXParser.getAssertionMethodData(java.lang.String)=>org.partners.parser.ClivarXmlSAXParser.getAlleleData(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7954/buggy-version/src.main.java.org.partners.parser.ClivarXmlSAXParser.java", "BodyUseAPI": [], "Fixed commit": "05c07f0dce4d6f2dbc134e9183b5ef5b70f98241", "Url": "https://api.github.com/repos/clingen-data-model/clinvar-xml-parser", "Date": "2018-01-15T17:44:49Z"},
{"Line": "158=>161", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.contains(java.lang.String)=>org.talend.core.runtime.maven.MavenUrlHelper.isMvnUrl(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3974/buggy-version/main.plugins.org.talend.designer.core.generic.src.main.java.org.talend.designer.core.generic.model.GenericTableUtils.java", "BodyUseAPI": [], "Fixed commit": "73c026bd2212c1222a2508ff25def9271a959651", "Url": "https://api.github.com/repos/Talend/tdi-studio-se", "Date": "2018-01-22T06:42:36Z"},
{"Line": "475=>475", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.talend.core.model.utils.TalendTextUtils.removeQuotes(java.lang.String)=>org.talend.core.model.utils.TalendTextUtils.removeQuotesIfExist(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3974/buggy-version/main.plugins.org.talend.designer.core.src.main.java.org.talend.designer.core.ui.editor.update.cmd.UpdateNodeParameterCommand.java", "BodyUseAPI": [], "Fixed commit": "73c026bd2212c1222a2508ff25def9271a959651", "Url": "https://api.github.com/repos/Talend/tdi-studio-se", "Date": "2018-01-22T06:42:36Z"},
{"Line": "1248=>1248", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.talend.core.runtime.maven.MavenArtifact.getFileName()=>org.talend.core.runtime.maven.MavenArtifact.getFileName(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3974/buggy-version/main.plugins.org.talend.designer.core.generic.src.main.java.org.talend.designer.core.generic.model.Component.java", "BodyUseAPI": [], "Fixed commit": "73c026bd2212c1222a2508ff25def9271a959651", "Url": "https://api.github.com/repos/Talend/tdi-studio-se", "Date": "2018-01-22T06:42:36Z"},
{"Line": "30=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.servlet.http.HttpServletResponse.getWriter()=>javax.servlet.http.HttpServletRequest.getRequestDispatcher(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7804/buggy-version/src.login.servlet.Login.java", "BodyUseAPI": [], "Fixed commit": "046b4118355d9dc9f4210f64e55f65973750368b", "Url": "https://api.github.com/repos/Mosuswalks/COMP3095_Sarapion", "Date": "2018-10-25T01:16:04Z"},
{"Line": "30=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "response.getWriter().append(\"Served at: \").append(request.getContextPath())=>request.getRequestDispatcher(\"jsp/login.jsp\").forward(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7804/buggy-version/src.login.servlet.Login.java", "BodyUseAPI": [], "Fixed commit": "046b4118355d9dc9f4210f64e55f65973750368b", "Url": "https://api.github.com/repos/Mosuswalks/COMP3095_Sarapion", "Date": "2018-10-25T01:16:04Z"},
{"Line": "30=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "response.getWriter().append(java.lang.String)=>javax.servlet.http.HttpServletRequest.getRequestDispatcher(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7804/buggy-version/src.login.servlet.Login.java", "BodyUseAPI": [], "Fixed commit": "046b4118355d9dc9f4210f64e55f65973750368b", "Url": "https://api.github.com/repos/Mosuswalks/COMP3095_Sarapion", "Date": "2018-10-25T01:16:04Z"},
{"Line": "30=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "response.getWriter().append(java.lang.String)=>javax.servlet.http.HttpServletRequest.getRequestDispatcher(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7804/buggy-version/src.login.servlet.Login.java", "BodyUseAPI": [], "Fixed commit": "046b4118355d9dc9f4210f64e55f65973750368b", "Url": "https://api.github.com/repos/Mosuswalks/COMP3095_Sarapion", "Date": "2018-10-25T01:16:04Z"},
{"Line": "118=>119", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.marklogic.mgmt.resource.security.CertificateTemplateManager.info(format(\"Checking if %s template has certificates --> for template: %s\", templateIdOrName, response.getPrettyXml()))=>com.marklogic.mgmt.resource.security.CertificateTemplateManager.debug(format(\"Checking if %s template has certificates --> for template: %s\", templateIdOrName, response.getPrettyXml()))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6132/buggy-version/src.main.java.com.marklogic.mgmt.resource.security.CertificateTemplateManager.java", "BodyUseAPI": [], "Fixed commit": "dff04e029490f35ef8461e4f5d6c939254c6bb60", "Url": "https://api.github.com/repos/stevenbrockman/ml-app-deployer", "Date": "2018-06-14T16:33:29Z"},
{"Line": "45=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "data.getBooking().getService().getServiceName()=>data.getBooking().getService().getService()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1010/buggy-version/src.controllersPackage.InfoMiniTabController.java", "BodyUseAPI": [], "Fixed commit": "33d381758738d52a5853d8d4344885152e94f0f7", "Url": "https://api.github.com/repos/zEndurance/BarberShop", "Date": "2018-06-30T14:58:48Z"},
{"Line": "235=>235", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "mainPackage.User.getInstance().services.get(i).getServiceName()=>mainPackage.User.getInstance().services.get(i).getService()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1010/buggy-version/src.controllersPackage.ServicesTabController.java", "BodyUseAPI": [], "Fixed commit": "33d381758738d52a5853d8d4344885152e94f0f7", "Url": "https://api.github.com/repos/zEndurance/BarberShop", "Date": "2018-06-30T14:58:48Z"},
{"Line": "141=>141", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "mainPackage.User.getInstance().services.get(i).getServiceName()=>mainPackage.User.getInstance().services.get(i).getService()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1010/buggy-version/src.controllersPackage.ServicesTabController.java", "BodyUseAPI": [], "Fixed commit": "33d381758738d52a5853d8d4344885152e94f0f7", "Url": "https://api.github.com/repos/zEndurance/BarberShop", "Date": "2018-06-30T14:58:48Z"},
{"Line": "141=>141", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "mainPackage.Service.getServiceName()=>mainPackage.Service.getService()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1010/buggy-version/src.controllersPackage.ServicesTabController.java", "BodyUseAPI": [], "Fixed commit": "33d381758738d52a5853d8d4344885152e94f0f7", "Url": "https://api.github.com/repos/zEndurance/BarberShop", "Date": "2018-06-30T14:58:48Z"},
{"Line": "119=>120", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.example.jmcghee.flualert.MainActivity.registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)=>android.support.v4.content.LocalBroadcastManager.getInstance(this).registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5123/buggy-version/app.src.main.java.com.example.jmcghee.flualert.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "d51532694f9c1544c21c94f6ec109d9d2bbe93ce", "Url": "https://api.github.com/repos/Mcghee-Jake/FluAlert", "Date": "2018-08-30T19:38:27Z"},
{"Line": "87=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.example.jmcghee.flualert.MainActivity.registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)=>android.support.v4.content.LocalBroadcastManager.getInstance(this).registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5123/buggy-version/app.src.main.java.com.example.jmcghee.flualert.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "d51532694f9c1544c21c94f6ec109d9d2bbe93ce", "Url": "https://api.github.com/repos/Mcghee-Jake/FluAlert", "Date": "2018-08-30T19:38:27Z"},
{"Line": "62=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.example.jmcghee.flualert.UserLocationService.1.sendBroadcast(android.content.Intent)=>android.support.v4.content.LocalBroadcastManager.getInstance(this).sendBroadcast(android.content.Intent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/5123/buggy-version/app.src.main.java.com.example.jmcghee.flualert.UserLocationService.java", "BodyUseAPI": [], "Fixed commit": "d51532694f9c1544c21c94f6ec109d9d2bbe93ce", "Url": "https://api.github.com/repos/Mcghee-Jake/FluAlert", "Date": "2018-08-30T19:38:27Z"},
{"Line": "247=>241", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "FetchRequest.Builder.fetchData()=>org.apache.kafka.common.Node.id()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6592/buggy-version/clients.src.main.java.org.apache.kafka.clients.consumer.internals.Fetcher.java", "BodyUseAPI": [], "Fixed commit": "b3a3a1e9a60c08f9a499147287a7565c860e198b", "Url": "https://api.github.com/repos/cmccabe/kafka", "Date": "2018-01-31T20:04:51Z"},
{"Line": "247=>241", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.slf4j.Logger.debug(java.lang.String,request.fetchData(),org.apache.kafka.common.Node,java.lang.RuntimeException)=>java.util.Map<java.lang.Integer, org.apache.kafka.clients.FetchSessionHandler>.get(fetchTarget.id())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6592/buggy-version/clients.src.main.java.org.apache.kafka.clients.consumer.internals.Fetcher.java", "BodyUseAPI": [], "Fixed commit": "b3a3a1e9a60c08f9a499147287a7565c860e198b", "Url": "https://api.github.com/repos/cmccabe/kafka", "Date": "2018-01-31T20:04:51Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.kafka.common.errors.ApiException(java.lang.String)=>org.apache.kafka.common.errors.RetriableException(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6592/buggy-version/clients.src.main.java.org.apache.kafka.common.errors.FetchSessionIdNotFoundException.java", "BodyUseAPI": [], "Fixed commit": "b3a3a1e9a60c08f9a499147287a7565c860e198b", "Url": "https://api.github.com/repos/cmccabe/kafka", "Date": "2018-01-31T20:04:51Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.kafka.common.errors.ApiException(java.lang.String)=>org.apache.kafka.common.errors.RetriableException(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/6592/buggy-version/clients.src.main.java.org.apache.kafka.common.errors.InvalidFetchSessionEpochException.java", "BodyUseAPI": [], "Fixed commit": "b3a3a1e9a60c08f9a499147287a7565c860e198b", "Url": "https://api.github.com/repos/cmccabe/kafka", "Date": "2018-01-31T20:04:51Z"},
{"Line": "301=>311", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "edu.berkeley.riselab.rlqopt.Expression.getExpressionList()=>edu.berkeley.riselab.rlqopt.Expression.getExpressionList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/3568/buggy-version/src.main.java.edu.berkeley.riselab.rlqopt.relalg.SQL2RelAlg.java", "BodyUseAPI": [], "Fixed commit": "885f17c67a1f595f77b82ab562192576ff6ec3bc", "Url": "https://api.github.com/repos/sjyk/rlqopt", "Date": "2018-05-08T18:08:41Z"},
{"Line": "897=>896", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.equalsIgnoreCase(transferEncoding.getStringValue())=>Constants.ANN_CONFIG_ATTR_CHUNKING.equalsIgnoreCase(transferEncoding.getStringValue())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8310/buggy-version/modules.ballerina-http.src.main.java.org.ballerinalang.net.http.HttpUtil.java", "BodyUseAPI": [], "Fixed commit": "a9fa43166ff31e45fd8232e2fee033eb320c71f4", "Url": "https://api.github.com/repos/ballerina-platform/ballerina-lang", "Date": "2018-01-11T11:29:16Z"},
{"Line": "469=>481", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "mDatabaseReference.child(\"items\").child(currItemId).child(\"price\").setValue(float,com.google.firebase.database.DatabaseReference.CompletionListener)=>mDatabaseReference.child(\"items\").child(currItemId).child(\"price\").setValue(float,com.google.firebase.database.DatabaseReference.CompletionListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7859/buggy-version/SplitIt.app.src.main.java.project.cs495.splitit.ReceiptViewActivity.java", "BodyUseAPI": [], "Fixed commit": "4a61d30699ffab93aa27eda3ecb0b4afd0164925", "Url": "https://api.github.com/repos/bpsokol/split-it", "Date": "2018-04-25T18:55:17Z"},
{"Line": "478=>490", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "mDatabaseReference.child(\"receipts\").child(receiptId).child(\"price\").setValue(float,com.google.firebase.database.DatabaseReference.CompletionListener)=>mDatabaseReference.child(\"receipts\").child(receiptId).child(\"price\").setValue(float,com.google.firebase.database.DatabaseReference.CompletionListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7859/buggy-version/SplitIt.app.src.main.java.project.cs495.splitit.ReceiptViewActivity.java", "BodyUseAPI": [], "Fixed commit": "4a61d30699ffab93aa27eda3ecb0b4afd0164925", "Url": "https://api.github.com/repos/bpsokol/split-it", "Date": "2018-04-25T18:55:17Z"},
{"Line": "353=>365", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "mDatabaseReference.child(\"users\").child(currUID).child(\"bills\").child(currBillId).child(\"amount\").setValue(java.lang.String,com.google.firebase.database.DatabaseReference.CompletionListener)=>mDatabaseReference.child(\"users\").child(currUID).child(\"bills\").child(currBillId).child(\"amount\").setValue(java.lang.String,com.google.firebase.database.DatabaseReference.CompletionListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7859/buggy-version/SplitIt.app.src.main.java.project.cs495.splitit.ReceiptViewActivity.java", "BodyUseAPI": [], "Fixed commit": "4a61d30699ffab93aa27eda3ecb0b4afd0164925", "Url": "https://api.github.com/repos/bpsokol/split-it", "Date": "2018-04-25T18:55:17Z"},
{"Line": "323=>343", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.util.ArrayList<java.lang.String>.indexOf(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7859/buggy-version/SplitIt.app.src.main.java.project.cs495.splitit.ReceiptViewActivity.java", "BodyUseAPI": [], "Fixed commit": "4a61d30699ffab93aa27eda3ecb0b4afd0164925", "Url": "https://api.github.com/repos/bpsokol/split-it", "Date": "2018-04-25T18:55:17Z"},
{"Line": "496=>508", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "mDatabaseReference.child(\"receipts\").child(receiptId).child(\"price\").setValue(((receipt.getPrice()) + price),com.google.firebase.database.DatabaseReference.CompletionListener)=>mDatabaseReference.child(\"receipts\").child(receiptId).child(\"price\").setValue(((receipt.getPrice()) + price),com.google.firebase.database.DatabaseReference.CompletionListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7859/buggy-version/SplitIt.app.src.main.java.project.cs495.splitit.ReceiptViewActivity.java", "BodyUseAPI": [], "Fixed commit": "4a61d30699ffab93aa27eda3ecb0b4afd0164925", "Url": "https://api.github.com/repos/bpsokol/split-it", "Date": "2018-04-25T18:55:17Z"},
{"Line": "435=>447", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.firebase.database.Query.addListenerForSingleValueEvent(com.google.firebase.database.ValueEventListener)=>com.google.firebase.database.Query.addListenerForSingleValueEvent(com.google.firebase.database.ValueEventListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7859/buggy-version/SplitIt.app.src.main.java.project.cs495.splitit.ReceiptViewActivity.java", "BodyUseAPI": [], "Fixed commit": "4a61d30699ffab93aa27eda3ecb0b4afd0164925", "Url": "https://api.github.com/repos/bpsokol/split-it", "Date": "2018-04-25T18:55:17Z"},
{"Line": "375=>407", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "mDatabaseReference.child(\"users\").child(currentUserId).child(\"bills\").child(currBillId).child(\"amount\").setValue(java.lang.String,com.google.firebase.database.DatabaseReference.CompletionListener)=>mDatabaseReference.child(\"users\").child(currentUserId).child(\"bills\").child(currBillId).child(\"amount\").setValue(java.lang.String,com.google.firebase.database.DatabaseReference.CompletionListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7859/buggy-version/SplitIt.app.src.main.java.project.cs495.splitit.ReceiptViewActivity.java", "BodyUseAPI": [], "Fixed commit": "4a61d30699ffab93aa27eda3ecb0b4afd0164925", "Url": "https://api.github.com/repos/bpsokol/split-it", "Date": "2018-04-25T18:55:17Z"},
{"Line": "414=>426", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.firebase.database.Query.addListenerForSingleValueEvent(com.google.firebase.database.ValueEventListener)=>com.google.firebase.database.Query.addListenerForSingleValueEvent(com.google.firebase.database.ValueEventListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7859/buggy-version/SplitIt.app.src.main.java.project.cs495.splitit.ReceiptViewActivity.java", "BodyUseAPI": [], "Fixed commit": "4a61d30699ffab93aa27eda3ecb0b4afd0164925", "Url": "https://api.github.com/repos/bpsokol/split-it", "Date": "2018-04-25T18:55:17Z"},
{"Line": "610=>622", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "mDatabaseReference.child(\"receipts\").child(receiptId).child(\"price\").setValue(float,com.google.firebase.database.DatabaseReference.CompletionListener)=>mDatabaseReference.child(\"receipts\").child(receiptId).child(\"price\").setValue(float,com.google.firebase.database.DatabaseReference.CompletionListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7859/buggy-version/SplitIt.app.src.main.java.project.cs495.splitit.ReceiptViewActivity.java", "BodyUseAPI": [], "Fixed commit": "4a61d30699ffab93aa27eda3ecb0b4afd0164925", "Url": "https://api.github.com/repos/bpsokol/split-it", "Date": "2018-04-25T18:55:17Z"},
{"Line": "460=>472", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "mDatabaseReference.child(\"items\").child(currItemId).child(\"description\").setValue(java.lang.String,com.google.firebase.database.DatabaseReference.CompletionListener)=>mDatabaseReference.child(\"items\").child(currItemId).child(\"description\").setValue(java.lang.String,com.google.firebase.database.DatabaseReference.CompletionListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/7859/buggy-version/SplitIt.app.src.main.java.project.cs495.splitit.ReceiptViewActivity.java", "BodyUseAPI": [], "Fixed commit": "4a61d30699ffab93aa27eda3ecb0b4afd0164925", "Url": "https://api.github.com/repos/bpsokol/split-it", "Date": "2018-04-25T18:55:17Z"},
{"Line": "247=>245", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.dungit.gallery.presentation.databasehelper.updatedatadao.DBHelper.addListPhotoForReshowAlbum(java.util.List<com.example.dungit.gallery.presentation.entities.Album>)=>com.example.dungit.gallery.presentation.databasehelper.updatedatadao.DBHelper.addListPhotoForReshowAlbum(com.example.dungit.gallery.presentation.entities.Album)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/8880/buggy-version/app.src.main.java.com.example.dungit.gallery.presentation.databasehelper.updatedatadao.DBHelper.java", "BodyUseAPI": [], "Fixed commit": "68b6b326b7300bf724ed283b5e9fb920e8d20a18", "Url": "https://api.github.com/repos/DungPhan101097/Gallery_06", "Date": "2018-04-30T17:41:47Z"},
{"Line": "156=>156", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "be.nabu.utils.mime.api.Header.getValue()=>be.nabu.utils.mime.impl.MimeUtils.getFullHeaderValue(be.nabu.utils.mime.api.Header)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/1797/buggy-version/src.main.java.be.nabu.libs.http.client.HTTPExecutor.java", "BodyUseAPI": [], "Fixed commit": "1ee5837b6d95e0e213e8dded44804af88e459542", "Url": "https://api.github.com/repos/nabu-platform/http-client", "Date": "2018-09-08T18:32:26Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.toString()=>org.json.JSONObject.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4526/buggy-version/truemoney-core.src.main.java.com.tmc.frmk.core.tools.filter.LogELK.java", "BodyUseAPI": [], "Fixed commit": "a3e6639509782a7c9ef8d71a134bf8f26f1d6867", "Url": "https://api.github.com/repos/StevesRoger/autumn-framework", "Date": "2018-08-16T07:42:37Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.toString()=>org.json.JSONObject.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4526/buggy-version/truemoney-core.src.main.java.com.tmc.frmk.core.tools.filter.LogELK.java", "BodyUseAPI": [], "Fixed commit": "a3e6639509782a7c9ef8d71a134bf8f26f1d6867", "Url": "https://api.github.com/repos/StevesRoger/autumn-framework", "Date": "2018-08-16T07:42:37Z"},
{"Line": "32=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.StringBuilder.append(java.lang.String)=>java.lang.StringBuilder.append((\" Request \" + (new org.json.JSONObject(data).toString())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V146/4526/buggy-version/truemoney-core.src.main.java.com.tmc.frmk.core.tools.filter.LogELK.java", "BodyUseAPI": [], "Fixed commit": "a3e6639509782a7c9ef8d71a134bf8f26f1d6867", "Url": "https://api.github.com/repos/StevesRoger/autumn-framework", "Date": "2018-08-16T07:42:37Z"}]}
