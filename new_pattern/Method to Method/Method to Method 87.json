{"Method=>Method":[{"Line": "127=>133", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "de.reng.nn.Generation.nextPair()=>de.reng.nn.Generation.nextMatch()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/185/buggy-version/FourWins2.src.de.reng.fourwins.MainConnectFour.java", "BodyUseAPI": [], "Fixed commit": "4bbd49eecc07d30de85b5234f99f7868cbb92820", "Url": "https://api.github.com/repos/stefDi/connectfour", "Date": "2018-04-03T15:38:50Z"},
{"Line": "185=>185", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "this.rows.add(app.metatron.discovery.domain.dataprep.teddy.Row)=>java.util.List<app.metatron.discovery.domain.dataprep.teddy.Row>.add(app.metatron.discovery.domain.dataprep.teddy.Row)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6442/buggy-version/discovery-server.src.main.java.app.metatron.discovery.domain.dataprep.teddy.DfReplace.java", "BodyUseAPI": [], "Fixed commit": "59aefb635b3b356905a0ad729278dc9c355a40e6", "Url": "https://api.github.com/repos/metatron-app/metatron-discovery", "Date": "2018-10-30T09:07:03Z"},
{"Line": "139=>139", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "app.metatron.discovery.domain.dataprep.teddy.DfMove.getColName(int)=>app.metatron.discovery.domain.dataprep.teddy.DataFrame.getColName(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6442/buggy-version/discovery-server.src.main.java.app.metatron.discovery.domain.dataprep.teddy.DfMove.java", "BodyUseAPI": [], "Fixed commit": "59aefb635b3b356905a0ad729278dc9c355a40e6", "Url": "https://api.github.com/repos/metatron-app/metatron-discovery", "Date": "2018-10-30T09:07:03Z"},
{"Line": "115=>114", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sonar.plugins.java.api.tree.MemberSelectExpressionTree.expression()=>org.sonar.plugins.java.api.tree.MethodInvocationTree.methodSelect()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6679/buggy-version/java-checks.src.main.java.org.sonar.java.checks.security.InstanceShouldBeInitializedCorrectlyBase.java", "BodyUseAPI": [], "Fixed commit": "cf6ee2f0aa2cfd0b2af688fdd2f92640172222b6", "Url": "https://api.github.com/repos/SonarSource/sonar-java", "Date": "2018-05-23T09:49:43Z"},
{"Line": "124=>116", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.sonar.java.checks.security.InstanceShouldBeInitializedCorrectlyBase.setterArgumentHasExpectedValue(mit.arguments())=>org.sonar.java.checks.security.InstanceShouldBeInitializedCorrectlyBase.setterArgumentHasGoodValue(mit.arguments())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6679/buggy-version/java-checks.src.main.java.org.sonar.java.checks.security.InstanceShouldBeInitializedCorrectlyBase.java", "BodyUseAPI": [], "Fixed commit": "cf6ee2f0aa2cfd0b2af688fdd2f92640172222b6", "Url": "https://api.github.com/repos/SonarSource/sonar-java", "Date": "2018-05-23T09:49:43Z"},
{"Line": "129=>120", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.sonar.java.checks.security.InstanceShouldBeInitializedCorrectlyBase.setterArgumentHasExpectedValue(mit.arguments())=>org.sonar.java.checks.security.InstanceShouldBeInitializedCorrectlyBase.setterArgumentHasGoodValue(mit.arguments())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6679/buggy-version/java-checks.src.main.java.org.sonar.java.checks.security.InstanceShouldBeInitializedCorrectlyBase.java", "BodyUseAPI": [], "Fixed commit": "cf6ee2f0aa2cfd0b2af688fdd2f92640172222b6", "Url": "https://api.github.com/repos/SonarSource/sonar-java", "Date": "2018-05-23T09:49:43Z"},
{"Line": "117=>139", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.sonar.java.checks.security.InstanceShouldBeInitializedCorrectlyBase.setterArgumentHasExpectedValue(mit.arguments())=>org.sonar.java.checks.security.InstanceShouldBeInitializedCorrectlyBase.setterArgumentHasGoodValue(mit.arguments())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6679/buggy-version/java-checks.src.main.java.org.sonar.java.checks.security.InstanceShouldBeInitializedCorrectlyBase.java", "BodyUseAPI": [], "Fixed commit": "cf6ee2f0aa2cfd0b2af688fdd2f92640172222b6", "Url": "https://api.github.com/repos/SonarSource/sonar-java", "Date": "2018-05-23T09:49:43Z"},
{"Line": "115=>114", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sonar.plugins.java.api.tree.MemberSelectExpressionTree.expression()=>org.sonar.plugins.java.api.tree.MethodInvocationTree.methodSelect()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6679/buggy-version/java-checks.src.main.java.org.sonar.java.checks.security.InstanceShouldBeInitializedCorrectlyBase.java", "BodyUseAPI": [], "Fixed commit": "cf6ee2f0aa2cfd0b2af688fdd2f92640172222b6", "Url": "https://api.github.com/repos/SonarSource/sonar-java", "Date": "2018-05-23T09:49:43Z"},
{"Line": "27=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "board.getCell(i, j).setSymbol(tictactoe.backend.Engine)=>board.getCell(i, j).setValue(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/68/buggy-version/tictactoe.backend.Engine.java", "BodyUseAPI": [], "Fixed commit": "7360aef74c518e279cb95b5448c72c6736450fa3", "Url": "https://api.github.com/repos/BryanCruz/tic-tac-toe", "Date": "2018-07-30T00:31:56Z"},
{"Line": "21=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "tictactoe.backend.Engine.setValue(int)=>tictactoe.backend.Cell.setValue(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/68/buggy-version/tictactoe.backend.Engine.java", "BodyUseAPI": [], "Fixed commit": "7360aef74c518e279cb95b5448c72c6736450fa3", "Url": "https://api.github.com/repos/BryanCruz/tic-tac-toe", "Date": "2018-07-30T00:31:56Z"},
{"Line": "19=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "tictactoe.backend.Engine.setValue(int)=>tictactoe.backend.Cell.setValue(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/68/buggy-version/tictactoe.backend.Engine.java", "BodyUseAPI": [], "Fixed commit": "7360aef74c518e279cb95b5448c72c6736450fa3", "Url": "https://api.github.com/repos/BryanCruz/tic-tac-toe", "Date": "2018-07-30T00:31:56Z"},
{"Line": "142=>142", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<eu.city4age.dashboard.api.pojo.domain.TimeInterval>.get(int)=>eu.city4age.dashboard.api.pojo.domain.TimeInterval.getGeriatricFactorValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1900/buggy-version/backend.src.main.java.eu.city4age.dashboard.api.rest.CareRecipientService.java", "BodyUseAPI": [], "Fixed commit": "f9042cf0935117ba98b0ee2af30cf54a114f8fc2", "Url": "https://api.github.com/repos/City4AgeProject/individual-monitoring-C4A", "Date": "2018-02-14T12:43:14Z"},
{"Line": "142=>142", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "tis.get(0).getGeriatricFactorValue()=>eu.city4age.dashboard.api.pojo.domain.TimeInterval.getGeriatricFactorValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1900/buggy-version/backend.src.main.java.eu.city4age.dashboard.api.rest.CareRecipientService.java", "BodyUseAPI": [], "Fixed commit": "f9042cf0935117ba98b0ee2af30cf54a114f8fc2", "Url": "https://api.github.com/repos/City4AgeProject/individual-monitoring-C4A", "Date": "2018-02-14T12:43:14Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.firebase.auth.FirebaseAuth.getInstance()=>com.example.mcnutt.inclassdemo.FirebaseAuthGetter.getFirebaseAuth()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1206/buggy-version/app.src.main.java.com.example.mcnutt.inclassdemo.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "08995511396648c10a0c24292fefa77f8ec091e9", "Url": "https://api.github.com/repos/KyleMcNutt/InClassDemo", "Date": "2018-05-13T07:28:42Z"},
{"Line": "3519=>3523", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.view.View.setTranslationY((-(mIndicator.getCurrentPos())))=>android.view.View.offsetTopAndBottom(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2408/buggy-version/core.src.main.java.me.dkzwm.widget.srl.SmoothRefreshLayout.java", "BodyUseAPI": [], "Fixed commit": "e851aeb8a388223b0547bad60bf4f3ab16c22ff0", "Url": "https://api.github.com/repos/dkzwm/SmoothRefreshLayout", "Date": "2018-05-04T10:19:38Z"},
{"Line": "3519=>3523", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "me.dkzwm.widget.srl.indicator.IIndicator.getCurrentPos()=>me.dkzwm.widget.srl.SmoothRefreshLayout.getView(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2408/buggy-version/core.src.main.java.me.dkzwm.widget.srl.SmoothRefreshLayout.java", "BodyUseAPI": [], "Fixed commit": "e851aeb8a388223b0547bad60bf4f3ab16c22ff0", "Url": "https://api.github.com/repos/dkzwm/SmoothRefreshLayout", "Date": "2018-05-04T10:19:38Z"},
{"Line": "443=>447", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "me.dkzwm.widget.srl.HorizontalSmoothRefreshLayout.offsetLeftAndRight(int)=>getView(mPreviousState).offsetLeftAndRight(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2408/buggy-version/ext-horizontal.src.main.java.me.dkzwm.widget.srl.HorizontalSmoothRefreshLayout.java", "BodyUseAPI": [], "Fixed commit": "e851aeb8a388223b0547bad60bf4f3ab16c22ff0", "Url": "https://api.github.com/repos/dkzwm/SmoothRefreshLayout", "Date": "2018-05-04T10:19:38Z"},
{"Line": "443=>447", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "me.dkzwm.widget.srl.HorizontalSmoothRefreshLayout.offsetLeftAndRight(int)=>me.dkzwm.widget.srl.HorizontalSmoothRefreshLayout.getView(me.dkzwm.widget.srl.HorizontalSmoothRefreshLayout)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2408/buggy-version/ext-horizontal.src.main.java.me.dkzwm.widget.srl.HorizontalSmoothRefreshLayout.java", "BodyUseAPI": [], "Fixed commit": "e851aeb8a388223b0547bad60bf4f3ab16c22ff0", "Url": "https://api.github.com/repos/dkzwm/SmoothRefreshLayout", "Date": "2018-05-04T10:19:38Z"},
{"Line": "290=>290", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "se.lexicon.model.AirplaneImp1.land()=>se.lexicon.model.Airplane1.land()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6871/buggy-version/src.se.lexicon.ui.SystemUI.java", "BodyUseAPI": [], "Fixed commit": "013508798e6bdd878b3da430ebf0b85e41625c3b", "Url": "https://api.github.com/repos/Byte2020/FlightBase", "Date": "2018-03-23T13:04:38Z"},
{"Line": "70=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.home.annoyingtaskalarm.MainActivity.findViewById(R.id.txtViewTest)=>com.example.home.annoyingtaskalarm.MainActivity.findViewById(R.id.editText)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8580/buggy-version/app.src.main.java.com.example.home.annoyingtaskalarm.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "4705eb001aaa9938838587ccaadd9d6f931f8607", "Url": "https://api.github.com/repos/Nepomuk1999/AnnoyingTaskAlarm", "Date": "2018-04-09T09:15:08Z"},
{"Line": "14=>14", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "vagabondvalleyspace.com.mobilestage.Intent.getStringExtra(SubmitListener.EXTRA_MESSAGE)=>vagabondvalleyspace.com.mobilestage.Intent.getStringExtra(SubmitListener.MESSAGE_ADDR)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1666/buggy-version/MobileStage.app.src.main.java.vagabondvalleyspace.com.mobilestage.DataDisplay.java", "BodyUseAPI": [], "Fixed commit": "962bc00d256a62727d669470f8b2527657e68dff", "Url": "https://api.github.com/repos/thetaTauBoiz/hacksForHumanity", "Date": "2018-10-07T06:41:43Z"},
{"Line": "168=>168", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cm.aptoide.pt.home.apps.AppsAdapter.addApps(java.util.List<cm.aptoide.pt.home.apps.App>,int)=>java.util.List<cm.aptoide.pt.home.apps.App>.addAll(int,java.util.List<cm.aptoide.pt.home.apps.App>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7235/buggy-version/app.src.main.java.cm.aptoide.pt.home.apps.AppsAdapter.java", "BodyUseAPI": [], "Fixed commit": "95a0b4cdb82712814cd8d8c54261abf5c98acba0", "Url": "https://api.github.com/repos/Aptoide/aptoide-client-v8", "Date": "2018-04-19T13:50:56Z"},
{"Line": "33=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.searchButtonTopBarImage)=>android.view.View.findViewById(R.id.searchButtonTopBar)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5983/buggy-version/app.src.main.java.com.bimobject.themayproject.TopBarFragment.java", "BodyUseAPI": [], "Fixed commit": "a4f87a31eda3d2a37e926c6f7cbfde34983b5999", "Url": "https://api.github.com/repos/LaureaLindroos/TheMayProject", "Date": "2018-05-17T12:02:00Z"},
{"Line": "34=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.ImageView.setOnClickListener(android.widget.Button.OnClickListener)=>android.widget.RelativeLayout.setOnClickListener(android.widget.Button.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5983/buggy-version/app.src.main.java.com.bimobject.themayproject.TopBarFragment.java", "BodyUseAPI": [], "Fixed commit": "a4f87a31eda3d2a37e926c6f7cbfde34983b5999", "Url": "https://api.github.com/repos/LaureaLindroos/TheMayProject", "Date": "2018-05-17T12:02:00Z"},
{"Line": "34=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "system.ArActivity.startWithSetup(com.ensicaen.ecole.ludistreet.ModeActivity,arv.getSetup())=>com.ensicaen.ecole.ludistreet.ArActivity.startWithSetup(com.ensicaen.ecole.ludistreet.ModeActivity,arv.getSetup())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1229/buggy-version/app.src.main.java.com.ensicaen.ecole.ludistreet.ModeActivity.java", "BodyUseAPI": [], "Fixed commit": "e9fa8dea6d8c5e9ec84b9bb87ca85a268b2f08f6", "Url": "https://api.github.com/repos/dome6-2018/frontend", "Date": "2018-01-18T15:35:01Z"},
{"Line": "26=>24", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "system.ArActivity.startWithSetup(com.ensicaen.ecole.ludistreet.ModeActivity,arv.getSetup())=>com.ensicaen.ecole.ludistreet.ArActivity.startWithSetup(com.ensicaen.ecole.ludistreet.ModeActivity,arv.getSetup())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1229/buggy-version/app.src.main.java.com.ensicaen.ecole.ludistreet.ModeActivity.java", "BodyUseAPI": [], "Fixed commit": "e9fa8dea6d8c5e9ec84b9bb87ca85a268b2f08f6", "Url": "https://api.github.com/repos/dome6-2018/frontend", "Date": "2018-01-18T15:35:01Z"},
{"Line": "26=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.github.nija123098.evelyn.discordobjects.helpers.MessageMaker.append((\"Please check the settings in the config files. There was an error in the update process:\\n\" + (com.github.nija123098.evelyn.util.PastebinUtil.postToPastebin(\"Update Error\", com.github.nija123098.evelyn.util.ExecuteShellCommand.getOutput()))))=>com.github.nija123098.evelyn.discordobjects.helpers.MessageMaker.appendRaw((\"Please check the settings in the config files. There was an error in the update process:\\n\" + (com.github.nija123098.evelyn.util.PastebinUtil.postToPastebin(\"Update Error\", com.github.nija123098.evelyn.util.ExecuteShellCommand.getOutput()))))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9870/buggy-version/src.main.java.com.github.nija123098.evelyn.command.commands.UpdateBotCommand.java", "BodyUseAPI": [], "Fixed commit": "eac0907c8edc28d3ad03fe7b7c1599516873c9a3", "Url": "https://api.github.com/repos/nija123098/DiscordBot", "Date": "2018-03-13T02:22:32Z"},
{"Line": "25=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.github.nija123098.evelyn.util.ExecuteShellCommand.getOutput().contains(java.lang.String)=>com.github.nija123098.evelyn.discordobjects.helpers.MessageMaker.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9870/buggy-version/src.main.java.com.github.nija123098.evelyn.command.commands.UpdateBotCommand.java", "BodyUseAPI": [], "Fixed commit": "eac0907c8edc28d3ad03fe7b7c1599516873c9a3", "Url": "https://api.github.com/repos/nija123098/DiscordBot", "Date": "2018-03-13T02:22:32Z"},
{"Line": "302=>302", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "javafx.stage.DirectoryChooser.setInitialDirectory(org.cirdles.squid.gui.SquidUIController.squidPersistentState.getCustomExpressionsFile())=>org.cirdles.squid.gui.SquidUIController.squidPersistentState.getCustomExpressionsFile().getParentFile()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5477/buggy-version/squidApp.src.main.java.org.cirdles.squid.gui.utilities.fileUtilities.FileHandler.java", "BodyUseAPI": [], "Fixed commit": "68ede5a3096c3878382f1a16da2d63754b1a48a5", "Url": "https://api.github.com/repos/ryanbarrett1515/Squid", "Date": "2018-09-10T01:29:26Z"},
{"Line": "39=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Colour.setColour(irsChecker.getRemComValue(1),lejos.hardware.motor.EV3MediumRegulatedMotor)=>Colour.setColour(irsChecker.getRemComValue(1),Drive)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3319/buggy-version/RoboProject.src.Main.java", "BodyUseAPI": [], "Fixed commit": "bc1eca462aaf9ccfa989b0102d90731d9a04880d", "Url": "https://api.github.com/repos/LeeviPelkonen/LEGOEV3", "Date": "2018-04-26T07:12:04Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lejos.robotics.RegulatedMotor.rotate(int)=>Drive.rotateClaw(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3319/buggy-version/RoboProject.src.Colour.java", "BodyUseAPI": [], "Fixed commit": "bc1eca462aaf9ccfa989b0102d90731d9a04880d", "Url": "https://api.github.com/repos/LeeviPelkonen/LEGOEV3", "Date": "2018-04-26T07:12:04Z"},
{"Line": "98=>99", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Week4.Sorting.randomizedQuickSort(int[],int,int)=>Week4.Sorting.randomizedQuickSort3(int[],int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4481/buggy-version/Week4.Sorting.java", "BodyUseAPI": [], "Fixed commit": "faf8acb26091927af0145bcdcfa382f495ad8627", "Url": "https://api.github.com/repos/SYYoung/Algorithm_UCSD", "Date": "2018-03-18T13:31:09Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.madfooat.web.rest.BatchWebService.buildSuccessResponse(java.lang.String)=>com.madfooat.web.rest.BatchWebService.buildSuccessResponse(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3863/buggy-version/src.main.java.com.madfooat.web.rest.BatchWebService.java", "BodyUseAPI": [], "Fixed commit": "3ae6a83ab2169b2838cf12188535605e032aadab", "Url": "https://api.github.com/repos/AmalKhalil/cards-processors-api", "Date": "2018-06-03T17:13:39Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.epam.lab.homework_3.readers.PropertiesParser.getImplicitWaitTimeProperty()=>com.epam.lab.homework_4.readers.PropertiesParser.getImplicitWaitTimeProperty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/654/buggy-version/homework_4.src.com.epam.lab.homework_4.page_objects.PageObject.java", "BodyUseAPI": [], "Fixed commit": "e9f5e98d748a4b9a97b1aa4404480e9a54ce8a3a", "Url": "https://api.github.com/repos/Pastornak/epam_part_2", "Date": "2018-09-26T17:05:37Z"},
{"Line": "73=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.ws.rs.core.Response.status(Response.Status.OK).entity(com.qiaozhu.rest.RESTModel.Student)=>javax.ws.rs.core.Response.status(Response.Status.OK).entity(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7009/buggy-version/src.main.java.com.qiaozhu.rest.RESTExample.StudentServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "3b0f4b8d2d19b6b66d0c6d100de5ef271f6e2dda", "Url": "https://api.github.com/repos/qiaozhuxu/Cloud_Computing_Assignment", "Date": "2018-02-18T23:07:07Z"},
{"Line": "232=>238", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "view.findViewById(R.id.control).getViewTreeObserver()=>android.view.View.getViewTreeObserver()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/135/buggy-version/app.src.main.java.nl.tudelft.cs4160.trustchain_android.passport.ocr.camera.CameraFragment.java", "BodyUseAPI": [], "Fixed commit": "db7d64be8582975c45c22f483cd5b1e8fdd9136a", "Url": "https://api.github.com/repos/Tribler/trustchain-android", "Date": "2018-04-17T20:06:24Z"},
{"Line": "75=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "getActivity().runOnUiThread(java.lang.Runnable)=>android.view.ViewTreeObserver.addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/135/buggy-version/app.src.main.java.nl.tudelft.cs4160.trustchain_android.passport.ocr.camera.CameraFragment.java", "BodyUseAPI": [], "Fixed commit": "db7d64be8582975c45c22f483cd5b1e8fdd9136a", "Url": "https://api.github.com/repos/Tribler/trustchain-android", "Date": "2018-04-17T20:06:24Z"},
{"Line": "226=>232", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "view.findViewById(R.id.control).getViewTreeObserver()=>android.view.View.getViewTreeObserver()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/135/buggy-version/app.src.main.java.nl.tudelft.cs4160.trustchain_android.passport.ocr.camera.CameraFragment.java", "BodyUseAPI": [], "Fixed commit": "db7d64be8582975c45c22f483cd5b1e8fdd9136a", "Url": "https://api.github.com/repos/Tribler/trustchain-android", "Date": "2018-04-17T20:06:24Z"},
{"Line": "79=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.widget.Button.getHeight()=>android.widget.Button.getViewTreeObserver()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/135/buggy-version/app.src.main.java.nl.tudelft.cs4160.trustchain_android.passport.ocr.camera.CameraFragment.java", "BodyUseAPI": [], "Fixed commit": "db7d64be8582975c45c22f483cd5b1e8fdd9136a", "Url": "https://api.github.com/repos/Tribler/trustchain-android", "Date": "2018-04-17T20:06:24Z"},
{"Line": "79=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.getHeight()=>android.view.View.getHeight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/135/buggy-version/app.src.main.java.nl.tudelft.cs4160.trustchain_android.passport.ocr.camera.CameraFragment.java", "BodyUseAPI": [], "Fixed commit": "db7d64be8582975c45c22f483cd5b1e8fdd9136a", "Url": "https://api.github.com/repos/Tribler/trustchain-android", "Date": "2018-04-17T20:06:24Z"},
{"Line": "69=>69", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Toast.makeText(getReactApplicationContext(),java.lang.String,Toast.LENGTH_LONG)=>android.widget.Toast.makeText(getReactApplicationContext(),(\"NFC connected \" + objNtag),Toast.LENGTH_LONG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1226/buggy-version/android.src.main.java.io.davide.nfcwriteprotected.Module.java", "BodyUseAPI": [], "Fixed commit": "f6b301f3f3d7fb7ce6ac283c8ba80810cd639b69", "Url": "https://api.github.com/repos/dvdcsc/react-native-nfc-protected-write", "Date": "2018-10-08T14:19:08Z"},
{"Line": "101=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.serkanerip.pojo.WebPage.setId(int)=>com.serkanerip.pojo.WebPage.setLessonID(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2191/buggy-version/src.main.java.com.serkanerip.servlets.paths.EditPathServlet.java", "BodyUseAPI": [], "Fixed commit": "8f5746c226944ddbf9de10e7530016b55701452f", "Url": "https://api.github.com/repos/serkanerip/LearningPaths", "Date": "2018-10-26T15:10:18Z"},
{"Line": "31=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<java.util.Map.Entry<V, java.util.List<T>>>.forEach(java.util.function.Consumer<? super java.util.Map.Entry<V, java.util.List<T>>>)=>java.util.stream.Stream<java.util.Map.Entry<V, java.util.List<T>>>.forEach(java.util.function.Consumer<? super java.util.Map.Entry<V, java.util.List<T>>>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3340/buggy-version/src.main.java.cn.pandazoo.page.PageHelper.java", "BodyUseAPI": [], "Fixed commit": "f2377e856551067c94b0f20dd12bb205e93b1e52", "Url": "https://api.github.com/repos/PandaZoo/Common", "Date": "2018-03-07T10:19:58Z"},
{"Line": "32=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cn.pandazoo.page.PageHelper.addToTree(java.util.List<T>,java.util.function.Function<T, V>,java.util.Map.Entry<V, java.util.List<T>>,java.util.function.Function<T, java.util.List<T>>,java.util.function.BiConsumer<T, java.util.List<T>>)=>cn.pandazoo.page.PageHelper.addToTree(java.util.List<T>,java.util.Map.Entry<V, java.util.List<T>>,java.util.function.Function<T, V>,java.util.function.Function<T, java.util.List<T>>,java.util.function.BiConsumer<T, java.util.List<T>>,java.util.List<V>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3340/buggy-version/src.main.java.cn.pandazoo.page.PageHelper.java", "BodyUseAPI": [], "Fixed commit": "f2377e856551067c94b0f20dd12bb205e93b1e52", "Url": "https://api.github.com/repos/PandaZoo/Common", "Date": "2018-03-07T10:19:58Z"},
{"Line": "40=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<T>.isEmpty()=>java.util.Map.Entry<V, java.util.List<T>>.getKey()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3340/buggy-version/src.main.java.cn.pandazoo.page.PageHelper.java", "BodyUseAPI": [], "Fixed commit": "f2377e856551067c94b0f20dd12bb205e93b1e52", "Url": "https://api.github.com/repos/PandaZoo/Common", "Date": "2018-03-07T10:19:58Z"},
{"Line": "40=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<T>.isEmpty()=>java.util.Map.Entry<V, java.util.List<T>>.getKey()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3340/buggy-version/src.main.java.cn.pandazoo.page.PageHelper.java", "BodyUseAPI": [], "Fixed commit": "f2377e856551067c94b0f20dd12bb205e93b1e52", "Url": "https://api.github.com/repos/PandaZoo/Common", "Date": "2018-03-07T10:19:58Z"},
{"Line": "49=>65", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cn.pandazoo.page.PageHelper.addToTree(java.util.List<T>,java.util.function.Function<T, V>,java.util.Map.Entry<V, java.util.List<T>>,java.util.function.Function<T, java.util.List<T>>,java.util.function.BiConsumer<T, java.util.List<T>>)=>cn.pandazoo.page.PageHelper.addToTree(java.util.List<T>,java.util.Map.Entry<V, java.util.List<T>>,java.util.function.Function<T, V>,java.util.function.Function<T, java.util.List<T>>,java.util.function.BiConsumer<T, java.util.List<T>>,java.util.List<V>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3340/buggy-version/src.main.java.cn.pandazoo.page.PageHelper.java", "BodyUseAPI": [], "Fixed commit": "f2377e856551067c94b0f20dd12bb205e93b1e52", "Url": "https://api.github.com/repos/PandaZoo/Common", "Date": "2018-03-07T10:19:58Z"},
{"Line": "38=>41", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Vector<java.lang.Long>.elementAt(int)=>java.util.Vector<java.lang.Long>.lastElement()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9262/buggy-version/src.com.chunkserver.ChunkServer.java", "BodyUseAPI": [], "Fixed commit": "dad5aa2c9c7a0b54dc85b94c724b08f5b70b779d", "Url": "https://api.github.com/repos/ndpillai/TinyFS", "Date": "2018-03-20T23:08:32Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.jotoc.moviesdb.DetailActivity.findViewById(R.id.movietitle)=>com.jotoc.moviesdb.DetailActivity.findViewById(R.id.title)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7006/buggy-version/app.src.main.java.com.jotoc.moviesdb.DetailActivity.java", "BodyUseAPI": [], "Fixed commit": "aebe2f6b472440d7ce87b8fd0471c3e53906a4e6", "Url": "https://api.github.com/repos/Jotochelidze/MoviesDB", "Date": "2018-06-05T07:40:12Z"},
{"Line": "161=>161", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.android.musicmix.data.ArtistDbHelper.getWritableDatabase()=>com.example.android.musicmix.data.TrackDbHelper.getWritableDatabase()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2886/buggy-version/app.src.main.java.com.example.android.musicmix.data.TrackProvider.java", "BodyUseAPI": [], "Fixed commit": "d4c01d4e56f1d97bc42303390825ec0780d6a63e", "Url": "https://api.github.com/repos/sleephackers/Musicmix", "Date": "2018-07-03T06:49:29Z"},
{"Line": "161=>161", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.android.musicmix.data.ArtistDbHelper.getWritableDatabase()=>com.example.android.musicmix.data.TrackDbHelper.getWritableDatabase()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2886/buggy-version/app.src.main.java.com.example.android.musicmix.data.TrackProvider.java", "BodyUseAPI": [], "Fixed commit": "d4c01d4e56f1d97bc42303390825ec0780d6a63e", "Url": "https://api.github.com/repos/sleephackers/Musicmix", "Date": "2018-07-03T06:49:29Z"},
{"Line": "79=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.firstinspires.ftc.teamcode.AutoForward.setWheelMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER)=>org.firstinspires.ftc.teamcode.AutoForward.setWheelMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3467/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.AutoForward.java", "BodyUseAPI": [], "Fixed commit": "96d40f3cafd94ba8be4b2146c149ca9936425dc9", "Url": "https://api.github.com/repos/hudsons1033/ftc_app_lmhs_dark_matter", "Date": "2017-10-29T21:08:21Z"},
{"Line": "56=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.firstinspires.ftc.teamcode.AutoForward.setWheelMode(DcMotor.RunMode.RUN_TO_POSITION)=>org.firstinspires.ftc.teamcode.AutoForward.addData(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3467/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.AutoForward.java", "BodyUseAPI": [], "Fixed commit": "96d40f3cafd94ba8be4b2146c149ca9936425dc9", "Url": "https://api.github.com/repos/hudsons1033/ftc_app_lmhs_dark_matter", "Date": "2017-10-29T21:08:21Z"},
{"Line": "76=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.qualcomm.robotcore.hardware.DcMotor.setDirection(DcMotor.Direction.FORWARD)=>com.qualcomm.robotcore.hardware.DcMotor.setDirection(DcMotor.Direction.REVERSE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3467/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.AutoForward.java", "BodyUseAPI": [], "Fixed commit": "96d40f3cafd94ba8be4b2146c149ca9936425dc9", "Url": "https://api.github.com/repos/hudsons1033/ftc_app_lmhs_dark_matter", "Date": "2017-10-29T21:08:21Z"},
{"Line": "77=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.qualcomm.robotcore.hardware.DcMotor.setDirection(DcMotor.Direction.REVERSE)=>com.qualcomm.robotcore.hardware.DcMotor.setDirection(DcMotor.Direction.FORWARD)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3467/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.AutoForward.java", "BodyUseAPI": [], "Fixed commit": "96d40f3cafd94ba8be4b2146c149ca9936425dc9", "Url": "https://api.github.com/repos/hudsons1033/ftc_app_lmhs_dark_matter", "Date": "2017-10-29T21:08:21Z"},
{"Line": "122=>126", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.emc.mongoose.storage.driver.fs.FsConstants.FS.getPath(java.lang.String)=>com.emc.mongoose.storage.driver.fs.FsConstants.FS.getPath((!(path.startsWith(\"/\")) ? path : path.substring(1)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9/buggy-version/src.main.java.com.emc.mongoose.storage.driver.fs.FileStorageDriver.java", "BodyUseAPI": [], "Fixed commit": "2fd91f28c7a16e9c85949ac598eb8b10ab4f7159", "Url": "https://api.github.com/repos/emc-mongoose/mongoose-storage-driver-fs", "Date": "2018-08-06T09:49:38Z"},
{"Line": "36=>36", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.LinkedHashMap<java.lang.Long, com.max.dm.DataModel<T>>.put(entity.getDataModelId(),com.max.dm.DataModel<T>)=>java.util.LinkedHashMap<java.lang.Long, com.max.dm.DataModel<T>>.put(t.getDataModelId(),com.max.dm.DataModel<T>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7398/buggy-version/src.com.max.dao.DaoFileImpl.java", "BodyUseAPI": [], "Fixed commit": "6f3ab7f2c6a3ec416ff095406759d463a931bbe7", "Url": "https://api.github.com/repos/maxfeldman99/CacheUnitProject", "Date": "2018-09-08T21:37:37Z"},
{"Line": "302=>302", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.support.v4.app.Fragment.onDestroy()=>android.support.v4.app.Fragment.onDestroyView()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8425/buggy-version/app.src.main.java.com.xiongxh.baking_app.recipesteps.StepPageFragment.java", "BodyUseAPI": [], "Fixed commit": "d90089c0038aca15c7d473619b31bdb7efd45f5d", "Url": "https://api.github.com/repos/xionger/Baking-App", "Date": "2018-02-15T21:51:20Z"},
{"Line": "63=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ruinscraft.powder.models.Powder.getPowderElements()=>java.util.Set<com.ruinscraft.powder.models.PowderTask>.add(com.ruinscraft.powder.models.PowderTask)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9219/buggy-version/src.main.java.com.ruinscraft.powder.PowdersCreationTask.java", "BodyUseAPI": [], "Fixed commit": "da0f72ba18cb1c574f869430630f7c2fc290684a", "Url": "https://api.github.com/repos/Ruinscraft/Powder", "Date": "2018-05-27T02:06:06Z"},
{"Line": "63=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "powder.getPowderElements().clear()=>java.util.Set<com.ruinscraft.powder.models.PowderTask>.add(com.ruinscraft.powder.models.PowderTask)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9219/buggy-version/src.main.java.com.ruinscraft.powder.PowdersCreationTask.java", "BodyUseAPI": [], "Fixed commit": "da0f72ba18cb1c574f869430630f7c2fc290684a", "Url": "https://api.github.com/repos/Ruinscraft/Powder", "Date": "2018-05-27T02:06:06Z"},
{"Line": "82=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.contains(java.lang.String)=>java.util.ArrayList<Coords>.contains(Coords)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7018/buggy-version/King.java", "BodyUseAPI": [], "Fixed commit": "52ee945d4d5df7227a9b64d40d449d9dff2456c5", "Url": "https://api.github.com/repos/wzhou2/MKS21XFinalProject", "Date": "2018-01-11T19:30:15Z"},
{"Line": "21=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<bots.Pirate>.addAll(java.util.List)=>java.util.ArrayList<bots.Asteroid>.clear()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9233/buggy-version/Skillz.src.bots.MyBot.java", "BodyUseAPI": [], "Fixed commit": "26bbde8552886f7a1e3bcebf67524e97fcdf3580", "Url": "https://api.github.com/repos/TheArchNemesis/Skillz2018", "Date": "2018-02-06T09:35:34Z"},
{"Line": "21=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<bots.Pirate>.addAll(java.util.List)=>java.util.ArrayList<bots.Asteroid>.clear()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9233/buggy-version/Skillz.src.bots.MyBot.java", "BodyUseAPI": [], "Fixed commit": "26bbde8552886f7a1e3bcebf67524e97fcdf3580", "Url": "https://api.github.com/repos/TheArchNemesis/Skillz2018", "Date": "2018-02-06T09:35:34Z"},
{"Line": "145=>145", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.xyzreader.ui.ArticleDetailActivity.4.getParent()=>android.view.View.getContext()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5302/buggy-version/XYZReader.src.main.java.com.example.xyzreader.ui.ArticleDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "ea6ab24e7792119a29546762f322b086ca3ef7f9", "Url": "https://api.github.com/repos/onVal/Udacity-MakeItMaterial", "Date": "2018-05-18T10:35:45Z"},
{"Line": "145=>145", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ShareCompat.IntentBuilder.from(getParent())=>ShareCompat.IntentBuilder.from(((android.app.Activity) (view.getContext())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5302/buggy-version/XYZReader.src.main.java.com.example.xyzreader.ui.ArticleDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "ea6ab24e7792119a29546762f322b086ca3ef7f9", "Url": "https://api.github.com/repos/onVal/Udacity-MakeItMaterial", "Date": "2018-05-18T10:35:45Z"},
{"Line": "47=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.lichkin.framework.utils.LKBeanUtils.copyProperties(boolean,SI,E)=>com.lichkin.framework.utils.LKBeanUtils.copyProperties(boolean,boolean,SI,E,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3897/buggy-version/lichkin-spring-boot-starter-service-api.src.main.java.com.lichkin.springframework.services.LKApiBusUpdateService.java", "BodyUseAPI": [], "Fixed commit": "871a66ecfb072bd0baebf4e70eeaa88a253797b6", "Url": "https://api.github.com/repos/LichKinContributor/lichkin-spring-boot", "Date": "2018-07-18T07:09:14Z"},
{"Line": "50=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.lichkin.framework.utils.LKBeanUtils.copyProperties(E,E,java.lang.String)=>com.lichkin.framework.utils.LKBeanUtils.copyProperties(boolean,boolean,E,E,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3897/buggy-version/lichkin-spring-boot-starter-service-api.src.main.java.com.lichkin.springframework.services.LKApiBusInsertService.java", "BodyUseAPI": [], "Fixed commit": "871a66ecfb072bd0baebf4e70eeaa88a253797b6", "Url": "https://api.github.com/repos/LichKinContributor/lichkin-spring-boot", "Date": "2018-07-18T07:09:14Z"},
{"Line": "52=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.inspur.da.dsw.manage.service.IMonitorService.removeContainer(java.lang.String)=>com.inspur.da.dsw.manage.service.IMonitorService.stopContainer(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7695/buggy-version/src.main.java.com.inspur.da.dsw.manage.controller.MointorController.java", "BodyUseAPI": [], "Fixed commit": "8a97c15efe4a3deb9db7bdae14f3f1c2dcaac526", "Url": "https://api.github.com/repos/xuande/idsw", "Date": "2018-03-07T14:28:29Z"},
{"Line": "68=>66", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.inspur.da.dsw.utils.DockerUtil.removeContainer(java.lang.String)=>com.inspur.da.dsw.utils.DockerUtil.stopContainer(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7695/buggy-version/src.main.java.com.inspur.da.dsw.manage.service.impl.MonitorServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "8a97c15efe4a3deb9db7bdae14f3f1c2dcaac526", "Url": "https://api.github.com/repos/xuande/idsw", "Date": "2018-03-07T14:28:29Z"},
{"Line": "92=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.RemoteViews.addView(R.id.linearlayout_recipe_element,android.widget.RemoteViews)=>android.widget.RemoteViews.addView(R.id.linearlayout_ingredients,android.widget.RemoteViews)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9783/buggy-version/app.src.main.java.com.josemgu91.bakingapp.android.widget.RemoteViewsService.java", "BodyUseAPI": [], "Fixed commit": "e7afac8ba809c653e70fc41f4141bde5bfd68dad", "Url": "https://api.github.com/repos/josemgu91/BakingApp", "Date": "2018-02-23T22:14:54Z"},
{"Line": "72=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "builder.append(getTitle()).append(\" Title: \").append(seedu.address.model.todo.Content)=>java.lang.StringBuilder.append(seedu.address.model.todo.Title)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9686/buggy-version/src.main.java.seedu.address.model.todo.Todo.java", "BodyUseAPI": [], "Fixed commit": "e370c58bb629cfd2d3122c3c8dec74b3889a0248", "Url": "https://api.github.com/repos/junweiljw/JW-AB3", "Date": "2018-10-22T20:24:37Z"},
{"Line": "72=>72", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.StringBuilder.append(java.lang.String)=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9686/buggy-version/src.main.java.seedu.address.model.todo.Todo.java", "BodyUseAPI": [], "Fixed commit": "e370c58bb629cfd2d3122c3c8dec74b3889a0248", "Url": "https://api.github.com/repos/junweiljw/JW-AB3", "Date": "2018-10-22T20:24:37Z"},
{"Line": "72=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "builder.append(getTitle()).append(\" Title: \").append(getContent()).append(java.lang.String)=>builder.append(\" Title: \").append(getTitle()).append(\" Content: \").append(seedu.address.model.todo.Content)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9686/buggy-version/src.main.java.seedu.address.model.todo.Todo.java", "BodyUseAPI": [], "Fixed commit": "e370c58bb629cfd2d3122c3c8dec74b3889a0248", "Url": "https://api.github.com/repos/junweiljw/JW-AB3", "Date": "2018-10-22T20:24:37Z"},
{"Line": "60=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.stargraph.core.impl.lucene.IndexSearcher.search(holder.getQuery(),int,Sort.RELEVANCE)=>net.stargraph.core.impl.lucene.IndexSearcher.search(holder.getQuery(),int,Sort.RELEVANCE,boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6820/buggy-version/stargraph-core.src.main.java.net.stargraph.core.impl.lucene.LuceneScroller.java", "BodyUseAPI": [], "Fixed commit": "e54c26c64d68b526e3d97b926cf0510e396f94a8", "Url": "https://api.github.com/repos/Mischn/Stargraph", "Date": "2018-07-17T13:28:50Z"},
{"Line": "125=>125", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "perfomance.instances.processors.Repo.compareFiles(dataProvider.resolve(pathToPrev, fileName),dataProvider.resolve(pathToCurrent, fileName))=>perfomance.instances.processors.Repo.isSameFiles(dataProvider.resolve(pathToPrev, fileName),dataProvider.resolve(pathToCurrent, fileName))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1657/buggy-version/src.perfomance.instances.processors.Repo.java", "BodyUseAPI": [], "Fixed commit": "4c0fe21afa5386d88d0a8d523292d3cf04270216", "Url": "https://api.github.com/repos/a-shchupakov/JavaVersionControl", "Date": "2018-06-03T09:55:06Z"},
{"Line": "139=>140", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.sakaiproject.gradebookng.business.util.FormatHelper.formatGradeForDisplay(java.lang.String)=>org.sakaiproject.gradebookng.business.util.FormatHelper.formatGradeForDisplay(java.lang.String,java.util.Locale)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7721/buggy-version/gradebookng.tool.src.java.org.sakaiproject.gradebookng.business.util.FormatHelper.java", "BodyUseAPI": [], "Fixed commit": "e86bbac2bdc79a795bbf082ab317ede83a0f9578", "Url": "https://api.github.com/repos/Western-OWL/sakai", "Date": "2018-02-22T18:46:26Z"},
{"Line": "359=>359", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Button.setVisibility(View.INVISIBLE)=>android.widget.Button.setVisibility(View.GONE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2210/buggy-version/app.src.main.java.com.example.auto1.myrr2.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "fdf1c2a44d317685555ca38959d8bcc7856e4ab6", "Url": "https://api.github.com/repos/auto94/myRR", "Date": "2018-09-22T22:06:41Z"},
{"Line": "69=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.eol.globi.service.Dataset.getFormat()=>org.eol.globi.service.Dataset.getDOI()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6277/buggy-version/eol-globi-cache.src.main.java.org.eol.globi.service.DatasetProxy.java", "BodyUseAPI": [], "Fixed commit": "4c03d71ca2ad4ca24e42af7584999e8d6db9ed81", "Url": "https://api.github.com/repos/jhpoelen/eol-globi-data", "Date": "2018-09-30T03:46:51Z"},
{"Line": "69=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.eol.globi.service.DatasetUtil.getValueOrDefault(org.codehaus.jackson.JsonNode,java.lang.String,datasetProxied.getFormat())=>org.eol.globi.service.DatasetUtil.getValueOrDefault(org.codehaus.jackson.JsonNode,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6277/buggy-version/eol-globi-cache.src.main.java.org.eol.globi.service.DatasetProxy.java", "BodyUseAPI": [], "Fixed commit": "4c03d71ca2ad4ca24e42af7584999e8d6db9ed81", "Url": "https://api.github.com/repos/jhpoelen/eol-globi-data", "Date": "2018-09-30T03:46:51Z"},
{"Line": "354=>351", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "sample.excelFiles.OutputSheet.primaryMixAdjust()=>sample.excelFiles.OutputSheet.primerMixAdjust()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5512/buggy-version/src.main.java.sample.excelFiles.OutputSheet.java", "BodyUseAPI": [], "Fixed commit": "5e29bdeddb942eef9d630c535de18cbebfb9802b", "Url": "https://api.github.com/repos/whitedann/vCheck", "Date": "2018-10-16T20:53:30Z"},
{"Line": "47=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Queue<java.time.LocalDateTime>.addAll(java.util.Queue<java.time.LocalDateTime>)=>java.util.PriorityQueue<java.time.LocalDateTime>.addAll(java.util.Queue<java.time.LocalDateTime>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1244/buggy-version/src.main.java.com.abuse.rule.Aggregator.java", "BodyUseAPI": [], "Fixed commit": "cb01727f65935dac5dc536ec134d02a418cebdfc", "Url": "https://api.github.com/repos/soursop/abuse-detector", "Date": "2018-05-28T01:31:29Z"},
{"Line": "48=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Map<com.abuse.rule.Terminal, java.util.Queue<java.time.LocalDateTime>>.put(com.abuse.rule.Terminal,java.util.Queue<java.time.LocalDateTime>)=>java.util.Map<com.abuse.rule.Terminal, java.util.Queue<java.time.LocalDateTime>>.put(com.abuse.rule.Terminal,java.util.LinkedList<java.time.LocalDateTime>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1244/buggy-version/src.main.java.com.abuse.rule.Aggregator.java", "BodyUseAPI": [], "Fixed commit": "cb01727f65935dac5dc536ec134d02a418cebdfc", "Url": "https://api.github.com/repos/soursop/abuse-detector", "Date": "2018-05-28T01:31:29Z"},
{"Line": "108=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Iterator<java.time.LocalDateTime>.remove()=>java.util.Queue<java.time.LocalDateTime>.remove()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1244/buggy-version/src.main.java.com.abuse.rule.AbstractTerminal.java", "BodyUseAPI": [], "Fixed commit": "cb01727f65935dac5dc536ec134d02a418cebdfc", "Url": "https://api.github.com/repos/soursop/abuse-detector", "Date": "2018-05-28T01:31:29Z"},
{"Line": "107=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Iterator<java.time.LocalDateTime>.next()=>java.util.Queue<java.time.LocalDateTime>.peek()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1244/buggy-version/src.main.java.com.abuse.rule.AbstractTerminal.java", "BodyUseAPI": [], "Fixed commit": "cb01727f65935dac5dc536ec134d02a418cebdfc", "Url": "https://api.github.com/repos/soursop/abuse-detector", "Date": "2018-05-28T01:31:29Z"},
{"Line": "269=>271", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "dataLayer.DataServiceException.getMessage()=>java.util.ArrayList<dataLayer.Event>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9565/buggy-version/src.logicLayer.LogicLayer.java", "BodyUseAPI": [], "Fixed commit": "52027efac8dee97bcad5598d47761f2f13973484", "Url": "https://api.github.com/repos/Karlosinio/Calendar", "Date": "2018-06-05T08:48:45Z"},
{"Line": "261=>262", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "dataLayer.DataService.getAllEvents()=>logicLayer.LogicLayer.getAllEvents()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9565/buggy-version/src.logicLayer.LogicLayer.java", "BodyUseAPI": [], "Fixed commit": "52027efac8dee97bcad5598d47761f2f13973484", "Url": "https://api.github.com/repos/Karlosinio/Calendar", "Date": "2018-06-05T08:48:45Z"},
{"Line": "264=>265", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "dataLayer.DataService.deleteEvent(dataLayer.Event)=>java.util.ArrayList<java.lang.Integer>.add(this.getAllEvents().indexOf(event))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9565/buggy-version/src.logicLayer.LogicLayer.java", "BodyUseAPI": [], "Fixed commit": "52027efac8dee97bcad5598d47761f2f13973484", "Url": "https://api.github.com/repos/Karlosinio/Calendar", "Date": "2018-06-05T08:48:45Z"},
{"Line": "35=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.ClassLoader.getResource(java.lang.String)=>org.springframework.core.io.ResourceLoader.getResource(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4375/buggy-version/backend.src.main.java.com.nanocorp.initializer.DataReader.java", "BodyUseAPI": [], "Fixed commit": "bc51e2fbede631b681ddfea9b79818f2e39fecfb", "Url": "https://api.github.com/repos/jarstorm/nanocorp", "Date": "2018-07-25T06:56:31Z"},
{"Line": "36=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.File,java.lang.Class)=>com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.InputStream,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4375/buggy-version/backend.src.main.java.com.nanocorp.initializer.DataReader.java", "BodyUseAPI": [], "Fixed commit": "bc51e2fbede631b681ddfea9b79818f2e39fecfb", "Url": "https://api.github.com/repos/jarstorm/nanocorp", "Date": "2018-07-25T06:56:31Z"},
{"Line": "35=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class.getClassLoader()=>org.springframework.core.io.ResourceLoader.getResource(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4375/buggy-version/backend.src.main.java.com.nanocorp.initializer.DataReader.java", "BodyUseAPI": [], "Fixed commit": "bc51e2fbede631b681ddfea9b79818f2e39fecfb", "Url": "https://api.github.com/repos/jarstorm/nanocorp", "Date": "2018-07-25T06:56:31Z"},
{"Line": "35=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.ClassLoader.getResource(java.lang.String)=>org.springframework.core.io.ResourceLoader.getResource(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4375/buggy-version/backend.src.main.java.com.nanocorp.initializer.DataReader.java", "BodyUseAPI": [], "Fixed commit": "bc51e2fbede631b681ddfea9b79818f2e39fecfb", "Url": "https://api.github.com/repos/jarstorm/nanocorp", "Date": "2018-07-25T06:56:31Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "httpSecurity.csrf().disable().cors().and().authorizeRequests().antMatchers(\"/campaign/**\").authenticated()=>httpSecurity.csrf().disable().cors().and().authorizeRequests().antMatchers(\"/image**\").permitAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4375/buggy-version/backend.src.main.java.com.nanocorp.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "bc51e2fbede631b681ddfea9b79818f2e39fecfb", "Url": "https://api.github.com/repos/jarstorm/nanocorp", "Date": "2018-07-25T06:56:31Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "httpSecurity.csrf().disable().cors().and().authorizeRequests().antMatchers(\"/campaign/**\").authenticated().antMatchers(ConfigConstants.LOGIN_URL).permitAll().and()=>httpSecurity.csrf().disable().cors().and().authorizeRequests().antMatchers(\"/image**\").permitAll().antMatchers(\"/campaign/**\").authenticated().antMatchers(ConfigConstants.LOGIN_URL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4375/buggy-version/backend.src.main.java.com.nanocorp.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "bc51e2fbede631b681ddfea9b79818f2e39fecfb", "Url": "https://api.github.com/repos/jarstorm/nanocorp", "Date": "2018-07-25T06:56:31Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "httpSecurity.csrf().disable().cors().and().authorizeRequests().antMatchers(\"/campaign/**\").authenticated().antMatchers(ConfigConstants.LOGIN_URL)=>httpSecurity.csrf().disable().cors().and().authorizeRequests().antMatchers(\"/image**\").permitAll().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4375/buggy-version/backend.src.main.java.com.nanocorp.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "bc51e2fbede631b681ddfea9b79818f2e39fecfb", "Url": "https://api.github.com/repos/jarstorm/nanocorp", "Date": "2018-07-25T06:56:31Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "httpSecurity.csrf().disable().cors().and().authorizeRequests().antMatchers(\"/campaign/**\").authenticated().antMatchers(ConfigConstants.LOGIN_URL).permitAll()=>httpSecurity.csrf().disable().cors().and().authorizeRequests().antMatchers(\"/image**\").permitAll().antMatchers(\"/campaign/**\").authenticated()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4375/buggy-version/backend.src.main.java.com.nanocorp.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "bc51e2fbede631b681ddfea9b79818f2e39fecfb", "Url": "https://api.github.com/repos/jarstorm/nanocorp", "Date": "2018-07-25T06:56:31Z"},
{"Line": "171=>172", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Arrays.toString(com.mcgill.DnsClient)=>java.util.Arrays.toString(byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6440/buggy-version/src.com.mcgill.DnsClient.java", "BodyUseAPI": [], "Fixed commit": "9310638f60fc2710f82bb5e4d658f852e039e8d6", "Url": "https://api.github.com/repos/zhouyijie/telecom_lab", "Date": "2018-10-15T23:45:46Z"},
{"Line": "171=>172", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6440/buggy-version/src.com.mcgill.DnsClient.java", "BodyUseAPI": [], "Fixed commit": "9310638f60fc2710f82bb5e4d658f852e039e8d6", "Url": "https://api.github.com/repos/zhouyijie/telecom_lab", "Date": "2018-10-15T23:45:46Z"},
{"Line": "173=>174", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.mcgill.DNS_PacketHeaders.readHeader(com.mcgill.DnsClient)=>com.mcgill.DNS_PacketHeaders.readHeader(byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6440/buggy-version/src.com.mcgill.DnsClient.java", "BodyUseAPI": [], "Fixed commit": "9310638f60fc2710f82bb5e4d658f852e039e8d6", "Url": "https://api.github.com/repos/zhouyijie/telecom_lab", "Date": "2018-10-15T23:45:46Z"},
{"Line": "30=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.server.services.CustomerRepository.findById(long)=>com.server.services.CustomerRepository.findById(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9867/buggy-version/CustomerService.src.main.java.com.server.services.CustomerController.java", "BodyUseAPI": [], "Fixed commit": "25731e868f4f1bb09e329d61f4fb1f85744ce723", "Url": "https://api.github.com/repos/Mohamed-elgarhy/TrackingVehiles-CustomerService", "Date": "2018-09-11T12:04:38Z"},
{"Line": "110=>112", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "emptyIfNull(divorceSession.getReasonForDivorceBehaviourDetails()).stream().findFirst().orElse(<nulltype>)=>divorceSession.getReasonForDivorceBehaviourDetails().stream().collect(java.util.stream.Collector<java.lang.CharSequence, ?, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2457/buggy-version/src.main.java.uk.gov.hmcts.reform.divorce.transformservice.mapping.DivorceCaseToCCDMapper.java", "BodyUseAPI": [], "Fixed commit": "241a359f8e52b68d46268ba0d027258f947e71fd", "Url": "https://api.github.com/repos/hmcts/div-case-progression-service", "Date": "2018-06-28T14:06:06Z"},
{"Line": "110=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "emptyIfNull(divorceSession.getReasonForDivorceBehaviourDetails()).stream().findFirst().orElse(<nulltype>)=>java.util.stream.Collectors.joining(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2457/buggy-version/src.main.java.uk.gov.hmcts.reform.divorce.transformservice.mapping.DivorceCaseToCCDMapper.java", "BodyUseAPI": [], "Fixed commit": "241a359f8e52b68d46268ba0d027258f947e71fd", "Url": "https://api.github.com/repos/hmcts/div-case-progression-service", "Date": "2018-06-28T14:06:06Z"},
{"Line": "110=>112", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "uk.gov.hmcts.reform.divorce.transformservice.mapping.DivorceCaseToCCDMapper.emptyIfNull(divorceSession.getReasonForDivorceBehaviourDetails())=>uk.gov.hmcts.reform.divorce.transformservice.domain.model.divorceapplicationdata.DivorceSession.getReasonForDivorceBehaviourDetails()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2457/buggy-version/src.main.java.uk.gov.hmcts.reform.divorce.transformservice.mapping.DivorceCaseToCCDMapper.java", "BodyUseAPI": [], "Fixed commit": "241a359f8e52b68d46268ba0d027258f947e71fd", "Url": "https://api.github.com/repos/hmcts/div-case-progression-service", "Date": "2018-06-28T14:06:06Z"},
{"Line": "48=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.PrintStream.println(((constant.EditorConstants.EDIT_MENU_ITEM_LABELS[4]) + \" clicked\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5350/buggy-version/src.main.java.listener.EditButtonsActionsListener.java", "BodyUseAPI": [], "Fixed commit": "4b746d661cf911186a3254107f419361880eecda", "Url": "https://api.github.com/repos/SER515-IllegalSkillsException/TextEditor", "Date": "2018-10-29T22:09:56Z"},
{"Line": "45=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.io.PrintStream.println(((constant.EditorConstants.EDIT_MENU_ITEM_LABELS[3]) + \" clicked.\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5350/buggy-version/src.main.java.listener.EditButtonsActionsListener.java", "BodyUseAPI": [], "Fixed commit": "4b746d661cf911186a3254107f419361880eecda", "Url": "https://api.github.com/repos/SER515-IllegalSkillsException/TextEditor", "Date": "2018-10-29T22:09:56Z"},
{"Line": "70=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "sugar.free.sightparser.pipeline.ByteBuf.putUInt32LE(int)=>sugar.free.sightparser.pipeline.ByteBuf.putUInt32LE(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2728/buggy-version/sightparser.src.main.java.sugar.free.sightparser.authlayer.AuthLayerMessage.java", "BodyUseAPI": [], "Fixed commit": "7baf0cc3a7d2968e4e2e6238ef1aede6ea35ad35", "Url": "https://api.github.com/repos/TebbeUbben/SightRemote", "Date": "2018-02-11T00:10:30Z"},
{"Line": "22=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "sugar.free.sightparser.pipeline.ByteBuf.putUInt32LE(int)=>sugar.free.sightparser.pipeline.ByteBuf.putUInt32LE(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2728/buggy-version/sightparser.src.main.java.sugar.free.sightparser.authlayer.CRCAuthLayerMessage.java", "BodyUseAPI": [], "Fixed commit": "7baf0cc3a7d2968e4e2e6238ef1aede6ea35ad35", "Url": "https://api.github.com/repos/TebbeUbben/SightRemote", "Date": "2018-02-11T00:10:30Z"},
{"Line": "417=>417", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.bcel.generic.InstructionList.append(org.apache.bcel.generic.INVOKEVIRTUAL)=>org.apache.bcel.generic.InstructionList.append(org.apache.bcel.generic.INVOKESTATIC)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3732/buggy-version/microbat_instrumentator.src.main.microbat.instrumentation.trace.TraceInstrumenter.java", "BodyUseAPI": [], "Fixed commit": "cf259c987d769e1cb6464b73b0674cacb7918eb4", "Url": "https://api.github.com/repos/llmhyy/microbat", "Date": "2018-02-06T02:41:17Z"},
{"Line": "336=>335", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "my.netty.rpc.core.ReflectionUtils.getProvider()=>my.netty.rpc.core.ReflectionUtils.getClassArrayType(java.lang.Class<?>[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3570/buggy-version/src.main.java.my.netty.rpc.core.ReflectionUtils.java", "BodyUseAPI": [], "Fixed commit": "5fce478fdc3af148a33974f742c6645e270e1bbe", "Url": "https://api.github.com/repos/kidsbmilk/MyNettyRPC", "Date": "2018-08-30T15:36:37Z"},
{"Line": "328=>329", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "my.netty.rpc.core.ReflectionUtils.getClassType(java.lang.Class<?>[])=>my.netty.rpc.core.ReflectionUtils.getClassArrayType(java.lang.Class<?>[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3570/buggy-version/src.main.java.my.netty.rpc.core.ReflectionUtils.java", "BodyUseAPI": [], "Fixed commit": "5fce478fdc3af148a33974f742c6645e270e1bbe", "Url": "https://api.github.com/repos/kidsbmilk/MyNettyRPC", "Date": "2018-08-30T15:36:37Z"},
{"Line": "107=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.equals(boolean)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1775/buggy-version/src.main.java.creativei.service.impl.InquiryServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "aac45ec612076eb436ac667a82fd84baebe1f34d", "Url": "https://api.github.com/repos/aayushKhandpur/creativei_inquiry", "Date": "2018-02-26T04:14:54Z"},
{"Line": "203=>204", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "lombok.core.handlers.InclusionExclusionUtils.handleIncludeExcludeMarking(java.lang.Class,java.lang.String,java.lang.Class,lombok.core.LombokNode<A, L, N>,lombok.core.AnnotationValues<lombok.ToString>,lombok.core.LombokNode<A, L, N>)=>lombok.core.handlers.InclusionExclusionUtils.handleIncludeExcludeMarking(java.lang.Class,java.lang.String,java.lang.Class,lombok.core.LombokNode<A, L, N>,lombok.core.AnnotationValues<lombok.ToString>,lombok.core.LombokNode<A, L, N>,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1395/buggy-version/src.core.lombok.core.handlers.InclusionExclusionUtils.java", "BodyUseAPI": [], "Fixed commit": "f241ef8c309b90faacabe66431b9deaebfd7087a", "Url": "https://api.github.com/repos/rzwitserloot/lombok", "Date": "2018-06-18T21:46:42Z"},
{"Line": "225=>226", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "lombok.core.handlers.InclusionExclusionUtils.handleIncludeExcludeMarking(java.lang.Class,java.lang.String,java.lang.Class,lombok.core.LombokNode<A, L, N>,lombok.core.AnnotationValues<lombok.EqualsAndHashCode>,lombok.core.LombokNode<A, L, N>)=>lombok.core.handlers.InclusionExclusionUtils.handleIncludeExcludeMarking(java.lang.Class,java.lang.String,java.lang.Class,lombok.core.LombokNode<A, L, N>,lombok.core.AnnotationValues<lombok.EqualsAndHashCode>,lombok.core.LombokNode<A, L, N>,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1395/buggy-version/src.core.lombok.core.handlers.InclusionExclusionUtils.java", "BodyUseAPI": [], "Fixed commit": "f241ef8c309b90faacabe66431b9deaebfd7087a", "Url": "https://api.github.com/repos/rzwitserloot/lombok", "Date": "2018-06-18T21:46:42Z"},
{"Line": "162=>167", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "AlertDialog.Builder.show()=>android.support.v7.app.AlertDialog.show()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/33/buggy-version/app.src.main.java.com.example.ss18.msp.lmu.msp_projectkickoff_ss188.Activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "f039afe01c6f44a979ae249fd5f1a4864f2c79e3", "Url": "https://api.github.com/repos/FelipGC/LMU-MSP-GetTogether", "Date": "2018-05-29T12:21:57Z"},
{"Line": "104=>109", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.ss18.msp.lmu.msp_projectkickoff_ss188.Activities.MainActivity.loadPreferences()=>android.support.v7.app.AlertDialog.dismiss()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/33/buggy-version/app.src.main.java.com.example.ss18.msp.lmu.msp_projectkickoff_ss188.Activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "f039afe01c6f44a979ae249fd5f1a4864f2c79e3", "Url": "https://api.github.com/repos/FelipGC/LMU-MSP-GetTogether", "Date": "2018-05-29T12:21:57Z"},
{"Line": "105=>106", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "typeParameters.get(i).createBlockBuilder(null, 0).appendNull().build()=>com.facebook.presto.orc.reader.StructStreamReader.getNullBlock(typeParameters.get(i),blocks[0].getPositionCount())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/831/buggy-version/presto-orc.src.main.java.com.facebook.presto.orc.reader.StructStreamReader.java", "BodyUseAPI": [], "Fixed commit": "b0364e9162d69d695b9e2c6f900e9dda8d656e3c", "Url": "https://api.github.com/repos/github/presto", "Date": "2018-07-05T22:11:44Z"},
{"Line": "105=>106", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "typeParameters.get(i).createBlockBuilder(null, 0).appendNull()=>blocks[0].getPositionCount()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/831/buggy-version/presto-orc.src.main.java.com.facebook.presto.orc.reader.StructStreamReader.java", "BodyUseAPI": [], "Fixed commit": "b0364e9162d69d695b9e2c6f900e9dda8d656e3c", "Url": "https://api.github.com/repos/github/presto", "Date": "2018-07-05T22:11:44Z"},
{"Line": "119=>120", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "typeParameters.get(i).createBlockBuilder(null, 0).appendNull().build()=>com.facebook.presto.orc.reader.StructStreamReader.getNullBlock(typeParameters.get(i),blocks[0].getPositionCount())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/831/buggy-version/presto-orc.src.main.java.com.facebook.presto.orc.reader.StructStreamReader.java", "BodyUseAPI": [], "Fixed commit": "b0364e9162d69d695b9e2c6f900e9dda8d656e3c", "Url": "https://api.github.com/repos/github/presto", "Date": "2018-07-05T22:11:44Z"},
{"Line": "119=>120", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "typeParameters.get(i).createBlockBuilder(null, 0).appendNull()=>blocks[0].getPositionCount()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/831/buggy-version/presto-orc.src.main.java.com.facebook.presto.orc.reader.StructStreamReader.java", "BodyUseAPI": [], "Fixed commit": "b0364e9162d69d695b9e2c6f900e9dda8d656e3c", "Url": "https://api.github.com/repos/github/presto", "Date": "2018-07-05T22:11:44Z"},
{"Line": "38=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.concurrent.ConcurrentHashMap<java.lang.Class<?>, org.protoframework.dao.ISqlConverter<?>>.contains(java.lang.Class<T>)=>java.util.concurrent.ConcurrentHashMap<java.lang.Class<?>, org.protoframework.dao.ISqlConverter<?>>.containsKey(java.lang.Class<T>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1232/buggy-version/protoframework-data.src.main.java.org.protoframework.dao.SqlConverterRegistry.java", "BodyUseAPI": [], "Fixed commit": "4a3fdd4696edffc50835ab7779041ca74a7f63f3", "Url": "https://api.github.com/repos/YuanWenqing/protobuf-framework", "Date": "2018-07-22T16:24:21Z"},
{"Line": "47=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.megacrit.cardcrawl.powers.AbstractPower.onAfterUseCard(com.megacrit.cardcrawl.cards.AbstractCard,com.megacrit.cardcrawl.actions.utility.UseCardAction)=>com.megacrit.cardcrawl.powers.AbstractPower.onUseCard(com.megacrit.cardcrawl.cards.AbstractCard,com.megacrit.cardcrawl.actions.utility.UseCardAction)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5104/buggy-version/src.main.java.blackbeard.powers.WeaponPower.java", "BodyUseAPI": [], "Fixed commit": "a541dbb9169f971685f23c8f91b5cc10f8cda689", "Url": "https://api.github.com/repos/JohnnyBazooka89/StSModTheBlackbeard", "Date": "2018-10-14T07:07:40Z"},
{"Line": "113=>113", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "lsfusion.server.data.type.AbstractType<T>.parseString(dbfRecord.getString(fieldName, charset))=>lsfusion.server.data.type.AbstractType<T>.parseNullableString(dbfRecord.getString(fieldName, charset))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9200/buggy-version/server.src.main.java.lsfusion.server.data.type.AbstractType.java", "BodyUseAPI": [], "Fixed commit": "909db88a3d00d29e2a05df8352decba9b0a0929d", "Url": "https://api.github.com/repos/lsfusion/platform", "Date": "2018-10-02T11:32:54Z"},
{"Line": "136=>135", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.support.design.widget.Snackbar.make(android.support.v7.widget.Toolbar,R.string.recipe_removed_to_widget,Snackbar.LENGTH_LONG)=>android.support.design.widget.Snackbar.make(android.support.design.widget.FloatingActionButton,R.string.recipe_removed_to_widget,Snackbar.LENGTH_LONG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2381/buggy-version/app.src.main.java.com.ji.bakingapp.IntroductionActivity.java", "BodyUseAPI": [], "Fixed commit": "64665a68a918dc553c428f2d4442f92d2410691d", "Url": "https://api.github.com/repos/JonathanImperato/BakingApp", "Date": "2018-03-12T12:31:38Z"},
{"Line": "94=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ji.bakingapp.IntroductionActivity.findViewById(R.id.toolbar)=>android.util.Log.d(java.lang.String,(\"SIZE \" + (ingredientsRecyclerview.getAdapter().getItemCount())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2381/buggy-version/app.src.main.java.com.ji.bakingapp.IntroductionActivity.java", "BodyUseAPI": [], "Fixed commit": "64665a68a918dc553c428f2d4442f92d2410691d", "Url": "https://api.github.com/repos/JonathanImperato/BakingApp", "Date": "2018-03-12T12:31:38Z"},
{"Line": "132=>131", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.support.design.widget.Snackbar.make(android.support.v7.widget.Toolbar,R.string.recipe_added_to_widget,Snackbar.LENGTH_LONG)=>android.support.design.widget.Snackbar.make(android.support.design.widget.FloatingActionButton,R.string.recipe_added_to_widget,Snackbar.LENGTH_LONG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2381/buggy-version/app.src.main.java.com.ji.bakingapp.IntroductionActivity.java", "BodyUseAPI": [], "Fixed commit": "64665a68a918dc553c428f2d4442f92d2410691d", "Url": "https://api.github.com/repos/JonathanImperato/BakingApp", "Date": "2018-03-12T12:31:38Z"},
{"Line": "97=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.support.v7.widget.RecyclerView.setNestedScrollingEnabled(boolean)=>android.support.v7.widget.RecyclerView.getAdapter()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2381/buggy-version/app.src.main.java.com.ji.bakingapp.IntroductionActivity.java", "BodyUseAPI": [], "Fixed commit": "64665a68a918dc553c428f2d4442f92d2410691d", "Url": "https://api.github.com/repos/JonathanImperato/BakingApp", "Date": "2018-03-12T12:31:38Z"},
{"Line": "326=>326", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "NotificationCompat.Builder.setSmallIcon(R.drawable.app_icon)=>NotificationCompat.Builder.setSmallIcon(R.drawable.appicon)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6643/buggy-version/app.src.main.java.com.ua.ganoncannon.balance.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "489149866513ff1dd42cf86e1a52b6f540f6ab65", "Url": "https://api.github.com/repos/WellMet/Balance", "Date": "2018-04-30T18:07:59Z"},
{"Line": "95=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.error(java.lang.String)=>org.apache.logging.log4j.Logger.warn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5540/buggy-version/src.main.java.roboy.newDialog.states.StateFactory.java", "BodyUseAPI": [], "Fixed commit": "4f24b40b26092bf4b90f348fdfc3679c8c22ec5c", "Url": "https://api.github.com/repos/Roboy/roboy_dialog", "Date": "2018-02-19T21:17:40Z"},
{"Line": "50=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.error(java.lang.String)=>org.apache.logging.log4j.Logger.warn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5540/buggy-version/src.main.java.roboy.newDialog.states.StateFactory.java", "BodyUseAPI": [], "Fixed commit": "4f24b40b26092bf4b90f348fdfc3679c8c22ec5c", "Url": "https://api.github.com/repos/Roboy/roboy_dialog", "Date": "2018-02-19T21:17:40Z"},
{"Line": "67=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.error(java.lang.String)=>org.apache.logging.log4j.Logger.warn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5540/buggy-version/src.main.java.roboy.newDialog.states.StateFactory.java", "BodyUseAPI": [], "Fixed commit": "4f24b40b26092bf4b90f348fdfc3679c8c22ec5c", "Url": "https://api.github.com/repos/Roboy/roboy_dialog", "Date": "2018-02-19T21:17:40Z"},
{"Line": "78=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.error(java.lang.String)=>org.apache.logging.log4j.Logger.warn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5540/buggy-version/src.main.java.roboy.newDialog.states.StateFactory.java", "BodyUseAPI": [], "Fixed commit": "4f24b40b26092bf4b90f348fdfc3679c8c22ec5c", "Url": "https://api.github.com/repos/Roboy/roboy_dialog", "Date": "2018-02-19T21:17:40Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.error(java.lang.String)=>org.apache.logging.log4j.Logger.warn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5540/buggy-version/src.main.java.roboy.newDialog.states.StateFactory.java", "BodyUseAPI": [], "Fixed commit": "4f24b40b26092bf4b90f348fdfc3679c8c22ec5c", "Url": "https://api.github.com/repos/Roboy/roboy_dialog", "Date": "2018-02-19T21:17:40Z"},
{"Line": "76=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.error(java.lang.String)=>org.apache.logging.log4j.Logger.warn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5540/buggy-version/src.main.java.roboy.newDialog.states.StateFactory.java", "BodyUseAPI": [], "Fixed commit": "4f24b40b26092bf4b90f348fdfc3679c8c22ec5c", "Url": "https://api.github.com/repos/Roboy/roboy_dialog", "Date": "2018-02-19T21:17:40Z"},
{"Line": "88=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.error(java.lang.String)=>org.apache.logging.log4j.Logger.warn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5540/buggy-version/src.main.java.roboy.newDialog.states.StateFactory.java", "BodyUseAPI": [], "Fixed commit": "4f24b40b26092bf4b90f348fdfc3679c8c22ec5c", "Url": "https://api.github.com/repos/Roboy/roboy_dialog", "Date": "2018-02-19T21:17:40Z"},
{"Line": "87=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.error(java.lang.String)=>org.apache.logging.log4j.Logger.warn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5540/buggy-version/src.main.java.roboy.newDialog.states.StateFactory.java", "BodyUseAPI": [], "Fixed commit": "4f24b40b26092bf4b90f348fdfc3679c8c22ec5c", "Url": "https://api.github.com/repos/Roboy/roboy_dialog", "Date": "2018-02-19T21:17:40Z"},
{"Line": "138=>137", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.support.v4.app.Fragment.onDestroy()=>android.support.v4.app.Fragment.onPause()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7642/buggy-version/app.src.main.java.com.kamron.pogoiv.activities.MainFragment.java", "BodyUseAPI": [], "Fixed commit": "4775a94d9c1465adb80fe68f4a06034b9f57edd2", "Url": "https://api.github.com/repos/farkam135/GoIV", "Date": "2018-04-30T08:36:33Z"},
{"Line": "88=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "viewHolder.listView.setVisibility(View.VISIBLE)=>viewHolder.no_courses.setVisibility(View.GONE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/604/buggy-version/OpenEdXMobile.src.main.java.org.edx.mobile.view.dialog.NativeFindCoursesFragment.java", "BodyUseAPI": [], "Fixed commit": "4fe16840ffe4310f67e31e4faf4a85a4b5ea4101", "Url": "https://api.github.com/repos/proversity-org/edx-app-android", "Date": "2018-03-22T14:20:28Z"},
{"Line": "60=>62", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ryhmasahkopostiRestClient.getPreview(data).getEntity()=>response.getEntity().getContent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1692/buggy-version/viestintapalvelu-service.src.main.java.fi.vm.sade.viestintapalvelu.externalinterface.component.EmailComponent.java", "BodyUseAPI": [], "Fixed commit": "38a7b06fc085c3a342ec82eb76b1daca4b5f3a23", "Url": "https://api.github.com/repos/Opetushallitus/viestintapalvelu", "Date": "2018-09-04T08:51:27Z"},
{"Line": "77=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ntg.user.sa2aia.network.API.getClient()=>com.ntg.user.sa2aia.network.ApiClient.getClient()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4308/buggy-version/app.src.main.java.com.ntg.user.sa2aia.network.PaymentFragment.java", "BodyUseAPI": [], "Fixed commit": "aa1c007d7a0ce42551ee986b57b7fce24ca40365", "Url": "https://api.github.com/repos/Mobile-Poc/seqaya-android", "Date": "2018-03-28T19:50:17Z"},
{"Line": "63=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "K.hashCode()=>K.compareTo(K)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8725/buggy-version/Lab3_FIBA.FIBA.src.model.NodeABB_FIBA.java", "BodyUseAPI": [], "Fixed commit": "f052e66cf4b593e7e080491b4f33c05afd7cd3f4", "Url": "https://api.github.com/repos/JuanDVera/AED_Labs", "Date": "2018-10-19T17:19:49Z"},
{"Line": "57=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "K.hashCode()=>K.compareTo(K)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8725/buggy-version/Lab3_FIBA.FIBA.src.model.NodeABB_FIBA.java", "BodyUseAPI": [], "Fixed commit": "f052e66cf4b593e7e080491b4f33c05afd7cd3f4", "Url": "https://api.github.com/repos/JuanDVera/AED_Labs", "Date": "2018-10-19T17:19:49Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "context.getProgramFile().getPackageInfo(Constants.MONGODB_PACKAGE_PATH)=>context.getProgramFile().getPackageInfo(Constants.BUILTIN_PACKAGE_PATH)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3848/buggy-version/component.src.main.java.org.ballerinalang.mongodb.MongoDBDataSourceUtils.java", "BodyUseAPI": [], "Fixed commit": "4fc07802e639f288017e938e1610c7407f185f7c", "Url": "https://api.github.com/repos/wso2-ballerina/module-mongodb", "Date": "2018-04-27T15:35:07Z"},
{"Line": "113=>130", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7854/buggy-version/QuitSmokeMobile.app.src.main.java.com.example.william.quitsmokeappclient.RegisterActivity.java", "BodyUseAPI": [], "Fixed commit": "abd07395b5fb83080f4e296df7dbd3522c833403", "Url": "https://api.github.com/repos/WilliamWangShuang/QuitSmoke", "Date": "2018-09-28T08:01:57Z"},
{"Line": "42=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(int)=>java.sql.Connection.commit()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6665/buggy-version/src.com.cpsc304.JDBC.LoginDBC.java", "BodyUseAPI": [], "Fixed commit": "1614edf8e5f7a07817eeaf1066fffda9fa8a0b30", "Url": "https://api.github.com/repos/DeepHarvey/CPSC-304-Project", "Date": "2018-06-17T07:48:09Z"},
{"Line": "91=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ir.sahab.nimroo.controller.HttpRequest.setMethod(HttpRequest.HTTP_REQUEST.GET)=>ir.sahab.nimroo.connection.HttpRequest.setMethod(HttpRequest.HTTP_REQUEST.GET)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4987/buggy-version/src.main.java.ir.sahab.nimroo.controller.Controller.java", "BodyUseAPI": [], "Fixed commit": "180793102ebb9b93ba599b9fb81ebe9c9fbfc6cc", "Url": "https://api.github.com/repos/alisafari1998/Nimroo", "Date": "2018-08-02T23:46:32Z"},
{"Line": "94=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<ir.sahab.nimroo.controller.Pair<java.lang.String, java.lang.String>>.add(ir.sahab.nimroo.controller.Pair)=>java.util.List<javafx.util.Pair<java.lang.String, java.lang.String>>.add(javafx.util.Pair)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4987/buggy-version/src.main.java.ir.sahab.nimroo.controller.Controller.java", "BodyUseAPI": [], "Fixed commit": "180793102ebb9b93ba599b9fb81ebe9c9fbfc6cc", "Url": "https://api.github.com/repos/alisafari1998/Nimroo", "Date": "2018-08-02T23:46:32Z"},
{"Line": "95=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ir.sahab.nimroo.controller.HttpRequest.setHeaders(java.util.List<ir.sahab.nimroo.controller.Pair<java.lang.String, java.lang.String>>)=>ir.sahab.nimroo.connection.HttpRequest.setHeaders(java.util.List<javafx.util.Pair<java.lang.String, java.lang.String>>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4987/buggy-version/src.main.java.ir.sahab.nimroo.controller.Controller.java", "BodyUseAPI": [], "Fixed commit": "180793102ebb9b93ba599b9fb81ebe9c9fbfc6cc", "Url": "https://api.github.com/repos/alisafari1998/Nimroo", "Date": "2018-08-02T23:46:32Z"},
{"Line": "34=>36", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ir.sahab.nimroo.controller.HttpRequest.init()=>ir.sahab.nimroo.connection.HttpRequest.init()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4987/buggy-version/src.main.java.ir.sahab.nimroo.controller.Controller.java", "BodyUseAPI": [], "Fixed commit": "180793102ebb9b93ba599b9fb81ebe9c9fbfc6cc", "Url": "https://api.github.com/repos/alisafari1998/Nimroo", "Date": "2018-08-02T23:46:32Z"},
{"Line": "34=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ir.sahab.nimroo.controller.HttpRequest.init()=>ir.sahab.nimroo.connection.HttpRequest.init()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4987/buggy-version/src.main.java.ir.sahab.nimroo.controller.Controller.java", "BodyUseAPI": [], "Fixed commit": "180793102ebb9b93ba599b9fb81ebe9c9fbfc6cc", "Url": "https://api.github.com/repos/alisafari1998/Nimroo", "Date": "2018-08-02T23:46:32Z"},
{"Line": "97=>99", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ir.sahab.nimroo.controller.HttpRequest.send()=>ir.sahab.nimroo.connection.HttpRequest.send()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4987/buggy-version/src.main.java.ir.sahab.nimroo.controller.Controller.java", "BodyUseAPI": [], "Fixed commit": "180793102ebb9b93ba599b9fb81ebe9c9fbfc6cc", "Url": "https://api.github.com/repos/alisafari1998/Nimroo", "Date": "2018-08-02T23:46:32Z"},
{"Line": "93=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<ir.sahab.nimroo.controller.Pair<java.lang.String, java.lang.String>>.add(ir.sahab.nimroo.controller.Pair)=>java.util.List<javafx.util.Pair<java.lang.String, java.lang.String>>.add(javafx.util.Pair)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4987/buggy-version/src.main.java.ir.sahab.nimroo.controller.Controller.java", "BodyUseAPI": [], "Fixed commit": "180793102ebb9b93ba599b9fb81ebe9c9fbfc6cc", "Url": "https://api.github.com/repos/alisafari1998/Nimroo", "Date": "2018-08-02T23:46:32Z"},
{"Line": "457=>466", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.LinkedList<mFile>.getLast()=>mFile.getFirst()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5386/buggy-version/DFS.java", "BodyUseAPI": [], "Fixed commit": "7614b3330c34cb32a39c7dfdea6b7cda47f13ec8", "Url": "https://api.github.com/repos/tanmark927/327-DFS", "Date": "2018-04-10T17:59:47Z"},
{"Line": "16=>16", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.basejava.webapp.storage.AbstractStorage.getNotExistedSearchKey(resume.getUuid())=>com.basejava.webapp.storage.AbstractStorage.getIfNotExist(resume.getUuid())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3409/buggy-version/src.com.basejava.webapp.storage.AbstractStorage.java", "BodyUseAPI": [], "Fixed commit": "8449f1fe9840f80a0f4554670f941eb494dc5893", "Url": "https://api.github.com/repos/AlexeyPavlov2/basejava", "Date": "2018-07-03T18:30:11Z"},
{"Line": "22=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.basejava.webapp.storage.AbstractStorage.getExistedSearchKey(java.lang.String)=>com.basejava.webapp.storage.AbstractStorage.getIfExist(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3409/buggy-version/src.com.basejava.webapp.storage.AbstractStorage.java", "BodyUseAPI": [], "Fixed commit": "8449f1fe9840f80a0f4554670f941eb494dc5893", "Url": "https://api.github.com/repos/AlexeyPavlov2/basejava", "Date": "2018-07-03T18:30:11Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.basejava.webapp.storage.AbstractStorage.getExistedSearchKey(java.lang.String)=>com.basejava.webapp.storage.AbstractStorage.getIfExist(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3409/buggy-version/src.com.basejava.webapp.storage.AbstractStorage.java", "BodyUseAPI": [], "Fixed commit": "8449f1fe9840f80a0f4554670f941eb494dc5893", "Url": "https://api.github.com/repos/AlexeyPavlov2/basejava", "Date": "2018-07-03T18:30:11Z"},
{"Line": "28=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.basejava.webapp.storage.AbstractStorage.getExistedSearchKey(resume.getUuid())=>com.basejava.webapp.storage.AbstractStorage.getIfExist(resume.getUuid())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3409/buggy-version/src.com.basejava.webapp.storage.AbstractStorage.java", "BodyUseAPI": [], "Fixed commit": "8449f1fe9840f80a0f4554670f941eb494dc5893", "Url": "https://api.github.com/repos/AlexeyPavlov2/basejava", "Date": "2018-07-03T18:30:11Z"},
{"Line": "427=>427", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "appointmentListObject.getPatientHeader().getAppointmentStatusId().equals(com.rescribe.doctor.adapters.my_appointments.CONFIRM)=>appointmentListObject.getPatientHeader().getAppointmentStatusId().equals(APPOINTMENT_STATUS.BOOKED)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2228/buggy-version/app.src.main.java.com.rescribe.doctor.adapters.my_appointments.AppointmentAdapter.java", "BodyUseAPI": [], "Fixed commit": "ca08848ad106f298e4bf1a90b369b5f8fc903717", "Url": "https://api.github.com/repos/sandeepbahalkar123/rescribeDoctor_repo", "Date": "2018-04-16T05:27:17Z"},
{"Line": "502=>502", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "appointmentListObject.getPatientHeader().getAppointmentStatusId().equals(com.rescribe.doctor.adapters.my_appointments.NO_SHOW)=>appointmentListObject.getPatientHeader().getAppointmentStatusId().equals(APPOINTMENT_STATUS.NO_SHOW)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2228/buggy-version/app.src.main.java.com.rescribe.doctor.adapters.my_appointments.AppointmentAdapter.java", "BodyUseAPI": [], "Fixed commit": "ca08848ad106f298e4bf1a90b369b5f8fc903717", "Url": "https://api.github.com/repos/sandeepbahalkar123/rescribeDoctor_repo", "Date": "2018-04-16T05:27:17Z"},
{"Line": "223=>223", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "patientList.getAppointmentStatusId().equals(com.rescribe.doctor.adapters.my_appointments.BOOKED)=>patientList.getAppointmentStatusId().equals(APPOINTMENT_STATUS.BOOKED)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2228/buggy-version/app.src.main.java.com.rescribe.doctor.adapters.my_appointments.AppointmentAdapter.java", "BodyUseAPI": [], "Fixed commit": "ca08848ad106f298e4bf1a90b369b5f8fc903717", "Url": "https://api.github.com/repos/sandeepbahalkar123/rescribeDoctor_repo", "Date": "2018-04-16T05:27:17Z"},
{"Line": "226=>226", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "patientList.getAppointmentStatusId().equals(com.rescribe.doctor.adapters.my_appointments.COMPLETED)=>patientList.getAppointmentStatusId().equals(APPOINTMENT_STATUS.COMPLETED)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2228/buggy-version/app.src.main.java.com.rescribe.doctor.adapters.my_appointments.AppointmentAdapter.java", "BodyUseAPI": [], "Fixed commit": "ca08848ad106f298e4bf1a90b369b5f8fc903717", "Url": "https://api.github.com/repos/sandeepbahalkar123/rescribeDoctor_repo", "Date": "2018-04-16T05:27:17Z"},
{"Line": "505=>505", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "appointmentListObject.getPatientHeader().getAppointmentStatusId().equals(com.rescribe.doctor.adapters.my_appointments.OTHER)=>appointmentListObject.getPatientHeader().getAppointmentStatusId().equals(APPOINTMENT_STATUS.OTHER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2228/buggy-version/app.src.main.java.com.rescribe.doctor.adapters.my_appointments.AppointmentAdapter.java", "BodyUseAPI": [], "Fixed commit": "ca08848ad106f298e4bf1a90b369b5f8fc903717", "Url": "https://api.github.com/repos/sandeepbahalkar123/rescribeDoctor_repo", "Date": "2018-04-16T05:27:17Z"},
{"Line": "233=>233", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "patientList.getAppointmentStatusId().equals(com.rescribe.doctor.adapters.my_appointments.CANCEL)=>patientList.getAppointmentStatusId().equals(APPOINTMENT_STATUS.CANCEL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2228/buggy-version/app.src.main.java.com.rescribe.doctor.adapters.my_appointments.AppointmentAdapter.java", "BodyUseAPI": [], "Fixed commit": "ca08848ad106f298e4bf1a90b369b5f8fc903717", "Url": "https://api.github.com/repos/sandeepbahalkar123/rescribeDoctor_repo", "Date": "2018-04-16T05:27:17Z"},
{"Line": "849=>851", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.scorg.dms.model.dms_models.responsemodel.filetreeresponsemodel.LstDocType.getRecordDetailId()=>com.scorg.dms.model.dms_models.responsemodel.filetreeresponsemodel.LstDocType.getTypeName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3696/buggy-version/app.src.main.java.com.scorg.dms.ui.activities.dms_patient_list.FileTypeViewerActivity.java", "BodyUseAPI": [], "Fixed commit": "011f42cc2672a976529744b8cc92a184b6809cb4", "Url": "https://api.github.com/repos/sandeepbahalkar123/DMS_EMRD_repo", "Date": "2018-08-28T10:03:14Z"},
{"Line": "963=>965", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.scorg.dms.model.dms_models.responsemodel.filetreeresponsemodel.LstDateFileType.getRecordDetailId()=>com.scorg.dms.model.dms_models.responsemodel.filetreeresponsemodel.LstDateFileType.getTypeName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3696/buggy-version/app.src.main.java.com.scorg.dms.ui.activities.dms_patient_list.FileTypeViewerActivity.java", "BodyUseAPI": [], "Fixed commit": "011f42cc2672a976529744b8cc92a184b6809cb4", "Url": "https://api.github.com/repos/sandeepbahalkar123/DMS_EMRD_repo", "Date": "2018-08-28T10:03:14Z"},
{"Line": "751=>753", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.scorg.dms.model.dms_models.responsemodel.filetreeresponsemodel.LstDocType.getRecordDetailId()=>com.scorg.dms.model.dms_models.responsemodel.filetreeresponsemodel.LstDocType.getTypeName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3696/buggy-version/app.src.main.java.com.scorg.dms.ui.activities.dms_patient_list.FileTypeViewerActivity.java", "BodyUseAPI": [], "Fixed commit": "011f42cc2672a976529744b8cc92a184b6809cb4", "Url": "https://api.github.com/repos/sandeepbahalkar123/DMS_EMRD_repo", "Date": "2018-08-28T10:03:14Z"},
{"Line": "210=>211", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Scanner.hasNext()=>java.util.Scanner.hasNext(java.util.regex.Pattern)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1340/buggy-version/src.it.polito.verigraph.tosca.ToscaCLI.java", "BodyUseAPI": [], "Fixed commit": "8882ccc37e2d9be5cb7b2d62a1f806da8f06b011", "Url": "https://api.github.com/repos/netgroup-polito/verigraph", "Date": "2018-02-18T18:53:17Z"},
{"Line": "309=>311", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<com.blade.mvc.http.HttpContent>.add(com.blade.mvc.http.HttpContent)=>java.util.Queue<com.blade.mvc.http.HttpContent>.add(msg.retain())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4725/buggy-version/src.main.java.com.blade.mvc.http.HttpRequest.java", "BodyUseAPI": [], "Fixed commit": "21eddff9925835dcf73e9d8428d642226de60dfb", "Url": "https://api.github.com/repos/lets-blade/blade", "Date": "2018-10-18T09:48:54Z"},
{"Line": "95=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.osmand.plus.activities.EditFavoriteGroupDialogFragment.updateColorView(android.widget.ImageView)=>android.view.View.findViewById(R.id.colorImage)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2667/buggy-version/OsmAnd.src.net.osmand.plus.activities.EditFavoriteGroupDialogFragment.java", "BodyUseAPI": [], "Fixed commit": "0c19e1861ae92ff93cfe1fbbb687078cc07976ee", "Url": "https://api.github.com/repos/osmandapp/Osmand", "Date": "2018-03-06T11:52:05Z"},
{"Line": "303=>304", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.support.v7.widget.Toolbar.setPadding(int,mToolbar.getPaddingTop(),mToolbar.getPaddingRight(),mToolbar.getPaddingBottom())=>android.support.v4.view.ViewCompat.setPaddingRelative(android.support.v7.widget.Toolbar,int,mToolbar.getPaddingTop(),mToolbar.getPaddingRight(),mToolbar.getPaddingBottom())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5896/buggy-version/WordPress.src.main.java.org.wordpress.android.ui.FilteredRecyclerView.java", "BodyUseAPI": [], "Fixed commit": "cae3c47eb69e186ae925faf4a419a16631dd6ffe", "Url": "https://api.github.com/repos/abbasvlb/WordPress-Android", "Date": "2018-01-27T09:52:28Z"},
{"Line": "318=>312", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.support.v7.widget.Toolbar.setPadding(int,mToolbar.getPaddingTop(),int,mToolbar.getPaddingBottom())=>android.support.v4.view.ViewCompat.setPaddingRelative(android.support.v7.widget.Toolbar,int,mToolbar.getPaddingTop(),int,mToolbar.getPaddingBottom())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5896/buggy-version/WordPress.src.main.java.org.wordpress.android.ui.FilteredRecyclerView.java", "BodyUseAPI": [], "Fixed commit": "cae3c47eb69e186ae925faf4a419a16631dd6ffe", "Url": "https://api.github.com/repos/abbasvlb/WordPress-Android", "Date": "2018-01-27T09:52:28Z"},
{"Line": "310=>308", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.support.v7.widget.Toolbar.setPadding(mToolbar.getPaddingLeft(),mToolbar.getPaddingTop(),int,mToolbar.getPaddingBottom())=>android.support.v4.view.ViewCompat.setPaddingRelative(android.support.v7.widget.Toolbar,mToolbar.getPaddingLeft(),mToolbar.getPaddingTop(),int,mToolbar.getPaddingBottom())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5896/buggy-version/WordPress.src.main.java.org.wordpress.android.ui.FilteredRecyclerView.java", "BodyUseAPI": [], "Fixed commit": "cae3c47eb69e186ae925faf4a419a16631dd6ffe", "Url": "https://api.github.com/repos/abbasvlb/WordPress-Android", "Date": "2018-01-27T09:52:28Z"},
{"Line": "69=>69", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.ssm.common.ServerResponse.success()=>com.ssm.common.ServerResponse.fail()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5659/buggy-version/src.main.java.com.ssm.handlers.portal.UserHandler.java", "BodyUseAPI": [], "Fixed commit": "1ae8166ee79dd3c90a3ae57032cfd8d1a47bcb9f", "Url": "https://api.github.com/repos/chengPATHonan/Mall", "Date": "2018-07-10T08:46:51Z"},
{"Line": "8=>9", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ASMSamples.ElementBasedClasses.ICommonAttributeGroup<T>.addAttr(ASMSamples.ElementBasedClasses.SomeAttribute)=>ASMSamples.ElementBasedClasses.ICommonAttributeGroup<T>.addAttr(ASMSamples.ElementBasedClasses.SomeAttribute)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6328/buggy-version/JavaXsdParser.src.main.java.ASMSamples.ElementBasedClasses.ICommonAttributeGroup.java", "BodyUseAPI": [], "Fixed commit": "954eeb97edc6dfbca6266626a4258405aaff638e", "Url": "https://api.github.com/repos/lcduarte/XsdToJavaAPI", "Date": "2017-12-06T21:09:07Z"},
{"Line": "52=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.guest.newyorktimesclient.mvp.presenter.NewsPresenter.getNews(int,java.lang.String,int)=>com.example.guest.newyorktimesclient.mvp.presenter.NewsPresenter.getNews(int,java.lang.String,java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8334/buggy-version/app.src.main.java.com.example.guest.newyorktimesclient.ui.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "ef8f996ae7f1a2e4a62d41aafcbf47cfff2c5470", "Url": "https://api.github.com/repos/L1maginaire/NewYorkTimesClient", "Date": "2018-02-28T11:52:35Z"},
{"Line": "52=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.guest.newyorktimesclient.mvp.presenter.NewsPresenter.getNews(int,java.lang.String,int)=>com.example.guest.newyorktimesclient.mvp.presenter.NewsPresenter.getNews(int,java.lang.String,java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8334/buggy-version/app.src.main.java.com.example.guest.newyorktimesclient.ui.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "ef8f996ae7f1a2e4a62d41aafcbf47cfff2c5470", "Url": "https://api.github.com/repos/L1maginaire/NewYorkTimesClient", "Date": "2018-02-28T11:52:35Z"},
{"Line": "48=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "emplexx.getFollowers().add(com.carlosbf.presetvault.model.User)=>com.carlosbf.presetvault.model.User.follow(com.carlosbf.presetvault.model.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9432/buggy-version/src.main.java.com.carlosbf.presetvault.bootstrap.DevBootstrap.java", "BodyUseAPI": [], "Fixed commit": "bdb19540094f93aa44a3d2f562362ba19dd14340", "Url": "https://api.github.com/repos/CarlosBalladares/presetvault", "Date": "2018-08-30T08:10:59Z"},
{"Line": "49=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "emplexx.getFollowers().add(com.carlosbf.presetvault.model.User)=>java.io.PrintStream.println(com.carlosbf.presetvault.model.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9432/buggy-version/src.main.java.com.carlosbf.presetvault.bootstrap.DevBootstrap.java", "BodyUseAPI": [], "Fixed commit": "bdb19540094f93aa44a3d2f562362ba19dd14340", "Url": "https://api.github.com/repos/CarlosBalladares/presetvault", "Date": "2018-08-30T08:10:59Z"},
{"Line": "48=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "emplexx.getFollowers().add(com.carlosbf.presetvault.model.User)=>com.carlosbf.presetvault.model.User.follow(com.carlosbf.presetvault.model.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9432/buggy-version/src.main.java.com.carlosbf.presetvault.bootstrap.DevBootstrap.java", "BodyUseAPI": [], "Fixed commit": "bdb19540094f93aa44a3d2f562362ba19dd14340", "Url": "https://api.github.com/repos/CarlosBalladares/presetvault", "Date": "2018-08-30T08:10:59Z"},
{"Line": "47=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "emplexx.getFollowers().add(com.carlosbf.presetvault.model.User)=>com.carlosbf.presetvault.model.User.follow(com.carlosbf.presetvault.model.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9432/buggy-version/src.main.java.com.carlosbf.presetvault.bootstrap.DevBootstrap.java", "BodyUseAPI": [], "Fixed commit": "bdb19540094f93aa44a3d2f562362ba19dd14340", "Url": "https://api.github.com/repos/CarlosBalladares/presetvault", "Date": "2018-08-30T08:10:59Z"},
{"Line": "49=>52", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "emplexx.getFollowers().add(com.carlosbf.presetvault.model.User)=>java.io.PrintStream.println(com.carlosbf.presetvault.model.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9432/buggy-version/src.main.java.com.carlosbf.presetvault.bootstrap.DevBootstrap.java", "BodyUseAPI": [], "Fixed commit": "bdb19540094f93aa44a3d2f562362ba19dd14340", "Url": "https://api.github.com/repos/CarlosBalladares/presetvault", "Date": "2018-08-30T08:10:59Z"},
{"Line": "47=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "emplexx.getFollowers().add(com.carlosbf.presetvault.model.User)=>java.io.PrintStream.println(com.carlosbf.presetvault.model.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9432/buggy-version/src.main.java.com.carlosbf.presetvault.bootstrap.DevBootstrap.java", "BodyUseAPI": [], "Fixed commit": "bdb19540094f93aa44a3d2f562362ba19dd14340", "Url": "https://api.github.com/repos/CarlosBalladares/presetvault", "Date": "2018-08-30T08:10:59Z"},
{"Line": "395=>394", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "registerRequest.getViaHeaders().toArray()=>registerRequest.getViaHeaders().getHeaderList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2068/buggy-version/src.main.java.org.lunker.proxy.sip.process.stateless.ProxyStatelessRequestHandler.java", "BodyUseAPI": [], "Fixed commit": "e51e2fc7bd1b5532930f727f42d18bb2e06728e9", "Url": "https://api.github.com/repos/lunker/test-proxy", "Date": "2018-06-12T04:01:36Z"},
{"Line": "34=>34", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "hoang.phuong.server.service.ThongtingiadinhService.listByIDSv(thongtinsinhvienService.getByMaSV(idsv).getId())=>hoang.phuong.server.service.ThongtingiadinhService.listByIDSv(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/707/buggy-version/src.main.java.hoang.phuong.server.controller.ThongtingiadinhController.java", "BodyUseAPI": [], "Fixed commit": "bf7f1dc1b7e861c0fe888a75acec0aca780805f8", "Url": "https://api.github.com/repos/phuongjsp/quanlysinhvien", "Date": "2018-04-20T03:51:38Z"},
{"Line": "140=>144", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "view4.findViewById(R.id.icon_tab).setBackgroundResource(R.drawable.ic_stats_tab)=>android.view.View.setBackgroundResource(R.drawable.ic_stats_tab)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3691/buggy-version/app.src.main.java.com.appian.manutdvietnam.app.match.MatchFragment.java", "BodyUseAPI": [], "Fixed commit": "c4a53bbedae9f38e9eb2f3bc0a66335867185fa0", "Url": "https://api.github.com/repos/haipv-ptit/Android_ManUtdVN", "Date": "2018-04-05T06:42:44Z"},
{"Line": "147=>155", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "view2.findViewById(R.id.icon_tab).setBackgroundResource(R.drawable.ic_line_up_tab)=>android.view.View.setBackgroundResource(R.drawable.ic_line_up_tab)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3691/buggy-version/app.src.main.java.com.appian.manutdvietnam.app.match.MatchFragment.java", "BodyUseAPI": [], "Fixed commit": "c4a53bbedae9f38e9eb2f3bc0a66335867185fa0", "Url": "https://api.github.com/repos/haipv-ptit/Android_ManUtdVN", "Date": "2018-04-05T06:42:44Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.ycp.cs320.otterspace.model.EditorRoomModel.getConnections()=>edu.ycp.cs320.otterspace.model.EditorRoomModel.getConnectionTemp()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8855/buggy-version/OtterSpace.src.edu.ycp.cs320.otterspace.controller.EditorRoomController.java", "BodyUseAPI": [], "Fixed commit": "34ae55a0eb519c2181a0a78aaee2bf7ce8d4421a", "Url": "https://api.github.com/repos/asgervasio/OtterSpace", "Date": "2018-04-04T20:26:55Z"},
{"Line": "20=>20", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "edu.ycp.cs320.otterspace.controller.game.Room.setConnections(model.getConnections())=>edu.ycp.cs320.otterspace.controller.game.Room.setConnectionTemp(model.getConnectionTemp())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8855/buggy-version/OtterSpace.src.edu.ycp.cs320.otterspace.controller.EditorRoomController.java", "BodyUseAPI": [], "Fixed commit": "34ae55a0eb519c2181a0a78aaee2bf7ce8d4421a", "Url": "https://api.github.com/repos/asgervasio/OtterSpace", "Date": "2018-04-04T20:26:55Z"},
{"Line": "76=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.ycp.cs320.otterspace.controller.game.HashMap<java.lang.String, edu.ycp.cs320.otterspace.controller.game.Room>.get(java.lang.String)=>java.util.HashMap<java.lang.String, edu.ycp.cs320.otterspace.controller.game.Room>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8855/buggy-version/OtterSpace.src.edu.ycp.cs320.otterspace.controller.game.Room.java", "BodyUseAPI": [], "Fixed commit": "34ae55a0eb519c2181a0a78aaee2bf7ce8d4421a", "Url": "https://api.github.com/repos/asgervasio/OtterSpace", "Date": "2018-04-04T20:26:55Z"},
{"Line": "81=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.ycp.cs320.otterspace.controller.game.HashMap<java.lang.String, edu.ycp.cs320.otterspace.controller.game.Room>.put(java.lang.String,edu.ycp.cs320.otterspace.controller.game.Room)=>java.util.HashMap<java.lang.String, edu.ycp.cs320.otterspace.controller.game.Room>.put(java.lang.String,edu.ycp.cs320.otterspace.controller.game.Room)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8855/buggy-version/OtterSpace.src.edu.ycp.cs320.otterspace.controller.game.Room.java", "BodyUseAPI": [], "Fixed commit": "34ae55a0eb519c2181a0a78aaee2bf7ce8d4421a", "Url": "https://api.github.com/repos/asgervasio/OtterSpace", "Date": "2018-04-04T20:26:55Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.ycp.cs320.otterspace.model.EditorRoomModel.setConnections(java.lang.String)=>edu.ycp.cs320.otterspace.model.EditorRoomModel.setConnectionTemp(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8855/buggy-version/OtterSpace.src.edu.ycp.cs320.otterspace.servlet.EditorServlet.java", "BodyUseAPI": [], "Fixed commit": "34ae55a0eb519c2181a0a78aaee2bf7ce8d4421a", "Url": "https://api.github.com/repos/asgervasio/OtterSpace", "Date": "2018-04-04T20:26:55Z"},
{"Line": "92=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.File.delete()=>java.io.File.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6565/buggy-version/src.main.java.coreapp.DriveInitializer.java", "BodyUseAPI": [], "Fixed commit": "ac2555f37cb27d55224137597d90a7ef41239e19", "Url": "https://api.github.com/repos/jasonliu19/DriveSync", "Date": "2018-01-18T03:17:00Z"},
{"Line": "180=>180", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Set<java.lang.String>.remove(java.lang.String)=>java.util.Set<java.lang.String>.add(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1681/buggy-version/stetho.src.main.java.com.facebook.stetho.Stetho.java", "BodyUseAPI": [], "Fixed commit": "1e5871486e4504cde451340a90f2401642729f8c", "Url": "https://api.github.com/repos/facebook/stetho", "Date": "2018-06-27T11:08:20Z"},
{"Line": "180=>181", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "core.Esse3Api.getTotalBlockHours(java.lang.String)=>data.Esse3Subj.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/974/buggy-version/Esse3Api.src.core.Esse3Api.java", "BodyUseAPI": [], "Fixed commit": "6854c34991b0e0c227f1dadf64fb80cb35658465", "Url": "https://api.github.com/repos/Nogen/Esse3Api", "Date": "2018-05-31T14:28:19Z"},
{"Line": "180=>181", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "core.Esse3Api.getTotalBlockHours(java.lang.String)=>data.Esse3Subj.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/974/buggy-version/Esse3Api.src.core.Esse3Api.java", "BodyUseAPI": [], "Fixed commit": "6854c34991b0e0c227f1dadf64fb80cb35658465", "Url": "https://api.github.com/repos/Nogen/Esse3Api", "Date": "2018-05-31T14:28:19Z"},
{"Line": "178=>178", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(java.util.List<java.lang.String>)=>data.Esse3Block.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/974/buggy-version/Esse3Api.src.core.Esse3Api.java", "BodyUseAPI": [], "Fixed commit": "6854c34991b0e0c227f1dadf64fb80cb35658465", "Url": "https://api.github.com/repos/Nogen/Esse3Api", "Date": "2018-05-31T14:28:19Z"},
{"Line": "82=>82", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.rahmat.app.cataloguemovie.rest.MovieInterface.getPopularMovie(com.rahmat.app.cataloguemovie.API_KEY)=>com.rahmat.app.cataloguemovie.rest.MovieInterface.getUpcomingMovie(com.rahmat.app.cataloguemovie.API_KEY)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9493/buggy-version/app.src.main.java.com.rahmat.app.cataloguemovie.NowFragment.java", "BodyUseAPI": [], "Fixed commit": "b5bc01237a5558a993ccdda4cb2af8d93a0f1ffc", "Url": "https://api.github.com/repos/muhrahmatullah/Dicoding-Movie-Catalogue", "Date": "2018-06-17T07:04:36Z"},
{"Line": "109=>110", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.commons.lang.StringUtils.substringAfter(java.lang.String,java.lang.String)=>org.apache.commons.lang.StringUtils.contains(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3227/buggy-version/src.main.java.org.b3log.symphony.service.ShortLinkQueryService.java", "BodyUseAPI": [], "Fixed commit": "69adeecae46e3deb1b7bc052ed7ea77a6675cc3e", "Url": "https://api.github.com/repos/xiongba-me/symphony", "Date": "2018-02-28T14:15:10Z"},
{"Line": "63=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "customers.get(position).getAccount()=>customers.get(position).getAddress()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1240/buggy-version/app.src.main.java.btventures.ledger.CustomerAdapter.java", "BodyUseAPI": [], "Fixed commit": "63d294b3c05727dbc60c2c78ce4c5c7b98f8a675", "Url": "https://api.github.com/repos/nbalyan/Ledger", "Date": "2018-03-19T12:45:33Z"},
{"Line": "85=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.sql.Connection.prepareStatement(java.lang.String,Statement.RETURN_GENERATED_KEYS)=>java.sql.Connection.prepareStatement(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2610/buggy-version/gsu.src.gsu.dbs.auction.wrapper.Product.java", "BodyUseAPI": [], "Fixed commit": "e06cf1b36de26f1d6fb596d43f580d8b67724e8d", "Url": "https://api.github.com/repos/LoganB721/DatabaseGUI", "Date": "2018-04-27T19:07:24Z"},
{"Line": "28=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.LukAd.BedWars.config.net.LukAd.BedWars.config.PluginConfig.getArenasConfiguration()=>net.LukAd.BedWars.Config.PluginConfig.getArenasConfiguration()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8055/buggy-version/src.main.java.net.LukAd.BedWars.Config.ArenaFileStorage.java", "BodyUseAPI": [], "Fixed commit": "1a4295cd5d369745a7746e6af385f9b23b04e600", "Url": "https://api.github.com/repos/AdinSk/LukzonAdin", "Date": "2018-09-15T19:16:45Z"},
{"Line": "581=>581", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.swing.JButton.setEnabled(boolean)=>javax.swing.JButton.setVisible(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8529/buggy-version/src.trabalho.pkg1.pl.Tela1.java", "BodyUseAPI": [], "Fixed commit": "1bc6e8e87ffc2b02a91baecb64d213c2ec1a0638", "Url": "https://api.github.com/repos/jonasmarini/MetodoSimplex", "Date": "2018-06-11T00:19:40Z"},
{"Line": "39=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.columbia.rdf.matcalc.MainMatCalc.main(edu.columbia.rdf.matcalc.MatCalcInfo,edu.columbia.rdf.matcalc.bio.app.BioAppModuleLoader)=>edu.columbia.rdf.matcalc.bio.app.MainBioMatCalc.main()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3565/buggy-version/edu.columbia.rdf.matcalc.bio.app.src.main.java.edu.columbia.rdf.matcalc.bio.app.MainBioMatCalc.java", "BodyUseAPI": [], "Fixed commit": "0753b8e4c96d183ada474f17314bebf0867305b4", "Url": "https://api.github.com/repos/antonybholmes/matcalc-bio-app", "Date": "2018-01-11T01:19:27Z"},
{"Line": "39=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.columbia.rdf.matcalc.MainMatCalc.main(edu.columbia.rdf.matcalc.MatCalcInfo,edu.columbia.rdf.matcalc.bio.app.BioAppModuleLoader)=>edu.columbia.rdf.matcalc.bio.app.MainBioMatCalc.main()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3565/buggy-version/edu.columbia.rdf.matcalc.bio.app.src.main.java.edu.columbia.rdf.matcalc.bio.app.MainBioMatCalc.java", "BodyUseAPI": [], "Fixed commit": "0753b8e4c96d183ada474f17314bebf0867305b4", "Url": "https://api.github.com/repos/antonybholmes/matcalc-bio-app", "Date": "2018-01-11T01:19:27Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.lotus.carp.generator.core.dto.EntityDto.getRepositoryFileName()=>org.lotus.carp.generator.core.dto.EntityDto.getEntityFileName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2792/buggy-version/code-generator-core.src.main.java.org.lotus.carp.generator.core.processor.impl.EntityCodeProcessorImpl.java", "BodyUseAPI": [], "Fixed commit": "547da892ab4d89651ce95301fe5812af47b4892a", "Url": "https://api.github.com/repos/flian/carp-code-generator", "Date": "2018-09-12T08:41:14Z"},
{"Line": "226=>227", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "query.removeSpatialFilter().replaceWith(Parameters.FILTER_PLATFORM_TYPES,java.lang.String)=>org.n52.series.db.dao.DbQuery.removeSpatialFilter()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6192/buggy-version/dao.src.main.java.org.n52.series.db.da.GeometriesRepository.java", "BodyUseAPI": [], "Fixed commit": "f3d26e11a6c75cbccf9c53e7dbbfb90634b2e77e", "Url": "https://api.github.com/repos/ridoo/dao-series-api", "Date": "2018-02-07T10:49:59Z"},
{"Line": "72=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.github.fge.jackson.JacksonUtils.getReader().forType(java.lang.Class)=>com.github.fge.jackson.JacksonUtils.getReader().withType(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1413/buggy-version/spar-wings-dynamodb-json-patch.src.main.java.jp.xet.sparwings.dynamodb.patch.JsonPatch.java", "BodyUseAPI": [], "Fixed commit": "6be4642997e24964fe186f62c5e0981026a7c078", "Url": "https://api.github.com/repos/wreulicke/spar-wings", "Date": "2018-03-17T16:16:00Z"},
{"Line": "162=>162", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Woo.atHospital(Human)=>Settings.atHospital(Human)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3311/buggy-version/Project_working.Woo.java", "BodyUseAPI": [], "Fixed commit": "392a6ef3b11e28a3c8027757f3f128331ce83c48", "Url": "https://api.github.com/repos/victorlin7534/RelaxationDays", "Date": "2018-01-17T04:41:03Z"},
{"Line": "99=>99", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Settings.length()=>x._sickness.length()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3311/buggy-version/Project_working.Settings.java", "BodyUseAPI": [], "Fixed commit": "392a6ef3b11e28a3c8027757f3f128331ce83c48", "Url": "https://api.github.com/repos/victorlin7534/RelaxationDays", "Date": "2018-01-17T04:41:03Z"},
{"Line": "168=>168", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Woo.BIRTH.get(_sickType).doubleValue()=>((java.lang.Double) (Woo.BIRTH.get(_sickType))).doubleValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3311/buggy-version/Project_working.Human.java", "BodyUseAPI": [], "Fixed commit": "392a6ef3b11e28a3c8027757f3f128331ce83c48", "Url": "https://api.github.com/repos/victorlin7534/RelaxationDays", "Date": "2018-01-17T04:41:03Z"},
{"Line": "160=>160", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Woo.STDS.get(_sickType).doubleValue()=>((java.lang.Double) (Woo.STDS.get(_sickType))).doubleValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3311/buggy-version/Project_working.Human.java", "BodyUseAPI": [], "Fixed commit": "392a6ef3b11e28a3c8027757f3f128331ce83c48", "Url": "https://api.github.com/repos/victorlin7534/RelaxationDays", "Date": "2018-01-17T04:41:03Z"},
{"Line": "174=>174", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Woo.RANDOM.get(_sickType).doubleValue()=>((java.lang.Double) (Woo.RANDOM.get(_sickType))).doubleValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3311/buggy-version/Project_working.Human.java", "BodyUseAPI": [], "Fixed commit": "392a6ef3b11e28a3c8027757f3f128331ce83c48", "Url": "https://api.github.com/repos/victorlin7534/RelaxationDays", "Date": "2018-01-17T04:41:03Z"},
{"Line": "175=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Woo.RANDOM.get(_sickType).doubleValue()=>((java.lang.Double) (Woo.RANDOM.get(_sickType))).doubleValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3311/buggy-version/Project_working.Human.java", "BodyUseAPI": [], "Fixed commit": "392a6ef3b11e28a3c8027757f3f128331ce83c48", "Url": "https://api.github.com/repos/victorlin7534/RelaxationDays", "Date": "2018-01-17T04:41:03Z"},
{"Line": "161=>161", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Woo.STDS.get(_sickType).doubleValue()=>((java.lang.Double) (Woo.STDS.get(_sickType))).doubleValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3311/buggy-version/Project_working.Human.java", "BodyUseAPI": [], "Fixed commit": "392a6ef3b11e28a3c8027757f3f128331ce83c48", "Url": "https://api.github.com/repos/victorlin7534/RelaxationDays", "Date": "2018-01-17T04:41:03Z"},
{"Line": "167=>167", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Woo.BIRTH.get(_sickType).doubleValue()=>((java.lang.Double) (Woo.BIRTH.get(_sickType))).doubleValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3311/buggy-version/Project_working.Human.java", "BodyUseAPI": [], "Fixed commit": "392a6ef3b11e28a3c8027757f3f128331ce83c48", "Url": "https://api.github.com/repos/victorlin7534/RelaxationDays", "Date": "2018-01-17T04:41:03Z"},
{"Line": "136=>136", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Human.get(Settings.oneOf(0, 2))=>Woo.stdArray.get(Settings.oneOf(0, 2))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3311/buggy-version/Project_working.Human.java", "BodyUseAPI": [], "Fixed commit": "392a6ef3b11e28a3c8027757f3f128331ce83c48", "Url": "https://api.github.com/repos/victorlin7534/RelaxationDays", "Date": "2018-01-17T04:41:03Z"},
{"Line": "142=>142", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Human.get(Settings.oneOf(0, 2))=>Woo.birthArray.get(Settings.oneOf(0, 2))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3311/buggy-version/Project_working.Human.java", "BodyUseAPI": [], "Fixed commit": "392a6ef3b11e28a3c8027757f3f128331ce83c48", "Url": "https://api.github.com/repos/victorlin7534/RelaxationDays", "Date": "2018-01-17T04:41:03Z"},
{"Line": "148=>148", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Human.get(Settings.oneOf(0, 2))=>Woo.randomArray.get(Settings.oneOf(0, 2))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3311/buggy-version/Project_working.Human.java", "BodyUseAPI": [], "Fixed commit": "392a6ef3b11e28a3c8027757f3f128331ce83c48", "Url": "https://api.github.com/repos/victorlin7534/RelaxationDays", "Date": "2018-01-17T04:41:03Z"},
{"Line": "42=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.util.concurrent.Future>.clear()=>java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.util.List<java.util.concurrent.Future>>.contains(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5932/buggy-version/src.main.java.com.defano.hypercard.util.Throttle.java", "BodyUseAPI": [], "Fixed commit": "14422ee541ee8c9cd4ad52b46852509429c07b30", "Url": "https://api.github.com/repos/defano/wyldcard", "Date": "2018-03-02T15:09:17Z"},
{"Line": "118=>118", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getPartModel().removePropertyChangedObserver(com.defano.hypercard.parts.field.FieldComponent)=>getPartModel().removePropertyChangedObserver(com.defano.hypercard.parts.field.HyperCardTextField)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5932/buggy-version/src.main.java.com.defano.hypercard.parts.field.StyleableField.java", "BodyUseAPI": [], "Fixed commit": "14422ee541ee8c9cd4ad52b46852509429c07b30", "Url": "https://api.github.com/repos/defano/wyldcard", "Date": "2018-03-02T15:09:17Z"},
{"Line": "96=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.defano.hypercard.parts.field.FieldComponent.getTextPane()=>com.defano.hypercard.parts.field.HyperCardTextField.getTextPane()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5932/buggy-version/src.main.java.com.defano.hypercard.parts.field.StyleableField.java", "BodyUseAPI": [], "Fixed commit": "14422ee541ee8c9cd4ad52b46852509429c07b30", "Url": "https://api.github.com/repos/defano/wyldcard", "Date": "2018-03-02T15:09:17Z"},
{"Line": "109=>109", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getPartModel().addPropertyChangedObserver(com.defano.hypercard.parts.field.FieldComponent)=>getPartModel().addPropertyChangedObserver(com.defano.hypercard.parts.field.HyperCardTextField)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5932/buggy-version/src.main.java.com.defano.hypercard.parts.field.StyleableField.java", "BodyUseAPI": [], "Fixed commit": "14422ee541ee8c9cd4ad52b46852509429c07b30", "Url": "https://api.github.com/repos/defano/wyldcard", "Date": "2018-03-02T15:09:17Z"},
{"Line": "65=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.defano.hypercard.parts.field.StyleableField.replaceViewComponent(java.awt.Component,com.defano.hypercard.parts.field.FieldComponent)=>com.defano.hypercard.parts.field.StyleableField.replaceViewComponent(java.awt.Component,com.defano.hypercard.parts.field.HyperCardTextField)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5932/buggy-version/src.main.java.com.defano.hypercard.parts.field.StyleableField.java", "BodyUseAPI": [], "Fixed commit": "14422ee541ee8c9cd4ad52b46852509429c07b30", "Url": "https://api.github.com/repos/defano/wyldcard", "Date": "2018-03-02T15:09:17Z"},
{"Line": "107=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.defano.hypercard.parts.field.FieldComponent.partOpened()=>com.defano.hypercard.parts.field.HyperCardTextField.partOpened()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5932/buggy-version/src.main.java.com.defano.hypercard.parts.field.StyleableField.java", "BodyUseAPI": [], "Fixed commit": "14422ee541ee8c9cd4ad52b46852509429c07b30", "Url": "https://api.github.com/repos/defano/wyldcard", "Date": "2018-03-02T15:09:17Z"},
{"Line": "116=>116", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.defano.hypercard.parts.field.FieldComponent.partClosed()=>com.defano.hypercard.parts.field.HyperCardTextField.partClosed()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5932/buggy-version/src.main.java.com.defano.hypercard.parts.field.StyleableField.java", "BodyUseAPI": [], "Fixed commit": "14422ee541ee8c9cd4ad52b46852509429c07b30", "Url": "https://api.github.com/repos/defano/wyldcard", "Date": "2018-03-02T15:09:17Z"},
{"Line": "454=>454", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "param.getType().asClassOrInterfaceType().getNameAsString()=>com.clarity.listener.JavaTreeListener.resolveType(param.getType().asString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7031/buggy-version/clarpse.src.main.java.com.clarity.listener.JavaTreeListener.java", "BodyUseAPI": [], "Fixed commit": "b37d79e730659ee3b0e5c1c01bde64e7460b9962", "Url": "https://api.github.com/repos/clarity-org/clarpse", "Date": "2018-01-06T10:03:03Z"},
{"Line": "454=>454", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "param.getType().asClassOrInterfaceType()=>param.getType().asString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7031/buggy-version/clarpse.src.main.java.com.clarity.listener.JavaTreeListener.java", "BodyUseAPI": [], "Fixed commit": "b37d79e730659ee3b0e5c1c01bde64e7460b9962", "Url": "https://api.github.com/repos/clarity-org/clarpse", "Date": "2018-01-06T10:03:03Z"},
{"Line": "2243=>2243", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.candlepin.policy.js.pool.PoolRules.updatePoolsFromStack(org.candlepin.model.Consumer,java.util.Collection<org.candlepin.model.Pool>,<nulltype>,java.util.Collection<java.lang.String>,boolean)=>org.candlepin.policy.js.pool.PoolRules.updatePoolsFromStack(org.candlepin.model.Consumer,java.util.Collection<org.candlepin.model.Pool>,java.util.Collection<java.lang.String>,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3163/buggy-version/server.src.main.java.org.candlepin.controller.CandlepinPoolManager.java", "BodyUseAPI": [], "Fixed commit": "a5b200278e9cd8c231ab2f7cf59c578e08a39527", "Url": "https://api.github.com/repos/candlepin/candlepin", "Date": "2018-09-05T10:12:29Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.mvs.sampleapp.countrySelection.model.CountryData.setCode(int)=>com.mvs.sampleapp.countrySelection.model.CountryData.setCode(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4749/buggy-version/app.src.main.java.com.mvs.sampleapp.MockPreLoginDataProvider.java", "BodyUseAPI": [], "Fixed commit": "5bd5c02a82e09e11f701355d901c3c06ace3d604", "Url": "https://api.github.com/repos/MaisamV/SampleApp", "Date": "2018-04-24T12:20:43Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.mvs.sampleapp.countrySelection.model.CountryData.setCode(int)=>com.mvs.sampleapp.countrySelection.model.CountryData.setCode(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4749/buggy-version/app.src.main.java.com.mvs.sampleapp.MockPreLoginDataProvider.java", "BodyUseAPI": [], "Fixed commit": "5bd5c02a82e09e11f701355d901c3c06ace3d604", "Url": "https://api.github.com/repos/MaisamV/SampleApp", "Date": "2018-04-24T12:20:43Z"},
{"Line": "62=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Board.setBackground(COLOR,BLUE)=>Board.setBackground(COLOR.BLUE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5440/buggy-version/Board.java", "BodyUseAPI": [], "Fixed commit": "c4a5290ef05c73993d2c147b9cc94ab811ab81d8", "Url": "https://api.github.com/repos/neilpatel/MatchEm", "Date": "2018-06-17T16:57:34Z"},
{"Line": "36=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.zeynepalptekin.tariccostechsavvycodingnightmares.ListingsView.findViewById(R.id.list)=>com.example.zeynepalptekin.tariccostechsavvycodingnightmares.ListingsView.findViewById(android.R.id.list)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1495/buggy-version/app.src.main.java.com.example.zeynepalptekin.tariccostechsavvycodingnightmares.ListingsView.java", "BodyUseAPI": [], "Fixed commit": "bc4a135f5b4718153ad26a1270d8507d17ef0e80", "Url": "https://api.github.com/repos/TTSCN/TariccosTechSavvyCodingCowboys", "Date": "2018-05-01T01:36:54Z"},
{"Line": "45=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7516/buggy-version/a8parser2.src.main.java.com.megtag.a8parser2.a8.A8Designer.java", "BodyUseAPI": [], "Fixed commit": "3c49c3c7ab172a51db21bd6392e23c25a122a494", "Url": "https://api.github.com/repos/jerrymani33/A8_Module", "Date": "2018-01-08T12:26:37Z"},
{"Line": "91=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9519/buggy-version/homework.homework3.app.src.main.java.edu.uncc.cci.mobileapps.myfavoritemovies.Movie.java", "BodyUseAPI": [], "Fixed commit": "376467bc89f3511a8adaad6d31e4cb6d0bcdde77", "Url": "https://api.github.com/repos/kxbui/ITCS-5180", "Date": "2018-09-15T16:08:40Z"},
{"Line": "38=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.PrintStream.printf(java.lang.String)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4170/buggy-version/src.ATM.java", "BodyUseAPI": [], "Fixed commit": "f980aeffd79485e8995ecca7104d25cd1c7ef943", "Url": "https://api.github.com/repos/huelsma2/atmsim", "Date": "2018-02-14T02:49:00Z"},
{"Line": "123=>124", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.IOException.printStackTrace()=>com.google.api.client.googleapis.json.GoogleJsonResponseException.printStackTrace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/344/buggy-version/src.main.java.com.greenfoxacademy.kalendaryo.service.authorization.AuthorizeKal.java", "BodyUseAPI": [], "Fixed commit": "6ef782a4542951fd9a9193012bda3d9c40a5c57e", "Url": "https://api.github.com/repos/green-fox-academy/huli-kalendaryo-backend", "Date": "2018-05-30T14:41:43Z"},
{"Line": "235=>240", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "db.collection(\"OrderDetail\").document(docID).delete().addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener<java.lang.Void>)=>db.collection(\"OrderDetail\").document(docID).delete().addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener<java.lang.Void>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7812/buggy-version/app.src.main.java.my.edu.tarc.foodorderingapp.MakeOrder.java", "BodyUseAPI": [], "Fixed commit": "7e22becc1dfc425972770aafaf1d2510dbc2b73e", "Url": "https://api.github.com/repos/Theam1127/FoodOrderingApp", "Date": "2018-07-21T16:34:06Z"},
{"Line": "133=>133", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.usfirst.frc.team6162.robot.subsystems.Drive.driveArcade((((org.usfirst.frc.team6162.robot.Robot.m_oi.leftJoy.getMagnitude()) * (stepAccelerateTimer)) * 0.02),org.usfirst.frc.team6162.robot.Robot.m_oi.leftJoy.getX())=>org.usfirst.frc.team6162.robot.Drive.driveArcade((((org.usfirst.frc.team6162.robot.Robot.m_oi.leftJoy.getMagnitude()) * (stepAccelerateTimer)) * 0.02),org.usfirst.frc.team6162.robot.Robot.m_oi.leftJoy.getX())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2443/buggy-version/src.org.usfirst.frc.team6162.robot.Robot.java", "BodyUseAPI": [], "Fixed commit": "57665f4ef5a41e0d44ef62b28305b112cb65258b", "Url": "https://api.github.com/repos/FRC6162/Robot2018J", "Date": "2018-03-28T19:57:53Z"},
{"Line": "282=>282", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.toUpperCase(java.util.Locale)=>java.lang.String.toLowerCase(java.util.Locale)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5900/buggy-version/FinalProject.URLValidatorInCorrect.src.UrlValidator.java", "BodyUseAPI": [], "Fixed commit": "f4d9da13ad9ce745d02d2ca96ec1a0eb10f58f43", "Url": "https://api.github.com/repos/lauralin08/CS362-004-U2018", "Date": "2018-08-14T06:43:11Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.sql.ResultSet.first()=>java.sql.ResultSet.beforeFirst()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2555/buggy-version/src.java.com.rotoplastyc.util.SQL.SQLTable.java", "BodyUseAPI": [], "Fixed commit": "2a3e256a1b6015b7a9352d997c2d15a10ec85e26", "Url": "https://api.github.com/repos/lucasnoetzold/Viagens", "Date": "2018-03-18T01:08:30Z"},
{"Line": "189=>194", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.System.exit(int)=>javax.swing.JFrame.dispatchEvent(java.awt.event.WindowEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7382/buggy-version/src.slotGUI.java", "BodyUseAPI": [], "Fixed commit": "dd7627e98234abbeb4f5f345cb3d2c2c73b2ef4a", "Url": "https://api.github.com/repos/MarcChesebro/VirtualCasino", "Date": "2018-04-19T21:35:31Z"},
{"Line": "158=>158", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "de.uni_due.s3.evaluator2.nlp.SimpleNLGSentenceFactory.generateRandomSentence(java.lang.String,java.lang.String,simplenlg.lexicon.Lexicon,simplenlg.framework.NLGFactory)=>de.uni_due.s3.evaluator2.nlp.SimpleNLGSentenceFactory.generateRandomSentence(java.lang.String,simplenlg.lexicon.Lexicon,simplenlg.framework.NLGFactory)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6460/buggy-version/src.main.java.de.uni_due.s3.evaluator2.nlp.SimpleNLGSentenceFactory.java", "BodyUseAPI": [], "Fixed commit": "8a56ae75b4e6e22df582174483420428c57dda1c", "Url": "https://api.github.com/repos/FelixSchmidt92/Evaluator2", "Date": "2018-02-28T15:16:38Z"},
{"Line": "181=>181", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "de.uni_due.s3.evaluator2.nlp.SimpleNLGSentenceFactory.generateRandomSentence(java.lang.String,java.lang.String,simplenlg.lexicon.Lexicon,simplenlg.framework.NLGFactory)=>de.uni_due.s3.evaluator2.nlp.SimpleNLGSentenceFactory.generateRandomSentence(java.lang.String,simplenlg.lexicon.Lexicon,simplenlg.framework.NLGFactory)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6460/buggy-version/src.main.java.de.uni_due.s3.evaluator2.nlp.SimpleNLGSentenceFactory.java", "BodyUseAPI": [], "Fixed commit": "8a56ae75b4e6e22df582174483420428c57dda1c", "Url": "https://api.github.com/repos/FelixSchmidt92/Evaluator2", "Date": "2018-02-28T15:16:38Z"},
{"Line": "283=>285", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.eclipse.che.api.deploy.WsMasterModule.install(org.eclipse.che.api.deploy.ReplicationModule)=>bind(org.eclipse.che.api.core.notification.RemoteSubscriptionStorage.class).to(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6307/buggy-version/assembly.assembly-wsmaster-war.src.main.java.org.eclipse.che.api.deploy.WsMasterModule.java", "BodyUseAPI": [], "Fixed commit": "88fbd0ef7df6d099c86c41c468e4aa800120e3ea", "Url": "https://api.github.com/repos/eclipse/che", "Date": "2018-04-24T09:14:26Z"},
{"Line": "54=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.persistence.EntityManager.remove(java.lang.Long)=>javax.persistence.EntityManager.remove(com.qa.domain.Account)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4291/buggy-version/src.main.java.com.qa.service.AccountDBService.java", "BodyUseAPI": [], "Fixed commit": "760d3cdcde9b0aee11ec31ea8320296da45a6964", "Url": "https://api.github.com/repos/mateitiberiu1995/homeWork", "Date": "2018-04-28T12:04:50Z"},
{"Line": "54=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.persistence.EntityManager.remove(java.lang.Long)=>javax.persistence.EntityManager.remove(com.qa.domain.Account)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4291/buggy-version/src.main.java.com.qa.service.AccountDBService.java", "BodyUseAPI": [], "Fixed commit": "760d3cdcde9b0aee11ec31ea8320296da45a6964", "Url": "https://api.github.com/repos/mateitiberiu1995/homeWork", "Date": "2018-04-28T12:04:50Z"},
{"Line": "119=>121", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "AmazonS3Util.AzureWASBUtil.getObject(com.microsoft.azure.storage.blob.CloudBlobClient,java.lang.String,java.lang.String,boolean)=>com.trivadis.streamsets.azure.util.AzureWASBUtil.getObject(com.microsoft.azure.storage.blob.CloudBlobClient,java.lang.String,java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8344/buggy-version/tvd-azure-lib.src.main.java.com.trivadis.streamsets.azure.stage.processor.wasblookup.AzureWASBLookupProcessor.java", "BodyUseAPI": [], "Fixed commit": "74eeeb1bd4b92edf272982a1ba9752e7a4435e70", "Url": "https://api.github.com/repos/TrivadisBDS/streamsets-addons", "Date": "2018-05-03T15:14:14Z"},
{"Line": "66=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "AmazonS3Util.AzureWASBUtil.getObject(com.microsoft.azure.storage.blob.CloudBlobClient,java.lang.String,java.lang.String,boolean)=>com.trivadis.streamsets.azure.util.AzureWASBUtil.getObject(com.microsoft.azure.storage.blob.CloudBlobClient,java.lang.String,java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8344/buggy-version/tvd-azure-lib.src.main.java.com.trivadis.streamsets.azure.stage.processor.wasblookup.config.WASBFileRef.java", "BodyUseAPI": [], "Fixed commit": "74eeeb1bd4b92edf272982a1ba9752e7a4435e70", "Url": "https://api.github.com/repos/TrivadisBDS/streamsets-addons", "Date": "2018-05-03T15:14:14Z"},
{"Line": "225=>238", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.ballerinalang.mime.util.HeaderUtil.addToEntityHeaders(org.ballerinalang.model.values.BMap<java.lang.String, org.ballerinalang.model.values.BValue>,org.ballerinalang.mime.util.Constants.CONTENT_TYPE,java.lang.String)=>org.ballerinalang.mime.util.HeaderUtil.overrideEntityHeader(org.ballerinalang.model.values.BMap<java.lang.String, org.ballerinalang.model.values.BValue>,org.ballerinalang.mime.util.Constants.CONTENT_TYPE,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1269/buggy-version/stdlib.ballerina-mime.src.main.java.org.ballerinalang.mime.util.HeaderUtil.java", "BodyUseAPI": [], "Fixed commit": "aef263044d153f9d9155ca8afca54eceecff4a7a", "Url": "https://api.github.com/repos/arukshani/ballerina", "Date": "2018-03-01T10:32:17Z"},
{"Line": "237=>250", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.ballerinalang.mime.util.HeaderUtil.addToEntityHeaders(org.ballerinalang.model.values.BMap<java.lang.String, org.ballerinalang.model.values.BValue>,org.ballerinalang.mime.util.Constants.CONTENT_DISPOSITION,java.lang.String)=>org.ballerinalang.mime.util.HeaderUtil.overrideEntityHeader(org.ballerinalang.model.values.BMap<java.lang.String, org.ballerinalang.model.values.BValue>,org.ballerinalang.mime.util.Constants.CONTENT_DISPOSITION,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1269/buggy-version/stdlib.ballerina-mime.src.main.java.org.ballerinalang.mime.util.HeaderUtil.java", "BodyUseAPI": [], "Fixed commit": "aef263044d153f9d9155ca8afca54eceecff4a7a", "Url": "https://api.github.com/repos/arukshani/ballerina", "Date": "2018-03-01T10:32:17Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.rahmanbesir.service.UserService.getByEmail(java.lang.String)=>com.rahmanbesir.service.UserService.getByUsername(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8553/buggy-version/src.main.java.com.rahmanbesir.api.UserController.java", "BodyUseAPI": [], "Fixed commit": "503d6ee1c9f69e4f50bdfd65064f1bf05a334ef0", "Url": "https://api.github.com/repos/rahmanbesir/spring-boot-security-example", "Date": "2018-10-23T13:04:59Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.rahmanbesir.repository.UserRepository.findByEmail(java.lang.String)=>com.rahmanbesir.repository.UserRepository.findByUsername(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8553/buggy-version/src.main.java.com.rahmanbesir.service.UserService.java", "BodyUseAPI": [], "Fixed commit": "503d6ee1c9f69e4f50bdfd65064f1bf05a334ef0", "Url": "https://api.github.com/repos/rahmanbesir/spring-boot-security-example", "Date": "2018-10-23T13:04:59Z"},
{"Line": "19=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.rahmanbesir.service.UserService.getByEmail(java.lang.String)=>com.rahmanbesir.service.UserService.getByUsername(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8553/buggy-version/src.main.java.com.rahmanbesir.service.UserDetailsServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "503d6ee1c9f69e4f50bdfd65064f1bf05a334ef0", "Url": "https://api.github.com/repos/rahmanbesir/spring-boot-security-example", "Date": "2018-10-23T13:04:59Z"},
{"Line": "46=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.core.collections.IterMap<java.lang.String, java.util.Set<java.lang.String>>.get(java.lang.String)=>java.util.Map.Entry<java.lang.String, java.util.Set<java.lang.String>>.getValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1896/buggy-version/edu.columbia.rdf.matcalc.toolbox.conversion.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.conversion.GeneMapping.java", "BodyUseAPI": [], "Fixed commit": "c037c91fe07de8c6e5f61b30845d1ebb6de8e2e1", "Url": "https://api.github.com/repos/antonybholmes/matcalc-conversion", "Date": "2018-10-20T00:02:23Z"},
{"Line": "46=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.core.collections.IterMap<java.lang.String, java.util.Set<java.lang.String>>.get(java.lang.String)=>java.util.Map.Entry<java.lang.String, java.util.Set<java.lang.String>>.getValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1896/buggy-version/edu.columbia.rdf.matcalc.toolbox.conversion.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.conversion.GeneMapping.java", "BodyUseAPI": [], "Fixed commit": "c037c91fe07de8c6e5f61b30845d1ebb6de8e2e1", "Url": "https://api.github.com/repos/antonybholmes/matcalc-conversion", "Date": "2018-10-20T00:02:23Z"},
{"Line": "128=>128", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "qtiles[col].collidesWith(chairosoft.quadrado.game.QCollidable)=>chairosoft.quadrado.game.resource.tileset.QTile<?>.collidesWith(chairosoft.quadrado.game.QCollidable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5473/buggy-version/code.quadrado-parent.quadrado-core.src.main.java.chairosoft.quadrado.game.resource.maproom.QMapRoom.java", "BodyUseAPI": [], "Fixed commit": "5460d511665815748edbdee83ff95f3c81d329cb", "Url": "https://api.github.com/repos/nsaney/Quadrado", "Date": "2018-04-01T18:57:32Z"},
{"Line": "189=>185", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.daasuu.mp4compose.FillModeCustomItem.getScale()=>com.daasuu.mp4compose.FillModeCustomItem.getRotate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3093/buggy-version/mp4compose.src.main.java.com.daasuu.mp4compose.composer.DecoderSurface.java", "BodyUseAPI": [], "Fixed commit": "3582ebb9cab0d163805d52698e6b11014282830a", "Url": "https://api.github.com/repos/MasayukiSuda/Mp4Composer-android", "Date": "2018-02-05T05:38:56Z"},
{"Line": "189=>185", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.daasuu.mp4compose.FillModeCustomItem.getScale()=>com.daasuu.mp4compose.FillModeCustomItem.getRotate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3093/buggy-version/mp4compose.src.main.java.com.daasuu.mp4compose.composer.DecoderSurface.java", "BodyUseAPI": [], "Fixed commit": "3582ebb9cab0d163805d52698e6b11014282830a", "Url": "https://api.github.com/repos/MasayukiSuda/Mp4Composer-android", "Date": "2018-02-05T05:38:56Z"},
{"Line": "1349=>1349", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.gwt.user.client.Window.alert(java.lang.String)=>com.google.gwt.sample.itProjekt.client.ContactListContactTreeViewModel.updateContact(com.google.gwt.sample.itProjekt.shared.bo.Contact)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1586/buggy-version/src.com.google.gwt.sample.itProjekt.client.ContactForm.java", "BodyUseAPI": [], "Fixed commit": "3dd9ec533f814f994a2aef59955ef5be4a5c6171", "Url": "https://api.github.com/repos/KatrinZerfass/Rep_ITProjekt_SS18_Gr10", "Date": "2018-07-05T19:36:33Z"},
{"Line": "358=>360", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "parser.ast.Expression.evaluateExact(<nulltype>,parser.ast.Values)=>parser.ast.Expression.evaluateExact(parser.ast.Values)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1540/buggy-version/prism.src.parser.ast.ConstantList.java", "BodyUseAPI": [], "Fixed commit": "33ea1d1187cd4773e80339050f6c80271df7db0f", "Url": "https://api.github.com/repos/davexparker/prism", "Date": "2018-07-24T09:02:24Z"},
{"Line": "370=>372", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "parser.ast.Expression.evaluate(<nulltype>,parser.ast.Values)=>parser.ast.Expression.evaluate(parser.ast.Values)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1540/buggy-version/prism.src.parser.ast.ConstantList.java", "BodyUseAPI": [], "Fixed commit": "33ea1d1187cd4773e80339050f6c80271df7db0f", "Url": "https://api.github.com/repos/davexparker/prism", "Date": "2018-07-24T09:02:24Z"},
{"Line": "71=>71", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.openlmis.stockmanagement.service.referencedata.LotReferenceDataService.getPage(java.lang.String,java.util.HashMap<java.lang.String, java.lang.Object>)=>org.openlmis.stockmanagement.service.referencedata.LotReferenceDataService.getPage(java.util.HashMap<java.lang.String, java.lang.Object>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1560/buggy-version/src.main.java.org.openlmis.stockmanagement.service.referencedata.LotReferenceDataService.java", "BodyUseAPI": [], "Fixed commit": "01d30ac7854d16630f577611b3eb3134b62b49a2", "Url": "https://api.github.com/repos/OpenLMIS/openlmis-stockmanagement", "Date": "2018-02-09T13:23:08Z"},
{"Line": "293=>293", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<eppic.model.dto.Assembly>.size()=>ch.systemsx.sybit.crkwebui.client.commons.appdata.ApplicationContext.getPdbInfo().getValidAssemblies().size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2691/buggy-version/eppic-wui.src.main.java.ch.systemsx.sybit.crkwebui.client.main.controllers.MainController.java", "BodyUseAPI": [], "Fixed commit": "fb872441182285e096ef5c07d1cebb142e4736fe", "Url": "https://api.github.com/repos/eppic-team/eppic", "Date": "2018-08-24T21:36:53Z"},
{"Line": "353=>363", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "1.setup(org.json.JSONObject)=>1.setup(org.json.JSONObject,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/721/buggy-version/nsr.src.main.java.eu.neosurance.sdk.NSR.java", "BodyUseAPI": [], "Fixed commit": "428017d471c270edae56b750b9a60346af26b770", "Url": "https://api.github.com/repos/clickntap/android-neosurance-sdk", "Date": "2018-05-08T13:08:47Z"},
{"Line": "49=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.List<student_player.Node>.addAll(java.util.List<student_player.Node>)=>java.util.List<student_player.Node>.add(student_player.Node)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/620/buggy-version/src.student_player.Node.java", "BodyUseAPI": [], "Fixed commit": "af83720dbe9f649d48c2bdb29484c73a7fe36ef5", "Url": "https://api.github.com/repos/erickzhao/comp424", "Date": "2018-04-07T01:17:10Z"},
{"Line": "49=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.List<student_player.Node>.addAll(java.util.List<student_player.Node>)=>java.util.List<student_player.Node>.add(student_player.Node)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/620/buggy-version/src.student_player.Node.java", "BodyUseAPI": [], "Fixed commit": "af83720dbe9f649d48c2bdb29484c73a7fe36ef5", "Url": "https://api.github.com/repos/erickzhao/comp424", "Date": "2018-04-07T01:17:10Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.camel.Message.setHeader(java.lang.String,long)=>org.apache.camel.Message.setHeader(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6486/buggy-version/src.main.java.com.redhat.camel.AbstractRockNSMProcessor.java", "BodyUseAPI": [], "Fixed commit": "7557da4de9f18a16c85a6cb01af989f2d181d500", "Url": "https://api.github.com/repos/rlucente-se-jboss/consume-rocknsm", "Date": "2018-09-26T20:31:25Z"},
{"Line": "85=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "evaluatedResource.getObject().getSession()=>com.itba.domain.model.EvaluatedResource.getSession()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6917/buggy-version/src.main.java.com.itba.web.page.ErrorSelectionPage.java", "BodyUseAPI": [], "Fixed commit": "ce49331f8d0a9c959ee3e9c48e966e08f2f09956", "Url": "https://api.github.com/repos/gromarion/pf", "Date": "2018-02-12T20:32:43Z"},
{"Line": "277=>276", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "javax.crypto.Mac.doFinal(byte[])=>javax.crypto.Mac.clone()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8410/buggy-version/azure-storage.src.main.java.com.microsoft.azure.storage.blob.SharedKeyCredentials.java", "BodyUseAPI": [], "Fixed commit": "458ac6aff8e8b2a2b8125d32b766b01cace33dc6", "Url": "https://api.github.com/repos/rickle-msft/azure-storage-java-async", "Date": "2018-02-20T23:48:59Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ch.fhnw.edu.wodss.tippspielapi.tippspielApi.model.User.getAdmin()=>ch.fhnw.edu.wodss.tippspielapi.tippspielApi.model.User.getIsAdmin()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2345/buggy-version/src.main.java.ch.fhnw.edu.wodss.tippspielapi.tippspielApi.config.authentication.JwtAuthenticationProvider.java", "BodyUseAPI": [], "Fixed commit": "a72ba133c8ef6fc157b4dd9d75484a69199a7b63", "Url": "https://api.github.com/repos/fhnw-students/wodss-tippspiel-api", "Date": "2018-04-22T14:25:57Z"},
{"Line": "68=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ch.fhnw.edu.wodss.tippspielapi.tippspielApi.model.User.setAdmin(boolean)=>ch.fhnw.edu.wodss.tippspielapi.tippspielApi.model.User.setIsAdmin(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2345/buggy-version/src.main.java.ch.fhnw.edu.wodss.tippspielapi.tippspielApi.service.AuthenticationService.java", "BodyUseAPI": [], "Fixed commit": "a72ba133c8ef6fc157b4dd9d75484a69199a7b63", "Url": "https://api.github.com/repos/fhnw-students/wodss-tippspiel-api", "Date": "2018-04-22T14:25:57Z"},
{"Line": "48=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.ImageView.setOnClickListener(android.view.View.OnClickListener)=>android.widget.ImageView.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/161/buggy-version/app.src.main.java.com.example.nbacademy.myapp.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "e75e95b20b7b2c8f5d3ee244c02b7e5482d47ee2", "Url": "https://api.github.com/repos/SobralDaniel/academy2018", "Date": "2018-03-14T18:28:35Z"},
{"Line": "51=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "seedu.planner.model.Model.getFilteredModuleList()=>seedu.planner.model.Model.getFilteredTakenModuleList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7585/buggy-version/src.main.java.seedu.planner.logic.LogicManager.java", "BodyUseAPI": [], "Fixed commit": "0dd5eefc816b1d22a4a79af6cf572b0cc4dbdf15", "Url": "https://api.github.com/repos/GabrielYik/main", "Date": "2018-10-06T15:56:17Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "seedu.planner.model.Model.getFilteredModuleList()=>seedu.planner.model.Model.getFilteredAvailableModuleList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7585/buggy-version/src.main.java.seedu.planner.logic.LogicManager.java", "BodyUseAPI": [], "Fixed commit": "0dd5eefc816b1d22a4a79af6cf572b0cc4dbdf15", "Url": "https://api.github.com/repos/GabrielYik/main", "Date": "2018-10-06T15:56:17Z"},
{"Line": "181=>184", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "main.model.Book.generatePage(int)=>main.model.Book.generatePage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7062/buggy-version/src.main.model.Book.java", "BodyUseAPI": [], "Fixed commit": "271ea51c3bc7bc43c439c45eccb83109033e93d0", "Url": "https://api.github.com/repos/plastic12/NoteBook", "Date": "2018-04-18T08:26:15Z"},
{"Line": "452=>452", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "originInput.get().assignFromWithoutID(beast.core.parameter.RealParameter)=>originInput.get().setValue(java.lang.Double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5037/buggy-version/src.master.BeastTreeFromMaster.java", "BodyUseAPI": [], "Fixed commit": "2cbe4b8a066da064decd59044c19eeec44609cd8", "Url": "https://api.github.com/repos/tgvaughan/MASTER", "Date": "2018-09-19T10:42:52Z"},
{"Line": "261=>261", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.content.SharedPreferences.Editor.putInt(java.lang.String,int)=>android.content.SharedPreferences.Editor.putString(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8132/buggy-version/app.src.main.java.org.transdroid.core.app.settings.ApplicationSettings.java", "BodyUseAPI": [], "Fixed commit": "0461162759ef8ead08838f39cdc8386484400fdb", "Url": "https://api.github.com/repos/erickok/transdroid", "Date": "2018-01-11T10:37:45Z"},
{"Line": "80=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.FunctionReference.getParameters()=>com.jetbrains.php.lang.psi.elements.FunctionReference.getParameters()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7484/buggy-version/src.main.java.com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.java", "BodyUseAPI": [], "Fixed commit": "84e64feaede51f64e33280956e7a595ef1e30ce1", "Url": "https://api.github.com/repos/kalessil/phpinspectionsea", "Date": "2018-10-18T08:48:30Z"},
{"Line": "200=>203", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.apiUsage.PlainApiUseCheckStrategy.apply(java.lang.String,com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.FunctionReference,java.lang.String,java.lang.String,com.intellij.codeInspection.ProblemsHolder)=>com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.apiUsage.PlainApiUseCheckStrategy.apply(java.lang.String,com.jetbrains.php.lang.psi.elements.FunctionReference,java.lang.String,java.lang.String,com.intellij.codeInspection.ProblemsHolder)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7484/buggy-version/src.main.java.com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.java", "BodyUseAPI": [], "Fixed commit": "84e64feaede51f64e33280956e7a595ef1e30ce1", "Url": "https://api.github.com/repos/kalessil/phpinspectionsea", "Date": "2018-10-18T08:48:30Z"},
{"Line": "199=>202", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.apiUsage.FunctionCallCheckStrategy.apply(java.lang.String,com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.FunctionReference,com.intellij.codeInspection.ProblemsHolder)=>com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.apiUsage.FunctionCallCheckStrategy.apply(java.lang.String,com.jetbrains.php.lang.psi.elements.FunctionReference,com.intellij.codeInspection.ProblemsHolder)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7484/buggy-version/src.main.java.com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.java", "BodyUseAPI": [], "Fixed commit": "84e64feaede51f64e33280956e7a595ef1e30ce1", "Url": "https://api.github.com/repos/kalessil/phpinspectionsea", "Date": "2018-10-18T08:48:30Z"},
{"Line": "91=>94", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.1.checkRegex(java.lang.String,com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.FunctionReference,arguments[0],java.lang.String,java.lang.String)=>com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.1.checkRegex(java.lang.String,com.jetbrains.php.lang.psi.elements.FunctionReference,arguments[0],java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7484/buggy-version/src.main.java.com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.java", "BodyUseAPI": [], "Fixed commit": "84e64feaede51f64e33280956e7a595ef1e30ce1", "Url": "https://api.github.com/repos/kalessil/phpinspectionsea", "Date": "2018-10-18T08:48:30Z"},
{"Line": "203=>206", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.optimizeStrategy.UnnecessaryCaseManipulationCheckStrategy.apply(java.lang.String,com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.FunctionReference,java.lang.String,com.intellij.codeInspection.ProblemsHolder)=>com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.optimizeStrategy.UnnecessaryCaseManipulationCheckStrategy.apply(java.lang.String,com.jetbrains.php.lang.psi.elements.FunctionReference,java.lang.String,com.intellij.codeInspection.ProblemsHolder)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7484/buggy-version/src.main.java.com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.java", "BodyUseAPI": [], "Fixed commit": "84e64feaede51f64e33280956e7a595ef1e30ce1", "Url": "https://api.github.com/repos/kalessil/phpinspectionsea", "Date": "2018-10-18T08:48:30Z"},
{"Line": "78=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.FunctionReference.getName()=>com.jetbrains.php.lang.psi.elements.FunctionReference.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7484/buggy-version/src.main.java.com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.java", "BodyUseAPI": [], "Fixed commit": "84e64feaede51f64e33280956e7a595ef1e30ce1", "Url": "https://api.github.com/repos/kalessil/phpinspectionsea", "Date": "2018-10-18T08:48:30Z"},
{"Line": "76=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.1.isContainingFileSkipped(com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.FunctionReference)=>com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.1.isContainingFileSkipped(com.jetbrains.php.lang.psi.elements.FunctionReference)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7484/buggy-version/src.main.java.com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.java", "BodyUseAPI": [], "Fixed commit": "84e64feaede51f64e33280956e7a595ef1e30ce1", "Url": "https://api.github.com/repos/kalessil/phpinspectionsea", "Date": "2018-10-18T08:48:30Z"},
{"Line": "167=>170", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.optimizeStrategy.AmbiguousAnythingTrimCheckStrategy.apply(java.lang.String,com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.FunctionReference,java.lang.String,com.intellij.psi.PsiElement,com.intellij.codeInspection.ProblemsHolder)=>com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.optimizeStrategy.AmbiguousAnythingTrimCheckStrategy.apply(java.lang.String,com.jetbrains.php.lang.psi.elements.FunctionReference,java.lang.String,com.intellij.psi.PsiElement,com.intellij.codeInspection.ProblemsHolder)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7484/buggy-version/src.main.java.com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.java", "BodyUseAPI": [], "Fixed commit": "84e64feaede51f64e33280956e7a595ef1e30ce1", "Url": "https://api.github.com/repos/kalessil/phpinspectionsea", "Date": "2018-10-18T08:48:30Z"},
{"Line": "93=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.1.checkCall(java.lang.String,com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.FunctionReference,java.lang.String,java.lang.String)=>com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.1.checkCall(java.lang.String,com.jetbrains.php.lang.psi.elements.FunctionReference,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7484/buggy-version/src.main.java.com.kalessil.phpStorm.phpInspectionsEA.inspectors.regularExpressions.NotOptimalRegularExpressionsInspector.java", "BodyUseAPI": [], "Fixed commit": "84e64feaede51f64e33280956e7a595ef1e30ce1", "Url": "https://api.github.com/repos/kalessil/phpinspectionsea", "Date": "2018-10-18T08:48:30Z"},
{"Line": "197=>195", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.opcfoundation.ua.transport.tcp.nio.OpcTcpServerConnection.2.sendError(org.opcfoundation.ua.transport.tcp.impl.ErrorMessage)=>org.opcfoundation.ua.transport.tcp.nio.OpcTcpServerConnection.2.setError(org.opcfoundation.ua.common.ServiceResultException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8524/buggy-version/src.main.java.org.opcfoundation.ua.transport.tcp.nio.OpcTcpServerConnection.java", "BodyUseAPI": [], "Fixed commit": "6ebdda7bb1a89a08bc95f4e5629c529e93a92a76", "Url": "https://api.github.com/repos/OPCFoundation/UA-Java", "Date": "2018-08-08T11:18:43Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, fragment).commit()=>getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, fragment).addToBackStack(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2312/buggy-version/app.src.main.java.com.example.mostafa.pomodoro.Activities.BottomNavigatorActivity.java", "BodyUseAPI": [], "Fixed commit": "923121757b7192969c3fe1ddefdd10a7bd435d36", "Url": "https://api.github.com/repos/MostafaAmer-2/Pomodoro", "Date": "2018-08-29T15:36:10Z"},
{"Line": "131=>135", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.Runnable() { @java.lang.Override public void run() { android.content.Intent startIntent = new android.content.Intent(getApplicationContext(), artyfartyparty.solo.Controller.AllRidesActivity.class); startActivity(startIntent); } }=>new java.lang.Runnable() { @java.lang.Override public void run() { android.content.Intent startIntent = new android.content.Intent(getApplicationContext(), artyfartyparty.solo.Controller.AllRidesActivity.class); startActivity(startIntent); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2502/buggy-version/app.src.main.java.artyfartyparty.solo.Controller.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "3490dff24db4af92312615fb672db7cb34401704", "Url": "https://api.github.com/repos/AFPinc/Solo", "Date": "2018-03-10T14:38:40Z"},
{"Line": "131=>135", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "artyfartyparty.solo.Controller.LoginActivity.4.runOnUiThread(java.lang.Runnable)=>artyfartyparty.solo.Controller.LoginActivity.4.runOnUiThread(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2502/buggy-version/app.src.main.java.artyfartyparty.solo.Controller.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "3490dff24db4af92312615fb672db7cb34401704", "Url": "https://api.github.com/repos/AFPinc/Solo", "Date": "2018-03-10T14:38:40Z"},
{"Line": "126=>125", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Toast.makeText(context, finalMsg, Toast.LENGTH_LONG).show()=>artyfartyparty.solo.Controller.LoginActivity.4.runOnUiThread(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2502/buggy-version/app.src.main.java.artyfartyparty.solo.Controller.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "3490dff24db4af92312615fb672db7cb34401704", "Url": "https://api.github.com/repos/AFPinc/Solo", "Date": "2018-03-10T14:38:40Z"},
{"Line": "32=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(json.getString(\"dateFrom\"))=>java.lang.Long.parseLong(json.getString(\"fromDate\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2502/buggy-version/app.src.main.java.artyfartyparty.solo.Controller.Parser.java", "BodyUseAPI": [], "Fixed commit": "3490dff24db4af92312615fb672db7cb34401704", "Url": "https://api.github.com/repos/AFPinc/Solo", "Date": "2018-03-10T14:38:40Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(json.getString(\"dateFrom\"))=>java.lang.Long.parseLong(json.getString(\"fromDate\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2502/buggy-version/app.src.main.java.artyfartyparty.solo.Controller.Parser.java", "BodyUseAPI": [], "Fixed commit": "3490dff24db4af92312615fb672db7cb34401704", "Url": "https://api.github.com/repos/AFPinc/Solo", "Date": "2018-03-10T14:38:40Z"},
{"Line": "33=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(json.getString(\"dateTo\"))=>java.lang.Long.parseLong(json.getString(\"toDate\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2502/buggy-version/app.src.main.java.artyfartyparty.solo.Controller.Parser.java", "BodyUseAPI": [], "Fixed commit": "3490dff24db4af92312615fb672db7cb34401704", "Url": "https://api.github.com/repos/AFPinc/Solo", "Date": "2018-03-10T14:38:40Z"},
{"Line": "34=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Button.setOnClickListener(View.onClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2526/buggy-version/app.src.main.java.com.ips.inplainsight.GameLobby.java", "BodyUseAPI": [], "Fixed commit": "203769ea69af0f4753680f75de256ca55db80955", "Url": "https://api.github.com/repos/Nix95/Senior-Design", "Date": "2018-10-08T18:49:31Z"},
{"Line": "70=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.rosehulman.podczemd.wheres_my_puzzle.Fragments.CurrentHuntsFragment.setArguments(android.os.Bundle)=>edu.rosehulman.podczemd.wheres_my_puzzle.Fragments.ActiveHuntFragment.setArguments(android.os.Bundle)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9098/buggy-version/app.src.main.java.edu.rosehulman.podczemd.wheres_my_puzzle.Fragments.ActiveHuntFragment.java", "BodyUseAPI": [], "Fixed commit": "f626f2169e5fe0a9aeed6f051ec3aaa15758537b", "Url": "https://api.github.com/repos/lee5790/Wheres-My-Puzzle", "Date": "2018-05-06T19:04:48Z"},
{"Line": "254=>254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.utils.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5196/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "d1eabc474f8fcaddf28d9625702a0d032729895c", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "231=>231", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.utils.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5196/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "d1eabc474f8fcaddf28d9625702a0d032729895c", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "291=>291", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "hrefs.get(0).toString()=>hrefs.get(0).asLiteral()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/546/buggy-version/src.main.java.client.discovery.IteratorDiscovery.java", "BodyUseAPI": [], "Fixed commit": "55875e02129589a385c5ebcf4e6d8ea27e652101", "Url": "https://api.github.com/repos/vicinityh2020/vicinity-open-gateway-api-distributed-query-client", "Date": "2018-05-31T09:17:19Z"},
{"Line": "68=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.concrete.inventory.gui.widget.WFieldedLabel,int,int,int,int)=>com.elytradev.marsenal.gui.widget.WLabel.withFields(net.minecraft.inventory.IInventory,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerRunicAltar.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "68=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.concrete.inventory.gui.widget.WFieldedLabel,int,int,int,int)=>com.elytradev.marsenal.gui.widget.WLabel.withFields(net.minecraft.inventory.IInventory,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerRunicAltar.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "208=>212", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WSwappableImage.setImage(net.minecraft.util.ResourceLocation)=>com.elytradev.marsenal.gui.widget.WSwappableImage.setImage(net.minecraft.util.ResourceLocation)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "167=>171", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WButton.setOnClick(this::next)=>com.elytradev.marsenal.gui.widget.WButton.setOnClick(this::next)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "164=>168", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.WButton,int,int)=>com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.widget.WButton,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "203=>207", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WTextArea.setLocation(rightPage.getX(),int)=>com.elytradev.marsenal.gui.widget.WTextArea.setLocation(rightPage.getX(),int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "195=>199", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WTextArea.setLocation(leftPage.getX(),int)=>com.elytradev.marsenal.gui.widget.WTextArea.setLocation(leftPage.getX(),int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "197=>201", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WTextArea.getX()=>com.elytradev.marsenal.gui.widget.WTextArea.getX()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "200=>204", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WItemDisplay.setItemStack(net.minecraft.item.ItemStack)=>com.elytradev.marsenal.gui.widget.WItemDisplay.setItemStack(net.minecraft.item.ItemStack)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "193=>197", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WTextArea.setText(net.minecraft.util.text.ITextComponent)=>com.elytradev.marsenal.gui.widget.WTextArea.setText(net.minecraft.util.text.ITextComponent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "212=>216", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WButton.setEnabled(boolean)=>com.elytradev.marsenal.gui.widget.WButton.setEnabled(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "197=>201", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WTextArea.setLocation(leftPage.getX(),int)=>com.elytradev.marsenal.gui.widget.WTextArea.setLocation(leftPage.getX(),int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "162=>166", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WButton.setImage(net.minecraft.util.ResourceLocation)=>com.elytradev.marsenal.gui.widget.WButton.setImage(net.minecraft.util.ResourceLocation)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "192=>196", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WSwappableImage.setImage(net.minecraft.util.ResourceLocation)=>com.elytradev.marsenal.gui.widget.WSwappableImage.setImage(net.minecraft.util.ResourceLocation)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "157=>161", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.WItemDisplay,int,int,int,int)=>com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.widget.WItemDisplay,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "163=>167", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WButton.setOnClick(this::previous)=>com.elytradev.marsenal.gui.widget.WButton.setOnClick(this::previous)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "150=>154", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.WTextArea,int,int,int,int)=>com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.widget.WTextArea,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "147=>151", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.WSwappableImage,int,int,int,int)=>com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.widget.WSwappableImage,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "156=>160", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WItemDisplay.setItemStack(net.minecraft.item.ItemStack)=>com.elytradev.marsenal.gui.widget.WItemDisplay.setItemStack(net.minecraft.item.ItemStack)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "166=>170", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WButton.setImage(net.minecraft.util.ResourceLocation)=>com.elytradev.marsenal.gui.widget.WButton.setImage(net.minecraft.util.ResourceLocation)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "195=>199", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WTextArea.getX()=>com.elytradev.marsenal.gui.widget.WTextArea.getX()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "153=>157", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.WSwappableImage,int,int,int,int)=>com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.widget.WSwappableImage,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "201=>205", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WTextArea.setText(net.minecraft.util.text.ITextComponent)=>com.elytradev.marsenal.gui.widget.WTextArea.setText(net.minecraft.util.text.ITextComponent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "213=>217", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WButton.setEnabled(boolean)=>com.elytradev.marsenal.gui.widget.WButton.setEnabled(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "205=>209", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WTextArea.getX()=>com.elytradev.marsenal.gui.widget.WTextArea.getX()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "205=>209", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WTextArea.setLocation(rightPage.getX(),int)=>com.elytradev.marsenal.gui.widget.WTextArea.setLocation(rightPage.getX(),int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "203=>207", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WTextArea.getX()=>com.elytradev.marsenal.gui.widget.WTextArea.getX()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "160=>164", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.WTextArea,int,int,int,int)=>com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.widget.WTextArea,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "168=>172", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.WButton,int,int)=>com.elytradev.concrete.inventory.gui.widget.WPlainPanel.add(com.elytradev.marsenal.gui.widget.WButton,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerCodex.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "55=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WSprite.setDelays(int[])=>com.elytradev.marsenal.gui.widget.WSprite.setDelays(int[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerBeacon.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "54=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.elytradev.marsenal.gui.WSprite.setAnimation(int[],int)=>com.elytradev.marsenal.gui.widget.WSprite.setAnimation(int[],int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerBeacon.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "57=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.elytradev.concrete.inventory.gui.widget.WGridPanel.add(com.elytradev.marsenal.gui.WSprite,int,int,int,int)=>com.elytradev.concrete.inventory.gui.widget.WGridPanel.add(com.elytradev.marsenal.gui.widget.WSprite,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4644/buggy-version/src.main.java.com.elytradev.marsenal.gui.ContainerBeacon.java", "BodyUseAPI": [], "Fixed commit": "227c5dcdef4cf42702b30acaa5b7f0d8ca5fd7fc", "Url": "https://api.github.com/repos/elytra/MagicArsenal", "Date": "2018-06-08T15:47:52Z"},
{"Line": "46=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.valueOf(int)=>java.lang.String.valueOf(float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9208/buggy-version/app.src.main.java.com.example.android.inventory.InventoryCursorAdapter.java", "BodyUseAPI": [], "Fixed commit": "7cfb08a40f34eb0cb29d2da1cfa13013271894a5", "Url": "https://api.github.com/repos/VladShaternik/Inventory", "Date": "2018-09-11T03:53:04Z"},
{"Line": "53=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.Integer, java.lang.Integer>.keySet()=>java.util.ArrayList<java.lang.Integer>.toArray()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7375/buggy-version/app.src.main.java.be.henallux.masi.bendergame.model.conditions.ConditionBigFlush.java", "BodyUseAPI": [], "Fixed commit": "c8ce684703254e04c2d021d88a6b34d9d5aca8e6", "Url": "https://api.github.com/repos/ArthurAttout/BenderGame", "Date": "2018-08-08T13:59:48Z"},
{"Line": "52=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<java.lang.Integer>.size()=>java.util.ArrayList<java.lang.Integer>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7375/buggy-version/app.src.main.java.be.henallux.masi.bendergame.model.conditions.ConditionBigFlush.java", "BodyUseAPI": [], "Fixed commit": "c8ce684703254e04c2d021d88a6b34d9d5aca8e6", "Url": "https://api.github.com/repos/ArthurAttout/BenderGame", "Date": "2018-08-08T13:59:48Z"},
{"Line": "51=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<java.lang.Integer>.size()=>java.util.ArrayList<java.lang.Integer>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7375/buggy-version/app.src.main.java.be.henallux.masi.bendergame.model.conditions.ConditionBigFlush.java", "BodyUseAPI": [], "Fixed commit": "c8ce684703254e04c2d021d88a6b34d9d5aca8e6", "Url": "https://api.github.com/repos/ArthurAttout/BenderGame", "Date": "2018-08-08T13:59:48Z"},
{"Line": "53=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<java.lang.Integer>.toArray()=>java.util.ArrayList<java.lang.Integer>.toArray()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7375/buggy-version/app.src.main.java.be.henallux.masi.bendergame.model.conditions.ConditionBigFlush.java", "BodyUseAPI": [], "Fixed commit": "c8ce684703254e04c2d021d88a6b34d9d5aca8e6", "Url": "https://api.github.com/repos/ArthurAttout/BenderGame", "Date": "2018-08-08T13:59:48Z"},
{"Line": "53=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<java.lang.Integer>.toArray()=>java.util.ArrayList<java.lang.Integer>.toArray()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7375/buggy-version/app.src.main.java.be.henallux.masi.bendergame.model.conditions.ConditionBigFlush.java", "BodyUseAPI": [], "Fixed commit": "c8ce684703254e04c2d021d88a6b34d9d5aca8e6", "Url": "https://api.github.com/repos/ArthurAttout/BenderGame", "Date": "2018-08-08T13:59:48Z"},
{"Line": "33=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Collections.sort(java.util.List<java.lang.Integer>,java.util.Comparator<java.lang.Integer>)=>java.util.Collections.sort(java.util.ArrayList<java.lang.Integer>,java.util.Comparator<java.lang.Integer>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7375/buggy-version/app.src.main.java.be.henallux.masi.bendergame.model.conditions.ConditionBigFlush.java", "BodyUseAPI": [], "Fixed commit": "c8ce684703254e04c2d021d88a6b34d9d5aca8e6", "Url": "https://api.github.com/repos/ArthurAttout/BenderGame", "Date": "2018-08-08T13:59:48Z"},
{"Line": "55=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<java.lang.Integer>.toArray()=>java.util.ArrayList<java.lang.Integer>.toArray()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7375/buggy-version/app.src.main.java.be.henallux.masi.bendergame.model.conditions.ConditionBigFlush.java", "BodyUseAPI": [], "Fixed commit": "c8ce684703254e04c2d021d88a6b34d9d5aca8e6", "Url": "https://api.github.com/repos/ArthurAttout/BenderGame", "Date": "2018-08-08T13:59:48Z"},
{"Line": "114=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javafx.scene.layout.Pane.opacityProperty()=>javafx.scene.Node.opacityProperty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7371/buggy-version/source.java.library.ui.BaseController.java", "BodyUseAPI": [], "Fixed commit": "4bad494e943c66a3ae0d1c58892c3acb96a4f4dd", "Url": "https://api.github.com/repos/srikavin/BookKeeper", "Date": "2018-03-11T00:39:32Z"},
{"Line": "173=>174", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javafx.scene.layout.Pane.opacityProperty()=>javafx.scene.Node.opacityProperty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7371/buggy-version/source.java.library.ui.BaseController.java", "BodyUseAPI": [], "Fixed commit": "4bad494e943c66a3ae0d1c58892c3acb96a4f4dd", "Url": "https://api.github.com/repos/srikavin/BookKeeper", "Date": "2018-03-11T00:39:32Z"},
{"Line": "163=>164", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javafx.scene.layout.Pane.opacityProperty()=>javafx.scene.Node.opacityProperty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7371/buggy-version/source.java.library.ui.BaseController.java", "BodyUseAPI": [], "Fixed commit": "4bad494e943c66a3ae0d1c58892c3acb96a4f4dd", "Url": "https://api.github.com/repos/srikavin/BookKeeper", "Date": "2018-03-11T00:39:32Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javafx.scene.layout.Pane.translateYProperty()=>javafx.scene.Node.translateYProperty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7371/buggy-version/source.java.library.ui.BaseController.java", "BodyUseAPI": [], "Fixed commit": "4bad494e943c66a3ae0d1c58892c3acb96a4f4dd", "Url": "https://api.github.com/repos/srikavin/BookKeeper", "Date": "2018-03-11T00:39:32Z"},
{"Line": "119=>120", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javafx.scene.layout.Pane.opacityProperty()=>javafx.scene.Node.opacityProperty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7371/buggy-version/source.java.library.ui.BaseController.java", "BodyUseAPI": [], "Fixed commit": "4bad494e943c66a3ae0d1c58892c3acb96a4f4dd", "Url": "https://api.github.com/repos/srikavin/BookKeeper", "Date": "2018-03-11T00:39:32Z"},
{"Line": "41=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.sunbird.common.models.util.ProjectLogger.log(java.lang.String)=>org.sunbird.common.models.util.ProjectLogger.log(java.lang.String,java.lang.String,LoggerEnum.INFO.name())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9131/buggy-version/common-util.src.main.java.org.sunbird.telemetry.util.TelemetryDispatcherEkstep.java", "BodyUseAPI": [], "Fixed commit": "93239b99cc434596e3e20085eb92aab84a80794a", "Url": "https://api.github.com/repos/project-sunbird/sunbird-utils", "Date": "2018-03-23T13:34:29Z"},
{"Line": "29=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.SharedPreferences.getString(com.keyeswest.trackme.TripListFragment.SORT_PREFERENCES_KEY,com.keyeswest.trackme.TripListFragment.DEFAULT_FILTER.getCode())=>android.content.SharedPreferences.getString(com.keyeswest.trackme.FilterPreferences.SORT_PREFERENCES_KEY,FilterPreferences.DEFAULT_FILTER.getCode())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8194/buggy-version/app.src.main.java.com.keyeswest.trackme.data.SegmentLoader.java", "BodyUseAPI": [], "Fixed commit": "41aacfab1184a587fe8d4838c87dd2b234107935", "Url": "https://api.github.com/repos/chipk215/CapstoneProject", "Date": "2018-05-12T16:07:20Z"},
{"Line": "27=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.Context.getSharedPreferences(com.keyeswest.trackme.TripListFragment.FILTER_PREFERENCES,context.MODE_PRIVATE)=>android.content.Context.getSharedPreferences(com.keyeswest.trackme.FilterPreferences.FILTER_PREFERENCES,context.MODE_PRIVATE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8194/buggy-version/app.src.main.java.com.keyeswest.trackme.data.SegmentLoader.java", "BodyUseAPI": [], "Fixed commit": "41aacfab1184a587fe8d4838c87dd2b234107935", "Url": "https://api.github.com/repos/chipk215/CapstoneProject", "Date": "2018-05-12T16:07:20Z"},
{"Line": "863=>864", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.structr.schema.SchemaService.getDynamicSchema().getType(java.lang.String)=>org.structr.schema.SchemaService.getDynamicSchema().getType(java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1184/buggy-version/structr-core.src.main.java.org.structr.schema.export.StructrTypeDefinition.java", "BodyUseAPI": [], "Fixed commit": "df47d5962c862b12bfc33a3e35cabcbf7cff1da5", "Url": "https://api.github.com/repos/structr/structr", "Date": "2018-04-23T07:55:16Z"},
{"Line": "138=>139", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.loopj.android.http.RequestParams.put(java.lang.String,int)=>com.loopj.android.http.RequestParams.put(java.lang.String,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/193/buggy-version/app.src.main.java.me.jwill2385.natville.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "dd679e3052fd97cdecde59741e92993c6abcac07", "Url": "https://api.github.com/repos/droid-squad/Natville", "Date": "2018-07-23T20:54:33Z"},
{"Line": "166=>158", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.ruinscraft.powder.util.PowderUtil.sendPrefixMessage(org.bukkit.entity.Player,Message.CANCEL_NO_ACTIVE,java.lang.String,player.getName())=>com.ruinscraft.powder.util.PowderUtil.sendPrefixMessage(org.bukkit.entity.Player,Message.CANCEL_NO_ACTIVE,java.lang.String,player.getName(),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1174/buggy-version/src.main.java.com.ruinscraft.powder.PowderCommand.java", "BodyUseAPI": [], "Fixed commit": "ca1c04b4017a48baae0ecd386995dcf81e97a4dc", "Url": "https://api.github.com/repos/Ruinscraft/Powder", "Date": "2018-05-28T17:21:25Z"},
{"Line": "491=>496", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.Runnable() { @java.lang.Override public void run() { if ((weather != null) && (\"ok\".equals(weather.status))) { android.content.SharedPreferences.Editor editor = prefs.edit(); editor.putString(\"weather\", responseText); editor.apply(); showWeatherInfo(weather); }else { android.widget.Toast.makeText(com.elapse.easyweather.Main2Activity.this, \"requestWeather failed\", Toast.LENGTH_SHORT).show(); } swipeRefresh.setRefreshing(false); } }=>new java.lang.Runnable() { @java.lang.Override public void run() { if ((weather != null) && (\"ok\".equals(weather.status))) { android.content.SharedPreferences.Editor editor = prefs.edit(); editor.putString(\"weather\", responseText); editor.apply(); showWeatherInfo(weather); }else { android.widget.Toast.makeText(com.elapse.easyweather.Main2Activity.this, \"requestWeather failed\", Toast.LENGTH_SHORT).show(); } swipeRefresh.setRefreshing(false); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9273/buggy-version/app.src.main.java.com.elapse.easyweather.Main2Activity.java", "BodyUseAPI": [], "Fixed commit": "bdac29e1f567106859de53c95a145d2821466f66", "Url": "https://api.github.com/repos/YFdev/EasyWeather2", "Date": "2018-07-07T15:08:21Z"},
{"Line": "491=>496", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.elapse.easyweather.Main2Activity.5.runOnUiThread(java.lang.Runnable)=>com.elapse.easyweather.Main2Activity.5.runOnUiThread(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9273/buggy-version/app.src.main.java.com.elapse.easyweather.Main2Activity.java", "BodyUseAPI": [], "Fixed commit": "bdac29e1f567106859de53c95a145d2821466f66", "Url": "https://api.github.com/repos/YFdev/EasyWeather2", "Date": "2018-07-07T15:08:21Z"},
{"Line": "178=>178", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)=>java.lang.Class.forName(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2723/buggy-version/src.jse.org.luaj.vm2.lib.jse.LuajavaLib.java", "BodyUseAPI": [], "Fixed commit": "5334c2d55ba30b099a1ee9a423fee287214ecd48", "Url": "https://api.github.com/repos/Hubs-App/luaj", "Date": "2018-05-04T15:33:04Z"},
{"Line": "195=>197", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.thunderbolt.common.NumberSerializer.serialize(int)=>java.io.ByteArrayOutputStream.write(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5076/buggy-version/src.main.java.com.thunderbolt.persistence.UnspentTransactionOutput.java", "BodyUseAPI": [], "Fixed commit": "636db80ffc4595f9356ee2b7db530ce8db7b5020", "Url": "https://api.github.com/repos/AngelCastilloB/java-thunderbolt", "Date": "2018-05-04T13:53:39Z"},
{"Line": "29=>36", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.linka.lockapp.aos.module.helpers.LogHelper.e(java.lang.String,(\"Message Notification Title: \" + (remoteMessage.getNotification().getTitle())))=>com.linka.lockapp.aos.module.helpers.LogHelper.e(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1810/buggy-version/app.src.main.java.com.linka.lockapp.aos.module.gcm.myFirebaseMessagingService.java", "BodyUseAPI": [], "Fixed commit": "eb9d6a6812d9032b86b4bf8badcafae04e31656c", "Url": "https://api.github.com/repos/gkurghinyan/LINKA-android-app", "Date": "2018-06-13T12:06:14Z"},
{"Line": "34=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.linka.lockapp.aos.AppMainActivity.getInstance()=>new android.support.v4.app.NotificationCompat.Builder(this).setSmallIcon(R.mipmap.ic_launcher).setContentTitle(title).setContentText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1810/buggy-version/app.src.main.java.com.linka.lockapp.aos.module.gcm.myFirebaseMessagingService.java", "BodyUseAPI": [], "Fixed commit": "eb9d6a6812d9032b86b4bf8badcafae04e31656c", "Url": "https://api.github.com/repos/gkurghinyan/LINKA-android-app", "Date": "2018-06-13T12:06:14Z"},
{"Line": "30=>37", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.linka.lockapp.aos.module.helpers.LogHelper.e(java.lang.String,(\"Body: \" + (remoteMessage.getNotification().getBody())))=>com.linka.lockapp.aos.module.helpers.LogHelper.e(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1810/buggy-version/app.src.main.java.com.linka.lockapp.aos.module.gcm.myFirebaseMessagingService.java", "BodyUseAPI": [], "Fixed commit": "eb9d6a6812d9032b86b4bf8badcafae04e31656c", "Url": "https://api.github.com/repos/gkurghinyan/LINKA-android-app", "Date": "2018-06-13T12:06:14Z"},
{"Line": "148=>149", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.Long, java.lang.String>.put(java.lang.Long,java.lang.String)=>java.util.HashMap<java.lang.String, java.lang.Long>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3636/buggy-version/src.main.java.habit.controllers.TaskController.java", "BodyUseAPI": [], "Fixed commit": "0bc48b5a34b57eb0f72b8c98026c41085178a042", "Url": "https://api.github.com/repos/JacobNRoman/habit-builder-v2", "Date": "2018-04-12T02:34:41Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.poixson.utils.ReflectUtils.getMethodByName(java.lang.Object,java.lang.String)=>com.poixson.utils.ReflectUtils.getMethodByName(java.lang.Object,java.lang.String,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9897/buggy-version/core.src.com.poixson.tools.remapped.RemappedMethod.java", "BodyUseAPI": [], "Fixed commit": "5298501b7af154c8a2cc55c853c04ede32ecec23", "Url": "https://api.github.com/repos/GrowControl/pxnCommon", "Date": "2018-05-16T20:43:26Z"},
{"Line": "26=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.poixson.utils.ReflectUtils.getMethodByName(java.lang.Object,java.lang.String)=>com.poixson.utils.ReflectUtils.getMethodByName(java.lang.Object,java.lang.String,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9897/buggy-version/core.src.com.poixson.tools.remapped.RemappedMethod.java", "BodyUseAPI": [], "Fixed commit": "5298501b7af154c8a2cc55c853c04ede32ecec23", "Url": "https://api.github.com/repos/GrowControl/pxnCommon", "Date": "2018-05-16T20:43:26Z"},
{"Line": "15=>16", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.projectileknockback.ConfigLoader.loadConfig(com.projectileknockback.Plugin)=>com.projectileknockback.Loader.loadConfig(com.projectileknockback.Plugin)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4949/buggy-version/src.com.projectileknockback.Plugin.java", "BodyUseAPI": [], "Fixed commit": "b8140df8b19fe10f98bd9c825a345c853cd75a6b", "Url": "https://api.github.com/repos/klokailo/ProjectileKnockback", "Date": "2018-03-14T15:30:42Z"},
{"Line": "13=>17", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "this.getServer().getPluginManager().registerEvents(com.projectileknockback.EventListener,com.projectileknockback.Plugin)=>this.getServer().getPluginManager().registerEvents(com.projectileknockback.events.ModuleProjectileHit,com.projectileknockback.Plugin)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4949/buggy-version/src.com.projectileknockback.Plugin.java", "BodyUseAPI": [], "Fixed commit": "b8140df8b19fe10f98bd9c825a345c853cd75a6b", "Url": "https://api.github.com/repos/klokailo/ProjectileKnockback", "Date": "2018-03-14T15:30:42Z"},
{"Line": "15=>16", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.projectileknockback.ConfigLoader.loadConfig(com.projectileknockback.Plugin)=>com.projectileknockback.Loader.loadConfig(com.projectileknockback.Plugin)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4949/buggy-version/src.com.projectileknockback.Plugin.java", "BodyUseAPI": [], "Fixed commit": "b8140df8b19fe10f98bd9c825a345c853cd75a6b", "Url": "https://api.github.com/repos/klokailo/ProjectileKnockback", "Date": "2018-03-14T15:30:42Z"},
{"Line": "279=>279", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "androidx.legacy.view.ViewCompat.getPaddingStart(com.alimuzaffar.lib.pin.PinEntryEditText)=>androidx.core.view.ViewCompat.getPaddingStart(com.alimuzaffar.lib.pin.PinEntryEditText)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8646/buggy-version/pinentryedittext.src.main.java.com.alimuzaffar.lib.pin.PinEntryEditText.java", "BodyUseAPI": [], "Fixed commit": "706f5e52e4e25bb8b4a69450d8d0b324f089fe60", "Url": "https://api.github.com/repos/alphamu/PinEntryEditText", "Date": "2018-10-10T04:56:58Z"},
{"Line": "262=>262", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "androidx.legacy.view.ViewCompat.getPaddingStart(com.alimuzaffar.lib.pin.PinEntryEditText)=>androidx.core.view.ViewCompat.getPaddingStart(com.alimuzaffar.lib.pin.PinEntryEditText)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8646/buggy-version/pinentryedittext.src.main.java.com.alimuzaffar.lib.pin.PinEntryEditText.java", "BodyUseAPI": [], "Fixed commit": "706f5e52e4e25bb8b4a69450d8d0b324f089fe60", "Url": "https://api.github.com/repos/alphamu/PinEntryEditText", "Date": "2018-10-10T04:56:58Z"},
{"Line": "262=>262", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "androidx.legacy.view.ViewCompat.getPaddingEnd(com.alimuzaffar.lib.pin.PinEntryEditText)=>androidx.core.view.ViewCompat.getPaddingEnd(com.alimuzaffar.lib.pin.PinEntryEditText)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8646/buggy-version/pinentryedittext.src.main.java.com.alimuzaffar.lib.pin.PinEntryEditText.java", "BodyUseAPI": [], "Fixed commit": "706f5e52e4e25bb8b4a69450d8d0b324f089fe60", "Url": "https://api.github.com/repos/alphamu/PinEntryEditText", "Date": "2018-10-10T04:56:58Z"},
{"Line": "146=>148", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.igp.handles.vendorpanel.utils.Order.OrderUtil.getComponentListFromComponentInfo(orderProducts.getOrderId(),java.util.List<com.igp.handles.vendorpanel.models.Order.OrderComponent>,com.igp.handles.vendorpanel.models.Order.OrderProductExtraInfo,boolean)=>com.igp.handles.vendorpanel.utils.Order.OrderUtil.getProductComponents(orderProducts.getProductId(),int,orderProducts.getProducts_code(),java.util.List<com.igp.handles.vendorpanel.models.Order.OrderComponent>,com.igp.handles.vendorpanel.models.Order.OrderProductExtraInfo,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7807/buggy-version/api.src.main.java.com.igp.handles.vendorpanel.mappers.Order.OrderMapper.java", "BodyUseAPI": [], "Fixed commit": "07a299e1a1a935fb277816ce0f747ae2814955ed", "Url": "https://api.github.com/repos/shashank-igp/newadminpanel", "Date": "2018-02-19T14:01:15Z"},
{"Line": "146=>148", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.igp.handles.vendorpanel.models.Order.OrdersProducts.getOrderId()=>com.igp.handles.vendorpanel.models.Order.OrdersProducts.getProductId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7807/buggy-version/api.src.main.java.com.igp.handles.vendorpanel.mappers.Order.OrderMapper.java", "BodyUseAPI": [], "Fixed commit": "07a299e1a1a935fb277816ce0f747ae2814955ed", "Url": "https://api.github.com/repos/shashank-igp/newadminpanel", "Date": "2018-02-19T14:01:15Z"},
{"Line": "101=>101", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "mDatabaseReference.child(\"users\").push()=>mDatabaseReference.child(\"users\").child(user.getUid())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/270/buggy-version/app.src.main.java.nelim.twinkle.AddExpenditure.java", "BodyUseAPI": [], "Fixed commit": "147531ff60fa27caaa9b9f213ec7f2a26452a3a7", "Url": "https://api.github.com/repos/MilenOrfeev/Twinkle", "Date": "2018-02-04T23:17:07Z"},
{"Line": "21=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ballistic.persistence.HotalRepository.findAll()=>com.ballistic.service.HotelService.getHotel()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2874/buggy-version/multi-mudule.web.src.main.java.com.ballistic.web.controller.HotelController.java", "BodyUseAPI": [], "Fixed commit": "437a236c336c5c0b4c2044e9082aa7c663a6827f", "Url": "https://api.github.com/repos/NABEEL-AHMED-JAMIL/pdftest", "Date": "2018-04-26T12:18:00Z"},
{"Line": "21=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ballistic.persistence.HotalRepository.findAll()=>com.ballistic.service.HotelService.getHotel()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2874/buggy-version/multi-mudule.web.src.main.java.com.ballistic.web.controller.HotelController.java", "BodyUseAPI": [], "Fixed commit": "437a236c336c5c0b4c2044e9082aa7c663a6827f", "Url": "https://api.github.com/repos/NABEEL-AHMED-JAMIL/pdftest", "Date": "2018-04-26T12:18:00Z"},
{"Line": "41=>41", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "product.CatalogItem(long,java.lang.String,java.lang.String,float,int,java.lang.String,float,java.lang.String,byte[])=>product.CatalogItem(long,java.lang.String,java.lang.String,float,int,java.lang.String,float,java.lang.String,byte[],int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9465/buggy-version/src.order.OrderItemView.java", "BodyUseAPI": [], "Fixed commit": "45ad3fb6b096f31a803a4082c3ea7e3aabeadb85", "Url": "https://api.github.com/repos/XmakerenX/prototype", "Date": "2018-01-11T10:05:15Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.parse.ParseObject.put(java.lang.String,java.lang.String)=>com.parse.ParseObject.put(java.lang.String,incident.getId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4616/buggy-version/app.src.main.java.com.hackathon.nasscom.csscams.ParseHelper.java", "BodyUseAPI": [], "Fixed commit": "45bd51f54edf53aa7e1b3d630ed5a8afbe4e84fb", "Url": "https://api.github.com/repos/PaytmBuildForIndia/CAMS", "Date": "2018-04-08T04:05:58Z"},
{"Line": "93=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.UUID.toString()=>com.hackathon.nasscom.csscams.models.Incident.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4616/buggy-version/app.src.main.java.com.hackathon.nasscom.csscams.ParseHelper.java", "BodyUseAPI": [], "Fixed commit": "45bd51f54edf53aa7e1b3d630ed5a8afbe4e84fb", "Url": "https://api.github.com/repos/PaytmBuildForIndia/CAMS", "Date": "2018-04-08T04:05:58Z"},
{"Line": "35=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.Exception.printStackTrace()=>getServletContext().getRequestDispatcher(Actions.ERROR.command.getJsp()).forward(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/815/buggy-version/src.by.it.verishko.project.java.controller.FrontController.java", "BodyUseAPI": [], "Fixed commit": "47616f0e6cc8878d9eeb5fc35887ded59d3ab726", "Url": "https://api.github.com/repos/Khmelov/JD2018-03-22", "Date": "2018-06-07T09:40:52Z"},
{"Line": "28=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "de.reloxien.epic.utils.Items.hasDisplayName(org.bukkit.inventory.ItemStack,ItemTexts.ItemFractionsHelmet)=>de.reloxien.epic.utils.Items.containsDisplayName(org.bukkit.inventory.ItemStack,ItemTexts.ItemFractionsHelmet)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2896/buggy-version/EpicSurvival.src.de.reloxien.epic.listeners.items.DenyItemUsage.java", "BodyUseAPI": [], "Fixed commit": "01637b3fcdf61c0157687f77a47507e15815cd4e", "Url": "https://api.github.com/repos/Reloxien/EpicSurvival", "Date": "2018-07-11T10:04:10Z"},
{"Line": "45=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "de.reloxien.epic.utils.Items.hasDisplayName(org.bukkit.inventory.ItemStack,ItemTexts.ItemFractionsHelmet)=>de.reloxien.epic.utils.Items.containsDisplayName(org.bukkit.inventory.ItemStack,ItemTexts.ItemFractionsHelmet)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2896/buggy-version/EpicSurvival.src.de.reloxien.epic.listeners.items.DenyItemUsage.java", "BodyUseAPI": [], "Fixed commit": "01637b3fcdf61c0157687f77a47507e15815cd4e", "Url": "https://api.github.com/repos/Reloxien/EpicSurvival", "Date": "2018-07-11T10:04:10Z"},
{"Line": "110=>110", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "kr.jm.utils.helper.JMFiles.readLines(java.io.File)=>kr.jm.utils.helper.JMFiles.readLines(java.nio.file.Path)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9130/buggy-version/src.main.java.kr.jm.utils.helper.JMFiles.java", "BodyUseAPI": [], "Fixed commit": "c7dea83922135366564705a05498e2a4f6908a31", "Url": "https://api.github.com/repos/JM-Lab/utils-java8", "Date": "2018-01-23T02:45:20Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "gui.fields.Mast.setFill(Color.FUCHSIA)=>gui.fields.Mast.setFill(Color.DARKGREEN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6979/buggy-version/client.src.main.java.gui.fields.Mast.java", "BodyUseAPI": [], "Fixed commit": "e0bb9920387a150dd0acc694d5cf5691b16a3818", "Url": "https://api.github.com/repos/patiem/ships_JA", "Date": "2018-01-22T16:16:54Z"},
{"Line": "68=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Map<jnr.ffi.TypeAlias, jnr.ffi.NativeType>.put(TypeAlias.speed_t,NativeType.UINT)=>java.util.Map<jnr.ffi.TypeAlias, jnr.ffi.NativeType>.put(TypeAlias.speed_t,NativeType.ULONG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1702/buggy-version/src.main.java.jnr.ffi.provider.jffi.platform.x86_64.darwin.TypeAliases.java", "BodyUseAPI": [], "Fixed commit": "e561088395a878eb24c91ea83b53af1f4709d780", "Url": "https://api.github.com/repos/charleskorn/jnr-ffi", "Date": "2018-10-15T09:38:06Z"},
{"Line": "153=>153", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "tour.getBus().getName()=>tour.getBus().getBusName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2011/buggy-version/src.main.java.memoranda.ui.TourTable.java", "BodyUseAPI": [], "Fixed commit": "1d28fd088a351f466d86f5b989f4eb86638f924a", "Url": "https://api.github.com/repos/ser316asu-2018/Cochem", "Date": "2018-04-25T03:26:50Z"},
{"Line": "28=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openimaj.image.processing.face.detection.DetectedFace.getBounds()=>org.openimaj.image.ImageUtilities.readMBF(java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1342/buggy-version/VisualRecognitionAPI.src.main.java.visrec.examples.OpenImajFaceDetectorSample.java", "BodyUseAPI": [], "Fixed commit": "95b13bca8fa6a90b18433471ad25de707f1ff593", "Url": "https://api.github.com/repos/sevarac/VisualRecognitionApi", "Date": "2018-01-24T20:16:17Z"},
{"Line": "24=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openimaj.image.ImageUtilities.readMBF(java.io.File)=>visrec.examples.Utility.getImageFile(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1342/buggy-version/VisualRecognitionAPI.src.main.java.visrec.examples.OpenImajFaceDetectorSample.java", "BodyUseAPI": [], "Fixed commit": "95b13bca8fa6a90b18433471ad25de707f1ff593", "Url": "https://api.github.com/repos/sevarac/VisualRecognitionApi", "Date": "2018-01-24T20:16:17Z"},
{"Line": "24=>24", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openimaj.image.ImageUtilities.readMBF(java.io.File)=>visrec.examples.Utility.getImageFile(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1342/buggy-version/VisualRecognitionAPI.src.main.java.visrec.examples.OpenImajFaceDetectorSample.java", "BodyUseAPI": [], "Fixed commit": "95b13bca8fa6a90b18433471ad25de707f1ff593", "Url": "https://api.github.com/repos/sevarac/VisualRecognitionApi", "Date": "2018-01-24T20:16:17Z"},
{"Line": "67=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.sunbird.common.models.util.ProjectUtil.getConfigValue(JsonKey.SUNBIRD_TELEMETRY_BASE_URL)=>org.sunbird.common.models.util.ProjectUtil.getConfigValue(JsonKey.EKSTEP_BASE_URL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6899/buggy-version/actors.telemetry-core.src.main.java.org.sunbird.util.lmaxdisruptor.SunbirdTelemetryEventConsumer.java", "BodyUseAPI": [], "Fixed commit": "199d6d6c1e888c97ff68b57c577a980f437cf58c", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-06-14T11:02:39Z"},
{"Line": "94=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Scanner.next()=>java.util.Scanner.nextLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1504/buggy-version/src.Blackjack.java", "BodyUseAPI": [], "Fixed commit": "2272ef9d0a01033dabe6ecffc2aec18a0766cdfe", "Url": "https://api.github.com/repos/adammy/blackjack", "Date": "2018-02-08T21:11:56Z"},
{"Line": "24=>24", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Scanner.nextInt()=>java.util.Scanner.nextLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1504/buggy-version/src.Blackjack.java", "BodyUseAPI": [], "Fixed commit": "2272ef9d0a01033dabe6ecffc2aec18a0766cdfe", "Url": "https://api.github.com/repos/adammy/blackjack", "Date": "2018-02-08T21:11:56Z"},
{"Line": "240=>152", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] getIngredientTransformationStrategy()=>[public] getIngredientTransformationStrategy()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5993/buggy-version/src.main.java.fr.inria.astor.core.ingredientbased.IngredientBasedRepairApproachImpl.java", "BodyUseAPI": [], "Fixed commit": "876357f016f3fe3d483af97749af86b962c3c448", "Url": "https://api.github.com/repos/SpoonLabs/astor", "Date": "2018-08-22T09:40:57Z"},
{"Line": "102=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "de.uni_koblenz.west.koral.common.io.EncodedLongFileInputIterator.close()=>de.uni_koblenz.west.koral.master.utils.LongIterator.close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5355/buggy-version/src.main.java.de.uni_koblenz.west.koral.master.utils.NWayMergeSort.java", "BodyUseAPI": [], "Fixed commit": "292a95160fb73a674fa1865d684cf38b55c23048", "Url": "https://api.github.com/repos/Institute-Web-Science-and-Technologies/koral", "Date": "2018-01-30T12:40:15Z"},
{"Line": "112=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.File.delete()=>java.util.List<java.io.File>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5355/buggy-version/src.main.java.de.uni_koblenz.west.koral.master.utils.NWayMergeSort.java", "BodyUseAPI": [], "Fixed commit": "292a95160fb73a674fa1865d684cf38b55c23048", "Url": "https://api.github.com/repos/Institute-Web-Science-and-Technologies/koral", "Date": "2018-01-30T12:40:15Z"},
{"Line": "77=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "de.uni_koblenz.west.koral.master.utils.Merger.mergeAndWrite(java.util.BitSet,long[][],de.uni_koblenz.west.koral.common.io.EncodedLongFileInputIterator[],de.uni_koblenz.west.koral.common.io.LongOutputWriter)=>de.uni_koblenz.west.koral.master.utils.Merger.mergeAndWrite(java.util.BitSet,long[][],de.uni_koblenz.west.koral.master.utils.LongIterator[],de.uni_koblenz.west.koral.common.io.LongOutputWriter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5355/buggy-version/src.main.java.de.uni_koblenz.west.koral.master.utils.NWayMergeSort.java", "BodyUseAPI": [], "Fixed commit": "292a95160fb73a674fa1865d684cf38b55c23048", "Url": "https://api.github.com/repos/Institute-Web-Science-and-Technologies/koral", "Date": "2018-01-30T12:40:15Z"},
{"Line": "928=>928", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "pck.NewPIN.setVisible(boolean)=>pck.NewPin.setVisible(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4931/buggy-version/src.pck.Dashboard.java", "BodyUseAPI": [], "Fixed commit": "dd6cb267ad7c29826efcd1c50042ff2cba5e1fcc", "Url": "https://api.github.com/repos/tiagoppinho/SaveMyPass", "Date": "2018-08-08T21:00:28Z"},
{"Line": "929=>929", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "pck.NewPIN.requestFocusInWindow()=>pck.NewPin.requestFocusInWindow()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4931/buggy-version/src.pck.Dashboard.java", "BodyUseAPI": [], "Fixed commit": "dd6cb267ad7c29826efcd1c50042ff2cba5e1fcc", "Url": "https://api.github.com/repos/tiagoppinho/SaveMyPass", "Date": "2018-08-08T21:00:28Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "pck.NewPIN.setVisible(boolean)=>pck.NewPin.setVisible(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4931/buggy-version/src.pck.Login.java", "BodyUseAPI": [], "Fixed commit": "dd6cb267ad7c29826efcd1c50042ff2cba5e1fcc", "Url": "https://api.github.com/repos/tiagoppinho/SaveMyPass", "Date": "2018-08-08T21:00:28Z"},
{"Line": "555=>555", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "pck.ForgotPIN.setVisible(boolean)=>pck.ForgotPin.setVisible(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4931/buggy-version/src.pck.Login.java", "BodyUseAPI": [], "Fixed commit": "dd6cb267ad7c29826efcd1c50042ff2cba5e1fcc", "Url": "https://api.github.com/repos/tiagoppinho/SaveMyPass", "Date": "2018-08-08T21:00:28Z"},
{"Line": "211=>211", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<net.java.games.input.Controller>.remove(controller.getName())=>java.util.List<net.java.games.input.Controller>.remove(net.java.games.input.Controller)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2553/buggy-version/engine.src.main.java.org.terasology.input.lwjgl.JInputControllerDevice.java", "BodyUseAPI": [], "Fixed commit": "45d4b6f0fc5eb8884b8b1ed05017642ff6ac4454", "Url": "https://api.github.com/repos/mwvdev/Terasology", "Date": "2018-10-25T21:15:05Z"},
{"Line": "34=>34", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "net.jitse.npclib.api.NPC.hide(org.bukkit.entity.Player)=>npc.getShown().remove(player.getUniqueId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8672/buggy-version/src.net.jitse.npclib.listeners.PlayerListener.java", "BodyUseAPI": [], "Fixed commit": "2d3f6e46a3e39e2f7cc3a9d9b26cc4e54c47ac2b", "Url": "https://api.github.com/repos/JitseB/NPCLib", "Date": "2018-04-25T12:38:50Z"},
{"Line": "33=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "net.jitse.npclib.api.NPC.isActuallyShown(org.bukkit.entity.Player)=>npc.getShown().contains(player.getUniqueId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8672/buggy-version/src.net.jitse.npclib.listeners.PlayerListener.java", "BodyUseAPI": [], "Fixed commit": "2d3f6e46a3e39e2f7cc3a9d9b26cc4e54c47ac2b", "Url": "https://api.github.com/repos/JitseB/NPCLib", "Date": "2018-04-25T12:38:50Z"},
{"Line": "51=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.springframework.http.ResponseEntity.status(HttpStatus.FOUND).body(com.umssonline.proymgt.models.entity.Project)=>org.springframework.http.ResponseEntity.ok(com.umssonline.proymgt.models.entity.Project)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3885/buggy-version/src.main.java.com.umssonline.proymgt.controllers.ProjectRestControllerImpl.java", "BodyUseAPI": [], "Fixed commit": "d9e86b904f9883dc12238a2b02ac5712a3f01e69", "Url": "https://api.github.com/repos/franco148/uo-projectmgt-service", "Date": "2018-08-13T22:30:15Z"},
{"Line": "89=>89", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.springframework.http.ResponseEntity.status(HttpStatus.FOUND).body(com.umssonline.proymgt.models.entity.Project)=>org.springframework.http.ResponseEntity.ok(com.umssonline.proymgt.models.entity.Project)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3885/buggy-version/src.main.java.com.umssonline.proymgt.controllers.ProjectRestControllerImpl.java", "BodyUseAPI": [], "Fixed commit": "d9e86b904f9883dc12238a2b02ac5712a3f01e69", "Url": "https://api.github.com/repos/franco148/uo-projectmgt-service", "Date": "2018-08-13T22:30:15Z"},
{"Line": "97=>97", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.springframework.http.ResponseEntity.status(HttpStatus.FOUND).body(boolean)=>org.springframework.http.ResponseEntity.ok(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3885/buggy-version/src.main.java.com.umssonline.proymgt.controllers.ProjectRestControllerImpl.java", "BodyUseAPI": [], "Fixed commit": "d9e86b904f9883dc12238a2b02ac5712a3f01e69", "Url": "https://api.github.com/repos/franco148/uo-projectmgt-service", "Date": "2018-08-13T22:30:15Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.springframework.http.ResponseEntity.status(HttpStatus.FOUND).body(java.lang.Iterable<com.umssonline.proymgt.models.entity.Project>)=>org.springframework.http.ResponseEntity.ok(java.lang.Iterable<com.umssonline.proymgt.models.entity.Project>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3885/buggy-version/src.main.java.com.umssonline.proymgt.controllers.ProjectRestControllerImpl.java", "BodyUseAPI": [], "Fixed commit": "d9e86b904f9883dc12238a2b02ac5712a3f01e69", "Url": "https://api.github.com/repos/franco148/uo-projectmgt-service", "Date": "2018-08-13T22:30:15Z"},
{"Line": "38=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "codeu.model.store.basic.UserStore.getUser(java.lang.String)=>codeu.model.store.basic.UserStore.getInstance().getUser(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9253/buggy-version/src.main.java.codeu.controller.ProfileServlet.java", "BodyUseAPI": [], "Fixed commit": "6f3e09f94b27df50df496327ef2d4e2f57f3b826", "Url": "https://api.github.com/repos/chibuikemohanele/CodeU-Spring-2018", "Date": "2018-05-30T04:53:43Z"},
{"Line": "111=>111", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.content.SharedPreferences.getString(getString(R.string.pref_order_by_key),<nulltype>)=>android.content.SharedPreferences.getString(getString(R.string.pref_order_by_key),getString(R.string.pref_order_by_most_popular_value))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3179/buggy-version/app.src.main.java.com.example.steven.popularmovies.DetailActivity.java", "BodyUseAPI": [], "Fixed commit": "c3a4840e6cc932c71aefe59384e4ab5874a2b226", "Url": "https://api.github.com/repos/svroye/PopularMovies", "Date": "2018-03-11T09:42:55Z"},
{"Line": "6=>6", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Grid.floodfill(int,int)=>Grid.fillGrid(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9813/buggy-version/ch15Programs.FloodFillDemo.java", "BodyUseAPI": [], "Fixed commit": "9b907d73bfc6babb32fd3b6d32909bbb335e0a52", "Url": "https://api.github.com/repos/Pnschubel/ch15_e11_p22", "Date": "2018-09-13T18:19:58Z"},
{"Line": "73=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.republicate.stillness.ScrapeContext.setStart(((scrapeContext.getStart()) + (matcher.end())))=>com.republicate.stillness.ScrapeContext.setStart(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2632/buggy-version/src.main.java.com.republicate.stillness.directive.RegexDirective.java", "BodyUseAPI": [], "Fixed commit": "e9fd001abd9ee27ac832356f5d6ab958372fef8f", "Url": "https://api.github.com/repos/arkanovicz/stillness", "Date": "2018-09-27T14:03:34Z"},
{"Line": "1245=>1246", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.Boolean.getBoolean(((H2O.OptArgs.SYSTEM_PROP_PREFIX) + \"rebalance.enableMulti\"))=>java.lang.Boolean.parseBoolean(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7335/buggy-version/h2o-core.src.main.java.hex.ModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "39113f96d60d1b409bfb5d2358e35020c8e5cf28", "Url": "https://api.github.com/repos/h2oai/h2o-3", "Date": "2018-05-09T17:03:36Z"},
{"Line": "1236=>1237", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.System.getProperty((((H2O.OptArgs.SYSTEM_PROP_PREFIX) + \"rebalance.ratio.\") + mode),java.lang.String)=>hex.ModelBuilder<M, P, O>.getSysProperty(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7335/buggy-version/h2o-core.src.main.java.hex.ModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "39113f96d60d1b409bfb5d2358e35020c8e5cf28", "Url": "https://api.github.com/repos/h2oai/h2o-3", "Date": "2018-05-09T17:03:36Z"},
{"Line": "117=>117", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.facebook.presto.server.QuerySessionSupplier.checkState((factory != null),java.lang.String)=>com.facebook.presto.server.QuerySessionSupplier.checkState((factory != null),java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8337/buggy-version/presto-main.src.main.java.com.facebook.presto.server.QuerySessionSupplier.java", "BodyUseAPI": [], "Fixed commit": "dff7363f13591df046e2a58c7ee2e80a62c2cbcd", "Url": "https://api.github.com/repos/cryptoe/presto", "Date": "2018-08-15T00:37:37Z"},
{"Line": "117=>117", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.facebook.presto.server.QuerySessionSupplier.checkState((factory != null),java.lang.String)=>com.facebook.presto.server.QuerySessionSupplier.checkState((factory != null),java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8337/buggy-version/presto-main.src.main.java.com.facebook.presto.server.QuerySessionSupplier.java", "BodyUseAPI": [], "Fixed commit": "dff7363f13591df046e2a58c7ee2e80a62c2cbcd", "Url": "https://api.github.com/repos/cryptoe/presto", "Date": "2018-08-15T00:37:37Z"},
{"Line": "184=>190", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.awt.event.KeyListener() { public void keyPressed(java.awt.event.KeyEvent e) { } public void keyReleased(java.awt.event.KeyEvent e) { } public void keyTyped(java.awt.event.KeyEvent e) { } }=>new java.awt.event.KeyListener() { public void keyPressed(java.awt.event.KeyEvent e) { } public void keyReleased(java.awt.event.KeyEvent e) { } public void keyTyped(java.awt.event.KeyEvent e) { } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5584/buggy-version/src.main.java.memoranda.ui.ToursPanel.java", "BodyUseAPI": [], "Fixed commit": "e8ff3d7e88d01c8b3a59fab9a797d78a2c26aefc", "Url": "https://api.github.com/repos/ser316asu-2018/Babelsberg", "Date": "2018-04-08T20:53:57Z"},
{"Line": "168=>174", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new javax.swing.event.ListSelectionListener() { public void valueChanged(javax.swing.event.ListSelectionEvent e) { boolean enbl = (toursTable.getSelectedRow()) > (-1); editTourB.setEnabled(enbl); ppEditTour.setEnabled(enbl); removeTourB.setEnabled(enbl); ppRemoveTour.setEnabled(enbl); } }=>new javax.swing.event.ListSelectionListener() { public void valueChanged(javax.swing.event.ListSelectionEvent e) { boolean enbl = (toursTable.getSelectedRow()) > (-1); editTourB.setEnabled(enbl); ppEditTour.setEnabled(enbl); removeTourB.setEnabled(enbl); ppRemoveTour.setEnabled(enbl); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5584/buggy-version/src.main.java.memoranda.ui.ToursPanel.java", "BodyUseAPI": [], "Fixed commit": "e8ff3d7e88d01c8b3a59fab9a797d78a2c26aefc", "Url": "https://api.github.com/repos/ser316asu-2018/Babelsberg", "Date": "2018-04-08T20:53:57Z"},
{"Line": "184=>190", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "main.java.memoranda.ui.ToursTable.addKeyListener(java.awt.event.KeyListener)=>main.java.memoranda.ui.ToursTable.addKeyListener(java.awt.event.KeyListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5584/buggy-version/src.main.java.memoranda.ui.ToursPanel.java", "BodyUseAPI": [], "Fixed commit": "e8ff3d7e88d01c8b3a59fab9a797d78a2c26aefc", "Url": "https://api.github.com/repos/ser316asu-2018/Babelsberg", "Date": "2018-04-08T20:53:57Z"},
{"Line": "168=>174", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "toursTable.getSelectionModel().addListSelectionListener(javax.swing.event.ListSelectionListener)=>toursTable.getSelectionModel().addListSelectionListener(javax.swing.event.ListSelectionListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5584/buggy-version/src.main.java.memoranda.ui.ToursPanel.java", "BodyUseAPI": [], "Fixed commit": "e8ff3d7e88d01c8b3a59fab9a797d78a2c26aefc", "Url": "https://api.github.com/repos/ser316asu-2018/Babelsberg", "Date": "2018-04-08T20:53:57Z"},
{"Line": "140=>141", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.floodlightcontroller.restserver.HashSet<net.floodlightcontroller.restserver.Method>.add(Method.GET)=>java.util.HashSet<net.floodlightcontroller.restserver.Method>.add(Method.GET)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4605/buggy-version/src.main.java.net.floodlightcontroller.restserver.RestApiServer.java", "BodyUseAPI": [], "Fixed commit": "0bec20bb1115a536ecdeda176939b7a94ae64bcd", "Url": "https://api.github.com/repos/QingWang0909/floodlight", "Date": "2018-01-11T03:25:02Z"},
{"Line": "141=>142", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.floodlightcontroller.restserver.HashSet<net.floodlightcontroller.restserver.Method>.add(Method.POST)=>java.util.HashSet<net.floodlightcontroller.restserver.Method>.add(Method.POST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4605/buggy-version/src.main.java.net.floodlightcontroller.restserver.RestApiServer.java", "BodyUseAPI": [], "Fixed commit": "0bec20bb1115a536ecdeda176939b7a94ae64bcd", "Url": "https://api.github.com/repos/QingWang0909/floodlight", "Date": "2018-01-11T03:25:02Z"},
{"Line": "144=>145", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.restlet.Response.setAccessControlAllowMethods(net.floodlightcontroller.restserver.HashSet<net.floodlightcontroller.restserver.Method>)=>org.restlet.Response.setAccessControlAllowMethods(java.util.HashSet<net.floodlightcontroller.restserver.Method>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4605/buggy-version/src.main.java.net.floodlightcontroller.restserver.RestApiServer.java", "BodyUseAPI": [], "Fixed commit": "0bec20bb1115a536ecdeda176939b7a94ae64bcd", "Url": "https://api.github.com/repos/QingWang0909/floodlight", "Date": "2018-01-11T03:25:02Z"},
{"Line": "142=>143", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.floodlightcontroller.restserver.HashSet<net.floodlightcontroller.restserver.Method>.add(Method.PUT)=>java.util.HashSet<net.floodlightcontroller.restserver.Method>.add(Method.PUT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4605/buggy-version/src.main.java.net.floodlightcontroller.restserver.RestApiServer.java", "BodyUseAPI": [], "Fixed commit": "0bec20bb1115a536ecdeda176939b7a94ae64bcd", "Url": "https://api.github.com/repos/QingWang0909/floodlight", "Date": "2018-01-11T03:25:02Z"},
{"Line": "143=>144", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.floodlightcontroller.restserver.HashSet<net.floodlightcontroller.restserver.Method>.add(Method.DELETE)=>java.util.HashSet<net.floodlightcontroller.restserver.Method>.add(Method.DELETE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4605/buggy-version/src.main.java.net.floodlightcontroller.restserver.RestApiServer.java", "BodyUseAPI": [], "Fixed commit": "0bec20bb1115a536ecdeda176939b7a94ae64bcd", "Url": "https://api.github.com/repos/QingWang0909/floodlight", "Date": "2018-01-11T03:25:02Z"},
{"Line": "72=>72", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.identityconnectors.framework.common.objects.AttributeDeltaBuilder.addValueToReplace(java.lang.String,java.util.List)=>org.identityconnectors.framework.common.objects.AttributeDeltaBuilder.addValueToReplace(java.util.List)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2314/buggy-version/provisioning.ucf-impl-connid.src.main.java.com.evolveum.midpoint.provisioning.ucf.impl.connid.DeltaModificationConverter.java", "BodyUseAPI": [], "Fixed commit": "67dbf3fab53eedc6e7d118429d03f3a610c9f9e9", "Url": "https://api.github.com/repos/Evolveum/midpoint", "Date": "2018-06-14T12:51:16Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.identityconnectors.framework.common.objects.AttributeDeltaBuilder.addValueToReplace(java.lang.String,java.util.List<java.lang.Object>)=>org.identityconnectors.framework.common.objects.AttributeDeltaBuilder.addValueToReplace(java.util.List<java.lang.Object>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2314/buggy-version/provisioning.ucf-impl-connid.src.main.java.com.evolveum.midpoint.provisioning.ucf.impl.connid.DeltaModificationConverter.java", "BodyUseAPI": [], "Fixed commit": "67dbf3fab53eedc6e7d118429d03f3a610c9f9e9", "Url": "https://api.github.com/repos/Evolveum/midpoint", "Date": "2018-06-14T12:51:16Z"},
{"Line": "539=>539", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.matsim.api.core.v01.network.Link.getToNode()=>org.matsim.api.core.v01.network.Link.getFromNode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1749/buggy-version/matsim.src.main.java.org.matsim.core.mobsim.qsim.qnetsimengine.AbstractQLink.java", "BodyUseAPI": [], "Fixed commit": "256bd14e22c3f66b7cbbc9f84a1b4a9dce07082d", "Url": "https://api.github.com/repos/matsim-org/matsim", "Date": "2018-04-08T16:49:51Z"},
{"Line": "148=>148", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.sadgames.sysutils.common.MathUtils.orthoM(float[],int,float,float,float,float,int,com.sadgames.gl3dengine.glrender.scene.lights.FAR_PLANE)=>com.sadgames.sysutils.common.MathUtils.orthoM(float[],int,float,float,float,float,float,com.sadgames.gl3dengine.glrender.scene.lights.FAR_PLANE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1294/buggy-version/gl3d_engine.src.main.java.com.sadgames.gl3dengine.glrender.scene.lights.GLLightSource.java", "BodyUseAPI": [], "Fixed commit": "ab918ac1d34b8c6365c4af52b3896ab4035b4299", "Url": "https://api.github.com/repos/slavamamchur/myCubeGame", "Date": "2018-04-06T13:50:32Z"},
{"Line": "1190=>1190", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "CommService.elm.setEcuAddress(int)=>CommService.elm.setEcuAddress(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8957/buggy-version/androbd.src.main.java.com.fr3ts0n.ecu.gui.androbd.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7c63d20e705ca32785b1b2767544a071d9c518a8", "Url": "https://api.github.com/repos/eliasfaustus/AndrOBD", "Date": "2018-04-03T17:42:21Z"},
{"Line": "1184=>1184", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.content.SharedPreferences.getInt(java.lang.String,int)=>android.content.SharedPreferences.getLong(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8957/buggy-version/androbd.src.main.java.com.fr3ts0n.ecu.gui.androbd.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7c63d20e705ca32785b1b2767544a071d9c518a8", "Url": "https://api.github.com/repos/eliasfaustus/AndrOBD", "Date": "2018-04-03T17:42:21Z"},
{"Line": "433=>434", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.devstepbcn.wifi.Promise.reject(java.lang.String,e.getMessage())=>com.devstepbcn.wifi.Promise.reject(java.lang.String,e.getMessage())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/851/buggy-version/android.src.main.java.com.devstepbcn.wifi.AndroidWifiModule.java", "BodyUseAPI": [], "Fixed commit": "be960a8800e21c05523c192c9fd5a6b81dec73c6", "Url": "https://api.github.com/repos/DevopsElectricJukebox/react-native-android-wifi", "Date": "2018-05-31T11:57:18Z"},
{"Line": "430=>431", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.devstepbcn.wifi.Promise.resolve(wifiArray.toString())=>com.devstepbcn.wifi.Promise.resolve(wifiArray.toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/851/buggy-version/android.src.main.java.com.devstepbcn.wifi.AndroidWifiModule.java", "BodyUseAPI": [], "Fixed commit": "be960a8800e21c05523c192c9fd5a6b81dec73c6", "Url": "https://api.github.com/repos/DevopsElectricJukebox/react-native-android-wifi", "Date": "2018-05-31T11:57:18Z"},
{"Line": "424=>425", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "this.errorCallback.invoke(e.getMessage())=>com.devstepbcn.wifi.Promise.reject(e.getMessage())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/851/buggy-version/android.src.main.java.com.devstepbcn.wifi.AndroidWifiModule.java", "BodyUseAPI": [], "Fixed commit": "be960a8800e21c05523c192c9fd5a6b81dec73c6", "Url": "https://api.github.com/repos/DevopsElectricJukebox/react-native-android-wifi", "Date": "2018-05-31T11:57:18Z"},
{"Line": "90=>91", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "qUserProfile.nickName.eq(java.lang.String)=>qUserProfile.nickName.likeIgnoreCase(com.querydsl.core.types.dsl.Expressions.asString(\"%\").concat(nickName).concat(\"%\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6675/buggy-version/springboot-basic-service.src.main.java.com.baymin.springboot.service.impl.UserProfileServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "efa6248db54bc3c67419e7b92a1b3ecf820de319", "Url": "https://api.github.com/repos/ZongweiBai/springboot-basic", "Date": "2018-10-31T15:39:16Z"},
{"Line": "116=>117", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.vwo.mobile.VWOConfig.setOptOut(boolean)=>com.vwo.mobile.VWOConfig.setOptOut(java.lang.Boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/121/buggy-version/library.src.main.java.com.vwo.mobile.Initializer.java", "BodyUseAPI": [], "Fixed commit": "33ac7a33d231b25920150df8660e2eb3aba8b776", "Url": "https://api.github.com/repos/wingify/vwo-android", "Date": "2018-04-04T11:04:23Z"},
{"Line": "145=>145", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.github.swagger2markup.Swagger2MarkupMojo.extracSwaggerFileNameWithoutExtension(io.github.swagger2markup.Swagger2MarkupConverter)=>io.github.swagger2markup.Swagger2MarkupMojo.extractSwaggerFileNameWithoutExtension(io.github.swagger2markup.Swagger2MarkupConverter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5339/buggy-version/src.main.java.io.github.swagger2markup.Swagger2MarkupMojo.java", "BodyUseAPI": [], "Fixed commit": "1dc2fde8fc966ef6e15e05e58e8d1ebfacc2cb75", "Url": "https://api.github.com/repos/Swagger2Markup/swagger2markup-maven-plugin", "Date": "2018-04-25T09:43:44Z"},
{"Line": "16=>16", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "auth.inMemoryAuthentication().withUser(\"user\").password(\"password\").roles(\"USER\").and().withUser(\"admin\").password(java.lang.String)=>auth.inMemoryAuthentication().withUser(\"user\").password(\"{noop}password\").roles(\"USER\").and().withUser(\"admin\").password(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3317/buggy-version/spring-cloud-security.security-gateway.src.main.java.com.ymmihw.spring.cloud.security.gateway.SecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "98442754b85bf875d13540fbc967d34b043fbfec", "Url": "https://api.github.com/repos/ymmihw/spring-cloud", "Date": "2018-04-17T10:01:24Z"},
{"Line": "167=>167", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.xmlcalabash.core.XProcException.stepError(int)=>com.xmlcalabash.core.XProcException.stepError(int,org.xml.sax.SAXParseException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2619/buggy-version/src.main.java.com.xmlcalabash.library.ValidateJing.java", "BodyUseAPI": [], "Fixed commit": "54983ea91c933831769ae9c901376973c9486e4e", "Url": "https://api.github.com/repos/ndw/xmlcalabash1", "Date": "2018-03-04T21:51:06Z"},
{"Line": "159=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.xmlcalabash.core.XProcException.stepError(int)=>com.xmlcalabash.core.XProcException.stepError(int,org.xml.sax.SAXParseException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2619/buggy-version/src.main.java.com.xmlcalabash.library.ValidateJing.java", "BodyUseAPI": [], "Fixed commit": "54983ea91c933831769ae9c901376973c9486e4e", "Url": "https://api.github.com/repos/ndw/xmlcalabash1", "Date": "2018-03-04T21:51:06Z"},
{"Line": "110=>110", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.thaiopensource.util.PropertyMapBuilder.put(ValidateProperty.ERROR_HANDLER,org.xml.sax.ErrorHandler)=>com.thaiopensource.util.PropertyMapBuilder.put(ValidateProperty.ERROR_HANDLER,com.xmlcalabash.library.ValidateJing.RNGErrorHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2619/buggy-version/src.main.java.com.xmlcalabash.library.ValidateJing.java", "BodyUseAPI": [], "Fixed commit": "54983ea91c933831769ae9c901376973c9486e4e", "Url": "https://api.github.com/repos/ndw/xmlcalabash1", "Date": "2018-03-04T21:51:06Z"},
{"Line": "116=>116", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.xmlcalabash.core.XProcException.stepError(int)=>com.xmlcalabash.core.XProcException.stepError(int,org.xml.sax.SAXException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2619/buggy-version/src.main.java.com.xmlcalabash.library.ValidateWithRNG.java", "BodyUseAPI": [], "Fixed commit": "54983ea91c933831769ae9c901376973c9486e4e", "Url": "https://api.github.com/repos/ndw/xmlcalabash1", "Date": "2018-03-04T21:51:06Z"},
{"Line": "295=>295", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] close()=>[public] close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9160/buggy-version/flink-streaming-java.src.main.java.org.apache.flink.streaming.api.operators.AbstractStreamOperator.java", "BodyUseAPI": [], "Fixed commit": "2e69aca80cfc3be567d102c2123a699b1b2bb654", "Url": "https://api.github.com/repos/StefanRRichter/flink", "Date": "2017-12-11T11:01:54Z"},
{"Line": "336=>305", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] dispose()=>[public] dispose()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9160/buggy-version/flink-streaming-java.src.main.java.org.apache.flink.streaming.api.operators.AbstractStreamOperator.java", "BodyUseAPI": [], "Fixed commit": "2e69aca80cfc3be567d102c2123a699b1b2bb654", "Url": "https://api.github.com/repos/StefanRRichter/flink", "Date": "2017-12-11T11:01:54Z"},
{"Line": "46=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.hibernate.criterion.Restrictions.le(java.lang.String,page.getStartDate())=>org.hibernate.criterion.Restrictions.ge(java.lang.String,page.getStartDate())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1406/buggy-version/src.main.java.com.jll.record.UserRecordServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "8893e5432a929aa99ececa4c38e207c39ad71843", "Url": "https://api.github.com/repos/jinjinfc666/lottery-api", "Date": "2018-09-23T14:03:12Z"},
{"Line": "45=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.hibernate.criterion.Restrictions.ge(java.lang.String,page.getEndDate())=>org.hibernate.criterion.Restrictions.le(java.lang.String,page.getEndDate())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1406/buggy-version/src.main.java.com.jll.record.UserRecordServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "8893e5432a929aa99ececa4c38e207c39ad71843", "Url": "https://api.github.com/repos/jinjinfc666/lottery-api", "Date": "2018-09-23T14:03:12Z"},
{"Line": "80=>80", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.hibernate.criterion.Restrictions.le(java.lang.String,page.getStartDate())=>org.hibernate.criterion.Restrictions.ge(java.lang.String,page.getStartDate())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1406/buggy-version/src.main.java.com.jll.record.UserRecordServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "8893e5432a929aa99ececa4c38e207c39ad71843", "Url": "https://api.github.com/repos/jinjinfc666/lottery-api", "Date": "2018-09-23T14:03:12Z"},
{"Line": "79=>79", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.hibernate.criterion.Restrictions.ge(java.lang.String,page.getEndDate())=>org.hibernate.criterion.Restrictions.le(java.lang.String,page.getEndDate())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1406/buggy-version/src.main.java.com.jll.record.UserRecordServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "8893e5432a929aa99ececa4c38e207c39ad71843", "Url": "https://api.github.com/repos/jinjinfc666/lottery-api", "Date": "2018-09-23T14:03:12Z"},
{"Line": "698=>699", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.wso2.apimgt.gateway.cli.exception.ConfigParserException.printStackTrace()=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9820/buggy-version/components.micro-gateway-cli.src.main.java.org.wso2.apimgt.gateway.cli.utils.GatewayCmdUtils.java", "BodyUseAPI": [], "Fixed commit": "ae753dfbdb64f481787d587b52df5706376e0399", "Url": "https://api.github.com/repos/dinusha92/product-microgateway", "Date": "2018-06-19T10:08:43Z"},
{"Line": "696=>697", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.IOException.printStackTrace()=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9820/buggy-version/components.micro-gateway-cli.src.main.java.org.wso2.apimgt.gateway.cli.utils.GatewayCmdUtils.java", "BodyUseAPI": [], "Fixed commit": "ae753dfbdb64f481787d587b52df5706376e0399", "Url": "https://api.github.com/repos/dinusha92/product-microgateway", "Date": "2018-06-19T10:08:43Z"},
{"Line": "222=>221", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.hadoop.yarn.sls.scheduler.ContainerSimulator.getEndTime()=>org.apache.hadoop.yarn.api.records.ResourceUtilization.getPhysicalMemory()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2453/buggy-version/hadoop-tools.hadoop-sls.src.main.java.org.apache.hadoop.yarn.sls.nodemanager.NMSimulator.java", "BodyUseAPI": [], "Fixed commit": "e373081d61b98b4102cf77c1311fcdab5641cfac", "Url": "https://api.github.com/repos/yncxcw/LS-Hadoop-3.0", "Date": "2018-02-16T03:59:01Z"},
{"Line": "64=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Vector<shopping.cart.calculate.cost.ReceiptTaxData>.contains(shopping.cart.calculate.cost.ReceiptTaxData)=>shopping.cart.calculate.cost.CalculateCost.contains(java.util.Vector<shopping.cart.calculate.cost.ReceiptTaxData>,shopping.cart.calculate.cost.ReceiptTaxData)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7212/buggy-version/ShoppingCart.src.shopping.cart.calculate.cost.CalculateCost.java", "BodyUseAPI": [], "Fixed commit": "966e68be8768f7fc2289d68bbc1d5f6cf64adcae", "Url": "https://api.github.com/repos/sarabaghbanzadeh/ShoppingCart", "Date": "2018-05-14T23:33:37Z"},
{"Line": "84=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "util.Square.getSquare(field[to].getValue())=>util.Square.getSquare(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2671/buggy-version/src.main.java.board.Board.java", "BodyUseAPI": [], "Fixed commit": "72d2b3e6d54b7c4bf4ad344c4f8717527b6ef0d0", "Url": "https://api.github.com/repos/hold17/chessai-java", "Date": "2018-04-29T20:13:03Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "util.Square.getSquare(field[from].getValue())=>util.Square.getSquare(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2671/buggy-version/src.main.java.board.Board.java", "BodyUseAPI": [], "Fixed commit": "72d2b3e6d54b7c4bf4ad344c4f8717527b6ef0d0", "Url": "https://api.github.com/repos/hold17/chessai-java", "Date": "2018-04-29T20:13:03Z"},
{"Line": "127=>127", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Scanner.next()=>java.util.Scanner.nextLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/601/buggy-version/src.com.ex.Main.java", "BodyUseAPI": [], "Fixed commit": "37bbfc51add49d51f80f2988e0852baa49d93d12", "Url": "https://api.github.com/repos/Maxrimus/BankApp", "Date": "2018-02-13T05:17:12Z"},
{"Line": "58=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.nio.ByteBuffer.getShort()=>java.nio.ByteBuffer.getShort(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8050/buggy-version/android-nrf-mesh-library.meshprovisioner.src.main.java.no.nordicsemi.android.meshprovisioner.models.VendorModel.java", "BodyUseAPI": [], "Fixed commit": "b34fcf9651c9a9026862f8f8417b58bb88a60e2e", "Url": "https://api.github.com/repos/NordicSemiconductor/Android-nRF-Mesh-Library", "Date": "2018-09-18T11:56:20Z"},
{"Line": "68=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.nio.ByteBuffer.getShort()=>java.nio.ByteBuffer.getShort(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8050/buggy-version/android-nrf-mesh-library.meshprovisioner.src.main.java.no.nordicsemi.android.meshprovisioner.models.VendorModel.java", "BodyUseAPI": [], "Fixed commit": "b34fcf9651c9a9026862f8f8417b58bb88a60e2e", "Url": "https://api.github.com/repos/NordicSemiconductor/Android-nRF-Mesh-Library", "Date": "2018-09-18T11:56:20Z"},
{"Line": "61=>61", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.example.vo.UrlVO.getKey()=>com.example.utils.Base62Utils.encode(urlVO.getSeq())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5314/buggy-version/ShortURL-2.x.src.main.java.com.example.controller.ShortUrlController.java", "BodyUseAPI": [], "Fixed commit": "c37e85eb2dd2eca10df7d8803796959132f64ce2", "Url": "https://api.github.com/repos/spring-study-2018/chulM-short-url", "Date": "2018-07-29T07:54:48Z"},
{"Line": "45=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.JTextArea.addAncestorListener(chat.client.ClientWindow)=>javax.swing.JTextField.addActionListener(chat.client.ClientWindow)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6682/buggy-version/client.src.main.java.chat.client.ClientWindow.java", "BodyUseAPI": [], "Fixed commit": "9f112eed454cde6020485d0fd74002ea8c5b9f6e", "Url": "https://api.github.com/repos/KybaS/JavaChat", "Date": "2018-03-09T23:03:44Z"},
{"Line": "96=>96", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "PaymentWorksConstants.PaymentWorksNewVendorRequestStatusType.APPROVED.getText()=>PaymentWorksConstants.PaymentWorksNewVendorRequestStatusType.PROCESSED.getText()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5154/buggy-version/src.main.java.edu.cornell.kfs.pmw.batch.service.impl.PaymentWorksNewVendorPayeeAchServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "43f899221a99141c851a13c133b56f589049f783", "Url": "https://api.github.com/repos/CU-CommunityApps/cu-kfs", "Date": "2018-06-21T17:17:49Z"},
{"Line": "96=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "PaymentWorksConstants.PaymentWorksNewVendorRequestStatusType.APPROVED.getText()=>PaymentWorksConstants.PaymentWorksNewVendorRequestStatusType.PROCESSED.getText()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5154/buggy-version/src.main.java.edu.cornell.kfs.pmw.batch.service.impl.PaymentWorksNewVendorPayeeAchServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "43f899221a99141c851a13c133b56f589049f783", "Url": "https://api.github.com/repos/CU-CommunityApps/cu-kfs", "Date": "2018-06-21T17:17:49Z"},
{"Line": "225=>225", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.be3short.obj.modification.XMLParser.serializeObject(com.be3short.obj.manipulation.FieldMapper)=>com.be3short.obj.modification.XMLParser.serializeObject(java.util.HashMap<java.lang.String, java.util.ArrayList<java.lang.reflect.Field>>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/978/buggy-version/src.main.java.com.be3short.obj.manipulation.FieldMapper.java", "BodyUseAPI": [], "Fixed commit": "e206a7e09bdbe6297a89d3dd585bcb72f54014dc", "Url": "https://api.github.com/repos/be3short/ObjectTools", "Date": "2018-09-08T21:01:51Z"},
{"Line": "77=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class<?>.isPrimitive()=>com.github.conanchen.guoi.graphql.util.BeanToGrpcRequestUtil.isJavaClass(java.lang.Class<?>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4527/buggy-version/graphql-java-common.src.main.java.com.github.conanchen.guoi.graphql.util.BeanToGrpcRequestUtil.java", "BodyUseAPI": [], "Fixed commit": "63835348c13cfd8bd0e994d37231242a909b066a", "Url": "https://api.github.com/repos/conanchen/guoi-graphql-java", "Date": "2018-07-06T03:39:04Z"},
{"Line": "193=>194", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.info(java.lang.String)=>org.slf4j.Logger.info(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8209/buggy-version/src.main.java.org.endeavourhealth.jdbcreader.JdbcReaderTask.java", "BodyUseAPI": [], "Fixed commit": "0fccd89d8c4399032fe5c50c3c9824f98dbad05b", "Url": "https://api.github.com/repos/endeavourhealth-discovery/JDBCReader", "Date": "2018-04-25T11:05:47Z"},
{"Line": "193=>194", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.info(java.lang.String)=>org.slf4j.Logger.info(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8209/buggy-version/src.main.java.org.endeavourhealth.jdbcreader.JdbcReaderTask.java", "BodyUseAPI": [], "Fixed commit": "0fccd89d8c4399032fe5c50c3c9824f98dbad05b", "Url": "https://api.github.com/repos/endeavourhealth-discovery/JDBCReader", "Date": "2018-04-25T11:05:47Z"},
{"Line": "59=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.TextView.setBackgroundResource(R.color.green)=>android.widget.TextView.setTextColor(_context.getResources().getColor(R.color.green))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5133/buggy-version/VisuAlgOl-Android.app.src.main.java.com.olympiad_algorithms.visualgol_android.ExpandableListAdapter.java", "BodyUseAPI": [], "Fixed commit": "7cfccee8681b0ae395ef3de2471f20958c9b12d6", "Url": "https://api.github.com/repos/NikitaChampion/VisuAlgOl", "Date": "2018-10-17T18:36:52Z"},
{"Line": "60=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.TextView.setBackgroundResource(R.color.white)=>android.widget.TextView.setTextColor(_context.getResources().getColor(R.color.colorAccent))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5133/buggy-version/VisuAlgOl-Android.app.src.main.java.com.olympiad_algorithms.visualgol_android.ExpandableListAdapter.java", "BodyUseAPI": [], "Fixed commit": "7cfccee8681b0ae395ef3de2471f20958c9b12d6", "Url": "https://api.github.com/repos/NikitaChampion/VisuAlgOl", "Date": "2018-10-17T18:36:52Z"},
{"Line": "60=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.TextView.setBackgroundResource(R.color.white)=>_context.getResources().getColor(R.color.colorAccent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5133/buggy-version/VisuAlgOl-Android.app.src.main.java.com.olympiad_algorithms.visualgol_android.ExpandableListAdapter.java", "BodyUseAPI": [], "Fixed commit": "7cfccee8681b0ae395ef3de2471f20958c9b12d6", "Url": "https://api.github.com/repos/NikitaChampion/VisuAlgOl", "Date": "2018-10-17T18:36:52Z"},
{"Line": "32=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.badlogic.gdx.graphics.g2d.Batch.setColor(com.badlogic.gdx.graphics.Color)=>com.badlogic.gdx.graphics.g2d.Batch.setColor(batch.getColor().mul(color))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1324/buggy-version/src.main.java.me.winter.gdx.animation.drawable.TintedSpriteDrawable.java", "BodyUseAPI": [], "Fixed commit": "c3ffc7c353cd8e6e23d99996101834141b0d4e2b", "Url": "https://api.github.com/repos/WinterAlexander/gdx-animation", "Date": "2018-06-29T19:10:58Z"},
{"Line": "81=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.neuSpring18.dao.VehicleManagerImple.getVehicleFromDealer()=>com.neuSpring18.dao.VehicleManagerImple.getVehiclesFromDealer(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2296/buggy-version/src.com.neuSpring18.service.VehicleServiceImple.java", "BodyUseAPI": [], "Fixed commit": "26ff9785b88e5bbfba0209c6e15c0e2f33dba7ab", "Url": "https://api.github.com/repos/annlearner/18-Spring-Final-project", "Date": "2018-04-17T19:12:53Z"},
{"Line": "17=>17", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.neuSpring18.dao.VehicleManagerImple.getVehicleFromDealer(java.lang.String,com.neuSpring18.service.Filter)=>com.neuSpring18.dao.VehicleManagerImple.searchVehiclesByFilter(java.lang.String,com.neuSpring18.service.Filter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2296/buggy-version/src.com.neuSpring18.service.VehicleServiceImple.java", "BodyUseAPI": [], "Fixed commit": "26ff9785b88e5bbfba0209c6e15c0e2f33dba7ab", "Url": "https://api.github.com/repos/annlearner/18-Spring-Final-project", "Date": "2018-04-17T19:12:53Z"},
{"Line": "511=>511", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.rescribe.model.book_appointment.filterdrawer.request_model.BookAppointFilterRequestModel.setSortBy(java.lang.String)=>java.lang.String.toLowerCase()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9213/buggy-version/app.src.main.java.com.rescribe.ui.fragments.book_appointment.DrawerForFilterDoctorBookAppointment.java", "BodyUseAPI": [], "Fixed commit": "689e33205a0c52db4620b4608bd88189b32a1f09", "Url": "https://api.github.com/repos/sandeepbahalkar123/myrescribe_repo", "Date": "2018-01-05T12:48:53Z"},
{"Line": "567=>561", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.opencastproject.assetmanager.util.Workflows.putInWorkspace(org.opencastproject.assetmanager.api.Snapshot)=>snapshot.getMediaPackage().clone()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/648/buggy-version/modules.live-schedule-impl.src.main.java.org.opencastproject.liveschedule.impl.LiveScheduleServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "b158f5c14e0f892ec72954d3eb288c5899796fa4", "Url": "https://api.github.com/repos/harvard-dce/opencast-contrib", "Date": "2018-03-02T17:04:44Z"},
{"Line": "72=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.slf4j.Logger.debug(java.lang.String)=>org.slf4j.Logger.debug(org.apache.directory.api.i18n.I18n.msg(I18n.MSG_13407_STARTS_PARSING_LDIF))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1886/buggy-version/bulkloader.src.main.java.org.apache.directory.mavibot.btree.SchemaAwareLdifReader.java", "BodyUseAPI": [], "Fixed commit": "f739ec51df811447c0e99d079bf3ab862eb35ea6", "Url": "https://api.github.com/repos/apache/directory-server", "Date": "2018-04-09T13:04:59Z"},
{"Line": "107=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.directory.api.i18n.I18n.err(I18n.ERR_12024_CANNOT_CLOSE_FILE)=>org.apache.directory.api.i18n.I18n.err(I18n.ERR_13450_CANNOT_CLOSE_FILE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1886/buggy-version/bulkloader.src.main.java.org.apache.directory.mavibot.btree.SchemaAwareLdifReader.java", "BodyUseAPI": [], "Fixed commit": "f739ec51df811447c0e99d079bf3ab862eb35ea6", "Url": "https://api.github.com/repos/apache/directory-server", "Date": "2018-04-09T13:04:59Z"},
{"Line": "490=>490", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.directory.api.ldap.extras.intermediate.syncrepl.SyncInfoValueDecorator.decode(byte[])=>org.apache.directory.api.ldap.extras.intermediate.syncrepl_impl.SyncInfoValueDecorator.decode(byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1886/buggy-version/protocol-ldap.src.main.java.org.apache.directory.server.ldap.replication.consumer.ReplicationConsumerImpl.java", "BodyUseAPI": [], "Fixed commit": "f739ec51df811447c0e99d079bf3ab862eb35ea6", "Url": "https://api.github.com/repos/apache/directory-server", "Date": "2018-04-09T13:04:59Z"},
{"Line": "96=>96", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.piotrwalkusz.scriptrepository.repository.ScriptRepository.existsByCollectionIdAndName(scriptDTO.getCollectionId(),scriptDTO.getName())=>com.piotrwalkusz.scriptrepository.repository.ScriptRepository.existsAnotherByCollectionIdAndNameAndIdNot(scriptDTO.getCollectionId(),scriptDTO.getName(),scriptDTO.getId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3521/buggy-version/src.main.java.com.piotrwalkusz.scriptrepository.web.rest.ScriptResource.java", "BodyUseAPI": [], "Fixed commit": "f1a985e7a1abf4c921eb4576a83cf1be125a2584", "Url": "https://api.github.com/repos/piotrwalkusz1/script-repository", "Date": "2018-03-04T11:51:05Z"},
{"Line": "122=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "fourdognight.github.com.casa.model.ModelFacade.getShelter(int)=>java.util.List<fourdognight.github.com.casa.model.Shelter>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2470/buggy-version/android.Casa.app.src.main.java.fourdognight.github.com.casa.MainScreenActivity.java", "BodyUseAPI": [], "Fixed commit": "0d2822527f0421743c8f3652cd683d45b77201ca", "Url": "https://api.github.com/repos/manleyroberts/fourdognight", "Date": "2018-03-29T00:34:37Z"},
{"Line": "122=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "fourdognight.github.com.casa.model.ModelFacade.getShelter(int)=>java.util.List<fourdognight.github.com.casa.model.Shelter>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2470/buggy-version/android.Casa.app.src.main.java.fourdognight.github.com.casa.MainScreenActivity.java", "BodyUseAPI": [], "Fixed commit": "0d2822527f0421743c8f3652cd683d45b77201ca", "Url": "https://api.github.com/repos/manleyroberts/fourdognight", "Date": "2018-03-29T00:34:37Z"},
{"Line": "36=>36", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "interviewPanelInviteRestService.getAvailableApplications(competition.getId(), page).getSuccessObjectOrThrowException()=>interviewPanelInviteRestService.getAvailableApplications(competition.getId(), page).getSuccess()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4147/buggy-version/ifs-web-service.ifs-competition-mgt-service.src.main.java.org.innovateuk.ifs.management.model.InterviewPanelInviteApplicationsFindModelPopulator.java", "BodyUseAPI": [], "Fixed commit": "3bdef161ccf58258611f757e6cb8222152d01fa6", "Url": "https://api.github.com/repos/InnovateUKGitHub/innovation-funding-service", "Date": "2018-02-09T13:02:04Z"},
{"Line": "32=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "competitionRestService.getCompetitionById(competitionId).getSuccessObjectOrThrowException()=>competitionRestService.getCompetitionById(competitionId).getSuccess()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4147/buggy-version/ifs-web-service.ifs-competition-mgt-service.src.main.java.org.innovateuk.ifs.management.model.InterviewPanelInviteApplicationsFindModelPopulator.java", "BodyUseAPI": [], "Fixed commit": "3bdef161ccf58258611f757e6cb8222152d01fa6", "Url": "https://api.github.com/repos/InnovateUKGitHub/innovation-funding-service", "Date": "2018-02-09T13:02:04Z"},
{"Line": "162=>160", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "em.createQuery(\"select l from Location l where l.album.id = :aid and l.photo.id = :pid\", org.smveloso.otof.model.Location.class).setParameter(\"pid\", photo.getId()).setParameter(\"aid\", album.getId()).getSingleResult()=>em.createQuery(\"select l from Location l where l.album.id = :aid and l.photo.id = :pid\", org.smveloso.otof.model.Location.class).setParameter(\"pid\", photo.getId()).setParameter(\"aid\", album.getId()).getResultList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8665/buggy-version/src.main.java.org.smveloso.otof.em.LocationDAO.java", "BodyUseAPI": [], "Fixed commit": "b8d05f3ea8f160410af260dfe2cb7ca8777408f5", "Url": "https://api.github.com/repos/smveloso/otof-old", "Date": "2018-08-13T16:25:31Z"},
{"Line": "191=>193", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "water.fvec.Chunk.at8(int)=>java.lang.Math.max(long,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1589/buggy-version/h2o-core.src.main.java.water.rapids.RadixOrder.java", "BodyUseAPI": [], "Fixed commit": "0ce2b86b9f837a8a811a065581af5f1b98ea7980", "Url": "https://api.github.com/repos/h2oai/h2o-3", "Date": "2018-06-06T01:44:44Z"},
{"Line": "19=>19", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "replacers.replace(input).trim().replaceAll(\"\\\\(.*\\\\) ?\", \"\").replaceAll(\"\\\\{.*} ?\", \"\").replaceAll(\"\\\\[.*] ?\", \"\").replaceAll(\" -.*- \", \" \").replaceAll(\" {2}\", \" \").replaceAll(java.lang.String,java.lang.String)=>replacers.replace(input).trim().replaceAll(\"\\\\(.*\\\\) ?\", \"\").replaceAll(\"\\\\{.*} ?\", \"\").replaceAll(\"\\\\[.*] ?\", \"\").replaceAll(\" -.*- \", \" \").replaceAll(\"^~?m;? \", \"\").replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1187/buggy-version/src.main.java.be.thomaswinters.text.fixers.DutchDefinitionSimplifier.java", "BodyUseAPI": [], "Fixed commit": "143046dcb182f647e06948d3f2e5ccce97886165", "Url": "https://api.github.com/repos/TWinters/text-util", "Date": "2018-09-15T13:42:57Z"},
{"Line": "19=>19", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "replacers.replace(input).trim().replaceAll(\"\\\\(.*\\\\) ?\", \"\").replaceAll(\"\\\\{.*} ?\", \"\").replaceAll(\"\\\\[.*] ?\", \"\").replaceAll(\" -.*- \", \" \").replaceAll(\" {2}\", \" \").replaceAll(\"~?m;? \", \"\").replaceAll(java.lang.String,java.lang.String)=>replacers.replace(input).trim().replaceAll(\"\\\\(.*\\\\) ?\", \"\").replaceAll(\"\\\\{.*} ?\", \"\").replaceAll(\"\\\\[.*] ?\", \"\").replaceAll(\" -.*- \", \" \").replaceAll(\"^~?m;? \", \"\").replaceAll(\"^~?v;? \", \"\").replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1187/buggy-version/src.main.java.be.thomaswinters.text.fixers.DutchDefinitionSimplifier.java", "BodyUseAPI": [], "Fixed commit": "143046dcb182f647e06948d3f2e5ccce97886165", "Url": "https://api.github.com/repos/TWinters/text-util", "Date": "2018-09-15T13:42:57Z"},
{"Line": "19=>19", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "replacers.replace(input).trim().replaceAll(\"\\\\(.*\\\\) ?\", \"\").replaceAll(\"\\\\{.*} ?\", \"\").replaceAll(\"\\\\[.*] ?\", \"\").replaceAll(\" -.*- \", \" \").replaceAll(\" {2}\", \" \").replaceAll(\"~?m;? \", \"\").replaceAll(\"~?v;? \", \"\").replaceAll(\"~?o;? \", \"\").replaceAll(\"en ?\\\\/ ?of\", \"of\").replaceAll(\".* [mvo] \", \"\").replaceAll(java.lang.String,java.lang.String)=>replacers.replace(input).trim().replaceAll(\"\\\\(.*\\\\) ?\", \"\").replaceAll(\"\\\\{.*} ?\", \"\").replaceAll(\"\\\\[.*] ?\", \"\").replaceAll(\" -.*- \", \" \").replaceAll(\"^~?m;? \", \"\").replaceAll(\"^~?v;? \", \"\").replaceAll(\"^~?o;? \", \"\").replaceAll(\"en ?\\\\/ ?of\", \"of\").replaceAll(\".* [mvo] \", \"\").replaceAll(\".*~.*: ?\", \"\").replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1187/buggy-version/src.main.java.be.thomaswinters.text.fixers.DutchDefinitionSimplifier.java", "BodyUseAPI": [], "Fixed commit": "143046dcb182f647e06948d3f2e5ccce97886165", "Url": "https://api.github.com/repos/TWinters/text-util", "Date": "2018-09-15T13:42:57Z"},
{"Line": "19=>19", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "replacers.replace(input).trim().replaceAll(\"\\\\(.*\\\\) ?\", \"\").replaceAll(\"\\\\{.*} ?\", \"\").replaceAll(\"\\\\[.*] ?\", \"\").replaceAll(\" -.*- \", \" \").replaceAll(\" {2}\", \" \").replaceAll(\"~?m;? \", \"\").replaceAll(\"~?v;? \", \"\").replaceAll(\"~?o;? \", \"\").replaceAll(java.lang.String,java.lang.String)=>replacers.replace(input).trim().replaceAll(\"\\\\(.*\\\\) ?\", \"\").replaceAll(\"\\\\{.*} ?\", \"\").replaceAll(\"\\\\[.*] ?\", \"\").replaceAll(\" -.*- \", \" \").replaceAll(\"^~?m;? \", \"\").replaceAll(\"^~?v;? \", \"\").replaceAll(\"^~?o;? \", \"\").replaceAll(\"en ?\\\\/ ?of\", \"of\").replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1187/buggy-version/src.main.java.be.thomaswinters.text.fixers.DutchDefinitionSimplifier.java", "BodyUseAPI": [], "Fixed commit": "143046dcb182f647e06948d3f2e5ccce97886165", "Url": "https://api.github.com/repos/TWinters/text-util", "Date": "2018-09-15T13:42:57Z"},
{"Line": "248=>255", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.alibaba.fastjson.JSON.parseObject(jwt.getPayload())=>com.alibaba.fastjson.JSON.parseObject(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/810/buggy-version/src.main.java.org.dbpedia.mappingschecker.util.Utils.java", "BodyUseAPI": [], "Fixed commit": "c209e12246b2afbc235c77822f71171a85c2892a", "Url": "https://api.github.com/repos/vfrico/mapping-predictor-backend", "Date": "2018-08-08T12:06:27Z"},
{"Line": "266=>267", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.common.base.MoreObjects.toStringHelper(this).add(\"timestamp\", timestamp).add(\"exchange\", exchange).add(\"symbol\", symbol).add(\"ltp\", ltp).add(\"open\", open).add(\"high\", high).add(\"low\", low).add(\"close\", close).add(\"vtt\", vtt).add(\"atp\", atp).add(java.lang.String,java.lang.Long)=>com.google.common.base.MoreObjects.toStringHelper(this).add(\"timestamp\", timestamp).add(\"exchange\", exchange).add(\"symbol\", symbol).add(\"ltp\", ltp).add(\"open\", open).add(\"high\", high).add(\"low\", low).add(\"close\", close).add(\"vtt\", vtt).add(\"atp\", atp).add(java.lang.String,com.github.rishabh9.riko.upstox.common.converters.NumberString)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7867/buggy-version/src.main.java.com.github.rishabh9.riko.upstox.feed.models.Feed.java", "BodyUseAPI": [], "Fixed commit": "bb30ff4caa32fd1eb03a255e44168adde422956d", "Url": "https://api.github.com/repos/rishabh9/riko", "Date": "2018-07-03T09:49:03Z"},
{"Line": "37=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.oregonstate.cartography.grid.operators.MaximumBranchLengthOperator.operate(edu.oregonstate.cartography.grid.Grid)=>edu.oregonstate.cartography.grid.operators.MaximumBranchLengthsOperator.operate(edu.oregonstate.cartography.grid.Grid)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6771/buggy-version/src.dev.Dev.java", "BodyUseAPI": [], "Fixed commit": "0c0b74f7f1563d500c46dfba9b4272d9a3838d8c", "Url": "https://api.github.com/repos/OSUCartography/PyramidShader", "Date": "2018-01-02T00:57:46Z"},
{"Line": "1385=>1386", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getTaskEntityDao().create(com.soffid.iam.model.TaskEntity)=>getTaskEntityDao().createForce(com.soffid.iam.model.TaskEntity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7795/buggy-version/server.src.main.java.com.soffid.iam.sync.service.TaskQueueImpl.java", "BodyUseAPI": [], "Fixed commit": "ded797694581cced2bf122ddc627d1040b190896", "Url": "https://api.github.com/repos/SoffidIAM/syncserver", "Date": "2018-07-27T14:09:58Z"},
{"Line": "536=>536", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "context.getContentResolver().openAssetFileDescriptor(android.net.Uri,<nulltype>)=>context.getContentResolver().openAssetFileDescriptor(android.net.Uri,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6544/buggy-version/theme-engine.src.main.java.com.xlythe.engine.theme.Theme.java", "BodyUseAPI": [], "Fixed commit": "5547bc35b3aba8d874207f9dedecd4b5ef762aba", "Url": "https://api.github.com/repos/Xlythe/ThemeEngine", "Date": "2018-09-03T06:14:28Z"},
{"Line": "536=>536", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "context.getContentResolver().openAssetFileDescriptor(android.net.Uri,<nulltype>)=>context.getContentResolver().openAssetFileDescriptor(android.net.Uri,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6544/buggy-version/theme-engine.src.main.java.com.xlythe.engine.theme.Theme.java", "BodyUseAPI": [], "Fixed commit": "5547bc35b3aba8d874207f9dedecd4b5ef762aba", "Url": "https://api.github.com/repos/Xlythe/ThemeEngine", "Date": "2018-09-03T06:14:28Z"},
{"Line": "30=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.text.SimpleDateFormat.format(java.util.Date,boolean)=>java.text.SimpleDateFormat.format(java.util.Date)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3661/buggy-version/src.si.um.feri.praktikum.util.LoggerUtil.java", "BodyUseAPI": [], "Fixed commit": "2a9631c70940b9b9d7dbd8d86890befd3425fc15", "Url": "https://api.github.com/repos/jurefrank/praktikum-II", "Date": "2018-06-10T14:18:01Z"},
{"Line": "20=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.logging.Logger.setLevel(java.util.logging.Level)=>java.util.logging.ConsoleHandler.setLevel(java.util.logging.Level)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3661/buggy-version/src.si.um.feri.praktikum.util.LoggerUtil.java", "BodyUseAPI": [], "Fixed commit": "2a9631c70940b9b9d7dbd8d86890befd3425fc15", "Url": "https://api.github.com/repos/jurefrank/praktikum-II", "Date": "2018-06-10T14:18:01Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.Toast.setText(java.lang.String)=>com.example.satoshiabe.recqr.ApplicationController.getApplicationContext()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3865/buggy-version/app.src.main.java.com.example.satoshiabe.recqr.ApplicationController.java", "BodyUseAPI": [], "Fixed commit": "5acf5347c3cf307e46a95df1eeb4a500e2a8b495", "Url": "https://api.github.com/repos/abesatoshi/QRdecoder", "Date": "2018-01-19T06:57:15Z"},
{"Line": "17=>18", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.towson.insure.Runner.pausesProgram()=>java.util.Scanner.next()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1492/buggy-version/src.main.java.edu.towson.insure.Runner.java", "BodyUseAPI": [], "Fixed commit": "453a8cef191bd9ffbb36ec794b9ab4e2da5a0018", "Url": "https://api.github.com/repos/tylernhoward/SecureString", "Date": "2018-04-27T18:50:18Z"},
{"Line": "139=>139", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashSet<com.eastvillage.engine.TransformTree<T>>.remove(com.eastvillage.engine.TransformTree<T>)=>java.util.ArrayList<com.eastvillage.engine.TransformTree<T>>.remove(com.eastvillage.engine.TransformTree<T>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4962/buggy-version/core.src.com.eastvillage.engine.TransformTree.java", "BodyUseAPI": [], "Fixed commit": "9f1816d38679337da39918c4db6a068c7bb14784", "Url": "https://api.github.com/repos/NicEastvillage/EmeraldRPG", "Date": "2018-05-21T16:07:16Z"},
{"Line": "42=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashSet<com.eastvillage.engine.TransformTree<T>>.add(com.eastvillage.engine.TransformTree<T>)=>java.util.ArrayList<com.eastvillage.engine.TransformTree<T>>.add(com.eastvillage.engine.TransformTree<T>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4962/buggy-version/core.src.com.eastvillage.engine.TransformTree.java", "BodyUseAPI": [], "Fixed commit": "9f1816d38679337da39918c4db6a068c7bb14784", "Url": "https://api.github.com/repos/NicEastvillage/EmeraldRPG", "Date": "2018-05-21T16:07:16Z"},
{"Line": "145=>145", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashSet<com.eastvillage.engine.TransformTree<T>>.add(com.eastvillage.engine.TransformTree<T>)=>java.util.ArrayList<com.eastvillage.engine.TransformTree<T>>.add(com.eastvillage.engine.TransformTree<T>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4962/buggy-version/core.src.com.eastvillage.engine.TransformTree.java", "BodyUseAPI": [], "Fixed commit": "9f1816d38679337da39918c4db6a068c7bb14784", "Url": "https://api.github.com/repos/NicEastvillage/EmeraldRPG", "Date": "2018-05-21T16:07:16Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashSet<com.eastvillage.engine.TransformTree<T>>.add(com.eastvillage.engine.TransformTree<T>)=>java.util.ArrayList<com.eastvillage.engine.TransformTree<T>>.add(com.eastvillage.engine.TransformTree<T>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4962/buggy-version/core.src.com.eastvillage.engine.TransformTree.java", "BodyUseAPI": [], "Fixed commit": "9f1816d38679337da39918c4db6a068c7bb14784", "Url": "https://api.github.com/repos/NicEastvillage/EmeraldRPG", "Date": "2018-05-21T16:07:16Z"},
{"Line": "12=>12", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "server.ChatRoom.getDefaultRoom()=>server.ChatRoom.getLobby()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2601/buggy-version/src.server.ChatRoomList.java", "BodyUseAPI": [], "Fixed commit": "4826ebbfee93dc0ccb87d009548ac14cd5f8bc02", "Url": "https://api.github.com/repos/kazusa4418/ChatApp", "Date": "2018-09-08T03:51:27Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "server.ChatRoom.getDefaultRoom()=>server.ChatRoom.getLobby()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2601/buggy-version/src.server.Client.java", "BodyUseAPI": [], "Fixed commit": "4826ebbfee93dc0ccb87d009548ac14cd5f8bc02", "Url": "https://api.github.com/repos/kazusa4418/ChatApp", "Date": "2018-09-08T03:51:27Z"},
{"Line": "147=>147", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "server.ChatRoom.getDefaultRoom()=>server.ChatRoom.getLobby()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2601/buggy-version/src.server.ChatServer.java", "BodyUseAPI": [], "Fixed commit": "4826ebbfee93dc0ccb87d009548ac14cd5f8bc02", "Url": "https://api.github.com/repos/kazusa4418/ChatApp", "Date": "2018-09-08T03:51:27Z"},
{"Line": "138=>138", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "server.ChatRoom.getDefaultRoom()=>server.ChatRoom.getLobby()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2601/buggy-version/src.server.ChatServer.java", "BodyUseAPI": [], "Fixed commit": "4826ebbfee93dc0ccb87d009548ac14cd5f8bc02", "Url": "https://api.github.com/repos/kazusa4418/ChatApp", "Date": "2018-09-08T03:51:27Z"},
{"Line": "224=>224", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "spnTeamSpinner.getSelectedItem().toString().equals(java.lang.String)=>teamName.getText().toString().equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3306/buggy-version/app.src.main.java.com.pideriver.a2017tatorscouttracingapp.MatchSetup.java", "BodyUseAPI": [], "Fixed commit": "2c45819c06ae5348a5f126ee51ae060c8cd94ea2", "Url": "https://api.github.com/repos/Team2122Scouting/TracingApp", "Date": "2018-01-15T02:52:39Z"},
{"Line": "224=>224", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.Spinner.getSelectedItem()=>android.widget.EditText.getText()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3306/buggy-version/app.src.main.java.com.pideriver.a2017tatorscouttracingapp.MatchSetup.java", "BodyUseAPI": [], "Fixed commit": "2c45819c06ae5348a5f126ee51ae060c8cd94ea2", "Url": "https://api.github.com/repos/Team2122Scouting/TracingApp", "Date": "2018-01-15T02:52:39Z"},
{"Line": "224=>224", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.Spinner.getSelectedItem()=>android.widget.EditText.getText()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3306/buggy-version/app.src.main.java.com.pideriver.a2017tatorscouttracingapp.MatchSetup.java", "BodyUseAPI": [], "Fixed commit": "2c45819c06ae5348a5f126ee51ae060c8cd94ea2", "Url": "https://api.github.com/repos/Team2122Scouting/TracingApp", "Date": "2018-01-15T02:52:39Z"},
{"Line": "50=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Datos.consultar_registro(File,int)=>Datos.consultar_registro(java.io.File,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3667/buggy-version/Practica02.src.RepresentantePre.java", "BodyUseAPI": [], "Fixed commit": "95a1438beaa4a6f886a1c438164fdbc0dd0911ca", "Url": "https://api.github.com/repos/RaulGnzlzAlvrd/bases-datos_2019-1", "Date": "2018-09-01T06:15:15Z"},
{"Line": "76=>71", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Datos.agregar(File,java.lang.String)=>Datos.eliminar(java.io.File,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3667/buggy-version/Practica02.src.RepresentantePre.java", "BodyUseAPI": [], "Fixed commit": "95a1438beaa4a6f886a1c438164fdbc0dd0911ca", "Url": "https://api.github.com/repos/RaulGnzlzAlvrd/bases-datos_2019-1", "Date": "2018-09-01T06:15:15Z"},
{"Line": "52=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new java.util.StringTokenizer(informacion, ';')=>new java.util.StringTokenizer(informacion, \";\")", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3667/buggy-version/Practica02.src.RepresentantePre.java", "BodyUseAPI": [], "Fixed commit": "95a1438beaa4a6f886a1c438164fdbc0dd0911ca", "Url": "https://api.github.com/repos/RaulGnzlzAlvrd/bases-datos_2019-1", "Date": "2018-09-01T06:15:15Z"},
{"Line": "68=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Datos.eliminar(File,int)=>Datos.agregar(java.io.File,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3667/buggy-version/Practica02.src.RepresentantePre.java", "BodyUseAPI": [], "Fixed commit": "95a1438beaa4a6f886a1c438164fdbc0dd0911ca", "Url": "https://api.github.com/repos/RaulGnzlzAlvrd/bases-datos_2019-1", "Date": "2018-09-01T06:15:15Z"},
{"Line": "85=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Datos.actualiza(File,java.lang.String,java.lang.String)=>Datos.modificar_archivo(java.io.File,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3667/buggy-version/Practica02.src.RepresentantePre.java", "BodyUseAPI": [], "Fixed commit": "95a1438beaa4a6f886a1c438164fdbc0dd0911ca", "Url": "https://api.github.com/repos/RaulGnzlzAlvrd/bases-datos_2019-1", "Date": "2018-09-01T06:15:15Z"},
{"Line": "68=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Datos.eliminar(File,int)=>Datos.agregar(java.io.File,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3667/buggy-version/Practica02.src.RepresentantePre.java", "BodyUseAPI": [], "Fixed commit": "95a1438beaa4a6f886a1c438164fdbc0dd0911ca", "Url": "https://api.github.com/repos/RaulGnzlzAlvrd/bases-datos_2019-1", "Date": "2018-09-01T06:15:15Z"},
{"Line": "6=>6", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "RealNumber.isEqual(RationalNumber)=>RealNumber.isEqual(q1.getValue())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7925/buggy-version/Driver.java", "BodyUseAPI": [], "Fixed commit": "7bc64fccf0bcfc5f775fb5a497d5e41afb78103f", "Url": "https://api.github.com/repos/pollsmor/MKS21X-Numbers", "Date": "2018-10-16T02:15:29Z"},
{"Line": "6=>6", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Object(int)=>RealNumber(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7925/buggy-version/RationalNumber.java", "BodyUseAPI": [], "Fixed commit": "7bc64fccf0bcfc5f775fb5a497d5e41afb78103f", "Url": "https://api.github.com/repos/pollsmor/MKS21X-Numbers", "Date": "2018-10-16T02:15:29Z"},
{"Line": "12=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Object(double)=>RealNumber(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7925/buggy-version/RationalNumber.java", "BodyUseAPI": [], "Fixed commit": "7bc64fccf0bcfc5f775fb5a497d5e41afb78103f", "Url": "https://api.github.com/repos/pollsmor/MKS21X-Numbers", "Date": "2018-10-16T02:15:29Z"},
{"Line": "112=>114", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.gson.Gson.fromJson(java.io.InputStreamReader,java.lang.reflect.Type)=>com.google.gson.Gson.fromJson(java.io.BufferedReader,java.lang.reflect.Type)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2696/buggy-version/app.src.main.java.ca.ualberta.cs.lonelytwitter.LonelyTwitterActivity.java", "BodyUseAPI": [], "Fixed commit": "d32c22faa31d2bb2060955c37bbbd03ba750073b", "Url": "https://api.github.com/repos/Pocable/lonelyTwitter", "Date": "2018-09-27T01:34:31Z"},
{"Line": "89=>90", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.File.delete()=>ca.ualberta.cs.lonelytwitter.LonelyTwitterActivity.2.saveInFile()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2696/buggy-version/app.src.main.java.ca.ualberta.cs.lonelytwitter.LonelyTwitterActivity.java", "BodyUseAPI": [], "Fixed commit": "d32c22faa31d2bb2060955c37bbbd03ba750073b", "Url": "https://api.github.com/repos/Pocable/lonelyTwitter", "Date": "2018-09-27T01:34:31Z"},
{"Line": "263=>263", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.LuDik.EvoAI.Creature.setYPos(int)=>com.LuDik.EvoAI.Creature.setYPos(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2590/buggy-version/MainApp.com.LuDik.EvoAI.Creature.java", "BodyUseAPI": [], "Fixed commit": "7322e0442c83544c2a652bc258de7f272648d523", "Url": "https://api.github.com/repos/LuukCrooijmans9/PWS-LuDik", "Date": "2018-02-05T21:43:18Z"},
{"Line": "20=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.view.MotionEvent.getX()=>android.view.MotionEvent.getY()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/950/buggy-version/android.src.main.java.com.rome2rio.android.reactnativetouchthroughview.TouchThroughWrapper.java", "BodyUseAPI": [], "Fixed commit": "aaeb0292692f38459f2d08ed0a50165faa1c3bf6", "Url": "https://api.github.com/repos/DVSoftware/react-native-touch-through-view", "Date": "2017-12-22T13:32:12Z"},
{"Line": "17=>24", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] onInterceptTouchEvent(android.view.MotionEvent)=>[public] onInterceptTouchEvent(android.view.MotionEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/950/buggy-version/android.src.main.java.com.rome2rio.android.reactnativetouchthroughview.TouchThroughWrapper.java", "BodyUseAPI": [], "Fixed commit": "aaeb0292692f38459f2d08ed0a50165faa1c3bf6", "Url": "https://api.github.com/repos/DVSoftware/react-native-touch-through-view", "Date": "2017-12-22T13:32:12Z"},
{"Line": "113=>130", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.support.design.widget.Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE).setAction(android.R.string.ok,android.view.View.OnClickListener)=>android.support.design.widget.Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE).setAction(android.R.string.ok,android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1295/buggy-version/app.src.main.java.com.example.harsmeet.login.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "04d5e4c091df39b0244e581023e619e01645a876", "Url": "https://api.github.com/repos/harsmeet/loginPage", "Date": "2018-07-31T07:15:37Z"},
{"Line": "86=>103", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1295/buggy-version/app.src.main.java.com.example.harsmeet.login.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "04d5e4c091df39b0244e581023e619e01645a876", "Url": "https://api.github.com/repos/harsmeet/loginPage", "Date": "2018-07-31T07:15:37Z"},
{"Line": "215=>232", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "mLoginFormView.animate().setDuration(shortAnimTime).alpha((show ? 0 : 1)).setListener(android.animation.AnimatorListenerAdapter)=>mLoginFormView.animate().setDuration(shortAnimTime).alpha((show ? 0 : 1)).setListener(android.animation.AnimatorListenerAdapter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1295/buggy-version/app.src.main.java.com.example.harsmeet.login.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "04d5e4c091df39b0244e581023e619e01645a876", "Url": "https://api.github.com/repos/harsmeet/loginPage", "Date": "2018-07-31T07:15:37Z"},
{"Line": "224=>241", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "mProgressView.animate().setDuration(shortAnimTime).alpha((show ? 1 : 0)).setListener(android.animation.AnimatorListenerAdapter)=>mProgressView.animate().setDuration(shortAnimTime).alpha((show ? 1 : 0)).setListener(android.animation.AnimatorListenerAdapter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1295/buggy-version/app.src.main.java.com.example.harsmeet.login.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "04d5e4c091df39b0244e581023e619e01645a876", "Url": "https://api.github.com/repos/harsmeet/loginPage", "Date": "2018-07-31T07:15:37Z"},
{"Line": "65=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.servlet.http.HttpServletRequest.setAttribute(java.lang.String,java.lang.String)=>java.util.Map<java.lang.String, java.lang.String>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6175/buggy-version/src.main.java.com.midbone.portal.controller.TransactionController.java", "BodyUseAPI": [], "Fixed commit": "caba38562290a333fc820e2824f86ba39259f38b", "Url": "https://api.github.com/repos/MidBone/portal", "Date": "2018-08-15T14:28:59Z"},
{"Line": "68=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.servlet.http.HttpServletRequest.setAttribute(java.lang.String,java.lang.String)=>java.util.Map<java.lang.String, java.lang.String>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6175/buggy-version/src.main.java.com.midbone.portal.controller.TransactionController.java", "BodyUseAPI": [], "Fixed commit": "caba38562290a333fc820e2824f86ba39259f38b", "Url": "https://api.github.com/repos/MidBone/portal", "Date": "2018-08-15T14:28:59Z"},
{"Line": "67=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.servlet.http.HttpServletRequest.setAttribute(java.lang.String,java.lang.String)=>java.util.Map<java.lang.String, java.lang.String>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6175/buggy-version/src.main.java.com.midbone.portal.controller.TransactionController.java", "BodyUseAPI": [], "Fixed commit": "caba38562290a333fc820e2824f86ba39259f38b", "Url": "https://api.github.com/repos/MidBone/portal", "Date": "2018-08-15T14:28:59Z"},
{"Line": "66=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.servlet.http.HttpServletRequest.setAttribute(java.lang.String,java.lang.String)=>java.util.Map<java.lang.String, java.lang.String>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6175/buggy-version/src.main.java.com.midbone.portal.controller.TransactionController.java", "BodyUseAPI": [], "Fixed commit": "caba38562290a333fc820e2824f86ba39259f38b", "Url": "https://api.github.com/repos/MidBone/portal", "Date": "2018-08-15T14:28:59Z"},
{"Line": "166=>166", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.nimbusds.jwt.JWTClaimsSet.Builder().claim(org.geant.idpextension.oidc.token.support.TokenClaimsSet.KEY_TYPE, tokenType).jwtID(tokenID).audience(clientID.getValue())=>new com.nimbusds.jwt.JWTClaimsSet.Builder().claim(org.geant.idpextension.oidc.token.support.TokenClaimsSet.KEY_TYPE, tokenType).jwtID(tokenID).claim(java.lang.String,clientID.getValue())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7231/buggy-version/idp-oidc-extension-api.src.main.java.org.geant.idpextension.oidc.token.support.TokenClaimsSet.java", "BodyUseAPI": [], "Fixed commit": "cf18fcf60fbd6d41734ca210bb03375a4f9216f1", "Url": "https://api.github.com/repos/CSCfi/shibboleth-idp-oidc-extension", "Date": "2018-07-27T12:35:02Z"},
{"Line": "204=>204", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.nimbusds.jwt.JWTClaimsSet.getStringArrayClaim(java.lang.String)=>com.nimbusds.jwt.JWTClaimsSet.getStringClaim(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7231/buggy-version/idp-oidc-extension-api.src.main.java.org.geant.idpextension.oidc.token.support.TokenClaimsSet.java", "BodyUseAPI": [], "Fixed commit": "cf18fcf60fbd6d41734ca210bb03375a4f9216f1", "Url": "https://api.github.com/repos/CSCfi/shibboleth-idp-oidc-extension", "Date": "2018-07-27T12:35:02Z"},
{"Line": "172=>174", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.toString()=>java.net.URLEncoder.encode(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6259/buggy-version/src.YelpAPI.YelpAPI.java", "BodyUseAPI": [], "Fixed commit": "8a044a7ee2c6b8d6bcfe9294f32a30c9ca1ec163", "Url": "https://api.github.com/repos/dannycho7/cs56-utilities-restaurant-list", "Date": "2018-02-23T02:45:27Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.mafintosh.nodeonandroid.NodeService.1.startNode(java.lang.String,java.lang.String,java.lang.String)=>com.mafintosh.nodeonandroid.NodeService.1.startNode(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9338/buggy-version/app.src.main.java.com.mafintosh.nodeonandroid.NodeService.java", "BodyUseAPI": [], "Fixed commit": "d322976ca58928e730e6e2f3cba83de022f132a3", "Url": "https://api.github.com/repos/webmixedreality/exokit-android", "Date": "2018-01-13T06:30:39Z"},
{"Line": "409=>409", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, java.lang.Object>.put(java.lang.String,java.lang.String)=>java.util.Map.Entry<java.lang.String, java.lang.Object>.getKey()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6299/buggy-version/camel-core.src.main.java.org.apache.camel.component.rest.RestProducer.java", "BodyUseAPI": [], "Fixed commit": "9ccd72669f3eec4cb1e8102c95573bee8bfe052b", "Url": "https://api.github.com/repos/apache/camel", "Date": "2018-07-09T08:14:13Z"},
{"Line": "89=>104", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "player.getInventory().setItem(org.bukkit.inventory.EquipmentSlot,org.bukkit.inventory.ItemStack)=>player.getInventory().setItemInOffHand(org.bukkit.inventory.ItemStack)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2369/buggy-version/src.main.java.net.pl3x.bukkit.ridabledolphins.listener.DolphinListener.java", "BodyUseAPI": [], "Fixed commit": "0801736147326c77cdf5ca8a872c6a1a7c409aae", "Url": "https://api.github.com/repos/BillyGalbreath/RidableDolphins", "Date": "2018-07-29T02:52:32Z"},
{"Line": "65=>75", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.event.player.PlayerInteractAtEntityEvent.getHand()=>org.bukkit.entity.Player.getInventory()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2369/buggy-version/src.main.java.net.pl3x.bukkit.ridabledolphins.listener.DolphinListener.java", "BodyUseAPI": [], "Fixed commit": "0801736147326c77cdf5ca8a872c6a1a7c409aae", "Url": "https://api.github.com/repos/BillyGalbreath/RidableDolphins", "Date": "2018-07-29T02:52:32Z"},
{"Line": "65=>75", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.event.player.PlayerInteractAtEntityEvent.getHand()=>org.bukkit.entity.Player.getInventory()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2369/buggy-version/src.main.java.net.pl3x.bukkit.ridabledolphins.listener.DolphinListener.java", "BodyUseAPI": [], "Fixed commit": "0801736147326c77cdf5ca8a872c6a1a7c409aae", "Url": "https://api.github.com/repos/BillyGalbreath/RidableDolphins", "Date": "2018-07-29T02:52:32Z"},
{"Line": "92=>109", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "event.getBlockClicked().getRelative(event.getBlockFace()).getLocation()=>org.bukkit.block.Block.getLocation()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2369/buggy-version/src.main.java.net.pl3x.bukkit.ridabledolphins.listener.DolphinListener.java", "BodyUseAPI": [], "Fixed commit": "0801736147326c77cdf5ca8a872c6a1a7c409aae", "Url": "https://api.github.com/repos/BillyGalbreath/RidableDolphins", "Date": "2018-07-29T02:52:32Z"},
{"Line": "89=>104", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "player.getInventory().setItem(org.bukkit.inventory.EquipmentSlot,org.bukkit.inventory.ItemStack)=>org.bukkit.entity.Player.getInventory()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2369/buggy-version/src.main.java.net.pl3x.bukkit.ridabledolphins.listener.DolphinListener.java", "BodyUseAPI": [], "Fixed commit": "0801736147326c77cdf5ca8a872c6a1a7c409aae", "Url": "https://api.github.com/repos/BillyGalbreath/RidableDolphins", "Date": "2018-07-29T02:52:32Z"},
{"Line": "37=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "de.schildbach.wallet.ExchangeRatesProvider.contentUri(context.getPackageName(),boolean)=>de.schildbach.wallet.data.ExchangeRatesProvider.contentUri(context.getPackageName(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5347/buggy-version/wallet.src.de.schildbach.wallet.ui.ExchangeRateLoader.java", "BodyUseAPI": [], "Fixed commit": "152217de22cf87859684a345398a3deea823da82", "Url": "https://api.github.com/repos/genitrust/dash-wallet", "Date": "2018-02-06T15:56:37Z"},
{"Line": "37=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "de.schildbach.wallet.ExchangeRatesProvider.contentUri(context.getPackageName(),boolean)=>de.schildbach.wallet.data.ExchangeRatesProvider.contentUri(context.getPackageName(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5347/buggy-version/wallet.src.de.schildbach.wallet.ui.ExchangeRateLoader.java", "BodyUseAPI": [], "Fixed commit": "152217de22cf87859684a345398a3deea823da82", "Url": "https://api.github.com/repos/genitrust/dash-wallet", "Date": "2018-02-06T15:56:37Z"},
{"Line": "35=>37", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.scalecube.services.Microservices.builder().metrics(settings.registry()).seeds(seed.cluster().address()).services(java.lang.Object)=>io.scalecube.services.Microservices.builder().metrics(settings.registry()).seeds(seed.cluster().address()).services(java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/676/buggy-version/benchmarks.src.main.java.io.scalecube.services.benchmarks.services.ServicesBenchmarksState.java", "BodyUseAPI": [], "Fixed commit": "86d237572d3fb305c8a2639123fbbcb13de89871", "Url": "https://api.github.com/repos/scalecube/scalecube-services", "Date": "2018-07-23T10:57:00Z"},
{"Line": "388=>387", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "uk.co.senab.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)=>com.github.chrisbanes.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8994/buggy-version/src.com.owncloud.android.ui.activity.CropActivity.java", "BodyUseAPI": [], "Fixed commit": "d3804e9a6fd1577447e223f571b1f570208a290a", "Url": "https://api.github.com/repos/sd1998/android", "Date": "2018-03-10T09:58:14Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Scanner.next()=>java.util.Scanner.nextLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/806/buggy-version/ChronoTimer.src.com.haxorz.ChronoTimer.Simulator.java", "BodyUseAPI": [], "Fixed commit": "2c0b247e1f0fbaf0d719202a7ba297dbeb74e01f", "Url": "https://api.github.com/repos/brycemcmurtryuwm/CS361", "Date": "2018-03-13T16:54:21Z"},
{"Line": "567=>561", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.opencastproject.assetmanager.util.Workflows.putInWorkspace(org.opencastproject.assetmanager.api.Snapshot)=>snapshot.getMediaPackage().clone()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/77/buggy-version/modules.live-schedule-impl.src.main.java.org.opencastproject.liveschedule.impl.LiveScheduleServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "c96a7c1b6b2f4dec512f45d173d6e658d0c3fe44", "Url": "https://api.github.com/repos/SussexLearningSystems/opencast", "Date": "2018-03-02T17:04:44Z"},
{"Line": "37=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.trim()=>java.lang.StringBuilder.substring(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9504/buggy-version/src.seedu.addressbook.ui.Formatter.java", "BodyUseAPI": [], "Fixed commit": "f3a67def6ec085dec23aa9f47b531b7088eefa36", "Url": "https://api.github.com/repos/shanwpf/addressbook-level2", "Date": "2018-02-13T12:50:00Z"},
{"Line": "54=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.modelmapper.ModelMapper.map(java.util.List<com.capgemini.jstk.capmates.repository.entities.HistoryEntity>,java.lang.Class)=>org.modelmapper.ModelMapper.map(java.util.List<com.capgemini.jstk.capmates.repository.entities.HistoryEntity>,java.lang.reflect.Type)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2351/buggy-version/src.main.java.com.capgemini.jstk.capmates.services.StatsService.java", "BodyUseAPI": [], "Fixed commit": "f17559b5fa701619d1f613cd86adeaf0bb90f92a", "Url": "https://api.github.com/repos/kredki/capmates", "Date": "2018-07-26T20:11:54Z"},
{"Line": "74=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.util.Comparator<java.util.Map.Entry<java.lang.Long, java.lang.Long>>() { public int compare(java.util.Map.Entry<java.lang.Long, java.lang.Long> o1, java.util.Map.Entry<java.lang.Long, java.lang.Long> o2) { return (o1.getValue().compareTo(o2.getValue())) * (-1); } }=>new java.util.Comparator<java.util.Map.Entry<java.lang.Long, java.lang.Long>>() { public int compare(java.util.Map.Entry<java.lang.Long, java.lang.Long> o1, java.util.Map.Entry<java.lang.Long, java.lang.Long> o2) { return (o1.getValue().compareTo(o2.getValue())) * (-1); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2351/buggy-version/src.main.java.com.capgemini.jstk.capmates.services.StatsService.java", "BodyUseAPI": [], "Fixed commit": "f17559b5fa701619d1f613cd86adeaf0bb90f92a", "Url": "https://api.github.com/repos/kredki/capmates", "Date": "2018-07-26T20:11:54Z"},
{"Line": "55=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.replaceAll(java.lang.String,java.lang.String)=>java.lang.String.replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5886/buggy-version/src.main.java.com.xandryex.utils.TextReplacer.java", "BodyUseAPI": [], "Fixed commit": "fb067c8d1724b00da661e535e7b7df0e6bd5ccda", "Url": "https://api.github.com/repos/deividasstr/docx-word-replacer", "Date": "2018-04-15T18:33:58Z"},
{"Line": "24=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.springframework.context.MessageSource.getMessage(java.lang.String,java.lang.Object[],org.springframework.context.i18n.LocaleContextHolder.getLocale())=>org.springframework.context.MessageSource.getMessage(java.lang.String,java.lang.Object[],java.lang.String,org.springframework.context.i18n.LocaleContextHolder.getLocale())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1734/buggy-version/server.src.main.java.com.gms.util.i18n.MessageResolver.java", "BodyUseAPI": [], "Fixed commit": "9ff089c8d8b373bf86947f866e4f7a1c1959f6ac", "Url": "https://api.github.com/repos/lealceldeiro/gms", "Date": "2018-01-02T15:41:01Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Thread.run()=>java.lang.Thread.start()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6284/buggy-version/src.main.java.cn.springmvc.service.Intimacy.java", "BodyUseAPI": [], "Fixed commit": "dffaa35751528077a3747890efcff6391d53e484", "Url": "https://api.github.com/repos/yeluting/github", "Date": "2018-07-18T01:03:15Z"},
{"Line": "38=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.fasterxml.jackson.core.JsonParser.readValueAs(java.lang.Class)=>BooleanFieldDeserializer.INSTANCE.deserialize(com.fasterxml.jackson.core.JsonParser,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3149/buggy-version/src.main.java.com.urbanairship.api.push.parse.notification.web.WebDevicePayloadReader.java", "BodyUseAPI": [], "Fixed commit": "73dc4ff82f51d03cb06b871e9693d4e92e7f9803", "Url": "https://api.github.com/repos/urbanairship/java-library", "Date": "2018-09-13T23:22:06Z"},
{"Line": "125=>144", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Collections.sort(java.util.ArrayList<java.lang.Integer>,java.util.Comparator<java.lang.Integer>)=>java.util.Collections.sort(java.util.ArrayList<model.Task>,java.util.Comparator<java.lang.Object>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4797/buggy-version/src.model.TaskList.java", "BodyUseAPI": [], "Fixed commit": "d8f2a7f22333f96ca58684a9f6319c416a56cbe2", "Url": "https://api.github.com/repos/BeastyBuffalos/Tskmgr2.0", "Date": "2018-04-04T17:38:00Z"},
{"Line": "108=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.github.mikephil.charting.data.BubbleEntry.getX()=>com.github.mikephil.charting.interfaces.datasets.IBubbleDataSet.getColor(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2544/buggy-version/MPChartLib.src.main.java.com.github.mikephil.charting.renderer.BubbleChartRenderer.java", "BodyUseAPI": [], "Fixed commit": "aa315cd1109c783a15b4f5770e4570933747a57b", "Url": "https://api.github.com/repos/IronTeaPot/MPAndroidChart", "Date": "2018-02-25T08:45:39Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.firebase.database.DataSnapshot.getValue(java.lang.Class)=>dataSnapshot.getChildren().iterator().next().getValue(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1949/buggy-version/app.src.main.java.team6.slidingtiles.RoomFinder.java", "BodyUseAPI": [], "Fixed commit": "82f786d4deb52e69f00baf33c84fe31509d253e8", "Url": "https://api.github.com/repos/ehossam/Sliding-Tile-Puzzle", "Date": "2018-03-01T02:09:06Z"},
{"Line": "598=>601", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "this.selectedBody.atmosphere.isBreathable()=>this.selectedBody.getUnlocalizedName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7486/buggy-version/src.main.java.com.mjr.extraplanets.client.gui.screen.CustomCelestialSelection.java", "BodyUseAPI": [], "Fixed commit": "952482e69e6a306655334f04dfff011b397bc19e", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-01-03T16:38:33Z"},
{"Line": "58=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.electivechaos.claimsadjuster.maintabs.ReportListFragment.1.startActivity(android.content.Intent)=>com.electivechaos.claimsadjuster.maintabs.ReportListFragment.1.startActivityForResult(android.content.Intent,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/370/buggy-version/project.app.src.main.java.com.electivechaos.claimsadjuster.maintabs.ReportListFragment.java", "BodyUseAPI": [], "Fixed commit": "ebc72c7f6ba09dde711b29ccac8d089983c885c0", "Url": "https://api.github.com/repos/krishnakhandagale/RoportTool", "Date": "2018-05-18T04:34:18Z"},
{"Line": "159=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<models.Category>.add(models.Category)=>java.util.ArrayList<uk.ac.bath.csedgroup2.systemx.models.Category>.add(uk.ac.bath.csedgroup2.systemx.models.Category)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.DBF.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "105=>105", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "models.TimerEntry.setUrl(urlDao.queryForId(resultColumns[1]))=>uk.ac.bath.csedgroup2.systemx.models.TimerEntry.setUrl(urlDao.queryForId(resultColumns[1]))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.DBF.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "127=>127", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.j256.ormlite.dao.Dao<models.Url, java.lang.String>.update(models.Url)=>com.j256.ormlite.dao.Dao<uk.ac.bath.csedgroup2.systemx.models.Url, java.lang.String>.update(uk.ac.bath.csedgroup2.systemx.models.Url)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.DBF.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "153=>153", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "models.Category.setTitle(((resultColumns[0]) != null ? resultColumns[0] : \"Others\"))=>uk.ac.bath.csedgroup2.systemx.models.Category.setTitle(((resultColumns[0]) != null ? resultColumns[0] : \"Others\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.DBF.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "129=>129", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.j256.ormlite.dao.Dao<models.Category, java.lang.String>.delete(models.Category)=>com.j256.ormlite.dao.Dao<uk.ac.bath.csedgroup2.systemx.models.Category, java.lang.String>.delete(uk.ac.bath.csedgroup2.systemx.models.Category)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.DBF.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "126=>126", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "models.Url.setCategory(<nulltype>)=>uk.ac.bath.csedgroup2.systemx.models.Url.setCategory(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.DBF.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "106=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "models.TimerEntry.setDuration(int)=>uk.ac.bath.csedgroup2.systemx.models.TimerEntry.setDuration(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.DBF.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "124=>124", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "models.Category.getId()=>uk.ac.bath.csedgroup2.systemx.models.Category.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.DBF.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.j256.ormlite.dao.Dao<models.Url, java.lang.String>.create(models.Url)=>com.j256.ormlite.dao.Dao<uk.ac.bath.csedgroup2.systemx.models.Url, java.lang.String>.create(uk.ac.bath.csedgroup2.systemx.models.Url)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.DBF.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "111=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<models.TimerEntry>.add(models.TimerEntry)=>java.util.ArrayList<uk.ac.bath.csedgroup2.systemx.models.TimerEntry>.add(uk.ac.bath.csedgroup2.systemx.models.TimerEntry)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.DBF.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "70=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.j256.ormlite.dao.Dao<models.TimerEntry, java.lang.String>.create(models.TimerEntry)=>com.j256.ormlite.dao.Dao<uk.ac.bath.csedgroup2.systemx.models.TimerEntry, java.lang.String>.create(uk.ac.bath.csedgroup2.systemx.models.TimerEntry)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.DBF.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "154=>154", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "models.Category.setDuration(int)=>uk.ac.bath.csedgroup2.systemx.models.Category.setDuration(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.DBF.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "154=>154", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "db.categoryDao.createOrUpdate(models.Category)=>db.categoryDao.createOrUpdate(uk.ac.bath.csedgroup2.systemx.models.Category)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.GUI.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "104=>104", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "uk.ac.bath.csedgroup2.systemx.DBF.deleteCategory(models.Category)=>uk.ac.bath.csedgroup2.systemx.DBF.deleteCategory(uk.ac.bath.csedgroup2.systemx.models.Category)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.GUI.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "131=>131", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "models.Category.getTitle()=>uk.ac.bath.csedgroup2.systemx.models.Category.getTitle()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.GUI.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "129=>129", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "db.categoryDao.update(models.Category)=>db.categoryDao.update(uk.ac.bath.csedgroup2.systemx.models.Category)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.GUI.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "100=>100", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "models.Category.getTitle()=>uk.ac.bath.csedgroup2.systemx.models.Category.getTitle()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.GUI.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "127=>127", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "models.Category.setTitle(java.lang.String)=>uk.ac.bath.csedgroup2.systemx.models.Category.setTitle(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.GUI.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "111=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "models.Category.getTitle()=>uk.ac.bath.csedgroup2.systemx.models.Category.getTitle()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1462/buggy-version/src.main.java.uk.ac.bath.csedgroup2.systemx.GUI.java", "BodyUseAPI": [], "Fixed commit": "f4bd3d55a9bef94f5941cadca88f1a296bcfc513", "Url": "https://api.github.com/repos/jackp1711/SystemX", "Date": "2018-04-12T12:33:02Z"},
{"Line": "277=>274", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.vinners.funicular.uploader.WebApiClient.getDefaultApiClient()=>com.vinners.funicular.uploader.WebApiClient.getDefaultApiClient(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2017/buggy-version/funicular.src.main.java.com.vinners.funicular.uploader.ImageUploader.java", "BodyUseAPI": [], "Fixed commit": "ad23f3a3d04dfda482f8debdbb3f45743c2da76a", "Url": "https://api.github.com/repos/Him-khati/funicular", "Date": "2018-04-25T12:25:11Z"},
{"Line": "129=>136", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ir.atitec.signalgoApp.TestService.login(ir.atitec.signalgo.util.GoResponseHandler<java.lang.Object>)=>ir.atitec.signalgoApp.TestService.followTag(ir.atitec.signalgo.util.GoResponseHandler<java.lang.Object>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2620/buggy-version/app.src.main.java.ir.atitec.signalgoApp.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "9a78b9d45eddcaba70cb02ea2ef69eec8425f1a9", "Url": "https://api.github.com/repos/hamedgramzi/signalGoClient", "Date": "2018-10-04T10:53:18Z"},
{"Line": "32=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "builder.scheme(\"https\").authority(CidaasSDKEntity.cidaasSDKEntityInstance.getAuthorizationURL())=>builder.scheme(\"https\").encodedAuthority(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7157/buggy-version/cidaassdk.src.main.java.com.cidaassdk.helpers.CidaasSDKHelper.java", "BodyUseAPI": [], "Fixed commit": "e227be6785218c4dcd559e368f7bb9203f5a6811", "Url": "https://api.github.com/repos/Cidaas/cidaas-sdk-android", "Date": "2018-01-05T12:53:29Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.project.service.MealServiceImpl.saveMeal(com.project.model.Meal)=>com.project.service.MealServiceImpl.create(com.project.model.Meal)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5225/buggy-version/src.main.java.com.project.controller.MealsController.java", "BodyUseAPI": [], "Fixed commit": "dd36b866d3a1e9a995c4e0ebedcd05e333c77f51", "Url": "https://api.github.com/repos/Dimon1234/CaloriesManager", "Date": "2018-03-20T11:20:50Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.project.service.MealServiceImpl.findOne(long)=>com.project.service.MealServiceImpl.get(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5225/buggy-version/src.main.java.com.project.controller.MealsController.java", "BodyUseAPI": [], "Fixed commit": "dd36b866d3a1e9a995c4e0ebedcd05e333c77f51", "Url": "https://api.github.com/repos/Dimon1234/CaloriesManager", "Date": "2018-03-20T11:20:50Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.project.service.MealServiceImpl.deleteMeal(long)=>com.project.service.MealServiceImpl.delete(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5225/buggy-version/src.main.java.com.project.controller.MealsController.java", "BodyUseAPI": [], "Fixed commit": "dd36b866d3a1e9a995c4e0ebedcd05e333c77f51", "Url": "https://api.github.com/repos/Dimon1234/CaloriesManager", "Date": "2018-03-20T11:20:50Z"},
{"Line": "9=>8", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "(java.lang.String)=>io.anuke.mindustry.world.Block(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1615/buggy-version/core.src.io.anuke.mindustry.world.blocks.types.Decoration.java", "BodyUseAPI": [], "Fixed commit": "72bfdbcfa41811643364200649f81e23a19efbaa", "Url": "https://api.github.com/repos/Gab351/Anuken-Mindustry", "Date": "2018-02-09T20:28:38Z"},
{"Line": "481=>481", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "MessageManager.messList.get((((MessageManager.messList.size()) - 1) - index))=>MessageManager.messList.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4206/buggy-version/ARnote.src.main.java.com.IDS.administrator.arnote.VuforiaSamples.app.UserDefinedTargets.UserDefinedTargetRenderer.java", "BodyUseAPI": [], "Fixed commit": "dd00b66364e3471170bdf283b5f5f78a6034d2b0", "Url": "https://api.github.com/repos/DLBL0624/ARNote", "Date": "2018-04-22T21:48:17Z"},
{"Line": "106=>110", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.arcaneminecraft.api.ComponentBuilder.append(java.lang.String)=>com.arcaneminecraft.api.BaseComponent.setItalic(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8494/buggy-version/src.main.java.com.arcaneminecraft.api.ArcaneText.java", "BodyUseAPI": [], "Fixed commit": "fd19de8b355686dc8466b51f3b3dc31b422c0bf3", "Url": "https://api.github.com/repos/ArcaneMinecraft/ArcaneAPI", "Date": "2018-06-29T09:15:33Z"},
{"Line": "147=>147", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.debug((((\"is directory: {}\" + (path.toString())) + \" \") + (fileStatus.isDirectory())))=>org.slf4j.Logger.debug(java.lang.String,path.toString(),fileStatus.isDirectory())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7014/buggy-version/src.main.java.com.ibm.stocator.fs.ObjectStoreFileSystem.java", "BodyUseAPI": [], "Fixed commit": "039f0ccda32813622dcf0dd46dedd3f1b013fc6e", "Url": "https://api.github.com/repos/CODAIT/stocator", "Date": "2018-04-04T08:05:45Z"},
{"Line": "82=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "economysimulation.Methods.applyChartTheme(org.jfree.chart.JFreeChart)=>economysimulation.Methods.applyChartTheme(org.jfree.chart.JFreeChart,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2365/buggy-version/src.economysimulation.Methods.java", "BodyUseAPI": [], "Fixed commit": "752fdde1697f1444dbe9bad2d46d8bb15cfd4df5", "Url": "https://api.github.com/repos/MaxGitHubRep/EconomySimulation", "Date": "2018-04-11T14:35:34Z"},
{"Line": "161=>161", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ua.edu.sumdu.essuir.repository.ChairRepository.getOne(java.lang.Integer)=>ua.edu.sumdu.essuir.repository.ChairRepository.findOne(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7786/buggy-version/dspace-jspui.src.main.java.ua.edu.sumdu.essuir.utils.EssuirUtils.java", "BodyUseAPI": [], "Fixed commit": "46d7fbde147187dd308329603f40fb27017f7fb2", "Url": "https://api.github.com/repos/ELIT2014/DSpace", "Date": "2018-05-16T09:08:46Z"},
{"Line": "169=>169", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ua.edu.sumdu.essuir.repository.AuthorsRepository.getOne(new ua.edu.sumdu.essuir.utils.AuthorsLocalizationPK().setSurname_en(surname).setInitials_en(initials))=>ua.edu.sumdu.essuir.repository.AuthorsRepository.findOne(new ua.edu.sumdu.essuir.utils.AuthorsLocalizationPK().setSurname_en(surname).setInitials_en(initials))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7786/buggy-version/dspace-jspui.src.main.java.ua.edu.sumdu.essuir.utils.EssuirUtils.java", "BodyUseAPI": [], "Fixed commit": "46d7fbde147187dd308329603f40fb27017f7fb2", "Url": "https://api.github.com/repos/ELIT2014/DSpace", "Date": "2018-05-16T09:08:46Z"},
{"Line": "17=>17", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Deque<A>.addLast(A)=>java.util.Deque<A>.addFirst(A)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8755/buggy-version/src.main.java.spbau.Collections.java", "BodyUseAPI": [], "Fixed commit": "bc2a1b5a17e0cecd6be3672b000f4086bdc01cba", "Url": "https://api.github.com/repos/xamgore/au-java-homework", "Date": "2018-05-22T16:50:19Z"},
{"Line": "114=>113", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip.Builder(this).anchorView(v).text(R.string.btn_overlay).gravity(Gravity.START).animated(true).transparentOverlay(boolean)=>new io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip.Builder(this).anchorView(v).text(R.string.btn_overlay).gravity(Gravity.START).animated(true).modal(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/281/buggy-version/sample.src.main.java.io.github.douglasjunior.androidSimpleTooltip.sample.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7cb22d5a64196c4478606f267efa60529b18a3a5", "Url": "https://api.github.com/repos/jgavazzisp/android-simple-tooltip", "Date": "2018-03-22T07:36:59Z"},
{"Line": "114=>113", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip.Builder(this).anchorView(v).text(R.string.btn_overlay).gravity(Gravity.START).animated(true).transparentOverlay(false).build().show()=>new io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip.Builder(this).anchorView(v).text(R.string.btn_overlay).gravity(Gravity.START).animated(true).modal(true).dismissOnOutsideTouch(true).transparentOverlay(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/281/buggy-version/sample.src.main.java.io.github.douglasjunior.androidSimpleTooltip.sample.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7cb22d5a64196c4478606f267efa60529b18a3a5", "Url": "https://api.github.com/repos/jgavazzisp/android-simple-tooltip", "Date": "2018-03-22T07:36:59Z"},
{"Line": "114=>113", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip.Builder(this).anchorView(v).text(R.string.btn_overlay).gravity(Gravity.START).animated(true).transparentOverlay(false).build()=>new io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip.Builder(this).anchorView(v).text(R.string.btn_overlay).gravity(Gravity.START).animated(true).modal(true).dismissOnOutsideTouch(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/281/buggy-version/sample.src.main.java.io.github.douglasjunior.androidSimpleTooltip.sample.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7cb22d5a64196c4478606f267efa60529b18a3a5", "Url": "https://api.github.com/repos/jgavazzisp/android-simple-tooltip", "Date": "2018-03-22T07:36:59Z"},
{"Line": "114=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip.Builder(this).anchorView(v).text(R.string.btn_overlay).gravity(Gravity.START).animated(true).transparentOverlay(boolean)=>new io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip.Builder(this).anchorView(v).text(R.string.btn_overlay).gravity(Gravity.START).animated(true).modal(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/281/buggy-version/sample.src.main.java.io.github.douglasjunior.androidSimpleTooltip.sample.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7cb22d5a64196c4478606f267efa60529b18a3a5", "Url": "https://api.github.com/repos/jgavazzisp/android-simple-tooltip", "Date": "2018-03-22T07:36:59Z"},
{"Line": "481=>481", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.ekstep.content.tool.service.SyncService.updateQuestion(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>,java.lang.String,boolean)=>org.ekstep.content.tool.service.SyncService.createQuestion(java.util.Map<java.lang.String, java.lang.Object>,java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3235/buggy-version/platform-tools.spikes.content-tool.src.main.java.org.ekstep.content.tool.service.SyncService.java", "BodyUseAPI": [], "Fixed commit": "4138b91c854007b7807f68671cfa37a0f894e4db", "Url": "https://api.github.com/repos/project-sunbird/sunbird-learning-platform", "Date": "2018-10-13T16:09:24Z"},
{"Line": "93=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.grpc.stub.StreamObserver<globesort.IntArray>.onNext(long)=>IntArray.Builder.addValues(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8309/buggy-version/src.main.java.globesort.GlobeSortServer.java", "BodyUseAPI": [], "Fixed commit": "731a9255ff8543b19a26ca70bb348337a6476328", "Url": "https://api.github.com/repos/asannasi/sp18-hw2", "Date": "2018-05-09T08:06:21Z"},
{"Line": "62=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.zopim.android.sdk.prechat.PreChatForm.build()=>com.zopim.android.sdk.api.ZopimChat.SessionConfig.preChatForm(com.zopim.android.sdk.prechat.PreChatForm)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2436/buggy-version/android.src.main.java.com.taskrabbit.zendesk.RNZendeskChatModule.java", "BodyUseAPI": [], "Fixed commit": "0594d8b5960cccd3c8d4b0cd04e761f4e3d93d8e", "Url": "https://api.github.com/repos/kundarmah/react-native-zendesk-chat", "Date": "2018-08-03T07:40:05Z"},
{"Line": "62=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.zopim.android.sdk.prechat.PreChatForm.build()=>com.zopim.android.sdk.api.ZopimChat.SessionConfig.preChatForm(com.zopim.android.sdk.prechat.PreChatForm)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2436/buggy-version/android.src.main.java.com.taskrabbit.zendesk.RNZendeskChatModule.java", "BodyUseAPI": [], "Fixed commit": "0594d8b5960cccd3c8d4b0cd04e761f4e3d93d8e", "Url": "https://api.github.com/repos/kundarmah/react-native-zendesk-chat", "Date": "2018-08-03T07:40:05Z"},
{"Line": "83=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.taskrabbit.zendesk.RNZendeskChatModule.setPreChatForm(com.facebook.react.bridge.ReadableMap)=>com.taskrabbit.zendesk.RNZendeskChatModule.preChatConfig(com.facebook.react.bridge.ReadableMap)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2436/buggy-version/android.src.main.java.com.taskrabbit.zendesk.RNZendeskChatModule.java", "BodyUseAPI": [], "Fixed commit": "0594d8b5960cccd3c8d4b0cd04e761f4e3d93d8e", "Url": "https://api.github.com/repos/kundarmah/react-native-zendesk-chat", "Date": "2018-08-03T07:40:05Z"},
{"Line": "131=>131", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.fluxMVC.core.mvc.handler.MvcBeanHandler.setBean(java.lang.Class<?>,com.fluxMVC.core.aop.proxy.Proxy)=>com.fluxMVC.core.mvc.handler.MvcBeanHandler.setBean(java.lang.Class<?>,java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3310/buggy-version/src.main.java.com.fluxMVC.core.initialize.AopInitialize.java", "BodyUseAPI": [], "Fixed commit": "68034c0e167b0f6bb3bc1e088f255011ae70a341", "Url": "https://api.github.com/repos/hfismyangel/FluxMVC", "Date": "2018-05-30T01:49:16Z"},
{"Line": "13=>13", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.openqa.selenium.By.cssSelector(java.lang.String)=>org.openqa.selenium.By.id(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1916/buggy-version/src.main.java.selenium.pages.com.google.GmailLoginPage.java", "BodyUseAPI": [], "Fixed commit": "34a1fd2dddb9a41d7d6b58acd35b98963d2c8f42", "Url": "https://api.github.com/repos/vova-mark/selenium", "Date": "2018-02-15T21:51:22Z"},
{"Line": "121=>121", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.Integer, java.lang.Integer>.get(java.lang.Integer)=>bisis.jongo_records.JoRecord.getRN()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1894/buggy-version/src.main.java.bisis.prepisBGB.RecordsTransfusionMachine.java", "BodyUseAPI": [], "Fixed commit": "7ff5b9d4a15e1608f4996adf1ffbe92cf5ff24a6", "Url": "https://api.github.com/repos/ftninformatika/bisis2json", "Date": "2018-10-23T09:54:45Z"},
{"Line": "553=>553", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "us.ihmc.commonWalkingControlModules.capturePoint.ICPPlannerWithAngularMomentumOffsetInterface.getTimeInCurrentState()=>us.ihmc.commonWalkingControlModules.capturePoint.ICPPlannerWithAngularMomentumOffsetInterface.getTimeInCurrentStateRemaining()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8203/buggy-version/ihmc-common-walking-control-modules.src.main.java.us.ihmc.commonWalkingControlModules.capturePoint.BalanceManager.java", "BodyUseAPI": [], "Fixed commit": "d38ba3e0a6c9fab05acefa03699f2804ce02b72b", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-03-06T05:17:16Z"},
{"Line": "15=>16", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.Toolbar.setTitleTextColor(getResources().getColor(R.color.white))=>android.support.v7.widget.Toolbar.setTitleTextColor(getResources().getColor(R.color.white))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8034/buggy-version/app.src.main.java.com.example.pranaykumar.sociointegrate.AnonymousSocketActivity.java", "BodyUseAPI": [], "Fixed commit": "99265cdd89569712a67322bc9fd3f008d9329449", "Url": "https://api.github.com/repos/PraneethYerra/hack36-android", "Date": "2018-01-27T23:03:11Z"},
{"Line": "16=>17", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.pranaykumar.sociointegrate.AnonymousSocketActivity.getActionBar()=>com.example.pranaykumar.sociointegrate.AnonymousSocketActivity.getSupportActionBar()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8034/buggy-version/app.src.main.java.com.example.pranaykumar.sociointegrate.AnonymousSocketActivity.java", "BodyUseAPI": [], "Fixed commit": "99265cdd89569712a67322bc9fd3f008d9329449", "Url": "https://api.github.com/repos/PraneethYerra/hack36-android", "Date": "2018-01-27T23:03:11Z"},
{"Line": "14=>15", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.example.pranaykumar.sociointegrate.AnonymousSocketActivity.setActionBar(android.widget.Toolbar)=>com.example.pranaykumar.sociointegrate.AnonymousSocketActivity.setSupportActionBar(android.support.v7.widget.Toolbar)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8034/buggy-version/app.src.main.java.com.example.pranaykumar.sociointegrate.AnonymousSocketActivity.java", "BodyUseAPI": [], "Fixed commit": "99265cdd89569712a67322bc9fd3f008d9329449", "Url": "https://api.github.com/repos/PraneethYerra/hack36-android", "Date": "2018-01-27T23:03:11Z"},
{"Line": "184=>185", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.Intent.putExtra(java.lang.String,1)=>android.content.Intent.putExtra(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8034/buggy-version/app.src.main.java.com.example.pranaykumar.sociointegrate.HomeActivity.java", "BodyUseAPI": [], "Fixed commit": "99265cdd89569712a67322bc9fd3f008d9329449", "Url": "https://api.github.com/repos/PraneethYerra/hack36-android", "Date": "2018-01-27T23:03:11Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.view.View.setBackgroundColor(int)=>android.view.View.setBackgroundResource(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4284/buggy-version/app.src.ereferrals.java.org.eyeseetea.malariacare.strategies.DropdownAdapterStrategy.java", "BodyUseAPI": [], "Fixed commit": "39badf9cb30f9eea11409380ce8c4d9d84de8d1e", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-09-10T12:54:39Z"},
{"Line": "22=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.view.View.setBackgroundColor(int)=>android.view.View.setBackgroundResource(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4284/buggy-version/app.src.ereferrals.java.org.eyeseetea.malariacare.strategies.DropdownAdapterStrategy.java", "BodyUseAPI": [], "Fixed commit": "39badf9cb30f9eea11409380ce8c4d9d84de8d1e", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-09-10T12:54:39Z"},
{"Line": "81=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.view.View.setBackgroundColor(int)=>android.view.View.setBackgroundResource(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4284/buggy-version/app.src.main.java.org.eyeseetea.malariacare.layout.adapters.general.DialogSpinnerAdapter.java", "BodyUseAPI": [], "Fixed commit": "39badf9cb30f9eea11409380ce8c4d9d84de8d1e", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-09-10T12:54:39Z"},
{"Line": "342=>343", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.geoserver.jdbcconfig.internal.Joiner.on(java.lang.String)=>com.google.common.base.Joiner.on(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3724/buggy-version/src.community.jdbcconfig.src.main.java.org.geoserver.jdbcconfig.internal.ConfigDatabase.java", "BodyUseAPI": [], "Fixed commit": "45bf1cb0407c4c0692488fce86d6051e6385cecb", "Url": "https://api.github.com/repos/boundlessgeo/geoserver", "Date": "2018-02-11T19:35:10Z"},
{"Line": "342=>343", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.geoserver.jdbcconfig.internal.Joiner.on(java.lang.String)=>com.google.common.base.Joiner.on(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3724/buggy-version/src.community.jdbcconfig.src.main.java.org.geoserver.jdbcconfig.internal.ConfigDatabase.java", "BodyUseAPI": [], "Fixed commit": "45bf1cb0407c4c0692488fce86d6051e6385cecb", "Url": "https://api.github.com/repos/boundlessgeo/geoserver", "Date": "2018-02-11T19:35:10Z"},
{"Line": "21=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new java.io.File(\"/home/neil/Downloads\")=>new java.io.File(java.lang.System.getProperty(\"user.home\"), \"Downloads\")", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/511/buggy-version/src.org.alcoseba.addjarplugin.classpath.AddJarClasspathVariableInitializer.java", "BodyUseAPI": [], "Fixed commit": "b8c0361f2e4e2282f984a9c0ed0c6f0d70b6f7f3", "Url": "https://api.github.com/repos/neilalcoseba/org.alcoseba.addjar", "Date": "2018-08-29T12:31:46Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new java.io.File(\"/home/neil/Downloads\")=>new java.io.File(java.lang.System.getProperty(\"user.home\"), \"Downloads\")", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/511/buggy-version/src.org.alcoseba.addjarplugin.properties.AddJarPropertyPage.java", "BodyUseAPI": [], "Fixed commit": "b8c0361f2e4e2282f984a9c0ed0c6f0d70b6f7f3", "Url": "https://api.github.com/repos/neilalcoseba/org.alcoseba.addjar", "Date": "2018-08-29T12:31:46Z"},
{"Line": "186=>186", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.squareup.picasso.Picasso.with(getContext()).load(thumbnailUrl).fit()=>com.squareup.picasso.Picasso.with(getContext()).load(thumbnailUrl).error(R.drawable.generic)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1529/buggy-version/app.src.main.java.udacity.com.baking_app.fragments.PlayerFragment.java", "BodyUseAPI": [], "Fixed commit": "c67fcae77f27e68f2f6336e62b44c2835e7dd728", "Url": "https://api.github.com/repos/IgorRAzumov/baking_app_udacity", "Date": "2018-06-01T12:33:40Z"},
{"Line": "91=>91", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.ScrollView.fullScroll(ScrollView.FOCUS_UP)=>android.widget.ScrollView.smoothScrollTo(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7798/buggy-version/CFDPal.app.src.main.java.cz.numsolution.cfdpal.view.CalculationFragment.java", "BodyUseAPI": [], "Fixed commit": "1e6d5dca18d084c5703bb22f942078f5f2467a20", "Url": "https://api.github.com/repos/tantecky/android", "Date": "2018-04-03T08:55:20Z"},
{"Line": "204=>204", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.swing.JFileChooser.showSaveDialog(<nulltype>)=>javax.swing.JFileChooser.showOpenDialog(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6812/buggy-version/src.org.petctviewer.scintigraphy.CTSegmentation.CT_Segmentation_GUI.java", "BodyUseAPI": [], "Fixed commit": "45e0dd4a75582bd3215a811753ece7b54ab0fe58", "Url": "https://api.github.com/repos/salimkanoun/CT_Segmentation", "Date": "2018-04-05T18:11:53Z"},
{"Line": "163=>147", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "bio.knowledge.aggregator.ontology.Ontology.getDefault()=>bio.knowledge.aggregator.ontology.Ontology.getClassByName(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4164/buggy-version/aggregator.src.main.java.bio.knowledge.aggregator.ConceptTypeService.java", "BodyUseAPI": [], "Fixed commit": "1a59cf6695a4e2fa66f4bbf3c62089c147a5bf28", "Url": "https://api.github.com/repos/NCATS-Tangerine/beacon-aggregator", "Date": "2018-05-16T15:22:22Z"},
{"Line": "163=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "bio.knowledge.aggregator.ConceptTypeService.getConceptType(ontology.getDefault())=>bio.knowledge.aggregator.ConceptTypeService.lookUpByIdentifier(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4164/buggy-version/aggregator.src.main.java.bio.knowledge.aggregator.ConceptTypeService.java", "BodyUseAPI": [], "Fixed commit": "1a59cf6695a4e2fa66f4bbf3c62089c147a5bf28", "Url": "https://api.github.com/repos/NCATS-Tangerine/beacon-aggregator", "Date": "2018-05-16T15:22:22Z"},
{"Line": "258=>258", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.google.android.exoplayer2.ui.PlayerView.setVisibility(View.INVISIBLE)=>com.google.android.exoplayer2.ui.PlayerView.setAlpha(float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1565/buggy-version/app.src.main.java.ca.nick.rxcbcmpx.ui.VideoAdapter.java", "BodyUseAPI": [], "Fixed commit": "1c2465d23fcdd371c4850718a6d9c5e278b6d60e", "Url": "https://api.github.com/repos/nihk/Cbc-Video-Lineup", "Date": "2018-08-13T21:50:41Z"},
{"Line": "253=>253", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.google.android.exoplayer2.ui.PlayerView.setVisibility(View.VISIBLE)=>com.google.android.exoplayer2.ui.PlayerView.setAlpha(float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1565/buggy-version/app.src.main.java.ca.nick.rxcbcmpx.ui.VideoAdapter.java", "BodyUseAPI": [], "Fixed commit": "1c2465d23fcdd371c4850718a6d9c5e278b6d60e", "Url": "https://api.github.com/repos/nihk/Cbc-Video-Lineup", "Date": "2018-08-13T21:50:41Z"},
{"Line": "88=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.github.bayu1993.binarbasicactivity.activity.OnboardingActivity.btnNextAction()=>io.github.bayu1993.binarbasicactivity.activity.OnboardingActivity.btnSkipAction()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4358/buggy-version/app.src.main.java.io.github.bayu1993.binarbasicactivity.activity.OnboardingActivity.java", "BodyUseAPI": [], "Fixed commit": "52ef357db5901c104cdf8c7bee8c22b5f3f6f180", "Url": "https://api.github.com/repos/bayu1993/BinarBasicActivity", "Date": "2018-03-30T07:26:40Z"},
{"Line": "669=>668", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "communitycommons.Misc.trace(java.lang.String)=>com.mendix.logging.ILogNode.trace(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/656/buggy-version/src.CommunityCommons.javasource.communitycommons.Misc.java", "BodyUseAPI": [], "Fixed commit": "5dafd54c5ebf024bb95417d1a67633894f89b8a7", "Url": "https://api.github.com/repos/mendix/CommunityCommons", "Date": "2018-06-06T12:54:22Z"},
{"Line": "668=>666", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "communitycommons.Misc.trace(java.lang.String)=>com.mendix.logging.ILogNode.trace(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/656/buggy-version/src.CommunityCommons.javasource.communitycommons.Misc.java", "BodyUseAPI": [], "Fixed commit": "5dafd54c5ebf024bb95417d1a67633894f89b8a7", "Url": "https://api.github.com/repos/mendix/CommunityCommons", "Date": "2018-06-06T12:54:22Z"},
{"Line": "439=>441", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "files.getFile(bildTopicId).toString()=>files.getFile(bildTopicId).getPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4101/buggy-version/src.main.java.de.kiezatlas.website.WebsitePlugin.java", "BodyUseAPI": [], "Fixed commit": "b444c339379aba39c7cc22786cfbe1e2a4eac097", "Url": "https://api.github.com/repos/mukil/dm4-kiezatlas-website", "Date": "2018-09-01T12:52:14Z"},
{"Line": "166=>170", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println((((\"proto for \" + javaType) + \" -> \") + jType))=>org.slf4j.Logger.debug(java.lang.String,java.lang.reflect.Type,org.javers.core.metamodel.type.JaversType)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3050/buggy-version/javers-core.src.main.java.org.javers.core.metamodel.type.TypeMapperState.java", "BodyUseAPI": [], "Fixed commit": "9b70aa8205b2c8b1d96fc63b962a80b75475489d", "Url": "https://api.github.com/repos/javers/javers", "Date": "2018-01-31T08:21:17Z"},
{"Line": "27=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.lody.virtual.client.hook.proxies.phonesubinfo.PhoneSubInfoStub.addMethodProxy(com.lody.virtual.client.hook.base.ReplaceLastPkgMethodProxy)=>com.lody.virtual.client.hook.proxies.phonesubinfo.PhoneSubInfoStub.addMethodProxy(com.lody.virtual.client.hook.base.StaticMethodProxy)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/667/buggy-version/VirtualApp.lib.src.main.java.com.lody.virtual.client.hook.proxies.phonesubinfo.PhoneSubInfoStub.java", "BodyUseAPI": [], "Fixed commit": "9097e9fddc4031852e5032670f33ad006240190d", "Url": "https://api.github.com/repos/darkskygit/VirtualApp", "Date": "2018-01-02T06:48:22Z"},
{"Line": "78=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.ballerinalang.bre.Context.setReturnValues(<nulltype>,org.ballerinalang.nativeimpl.io.utils.IOUtils.createError(context, msg))=>org.ballerinalang.bre.Context.setReturnValues(org.ballerinalang.model.values.BTable,org.ballerinalang.nativeimpl.io.utils.IOUtils.createError(context, msg))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7396/buggy-version/stdlib.ballerina-builtin.src.main.java.org.ballerinalang.nativeimpl.io.LoadToTable.java", "BodyUseAPI": [], "Fixed commit": "b1a1eb694a7bea1b9dc4903abcad0a493ea916f9", "Url": "https://api.github.com/repos/ayomawdb/ballerina", "Date": "2018-03-12T07:17:50Z"},
{"Line": "92=>92", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.ballerinalang.bre.Context.setReturnValues(<nulltype>,org.ballerinalang.nativeimpl.io.utils.IOUtils.createError(context, msg))=>org.ballerinalang.bre.Context.setReturnValues(org.ballerinalang.model.values.BTable,org.ballerinalang.nativeimpl.io.utils.IOUtils.createError(context, msg))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7396/buggy-version/stdlib.ballerina-builtin.src.main.java.org.ballerinalang.nativeimpl.io.LoadToTable.java", "BodyUseAPI": [], "Fixed commit": "b1a1eb694a7bea1b9dc4903abcad0a493ea916f9", "Url": "https://api.github.com/repos/ayomawdb/ballerina", "Date": "2018-03-12T07:17:50Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.ballerinalang.bre.Context.setReturnValues(<nulltype>,org.ballerinalang.nativeimpl.io.utils.IOUtils.createError(context, msg))=>org.ballerinalang.bre.Context.setReturnValues(org.ballerinalang.model.values.BTable,org.ballerinalang.nativeimpl.io.utils.IOUtils.createError(context, msg))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7396/buggy-version/stdlib.ballerina-builtin.src.main.java.org.ballerinalang.nativeimpl.io.LoadToTable.java", "BodyUseAPI": [], "Fixed commit": "b1a1eb694a7bea1b9dc4903abcad0a493ea916f9", "Url": "https://api.github.com/repos/ayomawdb/ballerina", "Date": "2018-03-12T07:17:50Z"},
{"Line": "126=>126", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.intellij.openapi.application.ApplicationManager.getApplication()=>com.intellij.psi.PsiElement.getProject()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5253/buggy-version/src.main.java.com.kalessil.phpStorm.phpInspectionsEA.openApi.BasePhpElementVisitor.java", "BodyUseAPI": [], "Fixed commit": "6663a8c475a2c5148e2373109b168048d42ab272", "Url": "https://api.github.com/repos/kalessil/phpinspectionsea", "Date": "2018-09-25T06:54:27Z"},
{"Line": "1555=>1560", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.debug(java.lang.String,double,java.lang.String,double,java.lang.String,double)=>org.slf4j.Logger.debug(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5687/buggy-version/app.src.main.java.info.nightscout.androidaps.plugins.TuneProfile.TuneProfile.java", "BodyUseAPI": [], "Fixed commit": "64ce0c6941c039fe3d6e1236314b88612871f94a", "Url": "https://api.github.com/repos/PoweRGbg/AndroidAPS", "Date": "2018-02-26T16:53:38Z"},
{"Line": "104=>104", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.bukkit.inventory.ItemStack.addEnchantment(Enchantment.DURABILITY,int)=>org.bukkit.inventory.ItemStack.addUnsafeEnchantment(Enchantment.DURABILITY,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1508/buggy-version/src.main.java.me.theblockbender.xpboost.inventory.UtilItem.java", "BodyUseAPI": [], "Fixed commit": "681bec1e641f8b89b878368934e514dfbf2a8014", "Url": "https://api.github.com/repos/JustDJplease/ExperienceBooster", "Date": "2018-03-15T23:20:37Z"},
{"Line": "67=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jfoenix.controls.JFXRadioButton.isSelected()=>com.jfoenix.controls.JFXCheckBox.isSelected()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2494/buggy-version/src.main.java.librinno.ui.addbook.AddBook.java", "BodyUseAPI": [], "Fixed commit": "27caf2ea5148ac80a2fbd341552be537a909ac79", "Url": "https://api.github.com/repos/reconrus/LibraryProject", "Date": "2018-03-05T07:15:28Z"},
{"Line": "729=>729", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "weka.classifiers.functions.LibLINEAR.buildClassifier(weka.core.Instances)=>weka.classifiers.meta.AdaBoostM1.buildClassifier(weka.core.Instances)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3629/buggy-version/src.main.java.com.eurecom.sentinel.SentimentSystemSentinel.java", "BodyUseAPI": [], "Fixed commit": "8acd8e6650b2741d7d236caa9b3abeed2c20fb61", "Url": "https://api.github.com/repos/AppliedResearchAndInnovation/sentinel", "Date": "2018-06-28T18:17:02Z"},
{"Line": "1209=>1209", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.talend.core.runtime.process.ITalendProcessJavaProject.getExternalResourcesFolder()=>org.talend.core.runtime.process.ITalendProcessJavaProject.getResourcesFolder()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6133/buggy-version/main.plugins.org.talend.core.src.main.java.org.talend.designer.runprocess.ProcessorUtilities.java", "BodyUseAPI": [], "Fixed commit": "8544acc63a2619fb1dbb494eeecd2678f2d188c4", "Url": "https://api.github.com/repos/Talend/tcommon-studio-se", "Date": "2018-04-11T08:28:49Z"},
{"Line": "136=>131", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.IllegalStateException.getMessage()=>javax.servlet.http.Part.getSubmittedFileName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4785/buggy-version/minijax-core.src.main.java.org.minijax.MinijaxMultipartForm.java", "BodyUseAPI": [], "Fixed commit": "b016db4b28b8fa9c753561ab3e2b21ebb4440b57", "Url": "https://api.github.com/repos/minijax/minijax", "Date": "2018-04-06T23:54:56Z"},
{"Line": "89=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.minijax.MinijaxMultipartForm.getInputStream(java.lang.String)=>org.minijax.util.IOUtils.toString(java.io.InputStream,java.nio.charset.Charset)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4785/buggy-version/minijax-core.src.main.java.org.minijax.MinijaxMultipartForm.java", "BodyUseAPI": [], "Fixed commit": "b016db4b28b8fa9c753561ab3e2b21ebb4440b57", "Url": "https://api.github.com/repos/minijax/minijax", "Date": "2018-04-06T23:54:56Z"},
{"Line": "238=>238", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.support.v4.app.FragmentTransaction.add(android.support.v4.app.Fragment,java.lang.String)=>android.support.v4.app.FragmentTransaction.replace(R.id.frag_container,android.support.v4.app.Fragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7770/buggy-version/app.src.main.java.com.eatlah.eatlah.fragments.Customer.CustomerOrderFragment.java", "BodyUseAPI": [], "Fixed commit": "58cb31144143d1f6d5e96de30709fbe6d65ad077", "Url": "https://api.github.com/repos/leongshengmin/EatLah", "Date": "2018-07-02T02:51:15Z"},
{"Line": "152=>152", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.LinearLayout.getContext()=>android.content.Context.finish()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4831/buggy-version/app.src.main.java.com.itbstudentapp.QuizSystem.QuizPanel.java", "BodyUseAPI": [], "Fixed commit": "c9cd510d0d540319e40bcb609833f191dbeba5cd", "Url": "https://api.github.com/repos/kendok/ITBStudentApp", "Date": "2018-03-27T15:29:20Z"},
{"Line": "225=>232", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.view.ViewGroup.setOnClickListener(android.view.View.OnClickListener)=>android.view.ViewGroup.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5463/buggy-version/app.src.main.java.com.angryburg.uapp.fragments.SettingsListFragment.java", "BodyUseAPI": [], "Fixed commit": "43d22af9889b9e14017fbe4a3e6278ac2a3142f3", "Url": "https://api.github.com/repos/nilesr/United4", "Date": "2018-09-13T18:44:25Z"},
{"Line": "39=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.File.exists()=>java.io.File.isFile()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8966/buggy-version/src.main.java.transpose.TransposeLauncher.java", "BodyUseAPI": [], "Fixed commit": "e9e9bc7b9c5f619552b09cc0f8c2cf7ef3dac060", "Url": "https://api.github.com/repos/Sertarus/ProgrammingTask2", "Date": "2018-04-26T19:43:20Z"},
{"Line": "68=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "themejunky.module_adsmanager.ads.interstitialAds.DisplayInterstitialAds._Interface.mGoBackFromDisplay()=>ManagerBase._Interface.mGoBackFromDisplay()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7100/buggy-version/module_adsmanager.src.main.java.themejunky.module_adsmanager.ads.interstitialAds.DisplayInterstitialAds.java", "BodyUseAPI": [], "Fixed commit": "e26c83d0db1387c86a20c906a98cada31b1ffa08", "Url": "https://api.github.com/repos/themejunky/AdsManager", "Date": "2018-05-23T12:33:41Z"},
{"Line": "136=>136", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "facebookAdsInterstitial.interstitialAd.show()=>themejunky.module_adsmanager.ads.interstitialAds.FacebookAdsInterstitial.showInterstitialFacebook(themejunky.module_adsmanager.managers.ManagerInterstitial)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7100/buggy-version/module_adsmanager.src.main.java.themejunky.module_adsmanager.managers.ManagerInterstitial.java", "BodyUseAPI": [], "Fixed commit": "e26c83d0db1387c86a20c906a98cada31b1ffa08", "Url": "https://api.github.com/repos/themejunky/AdsManager", "Date": "2018-05-23T12:33:41Z"},
{"Line": "38=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.TextView.setText(seekBar.getProgress())=>android.widget.TextView.setText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6433/buggy-version/app.src.main.java.ru.taxiplanner.romananchugov.taxiplanner.dialogs.NumberOfSeatsDialogFragment.java", "BodyUseAPI": [], "Fixed commit": "47b28ffe71296140490604d08a33cee6d482b454", "Url": "https://api.github.com/repos/RomanAnchugov/TaxiPlanner", "Date": "2018-01-30T20:13:38Z"},
{"Line": "70=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(ru.taxiplanner.romananchugov.taxiplanner.CreateNewOrderFragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6433/buggy-version/app.src.main.java.ru.taxiplanner.romananchugov.taxiplanner.CreateNewOrderFragment.java", "BodyUseAPI": [], "Fixed commit": "47b28ffe71296140490604d08a33cee6d482b454", "Url": "https://api.github.com/repos/RomanAnchugov/TaxiPlanner", "Date": "2018-01-30T20:13:38Z"},
{"Line": "68=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Object.notify()=>java.lang.Object.notifyAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2838/buggy-version/jvm.src.main.java.pt.isel.pc.examples.synchronizers.FifoSemaphore.java", "BodyUseAPI": [], "Fixed commit": "ed2907bae811b11730644ff6d763f98237465779", "Url": "https://api.github.com/repos/isel-leic-pc/s1819i-li52d", "Date": "2018-09-26T12:51:34Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.LayoutInflater.inflate(R.layout.list_item_pagination,android.view.ViewGroup,boolean)=>android.view.LayoutInflater.inflate(R.layout.list_item_recycler_view,android.view.ViewGroup,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2759/buggy-version/app.src.main.java.com.jankrav.letstryretrofit.GitHubRepoAdapter.java", "BodyUseAPI": [], "Fixed commit": "38b4c11dca26c4efcb399ac6b902a43f212e5ec8", "Url": "https://api.github.com/repos/jankrav/LetsTryRetrofit", "Date": "2018-01-24T02:07:56Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.list_item_pagination_text)=>android.view.View.findViewById(R.id.list_item_repo_name)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2759/buggy-version/app.src.main.java.com.jankrav.letstryretrofit.GitHubRepoAdapter.java", "BodyUseAPI": [], "Fixed commit": "38b4c11dca26c4efcb399ac6b902a43f212e5ec8", "Url": "https://api.github.com/repos/jankrav/LetsTryRetrofit", "Date": "2018-01-24T02:07:56Z"},
{"Line": "261=>259", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.time.OffsetTime.of(java.time.LocalTime,java.time.ZoneOffset)=>java.time.OffsetTime.withOffsetSameInstant(java.time.ZoneOffset)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9137/buggy-version/community.values.src.main.java.org.neo4j.values.storable.TimeValue.java", "BodyUseAPI": [], "Fixed commit": "88220379a42828d29ea441257df252282883f377", "Url": "https://api.github.com/repos/neo4j/neo4j", "Date": "2018-03-22T09:09:52Z"},
{"Line": "382=>381", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.time.ZonedDateTime.of(java.time.LocalDateTime,java.time.ZoneOffset)=>java.time.ZonedDateTime.withZoneSameInstant(java.time.ZoneOffset)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9137/buggy-version/community.values.src.main.java.org.neo4j.values.storable.DateTimeValue.java", "BodyUseAPI": [], "Fixed commit": "88220379a42828d29ea441257df252282883f377", "Url": "https://api.github.com/repos/neo4j/neo4j", "Date": "2018-03-22T09:09:52Z"},
{"Line": "382=>381", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.time.ZonedDateTime.of(java.time.LocalDateTime,java.time.ZoneOffset)=>java.time.ZonedDateTime.withZoneSameInstant(java.time.ZoneOffset)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9137/buggy-version/community.values.src.main.java.org.neo4j.values.storable.DateTimeValue.java", "BodyUseAPI": [], "Fixed commit": "88220379a42828d29ea441257df252282883f377", "Url": "https://api.github.com/repos/neo4j/neo4j", "Date": "2018-03-22T09:09:52Z"},
{"Line": "40=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.elasticsearch.action.update.UpdateRequest.upsert(java.util.Map<java.lang.String, java.lang.Object>)=>org.elasticsearch.action.update.UpdateRequest.doc(java.util.Map<java.lang.String, java.lang.Object>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6427/buggy-version/src.main.java.home.javaphite.beholder.storage.accessors.ElasticSearchAccessor.java", "BodyUseAPI": [], "Fixed commit": "efc661a981f6ceed66a951534cc81606a82c55f4", "Url": "https://api.github.com/repos/Javaphite/beholder-ms", "Date": "2018-07-09T20:31:25Z"},
{"Line": "489=>488", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.sleuthkit.autopsy.directorytree.DirectoryTreeTopComponent.promptForDataSourceGrouping(org.sleuthkit.autopsy.casemodule.Case,int)=>org.sleuthkit.autopsy.directorytree.DirectoryTreeTopComponent.promptForDataSourceGrouping(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4909/buggy-version/Core.src.org.sleuthkit.autopsy.directorytree.DirectoryTreeTopComponent.java", "BodyUseAPI": [], "Fixed commit": "773203f5c032ed29de1ed067b480e15e26ca08d6", "Url": "https://api.github.com/repos/sleuthkit/autopsy", "Date": "2018-09-13T14:19:36Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.school.spiderConstants.LocationEnum.NANJING.getZipCode()=>com.school.spiderEnums.LocationEnum.NANJING.getZipCode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5898/buggy-version/src.main.java.com.school.magic.siteHandler.NJUSiteHandler.java", "BodyUseAPI": [], "Fixed commit": "e6138415c5d9a937a8d386dce7bb43d222f55837", "Url": "https://api.github.com/repos/RogerGu007/spiderBBS", "Date": "2018-04-06T02:34:16Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.school.spiderConstants.LocationEnum.NANJING.getZipCode()=>com.school.spiderEnums.LocationEnum.NANJING.getZipCode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5898/buggy-version/src.main.java.com.school.magic.siteHandler.NJUSiteHandler.java", "BodyUseAPI": [], "Fixed commit": "e6138415c5d9a937a8d386dce7bb43d222f55837", "Url": "https://api.github.com/repos/RogerGu007/spiderBBS", "Date": "2018-04-06T02:34:16Z"},
{"Line": "27=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.school.spiderConstants.LocationEnum.SHANGHAI.getZipCode()=>com.school.spiderEnums.LocationEnum.SHANGHAI.getZipCode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5898/buggy-version/src.main.java.com.school.magic.siteHandler.TJSiteHandler.java", "BodyUseAPI": [], "Fixed commit": "e6138415c5d9a937a8d386dce7bb43d222f55837", "Url": "https://api.github.com/repos/RogerGu007/spiderBBS", "Date": "2018-04-06T02:34:16Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.school.spiderConstants.LocationEnum.SHANGHAI.getZipCode()=>com.school.spiderEnums.LocationEnum.SHANGHAI.getZipCode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5898/buggy-version/src.main.java.com.school.magic.siteHandler.TJSiteHandler.java", "BodyUseAPI": [], "Fixed commit": "e6138415c5d9a937a8d386dce7bb43d222f55837", "Url": "https://api.github.com/repos/RogerGu007/spiderBBS", "Date": "2018-04-06T02:34:16Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "fr.neamar.kiss.KissApplication.getDataHandler(activity).getHistory(fr.neamar.kiss.MainActivity,int,boolean,java.util.ArrayList<fr.neamar.kiss.pojo.Pojo>)=>fr.neamar.kiss.KissApplication.getDataHandler(activity).getHistory(fr.neamar.kiss.MainActivity,fr.neamar.kiss.searcher.DEFAULT_MAX_RESULTS,boolean,java.util.ArrayList<fr.neamar.kiss.pojo.Pojo>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5082/buggy-version/app.src.main.java.fr.neamar.kiss.searcher.HistorySearcher.java", "BodyUseAPI": [], "Fixed commit": "80a13a0ca0132f7ff02e5357961000bc94ae1b0a", "Url": "https://api.github.com/repos/TBog/KISS", "Date": "2018-02-01T07:17:35Z"},
{"Line": "79=>79", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.timecrafters.cyberarm.debug.Agent.setMilliseconds(java.lang.String)=>org.timecrafters.cyberarm.debug.Agent.setMilliseconds(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2593/buggy-version/TeamCode.src.main.java.org.timecrafters.engine.Engine.java", "BodyUseAPI": [], "Fixed commit": "a1bf597211eb7e7f986f905030ad7c01584a4dad", "Url": "https://api.github.com/repos/TimeCrafters/FTC_2017-2018", "Date": "2018-01-10T20:22:20Z"},
{"Line": "85=>85", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.timecrafters.cyberarm.debug.Agent.reportMilliseconds()=>org.timecrafters.cyberarm.debug.Agent.reportMilliseconds(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2593/buggy-version/TeamCode.src.main.java.org.timecrafters.engine.Engine.java", "BodyUseAPI": [], "Fixed commit": "a1bf597211eb7e7f986f905030ad7c01584a4dad", "Url": "https://api.github.com/repos/TimeCrafters/FTC_2017-2018", "Date": "2018-01-10T20:22:20Z"},
{"Line": "170=>174", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "auction.org.droidflatauction.EntityProduct.getId()=>dtoProduct.getEntityProduct().getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2887/buggy-version/app.src.main.java.auction.org.droidflatauction.CreateAdvertStep1.java", "BodyUseAPI": [], "Fixed commit": "b6fd9f529fe4df60f76c0b9e2281d749f35e9d5e", "Url": "https://api.github.com/repos/bdlions/DroidFlatAuction", "Date": "2018-03-22T15:39:25Z"},
{"Line": "86=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.gson.Gson.toJson(auction.org.droidflatauction.EntityProduct)=>com.google.gson.Gson.toJson(auction.org.droidflatauction.DTOProduct)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2887/buggy-version/app.src.main.java.auction.org.droidflatauction.ManageAdvertDashboard.java", "BodyUseAPI": [], "Fixed commit": "b6fd9f529fe4df60f76c0b9e2281d749f35e9d5e", "Url": "https://api.github.com/repos/bdlions/DroidFlatAuction", "Date": "2018-03-22T15:39:25Z"},
{"Line": "65=>66", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.inject.Guice.createInjector(org.schemarepo.config.ConfigModule,org.schemarepo.config.ServerModule)=>com.google.inject.Guice.createInjector(org.schemarepo.config.ConfigModule,org.schemarepo.config.ServerModule,org.schemarepo.config.SwaggerModule)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1109/buggy-version/server.src.main.java.org.schemarepo.server.RepositoryServer.java", "BodyUseAPI": [], "Fixed commit": "9b1df908aa0bb346e429bc4127870e2bf4763ba4", "Url": "https://api.github.com/repos/chekore/schema-repo", "Date": "2018-09-21T07:52:15Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "quinn.brandon.renderer.Camera.ray(int,int)=>quinn.brandon.renderer.Camera.ray(double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9420/buggy-version/quinn.brandon.renderer.RayTracer.java", "BodyUseAPI": [], "Fixed commit": "c95027847400ad58df4304372a2400db5dbc81a9", "Url": "https://api.github.com/repos/BrandonQuinn/Java-Ray-Tacer", "Date": "2018-01-21T10:05:26Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ice1000.jimgui.JImDrawList.getBytes(java.lang.String)=>java.lang.String.getBytes(java.nio.charset.Charset)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6739/buggy-version/core.src.org.ice1000.jimgui.JImDrawList.java", "BodyUseAPI": [], "Fixed commit": "a0425ef8828ff590d77a08bd4c705d0373539d94", "Url": "https://api.github.com/repos/ice1000/jimgui", "Date": "2018-05-21T08:35:45Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "coinpurse.MoneyFactory.createMoney(int)=>coinpurse.MoneyFactory.createMoney(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9029/buggy-version/src.coinpurse.MoneyFactoryDemo.java", "BodyUseAPI": [], "Fixed commit": "678f7497c91148fea69eb908fa5647a4b14da00d", "Url": "https://api.github.com/repos/OOP2018/coinpurse-KongSKE", "Date": "2018-02-23T07:06:54Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "coinpurse.MoneyFactory.createMoney(double)=>coinpurse.MoneyFactory.createMoney(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9029/buggy-version/src.coinpurse.MoneyFactoryDemo.java", "BodyUseAPI": [], "Fixed commit": "678f7497c91148fea69eb908fa5647a4b14da00d", "Url": "https://api.github.com/repos/OOP2018/coinpurse-KongSKE", "Date": "2018-02-23T07:06:54Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "coinpurse.MoneyFactory.createMoney(int)=>coinpurse.MoneyFactory.createMoney(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9029/buggy-version/src.coinpurse.MoneyFactoryDemo.java", "BodyUseAPI": [], "Fixed commit": "678f7497c91148fea69eb908fa5647a4b14da00d", "Url": "https://api.github.com/repos/OOP2018/coinpurse-KongSKE", "Date": "2018-02-23T07:06:54Z"},
{"Line": "219=>219", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.util.Log.d(java.lang.String,java.lang.String)=>android.util.Log.e(java.lang.String,java.lang.String,java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4912/buggy-version/src.org.omnirom.omniducky.DuckyKeyboard.java", "BodyUseAPI": [], "Fixed commit": "b559f043be80524035ac086eaef406f6d331d6a4", "Url": "https://api.github.com/repos/arrase/android_packages_apps_OmniDucky", "Date": "2018-05-13T18:05:55Z"},
{"Line": "776=>778", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "image.Image.crop(getBounds().duplicate().translateToOrigin().translate(offsetInTrackImage))=>image.Image.crop(image.BoundingBox)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/236/buggy-version/src.main.java.dataStructure.objects.StructureObject.java", "BodyUseAPI": [], "Fixed commit": "b017789101a9a60ea0c45e68583ee1f98b0e024c", "Url": "https://api.github.com/repos/jeanollion/boa", "Date": "2018-01-11T10:28:52Z"},
{"Line": "224=>224", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.ofbiz.webapp.FullWebappInfo.fromRequest(javax.servlet.http.HttpServletRequest)=>org.ofbiz.webapp.FullWebappInfo.fromRequestFilterSafe(javax.servlet.http.HttpServletRequest)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7405/buggy-version/framework.webapp.src.com.ilscipio.scipio.ce.webapp.filter.UrlFilterHelper.java", "BodyUseAPI": [], "Fixed commit": "071d65bf1643401373030ebcb9001801f62ae01b", "Url": "https://api.github.com/repos/ilscipio/scipio-erp", "Date": "2018-08-09T19:16:13Z"},
{"Line": "57=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "request.getSession().getAttribute(java.lang.String)=>javax.servlet.http.HttpServletRequest.getHeader(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/521/buggy-version/components.application-authenticators.org.wso2.carbon.identity.application.authenticator.requestpath.basicauth.src.main.java.org.wso2.carbon.identity.application.authenticator.requestpath.basicauth.BasicAuthRequestPathAuthenticator.java", "BodyUseAPI": [], "Fixed commit": "f7a2cd703614058b4a00925f0e6e10647225c4ca", "Url": "https://api.github.com/repos/GDRDABARERA/carbon-identity", "Date": "2018-02-12T06:39:02Z"},
{"Line": "77=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "request.getSession().getAttribute(java.lang.String)=>javax.servlet.http.HttpServletRequest.getHeader(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/521/buggy-version/components.application-authenticators.org.wso2.carbon.identity.application.authenticator.requestpath.basicauth.src.main.java.org.wso2.carbon.identity.application.authenticator.requestpath.basicauth.BasicAuthRequestPathAuthenticator.java", "BodyUseAPI": [], "Fixed commit": "f7a2cd703614058b4a00925f0e6e10647225c4ca", "Url": "https://api.github.com/repos/GDRDABARERA/carbon-identity", "Date": "2018-02-12T06:39:02Z"},
{"Line": "195=>203", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "hudson.util.Secret.decrypt(str).getPlainText()=>hudson.util.Secret.getPlainText()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9898/buggy-version/src.main.java.com.oracle.cloud.baremetal.jenkins.BaremetalCloudAgentTemplate.java", "BodyUseAPI": [], "Fixed commit": "1f736c7b98ca58f473fcfecc312275430510a189", "Url": "https://api.github.com/repos/oracle/oci-compute-jenkins-plugin", "Date": "2018-04-08T07:59:49Z"},
{"Line": "64=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "reactor.core.publisher.Mono.empty()=>reactor.core.publisher.Mono.error(ex)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7815/buggy-version/exception-handler.src.main.java.com.example.demo.Application.java", "BodyUseAPI": [], "Fixed commit": "ad1ea2a458822a4b94871f07bbb150452495d34d", "Url": "https://api.github.com/repos/hantsy/spring-reactive-sample", "Date": "2018-01-06T11:15:41Z"},
{"Line": "62=>61", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, org.apache.beam.runners.core.construction.Environments.EnvironmentIdExtractor>.getOrDefault(ptransform.getSpec().getUrn(),org.apache.beam.runners.core.construction.Environments.EnvironmentIdExtractor)=>com.google.common.collect.ImmutableMap<java.lang.String, org.apache.beam.runners.core.construction.Environments.EnvironmentIdExtractor>.getOrDefault(ptransform.getSpec().getUrn(),org.apache.beam.runners.core.construction.Environments.EnvironmentIdExtractor)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3881/buggy-version/runners.core-construction-java.src.main.java.org.apache.beam.runners.core.construction.Environments.java", "BodyUseAPI": [], "Fixed commit": "492138bfe176d63ce7700cb90a2daf24deab03c3", "Url": "https://api.github.com/repos/gkumar7/beam", "Date": "2018-06-07T21:12:15Z"},
{"Line": "82=>81", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, org.apache.beam.runners.core.construction.Environments.EnvironmentIdExtractor>.getOrDefault(ptransform.getSpec().getUrn(),org.apache.beam.runners.core.construction.Environments.EnvironmentIdExtractor)=>com.google.common.collect.ImmutableMap<java.lang.String, org.apache.beam.runners.core.construction.Environments.EnvironmentIdExtractor>.getOrDefault(ptransform.getSpec().getUrn(),org.apache.beam.runners.core.construction.Environments.EnvironmentIdExtractor)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3881/buggy-version/runners.core-construction-java.src.main.java.org.apache.beam.runners.core.construction.Environments.java", "BodyUseAPI": [], "Fixed commit": "492138bfe176d63ce7700cb90a2daf24deab03c3", "Url": "https://api.github.com/repos/gkumar7/beam", "Date": "2018-06-07T21:12:15Z"},
{"Line": "403=>410", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "patient.getPlan().getSurveys()=>com.hospital.dao.SurveyDao.findAllSurveys()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5150/buggy-version/hospital-service.src.main.java.com.hospital.service.impl.PatientServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "315f43d2616897a34767d78ed024d91d2ba3f484", "Url": "https://api.github.com/repos/lht142934/HospitalSystem", "Date": "2018-03-25T13:53:26Z"},
{"Line": "473=>477", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "whileNode.cond.exprType.getType()=>whileNode.cond.exprType.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9532/buggy-version/src.SemanticCheck.LastPhase.java", "BodyUseAPI": [], "Fixed commit": "9482ddd218f41d8548c41559d941dddada97af58", "Url": "https://api.github.com/repos/New-bottle/Compiler", "Date": "2018-05-03T08:34:22Z"},
{"Line": "79=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Exception.getMessage()=>java.util.Arrays.asList(java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2133/buggy-version/marathon-javafx.marathon-javafx-agent.src.main.java.net.sourceforge.marathon.javafxagent.script.JSONScriptRunner.java", "BodyUseAPI": [], "Fixed commit": "f33d6d9c052bacc0c6d6119605ebf9b4cac5b51f", "Url": "https://api.github.com/repos/onlyem91/marathonv5", "Date": "2018-06-28T07:04:25Z"},
{"Line": "66=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.springframework.ui.Model.addAttribute(java.lang.String,java.util.List<org.iii.ee100.animour.salon.entity.Designer>)=>org.springframework.ui.Model.addAttribute(java.lang.String,org.iii.ee100.animour.salon.entity.Designer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/575/buggy-version/src.main.java.org.iii.ee100.animour.salon.web.ReservationController.java", "BodyUseAPI": [], "Fixed commit": "a68b5024c9a2d9efab20667ef0a4238ebb5e3c92", "Url": "https://api.github.com/repos/jakarta99/iii-ee100", "Date": "2018-04-17T08:26:21Z"},
{"Line": "65=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.iii.ee100.animour.salon.service.ReservationService.getAllFreeTime()=>org.iii.ee100.animour.salon.service.ReservationService.getOne(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/575/buggy-version/src.main.java.org.iii.ee100.animour.salon.web.ReservationController.java", "BodyUseAPI": [], "Fixed commit": "a68b5024c9a2d9efab20667ef0a4238ebb5e3c92", "Url": "https://api.github.com/repos/jakarta99/iii-ee100", "Date": "2018-04-17T08:26:21Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "DataStructures.ArrayList<java.lang.Integer>.get(int)=>DataStructures.List<java.lang.Integer>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3755/buggy-version/Algorithms.src.DataStructures.ArrayList.java", "BodyUseAPI": [], "Fixed commit": "e5a49c85112760f962f15049d96588bcd00d7b91", "Url": "https://api.github.com/repos/hashanp/algorithms-java", "Date": "2018-04-18T19:30:18Z"},
{"Line": "45=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "DataStructures.ArrayList<java.lang.Integer>.add(int)=>DataStructures.List<java.lang.Integer>.add(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3755/buggy-version/Algorithms.src.DataStructures.ArrayList.java", "BodyUseAPI": [], "Fixed commit": "e5a49c85112760f962f15049d96588bcd00d7b91", "Url": "https://api.github.com/repos/hashanp/algorithms-java", "Date": "2018-04-18T19:30:18Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "DataStructures.ArrayList<java.lang.Integer>.add(int)=>DataStructures.List<java.lang.Integer>.add(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3755/buggy-version/Algorithms.src.DataStructures.ArrayList.java", "BodyUseAPI": [], "Fixed commit": "e5a49c85112760f962f15049d96588bcd00d7b91", "Url": "https://api.github.com/repos/hashanp/algorithms-java", "Date": "2018-04-18T19:30:18Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.Integer)=>java.io.PrintStream.println(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3755/buggy-version/Algorithms.src.DataStructures.ArrayList.java", "BodyUseAPI": [], "Fixed commit": "e5a49c85112760f962f15049d96588bcd00d7b91", "Url": "https://api.github.com/repos/hashanp/algorithms-java", "Date": "2018-04-18T19:30:18Z"},
{"Line": "178=>178", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.luck.picture.lib.PictureSelector.create(this).openGallery(chooseMode).theme(themeId).maxSelectNum(maxSelectNum).minSelectNum(1).imageSpanCount(4).selectionMode(PictureConfig.MULTIPLE).previewImage(true).previewVideo(true).enablePreviewAudio(true).isCamera(true).isZoomAnim(true).setOutputCameraPath(com.kymjs.common.FileUtils.getSaveFolder(StringConstants.PHOTOPATH).getAbsolutePath()).glideOverride(160, 160).withAspectRatio(aspect_ratio_x, aspect_ratio_y).isGif(true).freeStyleCropEnabled(true).circleDimmedLayer(false).showCropFrame(true).showCropGrid(true).openClickSound(false).selectionMedia(selectList).minimumCompressSize(100).forResult(PictureConfig.CHOOSE_REQUEST)=>com.luck.picture.lib.PictureSelector.create(this).openGallery(chooseMode).theme(themeId).maxSelectNum(maxSelectNum).minSelectNum(1).imageSpanCount(4).selectionMode(PictureConfig.MULTIPLE).previewImage(true).previewVideo(true).enablePreviewAudio(true).isCamera(true).isZoomAnim(true).setOutputCameraPath(com.kymjs.common.FileUtils.getSaveFolder(StringConstants.PHOTOPATH).getAbsolutePath()).glideOverride(160, 160).withAspectRatio(aspect_ratio_x, aspect_ratio_y).isGif(true).freeStyleCropEnabled(true).circleDimmedLayer(false).showCropFrame(true).showCropGrid(true).openClickSound(false).selectionMedia(selectList).minimumCompressSize(100).videoMaxSecond(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2495/buggy-version/SillyChildClient.app.src.main.java.com.sillykid.app.mine.myrelease.mydynamic.ReleaseDynamicActivity.java", "BodyUseAPI": [], "Fixed commit": "3c1f34451446770755d37a998e135fb6a094a866", "Url": "https://api.github.com/repos/921668753/SillyChildClient2-Android", "Date": "2018-08-16T03:02:19Z"},
{"Line": "65=>65", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.sillykid.app.retrofit.RequestClient.getClassificationList(com.common.cklibrary.common.KJActivityStack.create().topActivity(),com.kymjs.rxvolley.client.HttpParams,com.common.cklibrary.utils.httputil.ResponseListener<java.lang.String>)=>com.sillykid.app.retrofit.RequestClient.getPostClassificationList(com.common.cklibrary.common.KJActivityStack.create().topActivity(),com.kymjs.rxvolley.client.HttpParams,com.common.cklibrary.utils.httputil.ResponseListener<java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2495/buggy-version/SillyChildClient.app.src.main.java.com.sillykid.app.mine.myrelease.mydynamic.ReleaseDynamicPresenter.java", "BodyUseAPI": [], "Fixed commit": "3c1f34451446770755d37a998e135fb6a094a866", "Url": "https://api.github.com/repos/921668753/SillyChildClient2-Android", "Date": "2018-08-16T03:02:19Z"},
{"Line": "22=>22", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(java.lang.String)=>java.lang.Float.parseFloat(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9011/buggy-version/app.src.main.java.vlad.mihai.com.speedruns.utils.DisplayHelper.java", "BodyUseAPI": [], "Fixed commit": "dcf204ba1cf342d5ac3cea40ff64459f24efd97f", "Url": "https://api.github.com/repos/VladMihai28/Capstone-Project", "Date": "2018-08-04T07:51:41Z"},
{"Line": "22=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(java.lang.String)=>java.lang.Float.parseFloat(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9011/buggy-version/app.src.main.java.vlad.mihai.com.speedruns.utils.DisplayHelper.java", "BodyUseAPI": [], "Fixed commit": "dcf204ba1cf342d5ac3cea40ff64459f24efd97f", "Url": "https://api.github.com/repos/VladMihai28/Capstone-Project", "Date": "2018-08-04T07:51:41Z"},
{"Line": "103=>106", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Toast.makeText(net.xeill.elpuig.thinkitapp.view.LanguageActivity,java.lang.String,Toast.LENGTH_SHORT)=>android.widget.Toast.makeText(net.xeill.elpuig.thinkitapp.view.LanguageActivity,((getResources().getString(R.string.language_change_toast)) + language),Toast.LENGTH_SHORT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/887/buggy-version/app.src.main.java.net.xeill.elpuig.thinkitapp.view.LanguageActivity.java", "BodyUseAPI": [], "Fixed commit": "cb87df02a297d61d6e90586be1c0cde8610770cb", "Url": "https://api.github.com/repos/TheJordisc/ThinkItApp", "Date": "2018-02-24T15:16:14Z"},
{"Line": "41=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Test.Test_Recursion_StopList(java.lang.String,java.lang.String,int[])=>Test.Test_Recusion_WordRead_OutputFile(java.lang.String,java.lang.String,int[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6297/buggy-version/src.Main.java", "BodyUseAPI": [], "Fixed commit": "1f30e9f1cf3eb935ab41fc1a986f66ec043ca08d", "Url": "https://api.github.com/repos/HuangDongPeng/WordCount", "Date": "2018-03-17T06:12:53Z"},
{"Line": "25=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Main.TestCase()=>Main.Execute(java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6297/buggy-version/src.Main.java", "BodyUseAPI": [], "Fixed commit": "1f30e9f1cf3eb935ab41fc1a986f66ec043ca08d", "Url": "https://api.github.com/repos/HuangDongPeng/WordCount", "Date": "2018-03-17T06:12:53Z"},
{"Line": "41=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Test.Test_Recursion_StopList(java.lang.String,java.lang.String,int[])=>Test.Test_Recusion_WordRead_OutputFile(java.lang.String,java.lang.String,int[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6297/buggy-version/src.Main.java", "BodyUseAPI": [], "Fixed commit": "1f30e9f1cf3eb935ab41fc1a986f66ec043ca08d", "Url": "https://api.github.com/repos/HuangDongPeng/WordCount", "Date": "2018-03-17T06:12:53Z"},
{"Line": "27=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.regex.Pattern.compile(java.lang.String)=>java.util.regex.Pattern.compile(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4657/buggy-version/app.src.main.java.com.acme.a3csci3130.Validator.java", "BodyUseAPI": [], "Fixed commit": "8a188a26963901cd99cf80ad1f4e0224b341e709", "Url": "https://api.github.com/repos/alexlinsy/A3csci3130", "Date": "2018-06-29T04:37:01Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.regex.Pattern.compile(java.lang.String)=>java.util.regex.Pattern.compile(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4657/buggy-version/app.src.main.java.com.acme.a3csci3130.Validator.java", "BodyUseAPI": [], "Fixed commit": "8a188a26963901cd99cf80ad1f4e0224b341e709", "Url": "https://api.github.com/repos/alexlinsy/A3csci3130", "Date": "2018-06-29T04:37:01Z"},
{"Line": "415=>415", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.firecraftmc.shared.classes.model.Database.querySQL(java.lang.String)=>java.lang.String.replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3236/buggy-version/src.java.net.firecraftmc.shared.classes.model.Database.java", "BodyUseAPI": [], "Fixed commit": "707b3200cecf6328cbe8f28c83cf98e2a7a9e55c", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-06-12T19:37:04Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.firecraftmc.shared.classes.model.Database.querySQL(java.lang.String)=>java.lang.String.replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3236/buggy-version/src.java.net.firecraftmc.shared.classes.model.Database.java", "BodyUseAPI": [], "Fixed commit": "707b3200cecf6328cbe8f28c83cf98e2a7a9e55c", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-06-12T19:37:04Z"},
{"Line": "325=>325", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.firecraftmc.shared.classes.model.Database.querySQL(java.lang.String)=>java.lang.String.replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3236/buggy-version/src.java.net.firecraftmc.shared.classes.model.Database.java", "BodyUseAPI": [], "Fixed commit": "707b3200cecf6328cbe8f28c83cf98e2a7a9e55c", "Url": "https://api.github.com/repos/Firestar311/FirecraftAPI", "Date": "2018-06-12T19:37:04Z"},
{"Line": "142=>142", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.model.Person.setAddress_id(int)=>com.model.Person.setPerson_id(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3100/buggy-version/week5.diary.src.com.controllers.PersonController.java", "BodyUseAPI": [], "Fixed commit": "368f277b085ddd1f09c1c085f1a1f6535f83231e", "Url": "https://api.github.com/repos/CJGC/GIIA-CursoJava", "Date": "2018-08-04T15:11:11Z"},
{"Line": "65=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "fr.insee.rmes.persistance.service.sesame.utils.RepositoryGestion.getResponseAsObject(fr.insee.rmes.persistance.service.sesame.concepts.concepts.ConceptsQueries.conceptQuery(id)).toString()=>org.json.JSONObject.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4926/buggy-version/src.main.java.fr.insee.rmes.persistance.service.sesame.concepts.ConceptsImpl.java", "BodyUseAPI": [], "Fixed commit": "d68387db98fdd73e5832cf932426883437f92987", "Url": "https://api.github.com/repos/InseeFr/Bauhaus-Back-Office", "Date": "2018-06-13T07:10:23Z"},
{"Line": "49=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "uk.gov.service.notify.NotificationClientException.printStackTrace()=>java.lang.Exception.printStackTrace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3295/buggy-version/homeoffice-cts-repo.src.main.java.uk.gov.homeoffice.cts.email.EmailService.java", "BodyUseAPI": [], "Fixed commit": "05f08e767b01e3de7c3605fbf7441bcbe04d2eec", "Url": "https://api.github.com/repos/UKHomeOffice/hocs-alfresco", "Date": "2018-04-06T22:58:40Z"},
{"Line": "158=>158", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "net.uichat.encryption.Encryption.toHexString(java.lang.String)=>net.uichat.encryption.Encryption.toStringHex(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3234/buggy-version/app.src.main.java.net.uichat.encryption.Encryption.java", "BodyUseAPI": [], "Fixed commit": "98be2a24a057d959b49e623d7ecd43df0afd0319", "Url": "https://api.github.com/repos/CS196Illinois/UIChat", "Date": "2018-10-14T20:11:10Z"},
{"Line": "159=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "net.uichat.encryption.Encryption.toHexString(java.lang.String)=>net.uichat.encryption.Encryption.toStringHex(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3234/buggy-version/app.src.main.java.net.uichat.encryption.Encryption.java", "BodyUseAPI": [], "Fixed commit": "98be2a24a057d959b49e623d7ecd43df0afd0319", "Url": "https://api.github.com/repos/CS196Illinois/UIChat", "Date": "2018-10-14T20:11:10Z"},
{"Line": "263=>263", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.seldon.protos.DeploymentProtos.PredictiveUnit.getName()=>V1.Container.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7910/buggy-version/cluster-manager.src.main.java.io.seldon.clustermanager.k8s.SeldonDeploymentOperatorImpl.java", "BodyUseAPI": [], "Fixed commit": "d4d62c7136f74aea3fcdfea5c89ea5b5c4f686c3", "Url": "https://api.github.com/repos/Maximophone/seldon-core", "Date": "2018-01-30T12:04:05Z"},
{"Line": "263=>263", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.seldon.protos.DeploymentProtos.PredictiveUnit.getName()=>V1.Container.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7910/buggy-version/cluster-manager.src.main.java.io.seldon.clustermanager.k8s.SeldonDeploymentOperatorImpl.java", "BodyUseAPI": [], "Fixed commit": "d4d62c7136f74aea3fcdfea5c89ea5b5c4f686c3", "Url": "https://api.github.com/repos/Maximophone/seldon-core", "Date": "2018-01-30T12:04:05Z"},
{"Line": "183=>195", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.valueOf(double)=>java.lang.String.valueOf(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3860/buggy-version/app.src.main.java.com.example.android.medikart.FragmentOne.java", "BodyUseAPI": [], "Fixed commit": "f68c303221f3f24e46512b0dcbeab12dfbf23287", "Url": "https://api.github.com/repos/harsh-2711/MediKart", "Date": "2018-04-07T22:47:28Z"},
{"Line": "35=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Random.nextInt(int)=>java.lang.Math.random()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7219/buggy-version/Monster.java", "BodyUseAPI": [], "Fixed commit": "dd027910ac295e063d71b1720221261cf13587c1", "Url": "https://api.github.com/repos/nlakritz/adventure-game", "Date": "2018-01-23T06:32:33Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Map<java.lang.String[], org.alexdev.kepler.game.commands.Command>.put(java.lang.String[],org.alexdev.kepler.game.commands.PickallCommand)=>java.util.Map<java.lang.String[], org.alexdev.kepler.game.commands.Command>.put(java.lang.String[],org.alexdev.kepler.game.commands.PickAllCommand)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7354/buggy-version/Kepler-Server.src.main.java.org.alexdev.kepler.game.commands.CommandManager.java", "BodyUseAPI": [], "Fixed commit": "82eac22918d0d2143fd3e541370b967b5873ddde", "Url": "https://api.github.com/repos/emansom/Kepler", "Date": "2018-08-27T23:49:50Z"},
{"Line": "53=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "coinpurse.Valuable.getCurrency()=>coinpurse.Money.getCurrency()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2168/buggy-version/src.coinpurse.Money.java", "BodyUseAPI": [], "Fixed commit": "5253f26868292d250cdb75f42c09979443666dc9", "Url": "https://api.github.com/repos/OOP2018/coinpurse-KongSKE", "Date": "2018-02-15T02:02:56Z"},
{"Line": "53=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "coinpurse.Valuable.getValue()=>coinpurse.Money.getValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2168/buggy-version/src.coinpurse.Money.java", "BodyUseAPI": [], "Fixed commit": "5253f26868292d250cdb75f42c09979443666dc9", "Url": "https://api.github.com/repos/OOP2018/coinpurse-KongSKE", "Date": "2018-02-15T02:02:56Z"},
{"Line": "896=>898", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "owltools.graph.OWLGraphWrapperExtended.getOWLClass(org.semanticweb.owlapi.model.IRI)=>org.semanticweb.owlapi.search.EntitySearcher.getAnnotations(org.semanticweb.owlapi.model.IRI,org.semanticweb.owlapi.model.OWLOntology)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9408/buggy-version/OWLTools-Core.src.main.java.owltools.graph.OWLGraphWrapperExtended.java", "BodyUseAPI": [], "Fixed commit": "7cd81a1a3fcac5be475cee7bf6ae016fdf5a1fe1", "Url": "https://api.github.com/repos/owlcollab/owltools", "Date": "2018-04-24T08:22:09Z"},
{"Line": "19=>19", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.lovely.games.scene.Scene.builder().verb(com.lovely.games.scene.MoveVerb)=>com.lovely.games.scene.Scene.builder().verb(com.lovely.games.scene.FadeScreenVerb)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8287/buggy-version/core.src.com.lovely.games.scene.SceneContainer.java", "BodyUseAPI": [], "Fixed commit": "bb671e7718bd9713c10ed2f765bddc6b9f1dabe2", "Url": "https://api.github.com/repos/seanoneillcode/the-first-gate", "Date": "2018-03-27T22:34:37Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.badlogic.gdx.math.Vector2(0, (3 * 32))=>new com.lovely.games.scene.FadeScreenVerb(true, 2.0F, com.badlogic.gdx.graphics.Color.BLACK)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8287/buggy-version/core.src.com.lovely.games.scene.SceneContainer.java", "BodyUseAPI": [], "Fixed commit": "bb671e7718bd9713c10ed2f765bddc6b9f1dabe2", "Url": "https://api.github.com/repos/seanoneillcode/the-first-gate", "Date": "2018-03-27T22:34:37Z"},
{"Line": "166=>167", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "javax.swing.JButton.setBackground(<nulltype>)=>javax.swing.JButton.setContentAreaFilled(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6813/buggy-version/desktop.src.com.frostwire.gui.components.transfers.TransferDetailGeneral.java", "BodyUseAPI": [], "Fixed commit": "cad03774e471aca13d865c11e0422f00b8425963", "Url": "https://api.github.com/repos/alejandroarturom/frostwire", "Date": "2018-07-05T05:31:36Z"},
{"Line": "169=>168", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "javax.swing.JButton.setBackground(<nulltype>)=>javax.swing.JButton.setContentAreaFilled(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6813/buggy-version/desktop.src.com.frostwire.gui.components.transfers.TransferDetailGeneral.java", "BodyUseAPI": [], "Fixed commit": "cad03774e471aca13d865c11e0422f00b8425963", "Url": "https://api.github.com/repos/alejandroarturom/frostwire", "Date": "2018-07-05T05:31:36Z"},
{"Line": "54=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "pokemon.view.PokemonPanel.setLayout(javax.swing.SpringLayout)=>pokemon.view.PokemonPanel.setLayout(javax.swing.SpringLayout)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3241/buggy-version/src.pokemon.view.PokemonPanel.java", "BodyUseAPI": [], "Fixed commit": "a30fb65b9e198e96410bf203872ad47e305a3c8d", "Url": "https://api.github.com/repos/sseg9117/Pokemon-Project", "Date": "2018-01-08T16:56:47Z"},
{"Line": "65=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.lang.StringUtils.abbreviate(java.lang.String,int)=>org.apache.commons.lang3.StringUtils.abbreviate(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4537/buggy-version/Blog.src.main.java.com.hectorlopezfernandez.action.ListTagPostsAction.java", "BodyUseAPI": [], "Fixed commit": "dea44c50f4173af07af92525dab17f78dfe799fc", "Url": "https://api.github.com/repos/hectorlf/yajbs", "Date": "2018-07-24T23:00:53Z"},
{"Line": "69=>69", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.kamenov.martin.gosportbg.messenger.MessengerFragment.hideKeyboardFrom()=>getActivity().getWindow().setBackgroundDrawableResource(R.drawable.messenger_background)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5297/buggy-version/GoSportBG.app.src.main.java.com.kamenov.martin.gosportbg.messenger.MessengerFragment.java", "BodyUseAPI": [], "Fixed commit": "7904e0c5033c91d3028ed49a973aed334d301f3a", "Url": "https://api.github.com/repos/MartinKamenov/GoSport", "Date": "2018-08-20T15:49:27Z"},
{"Line": "84=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.logic.parser.DeleteCommandParser.parse(java.lang.String)=>seedu.address.logic.parser.DeleteTaskCommandParser.parse(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2731/buggy-version/src.main.java.seedu.address.logic.parser.AddressBookParser.java", "BodyUseAPI": [], "Fixed commit": "14fea0374a70c8aec6ba3e30d7be57f4fcc79061", "Url": "https://api.github.com/repos/JoonKai1995/main", "Date": "2018-04-13T00:39:56Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.eclipse.rdf4j.query.BooleanQuery.evaluate()=>org.eclipse.rdf4j.query.BooleanQuery.evaluate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8905/buggy-version/core.src.main.java.org.dotwebstack.framework.transaction.flow.step.assertion.AssertionTransactionRepositoryExecutor.java", "BodyUseAPI": [], "Fixed commit": "cab7bb1fb577ed9c771b1deaa8370cdffc347003", "Url": "https://api.github.com/repos/dotwebstack/dotwebstack-framework", "Date": "2018-03-16T15:36:15Z"},
{"Line": "61=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.codename1.io.File.getName()=>com.codename1.util.Base64.encode(byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5789/buggy-version/src.net.gesher.cn1.caching.CacheFile.java", "BodyUseAPI": [], "Fixed commit": "768f969a623e26d25c807cf6ff20f3d325762724", "Url": "https://api.github.com/repos/jegesh/cn1-object-cacher", "Date": "2018-07-11T19:41:40Z"},
{"Line": "179=>181", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "game.TaskDialog.dialogRating(game.Actor,game.Actor,boolean)=>game.TaskDialog.dialogRating(game.Actor,game.Actor,boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9226/buggy-version/src.game.TaskDialog.java", "BodyUseAPI": [], "Fixed commit": "e63be4a9828289f10bb3e535d332efe1e1fd9703", "Url": "https://api.github.com/repos/Morgan-Allen/Stratos_Engine", "Date": "2018-05-05T21:11:25Z"},
{"Line": "84=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "game.TaskDialog.dialogRating(game.Actor,game.Active,boolean)=>game.TaskDialog.dialogRating(game.Actor,game.Active,boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9226/buggy-version/src.game.TaskDialog.java", "BodyUseAPI": [], "Fixed commit": "e63be4a9828289f10bb3e535d332efe1e1fd9703", "Url": "https://api.github.com/repos/Morgan-Allen/Stratos_Engine", "Date": "2018-05-05T21:11:25Z"},
{"Line": "144=>146", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "game.TaskDialog.dialogRating(game.Actor,game.Actor,boolean)=>game.TaskDialog.dialogRating(game.Actor,game.Actor,boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9226/buggy-version/src.game.TaskDialog.java", "BodyUseAPI": [], "Fixed commit": "e63be4a9828289f10bb3e535d332efe1e1fd9703", "Url": "https://api.github.com/repos/Morgan-Allen/Stratos_Engine", "Date": "2018-05-05T21:11:25Z"},
{"Line": "231=>231", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Constraint.getPenalty()=>Constraint.getPenalties()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6898/buggy-version/src.Tree.java", "BodyUseAPI": [], "Fixed commit": "9d59566098416daa2b1b1563ca6e3c009f66a26a", "Url": "https://api.github.com/repos/AndrewJamison/449-assignment-1", "Date": "2018-02-08T01:40:16Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Node.getChildrent()=>Node.getChildren()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6898/buggy-version/src.Tree.java", "BodyUseAPI": [], "Fixed commit": "9d59566098416daa2b1b1563ca6e3c009f66a26a", "Url": "https://api.github.com/repos/AndrewJamison/449-assignment-1", "Date": "2018-02-08T01:40:16Z"},
{"Line": "195=>195", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Constraint.getMachinePenalties()=>Constraint.getPenalties()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6898/buggy-version/src.Tree.java", "BodyUseAPI": [], "Fixed commit": "9d59566098416daa2b1b1563ca6e3c009f66a26a", "Url": "https://api.github.com/repos/AndrewJamison/449-assignment-1", "Date": "2018-02-08T01:40:16Z"},
{"Line": "1387=>1387", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.deemsys.project.pdfcrashreport.ReportMotoristPageForm.equals(java.lang.String)=>motoristPageForm.getAge().equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9787/buggy-version/src.main.java.com.deemsys.project.pdfcrashreport.PDFCrashReportReader.java", "BodyUseAPI": [], "Fixed commit": "1e849e41c83f45d9092e3ed9f447bb066ab49cb1", "Url": "https://api.github.com/repos/storagerepo/WPR_V1.0_INJURY", "Date": "2018-10-11T13:48:23Z"},
{"Line": "186=>186", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getActivity().finish()=>com.zywie.android.zywie.BodyWeightAddDialog.4.dismiss()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5550/buggy-version/app.src.main.java.com.zywie.android.zywie.BodyWeightAddDialog.java", "BodyUseAPI": [], "Fixed commit": "a2fe9615dd53da1c051ad5c16e6b969abded3893", "Url": "https://api.github.com/repos/famasboy888/zywie", "Date": "2018-01-10T15:24:06Z"},
{"Line": "1134=>1136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.PrintStream.printf(java.lang.String,int,double,double,double,double,double,double,double,double,double,double)=>java.io.PrintStream.printf(java.lang.String,int,double,double,double,double,double,double,double,double,double,double,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1136/buggy-version/src.main.java.edu.umn.cs.spatialHadoop.indexing.RTreeGuttman.java", "BodyUseAPI": [], "Fixed commit": "27af04c021404a61a63e22a48634a4c269532a8e", "Url": "https://api.github.com/repos/aseldawy/spatialhadoop2", "Date": "2018-07-28T00:39:53Z"},
{"Line": "66=>69", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.hartwig.hmftools.patientreporter.germline.ImmutableGermlineVariant.builder().passFilter(filter.equalsIgnoreCase(\"pass\")).gene(values[8].trim()).hgvsCodingImpact(values[24].trim()).hgvsProteinImpact(values[23].trim()).totalReadCount(java.lang.Integer)=>com.hartwig.hmftools.patientreporter.germline.ImmutableGermlineVariant.builder().passFilter(filter.equalsIgnoreCase(\"pass\")).gene(values[8].trim()).hgvsCodingImpact(values[24].trim()).hgvsProteinImpact(values[23].trim()).totalReadCount(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1991/buggy-version/patient-reporter.src.main.java.com.hartwig.hmftools.patientreporter.germline.BachelorFile.java", "BodyUseAPI": [], "Fixed commit": "5f5a0a744ff3557a9e1e0bb1b48dcf47dac3355d", "Url": "https://api.github.com/repos/hartwigmedical/hmftools", "Date": "2018-10-27T09:13:38Z"},
{"Line": "66=>69", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.hartwig.hmftools.patientreporter.germline.ImmutableGermlineVariant.builder().passFilter(filter.equalsIgnoreCase(\"pass\")).gene(values[8].trim()).hgvsCodingImpact(values[24].trim()).hgvsProteinImpact(values[23].trim()).totalReadCount(java.lang.Integer.valueOf(values[15])).alleleReadCount(java.lang.Integer)=>com.hartwig.hmftools.patientreporter.germline.ImmutableGermlineVariant.builder().passFilter(filter.equalsIgnoreCase(\"pass\")).gene(values[8].trim()).hgvsCodingImpact(values[24].trim()).hgvsProteinImpact(values[23].trim()).totalReadCount((refReadCount + altReadCount)).alleleReadCount(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1991/buggy-version/patient-reporter.src.main.java.com.hartwig.hmftools.patientreporter.germline.BachelorFile.java", "BodyUseAPI": [], "Fixed commit": "5f5a0a744ff3557a9e1e0bb1b48dcf47dac3355d", "Url": "https://api.github.com/repos/hartwigmedical/hmftools", "Date": "2018-10-27T09:13:38Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "karabo.moroe.datastructures.EditableArray.findByValue(int)=>karabo.moroe.datastructures.EditableArray.findByValue(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1289/buggy-version/src.main.java.karabo.moroe.editors.Replacer.java", "BodyUseAPI": [], "Fixed commit": "6ae78b8401f438d9068d12580290616eeb130f7d", "Url": "https://api.github.com/repos/kmoroe22/arrayeditor", "Date": "2018-09-25T02:41:53Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "karabo.moroe.datastructures.EditableArray.setValue(int,element.getPoint())=>karabo.moroe.datastructures.EditableArray.setValue(double,element.getPoint())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1289/buggy-version/src.main.java.karabo.moroe.editors.Replacer.java", "BodyUseAPI": [], "Fixed commit": "6ae78b8401f438d9068d12580290616eeb130f7d", "Url": "https://api.github.com/repos/kmoroe22/arrayeditor", "Date": "2018-09-25T02:41:53Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "karabo.moroe.interactors.console.ReplacerOneDimensionInteractor.nextInt()=>karabo.moroe.interactors.console.ReplacerOneDimensionInteractor.nextDouble()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1289/buggy-version/src.main.java.karabo.moroe.interactors.console.ReplacerOneDimensionInteractor.java", "BodyUseAPI": [], "Fixed commit": "6ae78b8401f438d9068d12580290616eeb130f7d", "Url": "https://api.github.com/repos/kmoroe22/arrayeditor", "Date": "2018-09-25T02:41:53Z"},
{"Line": "21=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "karabo.moroe.interactors.console.ReplacerOneDimensionInteractor.replace(int,int)=>karabo.moroe.interactors.console.ReplacerOneDimensionInteractor.replace(double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1289/buggy-version/src.main.java.karabo.moroe.interactors.console.ReplacerOneDimensionInteractor.java", "BodyUseAPI": [], "Fixed commit": "6ae78b8401f438d9068d12580290616eeb130f7d", "Url": "https://api.github.com/repos/kmoroe22/arrayeditor", "Date": "2018-09-25T02:41:53Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "karabo.moroe.interactors.console.ReplacerOneDimensionInteractor.nextInt()=>karabo.moroe.interactors.console.ReplacerOneDimensionInteractor.nextDouble()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1289/buggy-version/src.main.java.karabo.moroe.interactors.console.ReplacerOneDimensionInteractor.java", "BodyUseAPI": [], "Fixed commit": "6ae78b8401f438d9068d12580290616eeb130f7d", "Url": "https://api.github.com/repos/kmoroe22/arrayeditor", "Date": "2018-09-25T02:41:53Z"},
{"Line": "87=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.dyslePATH.art.journal.findViewById(R.id.book__pub_month_tb)=>com.example.dyslePATH.art.journal.findViewById(R.id.journal_paper_num_tb)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1208/buggy-version/app.src.main.java.com.example.dyslePATH.art.journal.java", "BodyUseAPI": [], "Fixed commit": "6d0b78bb4059e2eb02022b86ede2cd542dac3aa2", "Url": "https://api.github.com/repos/DyslePATHS/ART", "Date": "2018-10-04T06:42:11Z"},
{"Line": "85=>85", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.dyslePATH.art.book.findViewById(R.id.book__pub_month_tb)=>com.example.dyslePATH.art.book.findViewById(R.id.book_pub_month_tb)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1208/buggy-version/app.src.main.java.com.example.dyslePATH.art.book.java", "BodyUseAPI": [], "Fixed commit": "6d0b78bb4059e2eb02022b86ede2cd542dac3aa2", "Url": "https://api.github.com/repos/DyslePATHS/ART", "Date": "2018-10-04T06:42:11Z"},
{"Line": "142=>142", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "edu.washington.cs.dt.util.Utils.flushToStd(options.usage())=>edu.washington.cs.dt.util.Utils.flushToStd(java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2774/buggy-version/src.main.java.edu.washington.cs.dt.main.Main.java", "BodyUseAPI": [], "Fixed commit": "7d5124ed22b78778594f667b26a493db02c05a88", "Url": "https://api.github.com/repos/ReedOei/dtdetector", "Date": "2018-05-28T00:18:02Z"},
{"Line": "173=>173", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "edu.washington.cs.dt.util.Utils.flushToStd(options.usage())=>edu.washington.cs.dt.util.Utils.flushToStd(java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2774/buggy-version/src.main.java.edu.washington.cs.dt.main.Main.java", "BodyUseAPI": [], "Fixed commit": "7d5124ed22b78778594f667b26a493db02c05a88", "Url": "https://api.github.com/repos/ReedOei/dtdetector", "Date": "2018-05-28T00:18:02Z"},
{"Line": "131=>132", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "e.priFabric8AnalysisLSCoreActivator.getDefault()=>com.redhat.fabric8analytics.lsp.eclipse.core.Fabric8AnalysisLSCoreActivator.getDefault()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/450/buggy-version/plugins.com.redhat.fabric8analytics.lsp.eclipse.ui.src.com.redhat.fabric8analytics.lsp.eclipse.ui.Fabric8AnalyticsStreamConnectionProvider.java", "BodyUseAPI": [], "Fixed commit": "8089393eaf2564b89831933a85dfad28a4bc4019", "Url": "https://api.github.com/repos/fabric8-analytics/fabric8-analytics-devstudio-plugin", "Date": "2018-01-25T09:50:54Z"},
{"Line": "289=>290", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.StringBuilder.append(int)=>java.lang.StringBuilder.append(java.util.concurrent.atomic.AtomicInteger)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7153/buggy-version/jcore-xmi-writer.src.main.java.de.julielab.jcore.consumer.xmi.CasToXmiConsumer.java", "BodyUseAPI": [], "Fixed commit": "db6d8bd247eaf1313aa5a8c3dfdb5cb401400a7c", "Url": "https://api.github.com/repos/JULIELab/jcore-base", "Date": "2018-05-07T14:28:18Z"},
{"Line": "66=>66", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Card.changePileToDest(player.getHand())=>Card.changePileToDest(Pile)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8427/buggy-version/Player.java", "BodyUseAPI": [], "Fixed commit": "1ea89d3874605d99f2b9f0872eaa33ed4947cf4c", "Url": "https://api.github.com/repos/CodecoolKRK20173/battle-of-cards-judyta-team", "Date": "2018-04-26T07:55:46Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Player.getHand()=>Player.getHand()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8427/buggy-version/Player.java", "BodyUseAPI": [], "Fixed commit": "1ea89d3874605d99f2b9f0872eaa33ed4947cf4c", "Url": "https://api.github.com/repos/CodecoolKRK20173/battle-of-cards-judyta-team", "Date": "2018-04-26T07:55:46Z"},
{"Line": "510=>512", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "mekhq.campaign.parts.equipment.AmmoBin.setShotsNeeded(int)=>ammoBin.getAcquisitionWork().find(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7570/buggy-version/MekHQ.src.mekhq.gui.adapter.UnitTableMouseAdapter.java", "BodyUseAPI": [], "Fixed commit": "0a6fcdc6ae45c71f8bfc7d259d688a81a3896f65", "Url": "https://api.github.com/repos/pheonixstorm/MekHQ-storm", "Date": "2018-06-13T04:01:29Z"},
{"Line": "184=>184", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.datastax.driver.core.PreparedStatement.bind(int,int,int,int,<nulltype>,int,java.math.BigDecimal,java.util.Date)=>com.datastax.driver.core.PreparedStatement.bind(int,int,int,int,<nulltype>,java.math.BigDecimal,java.math.BigDecimal,java.util.Date)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2764/buggy-version/src.main.java.transaction.NewOrderTransaction.java", "BodyUseAPI": [], "Fixed commit": "866c469c3352b4ef7f66e432377b09065efcb393", "Url": "https://api.github.com/repos/chuaweiwen/supplier_cassandra", "Date": "2018-09-28T13:54:05Z"},
{"Line": "209=>206", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.datastax.driver.core.PreparedStatement.bind(int,int,int,int,int,java.math.BigDecimal,int,java.math.BigDecimal,java.lang.String)=>com.datastax.driver.core.PreparedStatement.bind(int,int,int,int,int,<nulltype>,java.math.BigDecimal,int,java.math.BigDecimal,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2764/buggy-version/src.main.java.transaction.NewOrderTransaction.java", "BodyUseAPI": [], "Fixed commit": "866c469c3352b4ef7f66e432377b09065efcb393", "Url": "https://api.github.com/repos/chuaweiwen/supplier_cassandra", "Date": "2018-09-28T13:54:05Z"},
{"Line": "99=>99", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "transaction.NewOrderTransaction.createNewOrder(int,int,int,int,int,java.util.Date,java.math.BigDecimal)=>transaction.NewOrderTransaction.createNewOrder(int,int,int,int,java.math.BigDecimal,java.util.Date,java.math.BigDecimal)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2764/buggy-version/src.main.java.transaction.NewOrderTransaction.java", "BodyUseAPI": [], "Fixed commit": "866c469c3352b4ef7f66e432377b09065efcb393", "Url": "https://api.github.com/repos/chuaweiwen/supplier_cassandra", "Date": "2018-09-28T13:54:05Z"},
{"Line": "321=>326", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.os.Handler.post(java.lang.Runnable)=>android.os.Handler.post(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9795/buggy-version/app.src.main.java.su.drsouko.SokoActivity.java", "BodyUseAPI": [], "Fixed commit": "45e3fdba5632980eeac8f4b7e5c4408060534056", "Url": "https://api.github.com/repos/tomari/Sokoban", "Date": "2018-03-03T08:28:20Z"},
{"Line": "321=>326", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.Runnable() { @java.lang.Override public void run() { updateStatusDisplay(); } }=>new java.lang.Runnable() { @java.lang.Override public void run() { updateStatusDisplay(); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9795/buggy-version/app.src.main.java.su.drsouko.SokoActivity.java", "BodyUseAPI": [], "Fixed commit": "45e3fdba5632980eeac8f4b7e5c4408060534056", "Url": "https://api.github.com/repos/tomari/Sokoban", "Date": "2018-03-03T08:28:20Z"},
{"Line": "226=>225", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.os.Bundle.putBoolean(java.lang.String,boolean)=>android.content.Intent.putExtra(java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5580/buggy-version/app.src.main.java.com.usfit.stepcounter.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "55ea3ffcfaab04d5210e22f7e8b44038963a758c", "Url": "https://api.github.com/repos/6gav/StepCounterBruh", "Date": "2018-08-14T19:50:02Z"},
{"Line": "227=>226", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.usfit.stepcounter.MainActivity.startActivity(android.content.Intent,android.os.Bundle)=>com.usfit.stepcounter.MainActivity.startActivity(android.content.Intent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5580/buggy-version/app.src.main.java.com.usfit.stepcounter.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "55ea3ffcfaab04d5210e22f7e8b44038963a758c", "Url": "https://api.github.com/repos/6gav/StepCounterBruh", "Date": "2018-08-14T19:50:02Z"},
{"Line": "62=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.mycompany.servlet.RequestDispatcher.include(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)=>javax.servlet.RequestDispatcher.include(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7771/buggy-version/src.main.java.com.mycompany.servlet.LoginServlet.java", "BodyUseAPI": [], "Fixed commit": "ba6b4bd1d9712e4693e8d40433f21a1b3906d46c", "Url": "https://api.github.com/repos/fabioamaral08/labes", "Date": "2018-01-09T00:57:37Z"},
{"Line": "56=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.servlet.http.HttpServletResponse.addCookie(com.mycompany.servlet.Cookie)=>javax.servlet.http.HttpServletResponse.addCookie(javax.servlet.http.Cookie)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7771/buggy-version/src.main.java.com.mycompany.servlet.LoginServlet.java", "BodyUseAPI": [], "Fixed commit": "ba6b4bd1d9712e4693e8d40433f21a1b3906d46c", "Url": "https://api.github.com/repos/fabioamaral08/labes", "Date": "2018-01-09T00:57:37Z"},
{"Line": "265=>269", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.replaceFirst(java.lang.String,java.lang.String)=>java.lang.reflect.Method.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4001/buggy-version/src.org.opensolaris.opengrok.configuration.ConfigurationHelp.java", "BodyUseAPI": [], "Fixed commit": "2b39d9b25cbb8b6a70ccc8f30e444d50f1fa5784", "Url": "https://api.github.com/repos/idodeclare/OpenGrok", "Date": "2018-02-03T02:29:20Z"},
{"Line": "377=>387", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.content.Intent.putExtra(Intent.EXTRA_STREAM,android.net.Uri.fromFile(getFileStreamPath(filename)))=>android.content.Intent.putExtra(Intent.EXTRA_STREAM,android.net.Uri)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9736/buggy-version/app.src.main.java.com.shuneault.netrunnerdeckbuilder.DeckActivity.java", "BodyUseAPI": [], "Fixed commit": "80284c378aefce0d05a27a707640184b03255c52", "Url": "https://api.github.com/repos/ANRDigital/ANR-Deck-Builder", "Date": "2018-10-21T20:40:23Z"},
{"Line": "365=>367", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.shuneault.netrunnerdeckbuilder.DeckActivity.openFileOutput(java.lang.String,Context.MODE_WORLD_READABLE)=>com.shuneault.netrunnerdeckbuilder.DeckActivity.openFileOutput(java.lang.String,Context.MODE_PRIVATE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9736/buggy-version/app.src.main.java.com.shuneault.netrunnerdeckbuilder.DeckActivity.java", "BodyUseAPI": [], "Fixed commit": "80284c378aefce0d05a27a707640184b03255c52", "Url": "https://api.github.com/repos/ANRDigital/ANR-Deck-Builder", "Date": "2018-10-21T20:40:23Z"},
{"Line": "38=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "GrowList<E>.get(int)=>java.util.Map<java.lang.Integer, E>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9176/buggy-version/hw3.src.GrowList.java", "BodyUseAPI": [], "Fixed commit": "fb1d79b073e88ad52a2cb3658e32cd0231e8bef7", "Url": "https://api.github.com/repos/kjacks21/swe619-fall2018", "Date": "2018-09-16T22:15:39Z"},
{"Line": "36=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.scauzx.binderpool.BinderPoolService.BinderPoolImp.1.unlinkToDeath(com.scauzx.binderpool.DeathRecipient,int)=>android.os.IBinder.unlinkToDeath(com.scauzx.binderpool.DeathRecipient,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8184/buggy-version/app.src.main.java.com.scauzx.binderpool.BinderPoolService.java", "BodyUseAPI": [], "Fixed commit": "fcb22018847fa023e5ee2467d42df38a770e7d88", "Url": "https://api.github.com/repos/scauzx/SZFragment", "Date": "2018-03-09T12:09:55Z"},
{"Line": "189=>190", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.lang3.StringUtils.isNumeric(java.lang.String)=>java.lang.String.matches(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7482/buggy-version/app.src.main.java.com.i1d.icalc.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7f107252469ae2f8d4405c01546100bf622860e3", "Url": "https://api.github.com/repos/i1-D/iCalculator", "Date": "2018-02-05T17:28:51Z"},
{"Line": "157=>158", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.lang3.StringUtils.isNumeric(java.lang.String)=>java.lang.String.matches(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7482/buggy-version/app.src.main.java.com.i1d.icalc.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7f107252469ae2f8d4405c01546100bf622860e3", "Url": "https://api.github.com/repos/i1-D/iCalculator", "Date": "2018-02-05T17:28:51Z"},
{"Line": "190=>191", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Float.parseFloat(java.lang.String)=>java.lang.Double.parseDouble(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7482/buggy-version/app.src.main.java.com.i1d.icalc.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7f107252469ae2f8d4405c01546100bf622860e3", "Url": "https://api.github.com/repos/i1-D/iCalculator", "Date": "2018-02-05T17:28:51Z"},
{"Line": "217=>220", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Float.floatValue()=>java.lang.Double.intValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7482/buggy-version/app.src.main.java.com.i1d.icalc.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7f107252469ae2f8d4405c01546100bf622860e3", "Url": "https://api.github.com/repos/i1-D/iCalculator", "Date": "2018-02-05T17:28:51Z"},
{"Line": "217=>220", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.valueOf(float)=>java.lang.String.valueOf(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7482/buggy-version/app.src.main.java.com.i1d.icalc.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7f107252469ae2f8d4405c01546100bf622860e3", "Url": "https://api.github.com/repos/i1-D/iCalculator", "Date": "2018-02-05T17:28:51Z"},
{"Line": "290=>290", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.commons.logging.Log.debug(((((((((((((((\"Updating ClusterNode [\" + (rmNode.getNodeID())) + \"] \") + \"with queue wait time [\") + estimatedQueueWaitTime) + \"] and \") + \"wait queue length [\") + waitQueueLength) + \"] and \") + \"allocated memory [ \") + allocatedMemory) + \" ] and \") + \"container memory [ \") + (containerUtilization.getPhysicalMemory())) + \" ]\"))=>org.apache.commons.logging.Log.info(((((((((((((((\"Updating ClusterNode [\" + (rmNode.getNodeID())) + \"] \") + \"with queue wait time [\") + estimatedQueueWaitTime) + \"] and \") + \"wait queue length [\") + waitQueueLength) + \"] and \") + \"allocated memory [ \") + allocatedMemory) + \" ] and \") + \"container memory [ \") + (containerUtilization.getPhysicalMemory())) + \" ]\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5164/buggy-version/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.scheduler.distributed.NodeQueueLoadMonitor.java", "BodyUseAPI": [], "Fixed commit": "103b80fb223c0708227211785d99507686d7a980", "Url": "https://api.github.com/repos/yncxcw/LS-Hadoop-3.0", "Date": "2018-03-19T22:32:37Z"},
{"Line": "36=>41", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.uima.fit.factory.CollectionReaderFactory.createReaderDescription(java.lang.Class,I2b2CollectionReader.PARAM_SQL,java.lang.String,I2b2CollectionReader.PARAM_DOCTEXT_COL,java.lang.String,I2b2CollectionReader.PARAM_DOCID_COLS,java.lang.String[],I2b2CollectionReader.PARAM_DOCID_DELIMITER,java.lang.String,I2b2CollectionReader.PARAM_VALUE_PASSPHARASE,java.lang.String,I2b2CollectionReader.PARAM_PATIENT_NUM_COL,java.lang.String,I2b2CollectionReader.PARAM_ENCOUNTER_NUM_COL,java.lang.String,I2b2CollectionReader.PARAM_PROVIDER_ID_COL,java.lang.String,I2b2CollectionReader.PARAM_START_DATE_COL,java.lang.String,I2b2CollectionReader.PARAM_CONCEPT_CD_COL,java.lang.String,I2b2CollectionReader.PARAM_INSTANCE_NUM_COL,java.lang.String,I2b2CollectionReader.PARAM_DB_CONN_RESRC,org.apache.uima.resource.ExternalResourceDescription)=>org.apache.uima.fit.factory.CollectionReaderFactory.createReaderDescription(java.lang.Class,I2b2CollectionReader.PARAM_SQL,java.lang.String,I2b2CollectionReader.PARAM_DOCTEXT_COL,java.lang.String,I2b2CollectionReader.PARAM_DOCID_COLS,java.lang.String[],I2b2CollectionReader.PARAM_DOCID_DELIMITER,java.lang.String,I2b2CollectionReader.PARAM_VALUE_PASSPHARASE,java.lang.String,I2b2CollectionReader.PARAM_PATIENT_NUM_COL,java.lang.String,I2b2CollectionReader.PARAM_ENCOUNTER_NUM_COL,java.lang.String,I2b2CollectionReader.PARAM_PROVIDER_ID_COL,java.lang.String,I2b2CollectionReader.PARAM_START_DATE_COL,java.lang.String,I2b2CollectionReader.PARAM_CONCEPT_CD_COL,java.lang.String,I2b2CollectionReader.PARAM_INSTANCE_NUM_COL,java.lang.String,I2b2CollectionReader.PARAM_DB_CONN_RESRC,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3842/buggy-version/i2b2-reader.CreateDbReaderDescriptor.java", "BodyUseAPI": [], "Fixed commit": "3720a73da04db32cc1ee9fb928d8662c6a67916d", "Url": "https://api.github.com/repos/tmills/ctakes-docker", "Date": "2018-04-19T18:44:22Z"},
{"Line": "53=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Hashtable<java.lang.String, java.lang.String>.put(java.lang.String,java.lang.String)=>java.util.Hashtable<java.lang.String, java.lang.Object>.put(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8719/buggy-version/CQ-EV-frontEnds.src.main.java.com.cadit.main.RemoteEJBClient.java", "BodyUseAPI": [], "Fixed commit": "f466b4b37fb53f72f360afe673e0e195eb1bfb9a", "Url": "https://api.github.com/repos/robyp1/CQ-EV-master", "Date": "2018-06-06T12:56:27Z"},
{"Line": "75=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.OfflinePlayer.getUniqueId()=>org.bukkit.entity.Player.getUniqueId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1003/buggy-version/src.com.redstoner.modules.ignore.Ignore.java", "BodyUseAPI": [], "Fixed commit": "ccb9c7b8237176b9c3155b490e3d8441f30f77f2", "Url": "https://api.github.com/repos/RedstonerServer/Modules", "Date": "2018-01-15T19:24:32Z"},
{"Line": "39=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(java.lang.String)=>javax.servlet.http.HttpServletRequest.setAttribute(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9490/buggy-version/src.main.java.codeu.controller.ProfileServlet.java", "BodyUseAPI": [], "Fixed commit": "3f65e866ea4c5c15ca2bef62b93a7d1ad2473efa", "Url": "https://api.github.com/repos/ileanaValdez/codeu-spring-2018", "Date": "2018-05-31T23:54:31Z"},
{"Line": "28=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "me.iblitzkriegi.vixio.util.Util.randomBot()=>me.iblitzkriegi.vixio.Vixio.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9444/buggy-version/src.main.java.me.iblitzkriegi.vixio.expressions.retrieve.ExprUserWithId.java", "BodyUseAPI": [], "Fixed commit": "4c9feccfb9d0fabef9b271319426aeb4701dbe0f", "Url": "https://api.github.com/repos/Pikachu920/Vixio", "Date": "2018-03-07T01:14:48Z"},
{"Line": "87=>87", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "main.java.SortAlgos.findInsPosition(main.java.Item[],int,vec[currentPos].key)=>main.java.SortAlgos._findInsPosition(main.java.Item[],int,vec[currentPos].key)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1696/buggy-version/Sorting_given_Review.src.main.java.SortAlgos.java", "BodyUseAPI": [], "Fixed commit": "5462e7443ea7334fda7e6fc0863c421b19690c39", "Url": "https://api.github.com/repos/swaguire/mgillen_review", "Date": "2018-02-20T02:15:46Z"},
{"Line": "119=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "net.osmand.plus.wikivoyage.data.WikivoyageSearchHistoryItem.getCityId()=>net.osmand.plus.wikivoyage.data.WikivoyageSearchHistoryItem.getArticleTitle()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4442/buggy-version/OsmAnd.src.net.osmand.plus.wikivoyage.search.WikivoyageSearchDialogFragment.java", "BodyUseAPI": [], "Fixed commit": "905afe8a2a6a94495139002bc0ed41e253723e8a", "Url": "https://api.github.com/repos/osmandapp/Osmand", "Date": "2018-05-20T12:08:19Z"},
{"Line": "3666=>3668", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "lu.fisch.structorizer.gui.Alternative.resetDrawingInfoDown()=>lu.fisch.structorizer.gui.Alternative.resetDrawingInfoUp()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7248/buggy-version/src.lu.fisch.structorizer.gui.Diagram.java", "BodyUseAPI": [], "Fixed commit": "cdfd99801821dccf329e32b4fc78e6b607db3b5e", "Url": "https://api.github.com/repos/fesch/Structorizer.Desktop", "Date": "2018-10-02T10:05:36Z"},
{"Line": "171=>168", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.res.TypedArray.getBoolean(R.styleable.RxBanner_rb_title_marquee,config.isIndicatorVisible())=>android.content.res.TypedArray.getBoolean(R.styleable.RxBanner_rb_indicator_visible,config.isIndicatorVisible())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9716/buggy-version/bannerlib.src.main.java.cn.levey.bannerlib.RxBanner.java", "BodyUseAPI": [], "Fixed commit": "3d34fd8cd2336896f5eabb9b155e64b70bc68bf1", "Url": "https://api.github.com/repos/leveychen/RxBanner", "Date": "2018-04-17T10:17:06Z"},
{"Line": "38=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.webkit.WebView.loadUrl(java.lang.String)=>android.webkit.WebView.loadData(getString(R.string.user_agreement),java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2945/buggy-version/app.src.main.java.com.dentacoin.dentacare.fragments.DCAgreementFragment.java", "BodyUseAPI": [], "Fixed commit": "b92868e1d219f5875a2c8b9149825b9dbb9bc02f", "Url": "https://api.github.com/repos/Dentacoin/aftercare-app-android", "Date": "2018-04-25T10:50:23Z"},
{"Line": "36=>36", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.app.FragmentTransaction.add(R.id.main_frameLayout,android.app.Fragment)=>android.app.FragmentTransaction.replace(R.id.main_frameLayout,android.app.Fragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1245/buggy-version/app.src.main.java.mx.iteso.erickgarcia.practica8.SharedPreferenceActivity.java", "BodyUseAPI": [], "Fixed commit": "7d859f33e2aa384341ee9cce37bb37af6567bb6d", "Url": "https://api.github.com/repos/ImErick/Practica8", "Date": "2018-03-11T21:01:11Z"},
{"Line": "57=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.app.FragmentTransaction.add(R.id.main_frameLayout,android.app.Fragment)=>android.app.FragmentTransaction.replace(R.id.main_frameLayout,android.app.Fragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1245/buggy-version/app.src.main.java.mx.iteso.erickgarcia.practica8.SharedPreferenceActivity.java", "BodyUseAPI": [], "Fixed commit": "7d859f33e2aa384341ee9cce37bb37af6567bb6d", "Url": "https://api.github.com/repos/ImErick/Practica8", "Date": "2018-03-11T21:01:11Z"},
{"Line": "234=>234", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.logging.Logger.log(java.util.logging.Level,<nulltype>,java.lang.Exception)=>java.util.logging.Logger.log(java.util.logging.Level,<nulltype>,Layer.PlaceNotInsertedException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8763/buggy-version/src.main.java.mudmap2.frontend.dialog.PlaceDialog.java", "BodyUseAPI": [], "Fixed commit": "ab70923360c365aefbd137187ba2673b865c4393", "Url": "https://api.github.com/repos/Neop/mudmap2", "Date": "2018-04-23T19:15:05Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.util.ArrayList<Guest>>.remove(java.util.ArrayList<java.util.ArrayList<Guest>>)=>java.util.ArrayList<Guest>.remove(Guest)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3557/buggy-version/src.main.java.Room.java", "BodyUseAPI": [], "Fixed commit": "e27746a21792ff45b84aa6272c914b8f00d2906e", "Url": "https://api.github.com/repos/kristo75/week_06_homework_codeclantowers", "Date": "2018-01-15T10:17:53Z"},
{"Line": "124=>124", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Map<java.lang.Object, java.lang.Object>.get(java.lang.Object)=>java.util.Map<java.lang.Object, java.lang.Object>.remove(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5442/buggy-version/jpos.src.main.java.org.jpos.transaction.Context.java", "BodyUseAPI": [], "Fixed commit": "a9aea1403772155ded467b802cb3b4fd9fc30a5d", "Url": "https://api.github.com/repos/jpos/jPOS", "Date": "2018-05-07T23:46:14Z"},
{"Line": "50=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "GUI.fillMainGrid()=>GUI.fillMainGrid(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1287/buggy-version/src.GUI.java", "BodyUseAPI": [], "Fixed commit": "bb370c6382104f854c82c6668ac9c14068365ff5", "Url": "https://api.github.com/repos/fkryan/SerialMusicMatrixExplorer", "Date": "2018-05-16T06:16:39Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "GUI.fillMainGrid()=>GUI.fillMainGrid(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1287/buggy-version/src.GUI.java", "BodyUseAPI": [], "Fixed commit": "bb370c6382104f854c82c6668ac9c14068365ff5", "Url": "https://api.github.com/repos/fkryan/SerialMusicMatrixExplorer", "Date": "2018-05-16T06:16:39Z"},
{"Line": "163=>164", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "io.github.pactstart.system.dao.PlatformNoticeMapper.countUnreadByMemberId(java.lang.Integer)=>io.github.pactstart.system.dao.PlatformNoticeMapper.countAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1499/buggy-version/kangaroo-mod-system.src.main.java.io.github.pactstart.system.service.impl.NoticeServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "e3e075793f9f2c55e0ee8749eb7d0cd8e184ed4a", "Url": "https://api.github.com/repos/PactStart/kangaroo", "Date": "2018-07-13T16:08:47Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.format(Const.StatusMessages.COURSE_DELETED,java.lang.String)=>java.lang.String.format(Const.StatusMessages.COURSE_MOVED_TO_RECYCLE_BIN,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3056/buggy-version/src.main.java.teammates.ui.controller.InstructorCourseDeleteAction.java", "BodyUseAPI": [], "Fixed commit": "4e3f6d401a94d6c39ff3b399fd9fc7b255822727", "Url": "https://api.github.com/repos/dalessr/teammates", "Date": "2018-05-30T04:21:28Z"},
{"Line": "73=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.github.sundeepk.compactcalendarview.CompactCalendarView.setListener(com.github.sundeepk.compactcalendarview.CompactCalendarView.CompactCalendarViewListener)=>com.github.sundeepk.compactcalendarview.CompactCalendarView.setListener(com.github.sundeepk.compactcalendarview.CompactCalendarView.CompactCalendarViewListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6973/buggy-version/app.src.main.java.com.example.nonz.spaze.PageSchedule.java", "BodyUseAPI": [], "Fixed commit": "1e7a5207e1aa20a54abfa80877570dffc6b7f090", "Url": "https://api.github.com/repos/iNonzq/Spaze", "Date": "2018-04-29T11:34:30Z"},
{"Line": "119=>121", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Properties.load(java.io.FileInputStream)=>java.util.Properties.load(java.io.InputStreamReader)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3297/buggy-version/app.src.main.java.com.termux.app.TermuxPreferences.java", "BodyUseAPI": [], "Fixed commit": "da907e0ca61a48915e7a90075dbf4fb41095cc44", "Url": "https://api.github.com/repos/robertvandeneynde/termux-app", "Date": "2018-08-01T03:43:10Z"},
{"Line": "182=>182", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.firstinspires.ftc.teamcode.Utility.EnumController<org.firstinspires.ftc.teamcode.Utility.ReleasePosition>.addInstruction(ReleasePosition.INIT,int)=>org.firstinspires.ftc.teamcode.Utility.EnumController<org.firstinspires.ftc.teamcode.Utility.ReleasePosition>.addInstruction(ReleasePosition.DROP,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5080/buggy-version/ftc_app.TeamCode.src.main.java.org.firstinspires.ftc.teamcode.Telebop.Telebop.java", "BodyUseAPI": [], "Fixed commit": "fea357f3da0b6b8cbdf16bce25406f4e63a30c50", "Url": "https://api.github.com/repos/Dwight-Englewood/0207-Relic-Recovery", "Date": "2018-02-27T02:33:00Z"},
{"Line": "34=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.collections4.ListValuedMap<com.github.molcikas.photon.blueprints.table.TableBlueprintAndKey, PhotonPreparedStatement.ParameterValue>.putAll(com.github.molcikas.photon.blueprints.table.TableBlueprintAndKey,java.util.List<PhotonPreparedStatement.ParameterValue>)=>com.github.molcikas.photon.PhotonTransaction.PhotonTransactionHandle.updateTrackedValues(com.github.molcikas.photon.blueprints.table.TableBlueprintAndKey,java.util.List<PhotonPreparedStatement.ParameterValue>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2521/buggy-version/photon-core.src.main.java.com.github.molcikas.photon.PhotonTransaction.java", "BodyUseAPI": [], "Fixed commit": "1603684c88c98e0275e3ed0dd6bb0714aaa20379", "Url": "https://api.github.com/repos/molcikas/photon", "Date": "2018-02-03T20:53:31Z"},
{"Line": "33=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "mc.examples.automaton.automaton._ast.ASTAutomatonNode.accept(mc.examples.automaton.automaton._symboltable.AutomatonSymbolTableCreator)=>mc.examples.automaton.automaton._ast.ASTAutomaton.accept(mc.examples.automaton.automaton._symboltable.AutomatonSymbolTableCreator)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6338/buggy-version/monticore-generator.it.src.main.java.mc.examples.automaton.automaton._symboltable.AutomatonSymbolTableCreator.java", "BodyUseAPI": [], "Fixed commit": "c73add4c5c1efab120485f425d80ce7536094f2e", "Url": "https://api.github.com/repos/MontiCore/monticore", "Date": "2018-07-11T12:42:47Z"},
{"Line": "157=>165", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.NullPointerException(\"Jenkins instance can not be null\")=>new java.lang.RuntimeException(\"Could not get descriptor for RemoteBuildConfiguration\")", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/252/buggy-version/src.main.java.org.jenkinsci.plugins.ParameterizedRemoteTrigger.pipeline.RemoteBuildPipelineStep.java", "BodyUseAPI": [], "Fixed commit": "efcef1079bb1f7058a4b0b5a40d2795088003de2", "Url": "https://api.github.com/repos/sap-production/parameterized-remote-trigger-plugin", "Date": "2018-03-16T11:36:40Z"},
{"Line": "609=>610", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.igp.handles.vendorpanel.models.Order.Order.Builder().orderId(resultSet.getInt(\"orders_id\")).customerId(resultSet.getLong(\"customers_id\")).customersSalute(resultSet.getString(\"customers_salute\")).customersName(resultSet.getString(\"customers_name\")).customersStreetAddress(resultSet.getString(\"customers_street_address\")).customersStreetAddress2(resultSet.getString(\"customers_street_address2\")).customersCity(resultSet.getString(\"customers_city\")).customersPostcode(resultSet.getString(\"customers_postcode\")).customersCountry(resultSet.getString(\"customers_country\")).customerstelephone(resultSet.getString(\"customers_telephone\")).customersEmail(resultSet.getString(\"customers_email_address\")).customersMobile(resultSet.getString(\"customers_mobile\")).deliverySalute(resultSet.getString(\"delivery_salute\")).deliveryName(resultSet.getString(\"delivery_name\")).deliveryStreetAddress(resultSet.getString(\"delivery_street_address\")).deliveryCity(resultSet.getString(\"delivery_city\")).deliveryPostcode(resultSet.getString(\"delivery_postcode\")).deliveryState(resultSet.getString(\"delivery_state\")).deliveryCountry(resultSet.getString(\"delivery_country\")).deliveryEmail(resultSet.getString(\"delivery_email_address\")).deliveryMobile(resultSet.getString(\"delivery_mobile\")).datePurchased(java.sql.Date)=>new com.igp.handles.vendorpanel.models.Order.Order.Builder().orderId(resultSet.getInt(\"orders_id\")).customerId(resultSet.getLong(\"customers_id\")).customersSalute(resultSet.getString(\"customers_salute\")).customersName(resultSet.getString(\"customers_name\")).customersStreetAddress(resultSet.getString(\"customers_street_address\")).customersStreetAddress2(resultSet.getString(\"customers_street_address2\")).customersCity(resultSet.getString(\"customers_city\")).customersPostcode(resultSet.getString(\"customers_postcode\")).customersCountry(resultSet.getString(\"customers_country\")).customerstelephone(resultSet.getString(\"customers_telephone\")).customersEmail(resultSet.getString(\"customers_email_address\")).customersMobile(resultSet.getString(\"customers_mobile\")).deliverySalute(resultSet.getString(\"delivery_salute\")).deliveryName(resultSet.getString(\"delivery_name\")).deliveryStreetAddress(resultSet.getString(\"delivery_street_address\")).deliveryCity(resultSet.getString(\"delivery_city\")).deliveryPostcode(resultSet.getString(\"delivery_postcode\")).deliveryState(resultSet.getString(\"delivery_state\")).deliveryCountry(resultSet.getString(\"delivery_country\")).deliveryEmail(resultSet.getString(\"delivery_email_address\")).deliveryMobile(resultSet.getString(\"delivery_mobile\")).datePurchased(java.sql.Timestamp)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5787/buggy-version/api.src.main.java.com.igp.handles.vendorpanel.utils.Order.OrderUtil.java", "BodyUseAPI": [], "Fixed commit": "86a9c8f631a4d9568ee729ba8cc206b68b3eb920", "Url": "https://api.github.com/repos/shashank-igp/newadminpanel", "Date": "2018-03-08T10:11:37Z"},
{"Line": "631=>632", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.sql.ResultSet.getDate(java.lang.String)=>java.sql.ResultSet.getTimestamp(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5787/buggy-version/api.src.main.java.com.igp.handles.vendorpanel.utils.Order.OrderUtil.java", "BodyUseAPI": [], "Fixed commit": "86a9c8f631a4d9568ee729ba8cc206b68b3eb920", "Url": "https://api.github.com/repos/shashank-igp/newadminpanel", "Date": "2018-03-08T10:11:37Z"},
{"Line": "37=>41", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "springfox.documentation.spring.web.plugins.Docket.select()=>springfox.documentation.spring.web.plugins.Docket.host(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4329/buggy-version/src.main.java.se.esss.ics.masar.application.swagger.SwaggerConfig.java", "BodyUseAPI": [], "Fixed commit": "8f80f24ab266b89bc5b9fe55c1b6590bbe9450ef", "Url": "https://api.github.com/repos/ESSICS/jmasar-service", "Date": "2018-10-22T08:17:04Z"},
{"Line": "23=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.oscar.laberinto.instruccionsJoc.setContentView(R.layout.activity_menu_inicial)=>com.example.oscar.laberinto.instruccionsJoc.setContentView(R.layout.activity_instruccions_joc)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5921/buggy-version/app.src.main.java.com.example.oscar.laberinto.instruccionsJoc.java", "BodyUseAPI": [], "Fixed commit": "88916d95688b10444a9abeb9d7996f3c83a33efc", "Url": "https://api.github.com/repos/oscarfava22/Laberinto", "Date": "2018-02-13T10:16:56Z"},
{"Line": "346=>346", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.itextpdf.text.pdf.AcroFields.setField(java.lang.String,request.getParameter(\"stolen\"))=>com.itextpdf.text.pdf.AcroFields.setField(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8818/buggy-version/src.main.java.pdfhandler.mainpdfhandlerandform.java", "BodyUseAPI": [], "Fixed commit": "d928d6cd8f103ecc919329aea8aef41b0c0b011c", "Url": "https://api.github.com/repos/mrahman2549/WarrantGeneratorSB", "Date": "2018-06-04T16:15:22Z"},
{"Line": "288=>288", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.itextpdf.text.pdf.AcroFields.setField(java.lang.String,request.getParameter(\"stolen\"))=>com.itextpdf.text.pdf.AcroFields.setField(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8818/buggy-version/src.main.java.pdfhandler.mainpdfhandlerandform.java", "BodyUseAPI": [], "Fixed commit": "d928d6cd8f103ecc919329aea8aef41b0c0b011c", "Url": "https://api.github.com/repos/mrahman2549/WarrantGeneratorSB", "Date": "2018-06-04T16:15:22Z"},
{"Line": "346=>346", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.servlet.http.HttpServletRequest.getParameter(java.lang.String)=>com.itextpdf.text.pdf.AcroFields.setField(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8818/buggy-version/src.main.java.pdfhandler.mainpdfhandlerandform.java", "BodyUseAPI": [], "Fixed commit": "d928d6cd8f103ecc919329aea8aef41b0c0b011c", "Url": "https://api.github.com/repos/mrahman2549/WarrantGeneratorSB", "Date": "2018-06-04T16:15:22Z"},
{"Line": "54=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.eyeseetea.malariacare.data.remote.sdk.data.FromObservationEventMapper.buildEvent(relatedSurvey.getOrgUnitUId(),relatedSurvey.getProgramUId(),boolean)=>org.eyeseetea.malariacare.data.remote.sdk.data.FromObservationEventMapper.buildEvent(observation.getSurveyUid(),relatedSurvey.getOrgUnitUId(),relatedSurvey.getProgramUId(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8812/buggy-version/app.src.main.java.org.eyeseetea.malariacare.data.remote.sdk.data.FromObservationEventMapper.java", "BodyUseAPI": [], "Fixed commit": "6c6b707493b6bdef03ea901d8146d8ae207b9628", "Url": "https://api.github.com/repos/EyeSeeTea/malariapp", "Date": "2018-09-27T05:32:15Z"},
{"Line": "74=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.eyeseetea.malariacare.data.remote.sdk.data.FromSurveyEventMapper.buildEvent(survey.getOrgUnitUId(),survey.getProgramUId(),boolean)=>org.eyeseetea.malariacare.data.remote.sdk.data.FromSurveyEventMapper.buildEvent(survey.getSurveyUid(),survey.getOrgUnitUId(),survey.getProgramUId(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8812/buggy-version/app.src.main.java.org.eyeseetea.malariacare.data.remote.sdk.data.FromSurveyEventMapper.java", "BodyUseAPI": [], "Fixed commit": "6c6b707493b6bdef03ea901d8146d8ae207b9628", "Url": "https://api.github.com/repos/EyeSeeTea/malariapp", "Date": "2018-09-27T05:32:15Z"},
{"Line": "190=>191", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.dirtyunicorns.tweaks.fragments.Context.getContentResolver()=>android.content.Context.getContentResolver()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9188/buggy-version/src.com.dirtyunicorns.tweaks.fragments.QuickSettings.java", "BodyUseAPI": [], "Fixed commit": "d53d14ea944fb5a0f4d5f009b54adb506a5a7122", "Url": "https://api.github.com/repos/Jayant-Deshmukh/android_packages_apps_DU-Tweaks", "Date": "2018-07-28T15:11:53Z"},
{"Line": "91=>91", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "rts.GameState.fromJSON(java.lang.String,rts.units.UnitTypeTable)=>rts.GameState.fromJSON(java.lang.String,game.utt)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3326/buggy-version/SetCoverProblemRTS.src.sampling.DataRecollection.java", "BodyUseAPI": [], "Fixed commit": "95b57fa5a22094c35c49c531ce7dbb637ce40579", "Url": "https://api.github.com/repos/jr9Hernandez/SetCoverProblemforMRTS", "Date": "2018-05-23T07:55:39Z"},
{"Line": "136=>136", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "rts.GameState.fromJSON(java.lang.String,rts.units.UnitTypeTable)=>rts.GameState.fromJSON(java.lang.String,game.utt)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3326/buggy-version/SetCoverProblemRTS.src.sampling.DataRecollection.java", "BodyUseAPI": [], "Fixed commit": "95b57fa5a22094c35c49c531ce7dbb637ce40579", "Url": "https://api.github.com/repos/jr9Hernandez/SetCoverProblemforMRTS", "Date": "2018-05-23T07:55:39Z"},
{"Line": "138=>132", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.lss233.phoenix.module.ModuleManager.disableModule(java.lang.Module)=>com.lss233.phoenix.module.ModuleManager.initialModule(java.lang.Module)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2943/buggy-version/src.main.java.com.lss233.phoenix.module.ModuleManager.java", "BodyUseAPI": [], "Fixed commit": "584c28b31adf55aedbdd4423c9d5de4a28e1bcaf", "Url": "https://api.github.com/repos/ThePhoenixMC/PhoenixAPI", "Date": "2018-01-24T07:39:23Z"},
{"Line": "289=>290", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.ImageView.getLayoutParams()=>de.hs_hannover.emerker.tumultimate.TumultGui.getSizeOfActivity(android.app.Activity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9581/buggy-version/app.src.main.java.de.hs_hannover.emerker.tumultimate.TumultStorage.java", "BodyUseAPI": [], "Fixed commit": "1279929f3c913193585c20463b5755ed16509118", "Url": "https://api.github.com/repos/YertleTurtleGit/Tumultimate", "Date": "2018-01-06T14:50:44Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML,org.ballerinalang.plugins.idea.BallerinaTypes.LT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(boolean)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(boolean)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.FIELD)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP,org.ballerinalang.plugins.idea.BallerinaTypes.LT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT,org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT,org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL,org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML,org.ballerinalang.plugins.idea.BallerinaTypes.LT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.INDEX)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON,org.ballerinalang.plugins.idea.BallerinaTypes.LT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.INDEX)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.GT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN,org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSFORMER)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(int)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN,org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA,org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(int)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.FIELD)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(boolean)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT,org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE,org.ballerinalang.plugins.idea.BallerinaTypes.FIELD)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.GT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN,org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME,org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON,org.ballerinalang.plugins.idea.BallerinaTypes.LT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.GT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML,org.ballerinalang.plugins.idea.BallerinaTypes.LT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA,org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT,org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE,org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL,org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT,org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER,org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND,org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSFORMER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSFORMER_INVOCATION)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "174=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).afterInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ANY_IDENTIFIER_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.BIND)=>new com.intellij.formatting.SpacingBuilder(settings, org.ballerinalang.plugins.idea.BallerinaLanguage.INSTANCE).around(org.ballerinalang.plugins.idea.BallerinaTypes.OPERATORS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.GT, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.ADD, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SUB, org.ballerinalang.plugins.idea.BallerinaTypes.FLOATING_POINT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BANG, org.ballerinalang.plugins.idea.BallerinaTypes.SIMPLE_EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.ADD).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SUB).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ALL).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.AS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BIND).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.BREAK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.CATCH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COMPOUND_OPERATOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONABORT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONCOMMIT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ONRETRY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOUBLE_COLON).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.FINALLY).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.GROUP).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.CONST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.DELETE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ENDPOINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ELSE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOLLOWED).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FOR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.FROM).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.FORK, org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IF).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INSERT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.INTO).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.HAVING).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.IMPORT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.FOREACH).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.IN).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.JOIN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.MATCH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NATIVE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.NEW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.OBJECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ON).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.ORDER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.PACKAGE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUERY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RETRIES).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION_PROPERTY_INIT_STATEMENT_LIST).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SELECT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SET).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STREAMLET).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.STRUCT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.THROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TIMEOUT).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRY).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_AGGREGATION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_STREAM).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.UNTAINT).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.UPDATE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.VAR).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WHERE).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WHILE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WINDOW).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.WORKER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.WITH).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.XMLNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.TYPEOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LENGTHOF).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.LOCK).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.SEMI).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.DOT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.QUESTION_MARK).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PUBLIC).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.COLON, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.COLON).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA, org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.PARAMETER_LIST).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_LIST).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.COMMA).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACK).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RPAREN, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.AT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.BIND, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN_PARAMETERS).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.SENDARROW).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECEIVEARROW).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.TILDE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RETURN, org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RETURNS).spaceIf(true).after(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ANNOTATION_ATTACHMENT, org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.TYPE_NAME).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.TRANSACTION).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.MAP, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaces(0).between(org.ballerinalang.plugins.idea.BallerinaTypes.JSON, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(false).before(org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.RBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML_LOCAL_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.GT).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.INDEX).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.FIELD).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.XML_ATTRIB).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VARIABLE_REFERENCE, org.ballerinalang.plugins.idea.BallerinaTypes.LPAREN).spaceIf(false).after(org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_REFERENCE).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.NAME_REFERENCE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.VALUE_TYPE_NAME, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.ATTACHMENT_POINT, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE).spaceIf(true).around(org.ballerinalang.plugins.idea.BallerinaTypes.RECORD_KEY_VALUE).spaceIf(false).between(org.ballerinalang.plugins.idea.BallerinaTypes.XML, org.ballerinalang.plugins.idea.BallerinaTypes.LT).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.XML_NAMESPACE_NAME).spaceIf(false).around(org.ballerinalang.plugins.idea.BallerinaTypes.EXPRESSION_LIST).spaceIf(false).aroundInside(org.ballerinalang.plugins.idea.BallerinaTypes.INTEGER_LITERAL, org.ballerinalang.plugins.idea.BallerinaTypes.JOIN_CONDITIONS).spaceIf(true).between(org.ballerinalang.plugins.idea.BallerinaTypes.LT, org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.FUNCTION_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.SERVICE_DEFINITION).spaceIf(true).withinPairInside(org.ballerinalang.plugins.idea.BallerinaTypes.IDENTIFIER, org.ballerinalang.plugins.idea.BallerinaTypes.LBRACE, org.ballerinalang.plugins.idea.BallerinaTypes.RESOURCE_DEFINITION).spaceIf(true).before(org.ballerinalang.plugins.idea.BallerinaTypes.INVOCATION)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3090/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.formatter.BallerinaFormattingModelBuilder.java", "BodyUseAPI": [], "Fixed commit": "9910a5aa42fdd85cff064434d3f6d4f5fe751a76", "Url": "https://api.github.com/repos/Shan1024/ballerina", "Date": "2018-03-20T11:29:22Z"},
{"Line": "69=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "actorMessage.getRequest().get(JsonKey.OBJECT_TYPE)=>actorMessage.getRequest().get(BadgingJsonKey.RECIPIENT_TYPE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5517/buggy-version/actors.badge.src.main.java.org.sunbird.badge.actors.BadgeAssertionActor.java", "BodyUseAPI": [], "Fixed commit": "a8f5f13b51158575d39c199da930c6660337a0bb", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-03-20T14:15:14Z"},
{"Line": "35=>36", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.brein.geojson.geometry.IGeometryObjectFactory.fromGeoJsonMap(new com.google.gson.Gson().fromJson(jsonString, java.util.Map.class))=>new com.google.gson.Gson().fromJson(jsonString, java.util.Map.class).get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6681/buggy-version/src.com.brein.geojson.io.GeoJsonLoader.java", "BodyUseAPI": [], "Fixed commit": "5aba4c89b65a9809563d63a4b6b833216d92e344", "Url": "https://api.github.com/repos/Breinify/brein-geojson", "Date": "2018-07-19T00:58:12Z"},
{"Line": "68=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.minecraft.util.math.AxisAlignedBB.grow(double,int,double)=>net.minecraft.util.math.AxisAlignedBB.grow(int,double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8043/buggy-version/src.main.java.cadiboo.wiptech.block.BlockWire.java", "BodyUseAPI": [], "Fixed commit": "2ff8fbaa514c8cb9664465e3bb1c3c8a43a164e4", "Url": "https://api.github.com/repos/Cadiboo/WIPTech", "Date": "2018-04-30T09:18:17Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.minecraft.util.math.AxisAlignedBB.grow(double,int,double)=>net.minecraft.util.math.AxisAlignedBB.grow(int,double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8043/buggy-version/src.main.java.cadiboo.wiptech.block.BlockWire.java", "BodyUseAPI": [], "Fixed commit": "2ff8fbaa514c8cb9664465e3bb1c3c8a43a164e4", "Url": "https://api.github.com/repos/Cadiboo/WIPTech", "Date": "2018-04-30T09:18:17Z"},
{"Line": "62=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.minecraft.util.math.AxisAlignedBB.grow(double,int,double)=>net.minecraft.util.math.AxisAlignedBB.grow(double,double,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8043/buggy-version/src.main.java.cadiboo.wiptech.block.BlockWire.java", "BodyUseAPI": [], "Fixed commit": "2ff8fbaa514c8cb9664465e3bb1c3c8a43a164e4", "Url": "https://api.github.com/repos/Cadiboo/WIPTech", "Date": "2018-04-30T09:18:17Z"},
{"Line": "64=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.minecraft.util.math.AxisAlignedBB.grow(double,int,double)=>net.minecraft.util.math.AxisAlignedBB.grow(double,double,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8043/buggy-version/src.main.java.cadiboo.wiptech.block.BlockWire.java", "BodyUseAPI": [], "Fixed commit": "2ff8fbaa514c8cb9664465e3bb1c3c8a43a164e4", "Url": "https://api.github.com/repos/Cadiboo/WIPTech", "Date": "2018-04-30T09:18:17Z"},
{"Line": "273=>273", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.minecraft.block.state.IBlockState.getValue(net.minecraft.block.properties.PropertyEnum<growthcraft.cellar.common.block.BlockFruitPresser.Orient>)=>net.minecraft.block.state.IBlockState.getValue(net.minecraft.block.properties.PropertyEnum<growthcraft.cellar.common.block.BlockFruitPresser.PressState>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1312/buggy-version/src.main.java.growthcraft.cellar.common.block.BlockFruitPresser.java", "BodyUseAPI": [], "Fixed commit": "f4caeb2cefa6885e00831ac9601ec632b5850993", "Url": "https://api.github.com/repos/GrowthcraftCE/Growthcraft-1.11", "Date": "2018-01-17T19:19:01Z"},
{"Line": "263=>263", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "entityManager.createQuery(query).setParameter(java.lang.String,org.iabako.server.dao.user.UserDAO)=>entityManager.createQuery(query).setParameter(java.lang.String,java.util.List<org.iabako.shared.entity.user.User>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3260/buggy-version/src.main.java.org.iabako.server.dao.user.UserDAO.java", "BodyUseAPI": [], "Fixed commit": "88683385ac8143fe5482015b7555dfbaf9c9c8b0", "Url": "https://api.github.com/repos/iabakoproject/iabako", "Date": "2018-08-30T15:43:25Z"},
{"Line": "62=>62", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.lucidj.ext.admind.AdmindUtil.responseFile(java.lang.String)=>org.lucidj.ext.admind.AdmindUtil.statusFile(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6615/buggy-version/admind.src.org.lucidj.admind.TaskThread.java", "BodyUseAPI": [], "Fixed commit": "ba7cd281a1a7ac2f61465590d2dbcd7c1ec6eb6c", "Url": "https://api.github.com/repos/neoautus/lucidj-admind", "Date": "2018-07-09T22:14:55Z"},
{"Line": "71=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.graphics.Bitmap.compress(Bitmap.CompressFormat.PNG,int,java.io.FileOutputStream)=>android.graphics.Bitmap.compress(Bitmap.CompressFormat.JPEG,int,java.io.FileOutputStream)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8748/buggy-version/app.src.main.java.com.codernauti.gamebank.util.SharePrefUtil.java", "BodyUseAPI": [], "Fixed commit": "a3215c02d07feef8a1e33d83bb56453e30342ace", "Url": "https://api.github.com/repos/Codernauti/GameBank", "Date": "2018-03-12T11:31:34Z"},
{"Line": "72=>72", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.awt.TextField.getText()=>java.util.Map<java.lang.String, java.lang.Integer>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4325/buggy-version/PA07.PhoneBook.java", "BodyUseAPI": [], "Fixed commit": "9d42d788c6fd8976a06f8a320e91202f3997b69e", "Url": "https://api.github.com/repos/xumr0x/COSI12B", "Date": "2018-04-23T03:37:06Z"},
{"Line": "193=>193", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "uk.ac.leeds.ccg.andyt.grids.io.Grids_ImageExporter.write(long,long,int[],java.lang.String,java.io.File,uk.ac.leeds.ccg.andyt.grids.core.grid.Grids_AbstractGridNumber,ge.HOOME)=>uk.ac.leeds.ccg.andyt.grids.io.Grids_ImageExporter.write(long,long,int[],java.lang.String,java.io.File,uk.ac.leeds.ccg.andyt.grids.core.grid.Grids_AbstractGridNumber,ge.HOOMET)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5088/buggy-version/src.main.java.uk.ac.leeds.ccg.andyt.grids.io.Grids_ImageExporter.java", "BodyUseAPI": [], "Fixed commit": "4f9e497c495390ebe489e724aaa8a9760ced7093", "Url": "https://api.github.com/repos/agdturner/grids", "Date": "2018-01-11T09:20:00Z"},
{"Line": "109=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.slf4j.Logger.debug(java.lang.String,org.apache.shiro.authz.AuthorizationException)=>org.slf4j.Logger.debug(java.lang.String,org.apache.shiro.authz.AuthorizationException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9913/buggy-version/src.main.java.gov.ca.cwds.rest.services.hoi.HOICaseService.java", "BodyUseAPI": [], "Fixed commit": "7ee90dc5ae15be64595dac21e34e5ddef2aafd2b", "Url": "https://api.github.com/repos/ca-cwds/API", "Date": "2018-02-12T20:33:40Z"},
{"Line": "15=>15", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "map.dcMotor.get(java.lang.String)=>map.dcMotor.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1443/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.RobotFunctions.subsystems.Climber.java", "BodyUseAPI": [], "Fixed commit": "b6cf7041c32c85f98d5b1c7e3e358954032dfe6a", "Url": "https://api.github.com/repos/ethan-robotics/Rover_Ruckus", "Date": "2018-10-19T23:33:22Z"},
{"Line": "70=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new springfox.documentation.builders.ApiInfoBuilder().title(\"Mall API\").description(\"REST Mall API\").version(\"1.0\").contact(java.lang.String)=>new springfox.documentation.builders.ApiInfoBuilder().title(\"Mall API\").description(\"REST Mall API\").version(\"1.0\").contact(springfox.documentation.service.Contact)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9906/buggy-version/RestMall.src.main.java.org.wang.restmall.config.SwaggerConfig.java", "BodyUseAPI": [], "Fixed commit": "8398fc4c9425a95a81c969a228361120f2c0d2e2", "Url": "https://api.github.com/repos/sankouothers/Spring_boot_Project", "Date": "2018-03-12T01:34:22Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Random.nextInt(int)=>java.util.HashMap<java.lang.String, java.lang.Double>.put(java.lang.String,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3564/buggy-version/src.com.exchange.CreditCard.java", "BodyUseAPI": [], "Fixed commit": "92e7527deb338ee250af1a770b54ab0fca7a201d", "Url": "https://api.github.com/repos/sahilpwr/Crypto-Currency-Exchange", "Date": "2018-02-20T19:11:15Z"},
{"Line": "78=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "hivemall.statistics.MovingAverageUDTF.forward(java.lang.Object[])=>hivemall.statistics.MovingAverageUDTF.forward(org.apache.hadoop.io.Writable[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5640/buggy-version/core.src.main.java.hivemall.statistics.MovingAverageUDTF.java", "BodyUseAPI": [], "Fixed commit": "6d2821fb1e510077ab1b7e3abc57fc4da486f54e", "Url": "https://api.github.com/repos/myui/incubator-hivemall", "Date": "2018-04-10T05:11:55Z"},
{"Line": "124=>124", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "br.net.fabiozumbi12.UltimateChat.Sponge.config.UCLang.get(org.spongepowered.api.command.CommandSource,java.lang.String)=>br.net.fabiozumbi12.UltimateChat.Sponge.UChat.get().getPlayerChannel(org.spongepowered.api.command.CommandSource)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9611/buggy-version/UltimateChat-Sponge-56.src.main.java.br.net.fabiozumbi12.UltimateChat.Sponge.config.UCLang.java", "BodyUseAPI": [], "Fixed commit": "8a755e642ccf1738ad38388b2b20b30003d250ac", "Url": "https://api.github.com/repos/FabioZumbi12/UltimateChat", "Date": "2018-01-19T10:43:14Z"},
{"Line": "42=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "mFragmentManager.beginTransaction().replace(R.id.fl_container_list_of_notes, mFragmentManager.findFragmentByTag(com.example.ama.android2_lesson01.ui.MainActivity.DETAILS_NOTE_FRAGMENT), com.example.ama.android2_lesson01.ui.MainActivity.DETAILS_NOTE_FRAGMENT).addToBackStack(<nulltype>)=>mFragmentManager.beginTransaction().replace(R.id.fl_container_list_of_notes, mFragmentManager.findFragmentByTag(com.example.ama.android2_lesson01.ui.MainActivity.DETAILS_NOTE_FRAGMENT), com.example.ama.android2_lesson01.ui.MainActivity.DETAILS_NOTE_FRAGMENT).commit()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6095/buggy-version/android2_lesson01.src.java.java.com.example.ama.android2_lesson01.ui.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "61119d58bd5b60bf57d5e14e745b2631fd37784a", "Url": "https://api.github.com/repos/TatianaArslanova/Android_2", "Date": "2018-05-11T13:59:06Z"},
{"Line": "63=>62", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.support.v4.app.FragmentManager.popBackStack(<nulltype>,FragmentManager.POP_BACK_STACK_INCLUSIVE)=>android.support.v4.app.FragmentManager.popBackStack()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6095/buggy-version/android2_lesson01.src.java.java.com.example.ama.android2_lesson01.ui.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "61119d58bd5b60bf57d5e14e745b2631fd37784a", "Url": "https://api.github.com/repos/TatianaArslanova/Android_2", "Date": "2018-05-11T13:59:06Z"},
{"Line": "83=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.resetInputs()=>me.lemire.lucene.EnwikiContentSource.resetInputs()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2918/buggy-version/src.main.java.me.lemire.lucene.IndexDump.java", "BodyUseAPI": [], "Fixed commit": "f2d21c5a72806b8a0c62062a66e3d03a2ffc1d3a", "Url": "https://api.github.com/repos/lemire/IndexWikipedia", "Date": "2018-05-16T11:09:10Z"},
{"Line": "85=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.lucene.benchmark.byTask.feeds.DocMaker.setConfig(org.apache.lucene.benchmark.byTask.utils.Config,org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource)=>org.apache.lucene.benchmark.byTask.feeds.DocMaker.setConfig(org.apache.lucene.benchmark.byTask.utils.Config,me.lemire.lucene.EnwikiContentSource)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2918/buggy-version/src.main.java.me.lemire.lucene.IndexDump.java", "BodyUseAPI": [], "Fixed commit": "f2d21c5a72806b8a0c62062a66e3d03a2ffc1d3a", "Url": "https://api.github.com/repos/lemire/IndexWikipedia", "Date": "2018-05-16T11:09:10Z"},
{"Line": "82=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.setConfig(org.apache.lucene.benchmark.byTask.utils.Config)=>me.lemire.lucene.EnwikiContentSource.setConfig(org.apache.lucene.benchmark.byTask.utils.Config)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2918/buggy-version/src.main.java.me.lemire.lucene.IndexDump.java", "BodyUseAPI": [], "Fixed commit": "f2d21c5a72806b8a0c62062a66e3d03a2ffc1d3a", "Url": "https://api.github.com/repos/lemire/IndexWikipedia", "Date": "2018-05-16T11:09:10Z"},
{"Line": "49=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ua.epam.spring.hometask.service.impl.BookingService.getPurchasedTicketsForEvent(ua.epam.spring.hometask.domain.Event,java.time.LocalDateTime)=>ua.epam.spring.hometask.service.impl.TicketService.getByEventAndTime(ua.epam.spring.hometask.domain.Event,java.time.LocalDateTime)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8306/buggy-version/src.main.java.ua.epam.spring.hometask.service.impl.BookingFacadeServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "89d0c53850ded29b9472633f7c0500a29b60b169", "Url": "https://api.github.com/repos/Alexey007gold/spring-core-hometask", "Date": "2018-04-24T13:18:48Z"},
{"Line": "113=>113", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "this.activityFacilities.getFacilities().containsKey(act.getFacilityId())=>this.activityFacilities.getFacilities().get(act.getFacilityId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8913/buggy-version/matsim.src.main.java.org.matsim.core.population.algorithms.PersonPrepareForSim.java", "BodyUseAPI": [], "Fixed commit": "112a16b59b9001f100bfaebb42ff486fa807d46e", "Url": "https://api.github.com/repos/matsim-org/matsim", "Date": "2018-01-31T10:30:46Z"},
{"Line": "61=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "se.inera.intyg.webcert.persistence.privatlakaravtal.repository.EntityManager.createQuery(java.lang.String,java.lang.Class)=>javax.persistence.EntityManager.createQuery(java.lang.String,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3684/buggy-version/persistence.src.main.java.se.inera.intyg.webcert.persistence.privatlakaravtal.repository.GodkantAvtalRepositoryImpl.java", "BodyUseAPI": [], "Fixed commit": "1b057a826dfc2c4ca46e0c96e65ecafe343dde9d", "Url": "https://api.github.com/repos/sklintyg/webcert", "Date": "2018-09-22T15:39:19Z"},
{"Line": "103=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "se.inera.intyg.webcert.persistence.privatlakaravtal.repository.EntityManager.remove(se.inera.intyg.webcert.persistence.privatlakaravtal.model.GodkantAvtal)=>javax.persistence.EntityManager.remove(se.inera.intyg.webcert.persistence.privatlakaravtal.model.GodkantAvtal)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3684/buggy-version/persistence.src.main.java.se.inera.intyg.webcert.persistence.privatlakaravtal.repository.GodkantAvtalRepositoryImpl.java", "BodyUseAPI": [], "Fixed commit": "1b057a826dfc2c4ca46e0c96e65ecafe343dde9d", "Url": "https://api.github.com/repos/sklintyg/webcert", "Date": "2018-09-22T15:39:19Z"},
{"Line": "97=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "se.inera.intyg.webcert.persistence.privatlakaravtal.repository.EntityManager.createQuery(java.lang.String,java.lang.Class)=>javax.persistence.EntityManager.createQuery(java.lang.String,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3684/buggy-version/persistence.src.main.java.se.inera.intyg.webcert.persistence.privatlakaravtal.repository.GodkantAvtalRepositoryImpl.java", "BodyUseAPI": [], "Fixed commit": "1b057a826dfc2c4ca46e0c96e65ecafe343dde9d", "Url": "https://api.github.com/repos/sklintyg/webcert", "Date": "2018-09-22T15:39:19Z"},
{"Line": "79=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "se.inera.intyg.webcert.persistence.privatlakaravtal.repository.EntityManager.createQuery(java.lang.String,java.lang.Class)=>javax.persistence.EntityManager.createQuery(java.lang.String,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3684/buggy-version/persistence.src.main.java.se.inera.intyg.webcert.persistence.privatlakaravtal.repository.GodkantAvtalRepositoryImpl.java", "BodyUseAPI": [], "Fixed commit": "1b057a826dfc2c4ca46e0c96e65ecafe343dde9d", "Url": "https://api.github.com/repos/sklintyg/webcert", "Date": "2018-09-22T15:39:19Z"},
{"Line": "55=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "se.inera.intyg.webcert.persistence.privatlakaravtal.repository.EntityManager.persist(se.inera.intyg.webcert.persistence.privatlakaravtal.model.GodkantAvtal)=>javax.persistence.EntityManager.persist(se.inera.intyg.webcert.persistence.privatlakaravtal.model.GodkantAvtal)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3684/buggy-version/persistence.src.main.java.se.inera.intyg.webcert.persistence.privatlakaravtal.repository.GodkantAvtalRepositoryImpl.java", "BodyUseAPI": [], "Fixed commit": "1b057a826dfc2c4ca46e0c96e65ecafe343dde9d", "Url": "https://api.github.com/repos/sklintyg/webcert", "Date": "2018-09-22T15:39:19Z"},
{"Line": "87=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "se.inera.intyg.webcert.persistence.privatlakaravtal.repository.EntityManager.remove(se.inera.intyg.webcert.persistence.privatlakaravtal.model.GodkantAvtal)=>javax.persistence.EntityManager.remove(se.inera.intyg.webcert.persistence.privatlakaravtal.model.GodkantAvtal)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3684/buggy-version/persistence.src.main.java.se.inera.intyg.webcert.persistence.privatlakaravtal.repository.GodkantAvtalRepositoryImpl.java", "BodyUseAPI": [], "Fixed commit": "1b057a826dfc2c4ca46e0c96e65ecafe343dde9d", "Url": "https://api.github.com/repos/sklintyg/webcert", "Date": "2018-09-22T15:39:19Z"},
{"Line": "139=>139", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "de.tum.bgu.msm.models.transportModel.matsim.Dwelling.getId()=>de.tum.bgu.msm.models.transportModel.matsim.Dwelling.getZone()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2687/buggy-version/src.main.java.de.tum.bgu.msm.models.transportModel.matsim.SiloMatsimUtils.java", "BodyUseAPI": [], "Fixed commit": "0dbb1efa1a9aa96bc3aa23a35704f5a2410bfb5b", "Url": "https://api.github.com/repos/msmobility/silo", "Date": "2018-03-15T20:39:00Z"},
{"Line": "107=>209", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Viewer.courses.get(int)=>Viewer.students.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2480/buggy-version/src.Controller.CourseController.java", "BodyUseAPI": [], "Fixed commit": "c762e6fbe1f6d0cb501783f4e14943edbad41bb1", "Url": "https://api.github.com/repos/CasperMKlein/Recap-assignment", "Date": "2018-09-10T12:29:48Z"},
{"Line": "108=>210", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Viewer.courses.get(i).getSubject()=>Viewer.students.get(j).getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2480/buggy-version/src.Controller.CourseController.java", "BodyUseAPI": [], "Fixed commit": "c762e6fbe1f6d0cb501783f4e14943edbad41bb1", "Url": "https://api.github.com/repos/CasperMKlein/Recap-assignment", "Date": "2018-09-10T12:29:48Z"},
{"Line": "102=>207", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Viewer.courses.size()=>Viewer.students.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2480/buggy-version/src.Controller.CourseController.java", "BodyUseAPI": [], "Fixed commit": "c762e6fbe1f6d0cb501783f4e14943edbad41bb1", "Url": "https://api.github.com/repos/CasperMKlein/Recap-assignment", "Date": "2018-09-10T12:29:48Z"},
{"Line": "107=>209", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Viewer.courses.get(i).getName()=>Viewer.students.get(j).getID()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2480/buggy-version/src.Controller.CourseController.java", "BodyUseAPI": [], "Fixed commit": "c762e6fbe1f6d0cb501783f4e14943edbad41bb1", "Url": "https://api.github.com/repos/CasperMKlein/Recap-assignment", "Date": "2018-09-10T12:29:48Z"},
{"Line": "201=>100", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] readStudents(int)=>[public] readCourse(int,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2480/buggy-version/src.Controller.CourseController.java", "BodyUseAPI": [], "Fixed commit": "c762e6fbe1f6d0cb501783f4e14943edbad41bb1", "Url": "https://api.github.com/repos/CasperMKlein/Recap-assignment", "Date": "2018-09-10T12:29:48Z"},
{"Line": "405=>405", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "MainView.setMVbutton(boolean)=>javax.swing.JButton.setEnabled(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4768/buggy-version/SimpleMerge.src.MainView.java", "BodyUseAPI": [], "Fixed commit": "3f86ecede76738b434575ab81901d4c944760011", "Url": "https://api.github.com/repos/gfsusan/simple-merge", "Date": "2018-06-05T15:39:35Z"},
{"Line": "407=>407", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "MainView.setMVbutton(boolean)=>javax.swing.JButton.setEnabled(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4768/buggy-version/SimpleMerge.src.MainView.java", "BodyUseAPI": [], "Fixed commit": "3f86ecede76738b434575ab81901d4c944760011", "Url": "https://api.github.com/repos/gfsusan/simple-merge", "Date": "2018-06-05T15:39:35Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.android.musicalstructureapp.MainActivity.findViewById(R.id.rock_list)=>com.example.android.musicalstructureapp.MainActivity.findViewById(R.id.tv_rock_list)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/199/buggy-version/app.src.main.java.com.example.android.musicalstructureapp.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "6717a6232f120cd239011f3cef6912115952027f", "Url": "https://api.github.com/repos/Inoarefst/MusicalStructureApp", "Date": "2018-03-07T09:22:23Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.android.musicalstructureapp.MainActivity.findViewById(R.id.hip_hop_list)=>com.example.android.musicalstructureapp.MainActivity.findViewById(R.id.tv_hip_hop_list)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/199/buggy-version/app.src.main.java.com.example.android.musicalstructureapp.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "6717a6232f120cd239011f3cef6912115952027f", "Url": "https://api.github.com/repos/Inoarefst/MusicalStructureApp", "Date": "2018-03-07T09:22:23Z"},
{"Line": "38=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.android.musicalstructureapp.MainActivity.findViewById(R.id.party_list)=>com.example.android.musicalstructureapp.MainActivity.findViewById(R.id.tv_party_list)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/199/buggy-version/app.src.main.java.com.example.android.musicalstructureapp.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "6717a6232f120cd239011f3cef6912115952027f", "Url": "https://api.github.com/repos/Inoarefst/MusicalStructureApp", "Date": "2018-03-07T09:22:23Z"},
{"Line": "54=>58", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "q.getResultList().get(int)=>java.util.List<domain.Profile>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3457/buggy-version/src.main.java.dao.implementations.ProfileDaoImpl.java", "BodyUseAPI": [], "Fixed commit": "45342a2c1a66481c8e1a0bcb47526381305603dc", "Url": "https://api.github.com/repos/Vidovitsch/kwetter", "Date": "2018-04-14T15:26:15Z"},
{"Line": "33=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.hibernate.Session.save(ar.edu.unlam.tallerweb1.modelo.Paciente)=>org.hibernate.SessionFactory.getCurrentSession()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/804/buggy-version/proyecto-tp-final.src.main.java.ar.edu.unlam.tallerweb1.dao.PacienteDaoImpl.java", "BodyUseAPI": [], "Fixed commit": "6ea6484fafedba86e240afeaf6400fb879dbdc53", "Url": "https://api.github.com/repos/damiangayoso/TP-FINAL-Taller-Web", "Date": "2018-06-17T23:16:32Z"},
{"Line": "163=>150", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "acme.ui.AcmeUI.setPanel(acme.ui.ClerksListPanel)=>acme.ui.AcmeUI.setPanel(acme.ui.ExampleJPanel)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/325/buggy-version/src.acme.ui.AcmeUI.java", "BodyUseAPI": [], "Fixed commit": "6b94915ed7d8c89d2ea90e69761df618577b4cf1", "Url": "https://api.github.com/repos/simpleman19/acmeDSTS", "Date": "2018-06-17T01:45:32Z"},
{"Line": "92=>91", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.lang3.math.NumberUtils.toInt(java.lang.String)=>java.util.Optional.ofNullable(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6873/buggy-version/core.jobs.src.main.java.com.cognifide.aet.job.common.modifiers.resolution.ResolutionModifier.java", "BodyUseAPI": [], "Fixed commit": "d94624e36a5339db44a9fa56fc2489824abd256c", "Url": "https://api.github.com/repos/Cognifide/aet", "Date": "2018-10-22T14:23:55Z"},
{"Line": "92=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.lang3.math.NumberUtils.toInt(java.lang.String)=>java.util.Optional.ofNullable(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6873/buggy-version/core.jobs.src.main.java.com.cognifide.aet.job.common.modifiers.resolution.ResolutionModifier.java", "BodyUseAPI": [], "Fixed commit": "d94624e36a5339db44a9fa56fc2489824abd256c", "Url": "https://api.github.com/repos/Cognifide/aet", "Date": "2018-10-22T14:23:55Z"},
{"Line": "92=>92", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.orientechnologies.orient.core.db.ODatabaseDocumentInternal.commit2pc(com.orientechnologies.orient.server.distributed.ODistributedRequestId)=>com.orientechnologies.orient.core.db.ODatabaseDocumentInternal.commit2pc(com.orientechnologies.orient.server.distributed.ODistributedRequestId,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4391/buggy-version/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OTransactionPhase2Task.java", "BodyUseAPI": [], "Fixed commit": "ecef7e67490be41e9a2dc5626fe337d1044ebfcd", "Url": "https://api.github.com/repos/orientechnologies/orientdb", "Date": "2018-10-29T16:40:45Z"},
{"Line": "81=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String,java.lang.String)=>java.util.Map<java.lang.String, java.lang.Object>.put(java.lang.String,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/483/buggy-version/src.net.wait4it.nagios.wlsagent.core.WLSProxy.java", "BodyUseAPI": [], "Fixed commit": "d0e496753afc66d191a532ade9b8733772c08c21", "Url": "https://api.github.com/repos/tatref/wlsagent", "Date": "2018-08-03T14:50:32Z"},
{"Line": "48=>48", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.app.minyaneto_android.utilities.SynagogeUtils.getTextFromEnum(holder.prayDayTypeTextView.getContext(),minyan.getDayOfWeek())=>com.app.minyaneto_android.utilities.SynagogueUtils.getTextFromEnum(holder.prayDayTypeTextView.getContext(),minyan.getDayOfWeek())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/650/buggy-version/app.src.main.java.com.app.minyaneto_android.ui.adapters.MinyanAdapter.java", "BodyUseAPI": [], "Fixed commit": "2b8af0823aeef7054061e242e679fd6755f09d57", "Url": "https://api.github.com/repos/startach/minyaneto", "Date": "2018-02-22T21:50:02Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.app.minyaneto_android.utilities.SynagogeUtils.getTextFromEnum(holder.prayDayTypeTextView.getContext(),minyan.getDayOfWeek())=>com.app.minyaneto_android.utilities.SynagogueUtils.getTextFromEnum(holder.prayDayTypeTextView.getContext(),minyan.getDayOfWeek())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/650/buggy-version/app.src.main.java.com.app.minyaneto_android.ui.adapters.MinyanAdapter.java", "BodyUseAPI": [], "Fixed commit": "2b8af0823aeef7054061e242e679fd6755f09d57", "Url": "https://api.github.com/repos/startach/minyaneto", "Date": "2018-02-22T21:50:02Z"},
{"Line": "42=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.app.minyaneto_android.utilities.SynagogeUtils.getTextFromEnum(holder.prayTypeTextView.getContext(),minyan.getPrayType())=>com.app.minyaneto_android.utilities.SynagogueUtils.getTextFromEnum(holder.prayTypeTextView.getContext(),minyan.getPrayType())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/650/buggy-version/app.src.main.java.com.app.minyaneto_android.ui.adapters.MinyanAdapter.java", "BodyUseAPI": [], "Fixed commit": "2b8af0823aeef7054061e242e679fd6755f09d57", "Url": "https://api.github.com/repos/startach/minyaneto", "Date": "2018-02-22T21:50:02Z"},
{"Line": "1162=>1166", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Compound.TYPE.isAssignableFrom(nestAssignment.getElement(y).getType())=>net.ssehub.easy.varModel.model.datatypes.TypeQueries.isCompound(nestAssignment.getElement(y).getType())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3485/buggy-version/Plugins.Reasoner.EASy-Original-Reasoner.de.uni_hildesheim.sse.reasoning.reasoner.src.net.ssehub.easy.reasoning.sseReasoner.Resolver.java", "BodyUseAPI": [], "Fixed commit": "a96e269275173a0e86547a6f07480cd53391d0fb", "Url": "https://api.github.com/repos/SSEHUB/EASyProducer", "Date": "2018-01-13T12:57:23Z"},
{"Line": "413=>416", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Compound.TYPE.isAssignableFrom(net.ssehub.easy.varModel.model.datatypes.IDatatype)=>net.ssehub.easy.varModel.model.datatypes.TypeQueries.isCompound(net.ssehub.easy.varModel.model.datatypes.IDatatype)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3485/buggy-version/Plugins.Reasoner.EASy-Original-Reasoner.de.uni_hildesheim.sse.reasoning.reasoner.src.net.ssehub.easy.reasoning.sseReasoner.Resolver.java", "BodyUseAPI": [], "Fixed commit": "a96e269275173a0e86547a6f07480cd53391d0fb", "Url": "https://api.github.com/repos/SSEHUB/EASyProducer", "Date": "2018-01-13T12:57:23Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.ifood.ifood.ShoppingList.setContentView(R.layout.ShoppingList)=>com.ifood.ifood.ShoppingList.setContentView(R.layout.activity_shopping_list)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5113/buggy-version/app.src.main.java.com.ifood.ifood.ShoppingList.java", "BodyUseAPI": [], "Fixed commit": "8550ded041a3d53afa3e56dd98e602938fac2e28", "Url": "https://api.github.com/repos/firepaperbird/project_iFood", "Date": "2018-10-21T04:13:39Z"},
{"Line": "410=>410", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getResources().getDrawable(R.drawable.ic_action_shopping_cart)=>getResources().getDrawable(R.drawable.ic_action_shopping_list_icon)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5113/buggy-version/app.src.main.java.com.ifood.ifood.detailFoodActivity.java", "BodyUseAPI": [], "Fixed commit": "8550ded041a3d53afa3e56dd98e602938fac2e28", "Url": "https://api.github.com/repos/firepaperbird/project_iFood", "Date": "2018-10-21T04:13:39Z"},
{"Line": "119=>120", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.SharedPreferences.getString(java.lang.String,<nulltype>)=>android.content.SharedPreferences.getString(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2015/buggy-version/mbw.src.main.java.com.mycelium.wallet.ExchangeRateManager.java", "BodyUseAPI": [], "Fixed commit": "0153c6c02265da59978fd08be47975e80657e54d", "Url": "https://api.github.com/repos/mycelium-com/wallet-android", "Date": "2018-09-07T16:32:09Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.entity.Player.hasPermission(java.lang.String)=>org.bukkit.command.CommandSender.hasPermission(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2469/buggy-version/FundamentalsX.src.com.wisehollow.fundamentals.commands.CommandWarp.java", "BodyUseAPI": [], "Fixed commit": "0c417a67d6b5adc257b422c0c60ce3f234ada435", "Url": "https://api.github.com/repos/WiseHollow/FundamentalsX", "Date": "2018-10-05T21:05:01Z"},
{"Line": "26=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.entity.Player.sendMessage(com.wisehollow.fundamentals.Language.getInstance().unauthorized)=>org.bukkit.command.CommandSender.sendMessage(com.wisehollow.fundamentals.Language.getInstance().unauthorized)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2469/buggy-version/FundamentalsX.src.com.wisehollow.fundamentals.commands.CommandWarp.java", "BodyUseAPI": [], "Fixed commit": "0c417a67d6b5adc257b422c0c60ce3f234ada435", "Url": "https://api.github.com/repos/WiseHollow/FundamentalsX", "Date": "2018-10-05T21:05:01Z"},
{"Line": "36=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.entity.Player.sendMessage(((com.wisehollow.fundamentals.Language.getInstance().warpList) + warps))=>org.bukkit.command.CommandSender.sendMessage(((com.wisehollow.fundamentals.Language.getInstance().warpList) + warps))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2469/buggy-version/FundamentalsX.src.com.wisehollow.fundamentals.commands.CommandWarp.java", "BodyUseAPI": [], "Fixed commit": "0c417a67d6b5adc257b422c0c60ce3f234ada435", "Url": "https://api.github.com/repos/WiseHollow/FundamentalsX", "Date": "2018-10-05T21:05:01Z"},
{"Line": "42=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.bukkit.entity.Player.sendMessage(com.wisehollow.fundamentals.Language.getInstance().warpDoesNotExist)=>org.bukkit.command.CommandSender.sendMessage(com.wisehollow.fundamentals.Language.getInstance().warpDoesNotExist)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2469/buggy-version/FundamentalsX.src.com.wisehollow.fundamentals.commands.CommandWarp.java", "BodyUseAPI": [], "Fixed commit": "0c417a67d6b5adc257b422c0c60ce3f234ada435", "Url": "https://api.github.com/repos/WiseHollow/FundamentalsX", "Date": "2018-10-05T21:05:01Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.hibernate.Session.load(java.lang.Class,int)=>org.hibernate.Session.get(java.lang.Class,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/137/buggy-version/common.src.main.java.fr.digicar.dao.CarDAOImpl.java", "BodyUseAPI": [], "Fixed commit": "e7696a9cd3db2bc7b0d5cfe03d31338504017e3a", "Url": "https://api.github.com/repos/esuau/digicar", "Date": "2018-01-20T09:17:27Z"},
{"Line": "49=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.List<Station>.getLength()=>java.util.List<Station>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1579/buggy-version/Station.java", "BodyUseAPI": [], "Fixed commit": "98ced9744e7e4a3f700693f2cc59a44876464887", "Url": "https://api.github.com/repos/psygypsie/COMP2230_Assignment", "Date": "2018-10-19T06:42:41Z"},
{"Line": "259=>259", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.core.io.Temp.createTempFile(java.lang.String)=>org.jebtk.core.io.TmpService.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8495/buggy-version/org.jebtk.graphplot.src.main.java.org.jebtk.graphplot.Image.java", "BodyUseAPI": [], "Fixed commit": "93e8256311595175d1310f5d09dd1f96a5f24328", "Url": "https://api.github.com/repos/antonybholmes/jebtk-graphplot", "Date": "2018-10-20T00:05:09Z"},
{"Line": "337=>339", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.github.pr0methean.betterrandom.util.BinaryUtils.convertLongToBytes(long,java.nio.ByteOrder)=>java.lang.System.arraycopy(byte[],int,byte[],int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6455/buggy-version/betterrandom.src.main.java.io.github.pr0methean.betterrandom.prng.AesCounterRandom.java", "BodyUseAPI": [], "Fixed commit": "f9eeb0cc1e672bd2875b0ed43028c56be8681ab4", "Url": "https://api.github.com/repos/Pr0methean/BetterRandom", "Date": "2018-08-20T19:57:37Z"},
{"Line": "337=>340", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.System.arraycopy(io.github.pr0methean.betterrandom.util.BinaryUtils.convertLongToBytes(blocksDelta, java.nio.ByteOrder.BIG_ENDIAN),int,byte[],int,int)=>io.github.pr0methean.betterrandom.util.BinaryUtils.convertLongToBytes(long,byte[],int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6455/buggy-version/betterrandom.src.main.java.io.github.pr0methean.betterrandom.prng.AesCounterRandom.java", "BodyUseAPI": [], "Fixed commit": "f9eeb0cc1e672bd2875b0ed43028c56be8681ab4", "Url": "https://api.github.com/repos/Pr0methean/BetterRandom", "Date": "2018-08-20T19:57:37Z"},
{"Line": "53=>48", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Main.api.moveClient(clients.getId(),java.lang.Integer)=>Main.api.sendPrivateMessage(clients.getId(),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1958/buggy-version/Bot.src.de.seliba.tsbot.Run.java", "BodyUseAPI": [], "Fixed commit": "43170ee93474ce50c03548777bd4585f8f4a39d9", "Url": "https://api.github.com/repos/Seliba/TS3Bot", "Date": "2018-02-19T16:58:41Z"},
{"Line": "56=>58", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "io.atomix.protocols.backup.MultiPrimaryProtocol.builder().build()=>io.atomix.protocols.backup.MultiPrimaryProtocol.builder().withMaxRetries(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/216/buggy-version/protocols.primary-backup.src.main.java.io.atomix.protocols.backup.partition.impl.PrimaryBackupPartitionClient.java", "BodyUseAPI": [], "Fixed commit": "f2809df39bc785aa985f0e92a24cf4b878b738d9", "Url": "https://api.github.com/repos/atomix/atomix", "Date": "2018-04-11T15:09:33Z"},
{"Line": "101=>99", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Map<net.minecraft.enchantment.Enchantment, java.lang.Integer>.remove(Enchantment.REGISTRY.getIDForObject(enchantment))=>java.util.Map<net.minecraft.enchantment.Enchantment, java.lang.Integer>.remove(net.minecraft.enchantment.Enchantment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3363/buggy-version/src.main.java.com.forgeessentials.commands.item.CommandDechant.java", "BodyUseAPI": [], "Fixed commit": "57844b1969555269d21dee214374b211041a8803", "Url": "https://api.github.com/repos/ForgeEssentials/ForgeEssentials", "Date": "2018-10-28T00:55:40Z"},
{"Line": "77=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Map<net.minecraft.enchantment.Enchantment, java.lang.Integer>.containsKey(Enchantment.REGISTRY.getIDForObject(enchantment))=>java.util.Map<net.minecraft.enchantment.Enchantment, java.lang.Integer>.containsKey(net.minecraft.enchantment.Enchantment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3363/buggy-version/src.main.java.com.forgeessentials.commands.item.CommandDechant.java", "BodyUseAPI": [], "Fixed commit": "57844b1969555269d21dee214374b211041a8803", "Url": "https://api.github.com/repos/ForgeEssentials/ForgeEssentials", "Date": "2018-10-28T00:55:40Z"},
{"Line": "85=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.Exception.printStackTrace()=>io.choerodon.oauth.infra.common.util.CustomAuthenticationSuccessHandler.error(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6368/buggy-version/src.main.java.io.choerodon.oauth.infra.common.util.CustomAuthenticationSuccessHandler.java", "BodyUseAPI": [], "Fixed commit": "02f8f51acfb3a94774051394a43a18857faee022", "Url": "https://api.github.com/repos/choerodon/oauth-server", "Date": "2018-08-01T02:00:38Z"},
{"Line": "51=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "bind(org.eurekaclinical.common.servlet.LogoutServlet.class).in(java.lang.Class)=>serve(\"/login*\").with(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5683/buggy-version/src.main.java.org.eurekaclinical.admin.webapp.config.ServletModule.java", "BodyUseAPI": [], "Fixed commit": "cfdb29e2da28f304f407821d56d486dbff63d6c8", "Url": "https://api.github.com/repos/ndeshpa/eurekaclinical-admin-webapp", "Date": "2018-01-18T16:01:43Z"},
{"Line": "45=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.hedvig.backoffice.services.members.MemberServiceClient.getMembers(java.util.List<java.lang.String>)=>com.hedvig.backoffice.services.members.MemberServiceClient.getMembers(com.hedvig.backoffice.services.members.dto.ChargeMembersDTO)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3010/buggy-version/src.main.java.com.hedvig.backoffice.services.members.MemberServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "3ab7bceac9645809eff3fbf44ad8605859d5c3fb", "Url": "https://api.github.com/repos/HedvigInsurance/back-office", "Date": "2018-10-26T11:42:36Z"},
{"Line": "72=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "rs.ac.bg.fon.chatbot.controller.ResponseService.sendResponse(appointment.getStudentID(),java.lang.String)=>rs.ac.bg.fon.chatbot.controller.ResponseService.sendResponse(com.github.messenger4j.send.MessagePayload.create(appointment.getStudentID(), com.github.messenger4j.send.message.TextMessage.create(message)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8351/buggy-version/src.main.java.rs.ac.bg.fon.chatbot.controller.AppointmentRestController.java", "BodyUseAPI": [], "Fixed commit": "c86cb1d6fa52c3bbd0b41a1b036d8f5fd58cb2d0", "Url": "https://api.github.com/repos/mladensavic94/nst-chatbot-end", "Date": "2018-05-27T21:45:50Z"},
{"Line": "63=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.cg.aieecosystemapp.dao.TechnologyTagRepository.existsById(tag.getTechnologyTagId())=>com.cg.aieecosystemapp.dao.TechnologyTagRepository.findById(tag.getTechnologyTagId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5652/buggy-version/AIEEcosystemApp.src.main.java.com.cg.aieecosystemapp.service.TechnologyTagService.java", "BodyUseAPI": [], "Fixed commit": "548e7292d7a1c21dd01215256f6c6ad5fd0de119", "Url": "https://api.github.com/repos/alvinng91/AIEEcosystem", "Date": "2018-05-31T02:46:29Z"},
{"Line": "151=>150", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<gameMechanics.monsters.Monster>.get(int)=>gameMechanics.monsters.Monster.getHp()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8617/buggy-version/CaveJerk.src.gameMechanics.Combat.java", "BodyUseAPI": [], "Fixed commit": "7c2d0a1c313c0ff277eeed6e3ece1b0dc642949d", "Url": "https://api.github.com/repos/David1platt/caveJerk", "Date": "2018-08-21T00:07:46Z"},
{"Line": "154=>153", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.ArrayList<gameMechanics.monsters.Monster>.remove(int)=>java.util.ArrayList<gameMechanics.monsters.Monster>.remove(gameMechanics.monsters.Monster)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8617/buggy-version/CaveJerk.src.gameMechanics.Combat.java", "BodyUseAPI": [], "Fixed commit": "7c2d0a1c313c0ff277eeed6e3ece1b0dc642949d", "Url": "https://api.github.com/repos/David1platt/caveJerk", "Date": "2018-08-21T00:07:46Z"},
{"Line": "151=>150", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "gang.get(i).getHp()=>gameMechanics.monsters.Monster.getHp()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8617/buggy-version/CaveJerk.src.gameMechanics.Combat.java", "BodyUseAPI": [], "Fixed commit": "7c2d0a1c313c0ff277eeed6e3ece1b0dc642949d", "Url": "https://api.github.com/repos/David1platt/caveJerk", "Date": "2018-08-21T00:07:46Z"},
{"Line": "30=>30", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.ucdavis.dss.ipa.repositories.SectionGroupCostRepository.findBySubjectCodeAndCourseNumberAndSequenceNumberAndBudgetScenarioId(originalSectionGroupCost.getSubjectCode(),originalSectionGroupCost.getCourseNumber(),originalSectionGroupCost.getSequencePattern(),budgetScenario.getId())=>edu.ucdavis.dss.ipa.repositories.SectionGroupCostRepository.findBySubjectCodeAndCourseNumberAndSequencePatternAndBudgetScenarioId(originalSectionGroupCost.getSubjectCode(),originalSectionGroupCost.getCourseNumber(),originalSectionGroupCost.getSequencePattern(),budgetScenario.getId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5361/buggy-version/src.main.java.edu.ucdavis.dss.ipa.services.jpa.JpaSectionGroupCostService.java", "BodyUseAPI": [], "Fixed commit": "88e70aa8015e2b050d117014e6f153367fa8387e", "Url": "https://api.github.com/repos/ucdavis/ipa-web", "Date": "2018-08-10T17:58:03Z"},
{"Line": "216=>216", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Model.creditSupply.getNewlyPaidDownPayments()=>Model.householdStats.getNNegativeEquity()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2908/buggy-version/src.main.java.collectors.Recorder.java", "BodyUseAPI": [], "Fixed commit": "ea2bbafb2fa2bdb1107d7e561a6cb23e39e24466", "Url": "https://api.github.com/repos/RubenTarne/wealth-effect", "Date": "2018-10-05T07:36:52Z"},
{"Line": "215=>215", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Model.creditSupply.getNewlyIssuedCredit()=>Model.creditSupply.getNewlyPaidDownPayments()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2908/buggy-version/src.main.java.collectors.Recorder.java", "BodyUseAPI": [], "Fixed commit": "ea2bbafb2fa2bdb1107d7e561a6cb23e39e24466", "Url": "https://api.github.com/repos/RubenTarne/wealth-effect", "Date": "2018-10-05T07:36:52Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.domain.Books.setBookList(java.util.List<com.example.domain.Book>)=>com.example.client.entity.Books.setBookList(java.util.List<com.example.client.entity.Book>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3265/buggy-version/5.jaxrs2-client.src.main.java.com.example.client.resource.BookResource.java", "BodyUseAPI": [], "Fixed commit": "e09998fa53352535a682a7cd739a540898ab2003", "Url": "https://api.github.com/repos/feuyeux/jax-rs2-guide-II", "Date": "2018-09-10T03:47:47Z"},
{"Line": "42=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.log4j.Logger.debug(com.example.domain.Book)=>org.apache.log4j.Logger.debug(com.example.client.entity.Book)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3265/buggy-version/5.jaxrs2-client.src.main.java.com.example.client.resource.BookResource.java", "BodyUseAPI": [], "Fixed commit": "e09998fa53352535a682a7cd739a540898ab2003", "Url": "https://api.github.com/repos/feuyeux/jax-rs2-guide-II", "Date": "2018-09-10T03:47:47Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.example.domain.Book>.add(com.example.domain.Book)=>java.util.List<com.example.client.entity.Book>.add(com.example.client.entity.Book)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3265/buggy-version/5.jaxrs2-client.src.main.java.com.example.client.resource.BookResource.java", "BodyUseAPI": [], "Fixed commit": "e09998fa53352535a682a7cd739a540898ab2003", "Url": "https://api.github.com/repos/feuyeux/jax-rs2-guide-II", "Date": "2018-09-10T03:47:47Z"},
{"Line": "35=>34", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.hibernate.cfg.Configuration.buildSessionFactory(org.hibernate.service.ServiceRegistry)=>org.hibernate.cfg.Configuration.buildSessionFactory(serviceRegistry.build())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8935/buggy-version/src.fachlogik.HibernateUtil.java", "BodyUseAPI": [], "Fixed commit": "ada257c8e3fa38d1c55ce329bad0b184199bda4d", "Url": "https://api.github.com/repos/BatPat/SWT-B---Gruppe13", "Date": "2018-06-12T19:57:55Z"},
{"Line": "550=>549", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "eppic.ChainEvolContext.getCachedHspsForQuery(java.lang.String)=>eppic.ChainEvolContext.getCachedHspsForQuery(eppic.commons.sequence.UnirefEntry,eppic.commons.util.Interval)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6135/buggy-version/eppic-cli.src.main.java.eppic.ChainEvolContext.java", "BodyUseAPI": [], "Fixed commit": "271d97b6a0286fb5787457a027d7c8ec0d96bc9f", "Url": "https://api.github.com/repos/josemduarte/eppic", "Date": "2018-09-18T21:29:47Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "se.lth.base.server.data.DriveMilestoneDataAccess.insert(java.lang.String)=>se.lth.base.server.data.DriveMilestoneDataAccess.insert(java.lang.String,int,java.lang.String,java.sql.Timestamp)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6989/buggy-version/src.main.java.se.lth.base.server.data.DriveMilestoneDataAccess.java", "BodyUseAPI": [], "Fixed commit": "b0c09c97fb294b39c65f72d7ab2e03c6ae010a12", "Url": "https://api.github.com/repos/CommuteCompanion/etsn05-project", "Date": "2018-10-08T14:43:44Z"},
{"Line": "209=>211", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.example.helper.JsonConverter.convertFromJsonString(converter.convertToJsonStringWithObject(datamap.get(\"tracker_information\")),java.lang.Class)=>com.example.helper.JsonConverter.convertFromJsonString(java.lang.Object,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8471/buggy-version/src.main.java.com.example.dao.TrackingDao.java", "BodyUseAPI": [], "Fixed commit": "1ae6e36602772981fbca8ba902b6af823b6f688f", "Url": "https://api.github.com/repos/AlphaGarden/PackTrackServer", "Date": "2018-05-02T23:13:29Z"},
{"Line": "86=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "rx.Observable.empty()=>rx.Observable.just(org.learn.lra.coreapi.LRAResult)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/9693/buggy-version/order-service.src.main.java.org.learn.lra.orderservice.BeanConfiguration.java", "BodyUseAPI": [], "Fixed commit": "2951b0ba3b30ad40a248df9133d9c788cd2f3c3c", "Url": "https://api.github.com/repos/xstefank/lra-service", "Date": "2018-04-11T13:44:54Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.marklogic.appdeployer.command.appservers.UpdateRestApiServersCommand.copyFileToString(java.io.File,com.marklogic.appdeployer.command.CommandContext)=>com.marklogic.appdeployer.command.appservers.UpdateRestApiServersCommand.copyFileToString(java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7612/buggy-version/src.main.java.com.marklogic.appdeployer.command.appservers.UpdateRestApiServersCommand.java", "BodyUseAPI": [], "Fixed commit": "37051161dd06ef37a888dd13a4ff7c22969d8564", "Url": "https://api.github.com/repos/marklogic-community/ml-app-deployer", "Date": "2018-01-19T18:51:18Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "cn.fanhub.irelia.core.model.IreliaRequest.getRpcType()=>cn.fanhub.irelia.core.model.IreliaRequest.getRpcValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2462/buggy-version/Irelia-spi-core.src.main.java.cn.fanhub.irelia.spi.core.IreliaServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "4ad50e1db9199e31972c5e1e6aedc69b634ea1af", "Url": "https://api.github.com/repos/distributed-and-microservice/Irelia", "Date": "2018-05-01T06:07:27Z"},
{"Line": "78=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<cmput301w18t09.orbid.Task>.add(cmput301w18t09.orbid.Task)=>java.util.concurrent.ExecutionException.printStackTrace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4930/buggy-version/app.src.main.java.cmput301w18t09.orbid.RecentListingsActivity.java", "BodyUseAPI": [], "Fixed commit": "041c1e8675e994c29ea43eec0c28c130f3ec1b3b", "Url": "https://api.github.com/repos/CMPUT301W18T09/CDProjektBlue", "Date": "2018-03-06T20:13:46Z"},
{"Line": "78=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.ArrayList<cmput301w18t09.orbid.Task>.add(cmput301w18t09.orbid.Task)=>DataManager.getTasks.execute()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4930/buggy-version/app.src.main.java.cmput301w18t09.orbid.RecentListingsActivity.java", "BodyUseAPI": [], "Fixed commit": "041c1e8675e994c29ea43eec0c28c130f3ec1b3b", "Url": "https://api.github.com/repos/CMPUT301W18T09/CDProjektBlue", "Date": "2018-03-06T20:13:46Z"},
{"Line": "161=>161", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cmput301w18t09.orbid.git.verifySettings()=>cmput301w18t09.orbid.DataManager.verifySettings()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4930/buggy-version/app.src.main.java.cmput301w18t09.orbid.DataManager.java", "BodyUseAPI": [], "Fixed commit": "041c1e8675e994c29ea43eec0c28c130f3ec1b3b", "Url": "https://api.github.com/repos/CMPUT301W18T09/CDProjektBlue", "Date": "2018-03-06T20:13:46Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cmput301w18t09.orbid.git.verifySettings()=>cmput301w18t09.orbid.DataManager.verifySettings()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4930/buggy-version/app.src.main.java.cmput301w18t09.orbid.DataManager.java", "BodyUseAPI": [], "Fixed commit": "041c1e8675e994c29ea43eec0c28c130f3ec1b3b", "Url": "https://api.github.com/repos/CMPUT301W18T09/CDProjektBlue", "Date": "2018-03-06T20:13:46Z"},
{"Line": "204=>204", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cmput301w18t09.orbid.git.verifySettings()=>cmput301w18t09.orbid.DataManager.verifySettings()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4930/buggy-version/app.src.main.java.cmput301w18t09.orbid.DataManager.java", "BodyUseAPI": [], "Fixed commit": "041c1e8675e994c29ea43eec0c28c130f3ec1b3b", "Url": "https://api.github.com/repos/CMPUT301W18T09/CDProjektBlue", "Date": "2018-03-06T20:13:46Z"},
{"Line": "75=>75", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "crows.scent.game.Player.moveOrShoot(com.badlogic.gdx.math.Vector3)=>crows.scent.game.Player.moveOrShoot(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.scenes.scene2d.Stage)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8828/buggy-version/core.src.crows.scent.game.Stage1.java", "BodyUseAPI": [], "Fixed commit": "945a653a2417224448d77a483cbe50f9b9b66966", "Url": "https://api.github.com/repos/sadpepe/Crow-s-Scent", "Date": "2018-01-15T01:10:32Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "crows.scent.game.Player.moveOrShoot(com.badlogic.gdx.math.Vector3)=>crows.scent.game.Player.moveOrShoot(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.scenes.scene2d.Stage)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8828/buggy-version/core.src.crows.scent.game.GameScreen.java", "BodyUseAPI": [], "Fixed commit": "945a653a2417224448d77a483cbe50f9b9b66966", "Url": "https://api.github.com/repos/sadpepe/Crow-s-Scent", "Date": "2018-01-15T01:10:32Z"},
{"Line": "72=>72", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "crows.scent.game.Player.moveOrShoot(com.badlogic.gdx.math.Vector3)=>crows.scent.game.Player.moveOrShoot(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.scenes.scene2d.Stage)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8828/buggy-version/core.src.crows.scent.game.Stage4.java", "BodyUseAPI": [], "Fixed commit": "945a653a2417224448d77a483cbe50f9b9b66966", "Url": "https://api.github.com/repos/sadpepe/Crow-s-Scent", "Date": "2018-01-15T01:10:32Z"},
{"Line": "174=>173", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "crows.scent.game.Player.getActors()=>com.badlogic.gdx.scenes.scene2d.Stage.getActors()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8828/buggy-version/core.src.crows.scent.game.Player.java", "BodyUseAPI": [], "Fixed commit": "945a653a2417224448d77a483cbe50f9b9b66966", "Url": "https://api.github.com/repos/sadpepe/Crow-s-Scent", "Date": "2018-01-15T01:10:32Z"},
{"Line": "113=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Truck.getCost()=>Truck.getVehicleCost()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1843/buggy-version/Truck.java", "BodyUseAPI": [], "Fixed commit": "a495de48adddbfa6603d58dba38b05e6a929159b", "Url": "https://api.github.com/repos/command7/vehicle_ordering_system", "Date": "2018-10-13T20:05:01Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "GGJsonWriters.STRICT.writeAsString(java.lang.Object)=>GGJsonWriters.STRICT_ISO8601.writeAsString(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/479/buggy-version/gantzgulch-tools-aws.src.main.java.com.gantzgulch.tools.aws.lambda.apig.domain.SimpleLambdaError.java", "BodyUseAPI": [], "Fixed commit": "6369b03aa707d8f62705dfe03b7d98c634fc6904", "Url": "https://api.github.com/repos/GantzGulchInc/GantzGulchTools", "Date": "2018-03-30T13:22:28Z"},
{"Line": "458=>458", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.awt.Container.add(javax.swing.JPanel,org.netbeans.lib.awtextra.AbsoluteConstraints)=>java.awt.Container.add(javax.swing.JPanel)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7206/buggy-version/src.com.MainData.mainVoteSystemBoys.java", "BodyUseAPI": [], "Fixed commit": "d3173598a515de358354c8442ab86150ccfe2281", "Url": "https://api.github.com/repos/jacovanstryp1/Eduplex-Highschool-Voting-System", "Date": "2018-03-11T11:53:29Z"},
{"Line": "190=>190", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.charl.contactos.ContactosAdapter.notifyDataSetChanged()=>com.example.charl.contactos.ContactosAdapter2.notifyDataSetChanged()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7348/buggy-version/app.src.main.java.com.example.charl.contactos.Favoritos.java", "BodyUseAPI": [], "Fixed commit": "58e3ba25b6fadb179aa15767c5aece4f74a8b071", "Url": "https://api.github.com/repos/00198216/Contactos", "Date": "2018-05-07T07:06:41Z"},
{"Line": "204=>204", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.charl.contactos.ContactosAdapter.notifyDataSetChanged()=>com.example.charl.contactos.ContactosAdapter2.notifyDataSetChanged()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7348/buggy-version/app.src.main.java.com.example.charl.contactos.Favoritos.java", "BodyUseAPI": [], "Fixed commit": "58e3ba25b6fadb179aa15767c5aece4f74a8b071", "Url": "https://api.github.com/repos/00198216/Contactos", "Date": "2018-05-07T07:06:41Z"},
{"Line": "155=>155", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.support.v7.widget.RecyclerView.setAdapter(com.example.charl.contactos.ContactosAdapter)=>android.support.v7.widget.RecyclerView.setAdapter(com.example.charl.contactos.ContactosAdapter2)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7348/buggy-version/app.src.main.java.com.example.charl.contactos.Favoritos.java", "BodyUseAPI": [], "Fixed commit": "58e3ba25b6fadb179aa15767c5aece4f74a8b071", "Url": "https://api.github.com/repos/00198216/Contactos", "Date": "2018-05-07T07:06:41Z"},
{"Line": "144=>144", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.charl.contactos.ContactosAdapter.notifyItemRangeChanged(int,series2.size())=>com.example.charl.contactos.ContactosAdapter2.notifyItemRangeChanged(int,series2.size())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7348/buggy-version/app.src.main.java.com.example.charl.contactos.Favoritos.java", "BodyUseAPI": [], "Fixed commit": "58e3ba25b6fadb179aa15767c5aece4f74a8b071", "Url": "https://api.github.com/repos/00198216/Contactos", "Date": "2018-05-07T07:06:41Z"},
{"Line": "175=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.charl.contactos.ContactosAdapter.notifyDataSetChanged()=>com.example.charl.contactos.ContactosAdapter2.notifyDataSetChanged()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7348/buggy-version/app.src.main.java.com.example.charl.contactos.Favoritos.java", "BodyUseAPI": [], "Fixed commit": "58e3ba25b6fadb179aa15767c5aece4f74a8b071", "Url": "https://api.github.com/repos/00198216/Contactos", "Date": "2018-05-07T07:06:41Z"},
{"Line": "143=>143", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.charl.contactos.ContactosAdapter.notifyItemInserted(int)=>com.example.charl.contactos.ContactosAdapter2.notifyItemInserted(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7348/buggy-version/app.src.main.java.com.example.charl.contactos.Favoritos.java", "BodyUseAPI": [], "Fixed commit": "58e3ba25b6fadb179aa15767c5aece4f74a8b071", "Url": "https://api.github.com/repos/00198216/Contactos", "Date": "2018-05-07T07:06:41Z"},
{"Line": "104=>104", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.xero.api.XeroPayrollClient.edget(java.lang.String)=>com.xero.api.XeroPayrollClient.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2486/buggy-version/src.main.java.com.xero.api.XeroPayrollClient.java", "BodyUseAPI": [], "Fixed commit": "a2a7dcce4cf5bff089f96085cf45917112cb1092", "Url": "https://api.github.com/repos/KBarrett-Powell/Xero-Java", "Date": "2018-09-21T13:17:36Z"},
{"Line": "94=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.xero.api.XeroPayrollClient.edget(java.lang.String)=>com.xero.api.XeroPayrollClient.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2486/buggy-version/src.main.java.com.xero.api.XeroPayrollClient.java", "BodyUseAPI": [], "Fixed commit": "a2a7dcce4cf5bff089f96085cf45917112cb1092", "Url": "https://api.github.com/repos/KBarrett-Powell/Xero-Java", "Date": "2018-09-21T13:17:36Z"},
{"Line": "499=>499", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.usfirst.frc.team2655.robot.subsystem.DriveBaseSubsystem.drive(double,double)=>org.usfirst.frc.team2655.robot.subsystem.DriveBaseSubsystem.drive(double,double,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1125/buggy-version/src.main.java.org.usfirst.frc.team2655.robot.Robot.java", "BodyUseAPI": [], "Fixed commit": "76e987b89280d3775a68df85fa0af4a41689df83", "Url": "https://api.github.com/repos/FRC-Team2655/Robot2018", "Date": "2018-04-14T20:57:40Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.intellij.openapi.ui.ComboBox<java.lang.String>.addActionListener(java.awt.event.ActionListener)=>javax.swing.JComboBox<java.lang.String>.addActionListener(java.awt.event.ActionListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3550/buggy-version/src.main.java.cn.xjp.plugins.android_act_launcher.rule.AddNewRuleDialog.java", "BodyUseAPI": [], "Fixed commit": "8db3817a862963278158887e58e07197a6551e9f", "Url": "https://api.github.com/repos/xncHung/intelij_activity_launcher_plugin", "Date": "2018-10-10T18:48:15Z"},
{"Line": "69=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.intellij.openapi.ui.ComboBox<java.lang.String>.getSelectedItem()=>javax.swing.JComboBox<java.lang.String>.getSelectedItem()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3550/buggy-version/src.main.java.cn.xjp.plugins.android_act_launcher.rule.AddNewRuleDialog.java", "BodyUseAPI": [], "Fixed commit": "8db3817a862963278158887e58e07197a6551e9f", "Url": "https://api.github.com/repos/xncHung/intelij_activity_launcher_plugin", "Date": "2018-10-10T18:48:15Z"},
{"Line": "69=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cn.xjp.plugins.android_act_launcher.rule.ParamItemModel.setValueAt(java.lang.Object,int,int)=>cn.xjp.plugins.android_act_launcher.rule.ParamItemModel.setValueAt(java.lang.Object,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3550/buggy-version/src.main.java.cn.xjp.plugins.android_act_launcher.rule.AddNewRuleDialog.java", "BodyUseAPI": [], "Fixed commit": "8db3817a862963278158887e58e07197a6551e9f", "Url": "https://api.github.com/repos/xncHung/intelij_activity_launcher_plugin", "Date": "2018-10-10T18:48:15Z"},
{"Line": "37=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Scanner.hasNext()=>java.util.Scanner.hasNextLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8269/buggy-version/src.main.java.seedu.address.logic.parser.DeleteEventCommandParser.java", "BodyUseAPI": [], "Fixed commit": "564222f42b22e79a5285389321c713cd7718fc9f", "Url": "https://api.github.com/repos/CS2103JAN2018-W15-B1/main", "Date": "2018-04-04T03:02:46Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Scanner.next()=>java.lang.String.trim()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8269/buggy-version/src.main.java.seedu.address.logic.parser.DeleteEventCommandParser.java", "BodyUseAPI": [], "Fixed commit": "564222f42b22e79a5285389321c713cd7718fc9f", "Url": "https://api.github.com/repos/CS2103JAN2018-W15-B1/main", "Date": "2018-04-04T03:02:46Z"},
{"Line": "55=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "controller.Manager.removeTask(controller.ProjectView,int)=>controller.Manager.removeColumn(controller.ProjectView,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2859/buggy-version/src.controller.Manager.java", "BodyUseAPI": [], "Fixed commit": "63f190469d41df862a5ea35cafb6510ac327993e", "Url": "https://api.github.com/repos/dhananjaypahuja/ManagementBoard", "Date": "2018-05-23T01:44:39Z"},
{"Line": "459=>459", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.google.api.codegen.transformer.py.PythonSurfaceNamer.getInterfaceName(com.google.api.codegen.config.InterfaceConfig)=>com.google.api.codegen.transformer.py.PythonSurfaceNamer.getGrpcTransportClassName(com.google.api.codegen.config.InterfaceConfig)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2505/buggy-version/src.main.java.com.google.api.codegen.transformer.py.PythonSurfaceNamer.java", "BodyUseAPI": [], "Fixed commit": "124a8345597b40f8983e7eeea92fe1044efaf4fe", "Url": "https://api.github.com/repos/landrito/toolkit", "Date": "2018-06-29T22:02:34Z"},
{"Line": "459=>459", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.api.codegen.util.Name.anyCamel(getInterfaceName(interfaceConfig),java.lang.String)=>com.google.api.codegen.util.Name.anyCamel(getGrpcTransportClassName(interfaceConfig))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2505/buggy-version/src.main.java.com.google.api.codegen.transformer.py.PythonSurfaceNamer.java", "BodyUseAPI": [], "Fixed commit": "124a8345597b40f8983e7eeea92fe1044efaf4fe", "Url": "https://api.github.com/repos/landrito/toolkit", "Date": "2018-06-29T22:02:34Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.split(java.lang.String)=>java.lang.String.split(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/856/buggy-version/server.src.main.java.lsfusion.server.logics.property.actions.integration.importing.plain.csv.ImportCSVIterator.java", "BodyUseAPI": [], "Fixed commit": "19d2eff3b666e44fb8a47ad96c63077654eccf88", "Url": "https://api.github.com/repos/lsfusion/platform", "Date": "2018-10-09T12:18:58Z"},
{"Line": "389=>389", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.biorecorder.Message.getMessage()=>com.biorecorder.EdfBioRecorderApp.EdfStream.getWritingInfo()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7056/buggy-version/src.com.biorecorder.EdfBioRecorderApp.java", "BodyUseAPI": [], "Fixed commit": "6ed474b0c150decd7c6fea9ba4bd44e241123257", "Url": "https://api.github.com/repos/galafit/Ads", "Date": "2018-08-21T13:13:45Z"},
{"Line": "16=>17", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Object.onCreate(android.os.Bundle)=>android.app.Activity.onCreate(android.os.Bundle)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5123/buggy-version/app.src.main.java.com.example.gracevictoria.blackhistoryquizapp.SubActivity1.java", "BodyUseAPI": [], "Fixed commit": "0dd38bfa7671440eba08277d833ccddae65be9f1", "Url": "https://api.github.com/repos/gbrad97/BlackHistoryQuizApp", "Date": "2018-03-30T04:38:19Z"},
{"Line": "302=>300", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<java.lang.Integer>.contains(((org.apache.solr.common.SolrException) (t)).code())=>com.google.common.collect.ImmutableSet<java.lang.Integer>.contains(((org.apache.solr.common.SolrException) (t)).code())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5735/buggy-version/sdks.java.io.solr.src.main.java.org.apache.beam.sdk.io.solr.SolrIO.java", "BodyUseAPI": [], "Fixed commit": "5b306c096e81f4195739b538d67f18599628a087", "Url": "https://api.github.com/repos/ajamato/beam", "Date": "2018-05-15T08:44:43Z"},
{"Line": "388=>387", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "uk.co.senab.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)=>com.github.chrisbanes.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1948/buggy-version/src.com.owncloud.android.ui.activity.CropActivity.java", "BodyUseAPI": [], "Fixed commit": "b152f2faa77bb743ff490dbe92aeb5ae2b0d85a3", "Url": "https://api.github.com/repos/sd1998/android", "Date": "2018-03-10T09:58:14Z"},
{"Line": "164=>169", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "javax.sound.sampled.AudioSystem.getClip()=>javax.sound.sampled.AudioSystem.getLine(javax.sound.sampled.DataLine.Info)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3296/buggy-version/DangKongPiano.src.piano.Key.java", "BodyUseAPI": [], "Fixed commit": "3ffa609fffe690cb0aab82c32cf609fe1ea4db97", "Url": "https://api.github.com/repos/poopbear/Software-Practice-1", "Date": "2018-01-22T16:30:25Z"},
{"Line": "228=>225", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.util.Log.e(java.lang.String,java.lang.String)=>java.lang.Exception.printStackTrace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6981/buggy-version/App_Android.app.src.main.java.com.kjs.skywalk.app_android.Server.ImageFetchForHouse.java", "BodyUseAPI": [], "Fixed commit": "b4d3efbd09414d729dd5fc2aeb6c189d46553c1d", "Url": "https://api.github.com/repos/KennyHuangChina/Skywalk", "Date": "2018-01-13T04:08:38Z"},
{"Line": "21=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "TicTacPiece.addToBoard(TicTacBoard)=>TicTacPiece.addToBoard(TicTacBoard,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1387/buggy-version/src.TicTacGame.java", "BodyUseAPI": [], "Fixed commit": "868b1a8e2cb8e5fed2045d7ece48fae408cdeee8", "Url": "https://api.github.com/repos/michalakadam/TicTacToe_revisited", "Date": "2018-08-11T05:51:56Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "me.chong.wechat.processer.BaseProcessor.process(me.chong.wechat.dataobject.RequestEntity)=>me.chong.wechat.processer.TextProcessor.process(me.chong.wechat.dataobject.RequestEntity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8346/buggy-version/src.main.java.me.chong.wechat.service.implement.CoreServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "2b5fb9ab6d99dc5a2a9a5d76e44c4182028b1afe", "Url": "https://api.github.com/repos/LXChild/wechat", "Date": "2018-04-14T07:51:37Z"},
{"Line": "153=>153", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.replaceAll(java.lang.String,java.lang.String)=>java.lang.String.replaceFirst(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6359/buggy-version/src.inverted_index.index.java", "BodyUseAPI": [], "Fixed commit": "feeef9aef9c4d9e8635d794d0218df42b3cd0334", "Url": "https://api.github.com/repos/wyangla/toyEngine", "Date": "2018-10-18T14:17:37Z"},
{"Line": "278=>278", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.bukkit.entity.Player.getName()=>player.getUniqueId().toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3045/buggy-version/src.main.java.com.mcmylx.aacdb.data.DataManager.java", "BodyUseAPI": [], "Fixed commit": "1c6f8f11a90ed1b8bd51b5ded21cf68f005b94bb", "Url": "https://api.github.com/repos/jiangdashao/AACDataBase", "Date": "2018-06-11T14:45:14Z"},
{"Line": "207=>209", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.be3short.obj.modification.XMLParser.serializeObject(java.util.HashMap<java.lang.String, java.util.ArrayList<java.lang.reflect.Field>>)=>com.be3short.obj.modification.XMLParser.serializeObject(java.util.ArrayList<java.lang.Class<?>>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7719/buggy-version/src.main.java.com.be3short.obj.manipulation.FieldMapper.java", "BodyUseAPI": [], "Fixed commit": "5ca511bbfe1c0def661cf7a28a3a3bf435421678", "Url": "https://api.github.com/repos/be3short/ObjectTools", "Date": "2018-09-08T21:44:21Z"},
{"Line": "570=>582", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jlab.groot.graphics.GraphicsAxis.getAxisPosition(double)=>java.util.List<java.lang.Double>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5249/buggy-version/src.main.java.org.jlab.groot.graphics.GraphicsAxis.java", "BodyUseAPI": [], "Fixed commit": "c6c1ff5406fe3160911bf98058ef478edfd8931e", "Url": "https://api.github.com/repos/gavalian/groot", "Date": "2018-10-16T20:49:13Z"},
{"Line": "657=>680", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Math.log(java.lang.Double)=>java.lang.Math.log10(java.lang.Double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5249/buggy-version/src.main.java.org.jlab.groot.graphics.GraphicsAxis.java", "BodyUseAPI": [], "Fixed commit": "c6c1ff5406fe3160911bf98058ef478edfd8931e", "Url": "https://api.github.com/repos/gavalian/groot", "Date": "2018-10-16T20:49:13Z"},
{"Line": "51=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "obj.userId.equals(cn.ennwifi.webframe.ui.client.ClientContext.getContext().getUser().getId())=>obj.getUserId().equals(cn.ennwifi.webframe.ui.client.ClientContext.getContext().getUser().getId().intValue())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3278/buggy-version/src.main.java.cn.mapway.workday.ui.client.module.okr.info.TaskResultEditor.java", "BodyUseAPI": [], "Fixed commit": "9414aad9e2f20a0b655095a8b1042830bf6d1efe", "Url": "https://api.github.com/repos/zhangjianshe/workday", "Date": "2018-07-13T10:20:12Z"},
{"Line": "41=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.io.PrintStream.println(java.util.List<p08_exercises_inheritance.p05_online_radio_database.Playlist>)=>java.io.PrintStream.printf(java.lang.String,double,double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4446/buggy-version/src.p08_exercises_inheritance.p05_online_radio_database.Main.java", "BodyUseAPI": [], "Fixed commit": "42ef9bbb43be831ab076c7fe4efcb544c6c7244a", "Url": "https://api.github.com/repos/kamenkamen/Java-OOP-Basics", "Date": "2018-03-07T10:27:44Z"},
{"Line": "41=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.io.PrintStream.println(java.util.List<p08_exercises_inheritance.p05_online_radio_database.Playlist>)=>java.io.PrintStream.printf(java.lang.String,double,double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4446/buggy-version/src.p08_exercises_inheritance.p05_online_radio_database.Main.java", "BodyUseAPI": [], "Fixed commit": "42ef9bbb43be831ab076c7fe4efcb544c6c7244a", "Url": "https://api.github.com/repos/kamenkamen/Java-OOP-Basics", "Date": "2018-03-07T10:27:44Z"},
{"Line": "151=>152", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ch.tbz.wup.StringUtilities.addLineBreaks(java.lang.String,int)=>java.util.ArrayList<java.lang.String>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1153/buggy-version/src.ch.tbz.wup.Items.Phone.java", "BodyUseAPI": [], "Fixed commit": "f903b8403f9a1e9676f009063c47b90eb66500e7", "Url": "https://api.github.com/repos/Finrod-Amandil/Zork", "Date": "2018-04-19T06:59:42Z"},
{"Line": "1522=>1529", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.support.design.widget.Snackbar.make(coordinatorLayout, \"Undo Removed Order\", Snackbar.LENGTH_SHORT).setAction(java.lang.String,android.view.View.OnClickListener)=>android.support.design.widget.Snackbar.make(coordinatorLayout, \"Undo Removed Order\", Snackbar.LENGTH_SHORT).setAction(java.lang.String,android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1394/buggy-version/app.src.main.java.com.imagesoftware.anubhav.vacmet.OrderStatus.java", "BodyUseAPI": [], "Fixed commit": "dae17ed148caac37282801d903f8bae10e389b52", "Url": "https://api.github.com/repos/jay1493/vacmetOrderStatus", "Date": "2018-01-21T18:59:33Z"},
{"Line": "2350=>2357", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.util.Comparator<com.imagesoftware.anubhav.vacmet.model.OrderModel>() { @java.lang.Override public int compare(com.imagesoftware.anubhav.vacmet.model.OrderModel o1, com.imagesoftware.anubhav.vacmet.model.OrderModel o2) { if ((o1.getPartyName().compareTo(o2.getPartyName())) == 0) { if (!isDispatched) { java.lang.Long order1 = java.lang.Long.parseLong(o1.getOrderNo()); java.lang.Long order2 = java.lang.Long.parseLong(o2.getOrderNo()); return order2.compareTo(order1); }else { java.lang.Long order1 = java.lang.Long.parseLong(o1.getInvoiceNo()); java.lang.Long order2 = java.lang.Long.parseLong(o2.getInvoiceNo()); return order2.compareTo(order1); } }else { return o1.getPartyName().compareTo(o2.getPartyName()); } } }=>new java.util.Comparator<com.imagesoftware.anubhav.vacmet.model.OrderModel>() { @java.lang.Override public int compare(com.imagesoftware.anubhav.vacmet.model.OrderModel o1, com.imagesoftware.anubhav.vacmet.model.OrderModel o2) { if ((o1.getPartyName().compareTo(o2.getPartyName())) == 0) { if (!isDispatched) { java.lang.Long order1 = java.lang.Long.parseLong(o1.getOrderNo()); java.lang.Long order2 = java.lang.Long.parseLong(o2.getOrderNo()); return order2.compareTo(order1); }else { java.lang.Long order1 = java.lang.Long.parseLong(o1.getInvoiceNo()); java.lang.Long order2 = java.lang.Long.parseLong(o2.getInvoiceNo()); return order2.compareTo(order1); } }else { return o1.getPartyName().compareTo(o2.getPartyName()); } } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1394/buggy-version/app.src.main.java.com.imagesoftware.anubhav.vacmet.OrderStatus.java", "BodyUseAPI": [], "Fixed commit": "dae17ed148caac37282801d903f8bae10e389b52", "Url": "https://api.github.com/repos/jay1493/vacmetOrderStatus", "Date": "2018-01-21T18:59:33Z"},
{"Line": "2428=>2435", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new com.afollestad.materialdialogs.MaterialDialog.Builder(this).title(R.string.creating_pdf).inputType(InputType.TYPE_CLASS_NUMBER).content(R.string.enter_file_name).itemsColor(getResources().getColor(R.color.black)).theme(Theme.LIGHT).input(getString(R.string.example),<nulltype>,com.afollestad.materialdialogs.MaterialDialog.InputCallback)=>new com.afollestad.materialdialogs.MaterialDialog.Builder(this).title(R.string.creating_pdf).inputType(InputType.TYPE_CLASS_NUMBER).content(R.string.enter_file_name).itemsColor(getResources().getColor(R.color.black)).theme(Theme.LIGHT).input(getString(R.string.example),<nulltype>,com.afollestad.materialdialogs.MaterialDialog.InputCallback)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1394/buggy-version/app.src.main.java.com.imagesoftware.anubhav.vacmet.OrderStatus.java", "BodyUseAPI": [], "Fixed commit": "dae17ed148caac37282801d903f8bae10e389b52", "Url": "https://api.github.com/repos/jay1493/vacmetOrderStatus", "Date": "2018-01-21T18:59:33Z"},
{"Line": "26=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ure.ui.modals.UModalMap.drawRect((((int) ((x * (gw())) * 0.5F)) + (absoluteX())),(((int) ((y * (gh())) * 0.5F)) + (absoluteY())),((int) ((gw()) * 0.5F)),((int) ((gh()) * 0.5F)),ure.math.UColor)=>ure.ui.modals.UModalMap.drawRect(((int) ((x * (gw())) * 0.5F)),((int) ((y * (gh())) * 0.5F)),((int) ((gw()) * 0.5F)),((int) ((gh()) * 0.5F)),ure.math.UColor)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2229/buggy-version/src.main.java.ure.ui.modals.UModalMap.java", "BodyUseAPI": [], "Fixed commit": "99fba3bbce63cf1b7bddda4e8f59e5e062feabda", "Url": "https://api.github.com/repos/gilmore606/ure", "Date": "2018-08-25T23:54:58Z"},
{"Line": "244=>244", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "worldIn.getBlockState(pos).getValue(net.minecraft.block.properties.PropertyDirection)=>net.minecraft.block.state.IBlockState.getValue(net.minecraft.block.properties.PropertyDirection)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/223/buggy-version/src.main.java.com.mcmoddev.lib.block.BlockMMDPlate.java", "BodyUseAPI": [], "Fixed commit": "895ea36b4070688eaebe873750146ff866d0eae5", "Url": "https://api.github.com/repos/MinecraftModDevelopmentMods/BaseMetals", "Date": "2018-03-31T05:19:02Z"},
{"Line": "244=>244", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.minecraft.world.World.getBlockState(net.minecraft.util.math.BlockPos)=>net.minecraft.block.state.IBlockState.getValue(net.minecraft.block.properties.PropertyDirection)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/223/buggy-version/src.main.java.com.mcmoddev.lib.block.BlockMMDPlate.java", "BodyUseAPI": [], "Fixed commit": "895ea36b4070688eaebe873750146ff866d0eae5", "Url": "https://api.github.com/repos/MinecraftModDevelopmentMods/BaseMetals", "Date": "2018-03-31T05:19:02Z"},
{"Line": "86=>86", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "BlackJava.Deck.deal(BlackJava.Player)=>BlackJava.Deck.deal(BlackJava.Hand)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7444/buggy-version/src.BlackJava.BlackJava.java", "BodyUseAPI": [], "Fixed commit": "703796daa27af34066dca75a189c8d00a2e2f281", "Url": "https://api.github.com/repos/andrewsdavis/BlackJava", "Date": "2018-03-30T16:36:17Z"},
{"Line": "97=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "database.DBManager.createDB(java.sql.Statement)=>database.DBManager.createTable(java.sql.Statement)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5324/buggy-version/src.main.java.database.DBManager.java", "BodyUseAPI": [], "Fixed commit": "f3faf2271b26c434379a63b3068a81bc138eb23c", "Url": "https://api.github.com/repos/bjanos/ShadowCaster", "Date": "2018-05-11T19:42:42Z"},
{"Line": "165=>165", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.Intent.putExtra(Intent.EXTRA_SUBJECT,java.lang.String)=>android.content.Intent.putExtra(Intent.EXTRA_TEXT,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3381/buggy-version/app.src.main.java.com.pasta.mensadd.adapter.MealListAdapter.java", "BodyUseAPI": [], "Fixed commit": "6e122767a32611fe9b1347feadeed83b5d7f4043", "Url": "https://api.github.com/repos/julianctni/mensaDD", "Date": "2018-02-07T15:52:03Z"},
{"Line": "321=>323", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.System.exit(int)=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/124/buggy-version/src.main.java.com.kerberus.model.syntaxValidator.rules.sql.Cup_Rules_SQL.java", "BodyUseAPI": [], "Fixed commit": "0ff59bb71326bc96df51f0c329dd3fe5a046dc4c", "Url": "https://api.github.com/repos/adineyfs/kerberus", "Date": "2018-01-09T17:43:45Z"},
{"Line": "476=>476", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.slf4j.Logger.info(java.lang.String)=>org.slf4j.Logger.debug(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/449/buggy-version/core.egov-data-uploader.src.main.java.org.egov.dataupload.service.DataUploadService.java", "BodyUseAPI": [], "Fixed commit": "26e6ded936c5a8dc125c8fd7e934bc345e9d04a5", "Url": "https://api.github.com/repos/egovernments/egov-services", "Date": "2018-02-06T10:01:20Z"},
{"Line": "475=>475", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.slf4j.Logger.info(java.lang.String)=>org.slf4j.Logger.debug(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/449/buggy-version/core.egov-data-uploader.src.main.java.org.egov.dataupload.service.DataUploadService.java", "BodyUseAPI": [], "Fixed commit": "26e6ded936c5a8dc125c8fd7e934bc345e9d04a5", "Url": "https://api.github.com/repos/egovernments/egov-services", "Date": "2018-02-06T10:01:20Z"},
{"Line": "449=>449", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.flutter.plugin.common.MethodChannel.Result.error(java.lang.String,java.lang.String,java.lang.Throwable)=>io.flutter.plugin.common.MethodChannel.Result.error(java.lang.String,java.lang.String,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6648/buggy-version/android.src.main.java.com.polidea.flutterblelib.FlutterBleLibPlugin.java", "BodyUseAPI": [], "Fixed commit": "3a61b2006968656ebccb54c5ff46a0b3d93456d4", "Url": "https://api.github.com/repos/JamesMcIntosh/FlutterBleLib", "Date": "2018-09-26T12:52:53Z"},
{"Line": "223=>227", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "no.nordicsemi.android.dfu.SecureDfuImpl.sendInitPacket(android.bluetooth.BluetoothGatt)=>no.nordicsemi.android.dfu.SecureDfuImpl.sendInitPacket(android.bluetooth.BluetoothGatt,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5060/buggy-version/dfu.src.main.java.no.nordicsemi.android.dfu.SecureDfuImpl.java", "BodyUseAPI": [], "Fixed commit": "bd22ac4c03a094dfa5b757346ed1a3b382618287", "Url": "https://api.github.com/repos/NordicSemiconductor/Android-DFU-Library", "Date": "2018-10-17T15:50:35Z"},
{"Line": "754=>754", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Main.game.getDialogueFlags().setFlag(DialogueFlagValue.bunnyIntroduced,boolean)=>Main.game.getDialogueFlags().setFlag(DialogueFlagValue.loppyIntroduced,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6700/buggy-version/src.com.lilithsthrone.game.dialogue.places.dominion.RedLightDistrict.java", "BodyUseAPI": [], "Fixed commit": "67d48fc46b807f6041c349f8886e161889620806", "Url": "https://api.github.com/repos/CognitiveMist/liliths-throne-public", "Date": "2018-03-31T16:18:25Z"},
{"Line": "26=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.format(java.lang.String,loc.getYaw(),loc.getPitch())=>java.lang.String.format(java.util.Locale,java.lang.String,loc.getYaw(),loc.getPitch())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1175/buggy-version/src.main.java.dk.lockfuglsang.minecraft.util.LocationUtil.java", "BodyUseAPI": [], "Fixed commit": "a9c69d9dca4194d9725e98e27261a49f8397c3a0", "Url": "https://api.github.com/repos/rlf/bukkit-utils", "Date": "2018-07-13T11:10:43Z"},
{"Line": "24=>25", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.format(java.lang.String,loc.getX(),loc.getY(),loc.getZ())=>java.lang.String.format(java.util.Locale,java.lang.String,loc.getX(),loc.getY(),loc.getZ())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1175/buggy-version/src.main.java.dk.lockfuglsang.minecraft.util.LocationUtil.java", "BodyUseAPI": [], "Fixed commit": "a9c69d9dca4194d9725e98e27261a49f8397c3a0", "Url": "https://api.github.com/repos/rlf/bukkit-utils", "Date": "2018-07-13T11:10:43Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "graphql.execution.ExecutionStrategyParameters.path()=>graphql.execution.ExecutionStrategyParameters.getPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6131/buggy-version/src.main.java.graphql.execution.defer.DeferredErrorSupport.java", "BodyUseAPI": [], "Fixed commit": "5771abbc3f2379b96ef1303fc3359adb3efface5", "Url": "https://api.github.com/repos/bbakerman/graphql-java", "Date": "2018-03-23T03:10:07Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "graphql.execution.ExecutionStrategyParameters.field()=>graphql.execution.ExecutionStrategyParameters.getField()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6131/buggy-version/src.main.java.graphql.execution.defer.DeferredErrorSupport.java", "BodyUseAPI": [], "Fixed commit": "5771abbc3f2379b96ef1303fc3359adb3efface5", "Url": "https://api.github.com/repos/bbakerman/graphql-java", "Date": "2018-03-23T03:10:07Z"},
{"Line": "50=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.reflect.Type.getActualTypeArguments()=>java.lang.reflect.Type.getActualTypeArguments()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6571/buggy-version/iron-core.src.main.java.io.axway.iron.core.internal.StoreManagerFactoryBuilderConfigurator.java", "BodyUseAPI": [], "Fixed commit": "2a15542206e53bc404a9efc43b67965777fb0729", "Url": "https://api.github.com/repos/smendez-axway/iron", "Date": "2018-03-26T08:41:43Z"},
{"Line": "447=>447", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.executequery.gui.text.TextUndoManager.setLimit(userProperties().getIntProperty(\"editor.undo.count\"))=>org.executequery.gui.text.SimpleTextUndoManager.setLimit(userProperties().getIntProperty(\"editor.undo.count\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/785/buggy-version/src.org.executequery.gui.editor.QueryEditorTextPane.java", "BodyUseAPI": [], "Fixed commit": "e451973854aff46e90e79c447ee1820a1cd78f84", "Url": "https://api.github.com/repos/takisd123/executequery", "Date": "2018-01-20T14:12:49Z"},
{"Line": "541=>541", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.executequery.gui.text.TextUndoManager.discardAllEdits()=>org.executequery.gui.text.SimpleTextUndoManager.discardAllEdits()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/785/buggy-version/src.org.executequery.gui.editor.QueryEditorTextPane.java", "BodyUseAPI": [], "Fixed commit": "e451973854aff46e90e79c447ee1820a1cd78f84", "Url": "https://api.github.com/repos/takisd123/executequery", "Date": "2018-01-20T14:12:49Z"},
{"Line": "1216=>1224", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.executequery.gui.text.TextUndoManager.canUndo()=>org.executequery.gui.text.SimpleTextUndoManager.undo()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/785/buggy-version/src.org.executequery.gui.editor.QueryEditorTextPane.java", "BodyUseAPI": [], "Fixed commit": "e451973854aff46e90e79c447ee1820a1cd78f84", "Url": "https://api.github.com/repos/takisd123/executequery", "Date": "2018-01-20T14:12:49Z"},
{"Line": "1223=>1232", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.executequery.gui.text.TextUndoManager.undo()=>org.executequery.gui.text.SimpleTextUndoManager.redo()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/785/buggy-version/src.org.executequery.gui.editor.QueryEditorTextPane.java", "BodyUseAPI": [], "Fixed commit": "e451973854aff46e90e79c447ee1820a1cd78f84", "Url": "https://api.github.com/repos/takisd123/executequery", "Date": "2018-01-20T14:12:49Z"},
{"Line": "1231=>1217", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.executequery.gui.text.TextUndoManager.redo()=>org.executequery.gui.text.SimpleTextUndoManager.canUndo()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/785/buggy-version/src.org.executequery.gui.editor.QueryEditorTextPane.java", "BodyUseAPI": [], "Fixed commit": "e451973854aff46e90e79c447ee1820a1cd78f84", "Url": "https://api.github.com/repos/takisd123/executequery", "Date": "2018-01-20T14:12:49Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "x.compute().apply(me.mneri.lambda.\u03bb)=>me.mneri.lambda.\u03bb.apply(me.mneri.lambda.\u03bb)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6631/buggy-version/src.main.java.me.mneri.lambda.Redex.java", "BodyUseAPI": [], "Fixed commit": "9788e318f06511bbbf57aa545cfb4b75acb61807", "Url": "https://api.github.com/repos/mneri/lambda", "Date": "2018-08-15T14:10:06Z"},
{"Line": "90=>92", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.text.SimpleDateFormat.format(java.util.Date)=>java.util.Calendar.getTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8468/buggy-version/app.src.main.java.org.andoidtown.ai_vocabulary.add_word_component.AddWordGruopActivity.java", "BodyUseAPI": [], "Fixed commit": "d16f6afe0ea89c9f31ae883afc60ba97242292d3", "Url": "https://api.github.com/repos/Diocto/AI-Vocabulary-app", "Date": "2018-09-04T12:12:06Z"},
{"Line": "729=>729", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.coveros.selenified.element.WebElement.sendKeys(java.lang.String)=>com.coveros.selenified.element.WebElement.sendKeys(Keys.TAB)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4816/buggy-version/src.main.java.com.coveros.selenified.element.Element.java", "BodyUseAPI": [], "Fixed commit": "4f8759249425537e6c936f78a7e18542f73ea26d", "Url": "https://api.github.com/repos/Coveros/selenified", "Date": "2018-02-22T18:58:28Z"},
{"Line": "49=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "optionPane.getScene().getStylesheets().remove(java.lang.String)=>optionPane.getScene().getStylesheets().clear()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7643/buggy-version/src.main.java.fr.polytech.teamc.OptionController.java", "BodyUseAPI": [], "Fixed commit": "095a34a998b2fe9c776dd11389786b230c751b86", "Url": "https://api.github.com/repos/FlorianJuroszek/pincidents", "Date": "2018-02-25T18:34:19Z"},
{"Line": "40=>41", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "optionPane.getScene().getStylesheets().remove(java.lang.String)=>optionPane.getScene().getStylesheets().clear()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7643/buggy-version/src.main.java.fr.polytech.teamc.OptionController.java", "BodyUseAPI": [], "Fixed commit": "095a34a998b2fe9c776dd11389786b230c751b86", "Url": "https://api.github.com/repos/FlorianJuroszek/pincidents", "Date": "2018-02-25T18:34:19Z"},
{"Line": "136=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new org.matsim.facilities.FacilitiesReaderMatsimV1(coordinateTransformation, scenario)=>new org.matsim.facilities.FacilitiesReaderMatsimV1(externalInputCRS, targetCRS, scenario)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1041/buggy-version/matsim.src.main.java.org.matsim.facilities.MatsimFacilitiesReader.java", "BodyUseAPI": [], "Fixed commit": "db991f96eb586e659e71354a4f9111dea6878734", "Url": "https://api.github.com/repos/matsim-org/matsim", "Date": "2018-08-28T14:05:24Z"},
{"Line": "99=>99", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.thoughtworks.jingximail.controller.Order.getProducts()=>com.thoughtworks.jingximail.controller.Order.getPurchaseItemList()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4861/buggy-version/src.main.java.com.thoughtworks.jingximail.controller.OrderController.java", "BodyUseAPI": [], "Fixed commit": "30e305145494b1a2902c28be5e11a5a9dd4dc7b9", "Url": "https://api.github.com/repos/J3n5en/tw-school-week9", "Date": "2018-05-20T04:29:23Z"},
{"Line": "65=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.thoughtworks.jingximail.controller.Order.setProducts(java.util.List<com.thoughtworks.jingximail.controller.ProductSnap>)=>com.thoughtworks.jingximail.controller.Order.setPurchaseItemList(java.util.List<com.thoughtworks.jingximail.controller.ProductSnap>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4861/buggy-version/src.main.java.com.thoughtworks.jingximail.controller.OrderController.java", "BodyUseAPI": [], "Fixed commit": "30e305145494b1a2902c28be5e11a5a9dd4dc7b9", "Url": "https://api.github.com/repos/J3n5en/tw-school-week9", "Date": "2018-05-20T04:29:23Z"},
{"Line": "150=>148", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.apache.camel.spi.TypeConverterRegistry.lookup(java.lang.Class,java.lang.Class<?>)=>org.apache.camel.spi.TypeConverterRegistry.lookup(java.lang.Class,wf.getFile().getClass())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/420/buggy-version/components.camel-jclouds.src.main.java.org.apache.camel.component.jclouds.JcloudsPayloadConverter.java", "BodyUseAPI": [], "Fixed commit": "674ffcf612d3a7e50dd3cfcd1b72aec2b2d859b4", "Url": "https://api.github.com/repos/apache/camel", "Date": "2018-03-28T14:03:39Z"},
{"Line": "150=>148", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.camel.spi.TypeConverterRegistry.lookup(java.lang.Class,java.lang.Class<?>)=>org.apache.camel.WrappedFile.getFile()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/420/buggy-version/components.camel-jclouds.src.main.java.org.apache.camel.component.jclouds.JcloudsPayloadConverter.java", "BodyUseAPI": [], "Fixed commit": "674ffcf612d3a7e50dd3cfcd1b72aec2b2d859b4", "Url": "https://api.github.com/repos/apache/camel", "Date": "2018-03-28T14:03:39Z"},
{"Line": "152=>150", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.camel.component.file.GenericFile<?>.getFile()=>org.apache.camel.WrappedFile.getFile()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/420/buggy-version/components.camel-jclouds.src.main.java.org.apache.camel.component.jclouds.JcloudsPayloadConverter.java", "BodyUseAPI": [], "Fixed commit": "674ffcf612d3a7e50dd3cfcd1b72aec2b2d859b4", "Url": "https://api.github.com/repos/apache/camel", "Date": "2018-03-28T14:03:39Z"},
{"Line": "152=>150", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.apache.camel.TypeConverter.convertTo(java.lang.Class,genericFile.getFile())=>org.apache.camel.TypeConverter.tryConvertTo(java.lang.Class,wf.getFile())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/420/buggy-version/components.camel-jclouds.src.main.java.org.apache.camel.component.jclouds.JcloudsPayloadConverter.java", "BodyUseAPI": [], "Fixed commit": "674ffcf612d3a7e50dd3cfcd1b72aec2b2d859b4", "Url": "https://api.github.com/repos/apache/camel", "Date": "2018-03-28T14:03:39Z"},
{"Line": "160=>160", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.ListView.setVisibility(View.GONE)=>android.widget.ListView.setVisibility(View.INVISIBLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6715/buggy-version/workpage.app.src.main.java.jajimenez.workpage.DateTaskListFragment.java", "BodyUseAPI": [], "Fixed commit": "8fb4add1e91f80b50a6be048f04121620e12b4c8", "Url": "https://api.github.com/repos/jajimenez/workpage", "Date": "2018-01-10T20:33:41Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Map<java.lang.String, java.math.BigDecimal>.put(java.lang.String,int)=>java.util.Map<java.lang.String, java.math.BigDecimal>.put(java.lang.String,java.math.BigDecimal)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/194/buggy-version/intense-intents.src.main.java.pantrytracker.util.DynamoUtil.java", "BodyUseAPI": [], "Fixed commit": "172e35c3f52aca01943837d10d876d1b9044ed33", "Url": "https://api.github.com/repos/redreadergirl/IntenseIntents", "Date": "2018-07-26T21:30:30Z"},
{"Line": "118=>118", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "sonata.kernel.vimadaptor.wrapper.WimWrapper.getConfig()=>sonata.kernel.vimadaptor.wrapper.WimWrapper.getWimConfig()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7431/buggy-version/vim-nbi.adaptor.src.main.java.sonata.kernel.vimadaptor.ConfigureWimCallProcessor.java", "BodyUseAPI": [], "Fixed commit": "33f53d1a5497a132c69e3368da25a9b394ea604d", "Url": "https://api.github.com/repos/carlos-martins-marques/son-sp-infrabstract", "Date": "2018-09-05T16:08:13Z"},
{"Line": "122=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "sonata.kernel.vimadaptor.wrapper.WimWrapper.getConfig()=>sonata.kernel.vimadaptor.wrapper.WimWrapper.getWimConfig()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7431/buggy-version/vim-nbi.adaptor.src.main.java.sonata.kernel.vimadaptor.ConfigureWimCallProcessor.java", "BodyUseAPI": [], "Fixed commit": "33f53d1a5497a132c69e3368da25a9b394ea604d", "Url": "https://api.github.com/repos/carlos-martins-marques/son-sp-infrabstract", "Date": "2018-09-05T16:08:13Z"},
{"Line": "117=>117", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "sonata.kernel.vimadaptor.wrapper.WimWrapper.getConfig()=>sonata.kernel.vimadaptor.wrapper.WimWrapper.getWimConfig()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7431/buggy-version/vim-nbi.adaptor.src.main.java.sonata.kernel.vimadaptor.ConfigureWimCallProcessor.java", "BodyUseAPI": [], "Fixed commit": "33f53d1a5497a132c69e3368da25a9b394ea604d", "Url": "https://api.github.com/repos/carlos-martins-marques/son-sp-infrabstract", "Date": "2018-09-05T16:08:13Z"},
{"Line": "49=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ru.kpfu.itis.dmitryivanov.repository.TripRepository.findAllByName(java.lang.String)=>ru.kpfu.itis.dmitryivanov.repository.TripRepository.findAllByNameLikeIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8096/buggy-version/src.main.java.ru.kpfu.itis.dmitryivanov.service.impl.TripServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "596ed8b9f95fd6312bb95059c06e4fd660dde5c8", "Url": "https://api.github.com/repos/Flexuss/TeamTravel", "Date": "2018-05-23T10:50:04Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ru.kpfu.itis.dmitryivanov.repository.UserRepository.findAllByUsernameLike(java.lang.String)=>ru.kpfu.itis.dmitryivanov.repository.UserRepository.findAllByUsernameLikeIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8096/buggy-version/src.main.java.ru.kpfu.itis.dmitryivanov.service.impl.UserServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "596ed8b9f95fd6312bb95059c06e4fd660dde5c8", "Url": "https://api.github.com/repos/Flexuss/TeamTravel", "Date": "2018-05-23T10:50:04Z"},
{"Line": "190=>190", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ru.kpfu.itis.dmitryivanov.requests.ChangeUserRequestJson.getCountry()=>ru.kpfu.itis.dmitryivanov.requests.ChangeUserRequestJson.getInterests()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8096/buggy-version/src.main.java.ru.kpfu.itis.dmitryivanov.controller.UserController.java", "BodyUseAPI": [], "Fixed commit": "596ed8b9f95fd6312bb95059c06e4fd660dde5c8", "Url": "https://api.github.com/repos/Flexuss/TeamTravel", "Date": "2018-05-23T10:50:04Z"},
{"Line": "104=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.concurrent.locks.Lock.tryLock(long,java.util.concurrent.TimeUnit)=>java.util.concurrent.locks.ReentrantLock.tryLock(long,java.util.concurrent.TimeUnit)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6972/buggy-version/src.main.java.org.apache.ibatis.cache.decorators.BlockingCache.java", "BodyUseAPI": [], "Fixed commit": "261d212814c7dd5adc141b9f766ab19def47bedd", "Url": "https://api.github.com/repos/kezhenxu94/mybatis-3", "Date": "2018-09-17T15:41:24Z"},
{"Line": "112=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.concurrent.locks.Lock.lock()=>java.util.concurrent.locks.ReentrantLock.lock()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6972/buggy-version/src.main.java.org.apache.ibatis.cache.decorators.BlockingCache.java", "BodyUseAPI": [], "Fixed commit": "261d212814c7dd5adc141b9f766ab19def47bedd", "Url": "https://api.github.com/repos/kezhenxu94/mybatis-3", "Date": "2018-09-17T15:41:24Z"},
{"Line": "190=>190", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.mahmoud.movieapp.MovieDetail.Presenter.DetailPresenter.getTrailers()=>com.example.mahmoud.movieapp.MovieDetail.Presenter.DetailPresenter.getTrailers(com.example.mahmoud.movieapp.MovieDetail.Adapters.TrailerAdapter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/4112/buggy-version/app.src.main.java.com.example.mahmoud.movieapp.MovieDetail.View.DetailFragment.java", "BodyUseAPI": [], "Fixed commit": "8905ea1e935fb3e641518e1c9f177c71a59216cb", "Url": "https://api.github.com/repos/MahmoudKaito97/MovieAppMVP", "Date": "2018-07-29T22:15:42Z"},
{"Line": "79=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.Intent.putExtra(Intent.EXTRA_SUBJECT,java.lang.String)=>android.content.Intent.putExtra(Intent.EXTRA_TEXT,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1523/buggy-version/android.src.de.android.ayrathairullin.rover.AndroidLauncher.java", "BodyUseAPI": [], "Fixed commit": "9c5560228d96bd53ae8386d2c20594c6bac7d83f", "Url": "https://api.github.com/repos/AIRAT1/Rover", "Date": "2018-02-15T16:48:21Z"},
{"Line": "39=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Woo.startGame()=>cs1.Keyboard.readInt()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6475/buggy-version/Woo.java", "BodyUseAPI": [], "Fixed commit": "a3e787ee0d58cba026a7c3038b646e8a72e9b0b3", "Url": "https://api.github.com/repos/Adamost1/Neon-Unicorns", "Date": "2018-01-08T13:40:33Z"},
{"Line": "42=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(int)=>Woo.playerInput(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6475/buggy-version/Woo.java", "BodyUseAPI": [], "Fixed commit": "a3e787ee0d58cba026a7c3038b646e8a72e9b0b3", "Url": "https://api.github.com/repos/Adamost1/Neon-Unicorns", "Date": "2018-01-08T13:40:33Z"},
{"Line": "733=>733", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new DXFReader.DXFViewer(args[0], 14.0, 0)=>new DXFReader.DXFViewer(args[0], 14.0, 12.0)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2826/buggy-version/src.DXFReader.java", "BodyUseAPI": [], "Fixed commit": "212060e68eb3b7bd167f430f26119bccea16cc1b", "Url": "https://api.github.com/repos/wholder/DXFReader", "Date": "2018-02-28T01:06:52Z"},
{"Line": "101=>101", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "this.worldProvider.getClass().getDeclaredField(java.lang.String)=>this.worldProvider.getClass().getSuperclass()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6406/buggy-version/v1_12_R1.src.main.java.com.minefit.xerxestireiron.tallnether.v1_12_R1.LoadHell.java", "BodyUseAPI": [], "Fixed commit": "82da7129994c03e1e6ad1ab015bf1eb949ad6021", "Url": "https://api.github.com/repos/OtakuMegane/TallNether", "Date": "2018-08-07T21:31:24Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.format(java.lang.String,Control.speed)=>java.lang.String.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5483/buggy-version/writeShapes.src.com.jetbrains.Rectangle.java", "BodyUseAPI": [], "Fixed commit": "47d575429ac55c2459d692298b7f73929a3de2e4", "Url": "https://api.github.com/repos/arhode2/writeShapes", "Date": "2018-06-15T23:20:46Z"},
{"Line": "91=>90", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.replaceAll(java.lang.String,java.lang.String)=>org.assertj.core.util.Strings.escapePercentExceptWhenFollowedBy_n(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5991/buggy-version/src.main.java.org.assertj.core.util.Strings.java", "BodyUseAPI": [], "Fixed commit": "3488096077e1861e02eda41f6fcd343e26dc85ff", "Url": "https://api.github.com/repos/joel-costigliola/assertj-core", "Date": "2018-03-30T08:40:02Z"},
{"Line": "915=>917", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.cytoscape.model.CyNetworkManager.getNetworkSet()=>_adapter.getCyServiceRegistrar().getService(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5701/buggy-version/src.main.java.com.dpgil.pathlinker.path_linker.internal.PathLinkerControlPanel.java", "BodyUseAPI": [], "Fixed commit": "301c94d48f43e83f6e7b5cb40562ae4954e65bef", "Url": "https://api.github.com/repos/Murali-group/PathLinker-Cytoscape", "Date": "2017-12-05T03:32:47Z"},
{"Line": "917=>917", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.cytoscape.app.CyAppAdapter.getTaskManager()=>org.cytoscape.app.CyAppAdapter.getCyServiceRegistrar()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5701/buggy-version/src.main.java.com.dpgil.pathlinker.path_linker.internal.PathLinkerControlPanel.java", "BodyUseAPI": [], "Fixed commit": "301c94d48f43e83f6e7b5cb40562ae4954e65bef", "Url": "https://api.github.com/repos/Murali-group/PathLinker-Cytoscape", "Date": "2017-12-05T03:32:47Z"},
{"Line": "917=>918", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "_adapter.getTaskManager().execute(org.cytoscape.work.TaskIterator)=>org.cytoscape.work.SynchronousTaskManager<?>.execute(org.cytoscape.work.TaskIterator)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5701/buggy-version/src.main.java.com.dpgil.pathlinker.path_linker.internal.PathLinkerControlPanel.java", "BodyUseAPI": [], "Fixed commit": "301c94d48f43e83f6e7b5cb40562ae4954e65bef", "Url": "https://api.github.com/repos/Murali-group/PathLinker-Cytoscape", "Date": "2017-12-05T03:32:47Z"},
{"Line": "915=>917", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.dpgil.pathlinker.path_linker.internal.PathLinkerControlPanel._networkManager.getNetworkSet().size()=>_adapter.getCyServiceRegistrar().getService(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5701/buggy-version/src.main.java.com.dpgil.pathlinker.path_linker.internal.PathLinkerControlPanel.java", "BodyUseAPI": [], "Fixed commit": "301c94d48f43e83f6e7b5cb40562ae4954e65bef", "Url": "https://api.github.com/repos/Murali-group/PathLinker-Cytoscape", "Date": "2017-12-05T03:32:47Z"},
{"Line": "63=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "sql.SqlConnect.SQLInsertActionLog(java.lang.String,long,(((\"the user \" + user_name) + \" has been banned from \") + (e.getGuild().getName())))=>sql.SqlConnect.SQLInsertActionLog(java.lang.String,long,long,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7912/buggy-version/src.listeners.BanListener.java", "BodyUseAPI": [], "Fixed commit": "fa9f66918539d10e5f5b1afbe393ecf34a2231b8", "Url": "https://api.github.com/repos/xHelixStorm/Azrael", "Date": "2018-07-22T20:29:42Z"},
{"Line": "61=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.storage.Product.getName()=>seedu.address.model.product.Product.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3934/buggy-version/src.main.java.seedu.address.storage.XmlAdaptedProduct.java", "BodyUseAPI": [], "Fixed commit": "0eb8e6e42763a0653b0ca351b10dffdba42fc832", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-23T07:30:22Z"},
{"Line": "108=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.storage.Address.isValidAddress(java.lang.String)=>seedu.address.model.product.Address.isValidAddress(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3934/buggy-version/src.main.java.seedu.address.storage.XmlAdaptedProduct.java", "BodyUseAPI": [], "Fixed commit": "0eb8e6e42763a0653b0ca351b10dffdba42fc832", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-23T07:30:22Z"},
{"Line": "62=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.storage.Product.getSerialNumber()=>seedu.address.model.product.Product.getSerialNumber()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3934/buggy-version/src.main.java.seedu.address.storage.XmlAdaptedProduct.java", "BodyUseAPI": [], "Fixed commit": "0eb8e6e42763a0653b0ca351b10dffdba42fc832", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-23T07:30:22Z"},
{"Line": "84=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.storage.Name.isValidName(java.lang.String)=>seedu.address.model.product.Name.isValidName(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3934/buggy-version/src.main.java.seedu.address.storage.XmlAdaptedProduct.java", "BodyUseAPI": [], "Fixed commit": "0eb8e6e42763a0653b0ca351b10dffdba42fc832", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-23T07:30:22Z"},
{"Line": "63=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.storage.Product.getDistributor()=>seedu.address.model.product.Product.getDistributor()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3934/buggy-version/src.main.java.seedu.address.storage.XmlAdaptedProduct.java", "BodyUseAPI": [], "Fixed commit": "0eb8e6e42763a0653b0ca351b10dffdba42fc832", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-23T07:30:22Z"},
{"Line": "64=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.storage.Product.getProductInfo()=>seedu.address.model.product.Product.getProductInfo()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3934/buggy-version/src.main.java.seedu.address.storage.XmlAdaptedProduct.java", "BodyUseAPI": [], "Fixed commit": "0eb8e6e42763a0653b0ca351b10dffdba42fc832", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-23T07:30:22Z"},
{"Line": "65=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.storage.Product.getTags()=>seedu.address.model.product.Product.getTags()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3934/buggy-version/src.main.java.seedu.address.storage.XmlAdaptedProduct.java", "BodyUseAPI": [], "Fixed commit": "0eb8e6e42763a0653b0ca351b10dffdba42fc832", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-23T07:30:22Z"},
{"Line": "141=>154", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.RandomAccessFile.read(byte[])=>java.io.FileInputStream.read(byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7691/buggy-version/Chunklevel.Upload.java", "BodyUseAPI": [], "Fixed commit": "247f7e80fdf58a88bcd55662273a64d9ff9f467d", "Url": "https://api.github.com/repos/sridharan99/Cloud-Deduplication", "Date": "2018-03-13T08:53:19Z"},
{"Line": "144=>157", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.RandomAccessFile.close()=>java.io.FileInputStream.close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7691/buggy-version/Chunklevel.Upload.java", "BodyUseAPI": [], "Fixed commit": "247f7e80fdf58a88bcd55662273a64d9ff9f467d", "Url": "https://api.github.com/repos/sridharan99/Cloud-Deduplication", "Date": "2018-03-13T08:53:19Z"},
{"Line": "182=>185", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.replaceFirst(java.lang.String,java.lang.String)=>java.time.LocalDateTime.of(java.time.LocalDate,java.time.LocalTime)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/906/buggy-version/src.main.java.pivot_table_sort_of.pivot_table.PivotDataApp.java", "BodyUseAPI": [], "Fixed commit": "7190edd08f6dd63ab9be1960ac388b4c2935d21f", "Url": "https://api.github.com/repos/chrisxkeith/pivot-table-sort-of", "Date": "2018-04-22T20:48:27Z"},
{"Line": "100=>101", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.replaceFirst(java.lang.String,java.lang.String)=>org.apache.commons.lang3.StringUtils.replaceOnce(java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/812/buggy-version/nuxeo-jsf.nuxeo-platform-ui-web.src.main.java.org.nuxeo.ecm.platform.ui.web.rest.FancyNavigationHandler.java", "BodyUseAPI": [], "Fixed commit": "0ae8f7acfd3d8d7b194192451ee74a7f2978186b", "Url": "https://api.github.com/repos/nuxeo/nuxeo", "Date": "2018-08-06T13:44:52Z"},
{"Line": "201=>201", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "simpledb.BufferPool.getPage(simpledb.TransactionId,simpledb.HeapPageId,Permissions.READ_WRITE)=>simpledb.HeapPage.insertTuple(simpledb.Tuple)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/459/buggy-version/src.java.simpledb.HeapFile.java", "BodyUseAPI": [], "Fixed commit": "464ff069cc429d5f20dd55afab488cb9991e3f6c", "Url": "https://api.github.com/repos/Lincong/simple-DB", "Date": "2018-02-14T06:15:50Z"},
{"Line": "113=>113", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.github.dimanolog.flickr.dataservice.PhotoDataService.getRecent()=>com.github.dimanolog.flickr.dataservice.PhotoDataService.addRecentAndGetCursor(mResponse.getResult())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7305/buggy-version/app.src.main.java.com.github.dimanolog.flickr.datamanagers.PhotoDataManager.java", "BodyUseAPI": [], "Fixed commit": "a2f2a42fbc1c125979f83dccc17d9c4dd7bada09", "Url": "https://api.github.com/repos/Dimanolog/Flickr", "Date": "2018-02-01T08:27:01Z"},
{"Line": "677=>677", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.firstinspires.ftc.teamcode.DragonoidsAuto.releaseGlyph()=>org.firstinspires.ftc.teamcode.DragonoidsAuto.lowerGlyph()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/589/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.DragonoidsAuto.java", "BodyUseAPI": [], "Fixed commit": "5350018a89e5facc9a68360a189fb26d17c01fdd", "Url": "https://api.github.com/repos/GFA-Robotics/Dragonoids-Android-3.4", "Date": "2018-02-12T23:05:57Z"},
{"Line": "212=>214", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.android.bookstore.CatalogActivity.displayQuantity(int)=>android.widget.TextView.setText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6582/buggy-version/app.src.main.java.com.example.android.bookstore.CatalogActivity.java", "BodyUseAPI": [], "Fixed commit": "843332c8901debbb5906215bf7daca1dbb20d0c0", "Url": "https://api.github.com/repos/juliecodes/Bookstore-App", "Date": "2018-09-01T21:15:07Z"},
{"Line": "35=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.sun.jersey.guice.JerseyServletModule.configureServlets()=>bind(org.eclipse.jetty.server.Connector.class).toInstance(org.eclipse.jetty.server.ServerConnector)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1091/buggy-version/server.src.main.java.org.schemarepo.config.ServerModule.java", "BodyUseAPI": [], "Fixed commit": "be407edae74fd31861ac1c68f6634d42bbb2555b", "Url": "https://api.github.com/repos/chekore/schema-repo", "Date": "2018-09-21T07:11:21Z"},
{"Line": "201=>201", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<Individual>.get(int)=>java.util.List<Individual>.get(((sortedPop.size()) - 1))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6668/buggy-version/assignmentfiles_2017.code.Population.java", "BodyUseAPI": [], "Fixed commit": "11a7abd7169bbe365366bdc8ce2cda3bfcc2ab67", "Url": "https://api.github.com/repos/oranguh/evo_comp_2018", "Date": "2018-10-06T18:19:27Z"},
{"Line": "117=>117", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Math.toRadians(double)=>java.lang.Math.toDegrees(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/6399/buggy-version/src.org.usfirst.frc.team1504.robot.Autonomous.java", "BodyUseAPI": [], "Fixed commit": "b43658d019cb3d6c053e06133b8ccce4e4fdcff7", "Url": "https://api.github.com/repos/1504/Robot_Framework", "Date": "2018-02-09T00:43:17Z"},
{"Line": "48=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.lang3.StringUtils.join(com.checkmarx.cxconsole.commands.constants.Commands[],java.lang.String)=>Commands.SCAN.value()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/8361/buggy-version/cli.src.main.java.com.checkmarx.cxconsole.commands.CommandFactory.java", "BodyUseAPI": [], "Fixed commit": "af2fef6aa37f5135f9f10f9ea0f4c7d9b3702a3a", "Url": "https://api.github.com/repos/CxRepositories/CLI", "Date": "2018-04-18T09:22:58Z"},
{"Line": "87=>87", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.format(java.lang.String,table.getName())=>java.lang.String.format(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5829/buggy-version/src.main.java.com.github.polimi_mt_acg.back2school.utils.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "ecc02de99aeee2887572b0a0423960fffc6d671c", "Url": "https://api.github.com/repos/polimi-mt-acg/back2school", "Date": "2018-03-27T13:40:12Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.promineotech.PromineoFinal.entity.Question.setQuestionData(question.getAnswerData())=>com.promineotech.PromineoFinal.entity.Question.setAnswerData(question.getAnswerData())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/1052/buggy-version/src.main.java.com.promineotech.PromineoFinal.service.QuestionsService.java", "BodyUseAPI": [], "Fixed commit": "55d09bd502a7d24956f73463b03411d235110c23", "Url": "https://api.github.com/repos/AstroEL/PromineoFinal", "Date": "2018-10-19T23:13:14Z"},
{"Line": "43=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class.getResource(java.lang.String)=>java.io.File.toURI()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/96/buggy-version/src.seedu.addressbook.ui.Gui.java", "BodyUseAPI": [], "Fixed commit": "3013a101bd9bcab1b4c38c1e9722437c7be0e8e9", "Url": "https://api.github.com/repos/JunWei96/addressbook-level3", "Date": "2018-08-29T06:30:40Z"},
{"Line": "448=>448", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.bladecoder.engineeditor.model.Project.saveGradleProperties(java.util.Properties)=>com.bladecoder.engineeditor.model.Project.saveGradleProperties(java.util.Properties,java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3058/buggy-version/adventure-editor.src.main.java.com.bladecoder.engineeditor.model.Project.java", "BodyUseAPI": [], "Fixed commit": "22738d1bf2874463e13f7421db87a1fa651ab18a", "Url": "https://api.github.com/repos/bladecoder/bladecoder-adventure-engine", "Date": "2018-07-27T11:51:31Z"},
{"Line": "26=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Set<java.lang.String>.addAll(java.util.Set<java.lang.String>)=>java.util.Set<java.lang.String>.stream()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2327/buggy-version/src.main.java.org.sharpsw.service.KeywordsSearchMkI.java", "BodyUseAPI": [], "Fixed commit": "dbee8d8f3caa649fe91a4ed1d42df34e0b14287d", "Url": "https://api.github.com/repos/andersonkmi/keywords-movie-search", "Date": "2018-02-04T14:52:46Z"},
{"Line": "471=>471", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.StringBuilder.append(java.lang.String)=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7591/buggy-version/v3.1.src.main.java.in.dream_lab.goffish.godb.pathDistrSuccinctArrayStructure12Implicit.java", "BodyUseAPI": [], "Fixed commit": "ecfcdea6316c176578fcf0b9c93d5d5684cb3477", "Url": "https://api.github.com/repos/abhilashsharma/Hama-GoDB-Refactored", "Date": "2018-01-04T06:23:12Z"},
{"Line": "471=>471", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Long.intValue()=>java.lang.StringBuilder.append(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/7591/buggy-version/v3.1.src.main.java.in.dream_lab.goffish.godb.pathDistrSuccinctArrayStructure12Implicit.java", "BodyUseAPI": [], "Fixed commit": "ecfcdea6316c176578fcf0b9c93d5d5684cb3477", "Url": "https://api.github.com/repos/abhilashsharma/Hama-GoDB-Refactored", "Date": "2018-01-04T06:23:12Z"},
{"Line": "261=>265", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "jenkins.model.Jenkins.getVersion().isOlderThan(hudson.util.VersionNumber)=>hudson.util.VersionNumber.isOlderThan(hudson.util.VersionNumber)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/2304/buggy-version/src.main.java.com.synopsys.arc.jenkinsci.plugins.dynamic_search.views.SimpleSearchView.java", "BodyUseAPI": [], "Fixed commit": "9ec06ed7823076e3db4df9370628c254dc0e9539", "Url": "https://api.github.com/repos/jenkinsci/dynamic-search-view-plugin", "Date": "2018-02-22T13:47:58Z"},
{"Line": "124=>124", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.slf4j.Logger.debug(java.lang.String,getSessionState(),newState.name())=>org.slf4j.Logger.error(java.lang.String,getSessionState(),newState.name())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/3132/buggy-version/redis.redis-proxy.src.main.java.com.ctrip.xpipe.redis.proxy.session.AbstractSession.java", "BodyUseAPI": [], "Fixed commit": "7d63ef0da618cfdf142a9c091e3f005b77b7c308", "Url": "https://api.github.com/repos/ctripcorp/x-pipe", "Date": "2018-07-06T09:47:54Z"},
{"Line": "86=>85", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "networking.ServerCommunication.handleIncomingFile(java.lang.String)=>networking.ServerCommunication.handleIncomingFile(java.lang.String,networkMessage.getMessageId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V167/5215/buggy-version/src.networking.ServerCommunication.java", "BodyUseAPI": [], "Fixed commit": "7264d200189124069112bd2ff0b18524e22bd900", "Url": "https://api.github.com/repos/itstepbg/MessagingServer", "Date": "2018-08-06T08:00:08Z"},
{"Line": "41=>40", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.sunbird.common.models.util.ProjectLogger.log(((\"SunbirdTelemetryEventConsumer:onEvent Exception occured during telemetry data processing. \" + \" Data==\") + (new com.google.gson.Gson().toJson(getEkstepTelemetryRequest(request)))),java.lang.Exception)=>org.sunbird.common.models.util.ProjectLogger.log(java.lang.String,java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8530/buggy-version/actors.telemetry-core.src.main.java.org.sunbird.util.lmaxdisruptor.SunbirdTelemetryEventConsumer.java", "BodyUseAPI": [], "Fixed commit": "c08bd70bd58a0cd5177ad1e085b3dc49e35a98c4", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-05-29T12:26:44Z"},
{"Line": "40=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getUI().get().navigateTo(java.lang.String)=>getUI().get().navigate(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2232/buggy-version/src.main.java.com.vaadin.flow.tutorial.spring.Scopes.java", "BodyUseAPI": [], "Fixed commit": "439538187616ff5d7bffadfe6782764294181de7", "Url": "https://api.github.com/repos/vaadin/flow-and-components-documentation", "Date": "2018-02-28T15:16:20Z"},
{"Line": "60=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getUI().get().navigateTo(java.lang.String)=>getUI().get().navigate(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2232/buggy-version/src.main.java.com.vaadin.flow.tutorial.spring.Scopes.java", "BodyUseAPI": [], "Fixed commit": "439538187616ff5d7bffadfe6782764294181de7", "Url": "https://api.github.com/repos/vaadin/flow-and-components-documentation", "Date": "2018-02-28T15:16:20Z"},
{"Line": "424=>426", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.imagesoftware.anubhav.vacmet.database.daos.DatabaseRequestsDao.updateOrders(orderTranslator.translateModelToEntity(orderModelList.get(pos)))=>com.imagesoftware.anubhav.vacmet.database.daos.DatabaseRequestsDao.updateOrders(com.imagesoftware.anubhav.vacmet.database.entities.OrderEntity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5105/buggy-version/app.src.main.java.com.imagesoftware.anubhav.vacmet.OrderStatus.java", "BodyUseAPI": [], "Fixed commit": "08aa4fe983118379a040e265c2d9b2d40b9ea1d2", "Url": "https://api.github.com/repos/jay1493/vacmetOrderStatus", "Date": "2018-01-13T20:31:40Z"},
{"Line": "19=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ee.hm.dop.service.synchronizer.oaipmh.MaterialIterator.setParser(ee.hm.dop.service.synchronizer.oaipmh.MaterialParser)=>ee.hm.dop.service.synchronizer.oaipmh.MaterialIterator.setParser(ee.hm.dop.service.synchronizer.oaipmh.MaterialParser)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6890/buggy-version/back-end.src.main.java.ee.hm.dop.service.synchronizer.oaipmh.RepositoryManager.java", "BodyUseAPI": [], "Fixed commit": "01106afa0b5f7c3f488094cd43d70052fbbc2cec", "Url": "https://api.github.com/repos/hariduspilv/koolikott", "Date": "2018-03-13T12:51:01Z"},
{"Line": "376=>376", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.charAt(char)=>java.lang.String.indexOf(char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/980/buggy-version/src.main.java.csc380Project.server.ClientThread.java", "BodyUseAPI": [], "Fixed commit": "c8e2776ee8bf4918fec9a1aa015e4c3eaeed3401", "Url": "https://api.github.com/repos/dmyrdek/csc380project", "Date": "2018-05-07T03:30:03Z"},
{"Line": "376=>376", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.charAt(char)=>java.lang.String.substring(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/980/buggy-version/src.main.java.csc380Project.server.ClientThread.java", "BodyUseAPI": [], "Fixed commit": "c8e2776ee8bf4918fec9a1aa015e4c3eaeed3401", "Url": "https://api.github.com/repos/dmyrdek/csc380project", "Date": "2018-05-07T03:30:03Z"},
{"Line": "71=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "p.coord().getLongitudeE6()=>p.coord().getLongitude()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2832/buggy-version/libraries.cyclestreets-core.src.main.java.net.cyclestreets.api.GeoLiveAdapter.java", "BodyUseAPI": [], "Fixed commit": "0ad225187532623c58557216b0b46dc65cda0144", "Url": "https://api.github.com/repos/cyclestreets/android", "Date": "2018-07-23T16:03:57Z"},
{"Line": "155=>157", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "upsettingboy.upsetcore.io.ConsoleUtils.Log(Main.PLUGIN_NAME,java.lang.String)=>java.lang.String.format(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5424/buggy-version/src.upsettingboy.bucketup.backup.Backup.java", "BodyUseAPI": [], "Fixed commit": "ede1f07417197aba51af16787191b18eecca9a14", "Url": "https://api.github.com/repos/UpsettingBoy/BucketUp", "Date": "2018-09-14T10:27:15Z"},
{"Line": "9=>9", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.nuls.kernel.constant.ErrorCode.init(java.lang.String,int)=>io.nuls.kernel.constant.ErrorCode.init(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1868/buggy-version/contract-module.contract.src.main.java.io.nuls.contract.constant.ContractErrorCode.java", "BodyUseAPI": [], "Fixed commit": "ad1457e5ea944f96f2c6392bd2b3d057aca09c46", "Url": "https://api.github.com/repos/ruislan/nuls", "Date": "2018-05-31T12:06:56Z"},
{"Line": "81=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.log4j.Logger.info(java.lang.String)=>java.util.logging.Logger.info(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2183/buggy-version/src.main.java.space.hideaway.controllers.UploadController.java", "BodyUseAPI": [], "Fixed commit": "d77b5542495bbb43f37d6530cf478e0452f45e98", "Url": "https://api.github.com/repos/MTUHIDE/CoCoTemp", "Date": "2018-04-05T15:20:55Z"},
{"Line": "35=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.log4j.Logger.getLogger(java.lang.Class<? extends space.hideaway.controllers.UploadController>)=>java.lang.Class<? extends space.hideaway.controllers.UploadController>.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2183/buggy-version/src.main.java.space.hideaway.controllers.UploadController.java", "BodyUseAPI": [], "Fixed commit": "d77b5542495bbb43f37d6530cf478e0452f45e98", "Url": "https://api.github.com/repos/MTUHIDE/CoCoTemp", "Date": "2018-04-05T15:20:55Z"},
{"Line": "148=>148", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.log4j.Logger.info(java.lang.String)=>java.util.logging.Logger.info(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2183/buggy-version/src.main.java.space.hideaway.services.data.DataServiceImplementation.java", "BodyUseAPI": [], "Fixed commit": "d77b5542495bbb43f37d6530cf478e0452f45e98", "Url": "https://api.github.com/repos/MTUHIDE/CoCoTemp", "Date": "2018-04-05T15:20:55Z"},
{"Line": "164=>164", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.log4j.Logger.info(java.lang.String)=>java.util.logging.Logger.info(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2183/buggy-version/src.main.java.space.hideaway.services.data.DataServiceImplementation.java", "BodyUseAPI": [], "Fixed commit": "d77b5542495bbb43f37d6530cf478e0452f45e98", "Url": "https://api.github.com/repos/MTUHIDE/CoCoTemp", "Date": "2018-04-05T15:20:55Z"},
{"Line": "40=>40", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.log4j.Logger.getLogger(java.lang.Class<? extends space.hideaway.services.data.DataServiceImplementation>)=>java.lang.Class<? extends space.hideaway.services.data.DataServiceImplementation>.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2183/buggy-version/src.main.java.space.hideaway.services.data.DataServiceImplementation.java", "BodyUseAPI": [], "Fixed commit": "d77b5542495bbb43f37d6530cf478e0452f45e98", "Url": "https://api.github.com/repos/MTUHIDE/CoCoTemp", "Date": "2018-04-05T15:20:55Z"},
{"Line": "151=>151", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.log4j.Logger.info(java.lang.String)=>java.util.logging.Logger.info(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2183/buggy-version/src.main.java.space.hideaway.services.data.DataServiceImplementation.java", "BodyUseAPI": [], "Fixed commit": "d77b5542495bbb43f37d6530cf478e0452f45e98", "Url": "https://api.github.com/repos/MTUHIDE/CoCoTemp", "Date": "2018-04-05T15:20:55Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "microbat.recommendation.calculator.VariableSimilarity.computeSimilarity(microbat.recommendation.calculator.VariableSimilarity)=>microbat.recommendation.calculator.VariableSimilarity.computeSimilarity()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8120/buggy-version/microbat.src.main.microbat.recommendation.calculator.VariableSimilarityCalculator.java", "BodyUseAPI": [], "Fixed commit": "fb85793ec9692afcecf2a002d1fcd7cd55c95e9c", "Url": "https://api.github.com/repos/llmhyy/microbat", "Date": "2018-02-25T15:03:18Z"},
{"Line": "72=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ctrip.framework.apollo.portal.component.PermissionValidator.hasReleaseNamespacePermission(java.lang.String,java.lang.String,java.lang.String)=>com.ctrip.framework.apollo.openapi.auth.ConsumerPermissionValidator.hasReleaseNamespacePermission(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3659/buggy-version/apollo-portal.src.main.java.com.ctrip.framework.apollo.openapi.v1.controller.NamespaceBranchController.java", "BodyUseAPI": [], "Fixed commit": "2dba143f8dcfe20694156669a526895cc96a2750", "Url": "https://api.github.com/repos/jieqian/apollo", "Date": "2018-09-28T16:13:05Z"},
{"Line": "72=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ctrip.framework.apollo.portal.component.PermissionValidator.hasReleaseNamespacePermission(java.lang.String,java.lang.String,java.lang.String)=>com.ctrip.framework.apollo.openapi.auth.ConsumerPermissionValidator.hasReleaseNamespacePermission(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3659/buggy-version/apollo-portal.src.main.java.com.ctrip.framework.apollo.openapi.v1.controller.NamespaceBranchController.java", "BodyUseAPI": [], "Fixed commit": "2dba143f8dcfe20694156669a526895cc96a2750", "Url": "https://api.github.com/repos/jieqian/apollo", "Date": "2018-09-28T16:13:05Z"},
{"Line": "73=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ctrip.framework.apollo.portal.component.PermissionValidator.hasModifyNamespacePermission(java.lang.String,java.lang.String,java.lang.String)=>com.ctrip.framework.apollo.openapi.auth.ConsumerPermissionValidator.hasModifyNamespacePermission(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3659/buggy-version/apollo-portal.src.main.java.com.ctrip.framework.apollo.openapi.v1.controller.NamespaceBranchController.java", "BodyUseAPI": [], "Fixed commit": "2dba143f8dcfe20694156669a526895cc96a2750", "Url": "https://api.github.com/repos/jieqian/apollo", "Date": "2018-09-28T16:13:05Z"},
{"Line": "76=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.SharedPreferences.getStringSet(kanemars.chuffme.KEY_DAYS_OF_WEEK,<nulltype>)=>android.content.SharedPreferences.getStringSet(kanemars.chuffme.KEY_DAYS_OF_WEEK,java.util.HashSet<java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9278/buggy-version/app.src.main.java.kanemars.chuffme.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "01c3c824c2eca6108a7a8cc95b511877e4dacb1e", "Url": "https://api.github.com/repos/kanemars/ChuffJava", "Date": "2018-05-15T13:35:36Z"},
{"Line": "98=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.antmedia.datastore.db.types.Broadcast.getIpAddr()=>io.antmedia.datastore.db.types.Broadcast.getStreamId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8889/buggy-version/src.main.java.io.antmedia.ipcamera.IPCameraApplicationAdapter.java", "BodyUseAPI": [], "Fixed commit": "4efc1078aa4f654369e437f4954c6f338467277d", "Url": "https://api.github.com/repos/ant-media/Ant-Media-Server", "Date": "2018-01-22T12:31:52Z"},
{"Line": "98=>112", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "camScheduler.getCamera().getIpAddr()=>camScheduler.getCamera().getStreamId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8889/buggy-version/src.main.java.io.antmedia.ipcamera.IPCameraApplicationAdapter.java", "BodyUseAPI": [], "Fixed commit": "4efc1078aa4f654369e437f4954c6f338467277d", "Url": "https://api.github.com/repos/ant-media/Ant-Media-Server", "Date": "2018-01-22T12:31:52Z"},
{"Line": "57=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.manorrock.httpserver.HttpServerRequest.getQueryString()=>com.manorrock.piranha.HttpServerRequest.getQueryString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/329/buggy-version/piranha.src.main.java.com.manorrock.piranha.DefaultWebApplicationServerRequest.java", "BodyUseAPI": [], "Fixed commit": "1c6e1ccf7dfcb3f53911b9ffb70b006c7920091c", "Url": "https://api.github.com/repos/manorrock/piranha", "Date": "2018-04-05T14:22:05Z"},
{"Line": "66=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.manorrock.httpserver.HttpServerRequest.getHeader(java.lang.String)=>com.manorrock.piranha.HttpServerRequest.getHeader(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/329/buggy-version/piranha.src.main.java.com.manorrock.piranha.DefaultWebApplicationServerRequest.java", "BodyUseAPI": [], "Fixed commit": "1c6e1ccf7dfcb3f53911b9ffb70b006c7920091c", "Url": "https://api.github.com/repos/manorrock/piranha", "Date": "2018-04-05T14:22:05Z"},
{"Line": "61=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.manorrock.httpserver.HttpServerRequest.getRequestTarget()=>com.manorrock.piranha.HttpServerRequest.getRequestTarget()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/329/buggy-version/piranha.src.main.java.com.manorrock.piranha.DefaultWebApplicationServerRequest.java", "BodyUseAPI": [], "Fixed commit": "1c6e1ccf7dfcb3f53911b9ffb70b006c7920091c", "Url": "https://api.github.com/repos/manorrock/piranha", "Date": "2018-04-05T14:22:05Z"},
{"Line": "59=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.manorrock.httpserver.HttpServerRequest.getQueryString()=>com.manorrock.piranha.HttpServerRequest.getQueryString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/329/buggy-version/piranha.src.main.java.com.manorrock.piranha.DefaultWebApplicationServerRequest.java", "BodyUseAPI": [], "Fixed commit": "1c6e1ccf7dfcb3f53911b9ffb70b006c7920091c", "Url": "https://api.github.com/repos/manorrock/piranha", "Date": "2018-04-05T14:22:05Z"},
{"Line": "63=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.manorrock.httpserver.HttpServerRequest.getHeaderNames()=>com.manorrock.piranha.HttpServerRequest.getHeaderNames()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/329/buggy-version/piranha.src.main.java.com.manorrock.piranha.DefaultWebApplicationServerRequest.java", "BodyUseAPI": [], "Fixed commit": "1c6e1ccf7dfcb3f53911b9ffb70b006c7920091c", "Url": "https://api.github.com/repos/manorrock/piranha", "Date": "2018-04-05T14:22:05Z"},
{"Line": "58=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.manorrock.httpserver.HttpServerRequest.getRequestTarget()=>com.manorrock.piranha.HttpServerRequest.getRequestTarget()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/329/buggy-version/piranha.src.main.java.com.manorrock.piranha.DefaultWebApplicationServerRequest.java", "BodyUseAPI": [], "Fixed commit": "1c6e1ccf7dfcb3f53911b9ffb70b006c7920091c", "Url": "https://api.github.com/repos/manorrock/piranha", "Date": "2018-04-05T14:22:05Z"},
{"Line": "24=>24", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.split(java.lang.String)=>java.lang.String.split(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/474/buggy-version/app.src.main.java.com.quran.labs.androidquran.ui.util.ImageAyahUtils.java", "BodyUseAPI": [], "Fixed commit": "e66c2800af5e66d70d5c3999aca3a4d98674912e", "Url": "https://api.github.com/repos/quran/quran_android", "Date": "2018-02-10T17:22:28Z"},
{"Line": "215=>215", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.split(java.lang.String)=>java.lang.String.split(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/474/buggy-version/app.src.main.java.com.quran.labs.androidquran.util.StorageUtils.java", "BodyUseAPI": [], "Fixed commit": "e66c2800af5e66d70d5c3999aca3a4d98674912e", "Url": "https://api.github.com/repos/quran/quran_android", "Date": "2018-02-10T17:22:28Z"},
{"Line": "173=>173", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.split(java.lang.String)=>java.lang.String.split(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/474/buggy-version/app.src.main.java.com.quran.labs.androidquran.util.StorageUtils.java", "BodyUseAPI": [], "Fixed commit": "e66c2800af5e66d70d5c3999aca3a4d98674912e", "Url": "https://api.github.com/repos/quran/quran_android", "Date": "2018-02-10T17:22:28Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.split(java.lang.String)=>java.lang.String.split(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/474/buggy-version/app.src.main.java.com.quran.labs.androidquran.QuranForwarderActivity.java", "BodyUseAPI": [], "Fixed commit": "e66c2800af5e66d70d5c3999aca3a4d98674912e", "Url": "https://api.github.com/repos/quran/quran_android", "Date": "2018-02-10T17:22:28Z"},
{"Line": "1188=>1188", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "gregtech.api.metatileentity.GT_CoverBehavior.letsFluidOut(((byte) (aSide.ordinal())),int,int,((mMetaTileEntity.getFluid()) == null ? null : mMetaTileEntity.getFluid().getFluid()),gregtech.api.metatileentity.BaseMetaPipeEntity)=>gregtech.api.metatileentity.GT_CoverBehavior.letsFluidOut(((byte) (aSide.ordinal())),int,int,net.minecraftforge.fluids.Fluid,gregtech.api.metatileentity.BaseMetaPipeEntity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4185/buggy-version/src.main.java.gregtech.api.metatileentity.BaseMetaPipeEntity.java", "BodyUseAPI": [], "Fixed commit": "860cc0daf00ee8201e1d38ecc01a4dfbed10ac64", "Url": "https://api.github.com/repos/IdealIndustrial/GT5Unofficial", "Date": "2018-04-11T21:29:32Z"},
{"Line": "1184=>1184", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "gregtech.api.metatileentity.GT_CoverBehavior.letsFluidIn(((byte) (aSide.ordinal())),int,int,((mMetaTileEntity.getFluid()) == null ? null : mMetaTileEntity.getFluid().getFluid()),gregtech.api.metatileentity.BaseMetaPipeEntity)=>gregtech.api.metatileentity.GT_CoverBehavior.letsFluidIn(((byte) (aSide.ordinal())),int,int,net.minecraftforge.fluids.Fluid,gregtech.api.metatileentity.BaseMetaPipeEntity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4185/buggy-version/src.main.java.gregtech.api.metatileentity.BaseMetaPipeEntity.java", "BodyUseAPI": [], "Fixed commit": "860cc0daf00ee8201e1d38ecc01a4dfbed10ac64", "Url": "https://api.github.com/repos/IdealIndustrial/GT5Unofficial", "Date": "2018-04-11T21:29:32Z"},
{"Line": "156=>156", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.anysoftkeyboard.dictionaries.DictionaryBackgroundLoader.loadDictionaryInBackground(com.anysoftkeyboard.dictionaries.BTreeDictionary)=>com.anysoftkeyboard.dictionaries.DictionaryBackgroundLoader.reloadDictionaryInBackground(com.anysoftkeyboard.dictionaries.BTreeDictionary)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/645/buggy-version/app.src.main.java.com.anysoftkeyboard.dictionaries.BTreeDictionary.java", "BodyUseAPI": [], "Fixed commit": "6182a1532211570ffb3403feb40779705bfab2f2", "Url": "https://api.github.com/repos/AnySoftKeyboard/AnySoftKeyboard", "Date": "2018-05-17T16:00:47Z"},
{"Line": "50=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.sql.ResultSet.first()=>java.sql.ResultSet.beforeFirst()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2649/buggy-version/src.thisseasx.ResultSetPrinter.ResultSetPrinter.java", "BodyUseAPI": [], "Fixed commit": "9c65317ebcb2b47cb4eb6e2a38d93cc2f478715f", "Url": "https://api.github.com/repos/ThisseasX/ResultSetPrinter", "Date": "2018-01-17T18:08:15Z"},
{"Line": "218=>218", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.model.deck.UniqueCardList.remove(seedu.address.model.Anakin)=>seedu.address.model.deck.UniqueCardList.remove(seedu.address.model.deck.Card)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1094/buggy-version/src.main.java.seedu.address.model.Anakin.java", "BodyUseAPI": [], "Fixed commit": "83d827dc88b3a9c0c99e9cf66e2219d18416a907", "Url": "https://api.github.com/repos/truongthanh2606/Main", "Date": "2018-10-27T13:09:43Z"},
{"Line": "75=>75", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "netherchest.common.inventory.ContainerNetherChest.addSlotToContainer(net.minecraft.inventory.Slot)=>netherchest.common.inventory.ContainerNetherChest.addSlotToContainer(net.minecraft.inventory.Slot)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7546/buggy-version/src.main.java.netherchest.common.inventory.ContainerNetherChest.java", "BodyUseAPI": [], "Fixed commit": "dc0e3c71955ae7894dd3ccf1cbd3e74e0d1170d4", "Url": "https://api.github.com/repos/the-realest-stu/Nether-Chest", "Date": "2018-10-03T03:20:50Z"},
{"Line": "782=>782", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ptolemy.actor.continuous.ContinuousStepSizeController.getName()=>ptolemy.actor.continuous.ContinuousStepSizeController.getFullName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7144/buggy-version/ptolemy.domains.continuous.kernel.ContinuousDirector.java", "BodyUseAPI": [], "Fixed commit": "ff63d8b16498f893b7b8849a30fd00a9b978153c", "Url": "https://api.github.com/repos/icyphy/ptII", "Date": "2018-10-05T20:51:44Z"},
{"Line": "129=>129", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Math.min(double,int)=>java.lang.Math.max(double,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6116/buggy-version/src.main.java.richards_classes.NestedNewton.java", "BodyUseAPI": [], "Fixed commit": "1d1b5842b888f3600a6aa12be0a21ccafa27db96", "Url": "https://api.github.com/repos/geoframecomponents/richards1D", "Date": "2018-05-10T08:20:28Z"},
{"Line": "54=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED).and().csrf().disable().authorizeRequests().antMatchers(\"/profile\", \"/profile/**\").authenticated().antMatchers(\"/user\", \"/user/**\").authenticated().antMatchers(java.lang.String,java.lang.String)=>http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED).and().csrf().disable().authorizeRequests().antMatchers(\"/profile\", \"/profile/**\").authenticated().antMatchers(\"/user\", \"/user/**\").authenticated().antMatchers(java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5695/buggy-version/tweb.src.main.java.io.fundreqest.platform.tweb.config.SecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "03ae0efed3d9945eb5e9d316fe96404282b4ad95", "Url": "https://api.github.com/repos/FundRequest/platform", "Date": "2018-05-11T20:06:54Z"},
{"Line": "46=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.codecool.snake.entities.Interactable.apply(((com.codecool.snake.entities.snakes.SnakeHead) (com.codecool.snake.Globals.getSnakeHead())))=>com.codecool.snake.entities.GameEntity.destroy()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8015/buggy-version/src.com.codecool.snake.entities.Laser.java", "BodyUseAPI": [], "Fixed commit": "dd2aa41f7b06cf2de5f2e4aea51a2538c5ab5da9", "Url": "https://api.github.com/repos/CodecoolBPoop/oop-java-snake-nullpointerexception", "Date": "2018-10-04T14:39:06Z"},
{"Line": "46=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.codecool.snake.entities.Interactable.apply(((com.codecool.snake.entities.snakes.SnakeHead) (com.codecool.snake.Globals.getSnakeHead())))=>com.codecool.snake.entities.GameEntity.destroy()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8015/buggy-version/src.com.codecool.snake.entities.Laser.java", "BodyUseAPI": [], "Fixed commit": "dd2aa41f7b06cf2de5f2e4aea51a2538c5ab5da9", "Url": "https://api.github.com/repos/CodecoolBPoop/oop-java-snake-nullpointerexception", "Date": "2018-10-04T14:39:06Z"},
{"Line": "212=>213", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.wille.lifecycle.changeModel.CViewModel<T>.onDestroy()=>org.wille.lifecycle.changeModel.ListCViewModel<T>.onDestroy()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9020/buggy-version/viewModel.src.main.java.org.wille.lifecycle.changeModel.BridgeCViewModel.java", "BodyUseAPI": [], "Fixed commit": "0c2bedf641fdbd57a83b1d2bce387d61362c19bc", "Url": "https://api.github.com/repos/wille-89/wille-viewModel", "Date": "2018-08-01T09:04:24Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.wille.lifecycle.changeModel.CViewModel()=>org.wille.lifecycle.changeModel.ListCViewModel()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9020/buggy-version/viewModel.src.main.java.org.wille.lifecycle.changeModel.BridgeCViewModel.java", "BodyUseAPI": [], "Fixed commit": "0c2bedf641fdbd57a83b1d2bce387d61362c19bc", "Url": "https://api.github.com/repos/wille-89/wille-viewModel", "Date": "2018-08-01T09:04:24Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.RemoteViews.setImageViewResource(R.id.image,R.drawable.album_art_placeholder)=>android.widget.RemoteViews.setImageViewResource(R.id.album_art_widget,R.drawable.album_art_placeholder)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2644/buggy-version/app.src.main.java.com.flairmusicplayer.flair.widgets.BigWidget.java", "BodyUseAPI": [], "Fixed commit": "95fcee0c19a8a9f98f7f3d2a317f677d91274d24", "Url": "https://api.github.com/repos/pulakdp/Flair", "Date": "2018-02-12T06:52:21Z"},
{"Line": "64=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Classes.Bard.addSkill(skills.spellCastingBard)=>Classes.Bard.addSkill(skills.SpellCasting)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2093/buggy-version/DNDFinalProject.src.Classes.Bard.java", "BodyUseAPI": [], "Fixed commit": "4ee261bac1eeed1c3b7c2efe252440e23d6505a6", "Url": "https://api.github.com/repos/NHandley1025/DND-Final-Project", "Date": "2018-03-09T17:53:36Z"},
{"Line": "77=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.htala.RNPreSettings.InputStream.close()=>java.io.InputStream.close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6547/buggy-version/android.src.main.java.com.htala.RNPreSettings.RNPreSettingsModule.java", "BodyUseAPI": [], "Fixed commit": "ffc40030ee93b46db47f728393e1d174af94dc2d", "Url": "https://api.github.com/repos/htala/react-native-presettings", "Date": "2018-08-24T16:00:10Z"},
{"Line": "52=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.htala.RNPreSettings.OutputStreamWriter.write(java.lang.String)=>java.io.OutputStreamWriter.write(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6547/buggy-version/android.src.main.java.com.htala.RNPreSettings.RNPreSettingsModule.java", "BodyUseAPI": [], "Fixed commit": "ffc40030ee93b46db47f728393e1d174af94dc2d", "Url": "https://api.github.com/repos/htala/react-native-presettings", "Date": "2018-08-24T16:00:10Z"},
{"Line": "53=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.htala.RNPreSettings.OutputStreamWriter.close()=>java.io.OutputStreamWriter.close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6547/buggy-version/android.src.main.java.com.htala.RNPreSettings.RNPreSettingsModule.java", "BodyUseAPI": [], "Fixed commit": "ffc40030ee93b46db47f728393e1d174af94dc2d", "Url": "https://api.github.com/repos/htala/react-native-presettings", "Date": "2018-08-24T16:00:10Z"},
{"Line": "73=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.htala.RNPreSettings.BufferedReader.readLine()=>java.io.BufferedReader.readLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6547/buggy-version/android.src.main.java.com.htala.RNPreSettings.RNPreSettingsModule.java", "BodyUseAPI": [], "Fixed commit": "ffc40030ee93b46db47f728393e1d174af94dc2d", "Url": "https://api.github.com/repos/htala/react-native-presettings", "Date": "2018-08-24T16:00:10Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.ProductPic)=>android.view.View.findViewById(R.id.productPic)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1841/buggy-version/app.src.main.java.com.simcoder.tinder.arrayAdapter.java", "BodyUseAPI": [], "Fixed commit": "a6f25075b581fff8fdfa410dda6832f5f100da09", "Url": "https://api.github.com/repos/simkvng/TechrPrototype", "Date": "2018-04-03T00:07:10Z"},
{"Line": "631=>651", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "pt.up.fe.specs.clava.context.ClavaFactory.dummyType(java.lang.String)=>pt.up.fe.specs.clava.ast.expr.Expr.getExprType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7440/buggy-version/ClavaAst.src.pt.up.fe.specs.clava.context.ClavaFactory.java", "BodyUseAPI": [], "Fixed commit": "f80d45cfe28dc0e65f3076270f2ba5599b008aef", "Url": "https://api.github.com/repos/specs-feup/clava", "Date": "2018-09-20T19:54:41Z"},
{"Line": "32=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "processor.EcogPatientAssignmentProcessor.handleOutsidePatientWorkflow(model.Patient)=>processor.EcogPatientAssignmentProcessor.handleOutsidePatientWorkflow(model.Patient,model.messages.ECOGPatientAssignmentMessage)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3621/buggy-version/src.main.java.processor.EcogPatientAssignmentProcessor.java", "BodyUseAPI": [], "Fixed commit": "57bfd4556bf86f74862e4ca754061928f250d151", "Url": "https://api.github.com/repos/BIAD/nci-adult-match-assignment-delivery-lambda", "Date": "2018-08-01T21:41:48Z"},
{"Line": "67=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.group52.client.actions.ServerDialog.getResponseFromServer()=>com.group52.client.actions.Handler.getResponseFromServer()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5555/buggy-version/client.src.com.group52.client.actions.Handler.java", "BodyUseAPI": [], "Fixed commit": "bb63d2d92e4b798cac218710ef5b71375a32c1e1", "Url": "https://api.github.com/repos/group52/TaskManager", "Date": "2018-04-22T17:55:14Z"},
{"Line": "100=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "atsApi.getQueryService().getConfigItem(java.lang.String)=>org.eclipse.osee.ats.api.AtsApi.getConfigItemFactory()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/382/buggy-version/plugins.org.eclipse.osee.ats.core.src.org.eclipse.osee.ats.core.util.ConvertAtsConfigGuidAttributesOperations.java", "BodyUseAPI": [], "Fixed commit": "eb761a3b02a124592f68f4450957fd85d9c94e5b", "Url": "https://api.github.com/repos/eclipse/osee", "Date": "2018-03-28T17:13:02Z"},
{"Line": "100=>101", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "atsApi.getQueryService().getConfigItem(java.lang.String)=>atsApi.getConfigItemFactory().getTeamDef(org.eclipse.osee.framework.core.data.ArtifactToken)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/382/buggy-version/plugins.org.eclipse.osee.ats.core.src.org.eclipse.osee.ats.core.util.ConvertAtsConfigGuidAttributesOperations.java", "BodyUseAPI": [], "Fixed commit": "eb761a3b02a124592f68f4450957fd85d9c94e5b", "Url": "https://api.github.com/repos/eclipse/osee", "Date": "2018-03-28T17:13:02Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "nl.rabobank.training.orderservice.model.OrderItem.builder().price(1.0).quantity(1).description(java.lang.String)=>nl.rabobank.training.orderservice.model.OrderItem.builder().price(1.0).quantity(1).ref(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8387/buggy-version/src.main.java.nl.rabobank.training.orderservice.web.DataGenerator.java", "BodyUseAPI": [], "Fixed commit": "3fe9ffa6c8517ea0b07b98c5ec1669444f374c7b", "Url": "https://api.github.com/repos/Turbots/rabo-order-service", "Date": "2018-02-02T13:46:09Z"},
{"Line": "25=>25", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "nl.rabobank.training.orderservice.model.OrderItem.builder().price(1.0).quantity(1).description(\"Biertje\").build()=>nl.rabobank.training.orderservice.model.OrderItem.builder().price(1.0).quantity(1).ref(\"BIER\").description(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8387/buggy-version/src.main.java.nl.rabobank.training.orderservice.web.DataGenerator.java", "BodyUseAPI": [], "Fixed commit": "3fe9ffa6c8517ea0b07b98c5ec1669444f374c7b", "Url": "https://api.github.com/repos/Turbots/rabo-order-service", "Date": "2018-02-02T13:46:09Z"},
{"Line": "25=>25", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Collections.singletonList(nl.rabobank.training.orderservice.model.OrderItem.builder().price(1.0).quantity(1).description(\"Biertje\").build())=>nl.rabobank.training.orderservice.model.OrderItem.builder().price(1.0).quantity(1).ref(\"BIER\").description(\"Biertje\").build()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8387/buggy-version/src.main.java.nl.rabobank.training.orderservice.web.DataGenerator.java", "BodyUseAPI": [], "Fixed commit": "3fe9ffa6c8517ea0b07b98c5ec1669444f374c7b", "Url": "https://api.github.com/repos/Turbots/rabo-order-service", "Date": "2018-02-02T13:46:09Z"},
{"Line": "371=>371", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.mifos.mobilebanking.utils.StatusUtils.getSavingsAccountStatusList(getActivity())=>org.mifos.mobilebanking.utils.StatusUtils.getLoanAccountStatusList(getActivity())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5090/buggy-version/app.src.main.java.org.mifos.mobilebanking.ui.fragments.ClientAccountsFragment.java", "BodyUseAPI": [], "Fixed commit": "e1fe0aff38156c53ad26b504f941190cc4c5c6e8", "Url": "https://api.github.com/repos/sashank27/mifos-mobile", "Date": "2018-02-18T17:16:32Z"},
{"Line": "382=>382", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.mifos.mobilebanking.utils.StatusUtils.getSavingsAccountStatusList(getActivity())=>org.mifos.mobilebanking.utils.StatusUtils.getShareAccountStatusList(getActivity())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5090/buggy-version/app.src.main.java.org.mifos.mobilebanking.ui.fragments.ClientAccountsFragment.java", "BodyUseAPI": [], "Fixed commit": "e1fe0aff38156c53ad26b504f941190cc4c5c6e8", "Url": "https://api.github.com/repos/sashank27/mifos-mobile", "Date": "2018-02-18T17:16:32Z"},
{"Line": "398=>405", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.app.Activity.setResult(Activity.RESULT_OK,android.content.Intent)=>com.google.zxing.client.android.InactivityTimer.cancel()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1654/buggy-version/zxing.src.com.journeyapps.barcodescanner.CaptureManager.java", "BodyUseAPI": [], "Fixed commit": "325d22cba114474a1a2be545bea14109683df92b", "Url": "https://api.github.com/repos/ruijindp/HG_transport_phone", "Date": "2018-09-19T10:02:07Z"},
{"Line": "398=>405", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.app.Activity.setResult(Activity.RESULT_OK,android.content.Intent)=>com.google.zxing.client.android.InactivityTimer.cancel()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1654/buggy-version/zxing.src.com.journeyapps.barcodescanner.CaptureManager.java", "BodyUseAPI": [], "Fixed commit": "325d22cba114474a1a2be545bea14109683df92b", "Url": "https://api.github.com/repos/ruijindp/HG_transport_phone", "Date": "2018-09-19T10:02:07Z"},
{"Line": "399=>409", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.journeyapps.barcodescanner.CaptureManager.closeAndFinish()=>com.journeyapps.barcodescanner.CaptureManager.decode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1654/buggy-version/zxing.src.com.journeyapps.barcodescanner.CaptureManager.java", "BodyUseAPI": [], "Fixed commit": "325d22cba114474a1a2be545bea14109683df92b", "Url": "https://api.github.com/repos/ruijindp/HG_transport_phone", "Date": "2018-09-19T10:02:07Z"},
{"Line": "130=>130", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "((com.earth2me.essentials.Player) (combuster.getShooter())).getUniqueId()=>((com.earth2me.essentials.Player) (combuster.getShooter())).getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4098/buggy-version/Essentials.src.com.earth2me.essentials.EssentialsEntityListener.java", "BodyUseAPI": [], "Fixed commit": "9d00078cca6a98260fca08671a3a92d16f45aceb", "Url": "https://api.github.com/repos/montlikadani/Essentials", "Date": "2018-03-18T13:11:03Z"},
{"Line": "91=>91", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.ImageView.setBackgroundResource(R.drawable.placeholder)=>com.bumptech.glide.Glide.with(r3pi.osmanyalin.assessment.BooksApp.getInstance()).load(R.drawable.placeholder).into(android.widget.ImageView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7473/buggy-version/app.src.main.java.r3pi.osmanyalin.assessment.adapter.BookGridListAdapter.java", "BodyUseAPI": [], "Fixed commit": "9daabdc3e726b8cdf063fda4c6c2f5140f110b93", "Url": "https://api.github.com/repos/OsmanYalin/OsmanYalin-Books", "Date": "2018-10-05T13:44:30Z"},
{"Line": "101=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.github.markusbernhardt.proxy.util.Logger.LogBackEnd.isLogginEnabled(com.github.markusbernhardt.proxy.util.Logger.LogLevel)=>java.util.Map<java.lang.Class<?>, org.slf4j.Logger>.put(java.lang.Class<?>,org.slf4j.Logger)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5053/buggy-version/src.main.java.com.github.markusbernhardt.proxy.util.Logger.java", "BodyUseAPI": [], "Fixed commit": "4d0a6bf2fbce17135d149ad6b44c2e1f93e1cc47", "Url": "https://api.github.com/repos/jstammi/proxy-vole", "Date": "2018-06-27T07:48:05Z"},
{"Line": "1551=>1555", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "au.com.tyo.app.ui.view.ViewContainerWithProgressBar.startTask(au.com.tyo.app.ui.page.Page<T>)=>au.com.tyo.app.ui.view.ViewContainerWithProgressBar.startTask(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/105/buggy-version/src.main.java.au.com.tyo.app.ui.page.Page.java", "BodyUseAPI": [], "Fixed commit": "a2d53bddc389cb637d07485dd0bea3eb07a3d549", "Url": "https://api.github.com/repos/tyolab/CommonAppLib", "Date": "2018-02-04T03:34:28Z"},
{"Line": "23=>23", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.nio.ByteBuffer.putShort(short)=>java.nio.ByteBuffer.put(((byte) (flags.toInt())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5034/buggy-version/src.main.java.com.dokany.java.structure.filesecurity.AccessAllowedACE.java", "BodyUseAPI": [], "Fixed commit": "a9b522cbe3282a67b4d48f7be99d5eba95cd7447", "Url": "https://api.github.com/repos/cryptomator/dokany-nio-adapter", "Date": "2018-05-14T15:16:42Z"},
{"Line": "327=>329", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.jtool.changetracker.operation.ChangeOperation.getTime(java.lang.String)=>org.jtool.changetracker.operation.ChangeOperation.getTime(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7069/buggy-version/org.jtool.changetracker.core.src.org.jtool.changetracker.xml.Xml2Operation.java", "BodyUseAPI": [], "Fixed commit": "570985af752d074f163fcae343a95db4fa406a38", "Url": "https://api.github.com/repos/katsuhisamaruyama/ChangeTracker2", "Date": "2017-09-26T13:03:56Z"},
{"Line": "459=>459", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.api.codegen.util.Name.anyCamel(getInterfaceName(interfaceConfig),java.lang.String)=>com.google.api.codegen.util.Name.anyCamel(getGrpcTransportClassName(interfaceConfig))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9034/buggy-version/src.main.java.com.google.api.codegen.transformer.py.PythonSurfaceNamer.java", "BodyUseAPI": [], "Fixed commit": "9e25b2612445e24251a7fcbd3a0484929bef79ce", "Url": "https://api.github.com/repos/vchudnov-g/toolkit", "Date": "2018-06-29T22:11:46Z"},
{"Line": "459=>459", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.google.api.codegen.transformer.py.PythonSurfaceNamer.getInterfaceName(com.google.api.codegen.config.InterfaceConfig)=>com.google.api.codegen.transformer.py.PythonSurfaceNamer.getGrpcTransportClassName(com.google.api.codegen.config.InterfaceConfig)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9034/buggy-version/src.main.java.com.google.api.codegen.transformer.py.PythonSurfaceNamer.java", "BodyUseAPI": [], "Fixed commit": "9e25b2612445e24251a7fcbd3a0484929bef79ce", "Url": "https://api.github.com/repos/vchudnov-g/toolkit", "Date": "2018-06-29T22:11:46Z"},
{"Line": "388=>387", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "uk.co.senab.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)=>com.github.chrisbanes.photoview.PhotoView.setImageBitmap(android.graphics.Bitmap)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8061/buggy-version/src.com.owncloud.android.ui.activity.CropActivity.java", "BodyUseAPI": [], "Fixed commit": "72c157f1d2489c8d08d3e49ed5aae51f81bdb2e1", "Url": "https://api.github.com/repos/sd1998/android", "Date": "2018-03-10T09:58:14Z"},
{"Line": "596=>596", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.oracle.svm.core.genscavenge.ObjectHeaderImpl.readHeaderBitsFromObjectCarefully(java.lang.Object)=>com.oracle.svm.core.genscavenge.ObjectHeaderImpl.readHeaderFromObjectCarefully(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/288/buggy-version/substratevm.src.com.oracle.svm.core.genscavenge.src.com.oracle.svm.core.genscavenge.ObjectHeaderImpl.java", "BodyUseAPI": [], "Fixed commit": "eb147be2ff19e1d5dc0faa3a0dd8a6035fdb0fed", "Url": "https://api.github.com/repos/GCplus/graal", "Date": "2018-10-14T21:49:57Z"},
{"Line": "51=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apereo.cas.audit.AuditActionContextJsonSerializer.toString(org.apereo.inspektr.audit.AuditActionContext)=>org.apereo.cas.audit.spi.AuditActionContextJsonSerializer.toString(org.apereo.inspektr.audit.AuditActionContext)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6450/buggy-version/support.cas-server-support-audit-rest.src.main.java.org.apereo.cas.audit.RestAuditTrailManager.java", "BodyUseAPI": [], "Fixed commit": "0fe9dfdb8a3ae1c0270ca4841f97dca99498cf0c", "Url": "https://api.github.com/repos/sbearcsiro/cas", "Date": "2018-07-03T06:09:31Z"},
{"Line": "30=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "src.Coin.generate()=>src.Coin.getUSDPrice()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/584/buggy-version/src.main.java", "BodyUseAPI": [], "Fixed commit": "708083c72896ae0660a0ae9589af28cc4b9edff9", "Url": "https://api.github.com/repos/Universe-Wallet/Universe", "Date": "2018-05-02T07:45:48Z"},
{"Line": "133=>138", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "io.enoa.yosart.Oysart.assets().uri()=>io.enoa.yosart.kernel.data.YdAssets.uri()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4438/buggy-version/enoa-yosart.src.main.java.io.enoa.yosart.repeater.OysartAccessor.java", "BodyUseAPI": [], "Fixed commit": "ede570d3e37253949c4b815684e28eb17a1b5b9c", "Url": "https://api.github.com/repos/fewensa/enoa", "Date": "2018-09-09T16:34:01Z"},
{"Line": "38=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "manejoexcepciones.MiRecurso.open()=>manejoexcepciones.MiRecurso.close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3915/buggy-version/ManejoExcepciones.src.manejoexcepciones.ManejoRecurso.java", "BodyUseAPI": [], "Fixed commit": "6b80b83829e81047f0170f1d85348416ba6a4a81", "Url": "https://api.github.com/repos/ninojairo/ManejoExcepciones", "Date": "2018-07-09T02:43:25Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "manejoexcepciones.DivisionPorCero.divisionporcerocheckedexterno()=>manejoexcepciones.DivisionPorCero.divisionPorCeroCheckedExterno()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3915/buggy-version/ManejoExcepciones.src.manejoexcepciones.ManejoExcepciones.java", "BodyUseAPI": [], "Fixed commit": "6b80b83829e81047f0170f1d85348416ba6a4a81", "Url": "https://api.github.com/repos/ninojairo/ManejoExcepciones", "Date": "2018-07-09T02:43:25Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "manejoexcepciones.DivisionPorCero.divisionporcerocheckedinterno()=>manejoexcepciones.DivisionPorCero.divisionPorCeroCheckedInterno()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3915/buggy-version/ManejoExcepciones.src.manejoexcepciones.ManejoExcepciones.java", "BodyUseAPI": [], "Fixed commit": "6b80b83829e81047f0170f1d85348416ba6a4a81", "Url": "https://api.github.com/repos/ninojairo/ManejoExcepciones", "Date": "2018-07-09T02:43:25Z"},
{"Line": "136=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Set<org.apache.commons.lang3.tuple.Pair<de.openknowledge.jaxrs.versioning.conversion.VersionType<?>, de.openknowledge.jaxrs.versioning.conversion.VersionType<?>>>.contains(org.apache.commons.lang3.tuple.ImmutablePair<?, ?>)=>java.util.Set<org.apache.commons.lang3.tuple.Pair<de.openknowledge.jaxrs.versioning.conversion.VersionType<?>, de.openknowledge.jaxrs.versioning.conversion.VersionType<?>>>.contains(org.apache.commons.lang3.tuple.Pair<?, ?>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1351/buggy-version/jaxrs-versioning.src.main.java.de.openknowledge.jaxrs.versioning.conversion.InterversionConverter.java", "BodyUseAPI": [], "Fixed commit": "d67aaf1eb84dff12b7973a2ee797e7b233432887", "Url": "https://api.github.com/repos/openknowledge/jaxrs-versioning", "Date": "2018-04-26T18:06:45Z"},
{"Line": "121=>121", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class<?>.getAnnotation(java.lang.Class)=>de.openknowledge.jaxrs.versioning.conversion.MessageBodyConverter.extractSupportedVersion(java.lang.reflect.Type)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1351/buggy-version/jaxrs-versioning.src.main.java.de.openknowledge.jaxrs.versioning.conversion.MessageBodyConverter.java", "BodyUseAPI": [], "Fixed commit": "d67aaf1eb84dff12b7973a2ee797e7b233432887", "Url": "https://api.github.com/repos/openknowledge/jaxrs-versioning", "Date": "2018-04-26T18:06:45Z"},
{"Line": "32=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.springframework.ui.Model.addAttribute(java.lang.String,com.codeup.michero.models.Review)=>org.springframework.ui.Model.addAttribute(java.lang.String,java.lang.Iterable<com.codeup.michero.models.Review>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1396/buggy-version/src.main.java.com.codeup.michero.controller.ReviewsController.java", "BodyUseAPI": [], "Fixed commit": "e49740d0294f2038ae6b902d648a26115239d193", "Url": "https://api.github.com/repos/dbrown0591/codeup-capstone-project", "Date": "2018-05-05T02:37:51Z"},
{"Line": "201=>203", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.common.collect.Lists.newArrayListWithCapacity(int)=>org.sagebionetworks.bridge.rest.RestUtils.isNotBlank(info.getAppName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3813/buggy-version/rest-client.src.main.java.org.sagebionetworks.bridge.rest.RestUtils.java", "BodyUseAPI": [], "Fixed commit": "c54bf95d9eeaca0d92743f191a4cc561214b5943", "Url": "https://api.github.com/repos/liujoshua/BridgeJavaSDK", "Date": "2018-03-12T22:26:53Z"},
{"Line": "211=>237", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.lang.String>.isEmpty()=>java.lang.StringBuilder.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3813/buggy-version/rest-client.src.main.java.org.sagebionetworks.bridge.rest.RestUtils.java", "BodyUseAPI": [], "Fixed commit": "c54bf95d9eeaca0d92743f191a4cc561214b5943", "Url": "https://api.github.com/repos/liujoshua/BridgeJavaSDK", "Date": "2018-03-12T22:26:53Z"},
{"Line": "206=>225", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.format(java.lang.String,info.getDeviceName(),info.getOsName(),info.getOsVersion())=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3813/buggy-version/rest-client.src.main.java.org.sagebionetworks.bridge.rest.RestUtils.java", "BodyUseAPI": [], "Fixed commit": "c54bf95d9eeaca0d92743f191a4cc561214b5943", "Url": "https://api.github.com/repos/liujoshua/BridgeJavaSDK", "Date": "2018-03-12T22:26:53Z"},
{"Line": "209=>233", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.format(java.lang.String,info.getSdkName(),info.getSdkVersion())=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3813/buggy-version/rest-client.src.main.java.org.sagebionetworks.bridge.rest.RestUtils.java", "BodyUseAPI": [], "Fixed commit": "c54bf95d9eeaca0d92743f191a4cc561214b5943", "Url": "https://api.github.com/repos/liujoshua/BridgeJavaSDK", "Date": "2018-03-12T22:26:53Z"},
{"Line": "214=>240", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.google.common.base.Joiner.on(\" \").join(java.util.List<java.lang.String>)=>java.lang.StringBuilder.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3813/buggy-version/rest-client.src.main.java.org.sagebionetworks.bridge.rest.RestUtils.java", "BodyUseAPI": [], "Fixed commit": "c54bf95d9eeaca0d92743f191a4cc561214b5943", "Url": "https://api.github.com/repos/liujoshua/BridgeJavaSDK", "Date": "2018-03-12T22:26:53Z"},
{"Line": "211=>237", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<java.lang.String>.isEmpty()=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3813/buggy-version/rest-client.src.main.java.org.sagebionetworks.bridge.rest.RestUtils.java", "BodyUseAPI": [], "Fixed commit": "c54bf95d9eeaca0d92743f191a4cc561214b5943", "Url": "https://api.github.com/repos/liujoshua/BridgeJavaSDK", "Date": "2018-03-12T22:26:53Z"},
{"Line": "198=>198", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Deque<spoon.reflect.visitor.TypeContext>.push(spoon.reflect.visitor.TypeContext)=>java.util.Deque<spoon.reflect.visitor.CacheBasedConflictFinder>.push(spoon.reflect.visitor.CacheBasedConflictFinder)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7622/buggy-version/src.main.java.spoon.reflect.visitor.PrintingContext.java", "BodyUseAPI": [], "Fixed commit": "6a176debef3913efd5a8b5576d20643d01ac08b9", "Url": "https://api.github.com/repos/castor-software/spoon-mirror", "Date": "2018-09-06T15:56:20Z"},
{"Line": "113=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "MScheme.StdioFrame.add(MScheme.StdioArea,java.lang.String)=>MScheme.StdioFrame.add(MScheme.StdioArea)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2786/buggy-version/MScheme.StdioFrame.java", "BodyUseAPI": [], "Fixed commit": "f4fb682b7069c930380a372153911d532011f3f4", "Url": "https://api.github.com/repos/sielenk/MScheme", "Date": "2001-11-06T07:00:02Z"},
{"Line": "81=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.google.firebase.auth.FirebaseUser.getPhoneNumber()=>com.google.firebase.auth.FirebaseUser.getUid()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2863/buggy-version/app.src.main.java.com.controllers.HomeActivity.java", "BodyUseAPI": [], "Fixed commit": "bd8f5e44245ef7cb57c3b03b9f98365af6c1b324", "Url": "https://api.github.com/repos/ofiraha/FinalProject", "Date": "2018-09-27T17:32:59Z"},
{"Line": "89=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.randywebb.wlts.beans.DetailedMinistered.copy(org.randywebb.wlts.beans.Companionship,java.lang.String,org.randywebb.wlts.beans.DetailedMinistered)=>org.randywebb.wlts.beans.DetailedMinistered.copy(org.randywebb.wlts.beans.District,java.lang.String,org.randywebb.wlts.beans.DetailedMinistered)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7510/buggy-version/src.main.java.org.randywebb.wlts.beans.DetailedMinistered.java", "BodyUseAPI": [], "Fixed commit": "28a36ae701182e07f323e8f3b4173b70e669d6c2", "Url": "https://api.github.com/repos/Speewack/wlts-import", "Date": "2018-05-27T12:43:54Z"},
{"Line": "89=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.format(java.lang.String,Patriot.RESOURCE_PREFIX,ItemToiletPaper.NAME)=>java.lang.String.format(java.lang.String,Patriot.RESOURCE_PREFIX,ItemTissueBox.NAME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8826/buggy-version/src.main.java.moe.karpador.patriot.items.ModItems.java", "BodyUseAPI": [], "Fixed commit": "f9f9d34695cd35bbe2f1348c4b52a46049438573", "Url": "https://api.github.com/repos/diemjo/patriot", "Date": "2018-09-18T18:35:16Z"},
{"Line": "167=>167", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeSuccessDialog(getActivity()).setTitle(local.getLocal()).setMessage(java.lang.String)=>new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeSuccessDialog(getActivity()).setTitle(local.getLocal()).setMessage(R.string.deseja_excluir_estabelecimento)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/410/buggy-version/app.src.main.java.com.rodrigordgfs.buscatroco.Fragments.PostoTrocaFragment.java", "BodyUseAPI": [], "Fixed commit": "49a54d32c6523abd5fc84871f1749792bf3a762e", "Url": "https://api.github.com/repos/rodrigordgfs/Busca-Troco", "Date": "2018-10-02T02:40:36Z"},
{"Line": "144=>144", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeInfoDialog(getActivity()).setTitle(local.getLocal()).setMessage(\"O que voc\u00ea deseja fazer?\").setColoredCircle(R.color.colorAccent).setDialogIconAndColor(R.drawable.ic_dialog_info, R.color.white).setCancelable(false).setPositiveButtonText(\"Editar\").setPositiveButtonbackgroundColor(R.color.colorAccent).setPositiveButtonTextColor(R.color.white).setPositiveButtonClick(new com.awesomedialog.blennersilva.awesomedialoglibrary.interfaces.Closure() { @java.lang.Override public void exec() { android.content.Intent intent = new android.content.Intent(getContext(), com.rodrigordgfs.buscatroco.Cadastros.AddPostoTrocoActivity.class); intent.putExtra(Utils.KEY, local.getKey()); startActivity(intent); } }).setNegativeButtonText(java.lang.String)=>new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeInfoDialog(getActivity()).setTitle(local.getLocal()).setMessage(R.string.o_que_deseja_fazer).setColoredCircle(R.color.colorAccent).setDialogIconAndColor(R.drawable.ic_dialog_info, R.color.white).setCancelable(false).setPositiveButtonText(getString(R.string.editar)).setPositiveButtonbackgroundColor(R.color.colorAccent).setPositiveButtonTextColor(R.color.white).setPositiveButtonClick(new com.awesomedialog.blennersilva.awesomedialoglibrary.interfaces.Closure() { @java.lang.Override public void exec() { android.content.Intent intent = new android.content.Intent(getContext(), com.rodrigordgfs.buscatroco.Cadastros.AddPostoTrocoActivity.class); intent.putExtra(Utils.KEY, local.getKey()); startActivity(intent); } }).setNegativeButtonText(getString(R.string.excluir))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/410/buggy-version/app.src.main.java.com.rodrigordgfs.buscatroco.Fragments.PostoTrocaFragment.java", "BodyUseAPI": [], "Fixed commit": "49a54d32c6523abd5fc84871f1749792bf3a762e", "Url": "https://api.github.com/repos/rodrigordgfs/Busca-Troco", "Date": "2018-10-02T02:40:36Z"},
{"Line": "144=>144", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeInfoDialog(getActivity()).setTitle(local.getLocal()).setMessage(java.lang.String)=>new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeInfoDialog(getActivity()).setTitle(local.getLocal()).setMessage(R.string.o_que_deseja_fazer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/410/buggy-version/app.src.main.java.com.rodrigordgfs.buscatroco.Fragments.PostoTrocaFragment.java", "BodyUseAPI": [], "Fixed commit": "49a54d32c6523abd5fc84871f1749792bf3a762e", "Url": "https://api.github.com/repos/rodrigordgfs/Busca-Troco", "Date": "2018-10-02T02:40:36Z"},
{"Line": "144=>144", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeInfoDialog(getActivity()).setTitle(local.getLocal()).setMessage(\"O que voc\u00ea deseja fazer?\").setColoredCircle(R.color.colorAccent).setDialogIconAndColor(R.drawable.ic_dialog_info, R.color.white).setCancelable(false).setPositiveButtonText(java.lang.String)=>new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeInfoDialog(getActivity()).setTitle(local.getLocal()).setMessage(R.string.o_que_deseja_fazer).setColoredCircle(R.color.colorAccent).setDialogIconAndColor(R.drawable.ic_dialog_info, R.color.white).setCancelable(false).setPositiveButtonText(getString(R.string.editar))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/410/buggy-version/app.src.main.java.com.rodrigordgfs.buscatroco.Fragments.PostoTrocaFragment.java", "BodyUseAPI": [], "Fixed commit": "49a54d32c6523abd5fc84871f1749792bf3a762e", "Url": "https://api.github.com/repos/rodrigordgfs/Busca-Troco", "Date": "2018-10-02T02:40:36Z"},
{"Line": "237=>237", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.google.firebase.storage.StorageReference.putFile(android.net.Uri)=>com.google.firebase.storage.StorageReference.child(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/410/buggy-version/app.src.main.java.com.rodrigordgfs.buscatroco.Cadastros.AddPostoTrocoActivity.java", "BodyUseAPI": [], "Fixed commit": "49a54d32c6523abd5fc84871f1749792bf3a762e", "Url": "https://api.github.com/repos/rodrigordgfs/Busca-Troco", "Date": "2018-10-02T02:40:36Z"},
{"Line": "269=>269", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.google.firebase.storage.StorageReference.child(java.lang.String)=>com.google.firebase.storage.StorageReference.putFile(android.net.Uri)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/410/buggy-version/app.src.main.java.com.rodrigordgfs.buscatroco.Cadastros.AddNovidadeActivity.java", "BodyUseAPI": [], "Fixed commit": "49a54d32c6523abd5fc84871f1749792bf3a762e", "Url": "https://api.github.com/repos/rodrigordgfs/Busca-Troco", "Date": "2018-10-02T02:40:36Z"},
{"Line": "223=>223", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeSuccessDialog(this).setTitle(\"Excluir\").setMessage(\"Deseja realmente esta Entidade Beneficiada?\").setColoredCircle(R.color.colorAccent).setDialogIconAndColor(R.drawable.ic_dialog_warning, R.color.white).setCancelable(false).setPositiveButtonText(java.lang.String)=>new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeSuccessDialog(this).setTitle(ctEnt.getTitle()).setMessage(R.string.deseja_excluir_entidade).setColoredCircle(R.color.colorAccent).setDialogIconAndColor(R.drawable.ic_dialog_warning, R.color.white).setCancelable(false).setPositiveButtonText(getString(R.string.sim))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/410/buggy-version/app.src.main.java.com.rodrigordgfs.buscatroco.EntidadeBeneficiadaActivity.java", "BodyUseAPI": [], "Fixed commit": "49a54d32c6523abd5fc84871f1749792bf3a762e", "Url": "https://api.github.com/repos/rodrigordgfs/Busca-Troco", "Date": "2018-10-02T02:40:36Z"},
{"Line": "223=>223", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeSuccessDialog(this).setTitle(\"Excluir\").setMessage(\"Deseja realmente esta Entidade Beneficiada?\").setColoredCircle(R.color.colorAccent).setDialogIconAndColor(R.drawable.ic_dialog_warning, R.color.white).setCancelable(false).setPositiveButtonText(\"Sim\").setPositiveButtonbackgroundColor(R.color.colorAccent).setPositiveButtonTextColor(R.color.white).setPositiveButtonClick(new com.awesomedialog.blennersilva.awesomedialoglibrary.interfaces.Closure() { @java.lang.Override public void exec() { dialog = new android.app.ProgressDialog(com.rodrigordgfs.buscatroco.EntidadeBeneficiadaActivity.this); dialog.setMessage(getString(R.string.carregando)); dialog.setCanceledOnTouchOutside(false); dialog.setIndeterminate(true); dialog.show(); com.google.firebase.database.DatabaseReference database = com.rodrigordgfs.buscatroco.Utils.getDatabase().getReference().child(Utils.ENTIDADES).child(key); database.removeValue().addOnCompleteListener(new com.google.android.gms.tasks.OnCompleteListener<java.lang.Void>() { @java.lang.Override public void onComplete(@android.support.annotation.NonNull com.google.android.gms.tasks.Task<java.lang.Void> task) { if (task.isSuccessful()) { com.google.firebase.storage.StorageReference storage = com.rodrigordgfs.buscatroco.Utils.getStorage().getReference().child(Utils.ENTIDADES).child(key); storage.delete().addOnCompleteListener(new com.google.android.gms.tasks.OnCompleteListener<java.lang.Void>() { @java.lang.Override public void onComplete(@android.support.annotation.NonNull com.google.android.gms.tasks.Task<java.lang.Void> task) { if (task.isSuccessful()) { if (dialog.isShowing()) { dialog.dismiss(); } new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeSuccessDialog(com.rodrigordgfs.buscatroco.EntidadeBeneficiadaActivity.this).setTitle(R.string.busca_troco).setMessage(R.string.excluido_sucesso).setColoredCircle(R.color.colorGreen).setDialogIconAndColor(R.drawable.ic_dialog_info, R.color.white).setCancelable(false).setPositiveButtonText(getString(R.string.ok)).setPositiveButtonbackgroundColor(R.color.colorGreen).setPositiveButtonTextColor(R.color.white).setPositiveButtonClick(new com.awesomedialog.blennersilva.awesomedialoglibrary.interfaces.Closure() { @java.lang.Override public void exec() { finish(); } }).show(); } } }).addOnFailureListener(new com.google.android.gms.tasks.OnFailureListener() { @java.lang.Override public void onFailure(@android.support.annotation.NonNull java.lang.Exception e) { SnackError(e.getMessage()); } }); } } }).addOnFailureListener(new com.google.android.gms.tasks.OnFailureListener() { @java.lang.Override public void onFailure(@android.support.annotation.NonNull java.lang.Exception e) { if (dialog.isShowing()) { dialog.dismiss(); } SnackError(e.getMessage()); } }); } }).setNegativeButtonText(java.lang.String)=>new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeSuccessDialog(this).setTitle(ctEnt.getTitle()).setMessage(R.string.deseja_excluir_entidade).setColoredCircle(R.color.colorAccent).setDialogIconAndColor(R.drawable.ic_dialog_warning, R.color.white).setCancelable(false).setPositiveButtonText(getString(R.string.sim)).setPositiveButtonbackgroundColor(R.color.colorAccent).setPositiveButtonTextColor(R.color.white).setPositiveButtonClick(new com.awesomedialog.blennersilva.awesomedialoglibrary.interfaces.Closure() { @java.lang.Override public void exec() { dialog = new android.app.ProgressDialog(com.rodrigordgfs.buscatroco.EntidadeBeneficiadaActivity.this); dialog.setMessage(getString(R.string.carregando)); dialog.setCanceledOnTouchOutside(false); dialog.setIndeterminate(true); dialog.show(); com.google.firebase.database.DatabaseReference database = com.rodrigordgfs.buscatroco.Utils.getDatabase().getReference().child(Utils.ENTIDADES).child(key); database.removeValue().addOnCompleteListener(new com.google.android.gms.tasks.OnCompleteListener<java.lang.Void>() { @java.lang.Override public void onComplete(@android.support.annotation.NonNull com.google.android.gms.tasks.Task<java.lang.Void> task) { if (task.isSuccessful()) { com.google.firebase.storage.StorageReference storage = com.rodrigordgfs.buscatroco.Utils.getStorage().getReference().child(Utils.ENTIDADES).child(key); storage.delete().addOnCompleteListener(new com.google.android.gms.tasks.OnCompleteListener<java.lang.Void>() { @java.lang.Override public void onComplete(@android.support.annotation.NonNull com.google.android.gms.tasks.Task<java.lang.Void> task) { if (task.isSuccessful()) { if (dialog.isShowing()) { dialog.dismiss(); } new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeSuccessDialog(com.rodrigordgfs.buscatroco.EntidadeBeneficiadaActivity.this).setTitle(R.string.busca_troco).setMessage(R.string.excluido_sucesso).setColoredCircle(R.color.colorGreen).setDialogIconAndColor(R.drawable.ic_dialog_info, R.color.white).setCancelable(false).setPositiveButtonText(getString(R.string.ok)).setPositiveButtonbackgroundColor(R.color.colorGreen).setPositiveButtonTextColor(R.color.white).setPositiveButtonClick(new com.awesomedialog.blennersilva.awesomedialoglibrary.interfaces.Closure() { @java.lang.Override public void exec() { finish(); } }).show(); } } }).addOnFailureListener(new com.google.android.gms.tasks.OnFailureListener() { @java.lang.Override public void onFailure(@android.support.annotation.NonNull java.lang.Exception e) { SnackError(e.getMessage()); } }); } } }).addOnFailureListener(new com.google.android.gms.tasks.OnFailureListener() { @java.lang.Override public void onFailure(@android.support.annotation.NonNull java.lang.Exception e) { if (dialog.isShowing()) { dialog.dismiss(); } SnackError(e.getMessage()); } }); } }).setNegativeButtonText(getString(R.string.nao))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/410/buggy-version/app.src.main.java.com.rodrigordgfs.buscatroco.EntidadeBeneficiadaActivity.java", "BodyUseAPI": [], "Fixed commit": "49a54d32c6523abd5fc84871f1749792bf3a762e", "Url": "https://api.github.com/repos/rodrigordgfs/Busca-Troco", "Date": "2018-10-02T02:40:36Z"},
{"Line": "223=>223", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeSuccessDialog(this).setTitle(\"Excluir\").setMessage(java.lang.String)=>new com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeSuccessDialog(this).setTitle(ctEnt.getTitle()).setMessage(R.string.deseja_excluir_entidade)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/410/buggy-version/app.src.main.java.com.rodrigordgfs.buscatroco.EntidadeBeneficiadaActivity.java", "BodyUseAPI": [], "Fixed commit": "49a54d32c6523abd5fc84871f1749792bf3a762e", "Url": "https://api.github.com/repos/rodrigordgfs/Busca-Troco", "Date": "2018-10-02T02:40:36Z"},
{"Line": "223=>223", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeSuccessDialog.setTitle(java.lang.String)=>com.awesomedialog.blennersilva.awesomedialoglibrary.AwesomeSuccessDialog.setTitle(ctEnt.getTitle())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/410/buggy-version/app.src.main.java.com.rodrigordgfs.buscatroco.EntidadeBeneficiadaActivity.java", "BodyUseAPI": [], "Fixed commit": "49a54d32c6523abd5fc84871f1749792bf3a762e", "Url": "https://api.github.com/repos/rodrigordgfs/Busca-Troco", "Date": "2018-10-02T02:40:36Z"},
{"Line": "114=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.ArrayList<viride.graphics.Layer>.add(viride.graphics.Layer)=>java.util.ArrayList<viride.graphics.Layer>.addAll(java.util.List)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4766/buggy-version/src.viride.graphics.Renderer.java", "BodyUseAPI": [], "Fixed commit": "b8b35336c2191a000f5fc281211ec9154cc512ee", "Url": "https://api.github.com/repos/michalwa/Viride", "Date": "2018-01-02T16:02:40Z"},
{"Line": "34=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "viride.graphics.Renderer.addLayer(viride.graphics.Layer)=>viride.graphics.Renderer.addLayers(viride.graphics.Layer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4766/buggy-version/src.viride.graphics.Renderer.java", "BodyUseAPI": [], "Fixed commit": "b8b35336c2191a000f5fc281211ec9154cc512ee", "Url": "https://api.github.com/repos/michalwa/Viride", "Date": "2018-01-02T16:02:40Z"},
{"Line": "180=>180", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ru.lod_misis.ithappened.Statistics.Facts.Fact.calculatePriority()=>ru.lod_misis.ithappened.Statistics.Facts.Fact.calculateData()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9414/buggy-version/Android.ItHappenedAndroid.app.src.main.java.ru.lod_misis.ithappened.Fragments.StatisticsFragment.java", "BodyUseAPI": [], "Fixed commit": "9c4b9ea63fb976ffaa418a0071ae4f295dcd5925", "Url": "https://api.github.com/repos/LeagueOfDevelopers/ItHappened", "Date": "2018-03-24T08:12:41Z"},
{"Line": "157=>157", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ru.lod_misis.ithappened.Statistics.Facts.Fact.calculatePriority()=>ru.lod_misis.ithappened.Statistics.Facts.Fact.calculateData()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9414/buggy-version/Android.ItHappenedAndroid.app.src.main.java.ru.lod_misis.ithappened.Fragments.StatisticsFragment.java", "BodyUseAPI": [], "Fixed commit": "9c4b9ea63fb976ffaa418a0071ae4f295dcd5925", "Url": "https://api.github.com/repos/LeagueOfDevelopers/ItHappened", "Date": "2018-03-24T08:12:41Z"},
{"Line": "19=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.springframework.data.jpa.repository.JpaRepository<T, java.lang.Long>.delete(long)=>org.springframework.data.jpa.repository.JpaRepository<T, java.lang.Long>.deleteById(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5583/buggy-version/src.main.java.com.services.customer.service.GenericService.java", "BodyUseAPI": [], "Fixed commit": "436640834f1fbe2fdf283398457c9875f1ac016d", "Url": "https://api.github.com/repos/manjurajv/CustomerEngagement", "Date": "2018-04-20T18:23:14Z"},
{"Line": "15=>15", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.springframework.data.jpa.repository.JpaRepository<T, java.lang.Long>.findOne(long)=>org.springframework.data.jpa.repository.JpaRepository<T, java.lang.Long>.getOne(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5583/buggy-version/src.main.java.com.services.customer.service.GenericService.java", "BodyUseAPI": [], "Fixed commit": "436640834f1fbe2fdf283398457c9875f1ac016d", "Url": "https://api.github.com/repos/manjurajv/CustomerEngagement", "Date": "2018-04-20T18:23:14Z"},
{"Line": "106=>106", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "it.algos.vaadbase.ui.MainLayout.warn(((\"Sono state trovate: \" + (routes.size())) + \" routes\"))=>it.algos.vaadbase.ui.MainLayout.info(((\"Sono state trovate: \" + (routes.size())) + \" routes\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8282/buggy-version/src.main.java.it.algos.vaadbase.ui.MainLayout.java", "BodyUseAPI": [], "Fixed commit": "c9594c462532d2d4f7419c1116df0d9a6f4e63c3", "Url": "https://api.github.com/repos/algos-soft/vaadbase", "Date": "2018-06-27T19:48:52Z"},
{"Line": "111=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.netxms.client.datacollection.DciDataRow.getValueAsDouble()=>org.netxms.client.datacollection.DciDataRow.getRawValueAsDouble()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7880/buggy-version/src.server.nxapisrv.java.src.main.java.org.netxms.websvc.handlers.GrafanaDataCollection.java", "BodyUseAPI": [], "Fixed commit": "4a4c18e5169c2f177e7370efe95c8b4fb186a877", "Url": "https://api.github.com/repos/netxms/netxms", "Date": "2018-02-19T14:56:39Z"},
{"Line": "101=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.LayoutInflater.from(this).inflate(R.layout.view_custom,<nulltype>)=>android.view.LayoutInflater.from(this).inflate(R.layout.tag_selector_price_right,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5510/buggy-version/RangeBarSample.src.main.java.com.appyvet.rangebarsample.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "6f42d5d1df572d2b6e1b60151dee16b59a81a58c", "Url": "https://api.github.com/repos/daawa/material-range-bar", "Date": "2018-01-22T05:09:56Z"},
{"Line": "71=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "context.getResource(\"/\").getPath()=>javax.servlet.ServletContext.getRealPath(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6934/buggy-version/src.main.java.io.github.jhipster.truffle.web.rest.ImageResource.java", "BodyUseAPI": [], "Fixed commit": "ad191869124e0a046f699339f090fef03e9253d8", "Url": "https://api.github.com/repos/whlee21/jhiptruffle", "Date": "2018-07-13T02:52:39Z"},
{"Line": "99=>99", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mmall.dao.ShopMapper.selectByShopname(originUser.getShopname())=>com.mmall.dao.ShopMapper.selectByShopnameUsername(originUser.getShopname(),originUser.getUsername())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8477/buggy-version/src.main.java.com.mmall.service.impl.UserServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "d3e0ca6030d256d0115c5ed0870f43c9dd418f3d", "Url": "https://api.github.com/repos/Psilocine/mmall-learning", "Date": "2018-04-23T04:43:23Z"},
{"Line": "94=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.qiyei.sdk.view.xrecycler.base.OnItemClickListener.click(android.view.View,T)=>com.qiyei.sdk.view.xrecycler.base.OnItemClickListener.click(android.view.View,T,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9756/buggy-version/sdk.src.main.java.com.qiyei.sdk.view.xrecycler.base.BaseRecyclerAdapter.java", "BodyUseAPI": [], "Fixed commit": "3fc04918f723849d866fe62082908fb65c2e8507", "Url": "https://api.github.com/repos/qiyei2015/EssayJoke", "Date": "2018-01-13T14:15:35Z"},
{"Line": "86=>86", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.qiyei.sdk.view.xrecycler.base.OnItemClickListener.click(android.view.View,T)=>com.qiyei.sdk.view.xrecycler.base.OnItemClickListener.click(android.view.View,T,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9756/buggy-version/sdk.src.main.java.com.qiyei.sdk.view.xrecycler.base.BaseRecyclerAdapter.java", "BodyUseAPI": [], "Fixed commit": "3fc04918f723849d866fe62082908fb65c2e8507", "Url": "https://api.github.com/repos/qiyei2015/EssayJoke", "Date": "2018-01-13T14:15:35Z"},
{"Line": "438=>438", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.fossasia.pslab.activity.WaveGeneratorActivity.getString(R.string.deg_text)=>org.fossasia.pslab.activity.WaveGeneratorActivity.getString(R.string.unit_hz)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2662/buggy-version/app.src.main.java.org.fossasia.pslab.activity.WaveGeneratorActivity.java", "BodyUseAPI": [], "Fixed commit": "fff77d27d3511e71d1cedb4e4e6b521f011ab198", "Url": "https://api.github.com/repos/abhinavraj23/pslab-android", "Date": "2018-07-17T19:33:37Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "hotel.entities.Hotel.book(hotel.entities.Room,hotel.entities.Guest,java.util.Date,int,int,hotel.credit.CreditCard)=>hotel.entities.Hotel.book(hotel.entities.Room,hotel.entities.Guest,java.util.Date,int,int,hotel.HotelHelper)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2326/buggy-version/src.hotel.HotelHelper.java", "BodyUseAPI": [], "Fixed commit": "e6d7559603820f14b7342e9c1c6e3159c9e6dfac", "Url": "https://api.github.com/repos/bcurby/Group4-Assign3", "Date": "2018-09-25T03:16:32Z"},
{"Line": "46=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.ws.rs.core.Response.ok().entity(com.thecat.loginService.entities.UserJson)=>javax.ws.rs.core.Response.ok().entity(org.json.JSONObject)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8759/buggy-version/src.main.java.com.thecat.loginService.endPoint.LoginEndPoint.java", "BodyUseAPI": [], "Fixed commit": "a1fa39ff9f4d2c512c626d80499aef768e35abd1", "Url": "https://api.github.com/repos/TheCatCoders/loginService", "Date": "2018-01-01T21:52:24Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.ws.rs.core.Response.ok().entity(com.thecat.loginService.entities.UserJson)=>javax.ws.rs.core.Response.ok().entity(org.json.JSONObject)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8759/buggy-version/src.main.java.com.thecat.loginService.endPoint.LoginEndPoint.java", "BodyUseAPI": [], "Fixed commit": "a1fa39ff9f4d2c512c626d80499aef768e35abd1", "Url": "https://api.github.com/repos/TheCatCoders/loginService", "Date": "2018-01-01T21:52:24Z"},
{"Line": "859=>864", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.catrobat.catroid.ui.fragment.FormulaEditorFragment.formulaEditorEditText.getHistory().discardAllChanges()=>org.catrobat.catroid.ui.fragment.FormulaEditorFragment.formulaEditorEditText.getHistory().updateToStartingPoint()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8696/buggy-version/catroid.src.main.java.org.catrobat.catroid.ui.fragment.FormulaEditorFragment.java", "BodyUseAPI": [], "Fixed commit": "4149836f2c56e1163a0ba8dc777670b7c12e9d1e", "Url": "https://api.github.com/repos/PlantinumX/Catroid", "Date": "2018-06-05T18:53:36Z"},
{"Line": "50=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new android.app.backup.FileBackupHelper(this, DatabaseHelper.KEY_FILE, DatabaseHelper.SETTINGS_FILE)=>new android.app.backup.FileBackupHelper(this, Constants.FILENAME_ENCRYPTED_KEY, Constants.FILENAME_DATABASE, Constants.FILENAME_DATABASE_BACKUP)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4905/buggy-version/app.src.main.java.org.shadowice.flocke.andotp.Utilities.BackupAgent.java", "BodyUseAPI": [], "Fixed commit": "467b058d011a2c36cc5d6bdb7447deefe0336e5f", "Url": "https://api.github.com/repos/x3rAx/andOTP", "Date": "2018-01-11T14:22:42Z"},
{"Line": "128=>128", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.debug(java.lang.String,int)=>org.slf4j.Logger.debug(java.lang.String,int,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4539/buggy-version/graylog2-server.src.main.java.org.graylog2.security.AccessTokenServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "977733172c4761c8aa4070e86ce9f55ec865df0e", "Url": "https://api.github.com/repos/radykal-com/graylog2-server", "Date": "2018-03-02T11:25:29Z"},
{"Line": "128=>128", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.debug(java.lang.String,int)=>org.slf4j.Logger.debug(java.lang.String,int,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4539/buggy-version/graylog2-server.src.main.java.org.graylog2.security.AccessTokenServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "977733172c4761c8aa4070e86ce9f55ec865df0e", "Url": "https://api.github.com/repos/radykal-com/graylog2-server", "Date": "2018-03-02T11:25:29Z"},
{"Line": "75=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "event.getBlock().setType(Material.AIR)=>org.bukkit.event.block.BlockPlaceEvent.setCancelled(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9096/buggy-version/src.auldo.plugin.listener.PlayerActionListener.java", "BodyUseAPI": [], "Fixed commit": "e5afe69d63dcf1465e32a7e0f3d0ceb082c558c1", "Url": "https://api.github.com/repos/auldo/SpigotEconomy", "Date": "2018-09-24T18:08:19Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.uva.jomi.ui.Questionair.setVisibility(boolean)=>org.uva.jomi.ui.Questionnaire.setVisibility(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8660/buggy-version/Jorick_Mihai.src.org.uva.jomi.QL.java", "BodyUseAPI": [], "Fixed commit": "564dfa0a8328f2917c80418c3375bdf51e44dea7", "Url": "https://api.github.com/repos/software-engineering-amsterdam/endless-ql", "Date": "2018-03-14T12:59:36Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.uva.jomi.ui.Questionair.setVisibility(boolean)=>org.uva.jomi.ui.Questionnaire.setVisibility(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8660/buggy-version/Jorick_Mihai.src.org.uva.jomi.QL.java", "BodyUseAPI": [], "Fixed commit": "564dfa0a8328f2917c80418c3375bdf51e44dea7", "Url": "https://api.github.com/repos/software-engineering-amsterdam/endless-ql", "Date": "2018-03-14T12:59:36Z"},
{"Line": "255=>254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.HashMap<java.lang.String, java.util.HashSet<java.lang.String>>.entrySet()=>java.util.HashMap<java.lang.String, java.util.HashSet<java.lang.String>>.keySet()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8671/buggy-version/src.main.java.FilterContextTag.java", "BodyUseAPI": [], "Fixed commit": "55aecbfa2a55044e27ab46d6adf1823122638a9a", "Url": "https://api.github.com/repos/cheetah90/SummarizeMatchingResult", "Date": "2018-01-20T22:45:13Z"},
{"Line": "106=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new hearscreening.rcs.ei.tum.de.sound4all.PatientModel(null, et_family_name.getText().toString(), et_given_name.getText().toString(), tv_date.getText().toString(), java.lang.Integer.parseInt(et_height.getText().toString()), java.lang.Integer.parseInt(et_weight.getText().toString()))=>new hearscreening.rcs.ei.tum.de.sound4all.PatientModel(0, et_family_name.getText().toString(), et_given_name.getText().toString(), tv_date.getText().toString(), java.lang.Integer.parseInt(et_height.getText().toString()), java.lang.Integer.parseInt(et_weight.getText().toString()))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9472/buggy-version/app.app.src.main.java.hearscreening.rcs.ei.tum.de.sound4all.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "d0fc2ede5ffa1f2a42371ad6866756e4a2df1bd9", "Url": "https://api.github.com/repos/alxhoff/sound4all_app", "Date": "2018-10-10T10:02:16Z"},
{"Line": "502=>505", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "hearscreening.rcs.ei.tum.de.sound4all.PatientModel.setWeight(int)=>hearscreening.rcs.ei.tum.de.sound4all.PatientModel.setWeight((org.apache.commons.lang3.StringUtils.isNotBlank(tmp_value) ? java.lang.Integer.parseInt(tmp_value) : 0))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9472/buggy-version/app.app.src.main.java.hearscreening.rcs.ei.tum.de.sound4all.NFCHelper.java", "BodyUseAPI": [], "Fixed commit": "d0fc2ede5ffa1f2a42371ad6866756e4a2df1bd9", "Url": "https://api.github.com/repos/alxhoff/sound4all_app", "Date": "2018-10-10T10:02:16Z"},
{"Line": "487=>488", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "hearscreening.rcs.ei.tum.de.sound4all.PatientModel.setID(int)=>hearscreening.rcs.ei.tum.de.sound4all.PatientModel.setID((org.apache.commons.lang3.StringUtils.isNotBlank(tmp_value) ? java.lang.Integer.parseInt(tmp_value) : 0))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9472/buggy-version/app.app.src.main.java.hearscreening.rcs.ei.tum.de.sound4all.NFCHelper.java", "BodyUseAPI": [], "Fixed commit": "d0fc2ede5ffa1f2a42371ad6866756e4a2df1bd9", "Url": "https://api.github.com/repos/alxhoff/sound4all_app", "Date": "2018-10-10T10:02:16Z"},
{"Line": "499=>501", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "hearscreening.rcs.ei.tum.de.sound4all.PatientModel.setHeight(int)=>hearscreening.rcs.ei.tum.de.sound4all.PatientModel.setHeight((org.apache.commons.lang3.StringUtils.isNotBlank(tmp_value) ? java.lang.Integer.parseInt(tmp_value) : 0))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9472/buggy-version/app.app.src.main.java.hearscreening.rcs.ei.tum.de.sound4all.NFCHelper.java", "BodyUseAPI": [], "Fixed commit": "d0fc2ede5ffa1f2a42371ad6866756e4a2df1bd9", "Url": "https://api.github.com/repos/alxhoff/sound4all_app", "Date": "2018-10-10T10:02:16Z"},
{"Line": "22=>22", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.intellij.openapi.vfs.VirtualFile.equals(com.intellij.openapi.vfs.VirtualFile)=>file.getPath().equals(testFile.getPath())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2552/buggy-version/src.main.java.io.ams340.ideaplugin.tddo.service.FileService.java", "BodyUseAPI": [], "Fixed commit": "8ff5100c5c5b6fe439792c8f8b8716b7d412df91", "Url": "https://api.github.com/repos/ams340/intellij-plugin-TdDo", "Date": "2018-05-31T12:53:51Z"},
{"Line": "79=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.time.LocalDateTime.isAfter(java.time.LocalDateTime)=>java.time.LocalDateTime.isBefore(java.time.LocalDateTime)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4737/buggy-version/optashift-employee-rostering-shared.src.main.java.org.optaplanner.openshift.employeerostering.shared.roster.RosterState.java", "BodyUseAPI": [], "Fixed commit": "930b2a858d68c9807c75751d7367d188447c2b69", "Url": "https://api.github.com/repos/kiegroup/optaweb-employee-rostering", "Date": "2018-05-02T12:58:00Z"},
{"Line": "64=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.time.OffsetDateTime.isAfter(java.time.OffsetDateTime)=>java.time.OffsetDateTime.isBefore(java.time.OffsetDateTime)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4737/buggy-version/optashift-employee-rostering-shared.src.main.java.org.optaplanner.openshift.employeerostering.shared.roster.RosterState.java", "BodyUseAPI": [], "Fixed commit": "930b2a858d68c9807c75751d7367d188447c2b69", "Url": "https://api.github.com/repos/kiegroup/optaweb-employee-rostering", "Date": "2018-05-02T12:58:00Z"},
{"Line": "168=>168", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "KeyHandlerClient.spaceKey.isPressed()=>micdoodle8.mods.galacticraft.core.tick.KeyHandlerClient.spaceKey.isKeyDown()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5751/buggy-version/src.main.java.com.mjr.extraplanets.client.handlers.MainHandlerClient.java", "BodyUseAPI": [], "Fixed commit": "0d83385174e46b105302178c5dab3fa4c5b93443", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-04-29T00:21:14Z"},
{"Line": "845=>845", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "wifiwizard2.WifiWizard2.length()=>java.lang.String.length()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5398/buggy-version/src.android.wifiwizard2.WifiWizard2.java", "BodyUseAPI": [], "Fixed commit": "b09bb330267120a27ffeb46893ea906d2f81726f", "Url": "https://api.github.com/repos/tripflex/WifiWizard2", "Date": "2018-01-05T20:55:12Z"},
{"Line": "845=>845", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "wifiwizard2.WifiWizard2.substring(int,((ssid.length()) - 1))=>java.lang.String.substring(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5398/buggy-version/src.android.wifiwizard2.WifiWizard2.java", "BodyUseAPI": [], "Fixed commit": "b09bb330267120a27ffeb46893ea906d2f81726f", "Url": "https://api.github.com/repos/tripflex/WifiWizard2", "Date": "2018-01-05T20:55:12Z"},
{"Line": "33=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "http.authorizeRequests().antMatchers(\"/api/**\").permitAll().anyRequest().authenticated().antMatchers(\"/admin/**\").hasAuthority(\"DIRECTOR\").and().formLogin().failureUrl(\"/login?error=true\").defaultSuccessUrl(java.lang.String)=>http.authorizeRequests().antMatchers(\"/api/**\").permitAll().anyRequest().authenticated().antMatchers(\"/admin/**\").hasAuthority(\"DIRECTOR\").and().formLogin().failureUrl(\"/login?error=true\").defaultSuccessUrl(java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2019/buggy-version/MumRoomSys.src.main.java.edu.mum.roomsys.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "7de1f4c63174aeb56add6b30d7b8475d7015c819", "Url": "https://api.github.com/repos/nngo2/MumRoomSys", "Date": "2018-04-23T12:49:09Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "http.authorizeRequests().antMatchers(\"/api/**\").permitAll().anyRequest().authenticated().antMatchers(\"/admin/**\").hasAuthority(\"DIRECTOR\").and().formLogin().failureUrl(\"/login?error=true\").defaultSuccessUrl(java.lang.String)=>http.authorizeRequests().antMatchers(\"/api/**\").permitAll().anyRequest().authenticated().antMatchers(\"/admin/**\").hasAuthority(\"DIRECTOR\").and().formLogin().failureUrl(\"/login?error=true\").defaultSuccessUrl(java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2019/buggy-version/MumRoomSys.src.main.java.edu.mum.roomsys.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "7de1f4c63174aeb56add6b30d7b8475d7015c819", "Url": "https://api.github.com/repos/nngo2/MumRoomSys", "Date": "2018-04-23T12:49:09Z"},
{"Line": "74=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "edu.mum.roomsys.dao.RoleDao.findByName(java.lang.String)=>edu.mum.roomsys.dao.RoleDao.findByName(RoleType.DIRECTOR.toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2019/buggy-version/MumRoomSys.src.main.java.edu.mum.roomsys.service.StudentService.java", "BodyUseAPI": [], "Fixed commit": "7de1f4c63174aeb56add6b30d7b8475d7015c819", "Url": "https://api.github.com/repos/nngo2/MumRoomSys", "Date": "2018-04-23T12:49:09Z"},
{"Line": "75=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "edu.mum.roomsys.dao.RoleDao.findByName(java.lang.String)=>edu.mum.roomsys.dao.RoleDao.findByName(RoleType.STUDENT.toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2019/buggy-version/MumRoomSys.src.main.java.edu.mum.roomsys.service.StudentService.java", "BodyUseAPI": [], "Fixed commit": "7de1f4c63174aeb56add6b30d7b8475d7015c819", "Url": "https://api.github.com/repos/nngo2/MumRoomSys", "Date": "2018-04-23T12:49:09Z"},
{"Line": "88=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.commons.io.FileUtils.forceMkdirParent(java.io.File)=>org.apache.commons.io.FileUtils.forceMkdir(java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4117/buggy-version/src.main.java.com.github.upcraftlp.votifier.config.RewardParser.java", "BodyUseAPI": [], "Fixed commit": "656d9ec853cd1ccf8aaa5ffb42536a462ff1e4a8", "Url": "https://api.github.com/repos/UpcraftLP/Votifier", "Date": "2018-07-02T12:15:08Z"},
{"Line": "271=>271", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "context.getResources().getInteger(R.integer.ail__connection_timeout)=>context.getResources().getInteger(R.integer.ail__connection_timeout_ms)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/789/buggy-version/imageloader.src.main.java.com.guardanis.imageloader.ImageLoader.java", "BodyUseAPI": [], "Fixed commit": "69947d5a1b97db8eadf5e81cba0aa94344e050b1", "Url": "https://api.github.com/repos/mattsilber/imageloader", "Date": "2018-07-17T18:06:01Z"},
{"Line": "272=>272", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "context.getResources().getInteger(R.integer.ail__read_timeout)=>context.getResources().getInteger(R.integer.ail__read_timeout_ms)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/789/buggy-version/imageloader.src.main.java.com.guardanis.imageloader.ImageLoader.java", "BodyUseAPI": [], "Fixed commit": "69947d5a1b97db8eadf5e81cba0aa94344e050b1", "Url": "https://api.github.com/repos/mattsilber/imageloader", "Date": "2018-07-17T18:06:01Z"},
{"Line": "93=>97", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javax.persistence.EntityManager.find(java.lang.Class,sensorData.getString(\"value_type\"))=>javax.persistence.EntityManager.find(java.lang.Class,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6617/buggy-version/feinstaubr-web.src.main.java.de.feinstaubr.server.boundary.SensorApi.java", "BodyUseAPI": [], "Fixed commit": "aecad660d4ec0c343480e462d2bcdda152f07675", "Url": "https://api.github.com/repos/albert0815/feinstaubr", "Date": "2018-03-14T20:52:52Z"},
{"Line": "75=>68", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Map<java.lang.String, io.shardingsphere.proxy.backend.netty.client.BackendNettyClient>.values()=>java.util.Map<java.lang.String, io.shardingsphere.proxy.backend.netty.client.BackendNettyClient>.put(java.lang.String,io.shardingsphere.proxy.backend.netty.client.BackendNettyClient)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2281/buggy-version/sharding-proxy.src.main.java.io.shardingsphere.proxy.backend.netty.client.BackendNettyClientManager.java", "BodyUseAPI": [], "Fixed commit": "37d25ecb4214dc16bff1fc9b07eaff21f2c3e4f4", "Url": "https://api.github.com/repos/duyouqian/sharding-jdbc", "Date": "2018-09-05T09:21:23Z"},
{"Line": "401=>403", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.android.gms.games.Games.getRealTimeMultiplayerClient(this, com.google.android.gms.auth.api.signin.GoogleSignIn.getLastSignedInAccount(this)).getSelectOpponentsIntent(int,int,boolean)=>com.google.android.gms.games.Games.getRealTimeMultiplayerClient(this, com.google.android.gms.auth.api.signin.GoogleSignIn.getLastSignedInAccount(this)).getSelectOpponentsIntent(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9703/buggy-version/android.src.com.mygdx.game.AndroidLauncher.java", "BodyUseAPI": [], "Fixed commit": "5f1fbceac517e5763c60585f7bf1f3955d3d8f39", "Url": "https://api.github.com/repos/haakoaho/Squarz", "Date": "2018-04-19T12:58:37Z"},
{"Line": "363=>363", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Toast.makeText(android.content.Context,java.lang.String,Toast.LENGTH_SHORT)=>android.widget.Toast.makeText(android.content.Context,java.lang.String,Toast.LENGTH_LONG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/875/buggy-version/app.src.main.java.com.example.anna.fr.utils.AddUserCommentActivity.java", "BodyUseAPI": [], "Fixed commit": "e93cff698ab525744ffe8b6b47521f7115bc6b2b", "Url": "https://api.github.com/repos/Anna-Tian/FR_Group_7", "Date": "2018-05-24T07:46:11Z"},
{"Line": "112=>112", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.common.collect.Iterators.removeIf(java.util.Iterator<java.lang.ref.SoftReference<java.util.List<com.datastax.driver.core.Row>>>,com.google.common.base.Predicates.alwaysTrue())=>java.util.Iterator<java.lang.ref.SoftReference<java.util.List<com.datastax.driver.core.Row>>>.forEachRemaining(java.lang.ref.Reference::clear)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9413/buggy-version/sor.src.main.java.com.bazaarvoice.emodb.sor.db.cql.CachingRowGroupIterator.java", "BodyUseAPI": [], "Fixed commit": "eadf7bb3e7200b825d887d6db4c80d51f2ebe5ed", "Url": "https://api.github.com/repos/bazaarvoice/emodb", "Date": "2018-01-16T18:45:23Z"},
{"Line": "349=>347", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.http.impl.client.HttpClientBuilder.create()=>org.wso2.carbon.apimgt.impl.utils.APIUtil.getHttpClient(consentURL.getPort(),consentURL.getProtocol())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6313/buggy-version/components.apimgt.org.wso2.carbon.apimgt.impl.src.main.java.org.wso2.carbon.apimgt.impl.utils.SelfSignUpUtil.java", "BodyUseAPI": [], "Fixed commit": "0b4cffa08bd13b94489e00061139216fd10c885c", "Url": "https://api.github.com/repos/wso2/carbon-apimgt", "Date": "2018-04-18T09:05:59Z"},
{"Line": "349=>347", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.apache.http.impl.client.HttpClientBuilder.create().useSystemProperties().build()=>org.wso2.carbon.apimgt.impl.utils.APIUtil.getHttpClient(consentURL.getPort(),consentURL.getProtocol())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6313/buggy-version/components.apimgt.org.wso2.carbon.apimgt.impl.src.main.java.org.wso2.carbon.apimgt.impl.utils.SelfSignUpUtil.java", "BodyUseAPI": [], "Fixed commit": "0b4cffa08bd13b94489e00061139216fd10c885c", "Url": "https://api.github.com/repos/wso2/carbon-apimgt", "Date": "2018-04-18T09:05:59Z"},
{"Line": "46=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, java.lang.Integer>.put(java.lang.String,int)=>java.util.Map<java.lang.String, java.lang.Object>.put(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2051/buggy-version/finalProject.src.main.java.com.kh.planner.favorite.controller.FavoriteController.java", "BodyUseAPI": [], "Fixed commit": "2afd769b755e879c890f1432fe0adf996929aff3", "Url": "https://api.github.com/repos/uik7300/finalProject", "Date": "2018-08-25T05:08:39Z"},
{"Line": "45=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, java.lang.Integer>.put(java.lang.String,int)=>java.util.Map<java.lang.String, java.lang.Object>.put(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2051/buggy-version/finalProject.src.main.java.com.kh.planner.favorite.controller.FavoriteController.java", "BodyUseAPI": [], "Fixed commit": "2afd769b755e879c890f1432fe0adf996929aff3", "Url": "https://api.github.com/repos/uik7300/finalProject", "Date": "2018-08-25T05:08:39Z"},
{"Line": "97=>95", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "transaction.hide(from).add(R.id.fragment,android.support.v4.app.Fragment)=>android.support.v4.app.FragmentTransaction.replace(R.id.fragment,android.support.v4.app.Fragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7233/buggy-version/android.app.src.main.java.barcode.along.barcode.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "ac4d4186c5da0287f0388cbd66a5a7285af4df52", "Url": "https://api.github.com/repos/may2250/BarCodeSystem", "Date": "2018-08-22T08:26:59Z"},
{"Line": "96=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "childly.lullabies.lulibalse20.view.activity.view.activity.presentation.presenter.PresenterMainActivity.loadSwipeFragment()=>childly.lullabies.lulibalse20.view.activity.view.activity.presentation.activity.MainActivity.showSwipeFragment()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5287/buggy-version/presentation.src.main.java.childly.lullabies.lulibalse20.view.activity.view.activity.presentation.activity.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "b587150fbc0c776f7f959a476dda89a273e0fd30", "Url": "https://api.github.com/repos/pavelupward/Lullabies", "Date": "2018-01-22T19:49:54Z"},
{"Line": "93=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "childly.lullabies.lulibalse20.view.activity.view.activity.presentation.presenter.PresenterMainActivity.loadSwipeFragment()=>childly.lullabies.lulibalse20.view.activity.view.activity.presentation.activity.MainActivity.showSwipeFragment()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5287/buggy-version/presentation.src.main.java.childly.lullabies.lulibalse20.view.activity.view.activity.presentation.activity.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "b587150fbc0c776f7f959a476dda89a273e0fd30", "Url": "https://api.github.com/repos/pavelupward/Lullabies", "Date": "2018-01-22T19:49:54Z"},
{"Line": "272=>275", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "tgcfs.EA.EngagementPopulation.isEvolveAgent()=>tgcfs.EA.Helpers.EngagementPopulation.isEvolveClassifier()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/731/buggy-version/src.main.java.tgcfs.Framework.TuringLearning.java", "BodyUseAPI": [], "Fixed commit": "c8ed18dda39a868b3eeb43b96b00b0e663c7d937", "Url": "https://api.github.com/repos/AleZonta/tgcfs", "Date": "2018-01-25T14:06:39Z"},
{"Line": "267=>269", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "tgcfs.EA.EngagementPopulation.checkEvolutionOnlyOnePopulation(this.agents.getFittestIndividual().getFitness(),this.classifiers.getFittestIndividual().getFitness(),this.agents.getMaxFitnessAchievable(),this.classifiers.getMaxFitnessAchievable(),tgcfs.Framework.TuringLearning)=>tgcfs.EA.Helpers.EngagementPopulation.checkEvolutionOnlyOnePopulation(this.agents.getFittestIndividual().getFitness(),this.classifiers.getFittestIndividual().getFitness(),this.agents.getMaxFitnessAchievable(),this.classifiers.getMaxFitnessAchievable(),tgcfs.Framework.TuringLearning)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/731/buggy-version/src.main.java.tgcfs.Framework.TuringLearning.java", "BodyUseAPI": [], "Fixed commit": "c8ed18dda39a868b3eeb43b96b00b0e663c7d937", "Url": "https://api.github.com/repos/AleZonta/tgcfs", "Date": "2018-01-25T14:06:39Z"},
{"Line": "269=>271", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "tgcfs.EA.EngagementPopulation.executeCountermeasuresAgainstDisengagement(this.classifiers.getPopulation(),IndividualStatus.CLASSIFIER)=>tgcfs.EA.Helpers.EngagementPopulation.executeCountermeasuresAgainstDisengagement(this.classifiers.getPopulation(),IndividualStatus.CLASSIFIER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/731/buggy-version/src.main.java.tgcfs.Framework.TuringLearning.java", "BodyUseAPI": [], "Fixed commit": "c8ed18dda39a868b3eeb43b96b00b0e663c7d937", "Url": "https://api.github.com/repos/AleZonta/tgcfs", "Date": "2018-01-25T14:06:39Z"},
{"Line": "273=>274", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "tgcfs.EA.EngagementPopulation.isEvolveClassifier()=>tgcfs.EA.Helpers.EngagementPopulation.isEvolveAgent()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/731/buggy-version/src.main.java.tgcfs.Framework.TuringLearning.java", "BodyUseAPI": [], "Fixed commit": "c8ed18dda39a868b3eeb43b96b00b0e663c7d937", "Url": "https://api.github.com/repos/AleZonta/tgcfs", "Date": "2018-01-25T14:06:39Z"},
{"Line": "169=>169", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "tgcfs.EA.EngagementPopulation.setMaxFitness(this.agents.getMaxFitnessAchievable(),this.classifiers.getMaxFitnessAchievable())=>tgcfs.EA.Helpers.EngagementPopulation.setMaxFitness(this.agents.getMaxFitnessAchievable(),this.classifiers.getMaxFitnessAchievable())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/731/buggy-version/src.main.java.tgcfs.Framework.TuringLearning.java", "BodyUseAPI": [], "Fixed commit": "c8ed18dda39a868b3eeb43b96b00b0e663c7d937", "Url": "https://api.github.com/repos/AleZonta/tgcfs", "Date": "2018-01-25T14:06:39Z"},
{"Line": "268=>270", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "tgcfs.EA.EngagementPopulation.executeCountermeasuresAgainstDisengagement(this.agents.getPopulation(),IndividualStatus.AGENT)=>tgcfs.EA.Helpers.EngagementPopulation.executeCountermeasuresAgainstDisengagement(this.agents.getPopulation(),IndividualStatus.AGENT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/731/buggy-version/src.main.java.tgcfs.Framework.TuringLearning.java", "BodyUseAPI": [], "Fixed commit": "c8ed18dda39a868b3eeb43b96b00b0e663c7d937", "Url": "https://api.github.com/repos/AleZonta/tgcfs", "Date": "2018-01-25T14:06:39Z"},
{"Line": "97=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.web3j.benchmark.Token.deployRemoteCall(java.lang.Class,org.web3j.protocol.Web3j,org.web3j.tx.TransactionManager,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.lang.String,java.lang.String)=>org.web3j.benchmark.Token.deployRemoteCall(java.lang.Class,org.web3j.protocol.Web3j,org.web3j.tx.TransactionManager,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4143/buggy-version/benchmark.src.main.java.org.web3j.benchmark.Token.java", "BodyUseAPI": [], "Fixed commit": "dad6a0a987967638d5358af87988e2689a0e5dbe", "Url": "https://api.github.com/repos/cryptape/appchainj", "Date": "2018-04-13T08:06:18Z"},
{"Line": "116=>116", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "mDatabase.child(\"Trends\").child(Disease).child(Place).child(number).setValue(kudos26.aws.Trend.EntryElement)=>mDatabase.child(\"Trends\").child(Disease).child(Place).child(number).setValue(kudos26.aws.Models.EntryElement)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9079/buggy-version/app.src.main.java.kudos26.aws.ReportActivity.java", "BodyUseAPI": [], "Fixed commit": "261b575159713a1cf90bd2d73233cf67518b8abd", "Url": "https://api.github.com/repos/kunal26das/HealthCare", "Date": "2018-09-04T18:12:41Z"},
{"Line": "97=>97", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "PluginTechReborn.SAP.copy()=>PluginTechReborn.sap.copy()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/638/buggy-version/src.main.java.forestry.farming.logic.crops.CropRubber.java", "BodyUseAPI": [], "Fixed commit": "42d539707f4fd7b574c5a8e3d720e859901487c0", "Url": "https://api.github.com/repos/temp1011/ForestryMC", "Date": "2018-04-12T13:48:44Z"},
{"Line": "97=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "PluginTechReborn.SAP.copy()=>PluginTechReborn.sap.copy()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/638/buggy-version/src.main.java.forestry.farming.logic.crops.CropRubber.java", "BodyUseAPI": [], "Fixed commit": "42d539707f4fd7b574c5a8e3d720e859901487c0", "Url": "https://api.github.com/repos/temp1011/ForestryMC", "Date": "2018-04-12T13:48:44Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "cn.binarywang.wx.miniapp.api.impl.WxMaJsapiServiceImpl.getJsapiTicket(boolean)=>cn.binarywang.wx.miniapp.api.impl.WxMaJsapiServiceImpl.getCardApiTicket(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1727/buggy-version/weixin-java-miniapp.src.main.java.cn.binarywang.wx.miniapp.api.impl.WxMaJsapiServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "baf6a8558dea8a554f4465a2f0243ff92bde916c", "Url": "https://api.github.com/repos/yuanqixun/weixin-java-tools", "Date": "2018-09-19T08:16:22Z"},
{"Line": "159=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.File.getAbsolutePath()=>android.net.Uri.parse(uri).getPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3305/buggy-version/kustomersdk.src.main.java.com.kustomer.kustomersdk.Views.KUSInputBarView.java", "BodyUseAPI": [], "Fixed commit": "1ff34f0fd16605fa4ee6ee921533cbabbc4baade", "Url": "https://api.github.com/repos/BrainXtech/customer-android", "Date": "2018-05-30T12:59:40Z"},
{"Line": "159=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.graphics.BitmapFactory.decodeFile(java.lang.String)=>android.graphics.BitmapFactory.decodeFile(android.net.Uri.parse(uri).getPath())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3305/buggy-version/kustomersdk.src.main.java.com.kustomer.kustomersdk.Views.KUSInputBarView.java", "BodyUseAPI": [], "Fixed commit": "1ff34f0fd16605fa4ee6ee921533cbabbc4baade", "Url": "https://api.github.com/repos/BrainXtech/customer-android", "Date": "2018-05-30T12:59:40Z"},
{"Line": "81=>81", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "imageViewer.initialization().setImageChangeListener(new com.example.bxlargeimageviewer.BxImageViewer.OnImageChangeListener() { @java.lang.Override public void onImageChanged(int position) { tvheader.setText(java.lang.String.format(java.util.Locale.getDefault(), \"%d/%d\", (position + 1), imageURIs.size())); currentImageLink = imageURIs.get(position); } }).addDataSet(java.util.List<java.lang.String>)=>imageViewer.initialization().setImageChangeListener(new com.example.bxlargeimageviewer.BxImageViewer.OnImageChangeListener() { @java.lang.Override public void onImageChanged(int position) { tvheader.setText(java.lang.String.format(java.util.Locale.getDefault(), \"%d/%d\", (position + 1), imageURIs.size())); currentImageLink = imageURIs.get(position); } }).setImageMarginPx(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3305/buggy-version/kustomersdk.src.main.java.com.kustomer.kustomersdk.Views.KUSLargeImageViewer.java", "BodyUseAPI": [], "Fixed commit": "1ff34f0fd16605fa4ee6ee921533cbabbc4baade", "Url": "https://api.github.com/repos/BrainXtech/customer-android", "Date": "2018-05-30T12:59:40Z"},
{"Line": "81=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "imageViewer.initialization().setImageChangeListener(new com.example.bxlargeimageviewer.BxImageViewer.OnImageChangeListener() { @java.lang.Override public void onImageChanged(int position) { tvheader.setText(java.lang.String.format(java.util.Locale.getDefault(), \"%d/%d\", (position + 1), imageURIs.size())); currentImageLink = imageURIs.get(position); } }).addDataSet(imageURIs).setStartPosition(int)=>imageViewer.initialization().setImageChangeListener(new com.example.bxlargeimageviewer.BxImageViewer.OnImageChangeListener() { @java.lang.Override public void onImageChanged(int position) { tvheader.setText(java.lang.String.format(java.util.Locale.getDefault(), \"%d/%d\", (position + 1), imageURIs.size())); currentImageLink = imageURIs.get(position); } }).setImageMarginPx(20).addDataSet(java.util.List<java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3305/buggy-version/kustomersdk.src.main.java.com.kustomer.kustomersdk.Views.KUSLargeImageViewer.java", "BodyUseAPI": [], "Fixed commit": "1ff34f0fd16605fa4ee6ee921533cbabbc4baade", "Url": "https://api.github.com/repos/BrainXtech/customer-android", "Date": "2018-05-30T12:59:40Z"},
{"Line": "128=>128", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "orderDetails.getStatus().equals(java.lang.String)=>orderDetails.getStatus().trim()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1205/buggy-version/retail-ordering.src.main.java.com.retail.ordering.dao.orderdetails.OrderDetailsDao.java", "BodyUseAPI": [], "Fixed commit": "0a681086abaef5118e8312a2b20937c709dd1641", "Url": "https://api.github.com/repos/krishnaz3264/retailordering", "Date": "2018-01-29T13:08:17Z"},
{"Line": "901=>917", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.database.sqlite.SQLiteDatabase.execSQL((((((((\"CREATE TABLE raw (\" + (((((((\"_id INTEGER PRIMARY KEY,\" + \"date INTEGER,\") + \"reference_number INTEGER,\") + \"count INTEGER,\") + \"sequence INTEGER,\") + \"destination_port INTEGER,\") + \"address TEXT,\") + \"sub_id INTEGER DEFAULT \")) + (android.telephony.SubscriptionManager.INVALID_SUBSCRIPTION_ID)) + \", \") + \"pdu TEXT,\") + \"deleted INTEGER DEFAULT 0,\") + \"message_body TEXT,\") + \"display_originating_addr TEXT);\"))=>android.database.sqlite.SQLiteDatabase.execSQL(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7725/buggy-version/src.com.android.providers.telephony.MmsSmsDatabaseHelper.java", "BodyUseAPI": [], "Fixed commit": "7e1b79ad7cd52a7fcd27c7f01b3aa7d8415d5599", "Url": "https://api.github.com/repos/aosp-mirror/platform_packages_providers_telephonyprovider", "Date": "2018-05-18T21:05:33Z"},
{"Line": "38=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "hasco.core.Util.getSolutionCompositionFromState(java.util.Collection<hasco.model.Component>,solution2.get(((solution2.size()) - 1)).getState())=>hasco.core.Util.getSolutionCompositionFromState(java.util.Collection<hasco.model.Component>,solution2.get(((solution2.size()) - 1)).getState(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/273/buggy-version/src.avoidingOversearch.autoML.PipelineMetric.java", "BodyUseAPI": [], "Fixed commit": "00bdb2ed29817454fe4b66ef1a752f6d31f51977", "Url": "https://api.github.com/repos/Berberer/AILibs-Evaluations", "Date": "2018-09-19T09:09:39Z"},
{"Line": "34=>34", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "hasco.core.Util.getSolutionCompositionFromState(java.util.Collection<hasco.model.Component>,solution1.get(((solution1.size()) - 1)).getState())=>hasco.core.Util.getSolutionCompositionFromState(java.util.Collection<hasco.model.Component>,solution1.get(((solution1.size()) - 1)).getState(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/273/buggy-version/src.avoidingOversearch.autoML.PipelineMetric.java", "BodyUseAPI": [], "Fixed commit": "00bdb2ed29817454fe4b66ef1a752f6d31f51977", "Url": "https://api.github.com/repos/Berberer/AILibs-Evaluations", "Date": "2018-09-19T09:09:39Z"},
{"Line": "155=>155", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "dk.blackdarkness.g17.cphindustries.dataaccess.ApplicationConfig.getDaoFactory().getShootDao().getShoots(int)=>dk.blackdarkness.g17.cphindustries.dataaccess.ApplicationConfig.getDaoFactory().getShootDao().getListByScene(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6466/buggy-version/app.src.main.java.dk.blackdarkness.g17.cphindustries.editfragments.EditWeaponDetailsFragment.java", "BodyUseAPI": [], "Fixed commit": "75fe01e25ecc7e11dea2ff2505aea09ee4883ddd", "Url": "https://api.github.com/repos/hold17/cphindustries", "Date": "2018-01-15T12:47:51Z"},
{"Line": "66=>66", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "dk.blackdarkness.g17.cphindustries.dataaccess.ApplicationConfig.getDaoFactory().getWeaponDao().get(int)=>dk.blackdarkness.g17.cphindustries.dataaccess.ApplicationConfig.getDaoFactory().getWeaponDao().getWeapon(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6466/buggy-version/app.src.main.java.dk.blackdarkness.g17.cphindustries.editfragments.EditWeaponDetailsFragment.java", "BodyUseAPI": [], "Fixed commit": "75fe01e25ecc7e11dea2ff2505aea09ee4883ddd", "Url": "https://api.github.com/repos/hold17/cphindustries", "Date": "2018-01-15T12:47:51Z"},
{"Line": "57=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "dk.blackdarkness.g17.cphindustries.dataaccess.ApplicationConfig.getDaoFactory().getShootWeaponDao().get()=>mItems.get(position).getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6466/buggy-version/app.src.main.java.dk.blackdarkness.g17.cphindustries.recyclerview.PopupRecListAdapter.java", "BodyUseAPI": [], "Fixed commit": "75fe01e25ecc7e11dea2ff2505aea09ee4883ddd", "Url": "https://api.github.com/repos/hold17/cphindustries", "Date": "2018-01-15T12:47:51Z"},
{"Line": "57=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "dk.blackdarkness.g17.cphindustries.dataaccess.ApplicationConfig.getDaoFactory().getShootWeaponDao()=>java.util.List<dk.blackdarkness.g17.cphindustries.dto.Item>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6466/buggy-version/app.src.main.java.dk.blackdarkness.g17.cphindustries.recyclerview.PopupRecListAdapter.java", "BodyUseAPI": [], "Fixed commit": "75fe01e25ecc7e11dea2ff2505aea09ee4883ddd", "Url": "https://api.github.com/repos/hold17/cphindustries", "Date": "2018-01-15T12:47:51Z"},
{"Line": "72=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "dk.blackdarkness.g17.cphindustries.recyclerview.CallbackPopup.onCheckClickSend(curItem.getId())=>dk.blackdarkness.g17.cphindustries.recyclerview.CallbackPopup.onCheckClickSend(curItem.getId(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6466/buggy-version/app.src.main.java.dk.blackdarkness.g17.cphindustries.recyclerview.PopupRecListAdapter.java", "BodyUseAPI": [], "Fixed commit": "75fe01e25ecc7e11dea2ff2505aea09ee4883ddd", "Url": "https://api.github.com/repos/hold17/cphindustries", "Date": "2018-01-15T12:47:51Z"},
{"Line": "76=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "dk.blackdarkness.g17.cphindustries.dataaccess.ApplicationConfig.getDaoFactory().getShootWeaponDao().delete(mItems.get(pos).getId())=>dk.blackdarkness.g17.cphindustries.recyclerview.CallbackPopup.onCheckClickSend(curItem.getId(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6466/buggy-version/app.src.main.java.dk.blackdarkness.g17.cphindustries.recyclerview.PopupRecListAdapter.java", "BodyUseAPI": [], "Fixed commit": "75fe01e25ecc7e11dea2ff2505aea09ee4883ddd", "Url": "https://api.github.com/repos/hold17/cphindustries", "Date": "2018-01-15T12:47:51Z"},
{"Line": "116=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.LayoutInflater.inflate(R.layout.fragment_flashcard_quiz,android.view.ViewGroup,boolean)=>android.view.LayoutInflater.inflate(R.layout.fragment_flashcard_quiz_inverse,android.view.ViewGroup,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4482/buggy-version/app.src.main.java.com.howls.flashcard.FlashcardQuizActivity.java", "BodyUseAPI": [], "Fixed commit": "b87cf6c9527cf37caddb00b21963e8a9893ccf3d", "Url": "https://api.github.com/repos/howls90/flashcards", "Date": "2018-01-04T22:04:14Z"},
{"Line": "251=>258", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.content.Intent.putExtra(java.lang.String,java.lang.String)=>AlertDialog.Builder.setTitle(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4482/buggy-version/app.src.main.java.com.howls.flashcard.FlashcardListActivity.java", "BodyUseAPI": [], "Fixed commit": "b87cf6c9527cf37caddb00b21963e8a9893ccf3d", "Url": "https://api.github.com/repos/howls90/flashcards", "Date": "2018-01-04T22:04:14Z"},
{"Line": "251=>258", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.content.Intent.putExtra(java.lang.String,java.lang.String)=>AlertDialog.Builder.setTitle(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4482/buggy-version/app.src.main.java.com.howls.flashcard.FlashcardListActivity.java", "BodyUseAPI": [], "Fixed commit": "b87cf6c9527cf37caddb00b21963e8a9893ccf3d", "Url": "https://api.github.com/repos/howls90/flashcards", "Date": "2018-01-04T22:04:14Z"},
{"Line": "252=>259", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.howls.flashcard.FlashcardListActivity.startActivity(android.content.Intent)=>AlertDialog.Builder.setItems(java.lang.CharSequence[],android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4482/buggy-version/app.src.main.java.com.howls.flashcard.FlashcardListActivity.java", "BodyUseAPI": [], "Fixed commit": "b87cf6c9527cf37caddb00b21963e8a9893ccf3d", "Url": "https://api.github.com/repos/howls90/flashcards", "Date": "2018-01-04T22:04:14Z"},
{"Line": "251=>251", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.ui.helpers.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7336/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "6115df995b1365ec73c9f92a750ee0e8f3284be2", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "228=>228", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.owncloud.android.ui.helpers.StringUtils.SearchAndColor(java.lang.String,java.lang.String)=>com.owncloud.android.ui.helpers.StringUtils.searchAndColor(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7336/buggy-version/src.main.java.com.owncloud.android.ui.preview.PreviewTextFragment.java", "BodyUseAPI": [], "Fixed commit": "6115df995b1365ec73c9f92a750ee0e8f3284be2", "Url": "https://api.github.com/repos/nextcloud/android", "Date": "2017-01-20T09:26:34Z"},
{"Line": "113=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "main.java.memoranda.ui.AppFrame.3.doMinimize()=>main.java.memoranda.ui.AppFrame.3.doHideScreen()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7966/buggy-version/src.main.java.memoranda.ui.AppFrame.java", "BodyUseAPI": [], "Fixed commit": "68ae2d5c4a099a39ee3d36a7f7ac09f246de45eb", "Url": "https://api.github.com/repos/ser316asu/SER316-oranienburg-SPRING18", "Date": "2018-04-13T03:47:34Z"},
{"Line": "151=>151", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "main.java.memoranda.ui.AppFrame.setState(int)=>main.java.memoranda.ui.AppFrame.dispose()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7966/buggy-version/src.main.java.memoranda.ui.App.java", "BodyUseAPI": [], "Fixed commit": "68ae2d5c4a099a39ee3d36a7f7ac09f246de45eb", "Url": "https://api.github.com/repos/ser316asu/SER316-oranienburg-SPRING18", "Date": "2018-04-13T03:47:34Z"},
{"Line": "95=>95", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "this.mc.fontRendererObj.drawString(com.wuest.prefab.Gui.GuiLangKeys.translateString(GuiLangKeys.BRIDGE_LENGTH),int,int,this.textColor)=>this.mc.fontRenderer.drawString(com.wuest.prefab.Gui.GuiLangKeys.translateString(GuiLangKeys.BRIDGE_LENGTH),int,int,this.textColor)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3589/buggy-version/src.main.java.com.wuest.prefab.Gui.Structures.GuiInstantBridge.java", "BodyUseAPI": [], "Fixed commit": "38e20936b5d28a928b8458e823482fa7b0c821ba", "Url": "https://api.github.com/repos/Brian-Wuest/MC-Prefab", "Date": "2018-02-12T01:29:47Z"},
{"Line": "245=>246", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Calendar.add(int,((period.getDay().getDayIndex()) + 1))=>java.util.Calendar.add(int,period.getDay().getDayIndex())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8738/buggy-version/src.it.univaq.planner.presentation.AdminController.java", "BodyUseAPI": [], "Fixed commit": "5b3911d6f2b0b63608d5d56d4b15429291f0d880", "Url": "https://api.github.com/repos/davideDI/UnivaqOptaPlanner", "Date": "2018-03-11T12:48:18Z"},
{"Line": "888=>917", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "builder.setTitle(\"Warning\").setMessage(\"Your quiz progress will be discarded!\").setPositiveButton(\"Continue\", null).setNegativeButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>builder.setTitle(\"Warning\").setMessage(\"Your quiz progress will be discarded!\").setPositiveButton(\"Continue\", null).setNegativeButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7028/buggy-version/app.src.main.java.app.learnkannada.com.learnkannadakannadakali.quiz.QuizActivity.java", "BodyUseAPI": [], "Fixed commit": "9f5349b41ab97df6fe510c4bfd51ce843c5ad2fb", "Url": "https://api.github.com/repos/varunam/LearnKannada_KannadaKali", "Date": "2018-05-12T14:06:58Z"},
{"Line": "784=>813", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "builder.setIcon(R.drawable.ic_error_black_24dp).setTitle(\"Permission Required\").setMessage(\"This feature requires permission to access storage on your device\").setPositiveButton(\"Ask again\", new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { android.support.v4.app.ActivityCompat.requestPermissions(app.learnkannada.com.learnkannadakannadakali.quiz.QuizActivity.this, new java.lang.String[]{ Manifest.permission.WRITE_EXTERNAL_STORAGE }, app.learnkannada.com.learnkannadakannadakali.quiz.QuizActivity.WRITE_STORAGE_PERMISSION_GRANTED); } }).setNegativeButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>builder.setIcon(R.drawable.ic_error_black_24dp).setTitle(\"Permission Required\").setMessage(\"This feature requires permission to access storage on your device\").setPositiveButton(\"Ask again\", new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { android.support.v4.app.ActivityCompat.requestPermissions(app.learnkannada.com.learnkannadakannadakali.quiz.QuizActivity.this, new java.lang.String[]{ Manifest.permission.WRITE_EXTERNAL_STORAGE }, app.learnkannada.com.learnkannadakannadakali.quiz.QuizActivity.WRITE_STORAGE_PERMISSION_GRANTED); } }).setNegativeButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7028/buggy-version/app.src.main.java.app.learnkannada.com.learnkannadakannadakali.quiz.QuizActivity.java", "BodyUseAPI": [], "Fixed commit": "9f5349b41ab97df6fe510c4bfd51ce843c5ad2fb", "Url": "https://api.github.com/repos/varunam/LearnKannada_KannadaKali", "Date": "2018-05-12T14:06:58Z"},
{"Line": "784=>813", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "builder.setIcon(R.drawable.ic_error_black_24dp).setTitle(\"Permission Required\").setMessage(\"This feature requires permission to access storage on your device\").setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>builder.setIcon(R.drawable.ic_error_black_24dp).setTitle(\"Permission Required\").setMessage(\"This feature requires permission to access storage on your device\").setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7028/buggy-version/app.src.main.java.app.learnkannada.com.learnkannadakannadakali.quiz.QuizActivity.java", "BodyUseAPI": [], "Fixed commit": "9f5349b41ab97df6fe510c4bfd51ce843c5ad2fb", "Url": "https://api.github.com/repos/varunam/LearnKannada_KannadaKali", "Date": "2018-05-12T14:06:58Z"},
{"Line": "39=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.money.convert.ConversionQueryBuilder.set(java.lang.String,java.util.HashSet)=>javax.money.convert.ConversionQueryBuilder.set(ConversionQuery.KEY_RATE_TYPES,java.util.HashSet)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3765/buggy-version/src.main.java.javax.money.convert.ConversionQueryBuilder.java", "BodyUseAPI": [], "Fixed commit": "a95108f7cd782776fcbd7933ce60a28fc57443ed", "Url": "https://api.github.com/repos/JavaMoney/jsr354-api-bp", "Date": "2018-04-06T21:06:16Z"},
{"Line": "89=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.floragunn.searchguard.service.SearchGuardConfigService.1.info(java.lang.String)=>com.floragunn.searchguard.service.SearchGuardConfigService.1.debug(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8539/buggy-version/src.main.java.com.floragunn.searchguard.service.SearchGuardConfigService.java", "BodyUseAPI": [], "Fixed commit": "49c87784ae98290bc424eafde9f960a713a90d21", "Url": "https://api.github.com/repos/Summer-sisi/Stoky", "Date": "2015-06-18T19:20:53Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mall.service.CorpUserService.selectCorpUser(int,java.lang.String)=>com.mall.service.CorpUserService.selectCorpUserByMobile(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/888/buggy-version/src.main.java.com.mall.contoller.api.SendCaptchaController.java", "BodyUseAPI": [], "Fixed commit": "c47bcdb5767aef060b0252d2a751314b03267f67", "Url": "https://api.github.com/repos/menuxx/menuxx-api", "Date": "2017-03-15T10:01:59Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mall.service.CorpUserService.selectCorpUser(int,java.lang.String)=>com.mall.service.CorpUserService.selectCorpUserByMobile(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/888/buggy-version/src.main.java.com.mall.contoller.api.CorpUserController.java", "BodyUseAPI": [], "Fixed commit": "c47bcdb5767aef060b0252d2a751314b03267f67", "Url": "https://api.github.com/repos/menuxx/menuxx-api", "Date": "2017-03-15T10:01:59Z"},
{"Line": "51=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Game.length()=>getHand().length()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6875/buggy-version/Game.java", "BodyUseAPI": [], "Fixed commit": "a9b0cf4713104e865a67cd42e9b4ca8fa040fefd", "Url": "https://api.github.com/repos/CodecoolKRK20173/battle-of-cards-judyta-team", "Date": "2018-04-24T12:49:30Z"},
{"Line": "50=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "players.get(i).hand.length()=>players.get(i).getHand()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6875/buggy-version/Game.java", "BodyUseAPI": [], "Fixed commit": "a9b0cf4713104e865a67cd42e9b4ca8fa040fefd", "Url": "https://api.github.com/repos/CodecoolKRK20173/battle-of-cards-judyta-team", "Date": "2018-04-24T12:49:30Z"},
{"Line": "87=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.electivechaos.claimsadjuster.ui.AddEditReportActivity.onReportSave()=>com.electivechaos.claimsadjuster.database.CategoryListDBHelper.addReportEntry(com.electivechaos.claimsadjuster.pojo.ReportPOJO)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1012/buggy-version/project.app.src.main.java.com.electivechaos.claimsadjuster.ui.AddEditReportActivity.java", "BodyUseAPI": [], "Fixed commit": "cf5bbd6e10082548fda0c182343fb50bf660d460", "Url": "https://api.github.com/repos/krishnakhandagale/RoportTool", "Date": "2018-05-16T05:28:04Z"},
{"Line": "232=>233", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.net.URL.toString()=>java.net.URI.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/272/buggy-version/jcore-lingpipegazetteer-ae.src.main.java.de.julielab.jcore.ae.lingpipegazetteer.chunking.ConfigurableChunkerProviderImplAlt.java", "BodyUseAPI": [], "Fixed commit": "98e29fb4ffc8e8ee54a41f996fb56240f799c254", "Url": "https://api.github.com/repos/JULIELab/jcore-base", "Date": "2018-05-14T14:13:44Z"},
{"Line": "232=>233", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.net.URL.toString()=>java.net.URI.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/272/buggy-version/jcore-lingpipegazetteer-ae.src.main.java.de.julielab.jcore.ae.lingpipegazetteer.chunking.ConfigurableChunkerProviderImplAlt.java", "BodyUseAPI": [], "Fixed commit": "98e29fb4ffc8e8ee54a41f996fb56240f799c254", "Url": "https://api.github.com/repos/JULIELab/jcore-base", "Date": "2018-05-14T14:13:44Z"},
{"Line": "96=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.uima.resource.DataResource.getUrl()=>org.apache.uima.resource.DataResource.getUri()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/272/buggy-version/jcore-lingpipegazetteer-ae.src.main.java.de.julielab.jcore.ae.lingpipegazetteer.chunking.ConfigurableChunkerProviderImplAlt.java", "BodyUseAPI": [], "Fixed commit": "98e29fb4ffc8e8ee54a41f996fb56240f799c254", "Url": "https://api.github.com/repos/JULIELab/jcore-base", "Date": "2018-05-14T14:13:44Z"},
{"Line": "128=>129", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.apache.uima.resource.DataResource.getInputStream()=>de.julielab.java.utilities.UriUtilities.getInputStreamFromUri(resource.getUri())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/272/buggy-version/jcore-lingpipegazetteer-ae.src.main.java.de.julielab.jcore.ae.lingpipegazetteer.chunking.ConfigurableChunkerProviderImplAlt.java", "BodyUseAPI": [], "Fixed commit": "98e29fb4ffc8e8ee54a41f996fb56240f799c254", "Url": "https://api.github.com/repos/JULIELab/jcore-base", "Date": "2018-05-14T14:13:44Z"},
{"Line": "166=>148", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.swing.JComboBox<java.lang.String>.getSelectedIndex()=>javax.swing.JComboBox<java.lang.String>.getSelectedItem()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3707/buggy-version/storage.src.babroval.storage.frames.RentFrame.java", "BodyUseAPI": [], "Fixed commit": "6005e65c4ff3100014c10bc77580ea0c4d3854ae", "Url": "https://api.github.com/repos/babroval/self-storage-unit", "Date": "2018-04-24T20:07:28Z"},
{"Line": "97=>96", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "action.keyDown(Keys.ESCAPE).perform()=>org.openqa.selenium.JavascriptExecutor.executeScript(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6558/buggy-version/src.main.java.gov.nci.clinicalTrial.pages.TrialDetailView.java", "BodyUseAPI": [], "Fixed commit": "884e1c19e94907aa27171657e73c06f01650f593", "Url": "https://api.github.com/repos/NCIOCPL/wcms-qa-testing-framework", "Date": "2018-09-27T19:33:48Z"},
{"Line": "78=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.yanzhenjie.permission.checker.StrictChecker.checkRecordAudio(android.content.Context)=>com.yanzhenjie.permission.checker.StrictChecker.checkRecordAudio()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6208/buggy-version/permission.src.main.java.com.yanzhenjie.permission.checker.StrictChecker.java", "BodyUseAPI": [], "Fixed commit": "46a1d87a7c0efada964d82c96862773f177dfbb3", "Url": "https://api.github.com/repos/yanzhenjie/AndPermission", "Date": "2018-09-30T02:55:49Z"},
{"Line": "80=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<com.tc.banking.atm.response.BankNoteResponse>.remove(int)=>java.util.List<com.tc.banking.atm.response.BankNoteResponse>.add(retrievedNotes.get(i))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4564/buggy-version/src.main.java.com.tc.banking.atm.service.AccountService.java", "BodyUseAPI": [], "Fixed commit": "d662cd8ec512f75d139eaa958e2c0ee68899773b", "Url": "https://api.github.com/repos/trevorjcarew/atm", "Date": "2018-09-03T22:47:12Z"},
{"Line": "77=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new nu.xom.Attribute(ROUTE_LIST_XML_NEXT_ID_ATTR, java.lang.Integer.toString(nextID))=>new nu.xom.Attribute(main.java.memoranda.bus.tour.RouteCollection.ROUTE_LIST_NEXT_ID_ATTR, java.lang.Integer.toString(nextID))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4331/buggy-version/src.main.java.memoranda.bus.tour.RouteCollection.java", "BodyUseAPI": [], "Fixed commit": "eb47c0108b3680cb65ee30d27b72136f2b920931", "Url": "https://api.github.com/repos/ser316asu-2018/Cochem", "Date": "2018-04-13T00:06:07Z"},
{"Line": "259=>259", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.sandius.rembulan.lib.IoLib.newLuaRuntimeException(net.sandius.rembulan.lib.ClosedFileException)=>net.sandius.rembulan.lib.IoLib.newLuaRuntimeException(java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2879/buggy-version/rembulan-stdlib.src.main.java.net.sandius.rembulan.lib.IoFile.java", "BodyUseAPI": [], "Fixed commit": "733165be3eec032627d7bfeea8cb7cbce717bc99", "Url": "https://api.github.com/repos/wizards-of-lua/rembulan", "Date": "2018-10-03T10:41:10Z"},
{"Line": "29=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setVisibility(View.INVISIBLE)=>android.widget.LinearLayout.setVisibility(View.INVISIBLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2742/buggy-version/app.src.dev.java.cm.aptoide.pt.home.AppSecondaryInfoViewHolder.java", "BodyUseAPI": [], "Fixed commit": "525b134e8f7aeef9245a14b20fa3c64635c5287c", "Url": "https://api.github.com/repos/Aptoide/aptoide-client-v8", "Date": "2018-07-26T15:47:05Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setVisibility(View.INVISIBLE)=>android.widget.LinearLayout.setVisibility(View.INVISIBLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2742/buggy-version/app.src.dev.java.cm.aptoide.pt.home.AppSecondaryInfoViewHolder.java", "BodyUseAPI": [], "Fixed commit": "525b134e8f7aeef9245a14b20fa3c64635c5287c", "Url": "https://api.github.com/repos/Aptoide/aptoide-client-v8", "Date": "2018-07-26T15:47:05Z"},
{"Line": "58=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.silverpeas.core.web.util.viewgenerator.html.arraypanes.ArrayLine.setId(java.lang.String)=>org.silverpeas.core.web.util.viewgenerator.html.arraypanes.ArrayLine.setId(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7693/buggy-version/core-web.src.main.java.org.silverpeas.core.web.util.viewgenerator.html.arraypanes.ArrayLineTag.java", "BodyUseAPI": [], "Fixed commit": "c3d41d8204e8939527b1d92b8316b2688df2c981", "Url": "https://api.github.com/repos/Silverpeas/Silverpeas-Core", "Date": "2018-10-23T08:20:09Z"},
{"Line": "58=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.silverpeas.core.web.util.viewgenerator.html.arraypanes.ArrayLineTag.getId()=>org.silverpeas.core.web.util.viewgenerator.html.arraypanes.ArrayLineTag.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7693/buggy-version/core-web.src.main.java.org.silverpeas.core.web.util.viewgenerator.html.arraypanes.ArrayLineTag.java", "BodyUseAPI": [], "Fixed commit": "c3d41d8204e8939527b1d92b8316b2688df2c981", "Url": "https://api.github.com/repos/Silverpeas/Silverpeas-Core", "Date": "2018-10-23T08:20:09Z"},
{"Line": "72=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.valueOf(int)=>java.lang.String.valueOf(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5458/buggy-version/src.main.java.ru.leonid.shutov.javaee.controller.MainController.java", "BodyUseAPI": [], "Fixed commit": "ffdff93932f168ef6696ef4e018d8b87c6519642", "Url": "https://api.github.com/repos/LeonidShutov/RainyHillsCRX", "Date": "2018-03-24T06:54:12Z"},
{"Line": "103=>103", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ComponentInfo.GetComponent().getAttributeSet().getValue(Multiplier.WIDTH_ATTR)=>ComponentInfo.GetComponent().getEnd(0).getWidth()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6442/buggy-version/src.com.cburch.logisim.std.arith.MultiplierHDLGeneratorFactory.java", "BodyUseAPI": [], "Fixed commit": "a9fff9a979e4b04bce26181bfe408bbe36706928", "Url": "https://api.github.com/repos/reds-heig/logisim-evolution", "Date": "2018-03-10T14:44:55Z"},
{"Line": "103=>103", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ComponentInfo.GetComponent().getAttributeSet()=>ComponentInfo.GetComponent().getEnd(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6442/buggy-version/src.com.cburch.logisim.std.arith.MultiplierHDLGeneratorFactory.java", "BodyUseAPI": [], "Fixed commit": "a9fff9a979e4b04bce26181bfe408bbe36706928", "Url": "https://api.github.com/repos/reds-heig/logisim-evolution", "Date": "2018-03-10T14:44:55Z"},
{"Line": "84=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new android.support.v7.app.AlertDialog.Builder(this).setMessage(\"Are you sure you want to delete this recipe?\").setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>new android.support.v7.app.AlertDialog.Builder(this).setMessage(\"Are you sure you want to delete this recipe?\").setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6686/buggy-version/app.src.main.java.com.kld2.recipelist.RecipeListActivity.java", "BodyUseAPI": [], "Fixed commit": "accf1b37806138511e953ee277a2bc85e1b35c30", "Url": "https://api.github.com/repos/karindiamond/RecipeList", "Date": "2018-05-02T13:49:17Z"},
{"Line": "143=>148", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.LayoutInflater.from(parent.getContext()).inflate(R.layout.recipe_list_row,android.view.ViewGroup,boolean)=>android.view.LayoutInflater.from(parent.getContext()).inflate(R.layout.recipe_list_item,android.view.ViewGroup,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6686/buggy-version/app.src.main.java.com.kld2.recipelist.RecipeListActivity.java", "BodyUseAPI": [], "Fixed commit": "accf1b37806138511e953ee277a2bc85e1b35c30", "Url": "https://api.github.com/repos/karindiamond/RecipeList", "Date": "2018-05-02T13:49:17Z"},
{"Line": "84=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new android.support.v7.app.AlertDialog.Builder(this).setMessage(\"Are you sure you want to delete this recipe?\").setPositiveButton(\"Delete\", new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { recipeAdapter.notifyItemRemoved(position); ((com.kld2.recipelist.RecipeListApp) (getApplication())).getRecipeList().remove(recipe); } }).setNegativeButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>new android.support.v7.app.AlertDialog.Builder(this).setMessage(\"Are you sure you want to delete this recipe?\").setPositiveButton(\"Delete\", new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { recipeAdapter.notifyItemRemoved(position); ((com.kld2.recipelist.RecipeListApp) (getApplication())).getRecipeList().remove(recipe); } }).setNegativeButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6686/buggy-version/app.src.main.java.com.kld2.recipelist.RecipeListActivity.java", "BodyUseAPI": [], "Fixed commit": "accf1b37806138511e953ee277a2bc85e1b35c30", "Url": "https://api.github.com/repos/karindiamond/RecipeList", "Date": "2018-05-02T13:49:17Z"},
{"Line": "27=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Main.client.changePlayingText(java.lang.String)=>Main.client.changePresence(StatusType.ONLINE,ActivityType.PLAYING,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5690/buggy-version/src.com.vauff.maunzdiscord.features.StatsTimer.java", "BodyUseAPI": [], "Fixed commit": "e2377a82966ba51f47a41b020d3615fe8f2ec1bd", "Url": "https://api.github.com/repos/bl4ckscor3/Maunz-Discord", "Date": "2018-04-09T00:56:41Z"},
{"Line": "22=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Main.client.changePlayingText(((Main.client.getGuilds().size()) + \" guilds\"))=>Main.client.changePresence(StatusType.ONLINE,ActivityType.PLAYING,((Main.client.getGuilds().size()) + \" guilds\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5690/buggy-version/src.com.vauff.maunzdiscord.features.StatsTimer.java", "BodyUseAPI": [], "Fixed commit": "e2377a82966ba51f47a41b020d3615fe8f2ec1bd", "Url": "https://api.github.com/repos/bl4ckscor3/Maunz-Discord", "Date": "2018-04-09T00:56:41Z"},
{"Line": "86=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.formLogin().loginPage(\"/login\").and().logout().and()=>http.formLogin().loginPage(\"/login\").permitAll().and().logout()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3531/buggy-version/src.main.java.be.vdab.personeel.security.SecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "88d0b7359a20cd5c7ea126bc7eee32968920866b", "Url": "https://api.github.com/repos/vdab-stijn/personeel", "Date": "2018-10-26T09:37:36Z"},
{"Line": "86=>92", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.formLogin().loginPage(\"/login\").and().logout().and().authorizeRequests()=>org.springframework.security.config.annotation.web.builders.HttpSecurity.authorizeRequests()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3531/buggy-version/src.main.java.be.vdab.personeel.security.SecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "88d0b7359a20cd5c7ea126bc7eee32968920866b", "Url": "https://api.github.com/repos/vdab-stijn/personeel", "Date": "2018-10-26T09:37:36Z"},
{"Line": "86=>92", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "http.formLogin().loginPage(\"/login\").and().logout().and().authorizeRequests().mvcMatchers(\"/employees/*/raise/**\").hasAuthority(be.vdab.personeel.security.SecurityConfig.AUTH_PRESIDENT).mvcMatchers(\"/employees/**\").authenticated().mvcMatchers(java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>http.authorizeRequests().mvcMatchers(\"/employees/*/raise/**\").hasAuthority(be.vdab.personeel.security.SecurityConfig.AUTH_PRESIDENT).mvcMatchers(\"/employees/**\").authenticated().mvcMatchers(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3531/buggy-version/src.main.java.be.vdab.personeel.security.SecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "88d0b7359a20cd5c7ea126bc7eee32968920866b", "Url": "https://api.github.com/repos/vdab-stijn/personeel", "Date": "2018-10-26T09:37:36Z"},
{"Line": "86=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.formLogin().loginPage(\"/login\").and().logout()=>http.formLogin().loginPage(\"/login\").permitAll().and()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3531/buggy-version/src.main.java.be.vdab.personeel.security.SecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "88d0b7359a20cd5c7ea126bc7eee32968920866b", "Url": "https://api.github.com/repos/vdab-stijn/personeel", "Date": "2018-10-26T09:37:36Z"},
{"Line": "86=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.formLogin().loginPage(\"/login\").and()=>http.formLogin().loginPage(\"/login\").permitAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3531/buggy-version/src.main.java.be.vdab.personeel.security.SecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "88d0b7359a20cd5c7ea126bc7eee32968920866b", "Url": "https://api.github.com/repos/vdab-stijn/personeel", "Date": "2018-10-26T09:37:36Z"},
{"Line": "105=>105", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.lampa.startapp.startApp.getContext()=>com.lampa.startapp.startApp.getActivity()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4043/buggy-version/src.android.startApp.java", "BodyUseAPI": [], "Fixed commit": "6a4b32f30a27dd67f5dfa5cabce8b7cf9f6ebc81", "Url": "https://api.github.com/repos/RonnieRen/com.lampa.startapp", "Date": "2018-05-23T08:05:33Z"},
{"Line": "63=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "AmessengerApplication.appfirebaseAuth.getCurrentUser().getUid()=>java.util.Objects.requireNonNull(AmessengerApplication.appfirebaseAuth.getCurrentUser())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4095/buggy-version/app.src.main.java.com.example.akundu.arnabsmessenger.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "880852b53cca47bdce955ef4ef6ddbbd1682731c", "Url": "https://api.github.com/repos/arnab-kundu/ArnabsMessenger", "Date": "2018-10-28T17:38:38Z"},
{"Line": "280=>282", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "database.collection(\"users\").document(user.getUID()).update(user.toMap()).continueWith(AsyncTask.THREAD_POOL_EXECUTOR,com.google.android.gms.tasks.Continuation<java.lang.Void, Model.User>)=>database.collection(\"users\").document(user.getUID()).set(user.toMap(), com.google.firebase.firestore.SetOptions.merge()).continueWith(AsyncTask.THREAD_POOL_EXECUTOR,com.google.android.gms.tasks.Continuation<java.lang.Void, Model.User>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4871/buggy-version/appmovilandroid.app.src.main.java.Model.FirebaseStore.java", "BodyUseAPI": [], "Fixed commit": "73807d568326808c7740a4f1c01b6a86d3be5a19", "Url": "https://api.github.com/repos/gerrygoo/appmovilandroid", "Date": "2018-05-02T19:17:31Z"},
{"Line": "231=>233", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.firebase.storage.FirebaseStorage.getInstance().getReference().child(((\"images/\" + (project.getUID())) + \".jpg\")).putBytes(stream.toByteArray()).continueWithTask(com.google.android.gms.tasks.Continuation<com.google.firebase.storage.UploadTask.TaskSnapshot, com.google.android.gms.tasks.Task<java.lang.String>>)=>com.google.firebase.storage.FirebaseStorage.getInstance().getReference().child(((\"images/\" + (project.getUID())) + \".jpg\")).putBytes(stream.toByteArray()).continueWithTask(com.google.android.gms.tasks.Continuation<com.google.firebase.storage.UploadTask.TaskSnapshot, com.google.android.gms.tasks.Task<java.lang.String>>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4871/buggy-version/appmovilandroid.app.src.main.java.Model.FirebaseStore.java", "BodyUseAPI": [], "Fixed commit": "73807d568326808c7740a4f1c01b6a86d3be5a19", "Url": "https://api.github.com/repos/gerrygoo/appmovilandroid", "Date": "2018-05-02T19:17:31Z"},
{"Line": "212=>216", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.android.gms.tasks.TaskCompletionSource.getTask()=>Model.User.getUID()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4871/buggy-version/appmovilandroid.app.src.main.java.Model.FirebaseStore.java", "BodyUseAPI": [], "Fixed commit": "73807d568326808c7740a4f1c01b6a86d3be5a19", "Url": "https://api.github.com/repos/gerrygoo/appmovilandroid", "Date": "2018-05-02T19:17:31Z"},
{"Line": "211=>213", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.android.gms.tasks.TaskCompletionSource.setResult(<nulltype>)=>java.util.Map<java.lang.String, java.lang.Object>.remove(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4871/buggy-version/appmovilandroid.app.src.main.java.Model.FirebaseStore.java", "BodyUseAPI": [], "Fixed commit": "73807d568326808c7740a4f1c01b6a86d3be5a19", "Url": "https://api.github.com/repos/gerrygoo/appmovilandroid", "Date": "2018-05-02T19:17:31Z"},
{"Line": "251=>253", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.android.gms.tasks.Task<java.lang.String>.continueWithTask(AsyncTask.THREAD_POOL_EXECUTOR,com.google.android.gms.tasks.Continuation<java.lang.String, com.google.android.gms.tasks.Task<java.lang.Void>>)=>com.google.android.gms.tasks.Task<java.lang.String>.continueWithTask(AsyncTask.THREAD_POOL_EXECUTOR,com.google.android.gms.tasks.Continuation<java.lang.String, com.google.android.gms.tasks.Task<java.lang.Void>>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4871/buggy-version/appmovilandroid.app.src.main.java.Model.FirebaseStore.java", "BodyUseAPI": [], "Fixed commit": "73807d568326808c7740a4f1c01b6a86d3be5a19", "Url": "https://api.github.com/repos/gerrygoo/appmovilandroid", "Date": "2018-05-02T19:17:31Z"},
{"Line": "280=>282", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "database.collection(\"users\").document(user.getUID()).update(user.toMap())=>database.collection(\"users\").document(user.getUID()).set(user.toMap(),com.google.firebase.firestore.SetOptions.merge())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4871/buggy-version/appmovilandroid.app.src.main.java.Model.FirebaseStore.java", "BodyUseAPI": [], "Fixed commit": "73807d568326808c7740a4f1c01b6a86d3be5a19", "Url": "https://api.github.com/repos/gerrygoo/appmovilandroid", "Date": "2018-05-02T19:17:31Z"},
{"Line": "212=>216", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.android.gms.tasks.TaskCompletionSource.getTask()=>database.collection(\"users\").document(user.getUID()).update(java.util.Map<java.lang.String, java.lang.Object>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4871/buggy-version/appmovilandroid.app.src.main.java.Model.FirebaseStore.java", "BodyUseAPI": [], "Fixed commit": "73807d568326808c7740a4f1c01b6a86d3be5a19", "Url": "https://api.github.com/repos/gerrygoo/appmovilandroid", "Date": "2018-05-02T19:17:31Z"},
{"Line": "186=>186", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "gov.ca.cwds.data.legacy.cms.entity.BaseStaffPerson.getPhoneNo()=>gov.ca.cwds.data.legacy.cms.entity.BaseCountyLicenseCase.getStaffPerson()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8775/buggy-version/src.main.java.gov.ca.cwds.cals.service.mapper.FacilityMapper.java", "BodyUseAPI": [], "Fixed commit": "50866a3d3a25c237bba2ccbd62b055411ab3ae18", "Url": "https://api.github.com/repos/ca-cwds/cals-api", "Date": "2018-06-13T05:39:13Z"},
{"Line": "124=>123", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "gov.ca.cwds.cals.service.mapper.FacilityMapper.mapAssignedWorkerPhones(facilityDto.getAssignedWorker(),placementHome.getCountyLicenseCase().getStaffPerson())=>gov.ca.cwds.cals.service.mapper.FacilityMapper.mapAssignedWorkerPhones(facilityDto.getAssignedWorker(),placementHome.getCountyLicenseCase())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8775/buggy-version/src.main.java.gov.ca.cwds.cals.service.mapper.FacilityMapper.java", "BodyUseAPI": [], "Fixed commit": "50866a3d3a25c237bba2ccbd62b055411ab3ae18", "Url": "https://api.github.com/repos/ca-cwds/cals-api", "Date": "2018-06-13T05:39:13Z"},
{"Line": "76=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<at.tugraz.xp10.model.Category>.add(at.tugraz.xp10.model.Category)=>at.tugraz.xp10.model.Category.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/843/buggy-version/app.src.main.java.at.tugraz.xp10.fragments.CategoriesFragment.java", "BodyUseAPI": [], "Fixed commit": "c8c7eb9322819fc8f3d8c8c76cdd6997307141bf", "Url": "https://api.github.com/repos/manuelseeboeck/xp_team10", "Date": "2018-05-30T13:02:04Z"},
{"Line": "31=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "http.authorizeRequests().antMatchers(\"/AddComputer\", \"/EditComputer\", \"/Delete\", \"/\").hasRole(\"ADMIN\").antMatchers(java.lang.String)=>http.authorizeRequests().antMatchers(\"/AddComputer\", \"/EditComputer\", \"/Dashboard#delete\", \"/\").hasRole(\"ADMIN\").antMatchers(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5522/buggy-version/webapp.src.main.java.com.excilys.formation.configuration.SecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "54301ad027c22002197512a732917ffd99b65d1d", "Url": "https://api.github.com/repos/SamiaNa/computer-database", "Date": "2018-05-03T10:11:53Z"},
{"Line": "22=>22", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.springframework.security.core.userdetails.User.withDefaultPasswordEncoder()=>org.springframework.security.core.userdetails.User.withUsername(user.getUsername())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5522/buggy-version/webapp.src.main.java.com.excilys.formation.configuration.UserAuthService.java", "BodyUseAPI": [], "Fixed commit": "54301ad027c22002197512a732917ffd99b65d1d", "Url": "https://api.github.com/repos/SamiaNa/computer-database", "Date": "2018-05-03T10:11:53Z"},
{"Line": "57=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.http.HttpStatus.valueOf(int)=>com.bc.daemon.http.HttpProxyService.resolveHttpStatus(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9764/buggy-version/src.main.java.com.bc.daemon.http.HttpProxyService.java", "BodyUseAPI": [], "Fixed commit": "7d002628655062fcac4c6b586c482c4bcd44fd58", "Url": "https://api.github.com/repos/vvasabi/daemon-proxy", "Date": "2018-04-10T17:35:37Z"},
{"Line": "191=>192", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.rolamix.plugins.audioplayer.manager.MediaProgress.getPosition()=>com.devbrackets.android.playlistcore.data.MediaProgress.getPosition()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1273/buggy-version/src.android.java.manager.PlaylistManager.java", "BodyUseAPI": [], "Fixed commit": "c20a853121f17b6e826fb20686141bcb213a2e6a", "Url": "https://api.github.com/repos/Rolamix/cordova-plugin-playlist", "Date": "2018-04-15T07:28:40Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "basis.Spel.initSpelListeners()=>basis.Spel.initSpelListeners()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7527/buggy-version/src.basis.Spel.java", "BodyUseAPI": [], "Fixed commit": "505419119eb1522903c7772c1dec66a30248ef4d", "Url": "https://api.github.com/repos/bbmanuputty/schoolGame", "Date": "2018-07-07T17:43:39Z"},
{"Line": "171=>171", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.json.JSONException.printStackTrace()=>java.lang.Exception.printStackTrace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4695/buggy-version/app.src.main.java.com.connection.stopbus.stopbus_user.ActivityStation.java", "BodyUseAPI": [], "Fixed commit": "01e37ec511dee9a91c6eca8621c8f34604976a7e", "Url": "https://api.github.com/repos/AJOU-Connection/StopBus_User", "Date": "2018-06-13T03:28:08Z"},
{"Line": "197=>197", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.json.JSONException.printStackTrace()=>java.lang.Exception.printStackTrace()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4695/buggy-version/app.src.main.java.com.connection.stopbus.stopbus_user.ServiceBeacon.java", "BodyUseAPI": [], "Fixed commit": "01e37ec511dee9a91c6eca8621c8f34604976a7e", "Url": "https://api.github.com/repos/AJOU-Connection/StopBus_User", "Date": "2018-06-13T03:28:08Z"},
{"Line": "1057=>1063", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference.internalIsAssignableFrom(org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference,org.eclipse.xtext.xbase.typesystem.conformance.TypeConformanceComputationArgument)=>org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference.internalIsAssignableFrom(org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference,TypeConformanceComputationArgument.DEFAULT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3301/buggy-version/org.eclipse.xtext.xbase.src.org.eclipse.xtext.xbase.typesystem.internal.AbstractPendingLinkingCandidate.java", "BodyUseAPI": [], "Fixed commit": "df2236e475529fda12e03c7aef322828f8996c41", "Url": "https://api.github.com/repos/eclipse/xtext-extras", "Date": "2018-06-03T17:33:15Z"},
{"Line": "1050=>1056", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference.internalIsAssignableFrom(org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference,org.eclipse.xtext.xbase.typesystem.conformance.TypeConformanceComputationArgument)=>org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference.internalIsAssignableFrom(org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference,TypeConformanceComputationArgument.DEFAULT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3301/buggy-version/org.eclipse.xtext.xbase.src.org.eclipse.xtext.xbase.typesystem.internal.AbstractPendingLinkingCandidate.java", "BodyUseAPI": [], "Fixed commit": "df2236e475529fda12e03c7aef322828f8996c41", "Url": "https://api.github.com/repos/eclipse/xtext-extras", "Date": "2018-06-03T17:33:15Z"},
{"Line": "72=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "this.em.createNamedQuery(Token.REMOVE_TOKEN).setParameter(java.lang.String,java.lang.String)=>this.em.createNamedQuery(Token.REMOVE_TOKEN).setParameter(java.lang.String,this.hash.getHashedText(token))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4018/buggy-version/src.main.java.id.swhp.javaee.soteria.business.security.boundary.TokenStore.java", "BodyUseAPI": [], "Fixed commit": "551ff0c0a16d936ee32503e4c7ec0851a34b872b", "Url": "https://api.github.com/repos/robyp1/javaee8sec", "Date": "2018-02-05T22:05:51Z"},
{"Line": "24=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.omnifaces.util.Servlets.facesRedirect(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)=>id.swhp.javaee.soteria.presentation.Logout.redirect(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4018/buggy-version/src.main.java.id.swhp.javaee.soteria.presentation.Logout.java", "BodyUseAPI": [], "Fixed commit": "551ff0c0a16d936ee32503e4c7ec0851a34b872b", "Url": "https://api.github.com/repos/robyp1/javaee8sec", "Date": "2018-02-05T22:05:51Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.LayoutInflater.inflate(com.prassatyan.linkedin.R.layout.fragment_linkedin,android.view.ViewGroup,boolean)=>android.view.LayoutInflater.inflate(R.layout.fragment_linkedin,android.view.ViewGroup,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8303/buggy-version/linkedinfeature.src.main.java.com.prassatyan.resume.feature.linkedin.LinkedinFragment.java", "BodyUseAPI": [], "Fixed commit": "c6054b09e859a7303700263b08eea0ba926b58ee", "Url": "https://api.github.com/repos/satyakaikala/ResumeApp", "Date": "2018-07-16T18:27:00Z"},
{"Line": "1887=>1887", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.badlogic.gdx.scenes.scene2d.ui.Image.setPosition(float,float)=>com.badlogic.gdx.scenes.scene2d.ui.Image.setPosition(float,(((stageHeight) - (upperPanelHeight)) - (((SnakeRPG.screenMenu.menuPositions.indexOf(this)) + 1) * ((MENU_SIZE_Y) + (MENU_POSITION_X)))))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3000/buggy-version/core.src.com.appatstudio.snakerpg.MenuPosition.java", "BodyUseAPI": [], "Fixed commit": "946a8e72371cbe5ee9e9edec54df7672bc43216c", "Url": "https://api.github.com/repos/PatrykSukiennik/SnakeRPG", "Date": "2018-04-24T14:20:42Z"},
{"Line": "1885=>1885", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.badlogic.gdx.scenes.scene2d.ui.Image.setPosition(float,float)=>com.badlogic.gdx.scenes.scene2d.ui.Image.setPosition(float,(((stageHeight) - (upperPanelHeight)) - (((SnakeRPG.screenMenu.menuPositions.indexOf(this)) + 1) * ((MENU_SIZE_Y) + (MENU_POSITION_X)))))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3000/buggy-version/core.src.com.appatstudio.snakerpg.MenuPosition.java", "BodyUseAPI": [], "Fixed commit": "946a8e72371cbe5ee9e9edec54df7672bc43216c", "Url": "https://api.github.com/repos/PatrykSukiennik/SnakeRPG", "Date": "2018-04-24T14:20:42Z"},
{"Line": "1884=>1884", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.badlogic.gdx.scenes.scene2d.ui.Image.setPosition(float,float)=>com.badlogic.gdx.scenes.scene2d.ui.Image.setPosition(float,(((stageHeight) - (upperPanelHeight)) - (((SnakeRPG.screenMenu.menuPositions.indexOf(this)) + 1) * ((MENU_SIZE_Y) + (MENU_POSITION_X)))))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3000/buggy-version/core.src.com.appatstudio.snakerpg.MenuPosition.java", "BodyUseAPI": [], "Fixed commit": "946a8e72371cbe5ee9e9edec54df7672bc43216c", "Url": "https://api.github.com/repos/PatrykSukiennik/SnakeRPG", "Date": "2018-04-24T14:20:42Z"},
{"Line": "63=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.ikeda.todolist.Services.PlaceService.findForUpdate(java.lang.Long)=>placeService.find(id).get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2484/buggy-version/src.main.java.com.ikeda.todolist.Controllers.PlaceController.java", "BodyUseAPI": [], "Fixed commit": "d92a21a21f16b10b08470348c4f6aea1a40b5274", "Url": "https://api.github.com/repos/Ikeponias/todolist", "Date": "2018-08-27T05:26:54Z"},
{"Line": "82=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuilder.append(java.lang.String)=>java.util.LinkedHashSet<java.lang.reflect.Field>.addAll(java.util.List)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5722/buggy-version/src.main.java.jmo.reflection.builders.SourceBuilderUtils.java", "BodyUseAPI": [], "Fixed commit": "134837313448008b38220906826d35d5a749e948", "Url": "https://api.github.com/repos/Aelphaeis/com.cruat.reflection", "Date": "2018-06-28T18:47:19Z"},
{"Line": "74=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "qa.tecnositafgulf.dao.administration.inventory.transfer.TransferDao.saveTransfer(qa.tecnositafgulf.model.administration.inventory.Transfer)=>qa.tecnositafgulf.dao.administration.inventory.transfer.TransferDao.save(qa.tecnositafgulf.model.administration.inventory.Transfer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9145/buggy-version/src.main.java.qa.tecnositafgulf.service.InventoryServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "9c0deb64746d3cf1e279213ac5add121145a0ad1", "Url": "https://api.github.com/repos/hadishatti/intranet", "Date": "2018-06-05T15:40:51Z"},
{"Line": "103=>109", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.shaolin.uimaster.page.AjaxContextHelper.updateAttrItem(((org.shaolin.uimaster.page.AjaxContextHelper.getAjaxContext().getEntityPrefix()) + (this.getId())),java.lang.String)=>org.shaolin.uimaster.page.AjaxContextHelper.updateAttrItem(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5127/buggy-version/modules.uipage.src.main.java.org.shaolin.uimaster.page.ajax.Button.java", "BodyUseAPI": [], "Fixed commit": "da72340e99f7a05ef7cdc11ab3fcbd1b3449a4e9", "Url": "https://api.github.com/repos/shaolinwu/uimaster", "Date": "2018-03-01T15:59:38Z"},
{"Line": "73=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "us.ihmc.graphicsDescription.appearance.YoAppearance.LightYellow()=>us.ihmc.graphicsDescription.appearance.YoAppearance.YellowGreen()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/435/buggy-version/ihmc-common-walking-control-modules.src.main.java.us.ihmc.commonWalkingControlModules.visualizer.EstimatedFromTorquesWrenchVisualizer.java", "BodyUseAPI": [], "Fixed commit": "04b810e1cb0f88da846b49a558a04a4e2974986b", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-09-11T04:28:08Z"},
{"Line": "166=>166", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "jackwtat.simplembta.controllers.PredictionsController.update()=>jackwtat.simplembta.fragments.NearbyFragment.forceRefresh()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3051/buggy-version/app.src.main.java.jackwtat.simplembta.fragments.NearbyFragment.java", "BodyUseAPI": [], "Fixed commit": "a8abab4ece26aea50c1c4494bfbce9ba37c1e014", "Url": "https://api.github.com/repos/jackwtat/SimpleMBTA", "Date": "2018-07-18T15:00:54Z"},
{"Line": "78=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.eclipse.jdt.internal.corext.codemanipulation.StubUtility2.createImplementationStub(org.eclipse.jdt.core.ICompilationUnit,org.eclipse.jdt.core.dom.rewrite.ASTRewrite,org.eclipse.jdt.core.dom.rewrite.ImportRewrite,importRewrite.getDefaultImportRewriteContext(),org.eclipse.jdt.core.dom.IMethodBinding,methodBinding.getDeclaringClass(),org.eclipse.jdt.internal.corext.codemanipulation.CodeGenerationSettings,boolean,methodBinding.getDeclaringClass())=>org.eclipse.jdt.internal.corext.codemanipulation.StubUtility2.createImplementationStub(org.eclipse.jdt.core.ICompilationUnit,org.eclipse.jdt.core.dom.rewrite.ASTRewrite,org.eclipse.jdt.core.dom.rewrite.ImportRewrite,importRewrite.getDefaultImportRewriteContext(),org.eclipse.jdt.core.dom.IMethodBinding,methodBinding.getDeclaringClass(),org.eclipse.jdt.internal.corext.codemanipulation.CodeGenerationSettings,boolean,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5834/buggy-version/jaxws.bundles.org.eclipse.jst.ws.jaxws.ui.src.org.eclipse.jst.ws.internal.jaxws.ui.annotations.correction.AddUnimplementedMethodCorrectionProposal.java", "BodyUseAPI": [], "Fixed commit": "c00bf0ba2dbc226c7641f3bd614af8f978174f9e", "Url": "https://api.github.com/repos/eclipse/webtools.webservices", "Date": "2018-03-01T17:44:56Z"},
{"Line": "175=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "intelligentdesign.android.lukeneff.FireBaseDataPoint.toMap()=>intelligentdesign.android.lukeneff.FaceEvaluateFragment.toMap()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8087/buggy-version/app.src.main.java.intelligentdesign.android.lukeneff.FaceEvaluateFragment.java", "BodyUseAPI": [], "Fixed commit": "06dc65dd8247a4a9d762b1afa4c3332d7586939e", "Url": "https://api.github.com/repos/BtLutz/LukeNeff", "Date": "2018-04-05T03:16:20Z"},
{"Line": "42=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.psu.swe.scim.spec.protocol.search.Filter.info((\"Creating a filter - \" + (filterExpression.toString())))=>edu.psu.swe.scim.spec.protocol.search.Filter.debug((\"Creating a filter - \" + (filterExpression.toString())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2273/buggy-version/scim-spec.scim-spec-protocol.src.main.java.edu.psu.swe.scim.spec.protocol.search.Filter.java", "BodyUseAPI": [], "Fixed commit": "b094e2c6bf17c45defde0d36ccc9781964d2e841", "Url": "https://api.github.com/repos/PennState/SCIMple-Identity", "Date": "2018-05-15T20:27:29Z"},
{"Line": "37=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.psu.swe.scim.spec.protocol.search.Filter.info(java.lang.String)=>edu.psu.swe.scim.spec.protocol.search.Filter.debug(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2273/buggy-version/scim-spec.scim-spec-protocol.src.main.java.edu.psu.swe.scim.spec.protocol.search.Filter.java", "BodyUseAPI": [], "Fixed commit": "b094e2c6bf17c45defde0d36ccc9781964d2e841", "Url": "https://api.github.com/repos/PennState/SCIMple-Identity", "Date": "2018-05-15T20:27:29Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.Button.getText()=>android.widget.EditText.getText()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/729/buggy-version/app.src.main.java.com.example.emmamalysz.killddl.AddDeadlineActivity.java", "BodyUseAPI": [], "Fixed commit": "4936814c934c00334b25615579e1ce0efca5d121", "Url": "https://api.github.com/repos/emalysz/KillDDL", "Date": "2018-10-18T05:45:18Z"},
{"Line": "274=>275", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.time.Instant.parse(java.lang.String)=>org.joda.time.format.DateTimeFormat.forPattern(DomainObject.TIMESTAMP_ISO8601_FORMAT).parseDateTime(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2191/buggy-version/src.main.java.gov.ca.cwds.rest.services.investigation.contact.ContactService.java", "BodyUseAPI": [], "Fixed commit": "fa4e4b054b4e22cb3595db0a5ff72dfb960deeee", "Url": "https://api.github.com/repos/ca-cwds/API", "Date": "2018-06-27T23:28:17Z"},
{"Line": "274=>275", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Date.from(java.time.Instant)=>org.joda.time.format.DateTimeFormat.forPattern(DomainObject.TIMESTAMP_ISO8601_FORMAT).parseDateTime(contactStartedAt.trim()).toDate()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2191/buggy-version/src.main.java.gov.ca.cwds.rest.services.investigation.contact.ContactService.java", "BodyUseAPI": [], "Fixed commit": "fa4e4b054b4e22cb3595db0a5ff72dfb960deeee", "Url": "https://api.github.com/repos/ca-cwds/API", "Date": "2018-06-27T23:28:17Z"},
{"Line": "274=>275", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.time.Instant.parse(java.lang.String)=>org.joda.time.format.DateTimeFormat.forPattern(DomainObject.TIMESTAMP_ISO8601_FORMAT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2191/buggy-version/src.main.java.gov.ca.cwds.rest.services.investigation.contact.ContactService.java", "BodyUseAPI": [], "Fixed commit": "fa4e4b054b4e22cb3595db0a5ff72dfb960deeee", "Url": "https://api.github.com/repos/ca-cwds/API", "Date": "2018-06-27T23:28:17Z"},
{"Line": "182=>182", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sunbird.learner.actors.CourseEnrollmentActor.getCourseObjectFromEkStep(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)=>org.sunbird.learner.actors.coursebatch.CourseEnrollmentActor.getCourseObjectFromEkStep(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2211/buggy-version/actors.common.src.main.java.org.sunbird.learner.util.CourseBatchSchedulerUtil.java", "BodyUseAPI": [], "Fixed commit": "d175bc4f04e03af75ca7642d2ef6162d55c81c78", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-09-26T05:33:24Z"},
{"Line": "182=>182", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sunbird.learner.actors.CourseEnrollmentActor.getCourseObjectFromEkStep(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)=>org.sunbird.learner.actors.coursebatch.CourseEnrollmentActor.getCourseObjectFromEkStep(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2211/buggy-version/actors.common.src.main.java.org.sunbird.learner.util.CourseBatchSchedulerUtil.java", "BodyUseAPI": [], "Fixed commit": "d175bc4f04e03af75ca7642d2ef6162d55c81c78", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-09-26T05:33:24Z"},
{"Line": "802=>801", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sunbird.learner.actors.CourseEnrollmentActor.getCourseObjectFromEkStep(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)=>org.sunbird.learner.actors.coursebatch.CourseEnrollmentActor.getCourseObjectFromEkStep(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2211/buggy-version/actors.common.src.main.java.org.sunbird.learner.actors.coursebatch.CourseBatchManagementActor.java", "BodyUseAPI": [], "Fixed commit": "d175bc4f04e03af75ca7642d2ef6162d55c81c78", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-09-26T05:33:24Z"},
{"Line": "802=>801", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.sunbird.learner.actors.CourseEnrollmentActor.getCourseObjectFromEkStep(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)=>org.sunbird.learner.actors.coursebatch.CourseEnrollmentActor.getCourseObjectFromEkStep(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2211/buggy-version/actors.common.src.main.java.org.sunbird.learner.actors.coursebatch.CourseBatchManagementActor.java", "BodyUseAPI": [], "Fixed commit": "d175bc4f04e03af75ca7642d2ef6162d55c81c78", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-09-26T05:33:24Z"},
{"Line": "160=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(java.util.Date)=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1828/buggy-version/src.client.gui.GUINewAssignment.java", "BodyUseAPI": [], "Fixed commit": "d3422b3c1ee6c34bba72535366e9a7b92f1cfc96", "Url": "https://api.github.com/repos/IngSW-unipv/Progetto-F18", "Date": "2018-07-08T14:04:39Z"},
{"Line": "159=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(java.util.Date)=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1828/buggy-version/src.client.gui.GUINewAssignment.java", "BodyUseAPI": [], "Fixed commit": "d3422b3c1ee6c34bba72535366e9a7b92f1cfc96", "Url": "https://api.github.com/repos/IngSW-unipv/Progetto-F18", "Date": "2018-07-08T14:04:39Z"},
{"Line": "49=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "clientController.getClient().setHitPoints(((clientController.getClient().getHitPoints()) + 1))=>clientController.getClient().setHitPoints(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4294/buggy-version/ClientShipTerminator.src.control.ShipController.java", "BodyUseAPI": [], "Fixed commit": "6866690383ba8be9f8eb9ffca6b4a04eb3255b45", "Url": "https://api.github.com/repos/tstelzle/JAVA", "Date": "2018-03-19T21:34:59Z"},
{"Line": "47=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.fasterxml.jackson.databind.JsonNode.toString()=>com.fasterxml.jackson.databind.JsonNode.asText()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9555/buggy-version/floodlight.src.main.java.net.floodlightcontroller.tarn.web.PrefixMappingResource.java", "BodyUseAPI": [], "Fixed commit": "7433ef7bc4d1438f3b2de1ccdc249b6e3d0abc9d", "Url": "https://api.github.com/repos/geddings/TARN", "Date": "2018-02-15T23:07:08Z"},
{"Line": "16=>15", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.esiea.mydaily.RecyclerView.ViewListRestaurantActicity.setContentView(R.layout.activity_view_list_restaurant_acticity)=>com.esiea.mydaily.RecyclerView.ViewListRestaurantActicity.setContentView(R.layout.activity_view_list_restaurant)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6750/buggy-version/app.src.main.java.com.esiea.mydaily.RecyclerView.ViewListRestaurantActicity.java", "BodyUseAPI": [], "Fixed commit": "e098278dc622365bb9ccb8d016be4f94e80ef62c", "Url": "https://api.github.com/repos/ShadowGhost228/MyDaily", "Date": "2018-05-31T08:27:53Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.support.v7.widget.RecyclerView.setAdapter(com.esiea.mydaily.RecyclerView.MyRestaurantAdapter)=>android.support.v7.widget.RecyclerView.setAdapter(com.esiea.mydaily.RecyclerView.MyKioskAdapter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6750/buggy-version/app.src.main.java.com.esiea.mydaily.RecyclerView.ViewListKioskActivity.java", "BodyUseAPI": [], "Fixed commit": "e098278dc622365bb9ccb8d016be4f94e80ef62c", "Url": "https://api.github.com/repos/ShadowGhost228/MyDaily", "Date": "2018-05-31T08:27:53Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.esiea.mydaily.RecyclerView.ViewListKioskActivity.findViewById(R.id.listRestaurant)=>com.esiea.mydaily.RecyclerView.ViewListKioskActivity.findViewById(R.id.listKiosk)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6750/buggy-version/app.src.main.java.com.esiea.mydaily.RecyclerView.ViewListKioskActivity.java", "BodyUseAPI": [], "Fixed commit": "e098278dc622365bb9ccb8d016be4f94e80ef62c", "Url": "https://api.github.com/repos/ShadowGhost228/MyDaily", "Date": "2018-05-31T08:27:53Z"},
{"Line": "160=>160", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "net.minecraft.world.World.setBlockToAir(net.minecraft.util.math.BlockPos)=>net.minecraft.world.World.destroyBlock(net.minecraft.util.math.BlockPos,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9049/buggy-version/src.main.java.com.minecolonies.coremod.network.messages.BuildingMoveMessage.java", "BodyUseAPI": [], "Fixed commit": "c2780d686d353d9db8d058a5b288b9fa0471b077", "Url": "https://api.github.com/repos/ldtteam/minecolonies", "Date": "2018-04-14T19:15:36Z"},
{"Line": "54=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.common.util.concurrent.RateLimiter.create(int)=>com.google.common.util.concurrent.RateLimiter.create(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3801/buggy-version/Prototypes.CryptoCompare.src.main.java.cryptocompare.CryptoCompareRateLimiter.java", "BodyUseAPI": [], "Fixed commit": "c2783db0c70dbe6cfd7ca09897ce25d0a26b6cdf", "Url": "https://api.github.com/repos/sbourgin/CryptoFolio", "Date": "2018-02-25T22:13:25Z"},
{"Line": "55=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.common.util.concurrent.RateLimiter.create(int)=>com.google.common.util.concurrent.RateLimiter.create(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3801/buggy-version/Prototypes.CryptoCompare.src.main.java.cryptocompare.CryptoCompareRateLimiter.java", "BodyUseAPI": [], "Fixed commit": "c2783db0c70dbe6cfd7ca09897ce25d0a26b6cdf", "Url": "https://api.github.com/repos/sbourgin/CryptoFolio", "Date": "2018-02-25T22:13:25Z"},
{"Line": "53=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.common.util.concurrent.RateLimiter.create(int)=>com.google.common.util.concurrent.RateLimiter.create(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3801/buggy-version/Prototypes.CryptoCompare.src.main.java.cryptocompare.CryptoCompareRateLimiter.java", "BodyUseAPI": [], "Fixed commit": "c2783db0c70dbe6cfd7ca09897ce25d0a26b6cdf", "Url": "https://api.github.com/repos/sbourgin/CryptoFolio", "Date": "2018-02-25T22:13:25Z"},
{"Line": "11=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "game.player.Utils.loadImage(java.lang.String)=>utils.Utils.loadImage(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9223/buggy-version/src.game.player.Player.java", "BodyUseAPI": [], "Fixed commit": "b14f436bd959838200791ff7a6496135ff29dadb", "Url": "https://api.github.com/repos/jujien/geo-arcade-ci4", "Date": "2018-03-15T14:56:14Z"},
{"Line": "13=>14", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "game.enemy.Utils.loadImage(java.lang.String)=>utils.Utils.loadImage(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9223/buggy-version/src.game.enemy.Enemy.java", "BodyUseAPI": [], "Fixed commit": "b14f436bd959838200791ff7a6496135ff29dadb", "Url": "https://api.github.com/repos/jujien/geo-arcade-ci4", "Date": "2018-03-15T14:56:14Z"},
{"Line": "12=>14", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "game.player.bullet.Utils.loadImage(java.lang.String)=>utils.Utils.loadImage(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9223/buggy-version/src.game.player.bullet.Bullet.java", "BodyUseAPI": [], "Fixed commit": "b14f436bd959838200791ff7a6496135ff29dadb", "Url": "https://api.github.com/repos/jujien/geo-arcade-ci4", "Date": "2018-03-15T14:56:14Z"},
{"Line": "10=>11", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "game.enemy.bullet.Utils.loadImage(java.lang.String)=>utils.Utils.loadImage(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9223/buggy-version/src.game.enemy.bullet.BulletEnemy.java", "BodyUseAPI": [], "Fixed commit": "b14f436bd959838200791ff7a6496135ff29dadb", "Url": "https://api.github.com/repos/jujien/geo-arcade-ci4", "Date": "2018-03-15T14:56:14Z"},
{"Line": "10=>11", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "game.enemy.bullet.Utils.loadImage(java.lang.String)=>utils.Utils.loadImage(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9223/buggy-version/src.game.enemy.bullet.BulletEnemy.java", "BodyUseAPI": [], "Fixed commit": "b14f436bd959838200791ff7a6496135ff29dadb", "Url": "https://api.github.com/repos/jujien/geo-arcade-ci4", "Date": "2018-03-15T14:56:14Z"},
{"Line": "11=>12", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "game.square.Utils.loadImage(java.lang.String)=>utils.Utils.loadImage(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9223/buggy-version/src.game.square.Square.java", "BodyUseAPI": [], "Fixed commit": "b14f436bd959838200791ff7a6496135ff29dadb", "Url": "https://api.github.com/repos/jujien/geo-arcade-ci4", "Date": "2018-03-15T14:56:14Z"},
{"Line": "11=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "game.square.Utils.loadImage(java.lang.String)=>utils.Utils.loadImage(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9223/buggy-version/src.game.square.Square.java", "BodyUseAPI": [], "Fixed commit": "b14f436bd959838200791ff7a6496135ff29dadb", "Url": "https://api.github.com/repos/jujien/geo-arcade-ci4", "Date": "2018-03-15T14:56:14Z"},
{"Line": "272=>272", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.sunbird.learner.actors.bulkupload.LocationBulkUploadBackGroundJobActor.setTaskStatus(org.sunbird.learner.actors.bulkupload.model.BulkUploadProcessTask,ProgressStatus.COMPLETED.getValue(),java.util.Map<java.lang.String, java.lang.Object>,JsonKey.CREATE)=>org.sunbird.learner.actors.bulkupload.LocationBulkUploadBackGroundJobActor.setSuccessTaskStatus(org.sunbird.learner.actors.bulkupload.model.BulkUploadProcessTask,ProgressStatus.COMPLETED.getValue(),java.util.Map<java.lang.String, java.lang.Object>,JsonKey.CREATE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1977/buggy-version/actors.common.src.main.java.org.sunbird.learner.actors.bulkupload.LocationBulkUploadBackGroundJobActor.java", "BodyUseAPI": [], "Fixed commit": "8415a5154e56923b1f126187696b1d43138ac4b6", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-05-24T07:07:46Z"},
{"Line": "202=>202", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.sunbird.learner.actors.bulkupload.LocationBulkUploadBackGroundJobActor.locationTypeAreEqual(java.lang.String,java.lang.Object)=>org.sunbird.learner.actors.bulkupload.LocationBulkUploadBackGroundJobActor.areLocationTypesEqual(java.lang.String,java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1977/buggy-version/actors.common.src.main.java.org.sunbird.learner.actors.bulkupload.LocationBulkUploadBackGroundJobActor.java", "BodyUseAPI": [], "Fixed commit": "8415a5154e56923b1f126187696b1d43138ac4b6", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-05-24T07:07:46Z"},
{"Line": "231=>231", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.sunbird.learner.actors.bulkupload.LocationBulkUploadBackGroundJobActor.setTaskStatus(org.sunbird.learner.actors.bulkupload.model.BulkUploadProcessTask,ProgressStatus.COMPLETED.getValue(),java.util.Map<java.lang.String, java.lang.Object>,JsonKey.UPDATE)=>org.sunbird.learner.actors.bulkupload.LocationBulkUploadBackGroundJobActor.setSuccessTaskStatus(org.sunbird.learner.actors.bulkupload.model.BulkUploadProcessTask,ProgressStatus.COMPLETED.getValue(),java.util.Map<java.lang.String, java.lang.Object>,JsonKey.UPDATE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1977/buggy-version/actors.common.src.main.java.org.sunbird.learner.actors.bulkupload.LocationBulkUploadBackGroundJobActor.java", "BodyUseAPI": [], "Fixed commit": "8415a5154e56923b1f126187696b1d43138ac4b6", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-05-24T07:07:46Z"},
{"Line": "208=>208", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.text.MessageFormat.format(java.lang.Object[])=>java.text.MessageFormat.format(ResponseCode.unupdatableField.getErrorMessage(),GeoLocationJsonKey.LOCATION_TYPE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1977/buggy-version/actors.common.src.main.java.org.sunbird.learner.actors.bulkupload.LocationBulkUploadBackGroundJobActor.java", "BodyUseAPI": [], "Fixed commit": "8415a5154e56923b1f126187696b1d43138ac4b6", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-05-24T07:07:46Z"},
{"Line": "97=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.baidu.disconf.client.addons.properties.DefaultPropertyPlaceholderConfigurer.parseStringValue(java.lang.String,java.util.Properties,java.util.Set)=>org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(java.lang.String,java.util.Properties)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1403/buggy-version/disconf-client.src.main.java.com.baidu.disconf.client.addons.properties.ReloadingPropertyPlaceholderConfigurer.java", "BodyUseAPI": [], "Fixed commit": "db027c57e600aea049ccd3cdbf134cb2b87f56a9", "Url": "https://api.github.com/repos/cjbi/disconf", "Date": "2018-09-04T07:51:00Z"},
{"Line": "97=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.baidu.disconf.client.addons.properties.DefaultPropertyPlaceholderConfigurer.parseStringValue(java.lang.String,java.util.Properties,java.util.Set)=>org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(java.lang.String,java.util.Properties)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1403/buggy-version/disconf-client.src.main.java.com.baidu.disconf.client.addons.properties.ReloadingPropertyPlaceholderConfigurer.java", "BodyUseAPI": [], "Fixed commit": "db027c57e600aea049ccd3cdbf134cb2b87f56a9", "Url": "https://api.github.com/repos/cjbi/disconf", "Date": "2018-09-04T07:51:00Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.File.getName()=>java.io.File.getAbsolutePath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/400/buggy-version/storage.driver.coop.nio.fs.src.main.java.com.emc.mongoose.storage.driver.coop.nio.fs.ListingHelper.java", "BodyUseAPI": [], "Fixed commit": "da8740ac7528d5571f0e875f4a85d6c1e8ee4b18", "Url": "https://api.github.com/repos/emc-mongoose/mongoose", "Date": "2018-08-15T16:27:40Z"},
{"Line": "242=>242", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.http.entity.ContentType.create(HTTPConstants.MEDIA_TYPE_APPLICATION_JSON)=>org.apache.http.entity.ContentType.create(HTTPConstants.MEDIA_TYPE_APPLICATION_JSON,java.nio.charset.Charset)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1389/buggy-version/components.identity-mgt.org.wso2.carbon.identity.mgt.endpoint.src.main.java.org.wso2.carbon.identity.mgt.endpoint.client.SelfRegistrationMgtClient.java", "BodyUseAPI": [], "Fixed commit": "88223d95f55b592c646a928f812ec7512be521a9", "Url": "https://api.github.com/repos/nuwandiw/carbon-identity-framework", "Date": "2018-09-03T07:30:27Z"},
{"Line": "137=>155", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "candidate.getSnapshots().isEnabled()=>com.e_gineering.maven.gitflowhelper.AbstractGitflowBasedRepositoryMojo.ensureRepositoryPolicy(candidate.getSnapshots())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1553/buggy-version/src.main.java.com.e_gineering.maven.gitflowhelper.AbstractGitflowBasedRepositoryMojo.java", "BodyUseAPI": [], "Fixed commit": "59c4c49f1aabac534d2e0fbf62a1023efaf38a5c", "Url": "https://api.github.com/repos/robth/gitflow-helper-maven-plugin", "Date": "2017-07-05T14:40:49Z"},
{"Line": "47=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.schmizz.sshj.DefaultConfig.setKeepAliveProvider(KeepAliveProvider.KEEP_ALIVE)=>net.sf.commons.ssh.impl.sshj.SSHJDefaultConfig.setKeepAliveProvider(KeepAliveProvider.KEEP_ALIVE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7397/buggy-version/src.main.java.net.sf.commons.ssh.impl.sshj.SSHJConnection.java", "BodyUseAPI": [], "Fixed commit": "5391bd3831b32a5e1b2bd30ffe29a170fb417a75", "Url": "https://api.github.com/repos/aasmirnova7/Commons-SSH", "Date": "2018-07-23T11:32:44Z"},
{"Line": "126=>126", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "net.shadowmage.ancientwarfare.npc.entity.NpcPlayerOwned.shouldBeAtHome()=>net.shadowmage.ancientwarfare.npc.entity.NpcPlayerOwned.shouldSleep()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1345/buggy-version/src.main.java.net.shadowmage.ancientwarfare.npc.entity.NpcWorker.java", "BodyUseAPI": [], "Fixed commit": "7df52cfd034cf809899074be326f7cf18f759d1e", "Url": "https://api.github.com/repos/P3pp3rF1y/AncientWarfare2", "Date": "2018-09-11T13:26:33Z"},
{"Line": "349=>351", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.split(java.lang.String)=>com.google.common.base.Splitter.on(';').split(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8229/buggy-version/game-core.src.main.java.games.strategy.sound.ClipPlayer.java", "BodyUseAPI": [], "Fixed commit": "11f71d63792ed221e1a7eb1c2e1a76300e29329b", "Url": "https://api.github.com/repos/ssoloff/triplea-game-triplea", "Date": "2018-08-21T06:04:46Z"},
{"Line": "112=>104", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.firebase.database.DatabaseReference.addValueEventListener(com.google.firebase.database.ValueEventListener)=>com.google.firebase.database.DatabaseReference.addValueEventListener(com.google.firebase.database.ValueEventListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5512/buggy-version/app.src.main.java.Group3.seshealthpatient.activities.DoctorUpdateInfoActivity.java", "BodyUseAPI": [], "Fixed commit": "a05c6474715e27068b8cabfb082a7ef74b4be5a5", "Url": "https://api.github.com/repos/ASustiyono/SES-1B-Group-3", "Date": "2018-09-20T15:14:05Z"},
{"Line": "227=>219", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "mUserRef.updateChildren(userMap).addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener)=>mUserRef.updateChildren(userMap).addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5512/buggy-version/app.src.main.java.Group3.seshealthpatient.activities.DoctorUpdateInfoActivity.java", "BodyUseAPI": [], "Fixed commit": "a05c6474715e27068b8cabfb082a7ef74b4be5a5", "Url": "https://api.github.com/repos/ASustiyono/SES-1B-Group-3", "Date": "2018-09-20T15:14:05Z"},
{"Line": "115=>116", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Config.parkourFinish.replaceAll(java.lang.String,((parkour.time) + \"\"))=>Config.parkourFinish.replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3880/buggy-version/src.cc.plugin.listeners.ParkourListener.java", "BodyUseAPI": [], "Fixed commit": "5076e41479c3741739e8c0eaa9ed2d77fd2c2200", "Url": "https://api.github.com/repos/ExcelCyphernia/CypherniaCore", "Date": "2018-09-13T14:19:28Z"},
{"Line": "121=>123", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Config.parkourCheckpoint.replaceAll(\"%number%\", (checkpoint + \"\")).replaceAll(java.lang.String,((parkour.time) + \"\"))=>Config.parkourCheckpoint.replaceAll(\"%number%\", (checkpoint + \"\")).replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3880/buggy-version/src.cc.plugin.listeners.ParkourListener.java", "BodyUseAPI": [], "Fixed commit": "5076e41479c3741739e8c0eaa9ed2d77fd2c2200", "Url": "https://api.github.com/repos/ExcelCyphernia/CypherniaCore", "Date": "2018-09-13T14:19:28Z"},
{"Line": "26=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.Exception(java.lang.String,java.lang.Throwable)=>java.lang.Exception(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1172/buggy-version/faldom.src.main.java.com.wisdomrider.faldom.FaldomError.java", "BodyUseAPI": [], "Fixed commit": "424209bbacf4f24d59bbb4fa84164920bb43546c", "Url": "https://api.github.com/repos/wisdomrider/Faldom", "Date": "2018-03-24T03:55:32Z"},
{"Line": "748=>748", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.vaadin.patrik.client.EditorStateManager.9.getEditorWidgetForColumn(int)=>org.vaadin.patrik.client.EditorStateManager.9.getEditorWidgetForColumn(int,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9619/buggy-version/GridFastNavigation-addon.src.main.java.org.vaadin.patrik.client.EditorStateManager.java", "BodyUseAPI": [], "Fixed commit": "e9db85c8866cb9176cd58612c97f6b77fd02d957", "Url": "https://api.github.com/repos/TatuLund/GridFastNavigation", "Date": "2018-07-12T18:57:46Z"},
{"Line": "528=>528", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.vaadin.client.widgets.Grid<java.lang.Object>.getColumns()=>com.vaadin.client.widgets.Grid<java.lang.Object>.getVisibleColumns()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9619/buggy-version/GridFastNavigation-addon.src.main.java.org.vaadin.patrik.client.EditorStateManager.java", "BodyUseAPI": [], "Fixed commit": "e9db85c8866cb9176cd58612c97f6b77fd02d957", "Url": "https://api.github.com/repos/TatuLund/GridFastNavigation", "Date": "2018-07-12T18:57:46Z"},
{"Line": "753=>753", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.vaadin.patrik.client.EditorStateManager.9.getEditorWidgetForColumn(int)=>org.vaadin.patrik.client.EditorStateManager.9.getEditorWidgetForColumn(int,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9619/buggy-version/GridFastNavigation-addon.src.main.java.org.vaadin.patrik.client.EditorStateManager.java", "BodyUseAPI": [], "Fixed commit": "e9db85c8866cb9176cd58612c97f6b77fd02d957", "Url": "https://api.github.com/repos/TatuLund/GridFastNavigation", "Date": "2018-07-12T18:57:46Z"},
{"Line": "747=>747", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.vaadin.client.widgets.Grid<java.lang.Object>.getColumns()=>com.vaadin.client.widgets.Grid<java.lang.Object>.getVisibleColumns()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9619/buggy-version/GridFastNavigation-addon.src.main.java.org.vaadin.patrik.client.EditorStateManager.java", "BodyUseAPI": [], "Fixed commit": "e9db85c8866cb9176cd58612c97f6b77fd02d957", "Url": "https://api.github.com/repos/TatuLund/GridFastNavigation", "Date": "2018-07-12T18:57:46Z"},
{"Line": "33=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.image)=>android.view.View.findViewById(R.id.dialog_icon_image)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5067/buggy-version/app.src.main.java.com.udacity.exploreindia.helper.CustomDialog.java", "BodyUseAPI": [], "Fixed commit": "ca8d52edd296dd9636f0a21662a427d713b6582d", "Url": "https://api.github.com/repos/UdacityAndroidDevScholarship/explore-india", "Date": "2018-05-04T14:42:41Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((org.apache.hadoop.hbase.client.HConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.2.2.5.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "43=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((org.apache.hadoop.hbase.client.HConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.2.2.5.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "72=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((com.splicemachine.storage.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.2.2.5.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "71=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((com.splicemachine.storage.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.2.2.5.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "43=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((org.apache.hadoop.hbase.client.HConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.2.2.6.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "72=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((com.splicemachine.storage.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.2.2.6.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((org.apache.hadoop.hbase.client.HConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.2.2.6.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "71=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((com.splicemachine.storage.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.2.2.6.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "43=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((org.apache.hadoop.hbase.client.HConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.8.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "72=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((com.splicemachine.storage.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.8.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "71=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((com.splicemachine.storage.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.8.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((org.apache.hadoop.hbase.client.HConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.8.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "71=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((com.splicemachine.storage.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.1.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((org.apache.hadoop.hbase.client.HConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.1.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "43=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((org.apache.hadoop.hbase.client.HConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.1.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "72=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((com.splicemachine.storage.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)=>((org.apache.hadoop.hbase.client.ClusterConnection) (com.splicemachine.access.hbase.HBaseConnectionFactory.getInstance(config).getNoRetryConnection())).clearRegionCache(org.apache.hadoop.hbase.TableName)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7799/buggy-version/hbase_storage.hbase1.1.1.src.main.java.com.splicemachine.storage.Hbase10PartitionCache.java", "BodyUseAPI": [], "Fixed commit": "7c90a8967c88699792bf7a8176171a6ad096d334", "Url": "https://api.github.com/repos/splicemachine/spliceengine", "Date": "2018-05-20T18:03:50Z"},
{"Line": "4253=>4254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, com.codename1.io.Cookie>.remove(e.getKey())=>java.util.ArrayList<java.lang.String>.add(e.getKey())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4935/buggy-version/CodenameOne.src.com.codename1.impl.CodenameOneImplementation.java", "BodyUseAPI": [], "Fixed commit": "685172518e00a7b846993bbc35967cf49a0bc611", "Url": "https://api.github.com/repos/codenameone/CodenameOne", "Date": "2018-02-14T13:14:05Z"},
{"Line": "51=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.format(java.lang.String,int)=>java.lang.String.format(java.lang.String,int,ru.lod_misis.ithappened.Statistics.Facts.StringParse.event(eventCount))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/53/buggy-version/Android.ItHappenedAndroid.app.src.main.java.ru.lod_misis.ithappened.Statistics.Facts.AllTrackingsStatistics.AllEventsCountFact.java", "BodyUseAPI": [], "Fixed commit": "b3447a7c88e8831a30eb967681f5b91a2749cfcc", "Url": "https://api.github.com/repos/LeagueOfDevelopers/ItHappened", "Date": "2018-04-24T10:08:06Z"},
{"Line": "117=>115", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.google.android.gms.common.api.GoogleApiClient.Builder(getActivity()).addApi(Places.GEO_DATA_API).enableAutoManage(getActivity(),int,com.electivechaos.checklistapp.fragments.LossLocationFragment)=>new com.google.android.gms.common.api.GoogleApiClient.Builder(getActivity()).addApi(Places.GEO_DATA_API).addConnectionCallbacks(com.electivechaos.checklistapp.fragments.LossLocationFragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7500/buggy-version/project.app.src.main.java.com.electivechaos.checklistapp.fragments.LossLocationFragment.java", "BodyUseAPI": [], "Fixed commit": "d7c858b9a2f86ec862ef1eb01af2d3506a211b7f", "Url": "https://api.github.com/repos/krishnakhandagale/RoportTool", "Date": "2018-04-30T08:30:43Z"},
{"Line": "60=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.replaceAll(java.lang.String,java.lang.String)=>org.slf4j.Logger.warn(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9365/buggy-version/src.main.java.cn.rongcloud.rtc.example.recorder.Recorder.java", "BodyUseAPI": [], "Fixed commit": "867b7e0af254a4990074615f26bc49267585b831", "Url": "https://api.github.com/repos/rongcloud/demo-rtc-record-server", "Date": "2018-10-11T09:19:34Z"},
{"Line": "142=>142", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "((java.lang.Number) (v.value)).doubleValue()=>v.value.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1383/buggy-version/src.main.java.org.nlpcn.es4sql.Util.java", "BodyUseAPI": [], "Fixed commit": "89b1343a25f08e625ac368c1c5ae7e67b31db574", "Url": "https://api.github.com/repos/LongLonger/elasticsearch-sql", "Date": "2018-03-03T09:19:57Z"},
{"Line": "111=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.codecool.queststore.controller.AdminController.getDataUri(com.sun.net.httpserver.HttpExchange)=>com.codecool.queststore.controller.AdminController.getDataUri(com.sun.net.httpserver.HttpExchange)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/33/buggy-version/src.main.java.com.codecool.queststore.controller.AdminController.java", "BodyUseAPI": [], "Fixed commit": "72ad656d2c48329fa44ed3ef6c8954c5c978fd39", "Url": "https://api.github.com/repos/Elzacodecool/quest-store", "Date": "2018-07-04T22:09:20Z"},
{"Line": "64=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.List<org.eclipse.xtext.validation.Issue>.add(org.eclipse.xtext.validation.Issue)=>java.util.List<org.eclipse.xtext.validation.Issue>.addAll(java.util.List<org.eclipse.xtext.validation.Issue>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7610/buggy-version/language.thingml.src.org.thingml.xtext.validation.Checker.java", "BodyUseAPI": [], "Fixed commit": "3fcd35acec9a63540d5171ee84ee7f329e0be9c1", "Url": "https://api.github.com/repos/TelluIoT/ThingML", "Date": "2018-01-14T21:11:53Z"},
{"Line": "792=>788", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "imu.recommender.models.request.UserRequestPerGroup.setGroup(user.getGroup())=>imu.recommender.models.request.UserRequestPerGroup.setGroup(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8179/buggy-version/src.main.java.imu.recommender.Recommender.java", "BodyUseAPI": [], "Fixed commit": "7a85af6c12324285c51b9a778819be416a4cfe41", "Url": "https://api.github.com/repos/mpthimios/optimum_recommender", "Date": "2018-01-04T11:15:52Z"},
{"Line": "792=>788", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "imu.recommender.models.user.User.getGroup()=>imu.recommender.models.request.UserRequestPerGroup.setGroup(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8179/buggy-version/src.main.java.imu.recommender.Recommender.java", "BodyUseAPI": [], "Fixed commit": "7a85af6c12324285c51b9a778819be416a4cfe41", "Url": "https://api.github.com/repos/mpthimios/optimum_recommender", "Date": "2018-01-04T11:15:52Z"},
{"Line": "53=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintWriter.println((((((((((((\"\\t\\\"\" + (binary.getVesion())) + \"\\\": \\\"\") + path) + library) + \"/\") + (binary.getVesion())) + \"/\") + xcode) + \"/\") + name) + \"\\\"\"))=>java.util.StringJoiner.add((((((((((((\"\\\"\" + (binary.getVesion())) + \"\\\": \\\"\") + path) + library) + \"/\") + (binary.getVesion())) + \"/\") + xcode) + \"/\") + name) + \"\\\"\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/956/buggy-version/src.java.org.kaizen.cbr.JsonGenerator.java", "BodyUseAPI": [], "Fixed commit": "9a5f0ada4d4358e52518c783288de7cd05d967a5", "Url": "https://api.github.com/repos/RustyKnight/CarthageBinaryRepository", "Date": "2018-09-27T03:32:48Z"},
{"Line": "169=>170", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.slf4j.Logger.error(java.lang.String,blastList.getDb(),java.lang.String)=>org.slf4j.Logger.warn(java.lang.String,blastList.getDb(),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2381/buggy-version/eppic-util.src.main.java.eppic.commons.sequence.HomologList.java", "BodyUseAPI": [], "Fixed commit": "c9751cfda6aed9f33607b48334b4b2f3a1fa16f1", "Url": "https://api.github.com/repos/josemduarte/eppic", "Date": "2018-09-17T23:46:06Z"},
{"Line": "142=>153", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "http.authorizeRequests().antMatchers(HttpMethod.OPTIONS)=>http.authorizeRequests().antMatchers(HttpMethod.OPTIONS,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/254/buggy-version/src.main.java.com.yong.security.Oauth2ServerConfig.java", "BodyUseAPI": [], "Fixed commit": "97793a684950c0394680e4329e15aad64df257b6", "Url": "https://api.github.com/repos/kioyong/yong-security", "Date": "2018-04-12T03:30:08Z"},
{"Line": "43=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.ruoxue.backend.util.XunBinKit.returnResult(boolean,int,java.util.Map<java.lang.String, java.lang.Object>,java.lang.String,java.lang.String)=>org.ruoxue.backend.util.XunBinKit.returnResult(boolean,int,((list.size()) > 0 ? list.get(0) : null),java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/492/buggy-version/src.main.java.org.ruoxue.backend.service.impl.TAdminServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "f29d81eab9ef429ee8b5705acf42261ae4829fc5", "Url": "https://api.github.com/repos/BIN006/UserBackend", "Date": "2018-09-13T11:11:37Z"},
{"Line": "126=>127", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.apache.log4j.Logger.warn(java.lang.String)=>org.apache.log4j.Logger.warn((((((\"write heartbeat failed: \" + result) + \", try: \") + i) + \" of \") + (_heartBeatUpdateMaxTries)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2953/buggy-version/plugins.hypervisors.kvm.src.com.cloud.hypervisor.kvm.resource.KVMHAMonitor.java", "BodyUseAPI": [], "Fixed commit": "e9648ad6782ecb8b43dd04f558d947458d851730", "Url": "https://api.github.com/repos/Slair1/cloudstack", "Date": "2018-02-28T00:36:35Z"},
{"Line": "97=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "javax.swing.JButton.addActionListener(java.awt.event.ActionListener)=>javax.swing.JButton.addMouseListener(java.awt.event.MouseAdapter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3418/buggy-version/src.cinemasystem.StartFrame.java", "BodyUseAPI": [], "Fixed commit": "2837f18ccd958ca12b73e3f856e4f4838896f76f", "Url": "https://api.github.com/repos/caoimhemcteague/CSDF-Group-1-Cinema", "Date": "2018-03-22T16:50:32Z"},
{"Line": "135=>131", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent e) { dateBoxActionPerformed(e); } }=>new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent e) { dateBoxActionPerformed(e); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3418/buggy-version/src.cinemasystem.StartFrame.java", "BodyUseAPI": [], "Fixed commit": "2837f18ccd958ca12b73e3f856e4f4838896f76f", "Url": "https://api.github.com/repos/caoimhemcteague/CSDF-Group-1-Cinema", "Date": "2018-03-22T16:50:32Z"},
{"Line": "99=>103", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "cinemasystem.StartFrame.3.jButton2ActionPerformed(java.awt.event.ActionEvent)=>cinemasystem.StartFrame.3.jButton3MouseClicked(java.awt.event.MouseEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3418/buggy-version/src.cinemasystem.StartFrame.java", "BodyUseAPI": [], "Fixed commit": "2837f18ccd958ca12b73e3f856e4f4838896f76f", "Url": "https://api.github.com/repos/caoimhemcteague/CSDF-Group-1-Cinema", "Date": "2018-03-22T16:50:32Z"},
{"Line": "108=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "cinemasystem.StartFrame.4.jButton3MouseClicked(java.awt.event.MouseEvent)=>cinemasystem.StartFrame.4.jButton4MouseClicked(java.awt.event.MouseEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3418/buggy-version/src.cinemasystem.StartFrame.java", "BodyUseAPI": [], "Fixed commit": "2837f18ccd958ca12b73e3f856e4f4838896f76f", "Url": "https://api.github.com/repos/caoimhemcteague/CSDF-Group-1-Cinema", "Date": "2018-03-22T16:50:32Z"},
{"Line": "144=>140", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.awt.event.MouseAdapter() { public void mouseClicked(java.awt.event.MouseEvent evt) { jButton6MouseClicked(evt); } }=>new java.awt.event.MouseAdapter() { public void mouseClicked(java.awt.event.MouseEvent evt) { jButton6MouseClicked(evt); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3418/buggy-version/src.cinemasystem.StartFrame.java", "BodyUseAPI": [], "Fixed commit": "2837f18ccd958ca12b73e3f856e4f4838896f76f", "Url": "https://api.github.com/repos/caoimhemcteague/CSDF-Group-1-Cinema", "Date": "2018-03-22T16:50:32Z"},
{"Line": "383=>408", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.Runnable() { public void run() { new cinemasystem.StartFrame().setVisible(true); } }=>new java.lang.Runnable() { public void run() { new cinemasystem.StartFrame().setVisible(true); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3418/buggy-version/src.cinemasystem.StartFrame.java", "BodyUseAPI": [], "Fixed commit": "2837f18ccd958ca12b73e3f856e4f4838896f76f", "Url": "https://api.github.com/repos/caoimhemcteague/CSDF-Group-1-Cinema", "Date": "2018-03-22T16:50:32Z"},
{"Line": "129=>124", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent e) { filmNameBoxActionPerformed(e); } }=>new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent e) { filmNameBoxActionPerformed(e); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3418/buggy-version/src.cinemasystem.StartFrame.java", "BodyUseAPI": [], "Fixed commit": "2837f18ccd958ca12b73e3f856e4f4838896f76f", "Url": "https://api.github.com/repos/caoimhemcteague/CSDF-Group-1-Cinema", "Date": "2018-03-22T16:50:32Z"},
{"Line": "111=>111", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.jogamp.opengl.GL4.glActiveTexture(int)=>com.jogamp.opengl.GL4.glActiveTexture(((this.skyboxTextureUnit) + (com.jogamp.opengl.GL4.GL_TEXTURE0)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4077/buggy-version/src.skybox.Skybox.java", "BodyUseAPI": [], "Fixed commit": "9203b83233e3400469410de9c02342833df96dc2", "Url": "https://api.github.com/repos/jovan-djukic/Water", "Date": "2018-02-25T15:33:32Z"},
{"Line": "102=>102", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.replace(char,char)=>java.lang.String.replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/673/buggy-version/core.src.main.java.software.amazon.awssdk.core.util.UserAgentUtils.java", "BodyUseAPI": [], "Fixed commit": "e864e98d02dcb77b04fbf64efc5917afd62491f5", "Url": "https://api.github.com/repos/zoewangg/aws-sdk-java-v2", "Date": "2018-02-09T00:12:56Z"},
{"Line": "77=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "software.amazon.awssdk.core.util.UserAgentUtils.replaceSpaces(JavaSystemSetting.OS_VERSION.getStringValue().orElse(null))=>software.amazon.awssdk.core.util.UserAgentUtils.sanitizeInput(JavaSystemSetting.OS_VERSION.getStringValue().orElse(null))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/673/buggy-version/core.src.main.java.software.amazon.awssdk.core.util.UserAgentUtils.java", "BodyUseAPI": [], "Fixed commit": "e864e98d02dcb77b04fbf64efc5917afd62491f5", "Url": "https://api.github.com/repos/zoewangg/aws-sdk-java-v2", "Date": "2018-02-09T00:12:56Z"},
{"Line": "79=>79", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "software.amazon.awssdk.core.util.UserAgentUtils.replaceSpaces(JavaSystemSetting.JAVA_VM_VERSION.getStringValue().orElse(null))=>software.amazon.awssdk.core.util.UserAgentUtils.sanitizeInput(JavaSystemSetting.JAVA_VM_VERSION.getStringValue().orElse(null))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/673/buggy-version/core.src.main.java.software.amazon.awssdk.core.util.UserAgentUtils.java", "BodyUseAPI": [], "Fixed commit": "e864e98d02dcb77b04fbf64efc5917afd62491f5", "Url": "https://api.github.com/repos/zoewangg/aws-sdk-java-v2", "Date": "2018-02-09T00:12:56Z"},
{"Line": "76=>76", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "software.amazon.awssdk.core.util.UserAgentUtils.replaceSpaces(JavaSystemSetting.OS_NAME.getStringValue().orElse(null))=>software.amazon.awssdk.core.util.UserAgentUtils.sanitizeInput(JavaSystemSetting.OS_NAME.getStringValue().orElse(null))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/673/buggy-version/core.src.main.java.software.amazon.awssdk.core.util.UserAgentUtils.java", "BodyUseAPI": [], "Fixed commit": "e864e98d02dcb77b04fbf64efc5917afd62491f5", "Url": "https://api.github.com/repos/zoewangg/aws-sdk-java-v2", "Date": "2018-02-09T00:12:56Z"},
{"Line": "88=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "software.amazon.awssdk.core.util.UserAgentUtils.replaceSpaces(java.lang.String)=>software.amazon.awssdk.core.util.UserAgentUtils.sanitizeInput(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/673/buggy-version/core.src.main.java.software.amazon.awssdk.core.util.UserAgentUtils.java", "BodyUseAPI": [], "Fixed commit": "e864e98d02dcb77b04fbf64efc5917afd62491f5", "Url": "https://api.github.com/repos/zoewangg/aws-sdk-java-v2", "Date": "2018-02-09T00:12:56Z"},
{"Line": "78=>78", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "software.amazon.awssdk.core.util.UserAgentUtils.replaceSpaces(JavaSystemSetting.JAVA_VM_NAME.getStringValue().orElse(null))=>software.amazon.awssdk.core.util.UserAgentUtils.sanitizeInput(JavaSystemSetting.JAVA_VM_NAME.getStringValue().orElse(null))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/673/buggy-version/core.src.main.java.software.amazon.awssdk.core.util.UserAgentUtils.java", "BodyUseAPI": [], "Fixed commit": "e864e98d02dcb77b04fbf64efc5917afd62491f5", "Url": "https://api.github.com/repos/zoewangg/aws-sdk-java-v2", "Date": "2018-02-09T00:12:56Z"},
{"Line": "88=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "software.amazon.awssdk.core.util.UserAgentUtils.replaceSpaces(java.lang.String)=>software.amazon.awssdk.core.util.UserAgentUtils.sanitizeInput(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/673/buggy-version/core.src.main.java.software.amazon.awssdk.core.util.UserAgentUtils.java", "BodyUseAPI": [], "Fixed commit": "e864e98d02dcb77b04fbf64efc5917afd62491f5", "Url": "https://api.github.com/repos/zoewangg/aws-sdk-java-v2", "Date": "2018-02-09T00:12:56Z"},
{"Line": "80=>80", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "software.amazon.awssdk.core.util.UserAgentUtils.replaceSpaces(JavaSystemSetting.JAVA_VERSION.getStringValue().orElse(null))=>software.amazon.awssdk.core.util.UserAgentUtils.sanitizeInput(JavaSystemSetting.JAVA_VERSION.getStringValue().orElse(null))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/673/buggy-version/core.src.main.java.software.amazon.awssdk.core.util.UserAgentUtils.java", "BodyUseAPI": [], "Fixed commit": "e864e98d02dcb77b04fbf64efc5917afd62491f5", "Url": "https://api.github.com/repos/zoewangg/aws-sdk-java-v2", "Date": "2018-02-09T00:12:56Z"},
{"Line": "246=>244", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.wso2.carbon.identity.application.authenticator.facebook.FacebookAuthenticator.buildClaims(org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext,java.util.Map<java.lang.String, java.lang.Object>)=>org.wso2.carbon.identity.application.authenticator.facebook.FacebookAuthenticator.buildClaims(org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext,java.util.Map<java.lang.String, java.lang.Object>,org.wso2.carbon.identity.application.common.model.ClaimConfig)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5500/buggy-version/components.org.wso2.carbon.identity.application.authenticator.facebook.src.main.java.org.wso2.carbon.identity.application.authenticator.facebook.FacebookAuthenticator.java", "BodyUseAPI": [], "Fixed commit": "ef02c558c21ff0139759d09e071c5b204938fb49", "Url": "https://api.github.com/repos/madurangasiriwardena/identity-outbound-auth-facebook", "Date": "2018-01-29T06:56:42Z"},
{"Line": "78=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "per.wsj.kotlinapp.adapter.base.CommonRecyclerAdapter<T>.setEmpty(android.support.v7.widget.RecyclerView,int)=>per.wsj.kotlinapp.adapter.base.CommonRecyclerAdapter<T>.setEmpty(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1230/buggy-version/kotlin_course.kotlinapp.src.main.java.per.wsj.kotlinapp.adapter.base.CommonRecyclerAdapter.java", "BodyUseAPI": [], "Fixed commit": "c6c8d5b04aac4995d6caff87a0f5de46a2560cd6", "Url": "https://api.github.com/repos/giswangsj/myrepository", "Date": "2018-04-02T02:22:33Z"},
{"Line": "235=>235", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new org.apache.maven.plugin.MojoExecutionException((\"Cannot resolve plugin: \" + (transformation.getRawPlugin())), exception)=>new org.apache.maven.plugin.MojoExecutionException((\"Cannot resolve plugin: \" + (transformation.getRawPlugin())), throwable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4946/buggy-version/byte-buddy-maven-plugin.src.main.java.net.bytebuddy.build.maven.ByteBuddyMojo.java", "BodyUseAPI": [], "Fixed commit": "ee37bfc6415d2954fe5927fe424ec772d9e04806", "Url": "https://api.github.com/repos/raphw/byte-buddy", "Date": "2018-09-29T16:17:02Z"},
{"Line": "94=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new org.gradle.api.GradleException((\"Cannot resolve plugin: \" + (transformation.getRawPlugin())), exception)=>new org.gradle.api.GradleException((\"Cannot resolve plugin: \" + (transformation.getRawPlugin())), throwable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4946/buggy-version/byte-buddy-gradle-plugin.src.main.java.net.bytebuddy.build.gradle.TransformationAction.java", "BodyUseAPI": [], "Fixed commit": "ee37bfc6415d2954fe5927fe424ec772d9e04806", "Url": "https://api.github.com/repos/raphw/byte-buddy", "Date": "2018-09-29T16:17:02Z"},
{"Line": "209=>197", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.google.android.gms.maps.GoogleMap.moveCamera(com.google.android.gms.maps.CameraUpdateFactory.newLatLngZoom(new com.google.android.gms.maps.model.LatLng(location.getLatitude(), location.getLongitude()), com.example.traig.mapapplication.activity.MainActivity.DEFAULT_ZOOM))=>com.google.android.gms.maps.GoogleMap.animateCamera(com.google.android.gms.maps.CameraUpdateFactory.newLatLngZoom(new com.google.android.gms.maps.model.LatLng(location.getLatitude(), location.getLongitude()), com.example.traig.mapapplication.activity.MainActivity.DEFAULT_ZOOM))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7977/buggy-version/app.src.main.java.com.example.traig.mapapplication.activity.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "4eed3f261048d731b2be7d393102c4f7cd4f3aa8", "Url": "https://api.github.com/repos/taidev198/MapApplication", "Date": "2018-06-30T08:16:20Z"},
{"Line": "89=>89", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "trx.getInstance().getRawData()=>trx.getInstance().getSerializedSize()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3864/buggy-version/src.main.java.org.tron.core.db.BandwidthProcessor.java", "BodyUseAPI": [], "Fixed commit": "1162ebeaba053dddea4de3c528224824dc4353c5", "Url": "https://api.github.com/repos/tronprotocol/java-tron", "Date": "2018-07-09T08:40:57Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "lab5.store.events.Arrival.incMissed()=>lab5.store.StoreState.incMissed()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3548/buggy-version/D0010E-Lab5.src.lab5.store.events.Arrival.java", "BodyUseAPI": [], "Fixed commit": "d1240a38ca1565fd5823a91501e44086b43b1aa2", "Url": "https://api.github.com/repos/FreddeLindgren/D0010E-Lab5", "Date": "2018-03-01T22:00:35Z"},
{"Line": "630=>660", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.Runnable() { @java.lang.Override public void run() { if (!(mAlreadyStartedService)) { initMap(); android.content.Intent intent = new android.content.Intent(com.example.sestas_aukstas.ework.MainActivity.this, com.example.sestas_aukstas.ework.LocationMonitoringService.class); startService(intent); mAlreadyStartedService = true; } } }=>new java.lang.Runnable() { @java.lang.Override public void run() { if (!(mAlreadyStartedService)) { initMap(); android.content.Intent intent = new android.content.Intent(com.example.sestas_aukstas.ework.MainActivity.this, com.example.sestas_aukstas.ework.LocationMonitoringService.class); startService(intent); mAlreadyStartedService = true; } } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1416/buggy-version/app.src.main.java.com.example.sestas_aukstas.ework.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "b0f905d94e64c38d38bccafc42ed26570fd806a0", "Url": "https://api.github.com/repos/marvei/Sestas_Aukstas", "Date": "2018-05-22T20:36:20Z"},
{"Line": "592=>622", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "AlertDialog.Builder.setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>AlertDialog.Builder.setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1416/buggy-version/app.src.main.java.com.example.sestas_aukstas.ework.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "b0f905d94e64c38d38bccafc42ed26570fd806a0", "Url": "https://api.github.com/repos/marvei/Sestas_Aukstas", "Date": "2018-05-22T20:36:20Z"},
{"Line": "630=>660", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.os.Handler.postDelayed(java.lang.Runnable,int)=>android.os.Handler.postDelayed(java.lang.Runnable,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1416/buggy-version/app.src.main.java.com.example.sestas_aukstas.ework.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "b0f905d94e64c38d38bccafc42ed26570fd806a0", "Url": "https://api.github.com/repos/marvei/Sestas_Aukstas", "Date": "2018-05-22T20:36:20Z"},
{"Line": "1167=>1167", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.StringBuilder.toString()=>java.lang.String.substring(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/294/buggy-version/app.src.main.java.com.layoutxml.twelveish.MyWatchFace.java", "BodyUseAPI": [], "Fixed commit": "7fb0d2ba2e70ecce898f2c3e78ccb20c74dacc29", "Url": "https://api.github.com/repos/LayoutXML/Twelveish", "Date": "2018-10-09T22:18:22Z"},
{"Line": "1165=>1165", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.StringBuilder.append(java.lang.String)=>java.lang.StringBuilder.append(char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/294/buggy-version/app.src.main.java.com.layoutxml.twelveish.MyWatchFace.java", "BodyUseAPI": [], "Fixed commit": "7fb0d2ba2e70ecce898f2c3e78ccb20c74dacc29", "Url": "https://api.github.com/repos/LayoutXML/Twelveish", "Date": "2018-10-09T22:18:22Z"},
{"Line": "147=>149", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.pdxfinder.utilities.LoaderUtils.getSample(java.lang.String,j.getString(\"Tumor Type\"),java.lang.String,java.lang.String,java.lang.String,j.getString(\"Sample Type\"),java.lang.String,java.lang.Boolean,mdaDS.getAbbreviation())=>org.pdxfinder.utilities.LoaderUtils.getSample(java.lang.String,j.getString(\"Tumor Type\"),java.lang.String,j.getString(\"Primary Site\"),java.lang.String,j.getString(\"Sample Type\"),java.lang.String,java.lang.Boolean,mdaDS.getAbbreviation())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7135/buggy-version/indexer.src.main.java.org.pdxfinder.commands.LoadWUSTL.java", "BodyUseAPI": [], "Fixed commit": "3f50cf13f90ae54b45cbc2f9f3f4205bfee24b2d", "Url": "https://api.github.com/repos/PDXFinder/pdxfinder", "Date": "2018-03-27T14:03:37Z"},
{"Line": "292=>292", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.scrats.rent.service.impl.ExtraHistory.getCount()=>com.scrats.rent.service.impl.RentIterm.getPrice()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/239/buggy-version/src.main.java.com.scrats.rent.service.impl.RoomServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "83249457b017b98318356f33772159daa360e6d2", "Url": "https://api.github.com/repos/scrat-ryan/rent", "Date": "2018-07-02T16:47:44Z"},
{"Line": "163=>163", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "lDetectionArm.getPixelSizeInMicrometerVariable().set(double)=>lDetectionArm.getPixelSizeInMicrometerVariable().set(getDevice(clearcontrol.devices.cameras.StackCameraDeviceInterface.class, c).getPixelSizeInMicrometersVariable().get())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6018/buggy-version/src.xwing.BScopeMicroscope.java", "BodyUseAPI": [], "Fixed commit": "fb798f58d324d4e7fc4323163383f3703970c802", "Url": "https://api.github.com/repos/ClearControl/bscope", "Date": "2018-07-10T15:55:52Z"},
{"Line": "22=>23", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println((\"Testing node \" + (String((x + 1)))))=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5415/buggy-version/src.nodeLookup.java", "BodyUseAPI": [], "Fixed commit": "d09ffccbf4f5edf9c862c43addc538361aceaa2f", "Url": "https://api.github.com/repos/mitsukomegumi/Indocore", "Date": "2018-04-27T01:00:30Z"},
{"Line": "115=>115", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.Integer.parseInt(intent.getStringExtra(\"tourID\"))=>android.content.Intent.getStringExtra(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2791/buggy-version/Zirbl001.app.src.main.java.hsaugsburg.zirbl001.TourActivities.ClassRegistrationActivity.java", "BodyUseAPI": [], "Fixed commit": "91c22f44f17e3a0935d77cdba8a9a16ec76f603a", "Url": "https://api.github.com/repos/coList/Zirbl", "Date": "2018-02-05T19:57:19Z"},
{"Line": "51=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.json.JSONObject.put(java.lang.String,int)=>org.json.JSONObject.put(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2791/buggy-version/Zirbl001.app.src.main.java.hsaugsburg.zirbl001.Datamanagement.UploadTasks.InsertIntoClass.java", "BodyUseAPI": [], "Fixed commit": "91c22f44f17e3a0935d77cdba8a9a16ec76f603a", "Url": "https://api.github.com/repos/coList/Zirbl", "Date": "2018-02-05T19:57:19Z"},
{"Line": "54=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.amazonaws.regions.RegionUtils.getRegion(java.lang.String)=>com.amazonaws.services.sns.AmazonSNSClientBuilder.defaultClient()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6322/buggy-version/apiary-metastore-listener.src.main.java.com.expedia.apiary.extensions.metastore.listener.ApiarySnsListener.java", "BodyUseAPI": [], "Fixed commit": "14198575ad988f5542f8db86f4c7b8892e82bfc2", "Url": "https://api.github.com/repos/ExpediaInc/apiary-extensions", "Date": "2018-08-23T15:17:07Z"},
{"Line": "139=>137", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.amazonaws.services.sns.AmazonSNSClient.publish(com.amazonaws.services.sns.model.PublishRequest)=>com.amazonaws.services.sns.AmazonSNS.publish(com.amazonaws.services.sns.model.PublishRequest)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6322/buggy-version/apiary-metastore-listener.src.main.java.com.expedia.apiary.extensions.metastore.listener.ApiarySnsListener.java", "BodyUseAPI": [], "Fixed commit": "14198575ad988f5542f8db86f4c7b8892e82bfc2", "Url": "https://api.github.com/repos/ExpediaInc/apiary-extensions", "Date": "2018-08-23T15:17:07Z"},
{"Line": "216=>217", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.Button.setLayoutParams(android.widget.TableLayout.LayoutParams)=>android.widget.Button.setWidth(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1323/buggy-version/app.src.main.java.com.example.wiskowski.rounddisland.HuntPage.java", "BodyUseAPI": [], "Fixed commit": "659d48f4656b2c4c46ddd872447b6b0470f7bc38", "Url": "https://api.github.com/repos/Red395/RDI", "Date": "2018-08-14T23:43:39Z"},
{"Line": "32=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cn.wws.springjunior.ioc.EnhanceField.addField(java.util.List<cn.wws.springjunior.ioc.EnhanceField>,cn.wws.springjunior.ioc.EnhanceField)=>java.util.List<cn.wws.springjunior.ioc.EnhanceField>.add(cn.wws.springjunior.ioc.EnhanceField)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3678/buggy-version/src.main.java.cn.wws.springjunior.ioc.EnhanceField.java", "BodyUseAPI": [], "Fixed commit": "8ad123f081479d509cb5a810618cae18e1ca1dbf", "Url": "https://api.github.com/repos/MasterSJ/SpringJunior", "Date": "2018-05-16T09:33:16Z"},
{"Line": "89=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.nfl.glitr.registry.TypeRegistry.createRelayMutationType(java.lang.Class)=>com.nfl.glitr.registry.TypeRegistry.lookup(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9865/buggy-version/src.main.java.com.nfl.glitr.Glitr.java", "BodyUseAPI": [], "Fixed commit": "25183b8fcaa3d7d25358e7f76471831e7c299844", "Url": "https://api.github.com/repos/nfl/glitr", "Date": "2018-04-11T21:09:55Z"},
{"Line": "358=>364", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.alfresco.util.EqualsHelper.nullSafeEquals(backingWriter.getContentUrl(),java.lang.String)=>org.alfresco.util.EqualsHelper.nullSafeEquals(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7452/buggy-version/src.main.java.de.acosix.alfresco.simplecontentstores.repo.store.facade.DeduplicatingContentWriter.java", "BodyUseAPI": [], "Fixed commit": "9ceccccd670252d58126576e3e2698f324cf15c7", "Url": "https://api.github.com/repos/Acosix/alfresco-simple-content-stores", "Date": "2018-03-20T21:00:13Z"},
{"Line": "94=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.thosp.yourlocalweather.utils.AppPreference.hideDescription(android.content.Context)=>java.util.Iterator<java.lang.String>.hasNext()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3691/buggy-version/app.src.main.java.org.thosp.yourlocalweather.utils.AppPreference.java", "BodyUseAPI": [], "Fixed commit": "e4527e321d7282b7c51ed6dd80d24f740713f0f0", "Url": "https://api.github.com/repos/thuryn/your-local-weather", "Date": "2018-01-11T21:44:51Z"},
{"Line": "94=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.thosp.yourlocalweather.utils.AppPreference.hideDescription(android.content.Context)=>java.util.Iterator<java.lang.String>.hasNext()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3691/buggy-version/app.src.main.java.org.thosp.yourlocalweather.utils.AppPreference.java", "BodyUseAPI": [], "Fixed commit": "e4527e321d7282b7c51ed6dd80d24f740713f0f0", "Url": "https://api.github.com/repos/thuryn/your-local-weather", "Date": "2018-01-11T21:44:51Z"},
{"Line": "94=>90", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.thosp.yourlocalweather.model.Weather.addCurrentWeather(int,(org.thosp.yourlocalweather.utils.AppPreference.hideDescription(context) ? \"\" : currentWeatherDescriptions.next()),java.lang.String)=>java.util.Iterator<java.lang.String>.hasNext()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3691/buggy-version/app.src.main.java.org.thosp.yourlocalweather.utils.AppPreference.java", "BodyUseAPI": [], "Fixed commit": "e4527e321d7282b7c51ed6dd80d24f740713f0f0", "Url": "https://api.github.com/repos/thuryn/your-local-weather", "Date": "2018-01-11T21:44:51Z"},
{"Line": "107=>107", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.minecraft.inventory.Slot.putStack(<nulltype>)=>net.minecraft.inventory.Slot.putStack(ItemStack.EMPTY)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9347/buggy-version/src.main.java.com.itachi1706.cheesecakeservercommands.server.commands.util.ContainerCheatyWorkbench.java", "BodyUseAPI": [], "Fixed commit": "af823c0a9b654f447f5e769b9572a835a7ae251c", "Url": "https://api.github.com/repos/itachi1706/CheesecakeServerCommands", "Date": "2018-07-01T09:20:07Z"},
{"Line": "409=>400", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.format(messageSource.getMessage(new org.springframework.context.support.DefaultMessageSourceResolvable(\"developer.merge.dupChplProdNbrs\"), org.springframework.context.i18n.LocaleContextHolder.getLocale()),java.lang.String,java.lang.String)=>gov.healthit.chpl.util.ErrorMessageUtil.getMessage(java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9869/buggy-version/chpl.chpl-service.src.main.java.gov.healthit.chpl.manager.impl.DeveloperManagerImpl.java", "BodyUseAPI": [], "Fixed commit": "f16391abea835c3a151a90c57ab45586d0674193", "Url": "https://api.github.com/repos/chpladmin/chpl-api", "Date": "2018-08-21T18:52:58Z"},
{"Line": "165=>158", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.context.MessageSource.getMessage(org.springframework.context.support.DefaultMessageSourceResolvable,java.util.Locale)=>gov.healthit.chpl.util.ErrorMessageUtil.getMessage(java.lang.String,gov.healthit.chpl.auth.Util.getUsername(),beforeDev.getName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9869/buggy-version/chpl.chpl-service.src.main.java.gov.healthit.chpl.manager.impl.DeveloperManagerImpl.java", "BodyUseAPI": [], "Fixed commit": "f16391abea835c3a151a90c57ab45586d0674193", "Url": "https://api.github.com/repos/chpladmin/chpl-api", "Date": "2018-08-21T18:52:58Z"},
{"Line": "572=>561", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.format(messageSource.getMessage(new org.springframework.context.support.DefaultMessageSourceResolvable(\"developer.merge.dupChplProdNbrs.duplicate\"), org.springframework.context.i18n.LocaleContextHolder.getLocale()),java.lang.String,java.lang.String)=>gov.healthit.chpl.util.ErrorMessageUtil.getMessage(java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9869/buggy-version/chpl.chpl-service.src.main.java.gov.healthit.chpl.manager.impl.DeveloperManagerImpl.java", "BodyUseAPI": [], "Fixed commit": "f16391abea835c3a151a90c57ab45586d0674193", "Url": "https://api.github.com/repos/chpladmin/chpl-api", "Date": "2018-08-21T18:52:58Z"},
{"Line": "153=>149", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.format(messageSource.getMessage(new org.springframework.context.support.DefaultMessageSourceResolvable(\"developer.noStatusFound\"), java.util.Locale.getDefault()),beforeDev.getName())=>gov.healthit.chpl.util.ErrorMessageUtil.getMessage(java.lang.String,beforeDev.getName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9869/buggy-version/chpl.chpl-service.src.main.java.gov.healthit.chpl.manager.impl.DeveloperManagerImpl.java", "BodyUseAPI": [], "Fixed commit": "f16391abea835c3a151a90c57ab45586d0674193", "Url": "https://api.github.com/repos/chpladmin/chpl-api", "Date": "2018-08-21T18:52:58Z"},
{"Line": "165=>158", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.format(messageSource.getMessage(new org.springframework.context.support.DefaultMessageSourceResolvable(\"developer.notActiveNotAdminCantChangeStatus\"), java.util.Locale.getDefault()),gov.healthit.chpl.auth.Util.getUsername(),beforeDev.getName())=>gov.healthit.chpl.util.ErrorMessageUtil.getMessage(java.lang.String,gov.healthit.chpl.auth.Util.getUsername(),beforeDev.getName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9869/buggy-version/chpl.chpl-service.src.main.java.gov.healthit.chpl.manager.impl.DeveloperManagerImpl.java", "BodyUseAPI": [], "Fixed commit": "f16391abea835c3a151a90c57ab45586d0674193", "Url": "https://api.github.com/repos/chpladmin/chpl-api", "Date": "2018-08-21T18:52:58Z"},
{"Line": "48=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.example.eliavmenachi.myapplication.Models.User.UserModelFirebase.getUserByUsernamePasswordListener.onSuccess(<nulltype>)=>com.example.eliavmenachi.myapplication.Models.User.UserModelFirebase.getUserByUsernamePasswordListener.onFailure()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2803/buggy-version/app.src.main.java.com.example.eliavmenachi.myapplication.Models.User.UserModelFirebase.java", "BodyUseAPI": [], "Fixed commit": "75944e584ab9ebfb72f35822b64b8ab7f2a7b34f", "Url": "https://api.github.com/repos/OrForte/Sale-App", "Date": "2018-07-28T14:12:08Z"},
{"Line": "132=>136", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.nio.channels.FileChannel.force(boolean)=>edu.uci.asterixdb.storage.experiments.FileWriteExperiment.force(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8114/buggy-version/storage-experiments.src.edu.uci.asterixdb.storage.experiments.FileWriteExperiment.java", "BodyUseAPI": [], "Fixed commit": "472d606602189555fa210f22c30a6d587c077c9d", "Url": "https://api.github.com/repos/luochen01/storage-experiments", "Date": "2018-03-30T22:31:11Z"},
{"Line": "163=>162", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.cps_sunjae.sensorapp.SensorService.write(com.google.android.gms.wearable.DataMap)=>com.example.cps_sunjae.sensorapp.SensorService.WriteTask.execute(com.google.android.gms.wearable.DataMap)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7483/buggy-version/SensorApp.mobile.src.main.java.com.example.cps_sunjae.sensorapp.SensorService.java", "BodyUseAPI": [], "Fixed commit": "d3be645cd6245eb6f2043d5141f107d83a49117d", "Url": "https://api.github.com/repos/sunjae1294/CPS-sensor", "Date": "2018-08-03T08:09:18Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,model.getFilteredDiveList().size())=>java.lang.String.format(Messages.MESSAGE_DIVE_LISTED_OVERVIEW,model.getFilteredDiveList().size())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8482/buggy-version/src.main.java.seedu.divelog.logic.commands.FindCommand.java", "BodyUseAPI": [], "Fixed commit": "2f7d672e8c2ea99934eade8a8a22b790cf1b250b", "Url": "https://api.github.com/repos/CS2113-AY1819S1-W13-2/main", "Date": "2018-10-14T06:52:08Z"},
{"Line": "1034=>1034", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<android.net.UidRange>.addAll(java.util.Set<android.net.UidRange>)=>android.util.ArraySet<android.net.UidRange>.addAll(android.util.ArraySet<android.net.UidRange>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/879/buggy-version/core.java.android.net.NetworkCapabilities.java", "BodyUseAPI": [], "Fixed commit": "a8452ed2a675d3f69ff8e6b281a176b69155dcd7", "Url": "https://api.github.com/repos/aosp-mirror/platform_frameworks_base", "Date": "2018-01-25T05:37:21Z"},
{"Line": "55=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.io.PrintStream.printf(java.lang.String,int)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8298/buggy-version/src.Node.Node.java", "BodyUseAPI": [], "Fixed commit": "13fdcb9c26422e861070514eaea36a6459a79da2", "Url": "https://api.github.com/repos/anhdnguyenn/CS470", "Date": "2018-03-08T05:04:10Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.util.ArrayList<java.net.InetAddress>>.contains(java.net.InetAddress)=>java.util.ArrayList<java.net.InetAddress>.contains(java.net.InetAddress)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8298/buggy-version/src.Node.Node.java", "BodyUseAPI": [], "Fixed commit": "13fdcb9c26422e861070514eaea36a6459a79da2", "Url": "https://api.github.com/repos/anhdnguyenn/CS470", "Date": "2018-03-08T05:04:10Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "ch.qos.logback.classic.spi.ILoggingEvent.getMessage()=>ch.qos.logback.classic.spi.ILoggingEvent.getFormattedMessage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7190/buggy-version/logback-bunyan.src.main.java.se.kth.infosys.logback.BunyanLayout.java", "BodyUseAPI": [], "Fixed commit": "ee81ac36ac3967c9fbbcc8c6dfb8f74fc82f2912", "Url": "https://api.github.com/repos/KTH/bunyan-layout", "Date": "2018-02-21T20:13:58Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.android.farotrack.OutFaro.getOneShuffle()=>com.example.android.farotrack.OutFaro.results()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7866/buggy-version/app.src.main.java.com.example.android.farotrack.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "d236c34b07b90408876304232e97c02a17e6630e", "Url": "https://api.github.com/repos/Ben7217/FaroTrackerAndroidApp", "Date": "2018-03-04T05:18:26Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.android.farotrack.OutFaro.getOneShuffle()=>com.example.android.farotrack.OutFaro.results()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7866/buggy-version/app.src.main.java.com.example.android.farotrack.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "d236c34b07b90408876304232e97c02a17e6630e", "Url": "https://api.github.com/repos/Ben7217/FaroTrackerAndroidApp", "Date": "2018-03-04T05:18:26Z"},
{"Line": "195=>202", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.servlet.http.HttpServletRequest.setCharacterEncoding(java.lang.String)=>javax.servlet.http.HttpServletRequest.getParameter(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/38/buggy-version/src.java.utility.editUtility.java", "BodyUseAPI": [], "Fixed commit": "2fae7b407d604e511d813d034c2b636d70268bdc", "Url": "https://api.github.com/repos/rizzaliau/LimKeeAdmin", "Date": "2018-07-14T17:14:06Z"},
{"Line": "48=>48", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "map.UnitPositionChecker.hurtSameTypeUnitAtPosition(units.Unit,int,int)=>map.UnitPositionChecker.hurtSameTypeUnitAtPosition(units.Unit,(cursorX * (gameProp.getMapDim().tileSize)),(cursorY * (gameProp.getMapDim().tileSize)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1952/buggy-version/menus.unit.UnitMenuHandler.java", "BodyUseAPI": [], "Fixed commit": "1074abf7adda16a97f38da2edec6dfb938749644", "Url": "https://api.github.com/repos/pnyberg/super-advanced-wars", "Date": "2018-10-19T22:36:06Z"},
{"Line": "56=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.ui.ContactDetailsDisplay.addPropertyToList(java.lang.String,person.getAddress().value)=>seedu.address.ui.ContactDetailsDisplay.addPropertyToList(java.lang.String,person.getAddress().value,java.util.List<javafx.scene.control.Label>,java.util.List<javafx.scene.control.Label>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9286/buggy-version/src.main.java.seedu.address.ui.ContactDetailsDisplay.java", "BodyUseAPI": [], "Fixed commit": "313cb23438b3e31b8e9a93334721058301f07c74", "Url": "https://api.github.com/repos/KevinCJH/main", "Date": "2018-03-19T16:57:03Z"},
{"Line": "53=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.ui.ContactDetailsDisplay.addPropertyToList(java.lang.String,person.getName().fullName)=>seedu.address.ui.ContactDetailsDisplay.addPropertyToList(java.lang.String,person.getName().fullName,java.util.List<javafx.scene.control.Label>,java.util.List<javafx.scene.control.Label>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9286/buggy-version/src.main.java.seedu.address.ui.ContactDetailsDisplay.java", "BodyUseAPI": [], "Fixed commit": "313cb23438b3e31b8e9a93334721058301f07c74", "Url": "https://api.github.com/repos/KevinCJH/main", "Date": "2018-03-19T16:57:03Z"},
{"Line": "54=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.ui.ContactDetailsDisplay.addPropertyToList(java.lang.String,person.getPhone().value)=>seedu.address.ui.ContactDetailsDisplay.addPropertyToList(java.lang.String,person.getPhone().value,java.util.List<javafx.scene.control.Label>,java.util.List<javafx.scene.control.Label>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9286/buggy-version/src.main.java.seedu.address.ui.ContactDetailsDisplay.java", "BodyUseAPI": [], "Fixed commit": "313cb23438b3e31b8e9a93334721058301f07c74", "Url": "https://api.github.com/repos/KevinCJH/main", "Date": "2018-03-19T16:57:03Z"},
{"Line": "55=>56", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.ui.ContactDetailsDisplay.addPropertyToList(java.lang.String,person.getEmail().value)=>seedu.address.ui.ContactDetailsDisplay.addPropertyToList(java.lang.String,person.getEmail().value,java.util.List<javafx.scene.control.Label>,java.util.List<javafx.scene.control.Label>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9286/buggy-version/src.main.java.seedu.address.ui.ContactDetailsDisplay.java", "BodyUseAPI": [], "Fixed commit": "313cb23438b3e31b8e9a93334721058301f07c74", "Url": "https://api.github.com/repos/KevinCJH/main", "Date": "2018-03-19T16:57:03Z"},
{"Line": "36=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.player.reinforce()=>player.reinforce()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.playerTurn.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "17=>17", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.player.getPlayerOptions()=>player.getPlayerOptions()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.playerTurn.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "16=>16", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.player.getPlayerName()=>player.getPlayerName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.playerTurn.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.player.attack(com.risktakers.Risk.territory[],java.util.List<com.risktakers.Risk.player>)=>player.attack(territory[],java.util.List<player>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.playerTurn.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "252=>252", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.risktakers.Risk.territory>.add(com.risktakers.Risk.territory)=>java.util.List<territory>.add(territory)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "259=>259", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.territory.addTokenToTerritory()=>territory.addTokenToTerritory()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "392=>392", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.player.printTerritories()=>player.printTerritories()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "447=>447", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.player.rolldice(diceTerr.getnumofarmies())=>player.rolldice(diceTerr.getnumofarmies())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "372=>372", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.player.getPlayerName()=>player.getPlayerName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "420=>420", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.player.getplayernumber()=>player.getplayernumber()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "463=>463", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.player.compareDiceRolls(com.risktakers.Risk.player,int[],com.risktakers.Risk.player,int[])=>player.compareDiceRolls(player,int[],player,int[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "460=>460", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.territory.getnumofarmies()=>territory.getnumofarmies()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "261=>261", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.territory.setTaken(boolean)=>territory.setTaken(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "265=>265", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.territory.addTokensToTerritory(int)=>territory.addTokensToTerritory(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "254=>254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.territory.setOwner(int)=>territory.setOwner(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "345=>345", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.Dice.roll(int)=>Dice.roll(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "460=>460", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.player.rolldice(tr.getnumofarmies())=>player.rolldice(tr.getnumofarmies())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "266=>266", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.territory.setOwner(int)=>territory.setOwner(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "378=>378", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.player.getPlayerName()=>player.getPlayerName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "260=>260", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.territory.setOwner(int)=>territory.setOwner(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "267=>267", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.territory.setTaken(boolean)=>territory.setTaken(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "474=>474", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.player.attack(com.risktakers.Risk.territory[],java.util.List<com.risktakers.Risk.player>)=>player.attack(territory[],java.util.List<player>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "447=>447", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.territory.getnumofarmies()=>territory.getnumofarmies()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.player.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "263=>263", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.Risk_Game.territoryDraft(java.util.List<com.risktakers.Risk.player>,com.risktakers.Risk.territory[],int)=>Risk_Game.territoryDraft(java.util.List<player>,territory[],int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.Risk_Game.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "204=>204", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.risktakers.Risk.player>.add(com.risktakers.Risk.player)=>java.util.List<player>.add(player)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.Risk_Game.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "219=>219", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.risktakers.Risk.player>.add(com.risktakers.Risk.player)=>java.util.List<player>.add(player)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.Risk_Game.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "224=>224", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.risktakers.Risk.player>.add(com.risktakers.Risk.player)=>java.util.List<player>.add(player)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.Risk_Game.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "194=>194", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.Risk_Game.initializeTerritories(com.risktakers.Risk.territory[])=>Risk_Game.initializeTerritories(territory[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.Risk_Game.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "214=>214", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.risktakers.Risk.player>.add(com.risktakers.Risk.player)=>java.util.List<player>.add(player)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.Risk_Game.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.risktakers.Risk.adjacentTerritoriesLists.get(int)=>adjacentTerritoriesLists.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.Risk_Game.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "209=>209", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.risktakers.Risk.player>.add(com.risktakers.Risk.player)=>java.util.List<player>.add(player)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/710/buggy-version/src.main.java.Risk_Game.java", "BodyUseAPI": [], "Fixed commit": "15fb39df61fa729b1f8d3612b1411857da334dc8", "Url": "https://api.github.com/repos/jdhonea/Risk", "Date": "2018-09-12T16:55:40Z"},
{"Line": "98=>98", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "JobAPI.JobResources.Builder.setResources(int,resourceTypeBuilder.build())=>JobAPI.JobResources.Builder.addResources(resourceTypeBuilder.build())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8726/buggy-version/twister2.api.src.java.edu.iu.dsc.tws.api.job.Twister2Job.java", "BodyUseAPI": [], "Fixed commit": "0b03b86e0ce1bf0f503a5fc58d3e472b95b70527", "Url": "https://api.github.com/repos/DSC-SPIDAL/twister2", "Date": "2018-08-24T17:00:13Z"},
{"Line": "196=>198", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class.getResource(java.lang.String)=>java.lang.System.getProperty(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6498/buggy-version/code.AnalysisPicture.src.main.java.com.functions.AnalysisPicture.java", "BodyUseAPI": [], "Fixed commit": "da3e75e37b8da837383c6d51667043b1c0c32055", "Url": "https://api.github.com/repos/zztttt/SummerProject", "Date": "2018-07-19T07:07:04Z"},
{"Line": "196=>198", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.net.URL.getPath()=>java.lang.System.getProperty(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6498/buggy-version/code.AnalysisPicture.src.main.java.com.functions.AnalysisPicture.java", "BodyUseAPI": [], "Fixed commit": "da3e75e37b8da837383c6d51667043b1c0c32055", "Url": "https://api.github.com/repos/zztttt/SummerProject", "Date": "2018-07-19T07:07:04Z"},
{"Line": "167=>167", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "gui.BoardGUI.1.endClick()=>gui.BoardGUI.1.checkForWinningMove()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6529/buggy-version/src.gui.BoardGUI.java", "BodyUseAPI": [], "Fixed commit": "e76320c2af039f512d9ede9b9d2221c51d839b26", "Url": "https://api.github.com/repos/EmileSteenkamp/Minesweeper", "Date": "2018-07-19T21:41:57Z"},
{"Line": "176=>176", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "gui.BoardGUI.1.endClick()=>gui.BoardGUI.1.checkForWinningMove()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6529/buggy-version/src.gui.BoardGUI.java", "BodyUseAPI": [], "Fixed commit": "e76320c2af039f512d9ede9b9d2221c51d839b26", "Url": "https://api.github.com/repos/EmileSteenkamp/Minesweeper", "Date": "2018-07-19T21:41:57Z"},
{"Line": "128=>129", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "dr.inference.distribution.DistributionLikelihood.getLogPDF(double)=>dr.inference.distribution.DistributionLikelihood.getLogPDF(double,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9324/buggy-version/src.dr.inference.distribution.DistributionLikelihood.java", "BodyUseAPI": [], "Fixed commit": "af706532335e658c6137b960355fae6cfbb66148", "Url": "https://api.github.com/repos/beast-dev/beast-mcmc", "Date": "2017-08-02T00:19:10Z"},
{"Line": "36=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "dr.inference.model.Parameter.getParameterValue(int)=>dr.inference.model.Parameter.getParameterValue((i % (high.getDimension())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9324/buggy-version/src.dr.inference.model.TruncatedDistributionLikelihood.java", "BodyUseAPI": [], "Fixed commit": "af706532335e658c6137b960355fae6cfbb66148", "Url": "https://api.github.com/repos/beast-dev/beast-mcmc", "Date": "2017-08-02T00:19:10Z"},
{"Line": "27=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "dr.inference.model.Parameter.getParameterValue(int)=>dr.inference.model.Parameter.getParameterValue((i % (low.getDimension())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9324/buggy-version/src.dr.inference.model.TruncatedDistributionLikelihood.java", "BodyUseAPI": [], "Fixed commit": "af706532335e658c6137b960355fae6cfbb66148", "Url": "https://api.github.com/repos/beast-dev/beast-mcmc", "Date": "2017-08-02T00:19:10Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "dr.inference.model.Parameter.getParameterValue(int)=>dr.inference.model.Parameter.getDimension()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9324/buggy-version/src.dr.inference.model.TruncatedDistributionLikelihood.java", "BodyUseAPI": [], "Fixed commit": "af706532335e658c6137b960355fae6cfbb66148", "Url": "https://api.github.com/repos/beast-dev/beast-mcmc", "Date": "2017-08-02T00:19:10Z"},
{"Line": "32=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "dr.inference.model.Parameter.getParameterValue(int)=>dr.inference.model.Parameter.getDimension()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9324/buggy-version/src.dr.inference.model.TruncatedDistributionLikelihood.java", "BodyUseAPI": [], "Fixed commit": "af706532335e658c6137b960355fae6cfbb66148", "Url": "https://api.github.com/repos/beast-dev/beast-mcmc", "Date": "2017-08-02T00:19:10Z"},
{"Line": "31=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "dr.inference.model.Parameter.getParameterValue(int)=>dr.inference.model.Parameter.getParameterValue((i % (low.getDimension())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9324/buggy-version/src.dr.inference.model.TruncatedDistributionLikelihood.java", "BodyUseAPI": [], "Fixed commit": "af706532335e658c6137b960355fae6cfbb66148", "Url": "https://api.github.com/repos/beast-dev/beast-mcmc", "Date": "2017-08-02T00:19:10Z"},
{"Line": "35=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "dr.inference.model.Parameter.getParameterValue(int)=>dr.inference.model.Parameter.getDimension()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9324/buggy-version/src.dr.inference.model.TruncatedDistributionLikelihood.java", "BodyUseAPI": [], "Fixed commit": "af706532335e658c6137b960355fae6cfbb66148", "Url": "https://api.github.com/repos/beast-dev/beast-mcmc", "Date": "2017-08-02T00:19:10Z"},
{"Line": "12=>12", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.UUID.random(java.util.UUID)=>java.util.UUID.randomUUID()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7364/buggy-version/ds2lab.src.main.java.com.projects.detoni_zampieri.adaptiveGossip.Event.java", "BodyUseAPI": [], "Fixed commit": "03cd35fd2e66982d87b5b3205ac279d3c50ff184", "Url": "https://api.github.com/repos/geektoni/DS2-Lab", "Date": "2018-10-19T08:52:22Z"},
{"Line": "525=>526", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "io.grpc.internal.ServerImpl.ServerTransportListenerImpl.startCall(java.lang.String,((binlogProvider) == null ? interceptedDef : binlogProvider.wrapMethodDefinition(interceptedDef)),io.grpc.internal.ServerStream,io.grpc.Metadata,Context.CancellableContext)=>io.grpc.internal.ServerImpl.ServerTransportListenerImpl.startWrappedCall(java.lang.String,io.grpc.ServerMethodDefinition<?, ?>,io.grpc.internal.ServerStream,io.grpc.Metadata,Context.CancellableContext)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5440/buggy-version/core.src.main.java.io.grpc.internal.ServerImpl.java", "BodyUseAPI": [], "Fixed commit": "74b197612309224ee13f44239386073dc2f0fb70", "Url": "https://api.github.com/repos/zpencer/grpc-java", "Date": "2018-02-01T01:39:04Z"},
{"Line": "266=>262", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "this.getLevel().setBlock(cn.nukkit.block.Block,cn.nukkit.block.BlockLiquid,boolean)=>this.level.setBlock(cn.nukkit.block.Block,cn.nukkit.block.BlockLiquid,boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1978/buggy-version/src.main.java.cn.nukkit.block.BlockLiquid.java", "BodyUseAPI": [], "Fixed commit": "8665208eb8e0163c43b9ada5ba249c7fcee2696c", "Url": "https://api.github.com/repos/2pocket2edition/Nukkit", "Date": "2018-02-25T19:19:32Z"},
{"Line": "1078=>1078", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.startsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9901/buggy-version/src.main.java.nl.deholtmans.tjm1706.solvedcaches.SolvedCacheServicesBrowser.java", "BodyUseAPI": [], "Fixed commit": "59e46f142084982bfef79bf6a2aeded8ee6a406b", "Url": "https://api.github.com/repos/johan974/solvedcaches", "Date": "2018-04-20T16:32:01Z"},
{"Line": "1097=>1097", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.startsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9901/buggy-version/src.main.java.nl.deholtmans.tjm1706.solvedcaches.SolvedCacheServicesBrowser.java", "BodyUseAPI": [], "Fixed commit": "59e46f142084982bfef79bf6a2aeded8ee6a406b", "Url": "https://api.github.com/repos/johan974/solvedcaches", "Date": "2018-04-20T16:32:01Z"},
{"Line": "1055=>1055", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.startsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9901/buggy-version/src.main.java.nl.deholtmans.tjm1706.solvedcaches.SolvedCacheServicesBrowser.java", "BodyUseAPI": [], "Fixed commit": "59e46f142084982bfef79bf6a2aeded8ee6a406b", "Url": "https://api.github.com/repos/johan974/solvedcaches", "Date": "2018-04-20T16:32:01Z"},
{"Line": "1165=>1165", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.startsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9901/buggy-version/src.main.java.nl.deholtmans.tjm1706.solvedcaches.SolvedCacheServicesBrowser.java", "BodyUseAPI": [], "Fixed commit": "59e46f142084982bfef79bf6a2aeded8ee6a406b", "Url": "https://api.github.com/repos/johan974/solvedcaches", "Date": "2018-04-20T16:32:01Z"},
{"Line": "1340=>1340", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.startsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9901/buggy-version/src.main.java.nl.deholtmans.tjm1706.solvedcaches.SolvedCacheServicesBrowser.java", "BodyUseAPI": [], "Fixed commit": "59e46f142084982bfef79bf6a2aeded8ee6a406b", "Url": "https://api.github.com/repos/johan974/solvedcaches", "Date": "2018-04-20T16:32:01Z"},
{"Line": "1316=>1316", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.startsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9901/buggy-version/src.main.java.nl.deholtmans.tjm1706.solvedcaches.SolvedCacheServicesBrowser.java", "BodyUseAPI": [], "Fixed commit": "59e46f142084982bfef79bf6a2aeded8ee6a406b", "Url": "https://api.github.com/repos/johan974/solvedcaches", "Date": "2018-04-20T16:32:01Z"},
{"Line": "1123=>1123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.startsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9901/buggy-version/src.main.java.nl.deholtmans.tjm1706.solvedcaches.SolvedCacheServicesBrowser.java", "BodyUseAPI": [], "Fixed commit": "59e46f142084982bfef79bf6a2aeded8ee6a406b", "Url": "https://api.github.com/repos/johan974/solvedcaches", "Date": "2018-04-20T16:32:01Z"},
{"Line": "1272=>1272", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.startsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9901/buggy-version/src.main.java.nl.deholtmans.tjm1706.solvedcaches.SolvedCacheServicesBrowser.java", "BodyUseAPI": [], "Fixed commit": "59e46f142084982bfef79bf6a2aeded8ee6a406b", "Url": "https://api.github.com/repos/johan974/solvedcaches", "Date": "2018-04-20T16:32:01Z"},
{"Line": "1294=>1294", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.startsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9901/buggy-version/src.main.java.nl.deholtmans.tjm1706.solvedcaches.SolvedCacheServicesBrowser.java", "BodyUseAPI": [], "Fixed commit": "59e46f142084982bfef79bf6a2aeded8ee6a406b", "Url": "https://api.github.com/repos/johan974/solvedcaches", "Date": "2018-04-20T16:32:01Z"},
{"Line": "152=>154", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Vector.add(tempcurr.scale(scalesize))=>Vector.add(Vector)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5235/buggy-version/MP1.Matrix.java", "BodyUseAPI": [], "Fixed commit": "2101c0d0babd7bcbde69cfb1eb88cbc2a15021c2", "Url": "https://api.github.com/repos/amubawrnaw/ADVDISC_MP", "Date": "2018-08-20T04:55:36Z"},
{"Line": "125=>126", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Vector.scale(double)=>Vector.add(Vector)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5235/buggy-version/MP1.Matrix.java", "BodyUseAPI": [], "Fixed commit": "2101c0d0babd7bcbde69cfb1eb88cbc2a15021c2", "Url": "https://api.github.com/repos/amubawrnaw/ADVDISC_MP", "Date": "2018-08-20T04:55:36Z"},
{"Line": "151=>153", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Vector.add(tempinv_curr.scale(scalesize))=>Vector.add(Vector)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5235/buggy-version/MP1.Matrix.java", "BodyUseAPI": [], "Fixed commit": "2101c0d0babd7bcbde69cfb1eb88cbc2a15021c2", "Url": "https://api.github.com/repos/amubawrnaw/ADVDISC_MP", "Date": "2018-08-20T04:55:36Z"},
{"Line": "125=>126", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Vector.add(tempinv_curr.scale(scalesize))=>Vector.add(Vector)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5235/buggy-version/MP1.Matrix.java", "BodyUseAPI": [], "Fixed commit": "2101c0d0babd7bcbde69cfb1eb88cbc2a15021c2", "Url": "https://api.github.com/repos/amubawrnaw/ADVDISC_MP", "Date": "2018-08-20T04:55:36Z"},
{"Line": "124=>125", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Vector.add(tempcurr.scale(scalesize))=>Vector.add(Vector)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5235/buggy-version/MP1.Matrix.java", "BodyUseAPI": [], "Fixed commit": "2101c0d0babd7bcbde69cfb1eb88cbc2a15021c2", "Url": "https://api.github.com/repos/amubawrnaw/ADVDISC_MP", "Date": "2018-08-20T04:55:36Z"},
{"Line": "61=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "it.univaq.disim.sose.boredweekend.eventsservice.business.model.Event.getAddress()=>it.univaq.disim.sose.boredweekend.eventsservice.business.model.Event.getCity()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2650/buggy-version/eventsService.src.main.java.it.univaq.disim.sose.boredweekend.eventsservice.business.jdbc.JDBCEventsDAO.java", "BodyUseAPI": [], "Fixed commit": "87912985d6f7e6611332c331cf55e4ba8a1f43db", "Url": "https://api.github.com/repos/enGeneus/BoredWeekend", "Date": "2018-02-20T12:08:12Z"},
{"Line": "60=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "it.univaq.disim.sose.boredweekend.eventsservice.business.model.Event.getInfo()=>it.univaq.disim.sose.boredweekend.eventsservice.business.model.Event.getAddress()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2650/buggy-version/eventsService.src.main.java.it.univaq.disim.sose.boredweekend.eventsservice.business.jdbc.JDBCEventsDAO.java", "BodyUseAPI": [], "Fixed commit": "87912985d6f7e6611332c331cf55e4ba8a1f43db", "Url": "https://api.github.com/repos/enGeneus/BoredWeekend", "Date": "2018-02-20T12:08:12Z"},
{"Line": "63=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "it.univaq.disim.sose.boredweekend.eventsservice.business.model.Event.getLocationName()=>it.univaq.disim.sose.boredweekend.eventsservice.business.model.Event.getDescription()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2650/buggy-version/eventsService.src.main.java.it.univaq.disim.sose.boredweekend.eventsservice.business.jdbc.JDBCEventsDAO.java", "BodyUseAPI": [], "Fixed commit": "87912985d6f7e6611332c331cf55e4ba8a1f43db", "Url": "https://api.github.com/repos/enGeneus/BoredWeekend", "Date": "2018-02-20T12:08:12Z"},
{"Line": "60=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "it.univaq.disim.sose.boredweekend.eventsservice.business.model.Event.getName()=>it.univaq.disim.sose.boredweekend.eventsservice.business.model.Event.getInfo()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2650/buggy-version/eventsService.src.main.java.it.univaq.disim.sose.boredweekend.eventsservice.business.jdbc.JDBCEventsDAO.java", "BodyUseAPI": [], "Fixed commit": "87912985d6f7e6611332c331cf55e4ba8a1f43db", "Url": "https://api.github.com/repos/enGeneus/BoredWeekend", "Date": "2018-02-20T12:08:12Z"},
{"Line": "63=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "it.univaq.disim.sose.boredweekend.eventsservice.business.model.Event.getImg()=>event.getLocationName().replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2650/buggy-version/eventsService.src.main.java.it.univaq.disim.sose.boredweekend.eventsservice.business.jdbc.JDBCEventsDAO.java", "BodyUseAPI": [], "Fixed commit": "87912985d6f7e6611332c331cf55e4ba8a1f43db", "Url": "https://api.github.com/repos/enGeneus/BoredWeekend", "Date": "2018-02-20T12:08:12Z"},
{"Line": "680=>679", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.view.ViewTreeObserver.addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)=>android.view.ViewTreeObserver.addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4182/buggy-version/NJRails.app.src.main.java.com.example.asarma.njrails.MainActivityFragment.java", "BodyUseAPI": [], "Fixed commit": "83120010ae12a480ded0e86a34d08a6a4e1851ae", "Url": "https://api.github.com/repos/anilsarma/android", "Date": "2018-07-11T14:00:34Z"},
{"Line": "778=>777", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "AlertDialog.Builder.setNegativeButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>AlertDialog.Builder.setNegativeButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4182/buggy-version/NJRails.app.src.main.java.com.example.asarma.njrails.MainActivityFragment.java", "BodyUseAPI": [], "Fixed commit": "83120010ae12a480ded0e86a34d08a6a4e1851ae", "Url": "https://api.github.com/repos/anilsarma/android", "Date": "2018-07-11T14:00:34Z"},
{"Line": "723=>722", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.TextView.setOnClickListener(android.view.View.OnClickListener)=>android.widget.TextView.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4182/buggy-version/NJRails.app.src.main.java.com.example.asarma.njrails.MainActivityFragment.java", "BodyUseAPI": [], "Fixed commit": "83120010ae12a480ded0e86a34d08a6a4e1851ae", "Url": "https://api.github.com/repos/anilsarma/android", "Date": "2018-07-11T14:00:34Z"},
{"Line": "743=>742", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4182/buggy-version/NJRails.app.src.main.java.com.example.asarma.njrails.MainActivityFragment.java", "BodyUseAPI": [], "Fixed commit": "83120010ae12a480ded0e86a34d08a6a4e1851ae", "Url": "https://api.github.com/repos/anilsarma/android", "Date": "2018-07-11T14:00:34Z"},
{"Line": "766=>765", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "AlertDialog.Builder.setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)=>AlertDialog.Builder.setPositiveButton(java.lang.String,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4182/buggy-version/NJRails.app.src.main.java.com.example.asarma.njrails.MainActivityFragment.java", "BodyUseAPI": [], "Fixed commit": "83120010ae12a480ded0e86a34d08a6a4e1851ae", "Url": "https://api.github.com/repos/anilsarma/android", "Date": "2018-07-11T14:00:34Z"},
{"Line": "91=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "signals.preprocessing.TtCalculateSimplifiedIntergreens.handleNextPhase(org.matsim.contrib.signals.data.ambertimes.v10.IntergreensForSignalSystemData,org.matsim.contrib.signals.data.signalgroups.v20.SignalGroupSettingsData)=>signals.preprocessing.TtCalculateSimplifiedIntergreens.handleNextPhase(org.matsim.contrib.signals.data.intergreens.v10.IntergreensForSignalSystemData,org.matsim.contrib.signals.data.signalgroups.v20.SignalGroupSettingsData)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1241/buggy-version/tthunig.src.main.java.signals.preprocessing.TtCalculateSimplifiedIntergreens.java", "BodyUseAPI": [], "Fixed commit": "22f70b671b19c3c9dd0daf0ffb617c4e85077f8b", "Url": "https://api.github.com/repos/matsim-vsp/vsp-playgrounds", "Date": "2018-05-07T12:05:51Z"},
{"Line": "94=>92", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.matsim.contrib.signals.data.ambertimes.v10.IntergreenTimesData.addIntergreensForSignalSystem(org.matsim.contrib.signals.data.ambertimes.v10.IntergreensForSignalSystemData)=>org.matsim.contrib.signals.data.intergreens.v10.IntergreenTimesData.addIntergreensForSignalSystem(org.matsim.contrib.signals.data.intergreens.v10.IntergreensForSignalSystemData)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1241/buggy-version/tthunig.src.main.java.signals.preprocessing.TtCalculateSimplifiedIntergreens.java", "BodyUseAPI": [], "Fixed commit": "22f70b671b19c3c9dd0daf0ffb617c4e85077f8b", "Url": "https://api.github.com/repos/matsim-vsp/vsp-playgrounds", "Date": "2018-05-07T12:05:51Z"},
{"Line": "90=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "signals.preprocessing.TtCalculateSimplifiedIntergreens.handleSamePhase(org.matsim.contrib.signals.data.ambertimes.v10.IntergreensForSignalSystemData,org.matsim.contrib.signals.data.signalgroups.v20.SignalGroupSettingsData)=>signals.preprocessing.TtCalculateSimplifiedIntergreens.handleSamePhase(org.matsim.contrib.signals.data.intergreens.v10.IntergreensForSignalSystemData,org.matsim.contrib.signals.data.signalgroups.v20.SignalGroupSettingsData)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1241/buggy-version/tthunig.src.main.java.signals.preprocessing.TtCalculateSimplifiedIntergreens.java", "BodyUseAPI": [], "Fixed commit": "22f70b671b19c3c9dd0daf0ffb617c4e85077f8b", "Url": "https://api.github.com/repos/matsim-vsp/vsp-playgrounds", "Date": "2018-05-07T12:05:51Z"},
{"Line": "284=>282", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.matsim.contrib.signals.data.ambertimes.v10.IntergreensForSignalSystemData.setIntergreenTime(((samePhaseSignals.getOnset()) - (selectedSignal.getDropping())),selectedSignal.getSignalGroupId(),samePhaseSignals.getSignalGroupId())=>org.matsim.contrib.signals.data.intergreens.v10.IntergreensForSignalSystemData.setIntergreenTime(((samePhaseSignals.getOnset()) - (selectedSignal.getDropping())),selectedSignal.getSignalGroupId(),samePhaseSignals.getSignalGroupId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1241/buggy-version/tthunig.src.main.java.signals.preprocessing.TtCalculateSimplifiedIntergreens.java", "BodyUseAPI": [], "Fixed commit": "22f70b671b19c3c9dd0daf0ffb617c4e85077f8b", "Url": "https://api.github.com/repos/matsim-vsp/vsp-playgrounds", "Date": "2018-05-07T12:05:51Z"},
{"Line": "312=>310", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.matsim.contrib.signals.data.ambertimes.v10.IntergreensForSignalSystemData.setIntergreenTime(int,selectedSignal.getSignalGroupId(),nextPhaseSignals.getSignalGroupId())=>org.matsim.contrib.signals.data.intergreens.v10.IntergreensForSignalSystemData.setIntergreenTime(int,selectedSignal.getSignalGroupId(),nextPhaseSignals.getSignalGroupId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1241/buggy-version/tthunig.src.main.java.signals.preprocessing.TtCalculateSimplifiedIntergreens.java", "BodyUseAPI": [], "Fixed commit": "22f70b671b19c3c9dd0daf0ffb617c4e85077f8b", "Url": "https://api.github.com/repos/matsim-vsp/vsp-playgrounds", "Date": "2018-05-07T12:05:51Z"},
{"Line": "56=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.lang.String>.size()=>java.util.List<java.lang.String>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6692/buggy-version/src.ren.orient.roll.Roll.java", "BodyUseAPI": [], "Fixed commit": "49677452cf7f6d259e617f6d8cd3e17fea4348af", "Url": "https://api.github.com/repos/Orient-ZY/Roll", "Date": "2018-04-26T13:51:52Z"},
{"Line": "53=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.lang.String>.get(int)=>java.util.List<java.lang.String>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6692/buggy-version/src.ren.orient.roll.Roll.java", "BodyUseAPI": [], "Fixed commit": "49677452cf7f6d259e617f6d8cd3e17fea4348af", "Url": "https://api.github.com/repos/Orient-ZY/Roll", "Date": "2018-04-26T13:51:52Z"},
{"Line": "82=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<java.lang.String>.add(java.lang.String)=>java.util.List<java.lang.String>.add(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6692/buggy-version/src.ren.orient.roll.Roll.java", "BodyUseAPI": [], "Fixed commit": "49677452cf7f6d259e617f6d8cd3e17fea4348af", "Url": "https://api.github.com/repos/Orient-ZY/Roll", "Date": "2018-04-26T13:51:52Z"},
{"Line": "44=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Object.equals(java.lang.Object)=>queue.AbstractQueue.equal(java.lang.Object,java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6474/buggy-version/java.queue.AbstractQueue.java", "BodyUseAPI": [], "Fixed commit": "10595be3be5a1ed3db0211ca3e790521c6c1251a", "Url": "https://api.github.com/repos/treggit/paradigms-2018", "Date": "2018-03-09T11:12:59Z"},
{"Line": "1431=>1431", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Std.out.println(java.lang.String)=>Std.err.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/827/buggy-version/src.org.javarosa.core.model.FormDef.java", "BodyUseAPI": [], "Fixed commit": "874a69ff64733cf59bb13d595a787697c2173589", "Url": "https://api.github.com/repos/ggalmazor/javarosa", "Date": "2018-02-22T08:23:55Z"},
{"Line": "1431=>1431", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Std.out.println(java.lang.String)=>Std.err.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/827/buggy-version/src.org.javarosa.core.model.FormDef.java", "BodyUseAPI": [], "Fixed commit": "874a69ff64733cf59bb13d595a787697c2173589", "Url": "https://api.github.com/repos/ggalmazor/javarosa", "Date": "2018-02-22T08:23:55Z"},
{"Line": "56=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.kabasakalis.springifyapi.repositories.UserRepository.getOne(java.lang.Long)=>com.kabasakalis.springifyapi.controllers.UserController.getOne(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7803/buggy-version/src.main.java.com.kabasakalis.springifyapi.controllers.UserController.java", "BodyUseAPI": [], "Fixed commit": "00c4755988f5ba1038795a1131ca6dadce04d742", "Url": "https://api.github.com/repos/kabasakalis/springify", "Date": "2018-01-15T23:25:06Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.kabasakalis.springifyapi.repositories.RoleRepository.getOne(java.lang.Long)=>com.kabasakalis.springifyapi.controllers.RoleController.getOne(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7803/buggy-version/src.main.java.com.kabasakalis.springifyapi.controllers.RoleController.java", "BodyUseAPI": [], "Fixed commit": "00c4755988f5ba1038795a1131ca6dadce04d742", "Url": "https://api.github.com/repos/kabasakalis/springify", "Date": "2018-01-15T23:25:06Z"},
{"Line": "213=>213", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.toString()=>data.input.Language.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "98=>98", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.toString()=>data.input.Language.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "185=>185", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.toString()=>data.input.Language.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "220=>220", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.values()=>data.input.Language.values()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.values()=>data.input.Language.values()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "105=>105", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.toString()=>data.input.Language.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "101=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.equals(data.input.WikiArticle.Language)=>data.input.Language.equals(data.input.Language)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "94=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.toString()=>data.input.Language.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "143=>143", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.toString()=>data.input.Language.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "94=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.toString()=>data.input.Language.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "74=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.toString()=>data.input.Language.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "253=>253", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.toString()=>data.input.Language.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "187=>187", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.toString()=>data.input.Language.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "67=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.toString()=>data.input.Language.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "216=>216", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.toString()=>data.input.Language.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "160=>160", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "data.input.WikiArticle.Language.toString()=>data.input.Language.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2952/buggy-version/dev.core.src.main.java.knowledgebase.DatabaseHandler.java", "BodyUseAPI": [], "Fixed commit": "536fc26341416df73645a70d26f5164b39b0c626", "Url": "https://api.github.com/repos/floschne/NLP_ProjectLSIRES", "Date": "2018-01-17T18:49:22Z"},
{"Line": "130=>129", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.debug(java.lang.String)=>org.apache.logging.log4j.Logger.warn(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3206/buggy-version/src.org.exist.plugin.PluginsManagerImpl.java", "BodyUseAPI": [], "Fixed commit": "7951be8cbdfa731ef5fb8c88b8d1741658521828", "Url": "https://api.github.com/repos/dizzzz/exist", "Date": "2018-07-31T11:28:10Z"},
{"Line": "162=>160", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Throwable.printStackTrace()=>org.apache.logging.log4j.Logger.error(java.lang.Throwable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3206/buggy-version/src.org.exist.plugin.PluginsManagerImpl.java", "BodyUseAPI": [], "Fixed commit": "7951be8cbdfa731ef5fb8c88b8d1741658521828", "Url": "https://api.github.com/repos/dizzzz/exist", "Date": "2018-07-31T11:28:10Z"},
{"Line": "158=>156", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Throwable.printStackTrace()=>org.apache.logging.log4j.Logger.error(java.lang.Throwable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3206/buggy-version/src.org.exist.plugin.PluginsManagerImpl.java", "BodyUseAPI": [], "Fixed commit": "7951be8cbdfa731ef5fb8c88b8d1741658521828", "Url": "https://api.github.com/repos/dizzzz/exist", "Date": "2018-07-31T11:28:10Z"},
{"Line": "18=>20", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.reactivex.Maybe.ambArray(io.reactivex.Maybe<org.cdlib.cursive.pcdm.async.AsyncPcdmCollection>,io.reactivex.Maybe<org.cdlib.cursive.pcdm.async.AsyncPcdmObject>)=>io.reactivex.Maybe.mergeArray(io.reactivex.Maybe<org.cdlib.cursive.pcdm.async.AsyncPcdmCollection>,io.reactivex.Maybe<org.cdlib.cursive.pcdm.async.AsyncPcdmObject>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9658/buggy-version/cursive-core.src.main.java.org.cdlib.cursive.pcdm.async.AsyncPcdmObject.java", "BodyUseAPI": [], "Fixed commit": "debdfabcf8b45032eefd2ac0bcaaaf1e1072ab1f", "Url": "https://api.github.com/repos/dmolesUC3/cursive", "Date": "2018-03-14T20:07:26Z"},
{"Line": "486=>484", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "cctx.kernalContext().discovery().nodes(org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion)=>cctx.closures().callAsyncNoFailover(org.apache.ignite.internal.GridClosureCallMode.BROADCAST,org.apache.ignite.internal.processors.cache.datastructures.CacheDataStructuresManager.BlockSetCallable,java.util.Collection<org.apache.ignite.cluster.ClusterNode>,boolean,int,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6419/buggy-version/modules.core.src.main.java.org.apache.ignite.internal.processors.cache.datastructures.CacheDataStructuresManager.java", "BodyUseAPI": [], "Fixed commit": "64952e814020777313c65f57efaf205f595436a1", "Url": "https://api.github.com/repos/xtern/ignite", "Date": "2018-08-31T08:03:57Z"},
{"Line": "484=>484", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cctx.closures().callAsyncNoFailover(org.apache.ignite.internal.GridClosureCallMode.BROADCAST,org.apache.ignite.internal.processors.cache.datastructures.CacheDataStructuresManager.BlockSetCallable,cctx.kernalContext().discovery().nodes(topVer),boolean,int,boolean)=>cctx.closures().callAsyncNoFailover(org.apache.ignite.internal.GridClosureCallMode.BROADCAST,org.apache.ignite.internal.processors.cache.datastructures.CacheDataStructuresManager.BlockSetCallable,java.util.Collection<org.apache.ignite.cluster.ClusterNode>,boolean,int,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6419/buggy-version/modules.core.src.main.java.org.apache.ignite.internal.processors.cache.datastructures.CacheDataStructuresManager.java", "BodyUseAPI": [], "Fixed commit": "64952e814020777313c65f57efaf205f595436a1", "Url": "https://api.github.com/repos/xtern/ignite", "Date": "2018-08-31T08:03:57Z"},
{"Line": "98=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.gson.JsonObject.addProperty(java.lang.String,int)=>java.util.Collections.shuffle(java.util.List<com.smalltiantian.genetics.Triangle>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4645/buggy-version/src.main.java.com.smalltiantian.genetics.Picture.java", "BodyUseAPI": [], "Fixed commit": "a94108aa96dacebf9e4adcac09de2e44e7b90ec3", "Url": "https://api.github.com/repos/SmallTianTian/genetics", "Date": "2018-08-21T13:46:16Z"},
{"Line": "55=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<com.smalltiantian.genetics.Triangle>.addAll(java.util.List<com.smalltiantian.genetics.Triangle>)=>java.util.List<com.smalltiantian.genetics.Triangle>.addAll(java.util.List<com.smalltiantian.genetics.Triangle>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4645/buggy-version/src.main.java.com.smalltiantian.genetics.Picture.java", "BodyUseAPI": [], "Fixed commit": "a94108aa96dacebf9e4adcac09de2e44e7b90ec3", "Url": "https://api.github.com/repos/SmallTianTian/genetics", "Date": "2018-08-21T13:46:16Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "botenanna.behaviortree.intentions.Intention.getIntetionFunction(botenanna.game.Situation)=>botenanna.behaviortree.intentions.Intention.getIntentionFunction(botenanna.game.Situation)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9422/buggy-version/java.src.botenanna.behaviortree.intentions.Intention.java", "BodyUseAPI": [], "Fixed commit": "ce3ef3e156c053d98678e85d7bd7450b2a6fd086", "Url": "https://api.github.com/repos/NicEastvillage/RLBot-Boten-Anna", "Date": "2018-05-26T09:03:05Z"},
{"Line": "217=>217", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.compiere.swing.CTabbedPane.setMnemonicAt(int,int)=>org.compiere.swing.CTabbedPane.setMnemonicAt(int,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9768/buggy-version/base.src.org.compiere.swing.CTabbedPane.java", "BodyUseAPI": [], "Fixed commit": "02eca7cf4c86864c903291421f8c7a87137d2b0e", "Url": "https://api.github.com/repos/erpcya/adempiere", "Date": "2018-08-31T20:48:55Z"},
{"Line": "219=>219", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.compiere.swing.CTabbedPane.setMnemonicAt(int,char)=>org.compiere.swing.CTabbedPane.setMnemonicAt(int,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9768/buggy-version/base.src.org.compiere.swing.CTabbedPane.java", "BodyUseAPI": [], "Fixed commit": "02eca7cf4c86864c903291421f8c7a87137d2b0e", "Url": "https://api.github.com/repos/erpcya/adempiere", "Date": "2018-08-31T20:48:55Z"},
{"Line": "41=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/eureka/**\").permitAll().antMatchers(\"/config/**\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").hasAnyAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/management/health\").permitAll()=>http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/auth/login\").permitAll().antMatchers(\"/api/**\").hasAnyAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8255/buggy-version/src.main.java.io.github.jhipster.registry.config.UAASecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "a3d84b7a837af14db93c44f4952aa6539eb572ce", "Url": "https://api.github.com/repos/rifatdover/jhipster-registry", "Date": "2018-04-09T15:42:47Z"},
{"Line": "41=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/eureka/**\").permitAll().antMatchers(\"/config/**\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").hasAnyAuthority(AuthoritiesConstants.ADMIN).antMatchers(java.lang.String)=>http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/auth/login\").permitAll().antMatchers(\"/api/**\").hasAnyAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/management/health\").permitAll().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8255/buggy-version/src.main.java.io.github.jhipster.registry.config.UAASecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "a3d84b7a837af14db93c44f4952aa6539eb572ce", "Url": "https://api.github.com/repos/rifatdover/jhipster-registry", "Date": "2018-04-09T15:42:47Z"},
{"Line": "41=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/eureka/**\").permitAll().antMatchers(\"/config/**\").permitAll().antMatchers(\"/api/profile-info\").permitAll()=>http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/auth/login\").permitAll().antMatchers(\"/api/**\").hasAnyAuthority(AuthoritiesConstants.ADMIN)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8255/buggy-version/src.main.java.io.github.jhipster.registry.config.UAASecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "a3d84b7a837af14db93c44f4952aa6539eb572ce", "Url": "https://api.github.com/repos/rifatdover/jhipster-registry", "Date": "2018-04-09T15:42:47Z"},
{"Line": "41=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/eureka/**\").permitAll().antMatchers(\"/config/**\").permitAll().antMatchers(java.lang.String)=>http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/auth/login\").permitAll().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8255/buggy-version/src.main.java.io.github.jhipster.registry.config.UAASecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "a3d84b7a837af14db93c44f4952aa6539eb572ce", "Url": "https://api.github.com/repos/rifatdover/jhipster-registry", "Date": "2018-04-09T15:42:47Z"},
{"Line": "41=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/eureka/**\").permitAll().antMatchers(java.lang.String)=>http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/profile-info\").permitAll().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8255/buggy-version/src.main.java.io.github.jhipster.registry.config.UAASecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "a3d84b7a837af14db93c44f4952aa6539eb572ce", "Url": "https://api.github.com/repos/rifatdover/jhipster-registry", "Date": "2018-04-09T15:42:47Z"},
{"Line": "41=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/eureka/**\").permitAll().antMatchers(\"/config/**\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").hasAnyAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN)=>http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/auth/login\").permitAll().antMatchers(\"/api/**\").hasAnyAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/swagger-resources/configuration/ui\").permitAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8255/buggy-version/src.main.java.io.github.jhipster.registry.config.UAASecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "a3d84b7a837af14db93c44f4952aa6539eb572ce", "Url": "https://api.github.com/repos/rifatdover/jhipster-registry", "Date": "2018-04-09T15:42:47Z"},
{"Line": "41=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/eureka/**\").permitAll().antMatchers(\"/config/**\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(java.lang.String)=>http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/auth/login\").permitAll().antMatchers(\"/api/**\").hasAnyAuthority(AuthoritiesConstants.ADMIN).antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8255/buggy-version/src.main.java.io.github.jhipster.registry.config.UAASecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "a3d84b7a837af14db93c44f4952aa6539eb572ce", "Url": "https://api.github.com/repos/rifatdover/jhipster-registry", "Date": "2018-04-09T15:42:47Z"},
{"Line": "41=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/eureka/**\").permitAll().antMatchers(\"/config/**\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").hasAnyAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(java.lang.String)=>http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/auth/login\").permitAll().antMatchers(\"/api/**\").hasAnyAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/swagger-resources/configuration/ui\").permitAll().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8255/buggy-version/src.main.java.io.github.jhipster.registry.config.UAASecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "a3d84b7a837af14db93c44f4952aa6539eb572ce", "Url": "https://api.github.com/repos/rifatdover/jhipster-registry", "Date": "2018-04-09T15:42:47Z"},
{"Line": "41=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/eureka/**\").permitAll().antMatchers(\"/config/**\").permitAll().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/api/**\").hasAnyAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/management/health\").permitAll().antMatchers(java.lang.String)=>http.csrf().ignoringAntMatchers(\"/eureka/**\").ignoringAntMatchers(\"/config/**\").ignoringAntMatchers(\"/h2-console/**\").csrfTokenRepository(org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse()).and().addFilterBefore(corsFilter, org.springframework.security.web.csrf.CsrfFilter.class).headers().frameOptions().disable().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests().antMatchers(\"/api/profile-info\").permitAll().antMatchers(\"/auth/login\").permitAll().antMatchers(\"/api/**\").hasAnyAuthority(AuthoritiesConstants.ADMIN).antMatchers(\"/management/health\").permitAll().antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN).antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8255/buggy-version/src.main.java.io.github.jhipster.registry.config.UAASecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "a3d84b7a837af14db93c44f4952aa6539eb572ce", "Url": "https://api.github.com/repos/rifatdover/jhipster-registry", "Date": "2018-04-09T15:42:47Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.support.v7.app.AppCompatActivity.onStop()=>android.support.v7.app.AppCompatActivity.onDestroy()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2196/buggy-version/app.src.main.java.com.example.artur.mynotesapp.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7a60a6f0ef69592c74d3287186635c0896eef455", "Url": "https://api.github.com/repos/sideEffect117/QuickCopyNotes", "Date": "2018-10-01T17:02:43Z"},
{"Line": "63=>63", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.kitodo.data.database.beans.Task.getTypeGenerate()=>org.kitodo.data.database.beans.Task.getGenerateContents()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7458/buggy-version/Kitodo.src.main.java.org.kitodo.production.thread.TaskScriptThread.java", "BodyUseAPI": [], "Fixed commit": "0100263fd227855b490646514b0b7351803f9148", "Url": "https://api.github.com/repos/matthias-ronge/kitodo-production", "Date": "2018-09-07T08:02:48Z"},
{"Line": "60=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.ecnu.dao.DiseaseDao.findDiseaseByName(disease.getName())=>com.ecnu.dao.DiseaseDao.findByDisease(com.ecnu.entity.Disease)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6250/buggy-version/src.main.java.com.ecnu.service.impl.DiseaseServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "60037d56a38c1c2adafd639f71f47e6afb24e28e", "Url": "https://api.github.com/repos/YukiZou/pet-hospital", "Date": "2018-04-12T05:20:39Z"},
{"Line": "81=>81", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.gigaspaces.internal.version.PlatformLogicalVersion.greaterOrEquals(PlatformLogicalVersion.v14_0_0)=>com.gigaspaces.internal.version.PlatformLogicalVersion.lessThan(PlatformLogicalVersion.v14_0_0)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8605/buggy-version/xap-core.xap-datagrid.src.main.java.com.gigaspaces.internal.cluster.node.impl.packets.BatchReplicatedDataPacket.java", "BodyUseAPI": [], "Fixed commit": "171764d59fc395716cf1e668e597da645c63004a", "Url": "https://api.github.com/repos/xap/xap", "Date": "2018-09-12T07:46:25Z"},
{"Line": "45=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.graphics.Canvas.drawBitmap(android.graphics.Bitmap,int,int,<nulltype>)=>android.graphics.Canvas.drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7442/buggy-version/Assignment01_ver2_161692W.Assignment01_ver2_161692W.app.src.main.java.assignment.sidm.com.assignment01_ver2.SampleBackground.java", "BodyUseAPI": [], "Fixed commit": "993e5c5cb3a93dc37f8b265ea271757315d35523", "Url": "https://api.github.com/repos/bluecubestuff/MobileGameProgramming", "Date": "2018-01-29T02:06:48Z"},
{"Line": "266=>276", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "json.JSONObject.put(java.lang.String,((allyList.length()) != 0))=>json.JSONObject.put(java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6950/buggy-version/src.nnode.StateObject.java", "BodyUseAPI": [], "Fixed commit": "d4b327475733e56853b983335f803010766e45d2", "Url": "https://api.github.com/repos/vossnarrator/NarratorNode", "Date": "2018-02-13T02:27:20Z"},
{"Line": "272=>272", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.school.spiderEnums.NewsSubTypeEnum.getSiteCode()=>com.school.spiderEnums.NewsSubTypeEnum.getNewsSubTypeCode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9359/buggy-version/src.main.java.com.school.magic.siteHandler.SQSiteHandler.java", "BodyUseAPI": [], "Fixed commit": "aa8578e0e75bf3ece0f54801147e84b03d97c3fb", "Url": "https://api.github.com/repos/RogerGu007/spiderBBS", "Date": "2018-04-05T07:57:05Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.school.spiderEnums.NewsTypeEnum.getSiteCode()=>com.school.spiderEnums.NewsTypeEnum.getNewsTypeCode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9359/buggy-version/src.main.java.com.school.entity.NewsDTO.java", "BodyUseAPI": [], "Fixed commit": "aa8578e0e75bf3ece0f54801147e84b03d97c3fb", "Url": "https://api.github.com/repos/RogerGu007/spiderBBS", "Date": "2018-04-05T07:57:05Z"},
{"Line": "40=>40", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "event.getMessage().toLowerCase().split(java.lang.String,int)=>event.getMessage().toLowerCase().split(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1726/buggy-version/src.main.java.ru.bvn13.jircbot.listeners.StatisticsListener.java", "BodyUseAPI": [], "Fixed commit": "b4526558326a5c491ae1fe6e22032b7d3fb29c2f", "Url": "https://api.github.com/repos/bvn13/JIrcBot", "Date": "2018-04-11T10:12:36Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.model.Model.resetDirectory(seedu.address.commons.core.index.Index)=>seedu.address.model.Model.resetDirectory(seedu.address.commons.core.index.Index,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5639/buggy-version/src.main.java.seedu.address.logic.commands.SelectCommand.java", "BodyUseAPI": [], "Fixed commit": "899a78a8637c3baff9e9145949b10636467161d5", "Url": "https://api.github.com/repos/CS2103-AY1819S1-T12-4/main", "Date": "2018-10-17T17:40:19Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.model.Model.resetDirectory(seedu.address.commons.core.index.Index.fromZeroBased(seedu.address.logic.commands.ROOT_DIRECTORY))=>seedu.address.model.Model.resetDirectory(seedu.address.commons.core.index.Index.fromZeroBased(seedu.address.logic.commands.ROOT_DIRECTORY),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5639/buggy-version/src.main.java.seedu.address.logic.commands.HomeCommand.java", "BodyUseAPI": [], "Fixed commit": "899a78a8637c3baff9e9145949b10636467161d5", "Url": "https://api.github.com/repos/CS2103-AY1819S1-T12-4/main", "Date": "2018-10-17T17:40:19Z"},
{"Line": "199=>271", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "document.getBaseURI().toASCIIString()=>com.xmlcalabash.util.TreeWriter.startDocument(document.getBaseURI())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7981/buggy-version/src.main.java.com.xmlcalabash.library.XSLT.java", "BodyUseAPI": [], "Fixed commit": "cd6af7a92160bc1c71242558bb09097213cf65a8", "Url": "https://api.github.com/repos/ndw/xmlcalabash1", "Date": "2018-03-06T13:18:39Z"},
{"Line": "103=>126", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.swugger.Events_EditEventDialogFragment.EditEventsDialogListener.onPositiveClickEdit(com.example.swugger.Events_EditEventDialogFragment,boolean)=>com.example.swugger.Events_EditEventDialogFragment.EditEventsDialogListener.onPositiveClickEdit(com.example.swugger.Event,boolean,boolean,boolean,java.lang.String,java.lang.String,int,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9698/buggy-version/app.src.main.java.com.example.swugger.Events_EditEventDialogFragment.java", "BodyUseAPI": [], "Fixed commit": "bd63d7c4e35fa9cb843e9eb177e50a6e2de9aeca", "Url": "https://api.github.com/repos/dvscheng/AIO-android", "Date": "2018-08-08T04:44:40Z"},
{"Line": "63=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.columbia.rdf.matcalc.MainMatCalc.main(edu.columbia.rdf.matcalc.toolbox.probes.app.ProbesInfo,edu.columbia.rdf.matcalc.ModuleLoader)=>edu.columbia.rdf.matcalc.MainMatCalc.main(edu.columbia.rdf.matcalc.toolbox.probes.app.ProbesInfo,edu.columbia.rdf.matcalc.BasicModuleLoader)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7161/buggy-version/edu.columbia.rdf.matcalc.toolbox.probes.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.probes.app.MainProbes.java", "BodyUseAPI": [], "Fixed commit": "41f2c4155d7d49eb3226294c1d75893f8f8a558f", "Url": "https://api.github.com/repos/antonybholmes/matcalc-probes", "Date": "2018-02-24T00:39:49Z"},
{"Line": "61=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.columbia.rdf.matcalc.ModuleLoader.addModule(java.lang.Class)=>edu.columbia.rdf.matcalc.BasicModuleLoader.addModule(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7161/buggy-version/edu.columbia.rdf.matcalc.toolbox.probes.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.probes.app.MainProbes.java", "BodyUseAPI": [], "Fixed commit": "41f2c4155d7d49eb3226294c1d75893f8f8a558f", "Url": "https://api.github.com/repos/antonybholmes/matcalc-probes", "Date": "2018-02-24T00:39:49Z"},
{"Line": "33=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale)=>java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,net.sourceforge.argparse4j.internal.UnitedStatesEnglishFallbackControl)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1583/buggy-version/main.src.main.java.net.sourceforge.argparse4j.internal.ArgumentParserConfigurationImpl.java", "BodyUseAPI": [], "Fixed commit": "104c05bd7a91efdcb0912c2f4a44b1ca58117626", "Url": "https://api.github.com/repos/argparse4j/argparse4j", "Date": "2018-09-03T17:58:52Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.group9.columbus.entity.ApplicationUser.getEmailId()=>com.group9.columbus.entity.ApplicationUser.getContactNumber()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5017/buggy-version/src.main.java.com.group9.columbus.dto.UserDto.java", "BodyUseAPI": [], "Fixed commit": "91b100b1e19a3794f00be6faeece202010c0a549", "Url": "https://api.github.com/repos/ASE-G9-TCD18/columbus-server", "Date": "2018-02-21T13:48:13Z"},
{"Line": "79=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.uark.models.entities.TransactionEntryEntity.getParentTransaction()=>edu.uark.models.api.TransactionEntry.getParentTransaction()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7751/buggy-version/src.main.java.edu.uark.models.entities.TransactionEntryEntity.java", "BodyUseAPI": [], "Fixed commit": "257d4294c9e816a38bb356132f0c3e871f39bd84", "Url": "https://api.github.com/repos/supremecsce3513/RegisterAPI-Java-Sprint2", "Date": "2018-04-28T07:31:21Z"},
{"Line": "30=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getSupportFragmentManager().beginTransaction().replace(R.id.fragment_board_container,com.example.akshay.ticktactoe.Views.Fragments.FragmentGame,<nulltype>)=>getSupportFragmentManager().beginTransaction().replace(R.id.fragment_board_container,com.example.akshay.ticktactoe.Views.Fragments.GameFragment,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3597/buggy-version/app.src.main.java.com.example.akshay.ticktactoe.Views.GameActivity.java", "BodyUseAPI": [], "Fixed commit": "b4dc14b67f00d8f66b074e971e275109abbbfc61", "Url": "https://api.github.com/repos/QuickChangeSpidey/android_native_tic_tac_toe", "Date": "2018-06-03T06:38:07Z"},
{"Line": "28=>30", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getSupportFragmentManager().beginTransaction().replace(R.id.fragment_score_container,com.example.akshay.ticktactoe.Views.Fragments.FragmentScore,<nulltype>)=>getSupportFragmentManager().beginTransaction().replace(R.id.fragment_score_container,com.example.akshay.ticktactoe.Views.Fragments.ScoreFragment,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3597/buggy-version/app.src.main.java.com.example.akshay.ticktactoe.Views.GameActivity.java", "BodyUseAPI": [], "Fixed commit": "b4dc14b67f00d8f66b074e971e275109abbbfc61", "Url": "https://api.github.com/repos/QuickChangeSpidey/android_native_tic_tac_toe", "Date": "2018-06-03T06:38:07Z"},
{"Line": "462=>463", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.openforis.collect.concurrency.CollectJobManager.startSurveyJob(org.openforis.collect.io.data.CSVDataExportJob)=>org.openforis.collect.concurrency.CollectJobManager.startSurveyJob(org.openforis.collect.io.data.CSVDataExportJob,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3048/buggy-version/collect-server.src.main.java.org.openforis.collect.web.controller.RecordController.java", "BodyUseAPI": [], "Fixed commit": "39e23eb476eb88cfd78f0b032f3869e6e6cd5e11", "Url": "https://api.github.com/repos/openforis/collect", "Date": "2018-09-12T07:00:28Z"},
{"Line": "464=>465", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.format(java.lang.String,org.openforis.collect.utils.Dates.formatDate(new java.util.Date()))=>java.lang.String.format(java.lang.String,int,org.openforis.collect.utils.Dates.formatDate(new java.util.Date()))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3048/buggy-version/collect-server.src.main.java.org.openforis.collect.web.controller.RecordController.java", "BodyUseAPI": [], "Fixed commit": "39e23eb476eb88cfd78f0b032f3869e6e6cd5e11", "Url": "https://api.github.com/repos/openforis/collect", "Date": "2018-09-12T07:00:28Z"},
{"Line": "592=>592", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getArguments().getInt(java.lang.String)=>getArguments().getLong(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3015/buggy-version/library.src.main.java.com.heinrichreimersoftware.materialintro.slide.SimpleSlide.java", "BodyUseAPI": [], "Fixed commit": "c04c5bd01afdc8cbffc1ac1a831a40825f93c42c", "Url": "https://api.github.com/repos/MFlisar/material-intro", "Date": "2018-02-07T07:32:18Z"},
{"Line": "97=>97", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ge.sanapps.tabbedscrollview.TabbedHorizontalScrollView.scrollTo(int,int)=>ge.sanapps.tabbedscrollview.TabbedHorizontalScrollView.scrollBy((((stepSize) * i) - (getScrollX())),int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8570/buggy-version/tabbedscrollview.src.main.java.ge.sanapps.tabbedscrollview.TabbedHorizontalScrollView.java", "BodyUseAPI": [], "Fixed commit": "747ad6d22a4b4ea5ec4562d4b892b1d4cff4e8e0", "Url": "https://api.github.com/repos/LevanSanadiradze/TabbedScrollView_Android", "Date": "2018-01-02T10:28:43Z"},
{"Line": "95=>95", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ge.sanapps.tabbedscrollview.TabbedHorizontalScrollView.smoothScrollTo(int,int)=>ge.sanapps.tabbedscrollview.TabbedHorizontalScrollView.smoothScrollBy((((stepSize) * i) - (getScrollX())),int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8570/buggy-version/tabbedscrollview.src.main.java.ge.sanapps.tabbedscrollview.TabbedHorizontalScrollView.java", "BodyUseAPI": [], "Fixed commit": "747ad6d22a4b4ea5ec4562d4b892b1d4cff4e8e0", "Url": "https://api.github.com/repos/LevanSanadiradze/TabbedScrollView_Android", "Date": "2018-01-02T10:28:43Z"},
{"Line": "95=>95", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ge.sanapps.tabbedscrollview.TabbedVerticalScrollView.smoothScrollTo(int,int)=>ge.sanapps.tabbedscrollview.TabbedVerticalScrollView.smoothScrollBy(int,(((stepSize) * i) - (getScrollY())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8570/buggy-version/tabbedscrollview.src.main.java.ge.sanapps.tabbedscrollview.TabbedVerticalScrollView.java", "BodyUseAPI": [], "Fixed commit": "747ad6d22a4b4ea5ec4562d4b892b1d4cff4e8e0", "Url": "https://api.github.com/repos/LevanSanadiradze/TabbedScrollView_Android", "Date": "2018-01-02T10:28:43Z"},
{"Line": "97=>97", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ge.sanapps.tabbedscrollview.TabbedVerticalScrollView.scrollTo(int,int)=>ge.sanapps.tabbedscrollview.TabbedVerticalScrollView.scrollBy(int,(((stepSize) * i) - (getScrollY())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8570/buggy-version/tabbedscrollview.src.main.java.ge.sanapps.tabbedscrollview.TabbedVerticalScrollView.java", "BodyUseAPI": [], "Fixed commit": "747ad6d22a4b4ea5ec4562d4b892b1d4cff4e8e0", "Url": "https://api.github.com/repos/LevanSanadiradze/TabbedScrollView_Android", "Date": "2018-01-02T10:28:43Z"},
{"Line": "110=>110", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.format(java.lang.String,int,int,double,double,java.lang.String,java.lang.String)=>java.lang.String.format(java.lang.String,int,int,double,double,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9367/buggy-version/tuning.Evaluator.java", "BodyUseAPI": [], "Fixed commit": "7d60c675f742138dc1b03263eae949a241e75a52", "Url": "https://api.github.com/repos/adrivrie/EvoComp", "Date": "2018-10-12T15:54:51Z"},
{"Line": "204=>204", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.widget.ImageButton.setBackgroundResource(R.drawable.pause)=>android.widget.ImageButton.setImageResource(R.drawable.pause)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/380/buggy-version/Android.SpeakFree.app.src.main.java.org.daylightingsociety.speakfree.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "9ac40a88f953b6b04053ed48e8be6de1154b145b", "Url": "https://api.github.com/repos/DaylightingSociety/SpeakFree", "Date": "2018-03-06T19:36:22Z"},
{"Line": "191=>191", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.widget.ImageButton.setBackgroundResource(R.drawable.play)=>android.widget.ImageButton.setImageResource(R.drawable.play)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/380/buggy-version/Android.SpeakFree.app.src.main.java.org.daylightingsociety.speakfree.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "9ac40a88f953b6b04053ed48e8be6de1154b145b", "Url": "https://api.github.com/repos/DaylightingSociety/SpeakFree", "Date": "2018-03-06T19:36:22Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.invaco.virtual_space.domain.VirtualSpace.getSpace_color()=>com.invaco.virtual_space.service.dto.VirtualSpaceDTO.getSpace_color()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8930/buggy-version/virtual_space.src.main.java.com.invaco.virtual_space.service.VirtualSpaceService.java", "BodyUseAPI": [], "Fixed commit": "c186d1e0dd81a5bc26b0218ae775826e90988f52", "Url": "https://api.github.com/repos/ilknurbisirici/VirtualSpaceService", "Date": "2018-09-03T13:29:21Z"},
{"Line": "21=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.invaco.virtual_space.domain.VirtualSpace.getArea()=>com.invaco.virtual_space.service.dto.VirtualSpaceDTO.getArea()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8930/buggy-version/virtual_space.src.main.java.com.invaco.virtual_space.service.VirtualSpaceService.java", "BodyUseAPI": [], "Fixed commit": "c186d1e0dd81a5bc26b0218ae775826e90988f52", "Url": "https://api.github.com/repos/ilknurbisirici/VirtualSpaceService", "Date": "2018-09-03T13:29:21Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.invaco.virtual_space.domain.VirtualSpace.setSpace_area(virtualSpaceDTO.getSpace_area())=>com.invaco.virtual_space.domain.VirtualSpace.setArea(virtualSpaceDTO.getArea())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8930/buggy-version/virtual_space.src.main.java.com.invaco.virtual_space.service.VirtualSpaceService.java", "BodyUseAPI": [], "Fixed commit": "c186d1e0dd81a5bc26b0218ae775826e90988f52", "Url": "https://api.github.com/repos/ilknurbisirici/VirtualSpaceService", "Date": "2018-09-03T13:29:21Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.invaco.virtual_space.service.dto.VirtualSpaceDTO.getSpace_area()=>com.invaco.virtual_space.service.dto.VirtualSpaceDTO.getArea()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8930/buggy-version/virtual_space.src.main.java.com.invaco.virtual_space.service.VirtualSpaceService.java", "BodyUseAPI": [], "Fixed commit": "c186d1e0dd81a5bc26b0218ae775826e90988f52", "Url": "https://api.github.com/repos/ilknurbisirici/VirtualSpaceService", "Date": "2018-09-03T13:29:21Z"},
{"Line": "42=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "repository.findById(id).orElseThrow()=>repository.findById(id).orElse(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8930/buggy-version/virtual_space.src.main.java.com.invaco.virtual_space.service.VirtualSpaceService.java", "BodyUseAPI": [], "Fixed commit": "c186d1e0dd81a5bc26b0218ae775826e90988f52", "Url": "https://api.github.com/repos/ilknurbisirici/VirtualSpaceService", "Date": "2018-09-03T13:29:21Z"},
{"Line": "28=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "repository.findById(id).orElseThrow()=>repository.findById(id).orElse(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8930/buggy-version/virtual_space.src.main.java.com.invaco.virtual_space.service.VirtualSpaceService.java", "BodyUseAPI": [], "Fixed commit": "c186d1e0dd81a5bc26b0218ae775826e90988f52", "Url": "https://api.github.com/repos/ilknurbisirici/VirtualSpaceService", "Date": "2018-09-03T13:29:21Z"},
{"Line": "109=>109", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Mstar.Worker.BackEnd.CJump.getOppositeCompareOp()=>Mstar.Worker.BackEnd.CJump.getReverseCompareOp()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5955/buggy-version/src.Mstar.Worker.BackEnd.IRCorrector.java", "BodyUseAPI": [], "Fixed commit": "0b8dc8112766a000d678826bdc359248a5e38ba4", "Url": "https://api.github.com/repos/idy002/mstar-compiler", "Date": "2018-05-29T06:39:10Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "sharedData.SocketMessage.getMessageType()=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6636/buggy-version/PDFWriter.java", "BodyUseAPI": [], "Fixed commit": "7df10eda09ae0cb740c5f9daedd368116ef23012", "Url": "https://api.github.com/repos/benluft/StudentProfessorDataSharing", "Date": "2018-04-12T00:01:35Z"},
{"Line": "35=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "message.getMessageType().equals(backEnd.PDFWriter)=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6636/buggy-version/PDFWriter.java", "BodyUseAPI": [], "Fixed commit": "7df10eda09ae0cb740c5f9daedd368116ef23012", "Url": "https://api.github.com/repos/benluft/StudentProfessorDataSharing", "Date": "2018-04-12T00:01:35Z"},
{"Line": "86=>86", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new net.dv8tion.jda.core.EmbedBuilder().setAuthor(\"Error\", null, fun.rubicon.RubiconBot.getSelfUser().getEffectiveAvatarUrl()).setDescription(\"An unknown error occurred while executing your command.\").setColor(Colors.COLOR_ERROR).setFooter(fun.rubicon.RubiconBot.getNewTimestamp(), null).build()=>fun.rubicon.command.CommandHandler.message(new net.dv8tion.jda.core.EmbedBuilder().setAuthor(\"Error\", null, fun.rubicon.RubiconBot.getSelfUser().getEffectiveAvatarUrl()).setDescription(\"An unknown error occurred while executing your comasdasdsadmand.\").setColor(Colors.COLOR_ERROR).setFooter(fun.rubicon.RubiconBot.getNewTimestamp(), null))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1113/buggy-version/src.main.java.fun.rubicon.command.CommandHandler.java", "BodyUseAPI": [], "Fixed commit": "bf70f0d683caed1dc4fcdd78ed1a42e846481b3b", "Url": "https://api.github.com/repos/Rubicon-Bot/Rubicon", "Date": "2018-04-02T21:42:45Z"},
{"Line": "106=>106", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.buffalo.cse.ubcollecting.data.models.Person.setPhotoPath(photoField.getText().toString())=>edu.buffalo.cse.ubcollecting.data.models.Person.setPhoto(photoField.getText().toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5337/buggy-version/UBCollecting.app.src.main.java.edu.buffalo.cse.ubcollecting.PersonActivity.java", "BodyUseAPI": [], "Fixed commit": "eb67c923e1cf6df06d8636a7bdc2921bf9d7241a", "Url": "https://api.github.com/repos/aamelunia/UB_Collecting", "Date": "2018-04-03T00:18:28Z"},
{"Line": "108=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.StringBuilder.append(byte[])=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6230/buggy-version/src.main.java.org.messtin.jhttp.entity.HttpResponse.java", "BodyUseAPI": [], "Fixed commit": "c8d23888dfbe276d7219a879b4c4dedc97d62dbb", "Url": "https://api.github.com/repos/majinliang123/JHTTP", "Date": "2018-09-06T14:02:06Z"},
{"Line": "78=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.nisovin.magicspells.MagicSpells.getVolatileCodeHandler().sendActionBarMessage(org.bukkit.entity.Player,java.lang.String)=>com.nisovin.magicspells.MagicSpells.getVolatileCodeHandler().sendActionBarMessage(org.bukkit.entity.Player,MagicSpells.plugin.doArgumentAndVariableSubstitution(message, player, null))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9847/buggy-version/src.com.nisovin.magicspells.spelleffects.ActionBarTextEffect.java", "BodyUseAPI": [], "Fixed commit": "c4bec7d2d3e4bb73f3089481df52f2e27d72c92e", "Url": "https://api.github.com/repos/IceLitty/MagicSpells", "Date": "2018-02-14T12:32:20Z"},
{"Line": "152=>151", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.nisovin.magicspells.MagicSpells.getVolatileCodeHandler().sendTitleToPlayer(org.bukkit.entity.Player,java.lang.String,java.lang.String,int,int,int)=>com.nisovin.magicspells.MagicSpells.getVolatileCodeHandler().sendTitleToPlayer(org.bukkit.entity.Player,MagicSpells.plugin.doArgumentAndVariableSubstitution(title, player, null),MagicSpells.plugin.doArgumentAndVariableSubstitution(subtitle, player, null),int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9847/buggy-version/src.com.nisovin.magicspells.spelleffects.TitleEffect.java", "BodyUseAPI": [], "Fixed commit": "c4bec7d2d3e4bb73f3089481df52f2e27d72c92e", "Url": "https://api.github.com/repos/IceLitty/MagicSpells", "Date": "2018-02-14T12:32:20Z"},
{"Line": "79=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.time.LocalDateTime.isAfter(java.time.LocalDateTime)=>java.time.LocalDateTime.isBefore(java.time.LocalDateTime)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4503/buggy-version/optashift-employee-rostering-shared.src.main.java.org.optaplanner.openshift.employeerostering.shared.roster.RosterState.java", "BodyUseAPI": [], "Fixed commit": "0014329d14f1dfc1cd6c26d23396af71e8562c7e", "Url": "https://api.github.com/repos/Christopher-Chianelli/optaweb-employee-rostering", "Date": "2018-05-02T12:58:00Z"},
{"Line": "64=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.time.OffsetDateTime.isAfter(java.time.OffsetDateTime)=>java.time.OffsetDateTime.isBefore(java.time.OffsetDateTime)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4503/buggy-version/optashift-employee-rostering-shared.src.main.java.org.optaplanner.openshift.employeerostering.shared.roster.RosterState.java", "BodyUseAPI": [], "Fixed commit": "0014329d14f1dfc1cd6c26d23396af71e8562c7e", "Url": "https://api.github.com/repos/Christopher-Chianelli/optaweb-employee-rostering", "Date": "2018-05-02T12:58:00Z"},
{"Line": "77=>81", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.support.v4.content.LocalBroadcastManager.getInstance(getActivity().getApplicationContext())=>android.support.v4.content.LocalBroadcastManager.getInstance(android.content.Context)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7690/buggy-version/app.src.main.java.mx.edu.cenidet.app.fragments.AlertHistoryFragment.java", "BodyUseAPI": [], "Fixed commit": "aa6a2e16b1d2b2d8937dfecb5cab0c4e2ecd18dd", "Url": "https://api.github.com/repos/cenidetiot/DrivingApp", "Date": "2018-08-23T18:35:19Z"},
{"Line": "193=>193", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.oop.shapes.MyShape.setDrawApi(com.oop.shapes.RedRectangeShape)=>com.oop.shapes.MyShape.setDrawApi(com.oop.shapes.drawapis.RedRectangeShape)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7130/buggy-version/src.com.oop.gui.DrawPanel.java", "BodyUseAPI": [], "Fixed commit": "7cdd19beab1dc03749fa9e335da2e7825b9032de", "Url": "https://api.github.com/repos/MuhammadMoustafa/SuperPaint", "Date": "2018-05-11T20:41:22Z"},
{"Line": "199=>199", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.oop.shapes.MyShape.setDrawApi(com.oop.shapes.RedOvalShape)=>com.oop.shapes.MyShape.setDrawApi(com.oop.shapes.drawapis.RedOvalShape)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7130/buggy-version/src.com.oop.gui.DrawPanel.java", "BodyUseAPI": [], "Fixed commit": "7cdd19beab1dc03749fa9e335da2e7825b9032de", "Url": "https://api.github.com/repos/MuhammadMoustafa/SuperPaint", "Date": "2018-05-11T20:41:22Z"},
{"Line": "24=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.oop.shapes.MyBoundedShape.setDrawApi(com.oop.shapes.DefaultDrawApi)=>com.oop.shapes.MyBoundedShape.setDrawApi(com.oop.shapes.drawapis.DefaultDrawApi)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7130/buggy-version/src.com.oop.shapes.MyBoundedShape.java", "BodyUseAPI": [], "Fixed commit": "7cdd19beab1dc03749fa9e335da2e7825b9032de", "Url": "https://api.github.com/repos/MuhammadMoustafa/SuperPaint", "Date": "2018-05-11T20:41:22Z"},
{"Line": "37=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.oop.shapes.MyBoundedShape.setDrawApi(com.oop.shapes.DefaultDrawApi)=>com.oop.shapes.MyBoundedShape.setDrawApi(com.oop.shapes.drawapis.DefaultDrawApi)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7130/buggy-version/src.com.oop.shapes.MyBoundedShape.java", "BodyUseAPI": [], "Fixed commit": "7cdd19beab1dc03749fa9e335da2e7825b9032de", "Url": "https://api.github.com/repos/MuhammadMoustafa/SuperPaint", "Date": "2018-05-11T20:41:22Z"},
{"Line": "39=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.github.polimi_mt_acg.back2school.api.v1.demo_utils.DemoUtilsResponse.setUrlEmptyDatabase(uriInfo.getBaseUriBuilder().path(this.getClass()).path(this.getClass(), \"getWhoAmI\").build())=>com.github.polimi_mt_acg.back2school.api.v1.demo_utils.DemoUtilsResponse.setUrlWhoAmI(uriInfo.getBaseUriBuilder().path(this.getClass()).path(this.getClass(), \"getWhoAmI\").build())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1291/buggy-version/src.main.java.com.github.polimi_mt_acg.back2school.api.v1.demo_utils.DemoUtilsResource.java", "BodyUseAPI": [], "Fixed commit": "64033744bdd21c6730ba297d60d8d290162d786f", "Url": "https://api.github.com/repos/polimi-mt-acg/back2school", "Date": "2018-09-25T16:28:29Z"},
{"Line": "116=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setText(java.lang.String)=>java.lang.String.format(java.lang.String,long,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8435/buggy-version/app.src.main.java.com.example.narritt.audioplayer.PlayerActivity.java", "BodyUseAPI": [], "Fixed commit": "5b9114d6bae4a9af1977eb36e15bbbbabaa3a3ec", "Url": "https://api.github.com/repos/narritt/audioPlayer", "Date": "2018-02-16T12:49:23Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.dcm4che3.ws.rs.MediaTypes.equalsIgnoreParameters(javax.ws.rs.core.MediaType,MediaTypes.APPLICATION_DICOM_JSON_TYPE)=>org.dcm4che3.ws.rs.MediaTypes.equalsIgnoreParameters(javax.ws.rs.core.MediaType,MediaTypes.APPLICATION_DICOM_XML_TYPE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3252/buggy-version/src.main.java.online.kheops.proxy.part.Part.java", "BodyUseAPI": [], "Fixed commit": "91260c1cc16ef8895c049176fe18d5516799f1c1", "Url": "https://api.github.com/repos/OsiriX-Foundation/KheopsDICOMwebProxy", "Date": "2018-10-25T08:19:29Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.springframework.ui.Model.addAttribute(java.lang.String,org.springframework.data.domain.Page<com.microreddit.app.persistence.models.Posts.Post>)=>org.springframework.ui.Model.addAttribute(java.lang.String,java.util.List<com.microreddit.app.persistence.models.Posts.Post>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7902/buggy-version/src.main.java.com.microreddit.app.controllers.FrontPageController.java", "BodyUseAPI": [], "Fixed commit": "17c18a1675cfbf2408f15cb3f140e1d78259a042", "Url": "https://api.github.com/repos/simeon4110/microreddit", "Date": "2018-05-06T18:35:00Z"},
{"Line": "281=>283", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.jebtk.bioinformatics.ext.samtools.SamUtils.getRegion(htsjdk.samtools.SAMRecord)=>org.jebtk.bioinformatics.ext.samtools.SamUtils.getRegion(java.lang.String,htsjdk.samtools.SAMRecord)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/881/buggy-version/edu.columbia.rdf.featurecount.src.main.java.edu.columbia.rdf.featurecount.MainFeatureCount.java", "BodyUseAPI": [], "Fixed commit": "ad9394cfea7926bdc1a735525b83aba7aee586f4", "Url": "https://api.github.com/repos/antonybholmes/featurecount", "Date": "2018-02-17T20:56:51Z"},
{"Line": "817=>816", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.jebtk.bioinformatics.ext.samtools.SamUtils.getRegion(htsjdk.samtools.SAMRecord)=>org.jebtk.bioinformatics.ext.samtools.SamUtils.getRegion(java.lang.String,htsjdk.samtools.SAMRecord)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/881/buggy-version/edu.columbia.rdf.featurecount.src.main.java.edu.columbia.rdf.featurecount.MainFeatureCount.java", "BodyUseAPI": [], "Fixed commit": "ad9394cfea7926bdc1a735525b83aba7aee586f4", "Url": "https://api.github.com/repos/antonybholmes/featurecount", "Date": "2018-02-17T20:56:51Z"},
{"Line": "442=>440", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.columbia.rdf.featurecount.MainFeatureCount.outputMapped(java.lang.String,java.nio.file.Path,org.jebtk.bioinformatics.genomic.Genes,int)=>edu.columbia.rdf.featurecount.MainFeatureCount.outputMapped(java.lang.String,java.lang.String,java.nio.file.Path,org.jebtk.bioinformatics.genomic.Genes,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/881/buggy-version/edu.columbia.rdf.featurecount.src.main.java.edu.columbia.rdf.featurecount.MainFeatureCount.java", "BodyUseAPI": [], "Fixed commit": "ad9394cfea7926bdc1a735525b83aba7aee586f4", "Url": "https://api.github.com/repos/antonybholmes/featurecount", "Date": "2018-02-17T20:56:51Z"},
{"Line": "93=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "net.minecraft.client.renderer.entity.RenderManager.doRenderEntity(net.minecraft.entity.EntityLivingBase,double,double,double,float,float,boolean)=>net.minecraft.client.renderer.entity.RenderManager.renderEntity(net.minecraft.entity.EntityLivingBase,double,double,double,float,float,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2482/buggy-version/src.main.java.itemrender.client.rendering.Renderer.java", "BodyUseAPI": [], "Fixed commit": "da7c82c0af62b3df797d854ca99e28a85bb9dc69", "Url": "https://api.github.com/repos/MascusJeoraly/Item-Render", "Date": "2018-05-30T22:56:03Z"},
{"Line": "560=>559", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.eleybourn.bookcatalogue.widgets.FastScrollExpandableListView.setFastScrollEnabled(boolean)=>android.widget.ExpandableListView.setFastScrollEnabled(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6913/buggy-version/src.com.eleybourn.bookcatalogue.BookCatalogueClassic.java", "BodyUseAPI": [], "Fixed commit": "7e198c739e7e47d64b6ff7f4c6d84e89ed1608b9", "Url": "https://api.github.com/repos/tfonteyn/Book-Catalogue", "Date": "2018-09-07T14:27:17Z"},
{"Line": "1702=>1701", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.eleybourn.bookcatalogue.widgets.FastScrollExpandableListView.setFastScrollEnabled(boolean)=>android.widget.ExpandableListView.setFastScrollEnabled(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6913/buggy-version/src.com.eleybourn.bookcatalogue.BookCatalogueClassic.java", "BodyUseAPI": [], "Fixed commit": "7e198c739e7e47d64b6ff7f4c6d84e89ed1608b9", "Url": "https://api.github.com/repos/tfonteyn/Book-Catalogue", "Date": "2018-09-07T14:27:17Z"},
{"Line": "1701=>1700", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.eleybourn.bookcatalogue.widgets.FastScrollExpandableListView.setFastScrollEnabled(boolean)=>android.widget.ExpandableListView.setFastScrollEnabled(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6913/buggy-version/src.com.eleybourn.bookcatalogue.BookCatalogueClassic.java", "BodyUseAPI": [], "Fixed commit": "7e198c739e7e47d64b6ff7f4c6d84e89ed1608b9", "Url": "https://api.github.com/repos/tfonteyn/Book-Catalogue", "Date": "2018-09-07T14:27:17Z"},
{"Line": "561=>560", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.eleybourn.bookcatalogue.widgets.FastScrollExpandableListView.setFastScrollEnabled(boolean)=>android.widget.ExpandableListView.setFastScrollEnabled(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6913/buggy-version/src.com.eleybourn.bookcatalogue.BookCatalogueClassic.java", "BodyUseAPI": [], "Fixed commit": "7e198c739e7e47d64b6ff7f4c6d84e89ed1608b9", "Url": "https://api.github.com/repos/tfonteyn/Book-Catalogue", "Date": "2018-09-07T14:27:17Z"},
{"Line": "122=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.logging.log4j.Logger.debug(java.lang.String,java.lang.String,java.util.List<java.nio.file.Path>)=>org.apache.logging.log4j.Logger.error(java.lang.String,java.lang.String,java.util.List<java.nio.file.Path>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2579/buggy-version/src.main.java.de.ugoe.cs.comfort.Utils.java", "BodyUseAPI": [], "Fixed commit": "3a282e42896e73d246e5701ec32a1203944359d4", "Url": "https://api.github.com/repos/comfort-framework/comfort", "Date": "2018-05-28T15:10:07Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.sql.PreparedStatement.setInt(int,int)=>com.airline.member.memberLoginParam.getPlatform()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3636/buggy-version/src.main.java.com.airline.member.memberLogin.java", "BodyUseAPI": [], "Fixed commit": "8aa15c7b7fae38f6de4e5b3a72ebe726925f9db4", "Url": "https://api.github.com/repos/Davianhjh/airline-auction-server", "Date": "2018-03-29T06:06:34Z"},
{"Line": "74=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.sql.PreparedStatement.setString(int,ml.getPlatform())=>java.sql.PreparedStatement.setInt(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3636/buggy-version/src.main.java.com.airline.member.memberLogin.java", "BodyUseAPI": [], "Fixed commit": "8aa15c7b7fae38f6de4e5b3a72ebe726925f9db4", "Url": "https://api.github.com/repos/Davianhjh/airline-auction-server", "Date": "2018-03-29T06:06:34Z"},
{"Line": "74=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.airline.member.memberLoginParam.getPlatform()=>java.sql.PreparedStatement.setInt(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3636/buggy-version/src.main.java.com.airline.member.memberLogin.java", "BodyUseAPI": [], "Fixed commit": "8aa15c7b7fae38f6de4e5b3a72ebe726925f9db4", "Url": "https://api.github.com/repos/Davianhjh/airline-auction-server", "Date": "2018-03-29T06:06:34Z"},
{"Line": "61=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.sql.PreparedStatement.setString(int,java.lang.String)=>java.sql.PreparedStatement.setInt(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3636/buggy-version/src.main.java.com.airline.member.verifyQuickAccess.java", "BodyUseAPI": [], "Fixed commit": "8aa15c7b7fae38f6de4e5b3a72ebe726925f9db4", "Url": "https://api.github.com/repos/Davianhjh/airline-auction-server", "Date": "2018-03-29T06:06:34Z"},
{"Line": "60=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.sql.PreparedStatement.setInt(int,int)=>java.sql.PreparedStatement.setString(int,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3636/buggy-version/src.main.java.com.airline.member.verifyQuickAccess.java", "BodyUseAPI": [], "Fixed commit": "8aa15c7b7fae38f6de4e5b3a72ebe726925f9db4", "Url": "https://api.github.com/repos/Davianhjh/airline-auction-server", "Date": "2018-03-29T06:06:34Z"},
{"Line": "137=>137", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javax.servlet.http.HttpServletResponse.sendRedirect(java.lang.String)=>javax.servlet.http.HttpServletResponse.sendRedirect((\"displayAuctionServlet?locale=\" + (request.getParameter(\"locale\"))))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4949/buggy-version/SignInProject.src.com.oa.servlets.AuctionServlet.java", "BodyUseAPI": [], "Fixed commit": "45b33d47fdacf8535076052b5c44b2f7b65eea07", "Url": "https://api.github.com/repos/Biller89/OnlineBiddingApplication", "Date": "2018-04-10T01:08:48Z"},
{"Line": "199=>199", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "springboot.repositroy.ArticleRepositroy.findArticlesByTitleContainsOrContentContains(java.lang.String,org.springframework.data.domain.PageRequest)=>springboot.repositroy.ArticleRepositroy.findArticlesByTitleContainingAndContentContaining(java.lang.String,java.lang.String,org.springframework.data.domain.PageRequest)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4616/buggy-version/Springboot-In-Practice.springboot-multi-table.src.main.java.springboot.web.api.ArticleApi.java", "BodyUseAPI": [], "Fixed commit": "958ee5720575d1c7a0570b9be11d9966063997a3", "Url": "https://api.github.com/repos/Mr-LiuDC/Indulge-In-Java", "Date": "2018-03-17T06:42:54Z"},
{"Line": "94=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.List<ch.epfl.sweng.swenggolf.offer.Offer>.remove(ch.epfl.sweng.swenggolf.offer.Offer)=>java.util.List<ch.epfl.sweng.swenggolf.offer.Offer>.add(ch.epfl.sweng.swenggolf.offer.Offer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6951/buggy-version/app.src.main.java.ch.epfl.sweng.swenggolf.database.FakeDatabase.java", "BodyUseAPI": [], "Fixed commit": "46893007fa86d8d87944c9750bef944b250dbade", "Url": "https://api.github.com/repos/SwengGolfTeam/Sweng_Golf", "Date": "2018-10-29T18:04:00Z"},
{"Line": "94=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.List<ch.epfl.sweng.swenggolf.offer.Offer>.remove(ch.epfl.sweng.swenggolf.offer.Offer)=>java.util.List<ch.epfl.sweng.swenggolf.offer.Offer>.add(ch.epfl.sweng.swenggolf.offer.Offer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6951/buggy-version/app.src.main.java.ch.epfl.sweng.swenggolf.database.FakeDatabase.java", "BodyUseAPI": [], "Fixed commit": "46893007fa86d8d87944c9750bef944b250dbade", "Url": "https://api.github.com/repos/SwengGolfTeam/Sweng_Golf", "Date": "2018-10-29T18:04:00Z"},
{"Line": "215=>216", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.paulz.carinsurance.utils.AppUtil.showToast(getApplicationContext(),java.lang.String)=>com.paulz.carinsurance.ui.SelectCarModelActivity.invoke(com.paulz.carinsurance.ui.CarInsureActivity,btnCarCode.getText().toString().trim(),btnRegistDate.getText().toString().trim(),boolean,boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2524/buggy-version/app.src.main.java.com.paulz.carinsurance.ui.CarInsureActivity.java", "BodyUseAPI": [], "Fixed commit": "f24bbf214031cb72e36ea5512631e7a9c6b5442d", "Url": "https://api.github.com/repos/qinzhen308/carinsurance", "Date": "2018-01-22T09:50:41Z"},
{"Line": "215=>216", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.paulz.carinsurance.utils.AppUtil.showToast(getApplicationContext(),java.lang.String)=>com.paulz.carinsurance.ui.SelectCarModelActivity.invoke(com.paulz.carinsurance.ui.CarInsureActivity,btnCarCode.getText().toString().trim(),btnRegistDate.getText().toString().trim(),boolean,boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2524/buggy-version/app.src.main.java.com.paulz.carinsurance.ui.CarInsureActivity.java", "BodyUseAPI": [], "Fixed commit": "f24bbf214031cb72e36ea5512631e7a9c6b5442d", "Url": "https://api.github.com/repos/qinzhen308/carinsurance", "Date": "2018-01-22T09:50:41Z"},
{"Line": "418=>419", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.paulz.carinsurance.utils.AppUtil.showToast(getApplicationContext(),java.lang.String)=>com.paulz.carinsurance.ui.SelectCarModelActivity.invoke(com.paulz.carinsurance.ui.AddCarInfoActivity,tvCarCode.getText().toString().trim(),btnRegistDate.getText().toString().trim(),boolean,boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2524/buggy-version/app.src.main.java.com.paulz.carinsurance.ui.AddCarInfoActivity.java", "BodyUseAPI": [], "Fixed commit": "f24bbf214031cb72e36ea5512631e7a9c6b5442d", "Url": "https://api.github.com/repos/qinzhen308/carinsurance", "Date": "2018-01-22T09:50:41Z"},
{"Line": "121=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.zeebe.broker.subscription.message.state.MessageStateController.put(io.zeebe.broker.subscription.message.state.MessageSubscription)=>io.zeebe.broker.subscription.message.state.MessageStateController.updateCommandSentTime(io.zeebe.broker.subscription.message.state.MessageSubscription)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8707/buggy-version/broker-core.src.main.java.io.zeebe.broker.subscription.message.processor.PublishMessageProcessor.java", "BodyUseAPI": [], "Fixed commit": "5e948ee2019d132932ba06b09e83f8d668b56419", "Url": "https://api.github.com/repos/zeebe-io/zeebe", "Date": "2018-09-28T05:48:53Z"},
{"Line": "260=>260", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.os.AsyncTask.execute(java.lang.Runnable)=>android.os.AsyncTask.execute()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7602/buggy-version/app.src.main.java.com.sirialkillers.shoponthego.Maps_Related_Activities.MapsActivity.java", "BodyUseAPI": [], "Fixed commit": "4c84c3e564608dac6a802113e8a93d0290364909", "Url": "https://api.github.com/repos/chrisaslamagidis/Shop-On-The-Go", "Date": "2018-01-02T14:08:59Z"},
{"Line": "235=>237", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "webRequest.getResponse().setStatus(error.getStatus().value())=>javax.servlet.http.HttpServletResponse.setStatus(error.getStatus().value())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9666/buggy-version/spar-wings-monolith.src.main.java.jp.xet.sparwings.spring.web.error.handler.RestExceptionHandler.java", "BodyUseAPI": [], "Fixed commit": "6d3f7e0eea377dce987ef0a5177c0c3ef7cf7d09", "Url": "https://api.github.com/repos/wreulicke/spar-wings", "Date": "2018-03-18T13:17:51Z"},
{"Line": "37=>37", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.apache.http.HttpRequest.addHeader(java.lang.String,java.lang.String)=>org.apache.http.HttpRequest.addHeader(java.lang.String,applicationProperties.getProxy().getKibana().getBasicAuth())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6899/buggy-version/src.main.java.org.tech3.analytics.config.KibanaProxyServletConfiguration.java", "BodyUseAPI": [], "Fixed commit": "665c60c5d1f5b4546c0a48be58cd6c54dfd8feaf", "Url": "https://api.github.com/repos/aaradhanas/jhipster-demo-app", "Date": "2018-02-26T16:07:03Z"},
{"Line": "28=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "this.sourceobj.getSourceStoichiometry(sink.sourceobj)=>this.sourceobj.getSinkStoichiometry(sink.sourceobj)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7181/buggy-version/src.semgen.stage.serialization.PhysioMapNode.java", "BodyUseAPI": [], "Fixed commit": "a54f93a578d7060702974686371718c39b139db3", "Url": "https://api.github.com/repos/SemBioProcess/SemGen", "Date": "2018-03-14T18:48:19Z"},
{"Line": "140=>142", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.levitnudi.legacytableview.LegacyTableView.insertLegacyTitle(java.lang.String[])=>com.levitnudi.legacytableview.LegacyTableView.insertLegacyContent(java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2705/buggy-version/app.src.main.java.in.ac.charusat.charusat.fragments.TableInfoView.java", "BodyUseAPI": [], "Fixed commit": "1ce6083f4568c2d51ad91cf2acfac805978b9a59", "Url": "https://api.github.com/repos/umangjpatel/CHARUSAT", "Date": "2018-03-31T05:50:46Z"},
{"Line": "142=>140", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.levitnudi.legacytableview.LegacyTableView.insertLegacyContent(java.lang.String[])=>com.levitnudi.legacytableview.LegacyTableView.insertLegacyTitle(java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2705/buggy-version/app.src.main.java.in.ac.charusat.charusat.fragments.TableInfoView.java", "BodyUseAPI": [], "Fixed commit": "1ce6083f4568c2d51ad91cf2acfac805978b9a59", "Url": "https://api.github.com/repos/umangjpatel/CHARUSAT", "Date": "2018-03-31T05:50:46Z"},
{"Line": "121=>122", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "cell.getStringCellValue().replace(java.lang.String,java.lang.String)=>cell.getStringCellValue().replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1744/buggy-version/src.main.java.com.github.ograndebe.x2d.MetadataRetriever.java", "BodyUseAPI": [], "Fixed commit": "5a6ebbdcf3f74d5cca1c79e42a599d1b1059c029", "Url": "https://api.github.com/repos/ograndebe/x2d", "Date": "2018-03-20T14:18:01Z"},
{"Line": "115=>116", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "sheet.getSheetName().replace(java.lang.String,java.lang.String)=>sheet.getSheetName().replaceAll(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1744/buggy-version/src.main.java.com.github.ograndebe.x2d.MetadataRetriever.java", "BodyUseAPI": [], "Fixed commit": "5a6ebbdcf3f74d5cca1c79e42a599d1b1059c029", "Url": "https://api.github.com/repos/ograndebe/x2d", "Date": "2018-03-20T14:18:01Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "stock.StockQuotationInfo.setOpenPrivce(float)=>stock.StockQuotationInfo.setOpenPrice(float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5596/buggy-version/src.main.java.stock.QuotationProducer.java", "BodyUseAPI": [], "Fixed commit": "72420acf60011f68f7a3ec49e8a2055c69986f12", "Url": "https://api.github.com/repos/maocoj/kafka-demo", "Date": "2018-01-12T03:27:39Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.math.BigDecimal.add(practice3.PriceCaculator.calculatePriceFromDiscounts(discounts))=>java.math.BigDecimal.subtract(practice3.PriceCaculator.calculatePriceFromDiscounts(discounts))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7316/buggy-version/src.main.java.practice3.Order.java", "BodyUseAPI": [], "Fixed commit": "e2e18bd445d10dfe8653a065d92f0b91dc09ff86", "Url": "https://api.github.com/repos/tdkihrr/2018-04-04-04-58-52-1522817932", "Date": "2018-05-13T07:46:08Z"},
{"Line": "107=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.equals(java.lang.String)=>android.widget.RadioButton.isChecked()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8672/buggy-version/app.src.main.java.com.qubixsolutions.quiz_app.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "ef370e37e260bde561db9f87393370a53d80d543", "Url": "https://api.github.com/repos/masterblasterx89/Quiz_App", "Date": "2018-05-24T02:57:07Z"},
{"Line": "115=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.CheckBox.isChecked()=>android.widget.RadioButton.isChecked()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8672/buggy-version/app.src.main.java.com.qubixsolutions.quiz_app.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "ef370e37e260bde561db9f87393370a53d80d543", "Url": "https://api.github.com/repos/masterblasterx89/Quiz_App", "Date": "2018-05-24T02:57:07Z"},
{"Line": "115=>113", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.CheckBox.isChecked()=>android.widget.RadioButton.isChecked()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8672/buggy-version/app.src.main.java.com.qubixsolutions.quiz_app.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "ef370e37e260bde561db9f87393370a53d80d543", "Url": "https://api.github.com/repos/masterblasterx89/Quiz_App", "Date": "2018-05-24T02:57:07Z"},
{"Line": "127=>127", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Math.floor(double)=>java.lang.Math.ceil(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3352/buggy-version/src.control.Map.java", "BodyUseAPI": [], "Fixed commit": "eb5e5c6f0141ddde209677425599d07ed3c1bbfa", "Url": "https://api.github.com/repos/Gus314/Picaro", "Date": "2018-10-08T21:15:33Z"},
{"Line": "126=>126", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Math.floor(double)=>java.lang.Math.ceil(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3352/buggy-version/src.control.Map.java", "BodyUseAPI": [], "Fixed commit": "eb5e5c6f0141ddde209677425599d07ed3c1bbfa", "Url": "https://api.github.com/repos/Gus314/Picaro", "Date": "2018-10-08T21:15:33Z"},
{"Line": "310=>310", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.ninos.models.PostInfo.getTitle()=>com.ninos.models.PostInfo.getChallengeTitle()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2103/buggy-version/app.src.main.java.com.ninos.adapters.AllChallengeAdapter.java", "BodyUseAPI": [], "Fixed commit": "4a3c70290b59c0885d1adeef03ef875bb49b1b70", "Url": "https://api.github.com/repos/ninosapp/Ninos", "Date": "2018-02-20T14:02:40Z"},
{"Line": "309=>309", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.ninos.models.PostInfo.get_id()=>com.ninos.models.PostInfo.getChallengeId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2103/buggy-version/app.src.main.java.com.ninos.adapters.AllChallengeAdapter.java", "BodyUseAPI": [], "Fixed commit": "4a3c70290b59c0885d1adeef03ef875bb49b1b70", "Url": "https://api.github.com/repos/ninosapp/Ninos", "Date": "2018-02-20T14:02:40Z"},
{"Line": "70=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Errors.NO_API.print()=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9620/buggy-version/src.simplepets.brainsynder.PetCore.java", "BodyUseAPI": [], "Fixed commit": "b520a67845d96ece347b04aaf5cd56e7cc7a8ea4", "Url": "https://api.github.com/repos/brainsynder-Dev/SimplePets", "Date": "2018-03-14T17:42:57Z"},
{"Line": "265=>246", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Exception.printStackTrace()=>java.util.regex.Pattern.compile(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/828/buggy-version/app.src.main.java.com.zijie.treader.util.BookUtil.java", "BodyUseAPI": [], "Fixed commit": "d5ca94b3da59bd8edbe6d3e6119b33dbab263858", "Url": "https://api.github.com/repos/sfshine/treader", "Date": "2018-02-05T08:41:27Z"},
{"Line": "225=>214", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "riverRef.putFile(mPhotoURI).addOnSuccessListener(new com.google.android.gms.tasks.OnSuccessListener<com.google.firebase.storage.UploadTask.TaskSnapshot>() { @java.lang.Override public void onSuccess(com.google.firebase.storage.UploadTask.TaskSnapshot taskSnapshot) { android.net.Uri downloadUrl = taskSnapshot.getDownloadUrl(); java.lang.String url = downloadUrl.toString(); long date = new java.util.Date().getTime(); java.lang.String keyPhoto = mRef.push().getKey().toString(); fr.wildcodeschool.rateeverything.MainPhotoModel mainPhotoModel = new fr.wildcodeschool.rateeverything.MainPhotoModel(descriptionValue, mCurrentUser.getUid(), keyPhoto, 1, url, (-date), titleValue, java.lang.Math.round(mNoteBar.getRating())); mRef.child(keyPhoto).setValue(mainPhotoModel); mRef.child(keyPhoto).child(\"idvotant\").child(mIDUser).setValue(java.lang.Math.round(mNoteBar.getRating())); startActivity(mGoToMainActivity); } }).addOnProgressListener(new com.google.firebase.storage.OnProgressListener<com.google.firebase.storage.UploadTask.TaskSnapshot>() { @java.lang.Override public void onProgress(com.google.firebase.storage.UploadTask.TaskSnapshot taskSnapshot) { long progress = (100 * (taskSnapshot.getBytesTransferred())) / (taskSnapshot.getTotalByteCount()); android.widget.Toast.makeText(fr.wildcodeschool.rateeverything.AddPhotoActivity.this, (((getString(R.string.telechargement)) + progress) + \" %\"), Toast.LENGTH_SHORT).show(); } }).addOnFailureListener(com.google.android.gms.tasks.OnFailureListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8014/buggy-version/app.src.main.java.fr.wildcodeschool.rateeverything.AddPhotoActivity.java", "BodyUseAPI": [], "Fixed commit": "cd6f58eb64730337b9099326b8d1da9a393fe8c7", "Url": "https://api.github.com/repos/WildCodeSchool/toulouse-0218-java-rateeverything", "Date": "2018-05-03T15:13:34Z"},
{"Line": "237=>238", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new com.google.firebase.storage.OnProgressListener<com.google.firebase.storage.UploadTask.TaskSnapshot>() { @java.lang.Override public void onProgress(com.google.firebase.storage.UploadTask.TaskSnapshot taskSnapshot) { long progress = (100 * (taskSnapshot.getBytesTransferred())) / (taskSnapshot.getTotalByteCount()); android.widget.Toast.makeText(fr.wildcodeschool.rateeverything.AddPhotoActivity.this, (((getString(R.string.telechargement)) + progress) + \" %\"), Toast.LENGTH_SHORT).show(); } }=>new com.google.android.gms.tasks.OnFailureListener() { @java.lang.Override public void onFailure(@android.support.annotation.NonNull java.lang.Exception e) { android.widget.Toast.makeText(fr.wildcodeschool.rateeverything.AddPhotoActivity.this, R.string.fail, Toast.LENGTH_SHORT).show(); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8014/buggy-version/app.src.main.java.fr.wildcodeschool.rateeverything.AddPhotoActivity.java", "BodyUseAPI": [], "Fixed commit": "cd6f58eb64730337b9099326b8d1da9a393fe8c7", "Url": "https://api.github.com/repos/WildCodeSchool/toulouse-0218-java-rateeverything", "Date": "2018-05-03T15:13:34Z"},
{"Line": "241=>241", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "2.getString(R.string.telechargement)=>android.widget.Toast.makeText(fr.wildcodeschool.rateeverything.AddPhotoActivity,R.string.fail,Toast.LENGTH_SHORT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8014/buggy-version/app.src.main.java.fr.wildcodeschool.rateeverything.AddPhotoActivity.java", "BodyUseAPI": [], "Fixed commit": "cd6f58eb64730337b9099326b8d1da9a393fe8c7", "Url": "https://api.github.com/repos/WildCodeSchool/toulouse-0218-java-rateeverything", "Date": "2018-05-03T15:13:34Z"},
{"Line": "225=>225", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "riverRef.putFile(mPhotoURI).addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener<com.google.firebase.storage.UploadTask.TaskSnapshot>)=>riverRef.putFile(mPhotoURI).addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener<com.google.firebase.storage.UploadTask.TaskSnapshot>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8014/buggy-version/app.src.main.java.fr.wildcodeschool.rateeverything.AddPhotoActivity.java", "BodyUseAPI": [], "Fixed commit": "cd6f58eb64730337b9099326b8d1da9a393fe8c7", "Url": "https://api.github.com/repos/WildCodeSchool/toulouse-0218-java-rateeverything", "Date": "2018-05-03T15:13:34Z"},
{"Line": "289=>289", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "us.ihmc.humanoidRobotics.communication.controllerAPI.command.PelvisTrajectoryCommand.getSE3Trajectory()=>us.ihmc.humanoidRobotics.communication.controllerAPI.command.PelvisHeightTrajectoryCommand.getEuclideanTrajectory()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6178/buggy-version/ihmc-common-walking-control-modules.src.main.java.us.ihmc.commonWalkingControlModules.controlModules.pelvis.PelvisHeightControlState.java", "BodyUseAPI": [], "Fixed commit": "48a5159233752f84eaf588a3633ef9e418d21a86", "Url": "https://api.github.com/repos/ihmcrobotics/ihmc-open-robotics-software", "Date": "2018-08-16T02:06:19Z"},
{"Line": "41=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.PrintWriter.println(java.lang.String)=>java.io.PrintWriter.print(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8969/buggy-version/mailPranksGenerator.src.main.java.smtp.SmtpClient.java", "BodyUseAPI": [], "Fixed commit": "4e1b7cecb01338f213aeccb3033e37a213516274", "Url": "https://api.github.com/repos/Ludwig9392/RES-SMTP-Labo-03", "Date": "2018-04-16T14:04:05Z"},
{"Line": "41=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.PrintWriter.println(java.lang.String)=>java.io.PrintWriter.print(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8969/buggy-version/mailPranksGenerator.src.main.java.smtp.SmtpClient.java", "BodyUseAPI": [], "Fixed commit": "4e1b7cecb01338f213aeccb3033e37a213516274", "Url": "https://api.github.com/repos/Ludwig9392/RES-SMTP-Labo-03", "Date": "2018-04-16T14:04:05Z"},
{"Line": "226=>226", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.geneontology.minerva.json.JsonTools.create(ax.getProperty(),ax.getValue(),org.geneontology.minerva.curie.CurieHandler)=>org.geneontology.minerva.json.JsonTools.create(ax.getProperty(),ax.getValue(),<nulltype>,org.geneontology.minerva.curie.CurieHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3209/buggy-version/minerva-core.src.main.java.org.geneontology.minerva.json.MolecularModelJsonRenderer.java", "BodyUseAPI": [], "Fixed commit": "adfdc4cbabc3c6d7d9a4fc2afc365fb0217af953", "Url": "https://api.github.com/repos/geneontology/minerva", "Date": "2018-02-09T03:36:45Z"},
{"Line": "234=>234", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.geneontology.minerva.json.JsonTools.create(org.semanticweb.owlapi.model.OWLDataProperty,ax.getObject(),org.geneontology.minerva.curie.CurieHandler)=>org.geneontology.minerva.json.JsonTools.create(org.semanticweb.owlapi.model.OWLDataProperty,ax.getObject(),<nulltype>,org.geneontology.minerva.curie.CurieHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3209/buggy-version/minerva-core.src.main.java.org.geneontology.minerva.json.MolecularModelJsonRenderer.java", "BodyUseAPI": [], "Fixed commit": "adfdc4cbabc3c6d7d9a4fc2afc365fb0217af953", "Url": "https://api.github.com/repos/geneontology/minerva", "Date": "2018-02-09T03:36:45Z"},
{"Line": "151=>151", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.geneontology.minerva.json.JsonTools.create(annotation.getProperty(),annotation.getValue(),org.geneontology.minerva.curie.CurieHandler)=>org.geneontology.minerva.json.JsonTools.create(annotation.getProperty(),annotation.getValue(),<nulltype>,org.geneontology.minerva.curie.CurieHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3209/buggy-version/minerva-core.src.main.java.org.geneontology.minerva.json.MolecularModelJsonRenderer.java", "BodyUseAPI": [], "Fixed commit": "adfdc4cbabc3c6d7d9a4fc2afc365fb0217af953", "Url": "https://api.github.com/repos/geneontology/minerva", "Date": "2018-02-09T03:36:45Z"},
{"Line": "68=>68", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.geneontology.minerva.json.JsonAnnotation.create(key.getShorthand(),java.lang.String,java.lang.String,<nulltype>)=>org.geneontology.minerva.json.JsonAnnotation.create(key.getShorthand(),java.lang.String,<nulltype>,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3209/buggy-version/minerva-core.src.main.java.org.geneontology.minerva.json.JsonTools.java", "BodyUseAPI": [], "Fixed commit": "adfdc4cbabc3c6d7d9a4fc2afc365fb0217af953", "Url": "https://api.github.com/repos/geneontology/minerva", "Date": "2018-02-09T03:36:45Z"},
{"Line": "191=>190", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<com.loz.iyaf.feed.EventData>.get(int)=>android.os.Bundle.putSerializable(java.lang.String,com.loz.iyaf.feed.EventData)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6198/buggy-version/app.src.main.java.com.loz.iyaf.events.EventListActivity.java", "BodyUseAPI": [], "Fixed commit": "f4e326bf976e0b58b790b3968c7c34497a4ee2a3", "Url": "https://api.github.com/repos/lozarcher/eventapp-android", "Date": "2018-04-14T00:57:03Z"},
{"Line": "37=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.minecraft.item.Item.getItemFromBlock(BlockIDs.windMill.block)=>net.minecraft.item.Item.getItemFromBlock(BlockIDs.switchStand.block)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3792/buggy-version/src.main.java.train.common.tile.TileSwitchStand.java", "BodyUseAPI": [], "Fixed commit": "6a5051db0be5d242b580b5ee8b51abcf784be279", "Url": "https://api.github.com/repos/EternalBlueFlame/Traincraft-5", "Date": "2018-04-28T23:54:52Z"},
{"Line": "243=>246", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Terrain.GameMap.isLocationEmpty(Units.Unit,actor.y,actor.y)=>Terrain.GameMap.isLocationEmpty(Units.Unit,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2285/buggy-version/src.Engine.GameAction.java", "BodyUseAPI": [], "Fixed commit": "9d79c4045531650731deebb17876c722fd9e3555", "Url": "https://api.github.com/repos/ThislsAUsername/DefendPeace", "Date": "2018-02-23T05:31:12Z"},
{"Line": "56=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.System.currentTimeMillis()=>com.example.ahmed_tarek.graduationapplication.receivers.BootUpReceiver.fireAfter(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6349/buggy-version/app.src.main.java.com.example.ahmed_tarek.graduationapplication.receivers.BootUpReceiver.java", "BodyUseAPI": [], "Fixed commit": "40784243f0b48554b8a4eb9a4ac844335af37309", "Url": "https://api.github.com/repos/AhmedTarek-Fahiem/GraduationApplication", "Date": "2018-01-05T11:32:34Z"},
{"Line": "33=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Database.LOGGER.error(java.lang.String)=>Database.LOGGER.info(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4846/buggy-version/src.main.java.com.github.drsmugleaf.database.api.DatabaseConnection.java", "BodyUseAPI": [], "Fixed commit": "69ee53522dc8028d27cfa0764a6fa019d3d20e11", "Url": "https://api.github.com/repos/DrSmugleaf/Banter-Bot4J", "Date": "2018-04-13T11:05:55Z"},
{"Line": "21=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "retrofit2.Retrofit.Builder.baseUrl(GlobalStrings.DEMO_BASE_URL)=>retrofit2.Retrofit.Builder.baseUrl(Url.DEMO_BASE_URL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3317/buggy-version/app.src.main.java.com.lemubit.lemuel.androidpayant.api.PayantApiClient.java", "BodyUseAPI": [], "Fixed commit": "a4a5a7f33c77efecaf7fe73a11fc3b93f176f2c8", "Url": "https://api.github.com/repos/LEMUBIT/PayantAndroid", "Date": "2018-07-01T12:06:29Z"},
{"Line": "181=>182", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "no.nemeas.numbers.StartScreenFragment.showLogin()=>no.nemeas.numbers.fragments.StartScreenFragment.showLogin()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6752/buggy-version/app.src.main.java.no.nemeas.numbers.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "da0eb34334f9abb4d882d7b6d94432270a77557c", "Url": "https://api.github.com/repos/Nemeas/Numbers", "Date": "2018-08-30T20:58:38Z"},
{"Line": "193=>194", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, newFrag).commit()=>getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, newFrag).commitAllowingStateLoss()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6752/buggy-version/app.src.main.java.no.nemeas.numbers.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "da0eb34334f9abb4d882d7b6d94432270a77557c", "Url": "https://api.github.com/repos/Nemeas/Numbers", "Date": "2018-08-30T20:58:38Z"},
{"Line": "167=>168", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "no.nemeas.numbers.StartScreenFragment.setUserImage(java.lang.String)=>no.nemeas.numbers.fragments.StartScreenFragment.setUserImage(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6752/buggy-version/app.src.main.java.no.nemeas.numbers.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "da0eb34334f9abb4d882d7b6d94432270a77557c", "Url": "https://api.github.com/repos/Nemeas/Numbers", "Date": "2018-08-30T20:58:38Z"},
{"Line": "78=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "no.nemeas.numbers.GamePlayFragment.setListener(no.nemeas.numbers.MainActivity)=>no.nemeas.numbers.fragments.GamePlayFragment.setListener(no.nemeas.numbers.MainActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6752/buggy-version/app.src.main.java.no.nemeas.numbers.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "da0eb34334f9abb4d882d7b6d94432270a77557c", "Url": "https://api.github.com/repos/Nemeas/Numbers", "Date": "2018-08-30T20:58:38Z"},
{"Line": "153=>154", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "no.nemeas.numbers.StartScreenFragment.hideLogin()=>no.nemeas.numbers.fragments.StartScreenFragment.hideLogin()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6752/buggy-version/app.src.main.java.no.nemeas.numbers.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "da0eb34334f9abb4d882d7b6d94432270a77557c", "Url": "https://api.github.com/repos/Nemeas/Numbers", "Date": "2018-08-30T20:58:38Z"},
{"Line": "108=>109", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "no.nemeas.numbers.GamePlayFragment.isVisible()=>no.nemeas.numbers.fragments.GamePlayFragment.isVisible()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6752/buggy-version/app.src.main.java.no.nemeas.numbers.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "da0eb34334f9abb4d882d7b6d94432270a77557c", "Url": "https://api.github.com/repos/Nemeas/Numbers", "Date": "2018-08-30T20:58:38Z"},
{"Line": "79=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "no.nemeas.numbers.StartScreenFragment.setListener(no.nemeas.numbers.MainActivity)=>no.nemeas.numbers.fragments.StartScreenFragment.setListener(no.nemeas.numbers.MainActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6752/buggy-version/app.src.main.java.no.nemeas.numbers.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "da0eb34334f9abb4d882d7b6d94432270a77557c", "Url": "https://api.github.com/repos/Nemeas/Numbers", "Date": "2018-08-30T20:58:38Z"},
{"Line": "53=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.defano.wyldcard.WyldCard.getInstance().getFocusedCard().importPart(com.defano.wyldcard.runtime.context.ExecutionContext,com.defano.wyldcard.parts.clipboard.ToolEditablePart,com.defano.wyldcard.parts.card.CardLayer)=>com.defano.wyldcard.parts.card.CardPart.importPart(com.defano.wyldcard.runtime.context.ExecutionContext,com.defano.wyldcard.parts.clipboard.ToolEditablePart,com.defano.wyldcard.parts.card.CardLayer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2479/buggy-version/src.main.java.com.defano.wyldcard.parts.clipboard.CardPartTransferHandler.java", "BodyUseAPI": [], "Fixed commit": "c281795d9f5a78af17d1e9652e7c4b244c94ec65", "Url": "https://api.github.com/repos/defano/wyldcard", "Date": "2018-07-21T19:47:24Z"},
{"Line": "216=>216", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.Ben12345rocks.AdvancedCore.Rewards.RewardHandler.giveReward(com.Ben12345rocks.AdvancedCore.Objects.User,org.bukkit.configuration.file.FileConfiguration,java.lang.String,com.Ben12345rocks.AdvancedCore.Rewards.RewardOptions)=>com.Ben12345rocks.AdvancedCore.Rewards.RewardHandler.giveReward(com.Ben12345rocks.AdvancedCore.Objects.User,java.lang.String,java.lang.String,org.bukkit.configuration.file.FileConfiguration,java.lang.String,com.Ben12345rocks.AdvancedCore.Rewards.RewardOptions)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2396/buggy-version/AdvancedCore.src.com.Ben12345rocks.AdvancedCore.Rewards.RewardHandler.java", "BodyUseAPI": [], "Fixed commit": "7b29d7a375587eabd9fec966ace338458dca685d", "Url": "https://api.github.com/repos/SeDark/AdvancedCore", "Date": "2018-08-19T01:16:02Z"},
{"Line": "27=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.airlift.airline.Cli.<java.lang.Runnable>builder(\"swagger-codegen-cli\").withDescription(java.lang.String.format(\"Swagger code generator CLI (version %s). More info on swagger.io\", version)).withDefaultCommand(org.bian.swaggercodegen.cmd.Langs.class).withCommands(java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class)=>io.airlift.airline.Cli.<java.lang.Runnable>builder(\"swagger-codegen-cli\").withDescription(java.lang.String.format(\"Swagger code generator CLI (version %s). More info on swagger.io\", version)).withCommands(java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2453/buggy-version/src.main.java.org.bian.swaggercodegen.BianCodegen.java", "BodyUseAPI": [], "Fixed commit": "84f7cb1081417ccd26726511fdcfcb1d5bbb4167", "Url": "https://api.github.com/repos/suki300me/bian-swagger-codegen", "Date": "2018-07-12T10:21:48Z"},
{"Line": "708=>708", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.bian.swaggercodegen.languages.JavaBianCodegen.put(java.lang.String,java.lang.String)=>op.vendorExtensions.put(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2453/buggy-version/src.main.java.org.bian.swaggercodegen.languages.JavaBianCodegen.java", "BodyUseAPI": [], "Fixed commit": "84f7cb1081417ccd26726511fdcfcb1d5bbb4167", "Url": "https://api.github.com/repos/suki300me/bian-swagger-codegen", "Date": "2018-07-12T10:21:48Z"},
{"Line": "709=>709", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.bian.swaggercodegen.languages.JavaBianCodegen.put(java.lang.String,org.apache.commons.lang3.StringUtils.capitalize(actionTermCamelCase))=>op.vendorExtensions.put(java.lang.String,org.apache.commons.lang3.StringUtils.capitalize(actionTermCamelCase))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2453/buggy-version/src.main.java.org.bian.swaggercodegen.languages.JavaBianCodegen.java", "BodyUseAPI": [], "Fixed commit": "84f7cb1081417ccd26726511fdcfcb1d5bbb4167", "Url": "https://api.github.com/repos/suki300me/bian-swagger-codegen", "Date": "2018-07-12T10:21:48Z"},
{"Line": "710=>710", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.bian.swaggercodegen.languages.JavaBianCodegen.put(java.lang.String,java.util.List<java.lang.String>)=>op.vendorExtensions.put(java.lang.String,java.util.List<java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2453/buggy-version/src.main.java.org.bian.swaggercodegen.languages.JavaBianCodegen.java", "BodyUseAPI": [], "Fixed commit": "84f7cb1081417ccd26726511fdcfcb1d5bbb4167", "Url": "https://api.github.com/repos/suki300me/bian-swagger-codegen", "Date": "2018-07-12T10:21:48Z"},
{"Line": "99=>102", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.support.v4.app.NotificationManagerCompat.notify(long,mBuilder.build())=>com.tagliaro.monclin.urca.utils.Classes.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4830/buggy-version/app.src.main.java.com.tagliaro.monclin.urca.background.NotifyService.java", "BodyUseAPI": [], "Fixed commit": "56706ef6596941078db7a6a55895645e71e7496a", "Url": "https://api.github.com/repos/BstTag/agenda", "Date": "2018-03-28T10:17:06Z"},
{"Line": "87=>90", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.app.PendingIntent.getActivity(getApplicationContext(),int,android.content.Intent,int)=>android.app.PendingIntent.getActivity(getApplicationContext(),int,android.content.Intent,PendingIntent.FLAG_UPDATE_CURRENT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4830/buggy-version/app.src.main.java.com.tagliaro.monclin.urca.background.NotifyService.java", "BodyUseAPI": [], "Fixed commit": "56706ef6596941078db7a6a55895645e71e7496a", "Url": "https://api.github.com/repos/BstTag/agenda", "Date": "2018-03-28T10:17:06Z"},
{"Line": "203=>205", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.modelink.reservation.bean.FlowReserve.setProvinceId((area == null ? 0 : area.getAreaId()))=>com.modelink.reservation.bean.FlowReserve.setProvinceId(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1722/buggy-version/src.main.java.com.modelink.admin.controller.basedata.FlowReserveController.java", "BodyUseAPI": [], "Fixed commit": "e6a54c5aca50f8777aec2d4f96f7fb65f543cff2", "Url": "https://api.github.com/repos/modelink/modelink-api", "Date": "2018-09-13T07:56:57Z"},
{"Line": "204=>206", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.modelink.reservation.bean.FlowReserve.setCityId((area == null ? 0 : area.getAreaId()))=>com.modelink.reservation.bean.FlowReserve.setCityId(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1722/buggy-version/src.main.java.com.modelink.admin.controller.basedata.FlowReserveController.java", "BodyUseAPI": [], "Fixed commit": "e6a54c5aca50f8777aec2d4f96f7fb65f543cff2", "Url": "https://api.github.com/repos/modelink/modelink-api", "Date": "2018-09-13T07:56:57Z"},
{"Line": "54=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javax.servlet.http.HttpServletResponse.sendRedirect(((\"/attendance_main.jspvcv\" + (req.getParameter(\"userID\"))) + (searchedStudent == null)))=>javax.servlet.http.HttpServletResponse.sendRedirect(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5312/buggy-version/final.src.main.java.com.example.guestbook.UnsubscribeStudentServlet.java", "BodyUseAPI": [], "Fixed commit": "52ed49bffd775e54f323ad19af43fc6358062a7f", "Url": "https://api.github.com/repos/ChrisMinga/appengine-java-guestbook-multiphase", "Date": "2018-02-08T20:12:03Z"},
{"Line": "248=>248", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.wso2.ballerinalang.compiler.packaging.Patten.convert(org.wso2.ballerinalang.compiler.packaging.converters.Converter<java.net.URI>)=>org.wso2.ballerinalang.compiler.packaging.Patten.convert(org.wso2.ballerinalang.compiler.packaging.converters.Converter<java.net.URI>,org.ballerinalang.model.elements.PackageID)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5258/buggy-version/cli.ballerina-packerina.src.main.java.org.ballerinalang.packerina.PushUtils.java", "BodyUseAPI": [], "Fixed commit": "f6c14246e7885a6d183143e9fbf8dbe1d7646824", "Url": "https://api.github.com/repos/NatashaWso2/ballerina", "Date": "2018-06-05T04:15:24Z"},
{"Line": "48=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.budgetingapp.domain.Transaction.setDate(java.util.Date)=>com.budgetingapp.domain.Transaction.setDate(java.time.LocalDate)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8168/buggy-version/src.main.java.com.budgetingapp.controller.TransactionController.java", "BodyUseAPI": [], "Fixed commit": "6b51c4b2b777104e9879c54994042c1d7111d51d", "Url": "https://api.github.com/repos/shinigamiEyes/AppForTrackingBudget", "Date": "2018-10-08T13:20:26Z"},
{"Line": "216=>219", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.egov.egf.expensebill.service.ExpenseBillService.update(org.egov.model.bills.EgBillregister,java.lang.Long,java.lang.String,<nulltype>,java.lang.String,java.lang.String)=>org.egov.egf.expensebill.service.ExpenseBillService.update(org.egov.model.bills.EgBillregister,java.lang.Long,java.lang.String,<nulltype>,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5103/buggy-version/egov.egov-egfweb.src.main.java.org.egov.egf.web.controller.expensebill.UpdateExpenseBillController.java", "BodyUseAPI": [], "Fixed commit": "b04a93cde3a959b6be7e8fcf69ff3f5c9ca3ff4a", "Url": "https://api.github.com/repos/egovernments/egov-coexistence", "Date": "2018-09-21T14:35:24Z"},
{"Line": "161=>161", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.egov.egf.utils.FinancialUtils.getApproverDetails(java.lang.String,savedVoucherHeader.getState(),savedVoucherHeader.getId(),java.lang.Long)=>org.egov.egf.utils.FinancialUtils.getApproverDetails(java.lang.String,savedVoucherHeader.getState(),savedVoucherHeader.getId(),java.lang.Long,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5103/buggy-version/egov.egov-egfweb.src.main.java.org.egov.egf.web.controller.voucher.CreateJournalVoucherController.java", "BodyUseAPI": [], "Fixed commit": "b04a93cde3a959b6be7e8fcf69ff3f5c9ca3ff4a", "Url": "https://api.github.com/repos/egovernments/egov-coexistence", "Date": "2018-09-21T14:35:24Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "eg.edu.alexu.csd.filestructure.avl.cs.Node<T>.getLeftChild()=>eg.edu.alexu.csd.filestructure.avl.cs.Node<T>.getRightChild()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7383/buggy-version/src.eg.edu.alexu.csd.filestructure.avl.cs.AVLTree.java", "BodyUseAPI": [], "Fixed commit": "8310ccf4ac415af91a5d299a1a179dfddaf00d06", "Url": "https://api.github.com/repos/abdelhakeem/cs223-lab02", "Date": "2018-03-19T21:10:56Z"},
{"Line": "55=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.net.URL.getPath()=>java.net.URI.getPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2846/buggy-version/agent.src.main.java.com.ep.inst.FilterClassTransformer.java", "BodyUseAPI": [], "Fixed commit": "ea46539c9a927db49ebcbc11dfeb98a791ed45f6", "Url": "https://api.github.com/repos/ganludong112233/eapa", "Date": "2018-06-29T10:47:51Z"},
{"Line": "413=>413", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.kamron.pogoiv.scanlogic.ScanResult.getIVStaminaHigh()=>com.kamron.pogoiv.scanlogic.ScanResult.getIVStaminaLow()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8997/buggy-version/app.src.main.java.com.kamron.pogoiv.scanlogic.PokeInfoCalculator.java", "BodyUseAPI": [], "Fixed commit": "10ee6d3af022aba981397fc3d52dd85538a82073", "Url": "https://api.github.com/repos/Agilo3/GoIV", "Date": "2018-04-23T22:53:11Z"},
{"Line": "80=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "javax.faces.component.UIViewRoot.setViewId(java.lang.String)=>facesContext.getApplication().getViewHandler().createView(javax.faces.context.FacesContext,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1267/buggy-version/action.src.main.java.com.manorrock.oyena.action.DefaultActionMethodExecutor.java", "BodyUseAPI": [], "Fixed commit": "f89e8b88889e563767ea89db5980b842553bd961", "Url": "https://api.github.com/repos/manorrock/oyena", "Date": "2018-03-31T14:41:36Z"},
{"Line": "836=>836", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapelessRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapelessRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "835=>835", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapelessRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapelessRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1221=>1224", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "814=>814", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1228=>1232", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "838=>838", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapelessRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapelessRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1225=>1229", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1247=>1253", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "862=>863", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1160=>1162", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1230=>1234", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1232=>1236", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1240=>1245", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1152=>1153", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "837=>837", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapelessRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapelessRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1223=>1227", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "811=>811", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1243=>1248", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1236=>1240", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "834=>834", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapelessRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapelessRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "859=>859", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1245=>1251", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1210=>1213", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1217=>1220", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "1238=>1243", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipe(net.minecraft.item.ItemStack,java.lang.Object[])=>com.mjr.mjrlegendslib.recipe.RecipeDumper.addShapedRecipeWithCondition(Constants.modID,java.lang.String,java.lang.String,net.minecraft.item.ItemStack,java.lang.Object[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/824/buggy-version/src.main.java.com.mjr.extraplanets.recipes.ExtraPlanets_RecipeGeneration.java", "BodyUseAPI": [], "Fixed commit": "e86ce83fc0bc8c0a3e1e33bedcd49aaf6f288a00", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-03-06T03:07:44Z"},
{"Line": "47=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.modern.theme.ThemeService.getInstance().colors().getColorHighlight(int)=>org.jebtk.modern.theme.ThemeService.getInstance().colors().getTheme(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4752/buggy-version/edu.columbia.rdf.htsview.src.main.java.edu.columbia.rdf.htsview.tracks.TracksFigurePanel.java", "BodyUseAPI": [], "Fixed commit": "406c074acdf325f349b82197cf32ae5c432cd41e", "Url": "https://api.github.com/repos/antonybholmes/htsview", "Date": "2018-05-18T23:30:55Z"},
{"Line": "51=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.modern.theme.ThemeService.getInstance().colors().getHighlight(int)=>org.jebtk.modern.theme.ThemeService.getInstance().colors().getGray(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4752/buggy-version/edu.columbia.rdf.htsview.src.main.java.edu.columbia.rdf.htsview.tracks.TrackNodeRenderer.java", "BodyUseAPI": [], "Fixed commit": "406c074acdf325f349b82197cf32ae5c432cd41e", "Url": "https://api.github.com/repos/antonybholmes/htsview", "Date": "2018-05-18T23:30:55Z"},
{"Line": "55=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.modern.theme.ThemeService.getInstance().colors().getHighlight(int)=>org.jebtk.modern.theme.ThemeService.getInstance().colors().getGray(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4752/buggy-version/edu.columbia.rdf.htsview.src.main.java.edu.columbia.rdf.htsview.tracks.TrackNodeRenderer.java", "BodyUseAPI": [], "Fixed commit": "406c074acdf325f349b82197cf32ae5c432cd41e", "Url": "https://api.github.com/repos/antonybholmes/htsview", "Date": "2018-05-18T23:30:55Z"},
{"Line": "52=>52", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.modern.theme.ThemeService.getInstance().colors().getHighlight(int)=>org.jebtk.modern.theme.ThemeService.getInstance().colors().getGray(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4752/buggy-version/edu.columbia.rdf.htsview.src.main.java.edu.columbia.rdf.htsview.tracks.TrackListRenderer.java", "BodyUseAPI": [], "Fixed commit": "406c074acdf325f349b82197cf32ae5c432cd41e", "Url": "https://api.github.com/repos/antonybholmes/htsview", "Date": "2018-05-18T23:30:55Z"},
{"Line": "56=>56", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.modern.theme.ThemeService.getInstance().colors().getHighlight(int)=>org.jebtk.modern.theme.ThemeService.getInstance().colors().getGray(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4752/buggy-version/edu.columbia.rdf.htsview.src.main.java.edu.columbia.rdf.htsview.tracks.TrackListRenderer.java", "BodyUseAPI": [], "Fixed commit": "406c074acdf325f349b82197cf32ae5c432cd41e", "Url": "https://api.github.com/repos/antonybholmes/htsview", "Date": "2018-05-18T23:30:55Z"},
{"Line": "60=>61", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.os.SystemClock.elapsedRealtime()=>java.lang.System.currentTimeMillis()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3404/buggy-version/app.src.main.java.com.study.application.ui.AutoService.java", "BodyUseAPI": [], "Fixed commit": "890f631058d5f96f23d268f72e35440257b356f3", "Url": "https://api.github.com/repos/rex0722/WireManagement", "Date": "2018-09-12T05:38:19Z"},
{"Line": "60=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.os.SystemClock.elapsedRealtime()=>java.lang.System.currentTimeMillis()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3404/buggy-version/app.src.main.java.com.study.application.ui.AutoService.java", "BodyUseAPI": [], "Fixed commit": "890f631058d5f96f23d268f72e35440257b356f3", "Url": "https://api.github.com/repos/rex0722/WireManagement", "Date": "2018-09-12T05:38:19Z"},
{"Line": "85=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Queue<java.lang.String>.peek()=>java.util.Queue<java.lang.String>.poll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/777/buggy-version/chapter_006.src.main.java.ru.job4j.mt.wn.SimpleBlockingQueue.java", "BodyUseAPI": [], "Fixed commit": "7c78d2db7b9e208319741f003afef86a8cb63418", "Url": "https://api.github.com/repos/alexTheMyst/java_classes", "Date": "2018-02-10T07:31:43Z"},
{"Line": "95=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "pull.domain.EmailLog.getEmailAddress()=>pull.util.Db.coRef(\"topicSignup\").child(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7025/buggy-version/src.main.java.pull.repo.EmailLogRepo.java", "BodyUseAPI": [], "Fixed commit": "dd636561172eb099ddb76f65e9cf3091fd678637", "Url": "https://api.github.com/repos/poly-on-fire/autopm", "Date": "2018-06-06T12:44:28Z"},
{"Line": "95=>95", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "pull.util.Db.coRef(\"topicSignup\").child((((emailLog.getTopicKey()) + \":\") + (emailLog.getEmailAddress()))).setValue(pull.domain.TopicSignup)=>pull.util.Db.coRef(\"emailStart\").child(compoundKey).setValue(pull.domain.EmailStart)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7025/buggy-version/src.main.java.pull.repo.EmailLogRepo.java", "BodyUseAPI": [], "Fixed commit": "dd636561172eb099ddb76f65e9cf3091fd678637", "Url": "https://api.github.com/repos/poly-on-fire/autopm", "Date": "2018-06-06T12:44:28Z"},
{"Line": "69=>69", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.facebook.imagepipeline.core.ImagePipelineFactory.getInstance().getMainDiskStorageCache()=>com.facebook.imagepipeline.core.ImagePipelineFactory.getInstance().getMainFileCache()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8724/buggy-version/android.src.main.java.cn.reactnative.httpcache.HttpCacheModule.java", "BodyUseAPI": [], "Fixed commit": "6bba4e7b86a8fcc1f94a0958865edeb292e1d6da", "Url": "https://api.github.com/repos/lehug/react-native-http-cache", "Date": "2018-08-10T09:28:06Z"},
{"Line": "80=>80", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.facebook.imagepipeline.core.ImagePipelineFactory.getInstance().getSmallImageDiskStorageCache()=>com.facebook.imagepipeline.core.ImagePipelineFactory.getInstance().getSmallImageFileCache()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8724/buggy-version/android.src.main.java.cn.reactnative.httpcache.HttpCacheModule.java", "BodyUseAPI": [], "Fixed commit": "6bba4e7b86a8fcc1f94a0958865edeb292e1d6da", "Url": "https://api.github.com/repos/lehug/react-native-http-cache", "Date": "2018-08-10T09:28:06Z"},
{"Line": "40=>40", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "fr.regate.project.controller.ButtonListener.getBtnSend()=>views.getAp().getBtnSend()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1318/buggy-version/regate-controller.src.main.java.fr.regate.project.controller.ButtonListener.java", "BodyUseAPI": [], "Fixed commit": "fc7792c9a4c3c3f63be2d1b251bfe53a310f21ae", "Url": "https://api.github.com/repos/Scrum-PPE-2SLAM/Regate", "Date": "2018-04-10T09:12:36Z"},
{"Line": "353=>353", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.firstinspires.ftc.teamcode.Runnerbot.setPosition(org.firstinspires.ftc.teamcode.PUSHER_RETRACTED_POSITION)=>com.qualcomm.robotcore.hardware.Servo.setPosition(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1061/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.Runnerbot.java", "BodyUseAPI": [], "Fixed commit": "b97cbbab904a09727879d1e4966b299da5667554", "Url": "https://api.github.com/repos/jrasor/ftc_5197all2017", "Date": "2018-01-26T20:52:37Z"},
{"Line": "228=>229", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.charAt(int)=>java.lang.String.substring(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4376/buggy-version/app.src.main.java.com.example.kzh88.four_numbers_game.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "f9674c5ac2f23dc9adc06b98a6fb755b2a6b8ed5", "Url": "https://api.github.com/repos/Adamkzh/four_numbers_game", "Date": "2018-03-01T08:54:08Z"},
{"Line": "58=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "cs340.client.services.UpdateGameListService.onUpdateGameList(java.util.ArrayList<cs340.shared.model.Game>)=>cs340.client.services.UpdateGameListService.onUpdateGameList(gameList.getGames())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/979/buggy-version/Phase1_client.app.src.main.java.cs340.client.services.ClientFacade.java", "BodyUseAPI": [], "Fixed commit": "e7c269210f8d905659223ef321a6c71d91709c08", "Url": "https://api.github.com/repos/trickoutmyride/dankengine", "Date": "2018-02-13T22:42:48Z"},
{"Line": "57=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.gson.Gson.fromJson(java.lang.String,new com.google.gson.reflect.TypeToken<java.util.List<cs340.shared.model.Game>>() {}.getType())=>com.google.gson.Gson.fromJson(java.lang.String,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/979/buggy-version/Phase1_client.app.src.main.java.cs340.client.services.ClientFacade.java", "BodyUseAPI": [], "Fixed commit": "e7c269210f8d905659223ef321a6c71d91709c08", "Url": "https://api.github.com/repos/trickoutmyride/dankengine", "Date": "2018-02-13T22:42:48Z"},
{"Line": "303=>304", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setText(java.lang.String)=>android.widget.Button.setText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3743/buggy-version/app.src.main.java.ff.ecochallenges.HomeFragment.java", "BodyUseAPI": [], "Fixed commit": "4111818ca83e6480e4487756d37bbb39acea408c", "Url": "https://api.github.com/repos/kirasisi/IEproject", "Date": "2018-09-20T09:57:45Z"},
{"Line": "283=>284", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3743/buggy-version/app.src.main.java.ff.ecochallenges.HomeFragment.java", "BodyUseAPI": [], "Fixed commit": "4111818ca83e6480e4487756d37bbb39acea408c", "Url": "https://api.github.com/repos/kirasisi/IEproject", "Date": "2018-09-20T09:57:45Z"},
{"Line": "181=>182", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setVisibility(View.VISIBLE)=>android.widget.Button.setVisibility(View.VISIBLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3743/buggy-version/app.src.main.java.ff.ecochallenges.HomeFragment.java", "BodyUseAPI": [], "Fixed commit": "4111818ca83e6480e4487756d37bbb39acea408c", "Url": "https://api.github.com/repos/kirasisi/IEproject", "Date": "2018-09-20T09:57:45Z"},
{"Line": "176=>177", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.TextView.setText(java.lang.String)=>android.widget.Button.setText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3743/buggy-version/app.src.main.java.ff.ecochallenges.HomeFragment.java", "BodyUseAPI": [], "Fixed commit": "4111818ca83e6480e4487756d37bbb39acea408c", "Url": "https://api.github.com/repos/kirasisi/IEproject", "Date": "2018-09-20T09:57:45Z"},
{"Line": "33=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "http.authorizeRequests().antMatchers(\"/\", \"/css/**\", \"/img/**\", \"/fonts/**\", \"/js/**\", \"/sass/**\", \"/temp\", \"/assets/**\", \"/product/**\", \"/newuser\").permitAll().antMatchers(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>http.authorizeRequests().antMatchers(\"/\", \"/css/**\", \"/img/**\", \"/fonts/**\", \"/js/**\", \"/sass/**\", \"/temp\", \"/assets/**\", \"/product/**\", \"/newuser\").permitAll().antMatchers(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/101/buggy-version/src.main.java.com.company.samazon.Security.SecurityConfiguration.java", "BodyUseAPI": [], "Fixed commit": "55b796e8b1faaa8be8f6aa694366ae554129ae92", "Url": "https://api.github.com/repos/Samazon18/Samazon", "Date": "2018-02-27T17:18:53Z"},
{"Line": "55=>56", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.Object.equals(java.lang.Object)=>entity.getValue().equals(copy.getValue())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3697/buggy-version/BlueDBOnDisk.src.main.java.io.bluedb.disk.serialization.ThreadLocalFstSerializer.java", "BodyUseAPI": [], "Fixed commit": "b469746d12437fc0f24e0c0589067ccc80754039", "Url": "https://api.github.com/repos/BlueDB/BlueDB", "Date": "2018-10-10T22:00:32Z"},
{"Line": "55=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Object.equals(java.lang.Object)=>io.bluedb.disk.serialization.BlueEntity<?>.getValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3697/buggy-version/BlueDBOnDisk.src.main.java.io.bluedb.disk.serialization.ThreadLocalFstSerializer.java", "BodyUseAPI": [], "Fixed commit": "b469746d12437fc0f24e0c0589067ccc80754039", "Url": "https://api.github.com/repos/BlueDB/BlueDB", "Date": "2018-10-10T22:00:32Z"},
{"Line": "23=>23", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "javafx.scene.text.Font.loadFont(java.lang.String,int)=>javafx.scene.text.Font.getDefault()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9056/buggy-version/src.main.core.model.animations.text.ScrollingText.java", "BodyUseAPI": [], "Fixed commit": "8abc8212135d29d83509431c061287a239d43a4c", "Url": "https://api.github.com/repos/PaulBreugnot/RGBWMatrixController", "Date": "2018-03-22T17:11:40Z"},
{"Line": "138=>141", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javafx.scene.text.Font.loadFont(((\"file:fonts/\" + (EmbeddedFontsComboBox.getSelectionModel().getSelectedItem())) + \".TTF\"),java.lang.Number)=>java.lang.Class<? extends main.gui.views.settings.ScrollingTextSettingsController.9>.getResourceAsStream(((\"/fonts/\" + (EmbeddedFontsComboBox.getSelectionModel().getSelectedItem())) + \".ttf\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9056/buggy-version/src.main.gui.views.settings.ScrollingTextSettingsController.java", "BodyUseAPI": [], "Fixed commit": "8abc8212135d29d83509431c061287a239d43a4c", "Url": "https://api.github.com/repos/PaulBreugnot/RGBWMatrixController", "Date": "2018-03-22T17:11:40Z"},
{"Line": "138=>144", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "main.core.model.animations.text.ScrollingText.setFont(javafx.scene.text.Font.loadFont(((\"file:fonts/\" + (EmbeddedFontsComboBox.getSelectionModel().getSelectedItem())) + \".TTF\"), ((double) (new_val))))=>main.core.model.animations.text.ScrollingText.setFont(javafx.scene.text.Font)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9056/buggy-version/src.main.gui.views.settings.ScrollingTextSettingsController.java", "BodyUseAPI": [], "Fixed commit": "8abc8212135d29d83509431c061287a239d43a4c", "Url": "https://api.github.com/repos/PaulBreugnot/RGBWMatrixController", "Date": "2018-03-22T17:11:40Z"},
{"Line": "48=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.EditText.setHint(java.lang.String)=>android.widget.Toast.makeText(com.geotask.myapplication.FilterActivity,R.string.DECIMAL_INVALID,Toast.LENGTH_SHORT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3965/buggy-version/app.src.main.java.com.geotask.myapplication.FilterActivity.java", "BodyUseAPI": [], "Fixed commit": "47804cfe50b897bbb56501ae3a644384864599c0", "Url": "https://api.github.com/repos/CMPUT301W18T23/GeoTask", "Date": "2018-03-24T13:43:01Z"},
{"Line": "48=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.EditText.setHint(java.lang.String)=>android.widget.Toast.makeText(context, R.string.DECIMAL_INVALID, Toast.LENGTH_SHORT).show()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3965/buggy-version/app.src.main.java.com.geotask.myapplication.FilterActivity.java", "BodyUseAPI": [], "Fixed commit": "47804cfe50b897bbb56501ae3a644384864599c0", "Url": "https://api.github.com/repos/CMPUT301W18T23/GeoTask", "Date": "2018-03-24T13:43:01Z"},
{"Line": "117=>116", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "((classes.KilometerRate) (event.getObject())).getRoad()=>((classes.Road) (event.getObject())).getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1343/buggy-version/rekeningadministratiemodule.src.main.java.bean.RateBean.java", "BodyUseAPI": [], "Fixed commit": "c06890df505850e256a987e91f671e4f89fec947", "Url": "https://api.github.com/repos/Lehcim1995/Rekeningrijden", "Date": "2018-04-25T11:32:29Z"},
{"Line": "111=>110", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "((classes.KilometerRate) (event.getObject())).getRoad().getName()=>classes.Road.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1343/buggy-version/rekeningadministratiemodule.src.main.java.bean.RateBean.java", "BodyUseAPI": [], "Fixed commit": "c06890df505850e256a987e91f671e4f89fec947", "Url": "https://api.github.com/repos/Lehcim1995/Rekeningrijden", "Date": "2018-04-25T11:32:29Z"},
{"Line": "219=>220", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "io.vertx.core.json.JsonObject.getString(java.lang.String,java.lang.String)=>fr.wseduc.webutils.Utils.getOrElse(group.getString(\"groupDisplayName\"),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7990/buggy-version/common.src.main.java.org.entcore.common.user.UserUtils.java", "BodyUseAPI": [], "Fixed commit": "b96b30fee256dcc07860ffb1be9fdaa17610e64a", "Url": "https://api.github.com/repos/entcore/entcore", "Date": "2018-03-12T12:45:18Z"},
{"Line": "13=>13", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "User.instance.getFavorites()=>User.instance.getFavoriteTracks()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9055/buggy-version/app.src.main.java.ch.epfl.sweng.runpharaa.FragmentFavourites.java", "BodyUseAPI": [], "Fixed commit": "e5b9ee7aa2004075402f4f9dffd6580faf5af750", "Url": "https://api.github.com/repos/somecookie/runPHARAA", "Date": "2018-10-23T11:39:21Z"},
{"Line": "224=>224", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.cdkj.coin.bo.ITokenAddressBO.addressCount(transferEventResponse.to,tokenContract.getSymbol())=>com.cdkj.coin.bo.IEthAddressBO.addressCount(transferEventResponse.to)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3978/buggy-version/src.main.java.com.cdkj.coin.ao.impl.EthTxAOImpl.java", "BodyUseAPI": [], "Fixed commit": "8e1372fb4ce2e86ab2201217610d96c357b2a060", "Url": "https://api.github.com/repos/ibisTime/bc-token-ctq", "Date": "2018-10-24T17:18:56Z"},
{"Line": "947=>951", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.sharex.token.api.service.UserCurrencyCost.getCost()=>com.sharex.token.api.service.UserCurrencyCost.getType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6257/buggy-version/token-api.src.main.java.com.sharex.token.api.service.CurrencyService.java", "BodyUseAPI": [], "Fixed commit": "bccf59132649aece1acb606af2ca2ee976c38e60", "Url": "https://api.github.com/repos/tangqun/51token", "Date": "2018-08-09T10:55:51Z"},
{"Line": "546=>546", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.replaceAll(java.lang.String,java.lang.String)=>java.lang.String.replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1762/buggy-version/src.main.java.com.kicksolutions.swagger.plantuml.PlantUMLCodegen.java", "BodyUseAPI": [], "Fixed commit": "10d6e290e3c4b73d55762317e22621ce64bb5007", "Url": "https://api.github.com/repos/apigovau/graph", "Date": "2018-06-07T02:14:17Z"},
{"Line": "546=>546", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.replaceAll(java.lang.String,java.lang.String)=>java.lang.String.replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1762/buggy-version/src.main.java.com.kicksolutions.swagger.plantuml.PlantUMLCodegen.java", "BodyUseAPI": [], "Fixed commit": "10d6e290e3c4b73d55762317e22621ce64bb5007", "Url": "https://api.github.com/repos/apigovau/graph", "Date": "2018-06-07T02:14:17Z"},
{"Line": "546=>546", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.replaceAll(java.lang.String,java.lang.String)=>java.lang.String.replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1762/buggy-version/src.main.java.com.kicksolutions.swagger.plantuml.PlantUMLCodegen.java", "BodyUseAPI": [], "Fixed commit": "10d6e290e3c4b73d55762317e22621ce64bb5007", "Url": "https://api.github.com/repos/apigovau/graph", "Date": "2018-06-07T02:14:17Z"},
{"Line": "307=>313", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.InputStream.reset()=>java.io.InputStream.close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6628/buggy-version/app.src.main.java.com.google.firebase.samples.apps.friendlypix.NewPostUploadTaskFragment.java", "BodyUseAPI": [], "Fixed commit": "501e4e12d92fddc2e95f1b1b1c05470ef5dd8037", "Url": "https://api.github.com/repos/firebase/friendlypix-android", "Date": "2018-02-12T17:04:08Z"},
{"Line": "45=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Arraylist<java.lang.Character>.length()=>java.util.ArrayList<java.lang.Character>.length()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8586/buggy-version/src.main.java.edu.gatech.oad.antlab.person.Person2.java", "BodyUseAPI": [], "Fixed commit": "5f2b536f65f55c52f46cb47f0bcbcac33cdd25e4", "Url": "https://api.github.com/repos/TeamCho/M2", "Date": "2018-01-30T01:46:11Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Arraylist<java.lang.Character>.add(char)=>java.util.ArrayList<java.lang.Character>.add(char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8586/buggy-version/src.main.java.edu.gatech.oad.antlab.person.Person2.java", "BodyUseAPI": [], "Fixed commit": "5f2b536f65f55c52f46cb47f0bcbcac33cdd25e4", "Url": "https://api.github.com/repos/TeamCho/M2", "Date": "2018-01-30T01:46:11Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.media.AudioManager.setRingerMode(AudioManager.RINGER_MODE_SILENT)=>android.media.AudioManager.getStreamVolume(AudioManager.STREAM_RING)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/873/buggy-version/app.src.main.java.com.example.musfiq.servicedemo.MyService.java", "BodyUseAPI": [], "Fixed commit": "41a4c56a7b6bb81c78dca3900eed2a6556984c2e", "Url": "https://api.github.com/repos/smrahman0009/ServiceDemo", "Date": "2018-08-07T06:08:32Z"},
{"Line": "17=>18", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "racquet.getUpperLeftPoint().getX()=>racquet.getUpperLeftPoint().getY()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6329/buggy-version/client.src.views.RacquetView.java", "BodyUseAPI": [], "Fixed commit": "164654400d5028b9b388d9776e6daa5ebf48bd01", "Url": "https://api.github.com/repos/pa-lem/projet_mathet", "Date": "2018-02-01T15:44:34Z"},
{"Line": "226=>238", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.engining.pcx.cc.process.service.account.NewInterestService.calcInterest(org.joda.time.LocalDate,batchDate.plusDays(1),cactSubAcct.getEndDayBal(),com.google.common.collect.ImmutableList.of(interestTable),newComputeService.getReceivableScale(),InterestCycleRestMethod.NA)=>net.engining.pcx.cc.process.service.account.NewInterestService.calcInterest(org.joda.time.LocalDate,batchDate.plusDays(1),java.math.BigDecimal,com.google.common.collect.ImmutableList.of(interestTable),newComputeService.getReceivableScale(),InterestCycleRestMethod.NA)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/912/buggy-version/cc-batch-component.src.main.java.net.engining.pcx.cc.batch.cc1800.Cc1800P22InterestReceivable.java", "BodyUseAPI": [], "Fixed commit": "2797ac53a1f36679a1f61abf6a779bfc13207fab", "Url": "https://api.github.com/repos/crazythinking/cac", "Date": "2018-10-11T03:07:47Z"},
{"Line": "37=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "codeOwnership.PairRepository.getPairByArtifactName(java.lang.String)=>codeOwnership.PairRepository.getPairsByArtifactName(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1353/buggy-version/src.main.java.subject.Subject.java", "BodyUseAPI": [], "Fixed commit": "9310d290d6a42c5b8671960a48bc9d8267423b87", "Url": "https://api.github.com/repos/JRobsonJr/CodeOwnership", "Date": "2018-07-20T01:09:13Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "codeOwnership.PairRepository.removePair(artifact.Artifact)=>codeOwnership.PairRepository.removePairs(artifact.Artifact)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1353/buggy-version/src.main.java.analysis.AbstractAnalysis.java", "BodyUseAPI": [], "Fixed commit": "9310d290d6a42c5b8671960a48bc9d8267423b87", "Url": "https://api.github.com/repos/JRobsonJr/CodeOwnership", "Date": "2018-07-20T01:09:13Z"},
{"Line": "25=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "pairs.get(i).getArtifact().equals(artifact.Artifact)=>pairs.get(i).getArtifact().getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1353/buggy-version/src.main.java.codeOwnership.PairRepository.java", "BodyUseAPI": [], "Fixed commit": "9310d290d6a42c5b8671960a48bc9d8267423b87", "Url": "https://api.github.com/repos/JRobsonJr/CodeOwnership", "Date": "2018-07-20T01:09:13Z"},
{"Line": "95=>100", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.toString()=>java.lang.StringBuilder.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "45=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getB_flat())=>java.lang.StringBuilder.append(mappings.getB_flat())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "88=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(java.lang.String)=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "57=>62", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getG_sharp())=>java.lang.StringBuilder.append(mappings.getG_sharp())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(java.lang.String)=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "51=>56", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getB())=>java.lang.StringBuilder.append(mappings.getB())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "48=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getB_flat())=>java.lang.StringBuilder.append(mappings.getB_flat())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "87=>92", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(java.lang.String)=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.contains(java.lang.String)=>java.lang.String.endsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "35=>36", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(((mappings.getOctave_down()) + \"+\"))=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "66=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getF())=>java.lang.StringBuilder.append(mappings.getF())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "72=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getE_flat())=>java.lang.StringBuilder.append(mappings.getE_flat())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "32=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(((mappings.getOctave_up()) + \"+\"))=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "40=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(java.lang.String)=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "54=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getA())=>java.lang.StringBuilder.append(mappings.getA())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "78=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getD())=>java.lang.StringBuilder.append(mappings.getD())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "60=>65", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getG())=>java.lang.StringBuilder.append(mappings.getG())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "84=>89", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getC())=>java.lang.StringBuilder.append(mappings.getC())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "63=>68", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getF_sharp())=>java.lang.StringBuilder.append(mappings.getF_sharp())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "89=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(java.lang.String)=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "92=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(java.lang.String)=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "69=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getE_flat())=>java.lang.StringBuilder.append(mappings.getE_flat())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "40=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(java.lang.String)=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "75=>80", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getE())=>java.lang.StringBuilder.append(mappings.getE())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "81=>86", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.StringBuffer.append(mappings.getC_sharp())=>java.lang.StringBuilder.append(mappings.getC_sharp())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "33=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.contains(java.lang.String)=>java.lang.String.endsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.FormData.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "32=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.dc.bale.database.MusicKeyMappingRepository.findByName(body.getMapping())=>com.dc.bale.database.MusicKeyMappingRepository.findByName(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2778/buggy-version/src.main.java.com.dc.bale.controller.MusicConversionController.java", "BodyUseAPI": [], "Fixed commit": "8dc811f80b6d48cc10db232cc58ccb7fbfccc802", "Url": "https://api.github.com/repos/DannyCorbett89/bale", "Date": "2018-02-04T13:59:14Z"},
{"Line": "119=>122", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.app.AlarmManager.setRepeating(AlarmManager.RTC_WAKEUP,java.lang.Long,java.lang.Integer,android.app.PendingIntent)=>android.app.AlarmManager.setRepeating(AlarmManager.RTC_WAKEUP,java.lang.Long,long,android.app.PendingIntent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1834/buggy-version/android.src.main.java.com.github.wumke.RNLocalNotifications.RNLocalNotificationsModule.java", "BodyUseAPI": [], "Fixed commit": "1608d4ba8ce4d14739bf23d04e6991017fa07e59", "Url": "https://api.github.com/repos/mfclarke/react-native-local-notifications", "Date": "2018-10-06T03:40:33Z"},
{"Line": "303=>303", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Tree23.Node2.getLeft()=>Tree23.Node2.getRight()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1621/buggy-version/src.Tree23.java", "BodyUseAPI": [], "Fixed commit": "8ff560ff9f3fc471a14dd025aae2d6d026991c29", "Url": "https://api.github.com/repos/NoReasonException/Tree2_3", "Date": "2018-07-07T00:59:56Z"},
{"Line": "69=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "props.getProperty(\"URL\").replace(\"%LOGIN%\", props.getProperty(\"LOGIN\")).replace(java.lang.String,props.getProperty(\"PASS\"))=>url.append(props.getProperty(\"URL\")).append(\"&login=\").append(props.getProperty(\"LOGIN\")).append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9212/buggy-version/src.main.java.org.magic.api.shopping.impl.PriceMinisterShopper.java", "BodyUseAPI": [], "Fixed commit": "4960bbfae6f58ed6a587adb800bfe427164b468a", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-01-28T12:41:12Z"},
{"Line": "69=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "props.getProperty(\"URL\").replace(java.lang.String,props.getProperty(\"LOGIN\"))=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9212/buggy-version/src.main.java.org.magic.api.shopping.impl.PriceMinisterShopper.java", "BodyUseAPI": [], "Fixed commit": "4960bbfae6f58ed6a587adb800bfe427164b468a", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-01-28T12:41:12Z"},
{"Line": "69=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "props.getProperty(\"URL\").replace(\"%LOGIN%\", props.getProperty(\"LOGIN\")).replace(\"%PASSWORD%\", props.getProperty(\"PASS\")).replace(\"%VERSION%\", props.getProperty(\"VERSION\")).replace(\"%SCOPE%\", props.getProperty(\"SCOPE\")).replace(java.lang.String,props.getProperty(\"NB_PRODUCT_PAGE\"))=>url.append(props.getProperty(\"URL\")).append(\"&login=\").append(props.getProperty(\"LOGIN\")).append(\"&pwd=\").append(props.getProperty(\"PASS\")).append(\"&version=\").append(props.getProperty(\"VERSION\")).append(\"&scope=\").append(props.getProperty(\"SCOPE\")).append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9212/buggy-version/src.main.java.org.magic.api.shopping.impl.PriceMinisterShopper.java", "BodyUseAPI": [], "Fixed commit": "4960bbfae6f58ed6a587adb800bfe427164b468a", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-01-28T12:41:12Z"},
{"Line": "69=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "props.getProperty(\"URL\").replace(\"%LOGIN%\", props.getProperty(\"LOGIN\")).replace(java.lang.String,props.getProperty(\"PASS\"))=>url.append(props.getProperty(\"URL\")).append(\"&login=\").append(props.getProperty(\"LOGIN\")).append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9212/buggy-version/src.main.java.org.magic.api.shopping.impl.PriceMinisterShopper.java", "BodyUseAPI": [], "Fixed commit": "4960bbfae6f58ed6a587adb800bfe427164b468a", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-01-28T12:41:12Z"},
{"Line": "69=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "props.getProperty(\"URL\").replace(\"%LOGIN%\", props.getProperty(\"LOGIN\")).replace(\"%PASSWORD%\", props.getProperty(\"PASS\")).replace(\"%VERSION%\", props.getProperty(\"VERSION\")).replace(java.lang.String,props.getProperty(\"SCOPE\"))=>url.append(props.getProperty(\"URL\")).append(\"&login=\").append(props.getProperty(\"LOGIN\")).append(\"&pwd=\").append(props.getProperty(\"PASS\")).append(\"&version=\").append(props.getProperty(\"VERSION\")).append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9212/buggy-version/src.main.java.org.magic.api.shopping.impl.PriceMinisterShopper.java", "BodyUseAPI": [], "Fixed commit": "4960bbfae6f58ed6a587adb800bfe427164b468a", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-01-28T12:41:12Z"},
{"Line": "69=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "props.getProperty(\"URL\").replace(\"%LOGIN%\", props.getProperty(\"LOGIN\")).replace(\"%PASSWORD%\", props.getProperty(\"PASS\")).replace(\"%VERSION%\", props.getProperty(\"VERSION\")).replace(\"%SCOPE%\", props.getProperty(\"SCOPE\")).replace(\"%NB_PRODUCT_PAGE%\", props.getProperty(\"NB_PRODUCT_PAGE\")).replace(java.lang.String,props.getProperty(\"CATEGORIE\"))=>url.append(props.getProperty(\"URL\")).append(\"&login=\").append(props.getProperty(\"LOGIN\")).append(\"&pwd=\").append(props.getProperty(\"PASS\")).append(\"&version=\").append(props.getProperty(\"VERSION\")).append(\"&scope=\").append(props.getProperty(\"SCOPE\")).append(\"&nbproductsperpage=\").append(props.getProperty(\"NB_PRODUCT_PAGE\")).append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9212/buggy-version/src.main.java.org.magic.api.shopping.impl.PriceMinisterShopper.java", "BodyUseAPI": [], "Fixed commit": "4960bbfae6f58ed6a587adb800bfe427164b468a", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-01-28T12:41:12Z"},
{"Line": "69=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "props.getProperty(\"URL\").replace(\"%LOGIN%\", props.getProperty(\"LOGIN\")).replace(\"%PASSWORD%\", props.getProperty(\"PASS\")).replace(\"%VERSION%\", props.getProperty(\"VERSION\")).replace(\"%SCOPE%\", props.getProperty(\"SCOPE\")).replace(\"%NB_PRODUCT_PAGE%\", props.getProperty(\"NB_PRODUCT_PAGE\")).replace(\"%CATEGORIE%\", props.getProperty(\"CATEGORIE\")).replace(java.lang.String,java.lang.String)=>url.append(props.getProperty(\"URL\")).append(\"&login=\").append(props.getProperty(\"LOGIN\")).append(\"&pwd=\").append(props.getProperty(\"PASS\")).append(\"&version=\").append(props.getProperty(\"VERSION\")).append(\"&scope=\").append(props.getProperty(\"SCOPE\")).append(\"&nbproductsperpage=\").append(props.getProperty(\"NB_PRODUCT_PAGE\")).append(\"&kw=\").append(java.net.URLEncoder.encode(search, props.getProperty(\"ENCODING\"))).append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9212/buggy-version/src.main.java.org.magic.api.shopping.impl.PriceMinisterShopper.java", "BodyUseAPI": [], "Fixed commit": "4960bbfae6f58ed6a587adb800bfe427164b468a", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-01-28T12:41:12Z"},
{"Line": "69=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "props.getProperty(\"URL\").replace(\"%LOGIN%\", props.getProperty(\"LOGIN\")).replace(\"%PASSWORD%\", props.getProperty(\"PASS\")).replace(java.lang.String,props.getProperty(\"VERSION\"))=>url.append(props.getProperty(\"URL\")).append(\"&login=\").append(props.getProperty(\"LOGIN\")).append(\"&pwd=\").append(props.getProperty(\"PASS\")).append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9212/buggy-version/src.main.java.org.magic.api.shopping.impl.PriceMinisterShopper.java", "BodyUseAPI": [], "Fixed commit": "4960bbfae6f58ed6a587adb800bfe427164b468a", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-01-28T12:41:12Z"},
{"Line": "69=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "props.getProperty(\"URL\").replace(\"%LOGIN%\", props.getProperty(\"LOGIN\")).replace(\"%PASSWORD%\", props.getProperty(\"PASS\")).replace(\"%VERSION%\", props.getProperty(\"VERSION\")).replace(java.lang.String,props.getProperty(\"SCOPE\"))=>url.append(props.getProperty(\"URL\")).append(\"&login=\").append(props.getProperty(\"LOGIN\")).append(\"&pwd=\").append(props.getProperty(\"PASS\")).append(\"&version=\").append(props.getProperty(\"VERSION\")).append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9212/buggy-version/src.main.java.org.magic.api.shopping.impl.PriceMinisterShopper.java", "BodyUseAPI": [], "Fixed commit": "4960bbfae6f58ed6a587adb800bfe427164b468a", "Url": "https://api.github.com/repos/nicho92/MtgDesktopCompanion", "Date": "2018-01-28T12:41:12Z"},
{"Line": "18=>19", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.innoq.blockchain0815.Miner(int,java.util.function.Predicate<com.innoq.blockchain0815.BlockHasher>)=>java.lang.Math.max(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6994/buggy-version/src.main.java.com.innoq.blockchain0815.Miner.java", "BodyUseAPI": [], "Fixed commit": "b9cea8bc659de4e751c73b7da3f8b4d7f82325c0", "Url": "https://api.github.com/repos/innoq/innoq-blockchain-java-0815", "Date": "2018-04-24T17:56:58Z"},
{"Line": "95=>103", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.bukkit.scheduler.BukkitRunnable.runTaskLater(net.countercraft.movecraft.Movecraft.getInstance(),int)=>org.bukkit.scheduler.BukkitRunnable.runTaskLater(net.countercraft.movecraft.Movecraft.getInstance(),int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/618/buggy-version/modules.Movecraft.src.main.java.net.countercraft.movecraft.sign.SubcraftRotateSign.java", "BodyUseAPI": [], "Fixed commit": "f7bb11a21bd5835b26314fa0333016f2ea93bee8", "Url": "https://api.github.com/repos/APDevTeam/Movecraft", "Date": "2018-01-05T23:19:42Z"},
{"Line": "88=>96", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.bukkit.scheduler.BukkitRunnable.runTaskLater(net.countercraft.movecraft.Movecraft.getInstance(),int)=>org.bukkit.scheduler.BukkitRunnable.runTaskLater(net.countercraft.movecraft.Movecraft.getInstance(),int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/618/buggy-version/modules.Movecraft.src.main.java.net.countercraft.movecraft.sign.SubcraftRotateSign.java", "BodyUseAPI": [], "Fixed commit": "f7bb11a21bd5835b26314fa0333016f2ea93bee8", "Url": "https://api.github.com/repos/APDevTeam/Movecraft", "Date": "2018-01-05T23:19:42Z"},
{"Line": "25=>25", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.time.LocalDate.ofEpochDay(b.getOrgBook().getCheckoutLength())=>java.time.LocalDate.plusDays(b.getOrgBook().getCheckoutLength())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8996/buggy-version/src.business.CheckOutEntry.java", "BodyUseAPI": [], "Fixed commit": "9f9e7e4838177834dfee7e1c26a6ee54b3631fab", "Url": "https://api.github.com/repos/LuuHoa/MPP_Project", "Date": "2018-09-13T02:55:03Z"},
{"Line": "206=>213", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.Storage.saveUserPrefs(seedu.address.model.UserPrefs)=>seedu.address.storage.Storage.saveUserPrefs(seedu.address.model.UserPrefs)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5425/buggy-version/src.main.java.seedu.address.MainApp.java", "BodyUseAPI": [], "Fixed commit": "8ec982a5e3a1b15fb6fb96c1f6c61ece44c380bc", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-24T09:33:47Z"},
{"Line": "170=>177", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.UserPrefsStorage.readUserPrefs()=>seedu.address.storage.UserPrefsStorage.readUserPrefs()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5425/buggy-version/src.main.java.seedu.address.MainApp.java", "BodyUseAPI": [], "Fixed commit": "8ec982a5e3a1b15fb6fb96c1f6c61ece44c380bc", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-24T09:33:47Z"},
{"Line": "183=>190", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.UserPrefsStorage.saveUserPrefs(seedu.address.model.UserPrefs)=>seedu.address.storage.UserPrefsStorage.saveUserPrefs(seedu.address.model.UserPrefs)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5425/buggy-version/src.main.java.seedu.address.MainApp.java", "BodyUseAPI": [], "Fixed commit": "8ec982a5e3a1b15fb6fb96c1f6c61ece44c380bc", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-24T09:33:47Z"},
{"Line": "90=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.Storage.readUserDatabase()=>seedu.address.storage.Storage.readUserDatabase()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5425/buggy-version/src.main.java.seedu.address.MainApp.java", "BodyUseAPI": [], "Fixed commit": "8ec982a5e3a1b15fb6fb96c1f6c61ece44c380bc", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-24T09:33:47Z"},
{"Line": "63=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.MainApp.initPrefs(seedu.address.UserPrefsStorage)=>seedu.address.MainApp.initPrefs(seedu.address.storage.UserPrefsStorage)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5425/buggy-version/src.main.java.seedu.address.MainApp.java", "BodyUseAPI": [], "Fixed commit": "8ec982a5e3a1b15fb6fb96c1f6c61ece44c380bc", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-24T09:33:47Z"},
{"Line": "70=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.MainApp.initModelManager(seedu.address.Storage,seedu.address.model.UserPrefs)=>seedu.address.MainApp.initModelManager(seedu.address.storage.Storage,seedu.address.model.UserPrefs)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5425/buggy-version/src.main.java.seedu.address.MainApp.java", "BodyUseAPI": [], "Fixed commit": "8ec982a5e3a1b15fb6fb96c1f6c61ece44c380bc", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-24T09:33:47Z"},
{"Line": "165=>172", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.UserPrefsStorage.getUserPrefsFilePath()=>seedu.address.storage.UserPrefsStorage.getUserPrefsFilePath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5425/buggy-version/src.main.java.seedu.address.MainApp.java", "BodyUseAPI": [], "Fixed commit": "8ec982a5e3a1b15fb6fb96c1f6c61ece44c380bc", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-24T09:33:47Z"},
{"Line": "103=>110", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "seedu.address.Storage.readAddressBook()=>seedu.address.storage.Storage.readAddressBook()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5425/buggy-version/src.main.java.seedu.address.MainApp.java", "BodyUseAPI": [], "Fixed commit": "8ec982a5e3a1b15fb6fb96c1f6c61ece44c380bc", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-3/main", "Date": "2018-10-24T09:33:47Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.error(java.lang.String,java.lang.String)=>org.slf4j.Logger.error(java.lang.String,java.lang.String,java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8462/buggy-version/service.src.main.java.tds.support.tool.messaging.JobStepExecutionMessageListener.java", "BodyUseAPI": [], "Fixed commit": "0972502dac031a67ae5caee164a1b34b99a0f8d3", "Url": "https://api.github.com/repos/SmarterApp/TDS_SupportTool", "Date": "2018-04-23T23:36:23Z"},
{"Line": "96=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.academiadecodigo.simplegraphics.keyboard.Keyboard.addEventListener(org.academiadecodigo.simplegraphics.keyboard.KeyboardEvent)=>org.academiadecodigo.simplegraphics.keyboard.Keyboard.removeEventListener(org.academiadecodigo.simplegraphics.keyboard.KeyboardEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4659/buggy-version/src.org.academiadecodigo.bootcamp.Controllers.SGFXKeyboard.java", "BodyUseAPI": [], "Fixed commit": "a06e10fc78707d0ae56bd989f363da0421365b11", "Url": "https://api.github.com/repos/nunomiguelramalho/sardine-thrower", "Date": "2018-06-09T13:35:18Z"},
{"Line": "97=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.academiadecodigo.simplegraphics.keyboard.Keyboard.addEventListener(org.academiadecodigo.simplegraphics.keyboard.KeyboardEvent)=>org.academiadecodigo.simplegraphics.keyboard.Keyboard.removeEventListener(org.academiadecodigo.simplegraphics.keyboard.KeyboardEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4659/buggy-version/src.org.academiadecodigo.bootcamp.Controllers.SGFXKeyboard.java", "BodyUseAPI": [], "Fixed commit": "a06e10fc78707d0ae56bd989f363da0421365b11", "Url": "https://api.github.com/repos/nunomiguelramalho/sardine-thrower", "Date": "2018-06-09T13:35:18Z"},
{"Line": "98=>98", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.academiadecodigo.simplegraphics.keyboard.Keyboard.addEventListener(org.academiadecodigo.simplegraphics.keyboard.KeyboardEvent)=>org.academiadecodigo.simplegraphics.keyboard.Keyboard.removeEventListener(org.academiadecodigo.simplegraphics.keyboard.KeyboardEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4659/buggy-version/src.org.academiadecodigo.bootcamp.Controllers.SGFXKeyboard.java", "BodyUseAPI": [], "Fixed commit": "a06e10fc78707d0ae56bd989f363da0421365b11", "Url": "https://api.github.com/repos/nunomiguelramalho/sardine-thrower", "Date": "2018-06-09T13:35:18Z"},
{"Line": "234=>235", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Object.longValue()=>dk.kb.elivagar.utils.LongUtils.getLong(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/741/buggy-version/src.main.java.dk.kb.elivagar.config.Configuration.java", "BodyUseAPI": [], "Fixed commit": "7e0b7f9fe3cedb810e6535ed7fcb61ec344bc1ac", "Url": "https://api.github.com/repos/Det-Kongelige-Bibliotek/elivagar", "Date": "2018-08-20T11:41:39Z"},
{"Line": "233=>234", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Object.longValue()=>dk.kb.elivagar.utils.LongUtils.getLong(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/741/buggy-version/src.main.java.dk.kb.elivagar.config.Configuration.java", "BodyUseAPI": [], "Fixed commit": "7e0b7f9fe3cedb810e6535ed7fcb61ec344bc1ac", "Url": "https://api.github.com/repos/Det-Kongelige-Bibliotek/elivagar", "Date": "2018-08-20T11:41:39Z"},
{"Line": "232=>233", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Object.longValue()=>dk.kb.elivagar.utils.LongUtils.getLong(java.lang.Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/741/buggy-version/src.main.java.dk.kb.elivagar.config.Configuration.java", "BodyUseAPI": [], "Fixed commit": "7e0b7f9fe3cedb810e6535ed7fcb61ec344bc1ac", "Url": "https://api.github.com/repos/Det-Kongelige-Bibliotek/elivagar", "Date": "2018-08-20T11:41:39Z"},
{"Line": "18=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "uk.ac.cam.mcksj.WeatherState.getStarRating()=>uk.ac.cam.mcksj.WeatherState.getTemperature()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7817/buggy-version/uk.ac.cam.mcksj.back.Backend.java", "BodyUseAPI": [], "Fixed commit": "bf2c53e395ef039328cbc9322c893f3b30681010", "Url": "https://api.github.com/repos/Group-009/GlidR", "Date": "2018-05-21T19:49:18Z"},
{"Line": "19=>20", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "uk.ac.cam.mcksj.back.OpenWeatherMapAPI.printCSVWeatherCache(uk.ac.cam.mcksj.WeatherState[][])=>uk.ac.cam.mcksj.back.Backend.changeLocation(double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7817/buggy-version/uk.ac.cam.mcksj.back.Backend.java", "BodyUseAPI": [], "Fixed commit": "bf2c53e395ef039328cbc9322c893f3b30681010", "Url": "https://api.github.com/repos/Group-009/GlidR", "Date": "2018-05-21T19:49:18Z"},
{"Line": "33=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.modern.theme.ThemeService.getInstance().colors().getColorHighlight(int)=>org.jebtk.modern.theme.ThemeService.getInstance().colors().getTheme(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8621/buggy-version/org.jebtk.graphplot.src.main.java.org.jebtk.graphplot.icons.PeakStyleIcon.java", "BodyUseAPI": [], "Fixed commit": "9ceb09d7be0dc1e0ec794b80f27b2cd5fa56ecee", "Url": "https://api.github.com/repos/antonybholmes/jebtk-graphplot", "Date": "2018-05-18T23:31:20Z"},
{"Line": "118=>118", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.core.Properties.getAsBool(java.lang.String)=>org.jebtk.core.Properties.getBool(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8621/buggy-version/org.jebtk.graphplot.src.main.java.org.jebtk.graphplot.figure.heatmap.legacy.clustering.ColumnHTreeTopPlotElement.java", "BodyUseAPI": [], "Fixed commit": "9ceb09d7be0dc1e0ec794b80f27b2cd5fa56ecee", "Url": "https://api.github.com/repos/antonybholmes/jebtk-graphplot", "Date": "2018-05-18T23:31:20Z"},
{"Line": "117=>117", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.core.Properties.getAsColor(java.lang.String)=>org.jebtk.core.Properties.getColor(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8621/buggy-version/org.jebtk.graphplot.src.main.java.org.jebtk.graphplot.figure.heatmap.legacy.clustering.ColumnHTreeTopPlotElement.java", "BodyUseAPI": [], "Fixed commit": "9ceb09d7be0dc1e0ec794b80f27b2cd5fa56ecee", "Url": "https://api.github.com/repos/antonybholmes/jebtk-graphplot", "Date": "2018-05-18T23:31:20Z"},
{"Line": "86=>86", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jebtk.core.Properties.getAsBool(java.lang.String)=>org.jebtk.core.Properties.getBool(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8621/buggy-version/org.jebtk.graphplot.src.main.java.org.jebtk.graphplot.figure.heatmap.legacy.TopColumnLabelPlotElement.java", "BodyUseAPI": [], "Fixed commit": "9ceb09d7be0dc1e0ec794b80f27b2cd5fa56ecee", "Url": "https://api.github.com/repos/antonybholmes/jebtk-graphplot", "Date": "2018-05-18T23:31:20Z"},
{"Line": "36=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "pro200.smile.model.SmileList.addSmile(pro200.smile.model.Smile)=>pro200.smile.model.SmileList.addSmile(pro200.smile.model.PhotoSmile)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3963/buggy-version/Smile.app.src.main.java.pro200.smile.service.StaticSmileService.java", "BodyUseAPI": [], "Fixed commit": "3d5cfaecf50ffa350ec4037067dbeeb51ca27f91", "Url": "https://api.github.com/repos/Squomp/Smile-", "Date": "2018-05-30T19:56:09Z"},
{"Line": "25=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "pro200.smile.model.SmileList.addSmile(pro200.smile.model.Smile)=>pro200.smile.model.SmileList.addSmile(pro200.smile.model.PhotoSmile)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3963/buggy-version/Smile.app.src.main.java.pro200.smile.service.StaticSmileService.java", "BodyUseAPI": [], "Fixed commit": "3d5cfaecf50ffa350ec4037067dbeeb51ca27f91", "Url": "https://api.github.com/repos/Squomp/Smile-", "Date": "2018-05-30T19:56:09Z"},
{"Line": "26=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "pro200.smile.model.SmileList.addSmile(pro200.smile.model.Smile)=>pro200.smile.model.SmileList.addSmile(pro200.smile.model.PhotoSmile)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3963/buggy-version/Smile.app.src.main.java.pro200.smile.service.StaticSmileService.java", "BodyUseAPI": [], "Fixed commit": "3d5cfaecf50ffa350ec4037067dbeeb51ca27f91", "Url": "https://api.github.com/repos/Squomp/Smile-", "Date": "2018-05-30T19:56:09Z"},
{"Line": "35=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "pro200.smile.model.SmileList.addSmile(pro200.smile.model.Smile)=>pro200.smile.model.SmileList.addSmile(pro200.smile.model.PhotoSmile)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3963/buggy-version/Smile.app.src.main.java.pro200.smile.service.StaticSmileService.java", "BodyUseAPI": [], "Fixed commit": "3d5cfaecf50ffa350ec4037067dbeeb51ca27f91", "Url": "https://api.github.com/repos/Squomp/Smile-", "Date": "2018-05-30T19:56:09Z"},
{"Line": "27=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "pro200.smile.model.SmileList.addSmile(pro200.smile.model.Smile)=>pro200.smile.model.SmileList.addSmile(pro200.smile.model.PhotoSmile)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3963/buggy-version/Smile.app.src.main.java.pro200.smile.service.StaticSmileService.java", "BodyUseAPI": [], "Fixed commit": "3d5cfaecf50ffa350ec4037067dbeeb51ca27f91", "Url": "https://api.github.com/repos/Squomp/Smile-", "Date": "2018-05-30T19:56:09Z"},
{"Line": "34=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "pro200.smile.model.SmileList.addSmile(pro200.smile.model.Smile)=>pro200.smile.model.SmileList.addSmile(pro200.smile.model.PhotoSmile)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3963/buggy-version/Smile.app.src.main.java.pro200.smile.service.StaticSmileService.java", "BodyUseAPI": [], "Fixed commit": "3d5cfaecf50ffa350ec4037067dbeeb51ca27f91", "Url": "https://api.github.com/repos/Squomp/Smile-", "Date": "2018-05-30T19:56:09Z"},
{"Line": "188=>188", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.gigaspaces.internal.cluster.node.impl.packets.IReplicationOrderedPacket>.add(com.gigaspaces.internal.cluster.node.impl.backlog.globalorder.GlobalOrderDiscardedReplicationPacket)=>java.util.LinkedList<com.gigaspaces.internal.cluster.node.impl.packets.IReplicationOrderedPacket>.add(com.gigaspaces.internal.cluster.node.impl.backlog.globalorder.GlobalOrderDiscardedReplicationPacket)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6284/buggy-version/xap-core.xap-datagrid.src.main.java.com.gigaspaces.internal.cluster.node.impl.packets.BatchReplicatedDataPacket.java", "BodyUseAPI": [], "Fixed commit": "05600481bbc84f158e911e862b1eb43a6923286f", "Url": "https://api.github.com/repos/xap/xap", "Date": "2018-09-02T08:48:43Z"},
{"Line": "180=>178", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.gigaspaces.internal.cluster.node.impl.packets.IReplicationOrderedPacket>.add(com.gigaspaces.internal.cluster.node.impl.backlog.globalorder.GlobalOrderDiscardedReplicationPacket)=>java.util.LinkedList<com.gigaspaces.internal.cluster.node.impl.packets.IReplicationOrderedPacket>.add(com.gigaspaces.internal.cluster.node.impl.backlog.globalorder.GlobalOrderDiscardedReplicationPacket)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6284/buggy-version/xap-core.xap-datagrid.src.main.java.com.gigaspaces.internal.cluster.node.impl.packets.BatchReplicatedDataPacket.java", "BodyUseAPI": [], "Fixed commit": "05600481bbc84f158e911e862b1eb43a6923286f", "Url": "https://api.github.com/repos/xap/xap", "Date": "2018-09-02T08:48:43Z"},
{"Line": "182=>180", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.gigaspaces.internal.cluster.node.impl.packets.IReplicationOrderedPacket>.add(com.gigaspaces.internal.cluster.node.impl.packets.IReplicationOrderedPacket)=>java.util.LinkedList<com.gigaspaces.internal.cluster.node.impl.packets.IReplicationOrderedPacket>.add(com.gigaspaces.internal.cluster.node.impl.packets.IReplicationOrderedPacket)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6284/buggy-version/xap-core.xap-datagrid.src.main.java.com.gigaspaces.internal.cluster.node.impl.packets.BatchReplicatedDataPacket.java", "BodyUseAPI": [], "Fixed commit": "05600481bbc84f158e911e862b1eb43a6923286f", "Url": "https://api.github.com/repos/xap/xap", "Date": "2018-09-02T08:48:43Z"},
{"Line": "28=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Object.hasTown()=>com.danielrharris.townywars.listeners.Resident.hasTown()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3149/buggy-version/src.main.java.com.danielrharris.townywars.listeners.EnemyWalkWWar.java", "BodyUseAPI": [], "Fixed commit": "d0e638b17726fcc46d1891066ce25f401a602e57", "Url": "https://api.github.com/repos/MikeStavrs/TownyWarsMCC", "Date": "2018-03-14T20:55:17Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "kantwonskids.donationtrackerg14b.controller.ItemDetailActivity.findViewById(R.id.itemTitle)=>kantwonskids.donationtrackerg14b.controller.ItemDetailActivity.findViewById(R.id.item_title)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6767/buggy-version/app.src.main.java.kantwonskids.donationtrackerg14b.controller.ItemDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "9da9182ad9a998039a9c6fe55d58b0e19d406a0c", "Url": "https://api.github.com/repos/KantwonsKids/DonationTracker", "Date": "2018-10-26T01:05:21Z"},
{"Line": "148=>148", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(java.lang.String)=>java.lang.Double.parseDouble(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8283/buggy-version/src.backend.WeatherData.java", "BodyUseAPI": [], "Fixed commit": "c40db98fb8f71068aaf800e88ad0b55d667d9d37", "Url": "https://api.github.com/repos/mukul-rathi/CollegeGardenerWeatherApp", "Date": "2018-05-17T15:27:04Z"},
{"Line": "19=>19", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Math.min(leftOperand.getMembershipFunctionValues()[i],rightOperand.getMembershipFunctionValues()[i])=>java.lang.Math.max(leftOperand.getMembershipFunctionValues()[i],rightOperand.getMembershipFunctionValues()[i])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8787/buggy-version/src.main.java.ua.kpi.cad.linguisticvar.domain.operator.OrOperator.java", "BodyUseAPI": [], "Fixed commit": "66d495a15738d4bb4b70a84adc900a1771863716", "Url": "https://api.github.com/repos/buhaiovos/linguistic_variable_lab", "Date": "2018-03-12T21:15:55Z"},
{"Line": "19=>19", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Math.max(leftOperand.getMembershipFunctionValues()[i],rightOperand.getMembershipFunctionValues()[i])=>java.lang.Math.min(leftOperand.getMembershipFunctionValues()[i],rightOperand.getMembershipFunctionValues()[i])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8787/buggy-version/src.main.java.ua.kpi.cad.linguisticvar.domain.operator.AndOperator.java", "BodyUseAPI": [], "Fixed commit": "66d495a15738d4bb4b70a84adc900a1771863716", "Url": "https://api.github.com/repos/buhaiovos/linguistic_variable_lab", "Date": "2018-03-12T21:15:55Z"},
{"Line": "42=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Query.getTimeInQuery(Query,int)=>Statistics.getTimeInQuery(Query,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8454/buggy-version/src.Statistics.java", "BodyUseAPI": [], "Fixed commit": "01fe6992db1809d734f2b60f850868741b23b25d", "Url": "https://api.github.com/repos/Potatata/SimulationDBMS", "Date": "2018-06-06T01:42:46Z"},
{"Line": "30=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.web.client.RestTemplate.exchange(java.lang.String,HttpMethod.POST,<nulltype>,java.lang.Class)=>ucles.weblab.common.xc.service.RestCrossContextResolver.convertValue(java.net.URI,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1670/buggy-version/weblab-cross-context.src.main.java.ucles.weblab.common.xc.service.RestCrossContextResolver.java", "BodyUseAPI": [], "Fixed commit": "24ba116cbb15c65656d4f0d4423bc0a2aea6b6d0", "Url": "https://api.github.com/repos/cambridgeweblab/api-schema", "Date": "2016-06-07T01:35:05Z"},
{"Line": "906=>906", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "alluxio.master.file.meta.InodeTree.getPath(alluxio.master.file.meta.Inode<?>)=>alluxio.master.file.meta.Inode<?>.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2592/buggy-version/core.server.master.src.main.java.alluxio.master.file.meta.InodeTree.java", "BodyUseAPI": [], "Fixed commit": "26b44e3e6de52447c3a969141300a55540cd2567", "Url": "https://api.github.com/repos/yuzhu/alluxio", "Date": "2018-06-01T23:06:42Z"},
{"Line": "98=>98", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.persistence.criteria.CriteriaQuery<com.airline.models.Passenger>.select(javax.persistence.criteria.Root<com.airline.models.Passenger>)=>javax.persistence.criteria.CriteriaQuery<com.airline.models.Flight>.select(javax.persistence.criteria.Root<com.airline.models.Flight>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/404/buggy-version/AirlineWeb.src.com.airline.service.FlightService.java", "BodyUseAPI": [], "Fixed commit": "78932801c76fb1292f441013928c7b45df8e947f", "Url": "https://api.github.com/repos/hafrankVT/AirlineWeb", "Date": "2018-04-19T13:53:52Z"},
{"Line": "60=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.columbia.rdf.matcalc.MainMatCalc.main(edu.columbia.rdf.matcalc.toolbox.pathway.app.PathwayInfo,edu.columbia.rdf.matcalc.BasicModuleLoader)=>edu.columbia.rdf.matcalc.MainMatCalc.main(edu.columbia.rdf.matcalc.toolbox.pathway.app.PathwayInfo,edu.columbia.rdf.matcalc.ModuleLoader)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8304/buggy-version/edu.columbia.rdf.matcalc.toolbox.pathway.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.pathway.app.MainPathway.java", "BodyUseAPI": [], "Fixed commit": "d2593b53717268473200c1431aa9dd9189671665", "Url": "https://api.github.com/repos/antonybholmes/matcalc-pathway", "Date": "2018-05-11T23:05:22Z"},
{"Line": "85=>85", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.wso2.carbon.apimgt.impl.utils.APIMWSDLReader.getWSDLDefinitionFromByteContent(byte[])=>org.wso2.carbon.apimgt.impl.utils.APIMWSDLReader.getWSDLDefinitionFromByteContent(byte[],boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2620/buggy-version/components.apimgt.org.wso2.carbon.apimgt.impl.src.main.java.org.wso2.carbon.apimgt.impl.soaptorest.WSDL11SOAPOperationExtractor.java", "BodyUseAPI": [], "Fixed commit": "e38f3c483fa88432a8a2af159732fda50ef33f6a", "Url": "https://api.github.com/repos/malinthaprasan/carbon-apimgt", "Date": "2018-06-15T13:00:53Z"},
{"Line": "4065=>4065", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.wso2.carbon.apimgt.impl.utils.APIMWSDLReader.getWSDLDefinitionFromByteContent(byte[])=>org.wso2.carbon.apimgt.impl.utils.APIMWSDLReader.getWSDLDefinitionFromByteContent(byte[],boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2620/buggy-version/components.apimgt.org.wso2.carbon.apimgt.impl.src.main.java.org.wso2.carbon.apimgt.impl.APIConsumerImpl.java", "BodyUseAPI": [], "Fixed commit": "e38f3c483fa88432a8a2af159732fda50ef33f6a", "Url": "https://api.github.com/repos/malinthaprasan/carbon-apimgt", "Date": "2018-06-15T13:00:53Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "dataGenerator.DataGenerator.generateData()=>src.dataGenerator.DataGenerator.generateData()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3353/buggy-version/p1_CIIC4020.src.src.p1MainClasses.FilesGeneratorMain.java", "BodyUseAPI": [], "Fixed commit": "f573b15c90d13bf0031187649a8cf8b77c733848", "Url": "https://api.github.com/repos/JaviFigueroaRUM05/p1_4035_4020", "Date": "2018-03-04T15:55:14Z"},
{"Line": "60=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "console.ConsoleUtils.clearConsole()=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9735/buggy-version/src.main.java.console.GameBuilder.java", "BodyUseAPI": [], "Fixed commit": "79d094ee3c895587749c4fe5d3e31d487bb12ea7", "Url": "https://api.github.com/repos/Manzanit0/My8thTictactoe", "Date": "2018-02-09T19:20:58Z"},
{"Line": "1129=>1129", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "it.cnr.istc.core.Parser.match(it.cnr.istc.core.BAR)=>it.cnr.istc.core.Parser.match(it.cnr.istc.core.AMP)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7157/buggy-version/src.core.classes.it.cnr.istc.core.Parser.java", "BodyUseAPI": [], "Fixed commit": "3b9670f7de0bb8616f63b3fc69ab154f79f5a7d8", "Url": "https://api.github.com/repos/riccardodebenedictis/Betelgeuse", "Date": "2018-01-16T10:50:22Z"},
{"Line": "29=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "reminder_notification.ReminderService.startActivity(android.content.Intent)=>reminder_notification.ReminderService.startActivity(android.content.Intent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4478/buggy-version/app.src.main.java.reminder_notification.ReminderService.java", "BodyUseAPI": [], "Fixed commit": "02e4a3aec433f2566804292a025d42daef846eb0", "Url": "https://api.github.com/repos/varunam/LearnKannada_KannadaKali", "Date": "2018-04-23T11:07:54Z"},
{"Line": "106=>105", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.EditText.getText()=>com.example.fabiandrees.list.ExpandableListDataPump.addData(java.lang.String,com.example.fabiandrees.model.Flashcard)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2845/buggy-version/app.src.main.java.com.example.fabiandrees.screens.NewCard.java", "BodyUseAPI": [], "Fixed commit": "f7e9c5a57d7c0d0d59ea50296e673179ee648b57", "Url": "https://api.github.com/repos/TheGreyDust/Flashcards", "Date": "2018-07-09T20:58:36Z"},
{"Line": "86=>87", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "em.createQuery(query, com.skilldistillery.book2book.entities.Copy.class).getResultList()=>em.createQuery(query, com.skilldistillery.book2book.entities.Copy.class).setParameter(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/720/buggy-version/Book2Book.src.main.java.com.skilldistillery.book2book.data.CopyDAOImpl.java", "BodyUseAPI": [], "Fixed commit": "10013259b597361e7dffcda86f9766187a735b42", "Url": "https://api.github.com/repos/ajtpxn/MidtermGroupProject", "Date": "2018-10-29T21:12:24Z"},
{"Line": "139=>139", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<util.excel.ExWorkBook.StyleBorder, org.apache.poi.ss.usermodel.CellStyle>.get(util.excel.ExWorkBook.StyleCell)=>java.util.Map<util.excel.ExWorkBook.StyleCell, org.apache.poi.ss.usermodel.CellStyle>.get(util.excel.ExWorkBook.StyleCell)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4716/buggy-version/src.util.excel.ExWorkBook.java", "BodyUseAPI": [], "Fixed commit": "03a42983cd813e173a00ba8a3a668dfdd656e571", "Url": "https://api.github.com/repos/TisSTP/Java-Export-File-Excel", "Date": "2018-02-05T17:40:09Z"},
{"Line": "205=>205", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.valueOf(event.getFilestore())=>event.getFilestore().getFileStoreId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5216/buggy-version/egov.egov-eventnotification.src.main.java.org.egov.eventnotification.service.EventService.java", "BodyUseAPI": [], "Fixed commit": "119ea9b358ba344e5d1140c75fb3b5b6eb21aa92", "Url": "https://api.github.com/repos/egovernments/egov-smartcity-suite", "Date": "2018-07-25T10:18:44Z"},
{"Line": "29=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.jaquadro.minecraft.storagedrawers.api.storage.IDrawer.setStoredItemCount(int)=>com.jaquadro.minecraft.storagedrawers.api.storage.IDrawer.adjustStoredItemCount(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/242/buggy-version/src.com.jaquadro.minecraft.storagedrawers.inventory.DrawerInventoryHelper.java", "BodyUseAPI": [], "Fixed commit": "d653163c3a7f2d409c0c07888f65539e31160503", "Url": "https://api.github.com/repos/koh-gh/StorageDrawers", "Date": "2018-06-26T02:52:30Z"},
{"Line": "24=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.minecraft.item.ItemStack.setCount(drawer.getStoredItemCount())=>net.minecraft.item.ItemStack.setCount(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/242/buggy-version/src.com.jaquadro.minecraft.storagedrawers.inventory.DrawerInventoryHelper.java", "BodyUseAPI": [], "Fixed commit": "d653163c3a7f2d409c0c07888f65539e31160503", "Url": "https://api.github.com/repos/koh-gh/StorageDrawers", "Date": "2018-06-26T02:52:30Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "me.piggypiglet.gary.core.util.MessageUtil.startsWith(java.lang.String)=>me.piggypiglet.gary.core.util.MessageUtil.startsWith(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4206/buggy-version/src.main.java.me.piggypiglet.gary.core.util.RequestUtil.java", "BodyUseAPI": [], "Fixed commit": "5532f9cd65ec73a4f2199e9fbae3869bb5a714ef", "Url": "https://api.github.com/repos/help-chat/Gary", "Date": "2018-02-04T03:46:55Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.startsWith(java.lang.String)=>me.piggypiglet.gary.core.util.MessageUtil.startsWith(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4206/buggy-version/src.main.java.me.piggypiglet.gary.core.util.RequestUtil.java", "BodyUseAPI": [], "Fixed commit": "5532f9cd65ec73a4f2199e9fbae3869bb5a714ef", "Url": "https://api.github.com/repos/help-chat/Gary", "Date": "2018-02-04T03:46:55Z"},
{"Line": "142=>142", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "datawave.ingest.json.mr.input.JsonRecordReader.isParseHeaderOnly()=>datawave.ingest.json.config.helper.JsonDataTypeHelper.processExtraFields()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4843/buggy-version/warehouse.ingest-json.src.main.java.datawave.ingest.json.mr.input.JsonRecordReader.java", "BodyUseAPI": [], "Fixed commit": "b58a86d40a29fc4fef4d2b5d72f93e70f8dafef3", "Url": "https://api.github.com/repos/apmoriarty/datawave", "Date": "2018-09-04T22:06:59Z"},
{"Line": "75=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "datawave.ingest.json.config.helper.JsonDataTypeHelper.processExtraFields()=>datawave.ingest.json.config.helper.JsonDataTypeHelper.processExtraFields()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4843/buggy-version/warehouse.ingest-json.src.main.java.datawave.ingest.json.config.helper.JsonDataTypeHelper.java", "BodyUseAPI": [], "Fixed commit": "b58a86d40a29fc4fef4d2b5d72f93e70f8dafef3", "Url": "https://api.github.com/repos/apmoriarty/datawave", "Date": "2018-09-04T22:06:59Z"},
{"Line": "42=>42", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "userJoinEvent.getGuild().getDefaultChannel()=>Variables.guildIndex.get(userJoinEvent.getGuild())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7083/buggy-version/src.caris.framework.handlers.UserJoinHandler.java", "BodyUseAPI": [], "Fixed commit": "8f89422afb06ababd4255e1ac5b1c2c6f509ae18", "Url": "https://api.github.com/repos/InfinityPhase/CARIS", "Date": "2018-10-14T00:32:00Z"},
{"Line": "40=>40", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "userJoinEvent.getGuild().getDefaultChannel()=>Variables.guildIndex.get(userJoinEvent.getGuild())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7083/buggy-version/src.caris.framework.handlers.UserJoinHandler.java", "BodyUseAPI": [], "Fixed commit": "8f89422afb06ababd4255e1ac5b1c2c6f509ae18", "Url": "https://api.github.com/repos/InfinityPhase/CARIS", "Date": "2018-10-14T00:32:00Z"},
{"Line": "142=>142", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "this.world().playSound(entity.posX,entity.posY,entity.posZ,SoundEvents.ENTITY_ENDERMEN_TELEPORT,SoundCategory.BLOCKS,float,float,boolean)=>this.world().playSound(<nulltype>,entity.posX,entity.posY,entity.posZ,SoundEvents.ENTITY_ENDERMEN_TELEPORT,SoundCategory.BLOCKS,float,float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9631/buggy-version/src.main.java.icbm.classic.content.explosive.blast.BlastEnderman.java", "BodyUseAPI": [], "Fixed commit": "6564400d0906604ec27dca14b939a3f3b3ce1bb4", "Url": "https://api.github.com/repos/BuiltBrokenModding/ICBM-Classic", "Date": "2018-06-28T01:28:17Z"},
{"Line": "162=>162", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "this.world().playSound(this.position.x(),this.position.y(),this.position.z(),SoundEvents.BLOCK_PORTAL_AMBIENT,SoundCategory.BLOCKS,float,(((world().rand.nextFloat()) * 0.4F) + 0.8F),boolean)=>this.world().playSound(<nulltype>,this.position.x(),this.position.y(),this.position.z(),SoundEvents.BLOCK_PORTAL_AMBIENT,SoundCategory.BLOCKS,float,(((world().rand.nextFloat()) * 0.4F) + 0.8F))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9631/buggy-version/src.main.java.icbm.classic.content.explosive.blast.BlastEnderman.java", "BodyUseAPI": [], "Fixed commit": "6564400d0906604ec27dca14b939a3f3b3ce1bb4", "Url": "https://api.github.com/repos/BuiltBrokenModding/ICBM-Classic", "Date": "2018-06-28T01:28:17Z"},
{"Line": "54=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.minecraft.world.World.playSound(entityLiving.posX,entityLiving.posY,entityLiving.posZ,SoundEvents.ENTITY_TNT_PRIMED,SoundCategory.BLOCKS,float,(0.4F / (((itemRand.nextFloat()) * 0.4F) + 0.8F)),boolean)=>net.minecraft.world.World.playSound(<nulltype>,entityLiving.posX,entityLiving.posY,entityLiving.posZ,SoundEvents.ENTITY_TNT_PRIMED,SoundCategory.BLOCKS,float,(0.4F / (((itemRand.nextFloat()) * 0.4F) + 0.8F)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9631/buggy-version/src.main.java.icbm.classic.content.items.ItemGrenade.java", "BodyUseAPI": [], "Fixed commit": "6564400d0906604ec27dca14b939a3f3b3ce1bb4", "Url": "https://api.github.com/repos/BuiltBrokenModding/ICBM-Classic", "Date": "2018-06-28T01:28:17Z"},
{"Line": "82=>82", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "this.world().playSound(this.position.x(),this.position.y(),this.position.z(),SoundEvents.ENTITY_GENERIC_EXPLODE,SoundCategory.BLOCKS,float,((1.0F + (((this.world().rand.nextFloat()) - (this.world().rand.nextFloat())) * 0.2F)) * 0.7F),boolean)=>this.world().playSound(<nulltype>,this.position.x(),this.position.y(),this.position.z(),SoundEvents.ENTITY_GENERIC_EXPLODE,SoundCategory.BLOCKS,float,((1.0F + (((this.world().rand.nextFloat()) - (this.world().rand.nextFloat())) * 0.2F)) * 0.7F))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9631/buggy-version/src.main.java.icbm.classic.content.explosive.blast.BlastTNT.java", "BodyUseAPI": [], "Fixed commit": "6564400d0906604ec27dca14b939a3f3b3ce1bb4", "Url": "https://api.github.com/repos/BuiltBrokenModding/ICBM-Classic", "Date": "2018-06-28T01:28:17Z"},
{"Line": "116=>116", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "this.world().playSound(position.x(),position.y(),position.z(),SoundEvents.ENTITY_GENERIC_EXPLODE,SoundCategory.BLOCKS,float,((1.0F + (((world().rand.nextFloat()) - (world().rand.nextFloat())) * 0.2F)) * 0.7F),boolean)=>this.world().playSound(<nulltype>,position.x(),position.y(),position.z(),SoundEvents.ENTITY_GENERIC_EXPLODE,SoundCategory.BLOCKS,float,((1.0F + (((world().rand.nextFloat()) - (world().rand.nextFloat())) * 0.2F)) * 0.7F))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9631/buggy-version/src.main.java.icbm.classic.content.explosive.blast.BlastBreech.java", "BodyUseAPI": [], "Fixed commit": "6564400d0906604ec27dca14b939a3f3b3ce1bb4", "Url": "https://api.github.com/repos/BuiltBrokenModding/ICBM-Classic", "Date": "2018-06-28T01:28:17Z"},
{"Line": "121=>121", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.minecraft.world.World.playSound(entity.posX,entity.posY,entity.posZ,SoundEvents.ENTITY_TNT_PRIMED,SoundCategory.BLOCKS,float,float,boolean)=>net.minecraft.world.World.playSound(<nulltype>,entity.posX,entity.posY,entity.posZ,SoundEvents.ENTITY_TNT_PRIMED,SoundCategory.BLOCKS,float,float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9631/buggy-version/src.main.java.icbm.classic.content.explosive.Explosive.java", "BodyUseAPI": [], "Fixed commit": "6564400d0906604ec27dca14b939a3f3b3ce1bb4", "Url": "https://api.github.com/repos/BuiltBrokenModding/ICBM-Classic", "Date": "2018-06-28T01:28:17Z"},
{"Line": "28=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "tfm.mvp.pm.Views.MenuFrame.setVisible(boolean)=>tfm.mvp.pm.views.MenuFrame.setVisible(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3456/buggy-version/src.main.java.tfm.mvp.pm.App.java", "BodyUseAPI": [], "Fixed commit": "f415edb6ec140373ad213e673f98c2413fef294e", "Url": "https://api.github.com/repos/borja94/TFM-MVP-PM", "Date": "2018-05-26T11:49:10Z"},
{"Line": "18=>20", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.demo.HibernateUtil.shutdown()=>org.hibernate.Session.save(com.example.model.Emp)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4992/buggy-version/src.main.java.com.example.demo.MainController.java", "BodyUseAPI": [], "Fixed commit": "cb4d3f69d373650e0b875aa4f89873df61a123e8", "Url": "https://api.github.com/repos/srinivas7/hibernateworking", "Date": "2018-04-24T13:39:02Z"},
{"Line": "71=>71", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Controllers.DBController.saveEditedUser(Controllers.Student)=>Controllers.DBController.removeUniversityFromStudent(Controllers.Student,Controllers.University)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5558/buggy-version/Controllers.StudentUniversitiesController.java", "BodyUseAPI": [], "Fixed commit": "ea2fde009a8c391c5d6c6f502ed3cb9fc61262e0", "Url": "https://api.github.com/repos/jtholen001/CMC", "Date": "2018-03-19T22:11:33Z"},
{"Line": "76=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.avos.avoscloud.AVObject.getList(java.lang.String)=>com.avos.avoscloud.AVObject.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1336/buggy-version/app.src.main.java.com.example.administrator.wclass.classFuture.JoinClassActivity.java", "BodyUseAPI": [], "Fixed commit": "0cf43e1b818a2ab206a9638f42aa57cd82615d29", "Url": "https://api.github.com/repos/DreamYHD/WClass", "Date": "2018-06-05T13:54:34Z"},
{"Line": "73=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.mjr.mjrlegendslib.util.NetworkUtilities.getPlayerFromNetHandler(net.minecraft.network.INetHandler)=>GalacticraftCore.proxy.getPlayerFromNetHandler(net.minecraft.network.INetHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2054/buggy-version/src.main.java.com.mjr.extraplanets.network.ExtraPlanetsPacketHandler.java", "BodyUseAPI": [], "Fixed commit": "f164d6aa42e1d0931bbf1039132971ab674834c8", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-02-23T16:36:36Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.mjr.mjrlegendslib.util.NetworkUtilities.getPlayerFromNetHandler(net.minecraft.network.INetHandler)=>GalacticraftCore.proxy.getPlayerFromNetHandler(net.minecraft.network.INetHandler)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2054/buggy-version/src.main.java.com.mjr.extraplanets.network.ExtraPlanetsPacketHandler.java", "BodyUseAPI": [], "Fixed commit": "f164d6aa42e1d0931bbf1039132971ab674834c8", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-02-23T16:36:36Z"},
{"Line": "773=>773", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.JTextArea.setText(java.lang.String)=>javax.swing.JTextField.setText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1339/buggy-version/src.main.java.edu.tamu.di.SAFCreator.ImporterGUI.java", "BodyUseAPI": [], "Fixed commit": "fb58ca6cb7ae05977bffe4b983c3c73e21c171c9", "Url": "https://api.github.com/repos/TAMULib/SAFCreator", "Date": "2018-02-01T14:20:21Z"},
{"Line": "1512=>1512", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.modern.graphics.ModernCanvasMouseWheelListeners.fireCanvasMouseWheelMoved(org.jebtk.modern.graphics.CanvasMouseWheelEvent)=>org.jebtk.modern.graphics.CanvasMouseWheelListeners.fireCanvasMouseWheelMoved(org.jebtk.modern.graphics.CanvasMouseWheelEvent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1529/buggy-version/org.jebtk.modern.src.main.java.org.jebtk.modern.graphics.ModernCanvas.java", "BodyUseAPI": [], "Fixed commit": "d609fab73d0149612bb22703b6057e9416029033", "Url": "https://api.github.com/repos/antonybholmes/jebtk-modern", "Date": "2018-02-01T00:54:17Z"},
{"Line": "1502=>1502", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.modern.graphics.ModernCanvasMouseWheelListeners.addCanvasMouseWheelListener(org.jebtk.modern.graphics.CanvasMouseWheelListener)=>org.jebtk.modern.graphics.CanvasMouseWheelListeners.addCanvasMouseWheelListener(org.jebtk.modern.graphics.CanvasMouseWheelListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1529/buggy-version/org.jebtk.modern.src.main.java.org.jebtk.modern.graphics.ModernCanvas.java", "BodyUseAPI": [], "Fixed commit": "d609fab73d0149612bb22703b6057e9416029033", "Url": "https://api.github.com/repos/antonybholmes/jebtk-modern", "Date": "2018-02-01T00:54:17Z"},
{"Line": "1507=>1507", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.modern.graphics.ModernCanvasMouseWheelListeners.removeCanvasMouseWheelListener(org.jebtk.modern.graphics.CanvasMouseWheelListener)=>org.jebtk.modern.graphics.CanvasMouseWheelListeners.removeCanvasMouseWheelListener(org.jebtk.modern.graphics.CanvasMouseWheelListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1529/buggy-version/org.jebtk.modern.src.main.java.org.jebtk.modern.graphics.ModernCanvas.java", "BodyUseAPI": [], "Fixed commit": "d609fab73d0149612bb22703b6057e9416029033", "Url": "https://api.github.com/repos/antonybholmes/jebtk-modern", "Date": "2018-02-01T00:54:17Z"},
{"Line": "6=>6", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new lab1zaddom.SparseDataFrame(df, 0)=>new lab1zaddom.SparseDataFrame(df, \"0\")", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9258/buggy-version/src.lab1zaddom.Main.java", "BodyUseAPI": [], "Fixed commit": "2781ce9633a62e899286884ff3ef2d57dfd31733", "Url": "https://api.github.com/repos/AleksandraKasznia/programowanieobiektowe", "Date": "2018-10-18T21:43:18Z"},
{"Line": "88=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.View.findViewById(R.id.searchTaskLowBid)=>android.view.View.findViewById(R.id.searchTaskStatus)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7137/buggy-version/app.src.main.java.ca.ualbert.cs.tasko.TaskListAdapter.java", "BodyUseAPI": [], "Fixed commit": "be327b913af675e68a19cce4b4c8eaa787830ba1", "Url": "https://api.github.com/repos/CMPUT301W18T14/PraiseTheSun", "Date": "2018-03-17T00:28:20Z"},
{"Line": "119=>118", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "pt.lsts.neptus.soi.CMEMSLayers.Wind()=>pt.lsts.neptus.soi.WmsLayerFactory.Wind()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7798/buggy-version/plugins-dev.soi.pt.lsts.neptus.soi.WmsLayer.java", "BodyUseAPI": [], "Fixed commit": "7e18d6f0fe81a4b5e66360a06d347369df039c2f", "Url": "https://api.github.com/repos/LSTS/neptus", "Date": "2018-05-17T17:52:06Z"},
{"Line": "85=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.mozilla.javascript.edu.emory.mathcs.backport.java.util.Arrays.asList(interaction.getProperties())=>java.util.Arrays.asList(interaction.getProperties())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7798/buggy-version/plugins-dev.soi.pt.lsts.neptus.soi.SoiAwarenessPanel.java", "BodyUseAPI": [], "Fixed commit": "7e18d6f0fe81a4b5e66360a06d347369df039c2f", "Url": "https://api.github.com/repos/LSTS/neptus", "Date": "2018-05-17T17:52:06Z"},
{"Line": "86=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.mozilla.javascript.edu.emory.mathcs.backport.java.util.Arrays.asList(super.getProperties())=>java.util.Arrays.asList(super.getProperties())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7798/buggy-version/plugins-dev.soi.pt.lsts.neptus.soi.SoiAwarenessPanel.java", "BodyUseAPI": [], "Fixed commit": "7e18d6f0fe81a4b5e66360a06d347369df039c2f", "Url": "https://api.github.com/repos/LSTS/neptus", "Date": "2018-05-17T17:52:06Z"},
{"Line": "85=>85", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "myRef.child(userId).setValue(java.lang.String)=>myRef.child(userId).child(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3104/buggy-version/app.src.main.java.com.example.minalshettigar.splashscreen.Profile_edit_options.java", "BodyUseAPI": [], "Fixed commit": "88beb9720279a7220e67b26ab949d6d5f6a31d07", "Url": "https://api.github.com/repos/Minal2179/SplitSmart", "Date": "2018-06-10T19:30:41Z"},
{"Line": "86=>86", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "myRef.child(userId).setValue(java.lang.String)=>myRef.child(userId).child(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3104/buggy-version/app.src.main.java.com.example.minalshettigar.splashscreen.Profile_edit_options.java", "BodyUseAPI": [], "Fixed commit": "88beb9720279a7220e67b26ab949d6d5f6a31d07", "Url": "https://api.github.com/repos/Minal2179/SplitSmart", "Date": "2018-06-10T19:30:41Z"},
{"Line": "84=>84", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "myRef.child(userId).setValue(java.lang.String)=>myRef.child(userId).child(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3104/buggy-version/app.src.main.java.com.example.minalshettigar.splashscreen.Profile_edit_options.java", "BodyUseAPI": [], "Fixed commit": "88beb9720279a7220e67b26ab949d6d5f6a31d07", "Url": "https://api.github.com/repos/Minal2179/SplitSmart", "Date": "2018-06-10T19:30:41Z"},
{"Line": "29=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.io.PrintStream.printf(java.lang.String,double)=>java.io.PrintStream.printf(java.lang.String,int,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/795/buggy-version/SixPoint7.java", "BodyUseAPI": [], "Fixed commit": "9193b7c2d672ceeb0113fd8be0aa330b8c4f4837", "Url": "https://api.github.com/repos/KrisHarrison/JavaPrograms", "Date": "2018-09-20T00:47:56Z"},
{"Line": "334=>334", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.evenless.tersicore.DataBackend.findAllOffline(java.util.List<com.evenless.tersicore.model.Track>)=>com.evenless.tersicore.DataBackend.findAllOffline(java.util.List<com.evenless.tersicore.model.Track>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2151/buggy-version/app.src.main.java.com.evenless.tersicore.DataBackend.java", "BodyUseAPI": [], "Fixed commit": "8e591edd2459fb989df34fd9a345be3dfccf34a7", "Url": "https://api.github.com/repos/NoMore201/tersicore-client", "Date": "2018-01-24T17:30:37Z"},
{"Line": "347=>347", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.evenless.tersicore.DataBackend.findAllOffline(java.util.List<com.evenless.tersicore.model.Track>)=>com.evenless.tersicore.DataBackend.findAllOffline(java.util.List<com.evenless.tersicore.model.Track>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2151/buggy-version/app.src.main.java.com.evenless.tersicore.DataBackend.java", "BodyUseAPI": [], "Fixed commit": "8e591edd2459fb989df34fd9a345be3dfccf34a7", "Url": "https://api.github.com/repos/NoMore201/tersicore-client", "Date": "2018-01-24T17:30:37Z"},
{"Line": "191=>191", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.evenless.tersicore.DataBackend.findAllOffline(realm.where(com.evenless.tersicore.model.Track.class).findAll())=>com.evenless.tersicore.DataBackend.findAllOffline(realm.where(com.evenless.tersicore.model.Track.class).findAll())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2151/buggy-version/app.src.main.java.com.evenless.tersicore.DataBackend.java", "BodyUseAPI": [], "Fixed commit": "8e591edd2459fb989df34fd9a345be3dfccf34a7", "Url": "https://api.github.com/repos/NoMore201/tersicore-client", "Date": "2018-01-24T17:30:37Z"},
{"Line": "248=>248", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.evenless.tersicore.DataBackend.findAllOffline()=>com.evenless.tersicore.DataBackend.findAllOffline(io.realm.Realm)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2151/buggy-version/app.src.main.java.com.evenless.tersicore.DataBackend.java", "BodyUseAPI": [], "Fixed commit": "8e591edd2459fb989df34fd9a345be3dfccf34a7", "Url": "https://api.github.com/repos/NoMore201/tersicore-client", "Date": "2018-01-24T17:30:37Z"},
{"Line": "383=>383", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.evenless.tersicore.DataBackend.findAllOffline(java.util.List<com.evenless.tersicore.model.Track>)=>com.evenless.tersicore.DataBackend.findAllOffline(java.util.List<com.evenless.tersicore.model.Track>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2151/buggy-version/app.src.main.java.com.evenless.tersicore.DataBackend.java", "BodyUseAPI": [], "Fixed commit": "8e591edd2459fb989df34fd9a345be3dfccf34a7", "Url": "https://api.github.com/repos/NoMore201/tersicore-client", "Date": "2018-01-24T17:30:37Z"},
{"Line": "187=>187", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.evenless.tersicore.DataBackend.findAllOffline(com.evenless.tersicore.DataBackend.getInstance().where(com.evenless.tersicore.model.Track.class).findAll())=>com.evenless.tersicore.DataBackend.findAllOffline(com.evenless.tersicore.DataBackend.getInstance().where(com.evenless.tersicore.model.Track.class).findAll())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2151/buggy-version/app.src.main.java.com.evenless.tersicore.DataBackend.java", "BodyUseAPI": [], "Fixed commit": "8e591edd2459fb989df34fd9a345be3dfccf34a7", "Url": "https://api.github.com/repos/NoMore201/tersicore-client", "Date": "2018-01-24T17:30:37Z"},
{"Line": "161=>158", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.minecolonies.api.compatibility.CompatabilityManager.isCompost(net.minecraft.item.ItemStack)=>com.minecolonies.api.compatibility.CompatibilityManager.isCompost(net.minecraft.item.ItemStack)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/439/buggy-version/src.main.java.com.minecolonies.coremod.tileentities.TileEntityBarrel.java", "BodyUseAPI": [], "Fixed commit": "5359d292bf360bb663cae58a2dc8f9622d78ac93", "Url": "https://api.github.com/repos/ldtteam/minecolonies", "Date": "2018-07-22T20:43:09Z"},
{"Line": "55=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.json.JSONObject.getJSONArray(java.lang.String)=>org.json.JSONObject.optJSONArray(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8353/buggy-version/app.src.main.java.com.nickwelna.booklisting.QueryUtils.java", "BodyUseAPI": [], "Fixed commit": "309cb99cd54e5d704978263a4ff23fd6aaf82c27", "Url": "https://api.github.com/repos/welnanick/Book-Listing", "Date": "2018-01-18T19:04:25Z"},
{"Line": "112=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.sql.Statement.execute(java.lang.String)=>java.sql.Statement.execute(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5256/buggy-version/src.main.java.io.forty11.sql.Sql.java", "BodyUseAPI": [], "Fixed commit": "60f5d4744c08f9b0b38b92af3318c5c7c2b24f38", "Url": "https://api.github.com/repos/wellsb1/fort_s", "Date": "2018-05-15T17:48:56Z"},
{"Line": "158=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "socket.SlaveServer.HandlerThread.responesClient(java.net.Socket,java.lang.String)=>socket.SlaveServer.HandlerThread.responesClientWithStream(java.io.DataOutputStream,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6862/buggy-version/Slave.socket.SlaveServer.java", "BodyUseAPI": [], "Fixed commit": "4753c9adcff10561b697126d30d4762b7f7bf8fa", "Url": "https://api.github.com/repos/luoPATHodan/vfs", "Date": "2018-01-06T14:24:33Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "tk.mybatis.mapper.entity.EntityColumn.getColumnHolder()=>tk.mybatis.mapper.entity.EntityColumn.getProperty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5986/buggy-version/mapper3.src.main.java.tk.mybatis.mapper.provider.base.BaseUpdateProvider.java", "BodyUseAPI": [], "Fixed commit": "2fe0d40e4c737081bdbd9015ee1e3fea100f9cc9", "Url": "https://api.github.com/repos/jsPATHo/references", "Date": "2018-02-05T03:41:05Z"},
{"Line": "102=>102", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "tk.mybatis.mapper.entity.EntityColumn.getColumnHolder()=>tk.mybatis.mapper.entity.EntityColumn.getProperty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5986/buggy-version/mapper3.src.main.java.tk.mybatis.mapper.provider.base.BaseUpdateProvider.java", "BodyUseAPI": [], "Fixed commit": "2fe0d40e4c737081bdbd9015ee1e3fea100f9cc9", "Url": "https://api.github.com/repos/jsPATHo/references", "Date": "2018-02-05T03:41:05Z"},
{"Line": "155=>155", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "tk.mybatis.mapper.entity.EntityColumn.getColumnHolder(java.lang.String)=>tk.mybatis.mapper.entity.EntityColumn.getProperty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5986/buggy-version/mapper3.src.main.java.tk.mybatis.mapper.provider.ExampleProvider.java", "BodyUseAPI": [], "Fixed commit": "2fe0d40e4c737081bdbd9015ee1e3fea100f9cc9", "Url": "https://api.github.com/repos/jsPATHo/references", "Date": "2018-02-05T03:41:05Z"},
{"Line": "185=>185", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "tk.mybatis.mapper.entity.EntityColumn.getColumnHolder(java.lang.String)=>tk.mybatis.mapper.entity.EntityColumn.getProperty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5986/buggy-version/mapper3.src.main.java.tk.mybatis.mapper.provider.ExampleProvider.java", "BodyUseAPI": [], "Fixed commit": "2fe0d40e4c737081bdbd9015ee1e3fea100f9cc9", "Url": "https://api.github.com/repos/jsPATHo/references", "Date": "2018-02-05T03:41:05Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.common.collect.Lists.newArrayList(java.lang.String,java.lang.String,java.lang.String)=>com.google.common.collect.Lists.newArrayList(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9374/buggy-version/cloud-eureka-consumer.src.main.java.vip.fanrong.config.PageCacheConfiguration.java", "BodyUseAPI": [], "Fixed commit": "b23d0d2591cae3bf59b9e4febf202c9eda12f2bd", "Url": "https://api.github.com/repos/r0n9/spring-cloud", "Date": "2018-01-15T05:41:24Z"},
{"Line": "59=>63", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.length()=>java.lang.String.substring(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5561/buggy-version/src.main.java.org.apache.jmeter.protocol.sip.config.SipRouterProxy.java", "BodyUseAPI": [], "Fixed commit": "c118b86a487020aafd5138a4c34c5c0311a96178", "Url": "https://api.github.com/repos/SIMULAP/simulap-plugin-sip", "Date": "2018-05-29T07:48:21Z"},
{"Line": "92=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Map<java.lang.String, java.lang.Object>.put(Constants.PROJECT_PARAMETER_ID,project.getName())=>java.util.Map<java.lang.String, java.lang.Object>.put(AppModelId.COMMANDPARAMETER_ORG_INSILICO_UI_PARAMETER_PROJECT,project.getName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4101/buggy-version/bundles.org.insilico.ui.src.org.insilico.ui.handlers.OpenProjectWindowHandler.java", "BodyUseAPI": [], "Fixed commit": "eac9620874426091dc9737e0fc1e7825828c25d6", "Url": "https://api.github.com/repos/draeger-lab/insilico", "Date": "2018-06-11T20:36:16Z"},
{"Line": "61=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.eclipse.e4.ui.workbench.modeling.EModelService.cloneSnippet(org.eclipse.e4.ui.model.application.MApplication,Constants.PROJECT_WINDOW_ID,<nulltype>)=>org.eclipse.e4.ui.workbench.modeling.EModelService.cloneSnippet(org.eclipse.e4.ui.model.application.MApplication,AppModelId.TRIMMEDWINDOW_ORG_INSILICO_UI_WINDOW,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4101/buggy-version/bundles.org.insilico.ui.src.org.insilico.ui.handlers.OpenProjectWindowHandler.java", "BodyUseAPI": [], "Fixed commit": "eac9620874426091dc9737e0fc1e7825828c25d6", "Url": "https://api.github.com/repos/draeger-lab/insilico", "Date": "2018-06-11T20:36:16Z"},
{"Line": "94=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.eclipse.e4.core.commands.ECommandService.createCommand(Constants.OPEN_PROJECT_WINDOW_COMMAND_ID,java.util.Map<java.lang.String, java.lang.Object>)=>org.eclipse.e4.core.commands.ECommandService.createCommand(AppModelId.COMMAND_ORG_INSILICO_UI_COMMAND_PROJECT_OPEN,java.util.Map<java.lang.String, java.lang.Object>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4101/buggy-version/bundles.org.insilico.ui.src.org.insilico.ui.handlers.OpenProjectWindowHandler.java", "BodyUseAPI": [], "Fixed commit": "eac9620874426091dc9737e0fc1e7825828c25d6", "Url": "https://api.github.com/repos/draeger-lab/insilico", "Date": "2018-06-11T20:36:16Z"},
{"Line": "43=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.support.v4.content.ContextCompat.checkSelfPermission(com.example.lifelogging.PhotoActivity,Manifest.permission.WRITE_EXTERNAL_STORAGE)=>android.support.v4.content.ContextCompat.checkSelfPermission(com.example.lifelogging.PhotoActivity,android.Manifest.permission.WRITE_EXTERNAL_STORAGE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6499/buggy-version/app.src.main.java.com.example.lifelogging.PhotoActivity.java", "BodyUseAPI": [], "Fixed commit": "613414a942037fe3b4345d79b93b3730778f9de2", "Url": "https://api.github.com/repos/crasheds22/LifeLogging-App", "Date": "2018-05-01T07:57:36Z"},
{"Line": "266=>266", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.alexdev.kepler.game.item.Item.hasBehaviour(org.alexdev.kepler.game.item.base.ItemBehaviour)=>org.alexdev.kepler.game.item.base.ItemDefinition.hasBehaviour(org.alexdev.kepler.game.item.base.ItemBehaviour)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4736/buggy-version/Kepler-Server.src.main.java.org.alexdev.kepler.game.item.Item.java", "BodyUseAPI": [], "Fixed commit": "cdf999bcf037c23a5a7e56d73e3fc155796e4ea4", "Url": "https://api.github.com/repos/emansom/Kepler", "Date": "2018-06-02T13:50:34Z"},
{"Line": "71=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.facebook.fresco.helper.photoview.PictureBrowse.newBuilder(com.an.better.netease.cloud.music.gank.child.WelfareFragment)=>com.facebook.fresco.helper.photoview.PhotoX.with(com.an.better.netease.cloud.music.gank.child.WelfareFragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3020/buggy-version/netease_cloud_music.src.main.java.com.an.better.netease.cloud.music.gank.child.WelfareFragment.java", "BodyUseAPI": [], "Fixed commit": "c36aafd3729fa4772b2f1d634367bd000f164c99", "Url": "https://api.github.com/repos/hpdx/Beyond", "Date": "2018-03-18T02:40:49Z"},
{"Line": "71=>71", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.facebook.fresco.helper.photoview.PictureBrowse.newBuilder(com.an.better.netease.cloud.music.gank.child.WelfareFragment)=>com.facebook.fresco.helper.photoview.PhotoX.with(com.an.better.netease.cloud.music.gank.child.WelfareFragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3020/buggy-version/netease_cloud_music.src.main.java.com.an.better.netease.cloud.music.gank.child.WelfareFragment.java", "BodyUseAPI": [], "Fixed commit": "c36aafd3729fa4772b2f1d634367bd000f164c99", "Url": "https://api.github.com/repos/hpdx/Beyond", "Date": "2018-03-18T02:40:49Z"},
{"Line": "93=>92", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.kurotkin.model.Worker.withAlgo(int)=>com.kurotkin.model.Worker.withAlgo(c.algo)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/756/buggy-version/src.main.java.com.kurotkin.controller.Nicehash.java", "BodyUseAPI": [], "Fixed commit": "e3fed98f4c2dbcf4290a4e8af4bdf46158eaf4cf", "Url": "https://api.github.com/repos/kurotkin/NHstat", "Date": "2018-01-25T12:55:54Z"},
{"Line": "260=>260", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.alipay.lookout.remote.report.AbstractBucketCounter.bucketMetricIterator()=>com.alipay.lookout.remote.report.AbstractBucketCounter.iterator()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4047/buggy-version/client.lookout-reg-server.src.main.java.com.alipay.lookout.remote.report.SchedulerPoller.java", "BodyUseAPI": [], "Fixed commit": "dd610316bd6aa5c1ac6e0cdcadd0eceade1028ab", "Url": "https://api.github.com/repos/cp3fantasy/sofa-lookout", "Date": "2018-09-13T04:11:35Z"},
{"Line": "128=>128", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.google.gson.stream.JsonWriter.jsonValue(((\"|\" + (((com.cinchapi.concourse.Timestamp) (value)).getMicros())) + \"|\"))=>com.google.gson.stream.JsonWriter.value(((\"|\" + (((com.cinchapi.concourse.Timestamp) (value)).getMicros())) + \"|\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7123/buggy-version/concourse-driver-java.src.main.java.com.cinchapi.concourse.util.TypeAdapters.java", "BodyUseAPI": [], "Fixed commit": "c9e2945e8fec4ea3b2e61dcfd063d01b833faa7d", "Url": "https://api.github.com/repos/cinchapi/concourse", "Date": "2018-08-12T22:04:54Z"},
{"Line": "186=>186", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.Math.atan((((line.getX2()) - (line.getX1())) / ((line.getY2()) - (line.getY1()))))=>java.lang.Math.atan2(((line.getX2()) - (line.getX1())),((line.getY2()) - (line.getY1())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8415/buggy-version/src.ca.mcgill.cs.jetuml.views.edges.StateTransitionEdgeView.java", "BodyUseAPI": [], "Fixed commit": "21895e81b5e43814fa6df847412b600554e3681e", "Url": "https://api.github.com/repos/kkutschera/JetUML", "Date": "2018-01-16T13:16:41Z"},
{"Line": "14=>16", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.app.Activity.onCreate(android.os.Bundle)=>android.support.v7.app.AppCompatActivity.onCreate(android.os.Bundle)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6272/buggy-version/app.src.main.java.com.amebas.healthport.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "0bfc3882c845fccbead838d32c6cdab4d4f8a92d", "Url": "https://api.github.com/repos/BranSeal/HealthPort", "Date": "2018-09-02T17:56:38Z"},
{"Line": "19=>19", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.lahm.library.SecurityCheckUtil.getSingleInstance().checkIsDebugB()=>com.lahm.library.SecurityCheckUtil.getSingleInstance().checkIsDebugVersion(android.content.Context)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2370/buggy-version/library.src.main.java.com.lahm.library.EasyProtectorLib.java", "BodyUseAPI": [], "Fixed commit": "dd1e4b36b0d33d40f1da6fa7a4c4f2fe9153db67", "Url": "https://api.github.com/repos/lamster2018/EasyProtector", "Date": "2018-05-17T08:40:30Z"},
{"Line": "33=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.lahm.library.EasyProtectorLib.checkIsDebug()=>com.lahm.library.EasyProtectorLib.checkIsDebug(com.lahm.easyprotector.MainActivity)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2370/buggy-version/app.src.main.java.com.lahm.easyprotector.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "dd1e4b36b0d33d40f1da6fa7a4c4f2fe9153db67", "Url": "https://api.github.com/repos/lamster2018/EasyProtector", "Date": "2018-05-17T08:40:30Z"},
{"Line": "11=>12", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "leetcode.LongestNonRepeatingSubstring_3.findSubString(java.lang.String)=>leetcode.LongestNonRepeatingSubstring_3.lengthOfLongestSubstring(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6086/buggy-version/src.leetcode.LongestNonRepeatingSubstring_3.java", "BodyUseAPI": [], "Fixed commit": "c98e8694c95575e60ace4d5859c9a1f5ea0423ea", "Url": "https://api.github.com/repos/nanofaroque/Life-coding", "Date": "2018-10-18T21:34:29Z"},
{"Line": "119=>117", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openqa.selenium.WebElement.click()=>pageObjects.IdeabooksPage.clickByJavaExecutor(org.openqa.selenium.WebElement)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2977/buggy-version/src.main.java.pageObjects.IdeabooksPage.java", "BodyUseAPI": [], "Fixed commit": "8c8f302382cd0103074d9a072f4b79d4c2173f08", "Url": "https://api.github.com/repos/mshafea/HomifyWeb", "Date": "2018-08-03T15:39:44Z"},
{"Line": "80=>80", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "icbm.classic.ICBMClassic.logger().error(java.lang.String)=>icbm.classic.ICBMClassic.logger().error(java.lang.String,java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1719/buggy-version/src.main.java.icbm.classic.content.explosive.thread.ThreadExplosion.java", "BodyUseAPI": [], "Fixed commit": "44cb78671bce6af5b6357e35a4fb65553c5ac0e5", "Url": "https://api.github.com/repos/BuiltBrokenModding/ICBM-Classic", "Date": "2018-04-10T23:29:20Z"},
{"Line": "121=>107", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.lockss.plugin.medknow.SubTreeArticleIteratorBuilder.addAspect(java.lang.String,ArticleFiles.ROLE_FULL_TEXT_HTML,ArticleFiles.ROLE_ARTICLE_METADATA)=>org.lockss.plugin.medknow.SubTreeArticleIteratorBuilder.addAspect(java.util.regex.Pattern,java.lang.String,ArticleFiles.ROLE_FULL_TEXT_HTML,ArticleFiles.ROLE_ARTICLE_METADATA)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4785/buggy-version/plugins.src.org.lockss.plugin.medknow.MedknowArticleIteratorFactory.java", "BodyUseAPI": [], "Fixed commit": "8947794b53e737a04910c70068fc00c7bff99c6e", "Url": "https://api.github.com/repos/lockss/lockss-daemon", "Date": "2018-08-30T00:33:32Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "shared.logic.Member.getName()=>shared.logic.Member.getInternalName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8447/buggy-version/src.nnode.EmporiumData.java", "BodyUseAPI": [], "Fixed commit": "3798b19d152982a7e7e207ca77c3caf9ca64cc3c", "Url": "https://api.github.com/repos/vossnarrator/NarratorNode", "Date": "2018-07-22T02:37:53Z"},
{"Line": "160=>161", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ArrayInt.D1.copyToNDJavaArray()=>ArrayDouble.D1.copyToNDJavaArray()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/34/buggy-version/src.jncregridder.data.OceanGridEU.java", "BodyUseAPI": [], "Fixed commit": "05d34902a7ec1c36574542547217b0a3237a1208", "Url": "https://api.github.com/repos/CCMMMA/ccmmma-tools", "Date": "2018-09-19T05:33:42Z"},
{"Line": "289=>289", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.hapramp.utils.ImageHandler.load(com.hapramp.ui.activity.ProfileEditActivity,android.widget.ImageView,java.lang.String)=>com.hapramp.utils.ImageHandler.loadFilePath(com.hapramp.ui.activity.ProfileEditActivity,android.widget.ImageView,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1564/buggy-version/app.src.main.java.com.hapramp.ui.activity.ProfileEditActivity.java", "BodyUseAPI": [], "Fixed commit": "fddd7240e288e2f9615d586c00fe3f98dfe31791", "Url": "https://api.github.com/repos/hapramp/1Rramp-Android", "Date": "2018-08-21T06:39:00Z"},
{"Line": "404=>399", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "ute.webservice.voiceagent.location.LocationController.getInstance().findTags(android.app.Activity,java.lang.String,java.lang.String)=>ute.webservice.voiceagent.location.LocationController.getInstance().displayClientLocation(java.lang.String,android.content.Context)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6057/buggy-version/uteVoiceAgentApp.src.main.java.ute.webservice.voiceagent.util.Controller.java", "BodyUseAPI": [], "Fixed commit": "7ced975635ed461cef5f39b2b0b8e8ea8e17af64", "Url": "https://api.github.com/repos/n-taylor/UVoiceAgent", "Date": "2018-08-06T15:28:11Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "pokemon.controller.pokemonController.getPokdex()=>pokemon.controller.pokemonController.getPokedex()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8610/buggy-version/src.pokemon.view.pokemonPanel.java", "BodyUseAPI": [], "Fixed commit": "e2e31e1d59c78ed6b9d33bd8b0c0777e1e7c8ba8", "Url": "https://api.github.com/repos/mmce2349/GottaCatchThemAll", "Date": "2018-01-02T16:17:53Z"},
{"Line": "7=>6", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "InsurancePolicy(java.lang.String,java.lang.String,java.lang.String,int,int,boolean,int,java.lang.String,java.lang.String,java.lang.String,int,boolean,double,int,int)=>InsurancePolicy(java.lang.String,java.lang.String,java.lang.String,int,int,boolean,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4831/buggy-version/LifeInsurance.java", "BodyUseAPI": [], "Fixed commit": "6725a5bd6731d9fc2bc381b4a345edd3066062d7", "Url": "https://api.github.com/repos/max8987/MaxBootCamp", "Date": "2018-04-20T23:09:33Z"},
{"Line": "6=>6", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "InsurancePolicy(java.lang.String,java.lang.String,java.lang.String,int,int,boolean,int,java.lang.String,java.lang.String,java.lang.String,int,boolean,double,int,int)=>InsurancePolicy(java.lang.String,java.lang.String,java.lang.String,int,boolean,double,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4831/buggy-version/CarInsurance.java", "BodyUseAPI": [], "Fixed commit": "6725a5bd6731d9fc2bc381b4a345edd3066062d7", "Url": "https://api.github.com/repos/max8987/MaxBootCamp", "Date": "2018-04-20T23:09:33Z"},
{"Line": "64=>66", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ucl.newton.service.authentication.HibernateUtils.getSingleResultOrNull(org.hibernate.query.Query<org.ucl.newton.framework.Credential>)=>org.ucl.newton.service.authentication.CredentialRepository.getSingleResultOrNull(org.hibernate.query.Query<org.ucl.newton.framework.Credential>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5839/buggy-version/application.master.src.main.java.org.ucl.newton.service.authentication.CredentialRepository.java", "BodyUseAPI": [], "Fixed commit": "baa47e5e9a39e5ccb347fa171756c3abea43092c", "Url": "https://api.github.com/repos/blairisme/newton", "Date": "2018-08-15T19:36:59Z"},
{"Line": "303=>251", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.example.android.sunshine.ForecastAdapter.swapCursor(android.database.Cursor)=>com.example.android.sunshine.ForecastAdapter.swapCursor(android.database.Cursor)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1756/buggy-version/S09.04-Exercise-UsingCursorLoader.app.src.main.java.com.example.android.sunshine.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "c61e63c9c1bb102a60863904ee9aadfc80cdf91f", "Url": "https://api.github.com/repos/syoustra/ud851-Sunshine", "Date": "2018-03-24T01:49:07Z"},
{"Line": "185=>180", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.widget.TextView.toString()=>android.widget.TextView.getText()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1756/buggy-version/S09.04-Exercise-UsingCursorLoader.app.src.main.java.com.example.android.sunshine.ForecastAdapter.java", "BodyUseAPI": [], "Fixed commit": "c61e63c9c1bb102a60863904ee9aadfc80cdf91f", "Url": "https://api.github.com/repos/syoustra/ud851-Sunshine", "Date": "2018-03-24T01:49:07Z"},
{"Line": "44=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.ppm.integration.agilesdk.dm.DataField.set(listValueObj.getString(\"name\"))=>com.ppm.integration.agilesdk.dm.DataField.set(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7766/buggy-version/src.com.ppm.integration.agilesdk.connector.jira.model.JIRAFieldInfo.java", "BodyUseAPI": [], "Fixed commit": "6c2d3bdb63fb29c41728ce450865e3848b2d3406", "Url": "https://api.github.com/repos/MicroFocus/ppm-jira-connector", "Date": "2018-09-07T07:49:45Z"},
{"Line": "76=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Map<java.lang.String, virtualpetsamok1.VirtualPet>.isEmpty()=>java.util.Map<java.lang.String, virtualpetsamok1.VirtualPet>.containsKey(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2007/buggy-version/src.main.java.virtualpetsamok1.VirtualPetShelter.java", "BodyUseAPI": [], "Fixed commit": "f6ec0edb13a28857d2eac11f757c29e403141006", "Url": "https://api.github.com/repos/nenafay/virtual-pets-amok", "Date": "2018-06-16T03:07:24Z"},
{"Line": "297=>298", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.nio.ByteBuffer.put(char)=>java.nio.ByteBuffer.put(byte)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9047/buggy-version/core.src.main.java.io.undertow.server.protocol.http.HttpResponseConduit.java", "BodyUseAPI": [], "Fixed commit": "cc5b9bfb1a516e0102b7a2890277d1ba3132bc67", "Url": "https://api.github.com/repos/undertow-io/undertow", "Date": "2018-03-09T04:24:17Z"},
{"Line": "5=>5", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ou.println(java.lang.String)=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2173/buggy-version/src.HelloWorld.java", "BodyUseAPI": [], "Fixed commit": "7828393156889fec14c578fe92e6a651b8fe1b34", "Url": "https://api.github.com/repos/nvaa36/TestTravis", "Date": "2018-10-03T22:17:13Z"},
{"Line": "37=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[] draw(android.graphics.Canvas,float,android.graphics.Paint)=>[public] draw(android.graphics.Canvas,float,android.graphics.Paint)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5798/buggy-version/spotlight.src.main.java.com.takusemba.spotlight.shapes.RoundedRectangle.java", "BodyUseAPI": [], "Fixed commit": "cd8def2d8d5b8e2ea48388363683c461083a4fd6", "Url": "https://api.github.com/repos/TakuSemba/Spotlight", "Date": "2018-02-28T10:19:49Z"},
{"Line": "22=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2793/buggy-version/app.src.main.java.com.example.cslab.lefei.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "21450023a34cefe1309637077c4e2ad4c443f3e7", "Url": "https://api.github.com/repos/mylvcs/Lefei2.0", "Date": "2018-01-15T08:01:45Z"},
{"Line": "178=>178", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javax.persistence.Query.setParameter(java.lang.String,org.joda.time.DateTime)=>javax.persistence.Query.setParameter(java.lang.String,to.toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9512/buggy-version/back-end.src.main.java.ee.hm.dop.dao.specialized.StatisticsDao.java", "BodyUseAPI": [], "Fixed commit": "4cb1293b41560e3ecf827e4806b1020e5f54040c", "Url": "https://api.github.com/repos/hariduspilv/koolikott", "Date": "2018-03-02T13:14:14Z"},
{"Line": "175=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javax.persistence.Query.setParameter(java.lang.String,org.joda.time.DateTime)=>javax.persistence.Query.setParameter(java.lang.String,from.toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9512/buggy-version/back-end.src.main.java.ee.hm.dop.dao.specialized.StatisticsDao.java", "BodyUseAPI": [], "Fixed commit": "4cb1293b41560e3ecf827e4806b1020e5f54040c", "Url": "https://api.github.com/repos/hariduspilv/koolikott", "Date": "2018-03-02T13:14:14Z"},
{"Line": "37=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Robot.gyro.getAngle()=>java.lang.Math.abs((robotAngle - (leftSegment.heading)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/536/buggy-version/src.main.java.org.team1540.robot2018.motion.FollowProfile.java", "BodyUseAPI": [], "Fixed commit": "ddaa71a9f7893f04248b0c6cee67bd6b8ad4ff35", "Url": "https://api.github.com/repos/flamingchickens1540/pandora-titan-2018", "Date": "2018-03-16T23:18:54Z"},
{"Line": "91=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.apache.log4j.Logger.info(java.lang.String)=>org.apache.log4j.Logger.info(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3478/buggy-version/containers.tomcat-8.src.main.java.org.mobicents.servlet.sip.annotations.ClassFileScanner.java", "BodyUseAPI": [], "Fixed commit": "daa7dd3405099243f41bf94ab25309240f19bd82", "Url": "https://api.github.com/repos/RestComm/sip-servlets", "Date": "2018-03-01T11:34:42Z"},
{"Line": "387=>384", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<ch.puzzle.itc.mobiliar.business.property.entity.ResourceEditRelation>.add(ch.puzzle.itc.mobiliar.business.property.entity.ResourceEditRelation)=>ch.puzzle.itc.mobiliar.presentation.resourceRelation.ResourceRelationModel.replaceRelation(ch.puzzle.itc.mobiliar.business.property.entity.ResourceEditRelation,ch.puzzle.itc.mobiliar.business.property.entity.ResourceEditRelation)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2153/buggy-version/AMW_web.src.main.java.ch.puzzle.itc.mobiliar.presentation.resourceRelation.ResourceRelationModel.java", "BodyUseAPI": [], "Fixed commit": "d87fe7ab2da0fa03d5d3076b6c30a4eb4a588839", "Url": "https://api.github.com/repos/liimaorg/liima", "Date": "2018-06-05T13:10:28Z"},
{"Line": "60=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.valueOf(R.string.no_address_found)=>android.content.Context.getString(R.string.no_address_found)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6826/buggy-version/app.src.main.java.maxzonov.shareloc.utils.GetAddressClass.java", "BodyUseAPI": [], "Fixed commit": "0671440358cddb6aaeef6f653b3ca7384f8b473a", "Url": "https://api.github.com/repos/max75758231/ShareLoc", "Date": "2018-01-26T08:22:03Z"},
{"Line": "57=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.valueOf(R.string.no_address_found)=>android.content.Context.getString(R.string.no_address_found)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6826/buggy-version/app.src.main.java.maxzonov.shareloc.utils.GetAddressClass.java", "BodyUseAPI": [], "Fixed commit": "0671440358cddb6aaeef6f653b3ca7384f8b473a", "Url": "https://api.github.com/repos/max75758231/ShareLoc", "Date": "2018-01-26T08:22:03Z"},
{"Line": "46=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.valueOf(R.string.no_address_found)=>android.content.Context.getString(R.string.no_address_found)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6826/buggy-version/app.src.main.java.maxzonov.shareloc.utils.GetAddressClass.java", "BodyUseAPI": [], "Fixed commit": "0671440358cddb6aaeef6f653b3ca7384f8b473a", "Url": "https://api.github.com/repos/max75758231/ShareLoc", "Date": "2018-01-26T08:22:03Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.badlogic.gdx.math.Vector2>.add(canvas.alignedScreenToWorld(x, y))=>aurelienribon.bodyeditor.models.ShapeModel.addVertex(canvas.alignedScreenToWorld(x, y))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7891/buggy-version/editor.src.aurelienribon.bodyeditor.canvas.rigidbodies.input.CreationInputProcessor.java", "BodyUseAPI": [], "Fixed commit": "7638c929662bd21c11c0576ebc02193febb2b801", "Url": "https://api.github.com/repos/cpr4t3s/box2d-editor", "Date": "2018-03-17T01:36:32Z"},
{"Line": "43=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "lastShape.getVertices().add(canvas.alignedScreenToWorld(x, y))=>aurelienribon.bodyeditor.models.ShapeModel.addVertex(canvas.alignedScreenToWorld(x, y))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7891/buggy-version/editor.src.aurelienribon.bodyeditor.canvas.rigidbodies.input.CreationInputProcessor.java", "BodyUseAPI": [], "Fixed commit": "7638c929662bd21c11c0576ebc02193febb2b801", "Url": "https://api.github.com/repos/cpr4t3s/box2d-editor", "Date": "2018-03-17T01:36:32Z"},
{"Line": "225=>224", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.jkiss.dbeaver.ui.controls.resultset.ResultSetViewer.setStatus(java.lang.String,org.jkiss.dbeaver.model.DBPMessageType)=>org.jkiss.dbeaver.core.DBeaverUI.syncExec(() -> controller.setStatus(message, messageType))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6877/buggy-version/plugins.org.jkiss.dbeaver.core.src.org.jkiss.dbeaver.ui.controls.resultset.ResultSetValueController.java", "BodyUseAPI": [], "Fixed commit": "8a6c754419a66ba08893ae8b59e6a4ef13b32a77", "Url": "https://api.github.com/repos/dbeaver/dbeaver", "Date": "2018-05-10T21:52:43Z"},
{"Line": "87=>87", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javafx.util.Duration.seconds(int)=>javafx.util.Duration.seconds(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7911/buggy-version/gazeplay.src.main.java.net.gazeplay.games.divisor.Target.java", "BodyUseAPI": [], "Fixed commit": "6de3ea99232877c74bc244ef1a8017893ea827b3", "Url": "https://api.github.com/repos/MelanieCarriere/GazePlay", "Date": "2018-04-05T12:51:56Z"},
{"Line": "87=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javafx.util.Duration.seconds(int)=>javafx.util.Duration.seconds(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7911/buggy-version/gazeplay.src.main.java.net.gazeplay.games.divisor.Target.java", "BodyUseAPI": [], "Fixed commit": "6de3ea99232877c74bc244ef1a8017893ea827b3", "Url": "https://api.github.com/repos/MelanieCarriere/GazePlay", "Date": "2018-04-05T12:51:56Z"},
{"Line": "95=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.GridView.setOnTouchListener(dsa.hcmiu.a2048pets.entities.handle.OnSwipeTouchListener)=>android.widget.GridView.setOnTouchListener(dsa.hcmiu.a2048pets.entities.handle.OnSwipeTouchListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6998/buggy-version/app.src.main.java.dsa.hcmiu.a2048pets.PlayActivity.java", "BodyUseAPI": [], "Fixed commit": "91cb6852593da219446c93130adb037c524fc8d0", "Url": "https://api.github.com/repos/suhymin97/2048Pets", "Date": "2018-05-09T05:13:48Z"},
{"Line": "139=>145", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6998/buggy-version/app.src.main.java.dsa.hcmiu.a2048pets.PlayActivity.java", "BodyUseAPI": [], "Fixed commit": "91cb6852593da219446c93130adb037c524fc8d0", "Url": "https://api.github.com/repos/suhymin97/2048Pets", "Date": "2018-05-09T05:13:48Z"},
{"Line": "889=>889", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.zip.ZipEntry.getSize()=>java.util.zip.ZipFile.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9846/buggy-version/src.main.java.com.entanmo.dapp.controller.DappController.java", "BodyUseAPI": [], "Fixed commit": "32fd93d2f300a3bbdbe9797114de23f0c1e65bb3", "Url": "https://api.github.com/repos/etm-developer/dapp-web", "Date": "2018-09-11T07:07:45Z"},
{"Line": "889=>889", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.zip.ZipEntry.getSize()=>java.util.zip.ZipFile.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9846/buggy-version/src.main.java.com.entanmo.dapp.controller.DappController.java", "BodyUseAPI": [], "Fixed commit": "32fd93d2f300a3bbdbe9797114de23f0c1e65bb3", "Url": "https://api.github.com/repos/etm-developer/dapp-web", "Date": "2018-09-11T07:07:45Z"},
{"Line": "216=>219", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.content.Intent.addCategory(Intent.CATEGORY_OPENABLE)=>android.content.Intent.putExtra(Intent.EXTRA_MIME_TYPES,java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8830/buggy-version/sample.src.main.java.com.yalantis.ucrop.sample.SampleActivity.java", "BodyUseAPI": [], "Fixed commit": "f8a38c76f2262b4fa96e4ef0c2735412d9905ff2", "Url": "https://api.github.com/repos/tamzi/uCrop", "Date": "2018-03-27T06:51:49Z"},
{"Line": "215=>213", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.content.Intent.setAction(Intent.ACTION_GET_CONTENT)=>new android.content.Intent(android.content.Intent.ACTION_GET_CONTENT).setType(\"image/*\").addCategory(Intent.CATEGORY_OPENABLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8830/buggy-version/sample.src.main.java.com.yalantis.ucrop.sample.SampleActivity.java", "BodyUseAPI": [], "Fixed commit": "f8a38c76f2262b4fa96e4ef0c2735412d9905ff2", "Url": "https://api.github.com/repos/tamzi/uCrop", "Date": "2018-03-27T06:51:49Z"},
{"Line": "62=>61", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "RubyCraft.Navidad.Cambiador_de_Texturas.Texturas()=>Eventos.Cambiador_de_Texturas.Texturas()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6425/buggy-version/src.main.java.Eventos.Ver_fecha_calendario_usuario.java", "BodyUseAPI": [], "Fixed commit": "1a681bbc02f0f727b25a21b52200765f045676b8", "Url": "https://api.github.com/repos/JoelGamer2/RubyCraft1.7.10", "Date": "2018-10-18T14:04:50Z"},
{"Line": "65=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "RubyCraft.Navidad.Cambiador_de_Texturas.Texturas_Navidad()=>Eventos.Cambiador_de_Texturas.Texturas_Navidad()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6425/buggy-version/src.main.java.Eventos.Ver_fecha_calendario_usuario.java", "BodyUseAPI": [], "Fixed commit": "1a681bbc02f0f727b25a21b52200765f045676b8", "Url": "https://api.github.com/repos/JoelGamer2/RubyCraft1.7.10", "Date": "2018-10-18T14:04:50Z"},
{"Line": "62=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "RubyCraft.Navidad.Cambiador_de_Texturas.Texturas()=>Eventos.Cambiador_de_Texturas.Texturas()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6425/buggy-version/src.main.java.Eventos.Ver_fecha_calendario_usuario.java", "BodyUseAPI": [], "Fixed commit": "1a681bbc02f0f727b25a21b52200765f045676b8", "Url": "https://api.github.com/repos/JoelGamer2/RubyCraft1.7.10", "Date": "2018-10-18T14:04:50Z"},
{"Line": "71=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "RubyCraft.Navidad.Cambiador_de_Texturas.Texturas()=>Eventos.Cambiador_de_Texturas.Texturas()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6425/buggy-version/src.main.java.Eventos.Verificar_Fecha.java", "BodyUseAPI": [], "Fixed commit": "1a681bbc02f0f727b25a21b52200765f045676b8", "Url": "https://api.github.com/repos/JoelGamer2/RubyCraft1.7.10", "Date": "2018-10-18T14:04:50Z"},
{"Line": "71=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "RubyCraft.Navidad.Cambiador_de_Texturas.Texturas()=>Eventos.Cambiador_de_Texturas.Texturas()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6425/buggy-version/src.main.java.Eventos.Verificar_Fecha.java", "BodyUseAPI": [], "Fixed commit": "1a681bbc02f0f727b25a21b52200765f045676b8", "Url": "https://api.github.com/repos/JoelGamer2/RubyCraft1.7.10", "Date": "2018-10-18T14:04:50Z"},
{"Line": "51=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "int[].equals(scale.intervals())=>java.util.Arrays.equals(int[],scale.intervals())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3944/buggy-version/MusicComposition.src.theory.Mode.java", "BodyUseAPI": [], "Fixed commit": "2406e849cd1a759d1b522033b45f13d43fbd17c7", "Url": "https://api.github.com/repos/ksscott/MusicComposition", "Date": "2018-07-04T10:38:59Z"},
{"Line": "61=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new io.vantiq.client.internal.OkHttpClient.Builder().readTimeout(this.readTimeout, java.util.concurrent.TimeUnit.MILLISECONDS).writeTimeout(this.writeTimeout, java.util.concurrent.TimeUnit.MILLISECONDS).connectTimeout(this.connectTimeout, java.util.concurrent.TimeUnit.MILLISECONDS).build()=>new io.vantiq.client.internal.OkHttpClient.Builder().readTimeout(this.readTimeout, java.util.concurrent.TimeUnit.MILLISECONDS).writeTimeout(this.writeTimeout, java.util.concurrent.TimeUnit.MILLISECONDS).connectTimeout(this.connectTimeout, java.util.concurrent.TimeUnit.MILLISECONDS).protocols(java.util.List<io.vantiq.client.internal.Protocol>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7193/buggy-version/src.main.java.io.vantiq.client.internal.VantiqSession.java", "BodyUseAPI": [], "Fixed commit": "1ef23543fb2202a771a6a3cafccefc29df568e2e", "Url": "https://api.github.com/repos/Vantiq/vantiq-sdk-java", "Date": "2018-09-12T16:32:52Z"},
{"Line": "207=>206", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "biz.ganttproject.impex.csv.TaskRecords.parseAssignmentSpec(biz.ganttproject.impex.csv.SpreadsheetRecord)=>biz.ganttproject.impex.csv.TaskRecords.parseAssignmentSpec(biz.ganttproject.impex.csv.SpreadsheetRecord)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2338/buggy-version/ganttproject.src.biz.ganttproject.impex.csv.TaskRecords.java", "BodyUseAPI": [], "Fixed commit": "d261f6299cf72de6b546b18f17cece8e9185bf2d", "Url": "https://api.github.com/repos/bardsoftware/ganttproject", "Date": "2018-05-22T23:32:34Z"},
{"Line": "206=>206", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.slf4j.Logger.info(java.lang.String)=>org.slf4j.Logger.info(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9891/buggy-version/bundle.src.main.java.com.adobe.acs.commons.ondeploy.impl.OnDeployScriptBase.java", "BodyUseAPI": [], "Fixed commit": "21ffaa886c3b04eb1fa7b1029c8354736061e425", "Url": "https://api.github.com/repos/joerghoh/acs-aem-commons", "Date": "2018-02-05T14:31:13Z"},
{"Line": "80=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "clientWeb.ChatUserUtils.ChatUser.getSession()=>clientWeb.ChatUserUtils.ChatUser.getUserToSession()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4894/buggy-version/WebServerSide.src.main.java.clientWeb.ChatUserUtils.ChatUtils.java", "BodyUseAPI": [], "Fixed commit": "01562c3b619bc66b1d28e324be7dd5ff5dc4c40f", "Url": "https://api.github.com/repos/north911/WebSocketChat", "Date": "2018-03-23T15:49:25Z"},
{"Line": "80=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.String, clientWeb.ChatUserUtils.Agent>.get(chatUser.getSession().getId())=>java.util.HashMap<java.lang.String, clientWeb.ChatUserUtils.Client>.get(chatUser.getUserToSession().getId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4894/buggy-version/WebServerSide.src.main.java.clientWeb.ChatUserUtils.ChatUtils.java", "BodyUseAPI": [], "Fixed commit": "01562c3b619bc66b1d28e324be7dd5ff5dc4c40f", "Url": "https://api.github.com/repos/north911/WebSocketChat", "Date": "2018-03-23T15:49:25Z"},
{"Line": "107=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "database.BookTableGateway.getAuthorsForBook(model.Book)=>model.Book.getAuthors()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2672/buggy-version/src.controller.BookDetailController.java", "BodyUseAPI": [], "Fixed commit": "5f0927ddb24a485d21e70e9063298bdae700e271", "Url": "https://api.github.com/repos/JoseBeto/CS4743Assignment4", "Date": "2018-03-27T17:20:38Z"},
{"Line": "149=>149", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "database.BookTableGateway.getAuthorsForBook(model.Book)=>model.Book.getAuthors()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2672/buggy-version/src.controller.BookDetailController.java", "BodyUseAPI": [], "Fixed commit": "5f0927ddb24a485d21e70e9063298bdae700e271", "Url": "https://api.github.com/repos/JoseBeto/CS4743Assignment4", "Date": "2018-03-27T17:20:38Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "database.BookTableGateway.getAuthorsForBook(model.Book)=>model.Book.getAuthors()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2672/buggy-version/src.controller.AuthorBookController.java", "BodyUseAPI": [], "Fixed commit": "5f0927ddb24a485d21e70e9063298bdae700e271", "Url": "https://api.github.com/repos/JoseBeto/CS4743Assignment4", "Date": "2018-03-27T17:20:38Z"},
{"Line": "76=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.String, de.unistuttgart.iaas.amyassist.amy.core.speech.Grammar>.put(java.lang.String,de.unistuttgart.iaas.amyassist.amy.core.speech.Grammar)=>java.util.Map<java.lang.String, de.unistuttgart.iaas.amyassist.amy.core.speech.Grammar>.put(java.lang.String,de.unistuttgart.iaas.amyassist.amy.core.speech.Grammar)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/231/buggy-version/core.src.main.java.de.unistuttgart.iaas.amyassist.amy.core.speech.Grammar.java", "BodyUseAPI": [], "Fixed commit": "1f82276c7ad0e568e07ab9788a351d5e3fc4d63d", "Url": "https://api.github.com/repos/AmyAssist/Amy", "Date": "2018-07-02T21:30:19Z"},
{"Line": "192=>192", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.Integer.valueOf(java.lang.Integer)=>java.util.HashMap<java.lang.String, java.lang.Integer>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/231/buggy-version/core.src.main.java.de.unistuttgart.iaas.amyassist.amy.core.TextToPlugin.java", "BodyUseAPI": [], "Fixed commit": "1f82276c7ad0e568e07ab9788a351d5e3fc4d63d", "Url": "https://api.github.com/repos/AmyAssist/Amy", "Date": "2018-07-02T21:30:19Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.minecraft.server.v1_12_R1.MinecraftServer.getServer()=>org.bukkit.entity.Player.getWorld()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5389/buggy-version/src.ru.enchants.EnchantmentMoltenCore.java", "BodyUseAPI": [], "Fixed commit": "084bbf86e570c7c0a9445c9a7151cf7504c0b3ec", "Url": "https://api.github.com/repos/GreenBudgie/LitePlugin", "Date": "2018-03-25T14:32:10Z"},
{"Line": "158=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "net.minecraft.server.v1_12_R1.MinecraftServer.getServer().getWorld()=>((org.bukkit.craftbukkit.v1_12_R1.CraftWorld) (p.getWorld())).getHandle()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5389/buggy-version/src.ru.enchants.EnchantmentMoltenCore.java", "BodyUseAPI": [], "Fixed commit": "084bbf86e570c7c0a9445c9a7151cf7504c0b3ec", "Url": "https://api.github.com/repos/GreenBudgie/LitePlugin", "Date": "2018-03-25T14:32:10Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.springframework.http.ResponseEntity.status(HttpStatus.BAD_REQUEST)=>org.springframework.http.ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/506/buggy-version/src.main.java.com.photos.api.controllers.TagController.java", "BodyUseAPI": [], "Fixed commit": "b24e16d00f8a574a62cfa137205bc91d549e46e2", "Url": "https://api.github.com/repos/matkrzy/bd2-backend", "Date": "2018-06-16T16:40:03Z"},
{"Line": "108=>108", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.orangesunshine.moritwitter.TweetDataBase.changeIsDisable(user.getScreenName(),int)=>com.orangesunshine.moritwitter.TweetDataBase.changeIsDisable(user.getScreenName(),int,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9025/buggy-version/app.src.main.java.com.orangesunshine.moritwitter.FollowList.FollowListMainFragment.java", "BodyUseAPI": [], "Fixed commit": "52087bd2d322a726651754b8dc953a55939a6bcf", "Url": "https://api.github.com/repos/hayato1234/MoriTwitter", "Date": "2018-02-08T20:11:37Z"},
{"Line": "122=>122", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.orangesunshine.moritwitter.TweetDataBase.changeIsDisable(user.getScreenName(),int)=>com.orangesunshine.moritwitter.TweetDataBase.changeIsDisable(user.getScreenName(),int,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9025/buggy-version/app.src.main.java.com.orangesunshine.moritwitter.FollowList.FollowListMainFragment.java", "BodyUseAPI": [], "Fixed commit": "52087bd2d322a726651754b8dc953a55939a6bcf", "Url": "https://api.github.com/repos/hayato1234/MoriTwitter", "Date": "2018-02-08T20:11:37Z"},
{"Line": "65=>65", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Long.valueOf(java.lang.String)=>java.lang.Long.parseLong(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2133/buggy-version/gobblin-utility.src.main.java.org.apache.gobblin.util.PropertiesUtils.java", "BodyUseAPI": [], "Fixed commit": "71973d1f0b32efcf6f9613b30e57a025e6794da4", "Url": "https://api.github.com/repos/yukuai518/gobblin", "Date": "2018-06-27T23:05:28Z"},
{"Line": "37=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "de.hhu.bsinfo.dxram.job.AbstractJob(<nulltype>)=>de.hhu.bsinfo.dxram.job.AbstractJob()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4517/buggy-version/src.main.java.de.hhu.bsinfo.dxram.job.JobNull.java", "BodyUseAPI": [], "Fixed commit": "68a3ac88352c8ce543db92403e39559a09b08f97", "Url": "https://api.github.com/repos/bur-ak94/dxram", "Date": "2018-09-18T23:41:09Z"},
{"Line": "41=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.microsoft.azure.spring.integration.storage.queue.StorageQueueTemplate(storageQueueFactory)=>new com.microsoft.azure.spring.integration.storage.queue.StorageQueueTemplate(storageQueueClientFactory)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2605/buggy-version/spring-cloud-azure-autoconfigure.src.main.java.com.microsoft.azure.spring.cloud.autoconfigure.storage.AzureStorageQueueAutoConfiguration.java", "BodyUseAPI": [], "Fixed commit": "a20af9e1718b79c646812e3280073d09aaa16a4e", "Url": "https://api.github.com/repos/miaosakurai/spring-cloud-azure", "Date": "2018-08-22T03:27:28Z"},
{"Line": "196=>194", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.content.Context.getSystemService(Context.ALARM_SERVICE)=>com.wix.reactnativenotifications.core.notification.PushNotification.getSystemService(Context.ALARM_SERVICE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3047/buggy-version/android.src.main.java.com.wix.reactnativenotifications.core.notification.PushNotification.java", "BodyUseAPI": [], "Fixed commit": "9ff898e19c6b00d4531d8b287ee891e448a7e62d", "Url": "https://api.github.com/repos/nodejsaber/react-native-notifications", "Date": "2018-04-16T06:53:04Z"},
{"Line": "22=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.app.NotificationManager.notify(int,com.wix.reactnativenotifications.core.Notification)=>android.app.NotificationManager.notify(int,android.app.Notification)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3047/buggy-version/android.src.main.java.com.wix.reactnativenotifications.core.NotificationScheduler.java", "BodyUseAPI": [], "Fixed commit": "9ff898e19c6b00d4531d8b287ee891e448a7e62d", "Url": "https://api.github.com/repos/nodejsaber/react-native-notifications", "Date": "2018-04-16T06:53:04Z"},
{"Line": "70=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "rbccps.smartcity.IDEAM.registerapi.parser.deleteEntityJSONParser.setEntityID(jsonObject.get(\"id\").getAsString())=>jsonObject.get(\"id\").getAsString().toLowerCase()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3755/buggy-version/src.rbccps.smartcity.IDEAM.registerapi.parser.deleteEntityJSONParser.java", "BodyUseAPI": [], "Fixed commit": "a1a098ec03f749efa1278cea8c4adfee8dcb3b58", "Url": "https://api.github.com/repos/rbccps-iisc/ManagementAPI", "Date": "2018-09-17T11:44:48Z"},
{"Line": "40=>40", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "rbccps.smartcity.IDEAM.registerapi.parser.entity.setEntityID(entitySchemaObject.get(\"id\").toString())=>entitySchemaObject.get(\"id\").toString().toLowerCase()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3755/buggy-version/src.rbccps.smartcity.IDEAM.registerapi.parser.createEntitySchemaParser.java", "BodyUseAPI": [], "Fixed commit": "a1a098ec03f749efa1278cea8c4adfee8dcb3b58", "Url": "https://api.github.com/repos/rbccps-iisc/ManagementAPI", "Date": "2018-09-17T11:44:48Z"},
{"Line": "895=>901", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.JTextArea.append(java.lang.String)=>userInterface.AccountingGUI.updateStatus(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7282/buggy-version/userInterface.AccountingGUI.java", "BodyUseAPI": [], "Fixed commit": "23a9f2227340067f55db9c82fc2008b347753b04", "Url": "https://api.github.com/repos/ittnas/accounting", "Date": "2018-08-23T12:13:42Z"},
{"Line": "32=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Robot.oi.controller1.getRawAxis(RobotMap.Y_AxisL)=>Robot.oi.controller1.getRawAxis(RobotMap.X_AxisL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6705/buggy-version/src.org.usfirst.frc.team3539.robot.commands.DriveCommand.java", "BodyUseAPI": [], "Fixed commit": "c3147a0ba0d8c53e6b5240949c8a91d1692048ef", "Url": "https://api.github.com/repos/BytingBulldogs3539/Stronghold-2016", "Date": "2018-01-13T17:03:39Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Robot.oi.controller1.getRawAxis(RobotMap.X_AxisR)=>Robot.oi.controller1.getRawAxis(RobotMap.LEFT_TRIGGER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6705/buggy-version/src.org.usfirst.frc.team3539.robot.commands.DriveCommand.java", "BodyUseAPI": [], "Fixed commit": "c3147a0ba0d8c53e6b5240949c8a91d1692048ef", "Url": "https://api.github.com/repos/BytingBulldogs3539/Stronghold-2016", "Date": "2018-01-13T17:03:39Z"},
{"Line": "32=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.print(Robot.oi.controller1.getRawAxis(RobotMap.Y_AxisL))=>Robot.driveTrain.driveArcade(double,Robot.oi.controller1.getRawAxis(RobotMap.X_AxisL))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6705/buggy-version/src.org.usfirst.frc.team3539.robot.commands.DriveCommand.java", "BodyUseAPI": [], "Fixed commit": "c3147a0ba0d8c53e6b5240949c8a91d1692048ef", "Url": "https://api.github.com/repos/BytingBulldogs3539/Stronghold-2016", "Date": "2018-01-13T17:03:39Z"},
{"Line": "57=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.minecraft.client.util.RecipeItemHelper.pack(net.minecraft.item.ItemStack)=>Item.REGISTRY.getIDForObject(input.getItem())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/887/buggy-version/src.main.java.motherlode.recipe.ingredient.OreIngredient.java", "BodyUseAPI": [], "Fixed commit": "10df592ba5b142d4e62561df71fe3384d2fd4084", "Url": "https://api.github.com/repos/MotherlodeMod/Motherlode", "Date": "2018-07-27T19:17:37Z"},
{"Line": "40=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "app.order.Order.getId()=>app.order.OrderController.getOrderById(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5744/buggy-version/src.main.java.app.order.OrderController.java", "BodyUseAPI": [], "Fixed commit": "041d53bab21bdc656efeaf1bb0fccffb24360619", "Url": "https://api.github.com/repos/Kalk88/BeaverCoffee", "Date": "2018-06-01T14:13:09Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "app.employee.Employee.getId()=>app.employee.EmployeeController.getEmployeeById(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5744/buggy-version/src.main.java.app.employee.EmployeeController.java", "BodyUseAPI": [], "Fixed commit": "041d53bab21bdc656efeaf1bb0fccffb24360619", "Url": "https://api.github.com/repos/Kalk88/BeaverCoffee", "Date": "2018-06-01T14:13:09Z"},
{"Line": "16=>17", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "me.pushkaranand.simplebudget.DatabaseHelper.getInstance(me.pushkaranand.simplebudget.ResetSpendService)=>me.pushkaranand.simplebudget.DatabaseHelper.getInstance(getApplicationContext())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8709/buggy-version/app.src.main.java.me.pushkaranand.simplebudget.ResetSpendService.java", "BodyUseAPI": [], "Fixed commit": "e73c0c0f6f474ee73fcd1d2228ac8856737ebcd7", "Url": "https://api.github.com/repos/pushkar-anand/simple-budget", "Date": "2018-01-30T10:11:04Z"},
{"Line": "180=>181", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "me.pushkaranand.simplebudget.ResetSpends.execute(me.pushkaranand.simplebudget.TagsActivity)=>me.pushkaranand.simplebudget.TagsActivity.startService(android.content.Intent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8709/buggy-version/app.src.main.java.me.pushkaranand.simplebudget.TagsActivity.java", "BodyUseAPI": [], "Fixed commit": "e73c0c0f6f474ee73fcd1d2228ac8856737ebcd7", "Url": "https://api.github.com/repos/pushkar-anand/simple-budget", "Date": "2018-01-30T10:11:04Z"},
{"Line": "236=>237", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "me.pushkaranand.simplebudget.ResetSpends.execute(me.pushkaranand.simplebudget.MainActivity)=>me.pushkaranand.simplebudget.MainActivity.startService(android.content.Intent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8709/buggy-version/app.src.main.java.me.pushkaranand.simplebudget.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "e73c0c0f6f474ee73fcd1d2228ac8856737ebcd7", "Url": "https://api.github.com/repos/pushkar-anand/simple-budget", "Date": "2018-01-30T10:11:04Z"},
{"Line": "69=>71", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getResources().getString(R.string.standard_foods)=>getResources().getString(R.string.standard_foods_f)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9642/buggy-version/app.src.main.java.com.lucazanrosso.anguriara.DayFragment.java", "BodyUseAPI": [], "Fixed commit": "0150277192019631d69285172e0d36736d7bb35a", "Url": "https://api.github.com/repos/lucazanrosso/Anguriara", "Date": "2018-06-17T20:01:42Z"},
{"Line": "40=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.hendisantika.carrestservice.repository.CarRepository.findDistinctByBrand(java.lang.String)=>com.hendisantika.carrestservice.repository.CarRepository.getBrand(org.springframework.data.domain.Pageable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1846/buggy-version/src.main.java.com.hendisantika.carrestservice.controller.CarController.java", "BodyUseAPI": [], "Fixed commit": "b06a587241972115fdbaad757c25f84e21fa0c4c", "Url": "https://api.github.com/repos/hendisantika/car-rest-service", "Date": "2018-01-13T03:07:57Z"},
{"Line": "40=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.hendisantika.carrestservice.repository.CarRepository.findDistinctByBrand(java.lang.String)=>com.hendisantika.carrestservice.repository.CarRepository.getBrand(org.springframework.data.domain.Pageable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1846/buggy-version/src.main.java.com.hendisantika.carrestservice.controller.CarController.java", "BodyUseAPI": [], "Fixed commit": "b06a587241972115fdbaad757c25f84e21fa0c4c", "Url": "https://api.github.com/repos/hendisantika/car-rest-service", "Date": "2018-01-13T03:07:57Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Compiler.Parser.ParseTokens.Statement.CompoundStatement.print()=>Compiler.Parser.ParseTokens.Statement.CompoundStatement.print(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9314/buggy-version/CMinusCompiler.src.Compiler.Parser.ParseTokens.Declaration.FunctionDeclaration.java", "BodyUseAPI": [], "Fixed commit": "7130634e80c60ce8b6d3e8b2b4b63ecc91e694e5", "Url": "https://api.github.com/repos/alchemyfordummies/Compiler-project", "Date": "2018-03-21T16:32:35Z"},
{"Line": "183=>183", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.vlingo.auth.model.Permission.constraints()=>io.vlingo.auth.infra.resource.PermissionData.from(io.vlingo.auth.model.Permission)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6936/buggy-version/src.main.java.io.vlingo.auth.infra.resource.RoleResource.java", "BodyUseAPI": [], "Fixed commit": "9dee2cfecd6e23a7237158be96e5725261b6ff4d", "Url": "https://api.github.com/repos/vlingo/vlingo-auth", "Date": "2018-04-24T21:34:23Z"},
{"Line": "118=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.ung.phys.histo.Histogram.fill(java.lang.Double[])=>edu.ung.phys.histo.Histogram.fill(java.util.ArrayList<java.lang.Double>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8937/buggy-version/src.main.java.edu.ung.phys.histo.Histogram.java", "BodyUseAPI": [], "Fixed commit": "e6b5fcdb1dc02f6a7cf3c9385fcc6aea3f92990b", "Url": "https://api.github.com/repos/naharrison/UNG-ENPhysics", "Date": "2018-02-09T18:11:07Z"},
{"Line": "52=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Endpoint.Builder.port(short)=>Endpoint.Builder.port(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4883/buggy-version/zipkin.src.main.java.zipkin2.internal.ThriftEndpointCodec.java", "BodyUseAPI": [], "Fixed commit": "68a16abe6dc6be78051657f0ecd6b8ad54a5fd90", "Url": "https://api.github.com/repos/openzipkin/zipkin", "Date": "2018-07-16T01:24:34Z"},
{"Line": "50=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "main.Singleplayer.main(<nulltype>)=>main.Multiplayer.main(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1411/buggy-version/src.main.Startbildschirm.java", "BodyUseAPI": [], "Fixed commit": "212d6c90a8fbb4d1af9b380afc9e32cce765b9be", "Url": "https://api.github.com/repos/till22G/Programmieren-2-Vier-Gewinnt", "Date": "2018-08-01T13:59:42Z"},
{"Line": "50=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "main.Singleplayer.main(<nulltype>)=>main.Multiplayer.main(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1411/buggy-version/src.main.Startbildschirm.java", "BodyUseAPI": [], "Fixed commit": "212d6c90a8fbb4d1af9b380afc9e32cce765b9be", "Url": "https://api.github.com/repos/till22G/Programmieren-2-Vier-Gewinnt", "Date": "2018-08-01T13:59:42Z"},
{"Line": "54=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "br.edu.ufcg.genus.repositories.SubjectRepository.findByGradeId(java.lang.Long)=>br.edu.ufcg.genus.services.GradeService.findGradeById(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4336/buggy-version/src.main.java.br.edu.ufcg.genus.services.SubjectService.java", "BodyUseAPI": [], "Fixed commit": "0f452af435c65936dcc81403c5c1f8a932627161", "Url": "https://api.github.com/repos/BrenoSouza/genus-back", "Date": "2018-10-09T15:55:02Z"},
{"Line": "54=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "br.edu.ufcg.genus.repositories.SubjectRepository.findByGradeId(java.lang.Long)=>br.edu.ufcg.genus.services.GradeService.findGradeById(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4336/buggy-version/src.main.java.br.edu.ufcg.genus.services.SubjectService.java", "BodyUseAPI": [], "Fixed commit": "0f452af435c65936dcc81403c5c1f8a932627161", "Url": "https://api.github.com/repos/BrenoSouza/genus-back", "Date": "2018-10-09T15:55:02Z"},
{"Line": "73=>73", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "teacher.get().addSubject(subject.get())=>br.edu.ufcg.genus.models.User.addSubject(br.edu.ufcg.genus.models.Subject)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4336/buggy-version/src.main.java.br.edu.ufcg.genus.services.UserService.java", "BodyUseAPI": [], "Fixed commit": "0f452af435c65936dcc81403c5c1f8a932627161", "Url": "https://api.github.com/repos/BrenoSouza/genus-back", "Date": "2018-10-09T15:55:02Z"},
{"Line": "39=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "xyz.czanik.walletapp.data_base.DbHandler.exportTransactionsDataToCSV(java.lang.String)=>xyz.czanik.walletapp.data_base.DbHandler.createTransactionCSV(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/501/buggy-version/app.src.main.java.xyz.czanik.walletapp.activities.ExcelActivity.java", "BodyUseAPI": [], "Fixed commit": "414e92829c1846953f5aab7603fbb3901639842c", "Url": "https://api.github.com/repos/KamilCzanik/WalletApp", "Date": "2018-09-09T19:43:20Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "xyz.czanik.walletapp.data_base.DbHandler.exportTransactionsDataToCSV(java.lang.String)=>xyz.czanik.walletapp.data_base.DbHandler.createTransactionCSV(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/501/buggy-version/app.src.main.java.xyz.czanik.walletapp.activities.ExcelActivity.java", "BodyUseAPI": [], "Fixed commit": "414e92829c1846953f5aab7603fbb3901639842c", "Url": "https://api.github.com/repos/KamilCzanik/WalletApp", "Date": "2018-09-09T19:43:20Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "xyz.czanik.walletapp.data_base.DbHandler.exportTransactionsDataToCSV(java.lang.String)=>xyz.czanik.walletapp.data_base.DbHandler.createTransactionCSV(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/501/buggy-version/app.src.main.java.xyz.czanik.walletapp.activities.ExcelActivity.java", "BodyUseAPI": [], "Fixed commit": "414e92829c1846953f5aab7603fbb3901639842c", "Url": "https://api.github.com/repos/KamilCzanik/WalletApp", "Date": "2018-09-09T19:43:20Z"},
{"Line": "209=>209", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "jodd.io.FileUtil.toFile(java.net.URL)=>jodd.io.FileUtil.toContainerFile(java.net.URL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1827/buggy-version/jodd-core.src.main.java.jodd.util.ClassLoaderUtil.java", "BodyUseAPI": [], "Fixed commit": "3a6be317fe37ab33e6d830b8153f04057385ea50", "Url": "https://api.github.com/repos/oblac/jodd", "Date": "2018-01-25T21:57:51Z"},
{"Line": "253=>253", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "jodd.io.FileUtil.toFile(java.net.URL)=>jodd.io.FileUtil.toContainerFile(java.net.URL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1827/buggy-version/jodd-core.src.main.java.jodd.io.findfile.FindFile.java", "BodyUseAPI": [], "Fixed commit": "3a6be317fe37ab33e6d830b8153f04057385ea50", "Url": "https://api.github.com/repos/oblac/jodd", "Date": "2018-01-25T21:57:51Z"},
{"Line": "355=>355", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.location.Location.getTime()=>java.lang.System.currentTimeMillis()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8395/buggy-version/app.src.main.java.com.example.davea.mapping_gps.MapsActivity.java", "BodyUseAPI": [], "Fixed commit": "2fd152a9e877f145cdcde5c76243daa832007c9a", "Url": "https://api.github.com/repos/sheppardd1/Mapping_GPS", "Date": "2018-07-10T17:04:21Z"},
{"Line": "355=>355", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.text.SimpleDateFormat.format(location.getTime())=>java.text.SimpleDateFormat.format(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8395/buggy-version/app.src.main.java.com.example.davea.mapping_gps.MapsActivity.java", "BodyUseAPI": [], "Fixed commit": "2fd152a9e877f145cdcde5c76243daa832007c9a", "Url": "https://api.github.com/repos/sheppardd1/Mapping_GPS", "Date": "2018-07-10T17:04:21Z"},
{"Line": "149=>149", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "android.os.Bundle.getSerializable(java.lang.String)=>android.os.Bundle.getParcelable(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7301/buggy-version/app.src.main.java.com.joranbergfeld.popularmovies.movie.MovieDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "9939c4409a7f91bffd9baab1a482306f4af52ce6", "Url": "https://api.github.com/repos/JoranBergfeld/PopularMovies", "Date": "2018-02-21T16:01:15Z"},
{"Line": "19=>19", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashSet<java.lang.String>.add(value.toString())=>java.util.ArrayList<java.lang.String>.add(value.toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2329/buggy-version/p1FindCountMessagesByUser.src.main.java.bigdata.p1FindCountMessagesByUser.FindCountMessagesByUserReducer.java", "BodyUseAPI": [], "Fixed commit": "4d6a93c29d3a4e46b33904ba2bae6a14026c2cdd", "Url": "https://api.github.com/repos/gretchypr/p1MapReduce", "Date": "2018-10-12T04:05:00Z"},
{"Line": "43=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "In.readLine()=>edu.princeton.cs.algs4.In.readLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/698/buggy-version/wordnet.src.WordNet.java", "BodyUseAPI": [], "Fixed commit": "513d19395f385b605bd634c537d3422b87c0b3c3", "Url": "https://api.github.com/repos/gorbenkoav/coursera-algorithms", "Date": "2018-01-24T10:03:59Z"},
{"Line": "29=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.Integer, Queue<java.lang.String>>.put(java.lang.Integer,Queue<java.lang.String>)=>java.util.HashMap<java.lang.Integer, edu.princeton.cs.algs4.Queue<java.lang.String>>.put(java.lang.Integer,edu.princeton.cs.algs4.Queue<java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/698/buggy-version/wordnet.src.WordNet.java", "BodyUseAPI": [], "Fixed commit": "513d19395f385b605bd634c537d3422b87c0b3c3", "Url": "https://api.github.com/repos/gorbenkoav/coursera-algorithms", "Date": "2018-01-24T10:03:59Z"},
{"Line": "33=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.String, Queue<java.lang.Integer>>.put(java.lang.String,Queue)=>java.util.HashMap<java.lang.String, edu.princeton.cs.algs4.Queue<java.lang.Integer>>.put(java.lang.String,edu.princeton.cs.algs4.Queue)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/698/buggy-version/wordnet.src.WordNet.java", "BodyUseAPI": [], "Fixed commit": "513d19395f385b605bd634c537d3422b87c0b3c3", "Url": "https://api.github.com/repos/gorbenkoav/coursera-algorithms", "Date": "2018-01-24T10:03:59Z"},
{"Line": "31=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Queue<java.lang.String>.enqueue(java.lang.String)=>edu.princeton.cs.algs4.Queue<java.lang.String>.enqueue(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/698/buggy-version/wordnet.src.WordNet.java", "BodyUseAPI": [], "Fixed commit": "513d19395f385b605bd634c537d3422b87c0b3c3", "Url": "https://api.github.com/repos/gorbenkoav/coursera-algorithms", "Date": "2018-01-24T10:03:59Z"},
{"Line": "25=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "In.readLine()=>edu.princeton.cs.algs4.In.readLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/698/buggy-version/wordnet.src.WordNet.java", "BodyUseAPI": [], "Fixed commit": "513d19395f385b605bd634c537d3422b87c0b3c3", "Url": "https://api.github.com/repos/gorbenkoav/coursera-algorithms", "Date": "2018-01-24T10:03:59Z"},
{"Line": "49=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "WordNet.isRootedDAG(Digraph)=>WordNet.isRootedDAG(edu.princeton.cs.algs4.Digraph)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/698/buggy-version/wordnet.src.WordNet.java", "BodyUseAPI": [], "Fixed commit": "513d19395f385b605bd634c537d3422b87c0b3c3", "Url": "https://api.github.com/repos/gorbenkoav/coursera-algorithms", "Date": "2018-01-24T10:03:59Z"},
{"Line": "24=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "In.hasNextLine()=>edu.princeton.cs.algs4.In.hasNextLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/698/buggy-version/wordnet.src.WordNet.java", "BodyUseAPI": [], "Fixed commit": "513d19395f385b605bd634c537d3422b87c0b3c3", "Url": "https://api.github.com/repos/gorbenkoav/coursera-algorithms", "Date": "2018-01-24T10:03:59Z"},
{"Line": "45=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Digraph.addEdge(int,int)=>edu.princeton.cs.algs4.Digraph.addEdge(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/698/buggy-version/wordnet.src.WordNet.java", "BodyUseAPI": [], "Fixed commit": "513d19395f385b605bd634c537d3422b87c0b3c3", "Url": "https://api.github.com/repos/gorbenkoav/coursera-algorithms", "Date": "2018-01-24T10:03:59Z"},
{"Line": "42=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "In.hasNextLine()=>edu.princeton.cs.algs4.In.hasNextLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/698/buggy-version/wordnet.src.WordNet.java", "BodyUseAPI": [], "Fixed commit": "513d19395f385b605bd634c537d3422b87c0b3c3", "Url": "https://api.github.com/repos/gorbenkoav/coursera-algorithms", "Date": "2018-01-24T10:03:59Z"},
{"Line": "130=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[static, public] main(java.lang.String[])=>[private] isRootedDAG(edu.princeton.cs.algs4.Digraph)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/698/buggy-version/wordnet.src.WordNet.java", "BodyUseAPI": [], "Fixed commit": "513d19395f385b605bd634c537d3422b87c0b3c3", "Url": "https://api.github.com/repos/gorbenkoav/coursera-algorithms", "Date": "2018-01-24T10:03:59Z"},
{"Line": "81=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.time.OffsetDateTime.now()=>java.time.ZoneId.systemDefault()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/320/buggy-version/src.main.java.de.sephirothj.spring.security.ltpa2.Ltpa2Token.java", "BodyUseAPI": [], "Fixed commit": "a103324feb919ecc3ca5aa66c56cdf4e058f00bc", "Url": "https://api.github.com/repos/sephiroth-j/spring-security-ltpa2-core", "Date": "2018-04-18T18:23:39Z"},
{"Line": "81=>82", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.time.LocalDateTime.ofEpochSecond(long,int,java.time.ZoneOffset)=>java.time.LocalDateTime.ofInstant(java.time.Instant,java.time.ZoneId)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/320/buggy-version/src.main.java.de.sephirothj.spring.security.ltpa2.Ltpa2Token.java", "BodyUseAPI": [], "Fixed commit": "a103324feb919ecc3ca5aa66c56cdf4e058f00bc", "Url": "https://api.github.com/repos/sephiroth-j/spring-security-ltpa2-core", "Date": "2018-04-18T18:23:39Z"},
{"Line": "110=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.time.OffsetDateTime.getOffset()=>java.time.LocalDateTime.atZone(java.time.ZoneId)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/320/buggy-version/src.main.java.de.sephirothj.spring.security.ltpa2.Ltpa2Token.java", "BodyUseAPI": [], "Fixed commit": "a103324feb919ecc3ca5aa66c56cdf4e058f00bc", "Url": "https://api.github.com/repos/sephiroth-j/spring-security-ltpa2-core", "Date": "2018-04-18T18:23:39Z"},
{"Line": "50=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ryon.mutils.ToastUtils.showShort(java.lang.String)=>com.miittech.you.dialog.MsgTipDialog.setMsg(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4326/buggy-version/app.src.main.java.com.miittech.you.activity.device.DeviceAddActivity.java", "BodyUseAPI": [], "Fixed commit": "a846c577e64aaf062dfc179395a62c96e32ffe3c", "Url": "https://api.github.com/repos/luyanian/Miittech", "Date": "2018-06-01T07:13:04Z"},
{"Line": "50=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.ryon.mutils.ToastUtils.showShort(java.lang.String)=>com.miittech.you.dialog.MsgTipDialog.setMsg(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4326/buggy-version/app.src.main.java.com.miittech.you.activity.device.DeviceAddActivity.java", "BodyUseAPI": [], "Fixed commit": "a846c577e64aaf062dfc179395a62c96e32ffe3c", "Url": "https://api.github.com/repos/luyanian/Miittech", "Date": "2018-06-01T07:13:04Z"},
{"Line": "33=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "at.csae0.reactnative.utils.CONFIG_TYPE.valueOf(java.lang.String)=>at.csae0.reactnative.utils.CONFIG_TYPE.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7041/buggy-version/react-native-motionviews.src.main.java.at.csae0.reactnative.model.ScreenConfig.java", "BodyUseAPI": [], "Fixed commit": "4381b52d6518e4ba5865d2b088390ad8ff752c29", "Url": "https://api.github.com/repos/csae0/MotionViews-Android", "Date": "2018-06-29T10:53:56Z"},
{"Line": "188=>200", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.icu.text.NumberFormat.format(double)=>java.text.NumberFormat.format(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8810/buggy-version/app.src.main.java.com.velsol.ems.ems.admin.AddEnquiry.java", "BodyUseAPI": [], "Fixed commit": "d6322ad65571a9d9f9247673bce7a80f8c4d575c", "Url": "https://api.github.com/repos/kumarvelsol/EMS", "Date": "2018-07-21T09:58:38Z"},
{"Line": "24=>24", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.jms.JMSException.printStackTrace()=>org.slf4j.Logger.warn(java.lang.String,javax.jms.JMSException)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3524/buggy-version/src.main.java.hello.Listener.java", "BodyUseAPI": [], "Fixed commit": "df5475e139faef07debba76a46a818f916e0a011", "Url": "https://api.github.com/repos/tonvanbart/gs-messaging-jms-reactive", "Date": "2018-08-19T18:48:06Z"},
{"Line": "81=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/768/buggy-version/src.main.java.com.wisrc.excel.ParseETLXLSXTemplate.java", "BodyUseAPI": [], "Fixed commit": "29479599471156b5e8f0ad883a4e84c8360e6f99", "Url": "https://api.github.com/repos/hzwy23/autoetl", "Date": "2018-01-07T14:23:56Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.eclipse.jface.viewers.TableViewer.setInput(java.util.List<com.eshinetech.bean.SimpleBean>)=>org.eclipse.jface.viewers.TableViewer.setInput(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5132/buggy-version/com.eshinetech.rcp.training.src.com.eshinetech.training.jface.filtertableviewer.Demo4TextFilterTableViewer.java", "BodyUseAPI": [], "Fixed commit": "d595baa7786c658fec9ce536fa17ed91898a7f4a", "Url": "https://api.github.com/repos/JavaRui/com.eshinetech.rcp.training", "Date": "2018-08-13T08:35:55Z"},
{"Line": "40=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bumptech.glide.Glide.with(getContext())=>it.polito.mad.mad2018.utils.GlideApp.with(getContext())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8333/buggy-version/app.src.main.java.it.polito.mad.mad2018.views.BookImageView.java", "BodyUseAPI": [], "Fixed commit": "554e2e3f6b1e8062b59238ae6a950896fd7ab77c", "Url": "https://api.github.com/repos/MobileApplicationDevelopment2018/MAD_Lab03", "Date": "2018-04-24T00:29:48Z"},
{"Line": "40=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.bumptech.glide.Glide.with(getContext())=>it.polito.mad.mad2018.utils.GlideApp.with(getContext())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8333/buggy-version/app.src.main.java.it.polito.mad.mad2018.views.BookImageView.java", "BodyUseAPI": [], "Fixed commit": "554e2e3f6b1e8062b59238ae6a950896fd7ab77c", "Url": "https://api.github.com/repos/MobileApplicationDevelopment2018/MAD_Lab03", "Date": "2018-04-24T00:29:48Z"},
{"Line": "20=>20", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.File.isFile()=>java.io.File.exists()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4847/buggy-version/app.src.main.java.com.github.TwrpBuilder.util.Config.java", "BodyUseAPI": [], "Fixed commit": "42621e5fe0020ab8187e7c364afffb78deae3f0f", "Url": "https://api.github.com/repos/TwrpBuilder/TwrpBuilder", "Date": "2018-04-16T13:16:06Z"},
{"Line": "126=>126", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.twilio.chat.ChatClient.create(com.qbteam.questboard.MainActivity,java.lang.String,ChatClient.Properties,com.twilio.chat.CallbackListener<com.twilio.chat.ChatClient>)=>com.twilio.chat.ChatClient.create(com.qbteam.questboard.TwilioMessaging,java.lang.String,ChatClient.Properties,com.twilio.chat.CallbackListener<com.twilio.chat.ChatClient>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2454/buggy-version/app.src.main.java.com.qbteam.questboard.TwilioMessaging.java", "BodyUseAPI": [], "Fixed commit": "376c9bdd2ffde54b21735d037b5f05fb357b33f1", "Url": "https://api.github.com/repos/mistersalman/QuestBoard", "Date": "2018-03-06T23:56:04Z"},
{"Line": "130=>130", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Toast.makeText(com.qbteam.questboard.MainActivity,R.string.error_retrieving_access_token,Toast.LENGTH_SHORT)=>android.widget.Toast.makeText(com.qbteam.questboard.TwilioMessaging,R.string.error_retrieving_access_token,Toast.LENGTH_SHORT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2454/buggy-version/app.src.main.java.com.qbteam.questboard.TwilioMessaging.java", "BodyUseAPI": [], "Fixed commit": "376c9bdd2ffde54b21735d037b5f05fb357b33f1", "Url": "https://api.github.com/repos/mistersalman/QuestBoard", "Date": "2018-03-06T23:56:04Z"},
{"Line": "62=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "ch.awae.simtrack.controller.tools.DebugToolsRenderer.screenSizeToString()=>ch.awae.simtrack.controller.tools.DebugToolsRenderer.screenSizeToString(ch.awae.simtrack.view.IGameView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7545/buggy-version/src.main.java.ch.awae.simtrack.controller.tools.DebugToolsRenderer.java", "BodyUseAPI": [], "Fixed commit": "d6bc05dd12b137a120e831a4ba409a78dfa4f5f1", "Url": "https://api.github.com/repos/WaDosCh/SimTrack", "Date": "2018-01-29T23:00:31Z"},
{"Line": "64=>63", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "ch.awae.simtrack.controller.tools.DebugToolsRenderer.zoomToString()=>ch.awae.simtrack.controller.tools.DebugToolsRenderer.zoomToString(ch.awae.simtrack.view.IGameView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7545/buggy-version/src.main.java.ch.awae.simtrack.controller.tools.DebugToolsRenderer.java", "BodyUseAPI": [], "Fixed commit": "d6bc05dd12b137a120e831a4ba409a78dfa4f5f1", "Url": "https://api.github.com/repos/WaDosCh/SimTrack", "Date": "2018-01-29T23:00:31Z"},
{"Line": "105=>112", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getPreferenceScreen().removeAll()=>((android.support.v7.widget.ContentFrameLayout) (getActivity().findViewById(android.R.id.content))).removeAllViews()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5122/buggy-version/app.src.main.java.stellarnear.aquene_dealer.Divers.SettingsFragment.java", "BodyUseAPI": [], "Fixed commit": "7c0255bda66191c9ebef05451c7db6e585bd9d63", "Url": "https://api.github.com/repos/StellarNear/Aquene_Dealer", "Date": "2018-07-09T13:51:43Z"},
{"Line": "101=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "stellarnear.aquene_dealer.Divers.SettingsFragment.getPreferenceScreen()=>stellarnear.aquene_dealer.Divers.SettingsFragment.getActivity()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5122/buggy-version/app.src.main.java.stellarnear.aquene_dealer.Divers.SettingsFragment.java", "BodyUseAPI": [], "Fixed commit": "7c0255bda66191c9ebef05451c7db6e585bd9d63", "Url": "https://api.github.com/repos/StellarNear/Aquene_Dealer", "Date": "2018-07-09T13:51:43Z"},
{"Line": "105=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "stellarnear.aquene_dealer.Divers.SettingsFragment.getPreferenceScreen()=>stellarnear.aquene_dealer.Divers.SettingsFragment.getActivity()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5122/buggy-version/app.src.main.java.stellarnear.aquene_dealer.Divers.SettingsFragment.java", "BodyUseAPI": [], "Fixed commit": "7c0255bda66191c9ebef05451c7db6e585bd9d63", "Url": "https://api.github.com/repos/StellarNear/Aquene_Dealer", "Date": "2018-07-09T13:51:43Z"},
{"Line": "101=>107", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getPreferenceScreen().removeAll()=>((android.support.v7.widget.ContentFrameLayout) (getActivity().findViewById(android.R.id.content))).removeAllViews()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5122/buggy-version/app.src.main.java.stellarnear.aquene_dealer.Divers.SettingsFragment.java", "BodyUseAPI": [], "Fixed commit": "7c0255bda66191c9ebef05451c7db6e585bd9d63", "Url": "https://api.github.com/repos/StellarNear/Aquene_Dealer", "Date": "2018-07-09T13:51:43Z"},
{"Line": "38=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.scalecube.services.transport.api.WorkerThreadChooser.getWorker(java.lang.String,java.net.SocketAddress,java.net.SocketAddress,java.util.concurrent.Executor[])=>io.scalecube.services.transport.api.WorkerThreadChooser.getWorker(java.lang.String,java.net.SocketAddress,java.net.SocketAddress,io.netty.util.concurrent.EventExecutor[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5731/buggy-version/rsocket-transport.src.main.java.io.scalecube.services.transport.rsocket.DefaultEventExecutorChooser.java", "BodyUseAPI": [], "Fixed commit": "daaa98ea5e4c45d3063b3cb1f14b75f15377de46", "Url": "https://api.github.com/repos/scalecube/scalecube-services", "Date": "2018-08-26T17:59:14Z"},
{"Line": "71=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "pfbsel.pages.pfb.PFBMainPage.printAffirmativeAssertInforMessage(java.lang.String)=>pfbsel.pages.pfb.PFBMainPage.printAffirmativeAssertInforMessage(((\"Coins betted successfully for user: [\" + (userToRun.username)) + \"]\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7904/buggy-version/PFBSelenium.src.main.java.pfbsel.pages.pfb.PFBMainPage.java", "BodyUseAPI": [], "Fixed commit": "6b239699e0d117b17c2aeaa1148e38cba8e69211", "Url": "https://api.github.com/repos/izhanh/PFBSelenium", "Date": "2018-09-22T14:47:41Z"},
{"Line": "122=>122", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class.forName(java.lang.String)=>java.lang.Thread.currentThread()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2774/buggy-version/src.main.java.liquibase.ext.hibernate.database.HibernateDatabase.java", "BodyUseAPI": [], "Fixed commit": "511657f061f0508e4078d51d3fbf37f9ca48766f", "Url": "https://api.github.com/repos/desiderati/liquibase-hibernate", "Date": "2018-09-12T19:03:40Z"},
{"Line": "210=>210", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class.forName(java.lang.String)=>java.lang.ClassLoader.loadClass(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2774/buggy-version/src.main.java.liquibase.ext.hibernate.database.HibernateDatabase.java", "BodyUseAPI": [], "Fixed commit": "511657f061f0508e4078d51d3fbf37f9ca48766f", "Url": "https://api.github.com/repos/desiderati/liquibase-hibernate", "Date": "2018-09-12T19:03:40Z"},
{"Line": "238=>238", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class.forName(java.lang.String)=>java.lang.ClassLoader.loadClass(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2774/buggy-version/src.main.java.liquibase.ext.hibernate.database.HibernateDatabase.java", "BodyUseAPI": [], "Fixed commit": "511657f061f0508e4078d51d3fbf37f9ca48766f", "Url": "https://api.github.com/repos/desiderati/liquibase-hibernate", "Date": "2018-09-12T19:03:40Z"},
{"Line": "163=>163", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Class.forName(java.lang.String)=>java.lang.ClassLoader.loadClass(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2774/buggy-version/src.main.java.liquibase.ext.hibernate.database.HibernateDatabase.java", "BodyUseAPI": [], "Fixed commit": "511657f061f0508e4078d51d3fbf37f9ca48766f", "Url": "https://api.github.com/repos/desiderati/liquibase-hibernate", "Date": "2018-09-12T19:03:40Z"},
{"Line": "110=>110", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList<org.notice.gui.panels.Skills>.add(org.notice.gui.panels.Skills)=>java.util.ArrayList<org.notice.gui.panels.Skill>.add(org.notice.gui.panels.Skill)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7437/buggy-version/MySkills.src.org.notice.gui.panels.Admin.java", "BodyUseAPI": [], "Fixed commit": "fccd38ac9d93f859fbaf2e86359420c8e6247c4b", "Url": "https://api.github.com/repos/a152534/MySkills", "Date": "2018-01-29T10:40:47Z"},
{"Line": "168=>183", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.contrastsecurity.cassandra.migration.script.CqlStatementBuilder.isCommentDirective()=>com.contrastsecurity.cassandra.migration.script.CqlStatementBuilder.isCommentDirective(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8443/buggy-version/cassandra-migration.src.main.java.com.contrastsecurity.cassandra.migration.script.CqlStatementBuilder.java", "BodyUseAPI": [], "Fixed commit": "556668e43b3713871d12b6a327518b310629c174", "Url": "https://api.github.com/repos/project-sunbird/sunbird-utils", "Date": "2018-01-11T12:48:59Z"},
{"Line": "330=>347", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.contrastsecurity.cassandra.migration.script.CqlStatementBuilder.extractAlternateOpenQuote()=>com.contrastsecurity.cassandra.migration.script.CqlStatementBuilder.extractAlternateOpenQuote(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8443/buggy-version/cassandra-migration.src.main.java.com.contrastsecurity.cassandra.migration.script.CqlStatementBuilder.java", "BodyUseAPI": [], "Fixed commit": "556668e43b3713871d12b6a327518b310629c174", "Url": "https://api.github.com/repos/project-sunbird/sunbird-utils", "Date": "2018-01-11T12:48:59Z"},
{"Line": "164=>179", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.contrastsecurity.cassandra.migration.script.CqlStatementBuilder.changeDelimiterIfNecessary(com.contrastsecurity.cassandra.migration.script.Delimiter)=>com.contrastsecurity.cassandra.migration.script.CqlStatementBuilder.changeDelimiterIfNecessary(java.lang.String,com.contrastsecurity.cassandra.migration.script.Delimiter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8443/buggy-version/cassandra-migration.src.main.java.com.contrastsecurity.cassandra.migration.script.CqlStatementBuilder.java", "BodyUseAPI": [], "Fixed commit": "556668e43b3713871d12b6a327518b310629c174", "Url": "https://api.github.com/repos/project-sunbird/sunbird-utils", "Date": "2018-01-11T12:48:59Z"},
{"Line": "73=>73", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "serveur.Serveur_Socket.broadcastMessages(java.lang.String)=>serveur.Server_Socket.broadcastMessages(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3221/buggy-version/PM6.WYO.src.serveur.Server_Socket.java", "BodyUseAPI": [], "Fixed commit": "53567d121768f6710a1565255944cd9fcaae9afe", "Url": "https://api.github.com/repos/louisreynaud/Projet-L3-Miage-Framework", "Date": "2018-05-08T09:38:12Z"},
{"Line": "10=>10", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "client.Conversation(java.lang.String)=>client.Conversation(int,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3221/buggy-version/PM6.WYO.src.client.Conversation_Groupe.java", "BodyUseAPI": [], "Fixed commit": "53567d121768f6710a1565255944cd9fcaae9afe", "Url": "https://api.github.com/repos/louisreynaud/Projet-L3-Miage-Framework", "Date": "2018-05-08T09:38:12Z"},
{"Line": "10=>10", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "client.Conversation(java.lang.String)=>client.Conversation(int,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3221/buggy-version/PM6.WYO.src.client.Tchat.java", "BodyUseAPI": [], "Fixed commit": "53567d121768f6710a1565255944cd9fcaae9afe", "Url": "https://api.github.com/repos/louisreynaud/Projet-L3-Miage-Framework", "Date": "2018-05-08T09:38:12Z"},
{"Line": "1096=>1096", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.sitewhere.rest.model.device.request.DeviceGroupCreateRequest.setToken(grpc.getToken())=>grpc.getToken().getValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9736/buggy-version/sitewhere-grpc-model.src.main.java.com.sitewhere.grpc.model.converter.DeviceModelConverter.java", "BodyUseAPI": [], "Fixed commit": "035e1536d4ef481a12e64d2c9aabdc694db9f1f6", "Url": "https://api.github.com/repos/sitewhere/sitewhere", "Date": "2018-02-08T17:15:06Z"},
{"Line": "96=>96", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "playerIn.inventory.setInventorySlotContents(playerIn.inventory.currentItem,<nulltype>)=>playerIn.inventory.setInventorySlotContents(playerIn.inventory.currentItem,ItemStack.EMPTY)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7085/buggy-version/src.main.java.am2.common.blocks.BlockInscriptionTable.java", "BodyUseAPI": [], "Fixed commit": "2065fc1bd7014c76ac25fd05f53f54275d59fe1d", "Url": "https://api.github.com/repos/Sqbika/ArsMagica2", "Date": "2018-04-19T10:49:50Z"},
{"Line": "208=>208", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "mRealm.where(org.ole.planet.takeout.Data.realm_myLibrary.class).isNotEmpty(\"userId\").or()=>mRealm.where(org.ole.planet.takeout.Data.realm_myLibrary.class).equalTo(\"resourceOffline\", false).isNotEmpty(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7989/buggy-version/app.src.main.java.org.ole.planet.takeout.DashboardFragment.java", "BodyUseAPI": [], "Fixed commit": "a0081bf9503b9b8e76ba45d38bb71004f8b264cc", "Url": "https://api.github.com/repos/ole-vi/takeout", "Date": "2018-08-08T02:51:32Z"},
{"Line": "208=>208", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "mRealm.where(org.ole.planet.takeout.Data.realm_myLibrary.class).isNotEmpty(java.lang.String)=>mRealm.where(org.ole.planet.takeout.Data.realm_myLibrary.class).equalTo(java.lang.String,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7989/buggy-version/app.src.main.java.org.ole.planet.takeout.DashboardFragment.java", "BodyUseAPI": [], "Fixed commit": "a0081bf9503b9b8e76ba45d38bb71004f8b264cc", "Url": "https://api.github.com/repos/ole-vi/takeout", "Date": "2018-08-08T02:51:32Z"},
{"Line": "208=>208", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "mRealm.where(org.ole.planet.takeout.Data.realm_myLibrary.class).isNotEmpty(\"userId\").or().isNotEmpty(java.lang.String)=>mRealm.where(org.ole.planet.takeout.Data.realm_myLibrary.class).equalTo(\"resourceOffline\", false).isNotEmpty(\"userId\").or()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7989/buggy-version/app.src.main.java.org.ole.planet.takeout.DashboardFragment.java", "BodyUseAPI": [], "Fixed commit": "a0081bf9503b9b8e76ba45d38bb71004f8b264cc", "Url": "https://api.github.com/repos/ole-vi/takeout", "Date": "2018-08-08T02:51:32Z"},
{"Line": "127=>127", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.sql.PreparedStatement.excuteQuery()=>java.sql.PreparedStatement.executeQuery()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5637/buggy-version/src.ReportOperation.java", "BodyUseAPI": [], "Fixed commit": "d70face9bfb14cb9f2fd8ce37513f0ea97fc3283", "Url": "https://api.github.com/repos/Xindi-Li/wolf_inns", "Date": "2018-04-13T23:33:00Z"},
{"Line": "191=>190", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.nio.file.Path.toString()=>java.nio.file.Path.toFile()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7508/buggy-version/src.spinat.oraclescripter.Comparer.java", "BodyUseAPI": [], "Fixed commit": "2a1713e470d5faa6c311a714af68e76957d70746", "Url": "https://api.github.com/repos/raverkamp/oraclescripter", "Date": "2018-03-25T09:35:23Z"},
{"Line": "192=>191", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.nio.file.Path.toString()=>java.lang.ProcessBuilder.start()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7508/buggy-version/src.spinat.oraclescripter.Comparer.java", "BodyUseAPI": [], "Fixed commit": "2a1713e470d5faa6c311a714af68e76957d70746", "Url": "https://api.github.com/repos/raverkamp/oraclescripter", "Date": "2018-03-25T09:35:23Z"},
{"Line": "82=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.jgk.csv.Entity.getAmmount()=>com.jgk.csv.Entity.getAmount()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1003/buggy-version/src.main.java.com.jgk.csv.Entity.java", "BodyUseAPI": [], "Fixed commit": "26e7a9850ba7caab9faac26cf119c3da92ee13ba", "Url": "https://api.github.com/repos/rentworx/gregr", "Date": "2018-01-29T04:25:05Z"},
{"Line": "104=>104", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.jgk.csv.Entity.getAmmount()=>com.jgk.csv.Entity.getAmount()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1003/buggy-version/src.main.java.com.jgk.csv.Entity.java", "BodyUseAPI": [], "Fixed commit": "26e7a9850ba7caab9faac26cf119c3da92ee13ba", "Url": "https://api.github.com/repos/rentworx/gregr", "Date": "2018-01-29T04:25:05Z"},
{"Line": "93=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.jgk.csv.Entity.getAmmount()=>com.jgk.csv.Entity.getAmount()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1003/buggy-version/src.main.java.com.jgk.csv.Entity.java", "BodyUseAPI": [], "Fixed commit": "26e7a9850ba7caab9faac26cf119c3da92ee13ba", "Url": "https://api.github.com/repos/rentworx/gregr", "Date": "2018-01-29T04:25:05Z"},
{"Line": "93=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.jgk.csv.Entity.getAmmount()=>com.jgk.csv.Entity.getAmount()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1003/buggy-version/src.main.java.com.jgk.csv.Entity.java", "BodyUseAPI": [], "Fixed commit": "26e7a9850ba7caab9faac26cf119c3da92ee13ba", "Url": "https://api.github.com/repos/rentworx/gregr", "Date": "2018-01-29T04:25:05Z"},
{"Line": "74=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.jgk.csv.Entity.setAmmount(java.lang.Double)=>com.jgk.csv.Entity.setAmount(java.lang.Double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1003/buggy-version/src.main.java.com.jgk.csv.CSVReader.java", "BodyUseAPI": [], "Fixed commit": "26e7a9850ba7caab9faac26cf119c3da92ee13ba", "Url": "https://api.github.com/repos/rentworx/gregr", "Date": "2018-01-29T04:25:05Z"},
{"Line": "130=>170", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "info.faceland.strife.storage.JsonDataStorage.load(java.util.UUID)=>info.faceland.strife.storage.JsonDataStorage.checkResetAndSetLevels(org.bukkit.configuration.ConfigurationSection,info.faceland.strife.data.ChampionSaveData,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4845/buggy-version/src.main.java.info.faceland.strife.storage.JsonDataStorage.java", "BodyUseAPI": [], "Fixed commit": "071cdd0e02d3c4068210db6c0b1f58cc4c39fd22", "Url": "https://api.github.com/repos/TealCube/strife", "Date": "2018-05-19T04:28:33Z"},
{"Line": "113=>112", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "info.faceland.strife.storage.JsonDataStorage.updateChampion(info.faceland.strife.data.ChampionSaveData,boolean)=>io.pixeloutlaw.minecraft.spigot.config.SmartYamlConfiguration.set((((champ.getUniqueId().toString()) + \".stats.\") + (entry.getKey().getKey())),entry.getValue())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4845/buggy-version/src.main.java.info.faceland.strife.storage.JsonDataStorage.java", "BodyUseAPI": [], "Fixed commit": "071cdd0e02d3c4068210db6c0b1f58cc4c39fd22", "Url": "https://api.github.com/repos/TealCube/strife", "Date": "2018-05-19T04:28:33Z"},
{"Line": "254=>254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javafx.stage.Stage.show()=>javafx.stage.Stage.showAndWait()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6567/buggy-version/src.main.java.seedu.address.MainApp.java", "BodyUseAPI": [], "Fixed commit": "1c9385da0468b4c7aa5a12653ab6b5e690b3dbcf", "Url": "https://api.github.com/repos/CS2103-AY1819S1-T12-2/main", "Date": "2018-10-26T06:58:57Z"},
{"Line": "14=>14", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.springframework.boot.SpringApplication.addListeners(org.springframework.boot.system.ApplicationPidFileWriter)=>org.springframework.boot.SpringApplication.addListeners(org.springframework.boot.context.ApplicationPidFileWriter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1031/buggy-version/copycat-server.src.main.java.al.copycat.CopycatApplication.java", "BodyUseAPI": [], "Fixed commit": "2a32594647812af38d3b7c5387716560013ef938", "Url": "https://api.github.com/repos/joke111/copycat", "Date": "2018-04-02T15:10:55Z"},
{"Line": "37=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.toLowerCase()=>java.lang.String.toLowerCase(java.util.Locale)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4442/buggy-version/cli.ballerina-packerina.src.main.java.org.ballerinalang.packerina.init.models.SrcFile.java", "BodyUseAPI": [], "Fixed commit": "6fa55d53a332d73714e3c6bdc825071f46436d20", "Url": "https://api.github.com/repos/uthaiyashankar/ballerina", "Date": "2018-03-14T14:29:28Z"},
{"Line": "185=>186", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.getBytes()=>java.lang.String.getBytes(java.nio.charset.Charset)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4442/buggy-version/cli.ballerina-packerina.src.main.java.org.ballerinalang.packerina.init.InitHandler.java", "BodyUseAPI": [], "Fixed commit": "6fa55d53a332d73714e3c6bdc825071f46436d20", "Url": "https://api.github.com/repos/uthaiyashankar/ballerina", "Date": "2018-03-14T14:29:28Z"},
{"Line": "655=>655", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.opencron.common.job.Request.request(agent.getHost(),agent.getPort(),Action.PING,agent.getPassword(),<nulltype>,agent.getProxyAgent())=>org.opencron.common.job.Request.request(agent.getHost(),agent.getPort(),Action.PING,agent.getPassword(),Constants.RPC_TIMEOUT,agent.getProxyAgent())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8564/buggy-version/opencron-server.src.main.java.org.opencron.server.service.ExecuteService.java", "BodyUseAPI": [], "Fixed commit": "2162e476eb2aa00d80cf5ba6238dda902fb80170", "Url": "https://api.github.com/repos/wolfboys/JobX-dev", "Date": "2018-03-26T10:39:43Z"},
{"Line": "672=>672", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.opencron.common.job.Request.request(agent.getHost(),agent.getPort(),Action.GUID,agent.getPassword(),<nulltype>,agent.getProxyAgent())=>org.opencron.common.job.Request.request(agent.getHost(),agent.getPort(),Action.GUID,agent.getPassword(),Constants.RPC_TIMEOUT,agent.getProxyAgent())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8564/buggy-version/opencron-server.src.main.java.org.opencron.server.service.ExecuteService.java", "BodyUseAPI": [], "Fixed commit": "2162e476eb2aa00d80cf5ba6238dda902fb80170", "Url": "https://api.github.com/repos/wolfboys/JobX-dev", "Date": "2018-03-26T10:39:43Z"},
{"Line": "95=>102", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.example.chat.mvp.commentlist.CommentListActivity.start(com.example.chat.mvp.commentnotify.CommentNotifyActivity,commentNotifyAdapter.getData(position).getPublicPostBean())=>com.example.chat.mvp.commentlist.CommentListActivity.start(com.example.chat.mvp.commentnotify.CommentNotifyActivity,com.example.chat.bean.post.PublicPostBean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4155/buggy-version/chat.src.main.java.com.example.chat.mvp.commentnotify.CommentNotifyActivity.java", "BodyUseAPI": [], "Fixed commit": "7d2e38828f13f3857e43553d487cbae03eaad582", "Url": "https://api.github.com/repos/HelloChenJinJun/NewFastFrame", "Date": "2018-07-29T03:55:34Z"},
{"Line": "241=>240", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.liferay.portal.kernel.editor.configuration.EditorConfigurationFactoryUtil.getEditorConfiguration(com.liferay.portal.kernel.portlet.PortletIdCodec.decodePortletName(portletDisplay.getId()),java.lang.String,StringPool.BLANK,java.util.Map<java.lang.Object, java.lang.Object>,com.liferay.portal.kernel.theme.ThemeDisplay,com.liferay.portal.kernel.portlet.RequestBackedPortletURLFactoryUtil.create(_renderRequest))=>com.liferay.portal.kernel.editor.configuration.EditorConfigurationFactoryUtil.getEditorConfiguration(com.liferay.portal.kernel.portlet.PortletIdCodec.decodePortletName(portletDisplay.getId()),java.lang.String,StringPool.BLANK,java.util.HashMap<java.lang.String, java.lang.Object>,com.liferay.portal.kernel.theme.ThemeDisplay,com.liferay.portal.kernel.portlet.RequestBackedPortletURLFactoryUtil.create(_renderRequest))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4895/buggy-version/modules.apps.fragment.fragment-display-web.src.main.java.com.liferay.fragment.display.web.internal.display.context.FragmentEntryDisplayContext.java", "BodyUseAPI": [], "Fixed commit": "9e11a167534390884d6a43960d2ca80d3bf489e2", "Url": "https://api.github.com/repos/vsingleton/liferay-portal", "Date": "2018-06-13T14:47:34Z"},
{"Line": "232=>231", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.liferay.portal.kernel.editor.configuration.EditorConfigurationFactoryUtil.getEditorConfiguration(com.liferay.portal.kernel.portlet.PortletIdCodec.decodePortletName(portletDisplay.getId()),java.lang.String,StringPool.BLANK,java.util.Map<java.lang.Object, java.lang.Object>,com.liferay.portal.kernel.theme.ThemeDisplay,com.liferay.portal.kernel.portlet.RequestBackedPortletURLFactoryUtil.create(_renderRequest))=>com.liferay.portal.kernel.editor.configuration.EditorConfigurationFactoryUtil.getEditorConfiguration(com.liferay.portal.kernel.portlet.PortletIdCodec.decodePortletName(portletDisplay.getId()),java.lang.String,StringPool.BLANK,java.util.HashMap<java.lang.String, java.lang.Object>,com.liferay.portal.kernel.theme.ThemeDisplay,com.liferay.portal.kernel.portlet.RequestBackedPortletURLFactoryUtil.create(_renderRequest))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4895/buggy-version/modules.apps.fragment.fragment-display-web.src.main.java.com.liferay.fragment.display.web.internal.display.context.FragmentEntryDisplayContext.java", "BodyUseAPI": [], "Fixed commit": "9e11a167534390884d6a43960d2ca80d3bf489e2", "Url": "https://api.github.com/repos/vsingleton/liferay-portal", "Date": "2018-06-13T14:47:34Z"},
{"Line": "137=>139", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.app.ProgressDialog.setMessage(java.lang.String)=>android.app.ProgressDialog.setMessage(((getResources().getString(R.string.user_register_text)) + \"...\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/865/buggy-version/app.src.main.java.com.optic.simpleblog.activities.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "6ee1d726537e415b5dbf5c71452f23bea07d2297", "Url": "https://api.github.com/repos/jonathangoyes96/SimpleBlog", "Date": "2018-06-08T23:15:40Z"},
{"Line": "216=>217", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Toast.makeText(com.optic.simpleblog.activities.LoginActivity,java.lang.String,Toast.LENGTH_SHORT)=>android.widget.Toast.makeText(com.optic.simpleblog.activities.LoginActivity,R.string.login_fail_text,Toast.LENGTH_SHORT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/865/buggy-version/app.src.main.java.com.optic.simpleblog.activities.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "6ee1d726537e415b5dbf5c71452f23bea07d2297", "Url": "https://api.github.com/repos/jonathangoyes96/SimpleBlog", "Date": "2018-06-08T23:15:40Z"},
{"Line": "322=>322", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.location.LocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,int,int,android.location.LocationListener)=>android.location.LocationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,int,int,android.location.LocationListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2933/buggy-version/app.src.main.java.it.unisa.runnerapp.fragments.AdsActiveFragment.java", "BodyUseAPI": [], "Fixed commit": "d24be96dacf1ee1ed1710129043282170d41ee58", "Url": "https://api.github.com/repos/paolo2796/RunnerApp", "Date": "2018-02-20T12:10:07Z"},
{"Line": "93=>93", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "xyz.blueberrypancake.srp.Reinforcement.getKey(org.bukkit.block.Block,byte)=>xyz.blueberrypancake.srp.Reinforcement.getKey()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1930/buggy-version/src.xyz.blueberrypancake.srp.ReinforcementListener.java", "BodyUseAPI": [], "Fixed commit": "4ecd314fef105c2368c6090647fc2a17a02f5fca", "Url": "https://api.github.com/repos/qubard/spigot-reinforcement-plugin", "Date": "2018-08-09T11:33:46Z"},
{"Line": "33=>33", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "utils.LinkUtil.getDateLink(com.rdc.android_test_app_b.Link)=>com.rdc.android_test_app_b.models.Link.getCreatedAt()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2945/buggy-version/app.src.main.java.utils.DownloadImage.java", "BodyUseAPI": [], "Fixed commit": "1b620c5c8a2016c5d5f44a90f25f936ad7a43a63", "Url": "https://api.github.com/repos/StasKuzichev/android_test_app_B", "Date": "2018-07-22T11:36:02Z"},
{"Line": "27=>27", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.rdc.android_test_app_b.Link.getURL()=>com.rdc.android_test_app_b.models.Link.getUrl()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2945/buggy-version/app.src.main.java.utils.DownloadImage.java", "BodyUseAPI": [], "Fixed commit": "1b620c5c8a2016c5d5f44a90f25f936ad7a43a63", "Url": "https://api.github.com/repos/StasKuzichev/android_test_app_B", "Date": "2018-07-22T11:36:02Z"},
{"Line": "10=>11", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.rdc.android_test_app_b.Link.getDate()=>com.rdc.android_test_app_b.models.Link.getCreatedAt()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2945/buggy-version/app.src.main.java.utils.LinkUtil.java", "BodyUseAPI": [], "Fixed commit": "1b620c5c8a2016c5d5f44a90f25f936ad7a43a63", "Url": "https://api.github.com/repos/StasKuzichev/android_test_app_B", "Date": "2018-07-22T11:36:02Z"},
{"Line": "61=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.github.tnerevival.core.api.MojangAPI.getPlayerUUID(java.lang.String)=>org.bukkit.Bukkit.getOfflinePlayer(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9657/buggy-version/src.com.github.tnerevival.user.IDFinder.java", "BodyUseAPI": [], "Fixed commit": "57f164f5e13a25d27093e8d27437c765b911f396", "Url": "https://api.github.com/repos/TheNewEconomy/TNELib", "Date": "2018-04-28T16:38:31Z"},
{"Line": "160=>160", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.github.tnerevival.core.api.MojangAPI.getPlayerUUID(java.lang.String)=>org.bukkit.Bukkit.getOfflinePlayer(identifier).getUniqueId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9657/buggy-version/src.com.github.tnerevival.user.IDFinder.java", "BodyUseAPI": [], "Fixed commit": "57f164f5e13a25d27093e8d27437c765b911f396", "Url": "https://api.github.com/repos/TheNewEconomy/TNELib", "Date": "2018-04-28T16:38:31Z"},
{"Line": "61=>61", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.github.tnerevival.core.api.MojangAPI.getPlayerUUID(java.lang.String)=>org.bukkit.Bukkit.getOfflinePlayer(name).getUniqueId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9657/buggy-version/src.com.github.tnerevival.user.IDFinder.java", "BodyUseAPI": [], "Fixed commit": "57f164f5e13a25d27093e8d27437c765b911f396", "Url": "https://api.github.com/repos/TheNewEconomy/TNELib", "Date": "2018-04-28T16:38:31Z"},
{"Line": "77=>77", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "((com.example.maedin.mohagee.activity.MainActivity) (v.getContext())).changeDatailFragment(placeList.get(pos).getId(),android.support.v4.app.Fragment)=>((com.example.maedin.mohagee.activity.MainActivity) (v.getContext())).changeDatailFragment(placeList.get(pos).getId(),com.example.maedin.mohagee.fragment.PlaceFragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2360/buggy-version/MOHAGEE.app.src.main.java.com.example.maedin.mohagee.adapter.CategoryListAdapter.java", "BodyUseAPI": [], "Fixed commit": "59c935e93d1ff15e26ded0d8c3ab072cf493df20", "Url": "https://api.github.com/repos/maejinkim/KHUveloper_MOHAGEE", "Date": "2018-10-31T18:38:47Z"},
{"Line": "64=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "jordan_jefferson.com.oncallphonemanager.ContactListFragment.getInstance(boolean)=>jordan_jefferson.com.oncallphonemanager.ContactListFragment.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8763/buggy-version/app.src.main.java.jordan_jefferson.com.oncallphonemanager.ContactInfoFragment.java", "BodyUseAPI": [], "Fixed commit": "ded6dfc3216f6a8621de871444b9dd5b5f28e489", "Url": "https://api.github.com/repos/hallsjj08/on-call-manager", "Date": "2018-05-17T13:14:41Z"},
{"Line": "104=>106", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.jogamp.opengl.GLProfile.getDefaultDevice()=>com.jogamp.opengl.GLProfile.get(GLProfile.GL2ES2)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2372/buggy-version/graphics-by-opengl-jogl.src.main.java.com.nucleus.jogl.JOGLGLWindow.java", "BodyUseAPI": [], "Fixed commit": "b6b877920f44e6e42bfa016a375ef9020bc07e5b", "Url": "https://api.github.com/repos/rsahlin/graphics-by-opengl", "Date": "2018-02-26T18:26:05Z"},
{"Line": "18=>18", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "registry.addMapping(\"/**\").allowedMethods(java.lang.String,java.lang.String)=>registry.addMapping(\"/**\").allowedMethods(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4349/buggy-version/src.main.java.com.jimo.security.WebConfig.java", "BodyUseAPI": [], "Fixed commit": "cf4636f8116ffb75b2ef6bfcce7842b5e955ca8f", "Url": "https://api.github.com/repos/jimolonely/AuthServer", "Date": "2018-08-28T01:54:06Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "registry.addMapping(\"/**\").allowedMethods(java.lang.String,java.lang.String)=>registry.addMapping(\"/**\").allowedMethods(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4349/buggy-version/src.main.java.com.jimo.security.WebConfig.java", "BodyUseAPI": [], "Fixed commit": "cf4636f8116ffb75b2ef6bfcce7842b5e955ca8f", "Url": "https://api.github.com/repos/jimolonely/AuthServer", "Date": "2018-08-28T01:54:06Z"},
{"Line": "18=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.servlet.http.HttpServletRequest.getHeader(java.lang.String)=>javax.servlet.http.HttpServletRequest.getParameter(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4349/buggy-version/src.main.java.com.jimo.security.JwtInterceptor.java", "BodyUseAPI": [], "Fixed commit": "cf4636f8116ffb75b2ef6bfcce7842b5e955ca8f", "Url": "https://api.github.com/repos/jimolonely/AuthServer", "Date": "2018-08-28T01:54:06Z"},
{"Line": "103=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "saturday.domain.Entity.getPassword()=>org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5872/buggy-version/src.main.java.saturday.services.EntityServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "a4a6c428a32a5c4dd996ee33afe95bbe36d24b79", "Url": "https://api.github.com/repos/zachjustice/saturday", "Date": "2018-06-02T23:34:09Z"},
{"Line": "103=>107", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(updatedEntity.getPassword())=>org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5872/buggy-version/src.main.java.saturday.services.EntityServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "a4a6c428a32a5c4dd996ee33afe95bbe36d24b79", "Url": "https://api.github.com/repos/zachjustice/saturday", "Date": "2018-06-02T23:34:09Z"},
{"Line": "84=>84", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "saturday.services.EntityServiceImpl.updateEntity(saturday.domain.Entity)=>saturday.services.EntityServiceImpl.updateEntity(saturday.domain.Entity,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5872/buggy-version/src.main.java.saturday.controllers.EntityController.java", "BodyUseAPI": [], "Fixed commit": "a4a6c428a32a5c4dd996ee33afe95bbe36d24b79", "Url": "https://api.github.com/repos/zachjustice/saturday", "Date": "2018-06-02T23:34:09Z"},
{"Line": "74=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.chris.memegenerator.util.FavoritesHandler.commit(com.example.chris.memegenerator.MemeApplication)=>com.example.chris.memegenerator.util.FavoritesHandler.commit()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9806/buggy-version/app.src.main.java.com.example.chris.memegenerator.MemeApplication.java", "BodyUseAPI": [], "Fixed commit": "2f65801ef32476f0a3efb4d9b7d8d50720c00998", "Url": "https://api.github.com/repos/adydimena/MemeGenerator", "Date": "2018-01-10T22:49:22Z"},
{"Line": "85=>86", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "ca.ualbert.cs.tasko.RootActivity.findViewById(R.id.username)=>navigationView.getHeaderView(0).findViewById(R.id.MenuUsername)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6035/buggy-version/app.src.main.java.ca.ualbert.cs.tasko.RootActivity.java", "BodyUseAPI": [], "Fixed commit": "458bdb98f27e9fd9e44d0050f1ac45e22a9ff79f", "Url": "https://api.github.com/repos/CMPUT301W18T14/PraiseTheSun", "Date": "2018-03-24T23:40:48Z"},
{"Line": "85=>86", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "ca.ualbert.cs.tasko.RootActivity.findViewById(R.id.username)=>navigationView.getHeaderView(0).findViewById(R.id.MenuUsername)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6035/buggy-version/app.src.main.java.ca.ualbert.cs.tasko.RootActivity.java", "BodyUseAPI": [], "Fixed commit": "458bdb98f27e9fd9e44d0050f1ac45e22a9ff79f", "Url": "https://api.github.com/repos/CMPUT301W18T14/PraiseTheSun", "Date": "2018-03-24T23:40:48Z"},
{"Line": "126=>128", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.apache.log4j.Logger.warn(java.lang.String)=>org.apache.log4j.Logger.warn((((((\"write heartbeat failed: \" + result) + \", try: \") + i) + \" of \") + (_heartBeatUpdateMaxTries)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9107/buggy-version/plugins.hypervisors.kvm.src.com.cloud.hypervisor.kvm.resource.KVMHAMonitor.java", "BodyUseAPI": [], "Fixed commit": "0dc94f57cfa3bfe3bfbada2f0f77e806683e7f80", "Url": "https://api.github.com/repos/Slair1/cloudstack", "Date": "2018-02-28T00:36:35Z"},
{"Line": "118=>118", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.EditText.setVisibility(View.GONE)=>android.widget.EditText.setVisibility(View.VISIBLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9010/buggy-version/app.src.main.java.com.example.android.tretyakovgalleryquiz.ResultFragment.java", "BodyUseAPI": [], "Fixed commit": "0b7ba0a7f996106e95bd221aa4a99f0f6a4c4787", "Url": "https://api.github.com/repos/kazakovaNet/TretyakovGalleryQuiz", "Date": "2018-02-04T18:29:13Z"},
{"Line": "152=>152", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "YcodeEncryptionHelper.EncryptResponse.getSign()=>EncryptionHelper.EncryptResponse.getSign()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6202/buggy-version/gateway.cloudx-gateway-server.src.main.java.xyz.vopen.tiffany.zuul.server.filter.ZuulFiltersConfiguration.java", "BodyUseAPI": [], "Fixed commit": "124c9a119dbb75770ac6cf4570130afd2966ec8e", "Url": "https://api.github.com/repos/CiNC0/Tiffany", "Date": "2018-04-26T02:51:30Z"},
{"Line": "307=>307", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "xyz.vopen.tiffany.common.security.YcodeEncryptionHelper.checkClientRequestParamsSign(java.util.Map<java.lang.String, java.lang.String[]>,java.lang.String,java.lang.String)=>xyz.vopen.tiffany.common.security.EncryptionHelper.checkClientRequestParamsSign(java.util.Map<java.lang.String, java.lang.String[]>,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6202/buggy-version/gateway.cloudx-gateway-server.src.main.java.xyz.vopen.tiffany.zuul.server.filter.ZuulFiltersConfiguration.java", "BodyUseAPI": [], "Fixed commit": "124c9a119dbb75770ac6cf4570130afd2966ec8e", "Url": "https://api.github.com/repos/CiNC0/Tiffany", "Date": "2018-04-26T02:51:30Z"},
{"Line": "146=>146", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "xyz.vopen.tiffany.common.security.YcodeEncryptionHelper.encryptResponse(java.lang.String,java.lang.String)=>xyz.vopen.tiffany.common.security.EncryptionHelper.encryptResponse(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6202/buggy-version/gateway.cloudx-gateway-server.src.main.java.xyz.vopen.tiffany.zuul.server.filter.ZuulFiltersConfiguration.java", "BodyUseAPI": [], "Fixed commit": "124c9a119dbb75770ac6cf4570130afd2966ec8e", "Url": "https://api.github.com/repos/CiNC0/Tiffany", "Date": "2018-04-26T02:51:30Z"},
{"Line": "149=>149", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "YcodeEncryptionHelper.EncryptResponse.getResponse()=>EncryptionHelper.EncryptResponse.getResponse()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6202/buggy-version/gateway.cloudx-gateway-server.src.main.java.xyz.vopen.tiffany.zuul.server.filter.ZuulFiltersConfiguration.java", "BodyUseAPI": [], "Fixed commit": "124c9a119dbb75770ac6cf4570130afd2966ec8e", "Url": "https://api.github.com/repos/CiNC0/Tiffany", "Date": "2018-04-26T02:51:30Z"},
{"Line": "1373=>1373", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "cz.mzk.recordmanager.server.metadata.MetadataMarcRecord.isBraill()=>cz.mzk.recordmanager.server.metadata.MetadataMarcRecord.isBlindBraille()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5014/buggy-version/cz.mzk.recordmanager.server.src.main.java.cz.mzk.recordmanager.server.metadata.MetadataMarcRecord.java", "BodyUseAPI": [], "Fixed commit": "db3a17fb6a87f90cddcdd9cc588fca9d7f5a24e9", "Url": "https://api.github.com/repos/moravianlibrary/RecordManager2", "Date": "2018-03-07T11:03:16Z"},
{"Line": "114=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "objective.taskboard.domain.TeamFilterConfiguration.getId()=>objective.taskboard.domain.TeamFilterConfiguration.getTeamId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6986/buggy-version/src.main.java.objective.taskboard.controller.ProjectController.java", "BodyUseAPI": [], "Fixed commit": "d93b6ed662867905db0737bdd4c8822e1514d0f5", "Url": "https://api.github.com/repos/objective-solutions/taskboard", "Date": "2018-08-31T17:46:21Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.HashMap<java.lang.Integer, com.entity.ItemRateCollect.ItemRate>.remove(java.lang.Integer)=>java.util.HashMap<java.lang.Integer, com.entity.ItemRateCollect.ItemRate>.get(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6443/buggy-version/RecomSystem.src.com.entity.ItemRateCollect.java", "BodyUseAPI": [], "Fixed commit": "6cccfebc94ce53ecdb61ad40f73cb25567c2c9e6", "Url": "https://api.github.com/repos/wajiyu/RecommandSystem", "Date": "2018-04-03T11:10:59Z"},
{"Line": "1128=>1130", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[static, private] maybeIsRange(java.lang.String)=>[static, private] maybeIsRange(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1581/buggy-version/DEV.org.openl.rules.src.org.openl.rules.dt.DecisionTableHelper.java", "BodyUseAPI": [], "Fixed commit": "e68711dec4cdfcd1e8922339999f4057defbad81", "Url": "https://api.github.com/repos/openl-tablets/openl-tablets", "Date": "2018-01-18T19:57:26Z"},
{"Line": "101=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.cn.bent.sports.widget.OneTaskFinishDialog.setRecyData(com.cn.bent.sports.bean.TeamGame,com.cn.bent.sports.bean.GamePotins)=>com.cn.bent.sports.widget.OneTaskFinishDialog.getMemberInfo()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7403/buggy-version/app.src.main.java.com.cn.bent.sports.widget.OneTaskFinishDialog.java", "BodyUseAPI": [], "Fixed commit": "e1aa38c728191c610a0fb2bbe34e7a561ad99a33", "Url": "https://api.github.com/repos/cd031116/BentSports", "Date": "2018-04-19T06:44:10Z"},
{"Line": "106=>180", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.cn.bent.sports.api.BaseApi.getJavaLoginDefaultService(mContext).getPointTask(teamGame.getId(), gamePoints.getId()).map(new com.zhl.network.huiqu.JavaRxFunction<java.util.List<com.cn.bent.sports.bean.GameTeamScoreEntity>>()).compose(com.zhl.network.RxSchedulers.<java.util.List<com.cn.bent.sports.bean.GameTeamScoreEntity>>io_main()).subscribe(com.zhl.network.RxObserver<java.util.List<com.cn.bent.sports.bean.GameTeamScoreEntity>>)=>com.cn.bent.sports.api.BaseApi.getJavaLoginDefaultService(mContext).getPointTask(teamGame.getId(), gamePoints.getId()).map(new com.zhl.network.huiqu.JavaRxFunction<java.util.List<com.cn.bent.sports.bean.GameTeamScoreEntity>>()).compose(com.zhl.network.RxSchedulers.<java.util.List<com.cn.bent.sports.bean.GameTeamScoreEntity>>io_main()).subscribe(com.zhl.network.RxObserver<java.util.List<com.cn.bent.sports.bean.GameTeamScoreEntity>>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7403/buggy-version/app.src.main.java.com.cn.bent.sports.widget.OneTaskFinishDialog.java", "BodyUseAPI": [], "Fixed commit": "e1aa38c728191c610a0fb2bbe34e7a561ad99a33", "Url": "https://api.github.com/repos/cd031116/BentSports", "Date": "2018-04-19T06:44:10Z"},
{"Line": "161=>240", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.util.Comparator<com.cn.bent.sports.bean.MemberDataEntity>() { @java.lang.Override public int compare(com.cn.bent.sports.bean.MemberDataEntity user1, com.cn.bent.sports.bean.MemberDataEntity user2) { java.lang.Integer id1 = user1.getScore(); java.lang.Integer id2 = user2.getScore(); return id2.compareTo(id1); } }=>new java.util.Comparator<com.cn.bent.sports.bean.MemberDataEntity>() { @java.lang.Override public int compare(com.cn.bent.sports.bean.MemberDataEntity user1, com.cn.bent.sports.bean.MemberDataEntity user2) { java.lang.Integer id1 = user1.getScore(); java.lang.Integer id2 = user2.getScore(); return id2.compareTo(id1); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7403/buggy-version/app.src.main.java.com.cn.bent.sports.widget.OneTaskFinishDialog.java", "BodyUseAPI": [], "Fixed commit": "e1aa38c728191c610a0fb2bbe34e7a561ad99a33", "Url": "https://api.github.com/repos/cd031116/BentSports", "Date": "2018-04-19T06:44:10Z"},
{"Line": "650=>650", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.ldap.core.LdapEncoder.filterEncode(java.lang.String)=>org.springframework.ldap.support.LdapEncoder.filterEncode(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4568/buggy-version/uPortal-groups.uPortal-groups-ldap.src.main.java.org.apereo.portal.groups.ldap.LDAPGroupStore.java", "BodyUseAPI": [], "Fixed commit": "b33ea4c39dc660338c931f61120d94cc051f6abc", "Url": "https://api.github.com/repos/JoshBrudnak/uPortal", "Date": "2018-03-01T21:36:18Z"},
{"Line": "90=>90", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new org.springframework.http.ResponseEntity<java.lang.String>(message, org.springframework.http.HttpStatus.OK)=>new org.springframework.http.ResponseEntity<java.lang.Boolean>(result, org.springframework.http.HttpStatus.OK)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/356/buggy-version/src.main.java.com.personal.replenish.controller.TaskController.java", "BodyUseAPI": [], "Fixed commit": "4a4537d7b6e58c8df61d047854524527e3c9856d", "Url": "https://api.github.com/repos/pavankomandur/Replenisher_taskService", "Date": "2018-08-15T22:15:59Z"},
{"Line": "45=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.length()=>java.util.Set<java.lang.String>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8106/buggy-version/src.main.java.org.recap.controller.AccessionReconcilationRestController.java", "BodyUseAPI": [], "Fixed commit": "f6afa691fa5962d57e8c1151ead10c27f7853ae4", "Url": "https://api.github.com/repos/premkumarbalu/scsb-solr-client", "Date": "2018-06-07T13:47:28Z"},
{"Line": "43=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.lang.String>.stream()=>java.util.Set<java.lang.String>.stream()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8106/buggy-version/src.main.java.org.recap.controller.AccessionReconcilationRestController.java", "BodyUseAPI": [], "Fixed commit": "f6afa691fa5962d57e8c1151ead10c27f7853ae4", "Url": "https://api.github.com/repos/premkumarbalu/scsb-solr-client", "Date": "2018-06-07T13:47:28Z"},
{"Line": "45=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.length()=>java.util.Set<java.lang.String>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8106/buggy-version/src.main.java.org.recap.controller.AccessionReconcilationRestController.java", "BodyUseAPI": [], "Fixed commit": "f6afa691fa5962d57e8c1151ead10c27f7853ae4", "Url": "https://api.github.com/repos/premkumarbalu/scsb-solr-client", "Date": "2018-06-07T13:47:28Z"},
{"Line": "33=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Scanner.next()=>java.util.Scanner.nextLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2426/buggy-version/src.main.java.app.view.AccountView.java", "BodyUseAPI": [], "Fixed commit": "f41256b1f9744594bf051a2e056c1a1fd84f6f7e", "Url": "https://api.github.com/repos/ta4anka/ConsoleCrudApp", "Date": "2018-09-15T20:14:26Z"},
{"Line": "34=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(java.lang.String)=>java.util.Scanner.nextLine()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2426/buggy-version/src.main.java.app.view.AccountView.java", "BodyUseAPI": [], "Fixed commit": "f41256b1f9744594bf051a2e056c1a1fd84f6f7e", "Url": "https://api.github.com/repos/ta4anka/ConsoleCrudApp", "Date": "2018-09-15T20:14:26Z"},
{"Line": "96=>97", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.nicocharm.biodots.Bounds.setPosition(float,float)=>com.nicocharm.biodots.Bounds.setPosition((x - (((t.getWidth()) * (scale)) / 2)),(y - ((t.getHeight()) * (scale))))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3499/buggy-version/core.src.com.nicocharm.biodots.Level.java", "BodyUseAPI": [], "Fixed commit": "d52d322f17d747bdd93665049889472555763278", "Url": "https://api.github.com/repos/nicomartorell/BioDots", "Date": "2018-01-04T02:59:49Z"},
{"Line": "108=>110", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.nicocharm.biodots.Bounds.setPosition(float,bounds.getY())=>com.nicocharm.biodots.Bounds.setPosition((x - (((t.getWidth()) * (scale)) / 2)),bounds.getY())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3499/buggy-version/core.src.com.nicocharm.biodots.Level.java", "BodyUseAPI": [], "Fixed commit": "d52d322f17d747bdd93665049889472555763278", "Url": "https://api.github.com/repos/nicomartorell/BioDots", "Date": "2018-01-04T02:59:49Z"},
{"Line": "46=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "team8.social.Database.querySQLSet(java.lang.String)=>team8.social.Database.prepareQuery(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5063/buggy-version/src.main.java.team8.social.Post.java", "BodyUseAPI": [], "Fixed commit": "7960e5f651fa95b06a00ea4fc48436dac5c6d85c", "Url": "https://api.github.com/repos/SChoiGitHub/eecs448_project_3", "Date": "2018-04-09T02:42:50Z"},
{"Line": "72=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "team8.social.Database.querySQLSet(java.lang.String)=>team8.social.Database.prepareQuery(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5063/buggy-version/src.main.java.team8.social.Post.java", "BodyUseAPI": [], "Fixed commit": "7960e5f651fa95b06a00ea4fc48436dac5c6d85c", "Url": "https://api.github.com/repos/SChoiGitHub/eecs448_project_3", "Date": "2018-04-09T02:42:50Z"},
{"Line": "219=>219", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "bgu.spl181.net.impl.bidi.BBservice.JSON.MoviesJSON.changeprice(java.lang.String,int)=>java.util.ArrayList<java.lang.String>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8148/buggy-version/Server.src.main.java.bgu.spl181.net.impl.bidi.BBservice.MovieRentalService.java", "BodyUseAPI": [], "Fixed commit": "61b7ada7b1834b162a822ffa97a18e491dc098ae", "Url": "https://api.github.com/repos/aviranhuga/Reactor-Server---Movie-rental-service", "Date": "2018-01-13T19:33:46Z"},
{"Line": "847=>856", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.javascript.rhino.Node.addChildToBack(funcChild.cloneTree())=>com.google.javascript.rhino.Node.addChildToBack(paramNode.cloneTree())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4247/buggy-version/src.info.persistent.react.jscomp.ReactCompilerPass.java", "BodyUseAPI": [], "Fixed commit": "88e2321bf034ad1b3aefb5864c8852beabcd952c", "Url": "https://api.github.com/repos/mihaip/react-closure-compiler", "Date": "2018-03-23T17:51:38Z"},
{"Line": "523=>523", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.netty.channel.ChannelFuture.getCause()=>io.netty.channel.ChannelFuture.cause()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1509/buggy-version/src.main.java.com.cloudhopper.smpp.impl.DefaultSmppSession.java", "BodyUseAPI": [], "Fixed commit": "736145b051a303334a929d35326d7c9e394ca7ea", "Url": "https://api.github.com/repos/RestComm/cloudhopper-smpp", "Date": "2018-03-13T21:05:23Z"},
{"Line": "313=>313", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "io.netty.channel.ChannelFuture.cancel()=>io.netty.channel.ChannelFuture.cancel(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1509/buggy-version/src.main.java.com.cloudhopper.smpp.impl.DefaultSmppClient.java", "BodyUseAPI": [], "Fixed commit": "736145b051a303334a929d35326d7c9e394ca7ea", "Url": "https://api.github.com/repos/RestComm/cloudhopper-smpp", "Date": "2018-03-13T21:05:23Z"},
{"Line": "45=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck.configurationValue(org.openstreetmap.atlas.utilities.configuration.Configuration,java.lang.String,java.lang.String)=>org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck.configurationValue(org.openstreetmap.atlas.utilities.configuration.Configuration,java.lang.String,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3996/buggy-version/src.main.java.org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck.java", "BodyUseAPI": [], "Fixed commit": "90b6cf47040aede68a17761c76030b6382dd595e", "Url": "https://api.github.com/repos/nachtm/atlas-checks", "Date": "2018-08-23T23:36:59Z"},
{"Line": "69=>69", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "site.iway.javahelpers.Prefs.getFloat(java.lang.String,int)=>site.iway.javahelpers.PrefsStatic.getFloat(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/624/buggy-version/src.main.java.site.iway.javahelpers.PrefsStatic.java", "BodyUseAPI": [], "Fixed commit": "441b8609e2a61672eebb3087543583e4b37433e3", "Url": "https://api.github.com/repos/iWay7/JavaHelpers", "Date": "2018-10-01T11:02:54Z"},
{"Line": "117=>117", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "site.iway.javahelpers.PrefsStatic.getObject(java.lang.String,<nulltype>)=>site.iway.javahelpers.PrefsStatic.getString(java.lang.String,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/624/buggy-version/src.main.java.site.iway.javahelpers.PrefsStatic.java", "BodyUseAPI": [], "Fixed commit": "441b8609e2a61672eebb3087543583e4b37433e3", "Url": "https://api.github.com/repos/iWay7/JavaHelpers", "Date": "2018-10-01T11:02:54Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "site.iway.javahelpers.Prefs.getDouble(java.lang.String,int)=>site.iway.javahelpers.PrefsStatic.getDouble(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/624/buggy-version/src.main.java.site.iway.javahelpers.PrefsStatic.java", "BodyUseAPI": [], "Fixed commit": "441b8609e2a61672eebb3087543583e4b37433e3", "Url": "https://api.github.com/repos/iWay7/JavaHelpers", "Date": "2018-10-01T11:02:54Z"},
{"Line": "250=>250", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)=>org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5617/buggy-version/src.main.java.cn.tianzy.service.GifService.java", "BodyUseAPI": [], "Fixed commit": "3e106d0613899cf27a8080de8f7e4750f868bd4b", "Url": "https://api.github.com/repos/zhenyuT/gif-make", "Date": "2018-07-28T09:29:25Z"},
{"Line": "57=>41", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new com.firebase.ui.database.FirebaseRecyclerAdapter<com.example.bejust.androidmeals.Meal, com.example.bejust.androidmeals.MainActivity.MealsViewHolder>(com.example.bejust.androidmeals.Meal.class, R.layout.list_layout, com.example.bejust.androidmeals.MainActivity.MealsViewHolder.class, firebaseSearchQuery) { @java.lang.Override protected void populateViewHolder(com.example.bejust.androidmeals.MainActivity.MealsViewHolder viewHolder, com.example.bejust.androidmeals.Meal model, int position) { viewHolder.setDetails(getApplicationContext(), model.getstrMeal(), model.getstrCategory(), model.getstrArea(), model.getstrTags(), model.getstrYoutube(), model.getstrMealThumb(), model.getstrInstructions(), model.getstrIngredient1()); } }=>new com.firebase.ui.database.FirebaseRecyclerAdapter<com.example.bejust.androidmeals.Meal, com.example.bejust.androidmeals.MainActivity.MealsViewHolder>(com.example.bejust.androidmeals.Meal.class, R.layout.list_layout, com.example.bejust.androidmeals.MainActivity.MealsViewHolder.class, MealsDatabase) { @java.lang.Override protected void populateViewHolder(com.example.bejust.androidmeals.MainActivity.MealsViewHolder viewHolder, com.example.bejust.androidmeals.Meal model, int position) { viewHolder.setDetails(getApplicationContext(), model.getstrMeal(), model.getstrCategory(), model.getstrArea(), model.getstrTags(), model.getstrYoutube(), model.getstrMealThumb(), model.getstrInstructions(), model.getstrIngredient1()); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7661/buggy-version/app.src.main.java.com.example.bejust.androidmeals.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "6573a2b610d15b0ebb4066acc1f53a8c82c34bc8", "Url": "https://api.github.com/repos/BeJust/AndroidMeals", "Date": "2018-07-10T10:22:01Z"},
{"Line": "66=>72", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.support.v7.widget.RecyclerView.setAdapter(com.firebase.ui.database.FirebaseRecyclerAdapter<com.example.bejust.androidmeals.Meal, com.example.bejust.androidmeals.MainActivity.MealsViewHolder>)=>com.example.bejust.androidmeals.MainActivity.MealsViewHolder.setDetails(getApplicationContext(),model.getstrMeal(),model.getstrCategory(),model.getstrArea(),model.getstrTags(),model.getstrYoutube(),model.getstrMealThumb(),model.getstrInstructions(),model.getstrIngredient1())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7661/buggy-version/app.src.main.java.com.example.bejust.androidmeals.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "6573a2b610d15b0ebb4066acc1f53a8c82c34bc8", "Url": "https://api.github.com/repos/BeJust/AndroidMeals", "Date": "2018-07-10T10:22:01Z"},
{"Line": "40=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.ImageButton.setOnClickListener(android.view.View.OnClickListener)=>android.widget.ImageButton.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7661/buggy-version/app.src.main.java.com.example.bejust.androidmeals.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "6573a2b610d15b0ebb4066acc1f53a8c82c34bc8", "Url": "https://api.github.com/repos/BeJust/AndroidMeals", "Date": "2018-07-10T10:22:01Z"},
{"Line": "153=>157", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "code(org.objectweb.asm.Type.getReturnType(methodCall.desc)).popReturnValue(org.serialthreads.transformer.strategies.frequent4.MethodTransformer)=>code(org.objectweb.asm.Type.getReturnType(methodCall.desc)).popReturnValue(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6375/buggy-version/src.main.java.org.serialthreads.transformer.strategies.frequent4.MethodTransformer.java", "BodyUseAPI": [], "Fixed commit": "4ddc1d6297577d9b6358a5572aa273d2f45c87df", "Url": "https://api.github.com/repos/markusheiden/serialthreads", "Date": "2018-01-14T22:47:31Z"},
{"Line": "103=>105", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "code(returnType).pushReturnValue(org.serialthreads.transformer.strategies.frequent4.MethodTransformer)=>code(returnType).pushReturnValue(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6375/buggy-version/src.main.java.org.serialthreads.transformer.strategies.frequent4.MethodTransformer.java", "BodyUseAPI": [], "Fixed commit": "4ddc1d6297577d9b6358a5572aa273d2f45c87df", "Url": "https://api.github.com/repos/markusheiden/serialthreads", "Date": "2018-01-14T22:47:31Z"},
{"Line": "1383=>1388", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "soot.toDex.StmtVisitor.finalizeInstructions()=>soot.toDex.StmtVisitor.finalizeInstructions(java.util.Set<soot.Unit>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9178/buggy-version/src.main.java.soot.toDex.DexPrinter.java", "BodyUseAPI": [], "Fixed commit": "a75b7970504e7dd399b3d829b25e7b5286d234e3", "Url": "https://api.github.com/repos/Sable/soot", "Date": "2018-02-15T12:59:21Z"},
{"Line": "1076=>1085", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "soot.toDex.DexPrinter.toInstructions(java.util.Collection<soot.Unit>,soot.toDex.StmtVisitor)=>soot.toDex.DexPrinter.toInstructions(java.util.Collection<soot.Unit>,soot.toDex.StmtVisitor,java.util.Set<soot.Unit>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9178/buggy-version/src.main.java.soot.toDex.DexPrinter.java", "BodyUseAPI": [], "Fixed commit": "a75b7970504e7dd399b3d829b25e7b5286d234e3", "Url": "https://api.github.com/repos/Sable/soot", "Date": "2018-02-15T12:59:21Z"},
{"Line": "66=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Class<E>.getConstructor(java.lang.Class<?>[])=>java.lang.Class<E>.getDeclaredConstructor(java.lang.Class<?>[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/319/buggy-version/src.sutilities.Pool.java", "BodyUseAPI": [], "Fixed commit": "3134a979c9e3e6e255dfab2b66ec568a238a3f7f", "Url": "https://api.github.com/repos/Sebastian-0/Utilities", "Date": "2018-02-01T18:18:39Z"},
{"Line": "228=>228", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Controller.DataController.resultSetToProductList(java.sql.ResultSet)=>Controller.DataController.resultSetToProductList(java.sql.ResultSet,Controller.MainController.getInstance().getCurrentWarehouseID())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9706/buggy-version/src.Controller.DataController.java", "BodyUseAPI": [], "Fixed commit": "b854854cb07bd61ede04f100a9bc2134321d9680", "Url": "https://api.github.com/repos/ethanbin/Warehouse-Management-System", "Date": "2018-05-08T17:52:38Z"},
{"Line": "273=>273", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<Model.Product>.get(int)=>java.util.List<Model.Product>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9706/buggy-version/src.Controller.DataController.java", "BodyUseAPI": [], "Fixed commit": "b854854cb07bd61ede04f100a9bc2134321d9680", "Url": "https://api.github.com/repos/ethanbin/Warehouse-Management-System", "Date": "2018-05-08T17:52:38Z"},
{"Line": "244=>244", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Controller.DataController.resultSetToProductList(java.sql.ResultSet)=>Controller.DataController.resultSetToProductList(java.sql.ResultSet,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9706/buggy-version/src.Controller.DataController.java", "BodyUseAPI": [], "Fixed commit": "b854854cb07bd61ede04f100a9bc2134321d9680", "Url": "https://api.github.com/repos/ethanbin/Warehouse-Management-System", "Date": "2018-05-08T17:52:38Z"},
{"Line": "273=>273", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Controller.DataController.resultSetToProductList(java.sql.ResultSet)=>Controller.DataController.resultSetToProductList(java.sql.ResultSet,Controller.MainController.getInstance().getCurrentWarehouseID())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9706/buggy-version/src.Controller.DataController.java", "BodyUseAPI": [], "Fixed commit": "b854854cb07bd61ede04f100a9bc2134321d9680", "Url": "https://api.github.com/repos/ethanbin/Warehouse-Management-System", "Date": "2018-05-08T17:52:38Z"},
{"Line": "571=>571", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openqa.selenium.WebElement.click()=>pageObjects.IdeabooksPage.click(org.openqa.selenium.WebElement)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/65/buggy-version/src.main.java.pageObjects.IdeabooksPage.java", "BodyUseAPI": [], "Fixed commit": "11b1ce87050a94bca289327575d1b1a09a9866f9", "Url": "https://api.github.com/repos/mshafea/HomifyWeb", "Date": "2018-10-15T14:41:09Z"},
{"Line": "568=>568", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.openqa.selenium.WebElement.click()=>pageObjects.IdeabooksPage.click(org.openqa.selenium.WebElement)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/65/buggy-version/src.main.java.pageObjects.IdeabooksPage.java", "BodyUseAPI": [], "Fixed commit": "11b1ce87050a94bca289327575d1b1a09a9866f9", "Url": "https://api.github.com/repos/mshafea/HomifyWeb", "Date": "2018-10-15T14:41:09Z"},
{"Line": "39=>41", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Collections.singleton(MatrixCoordinate)=>java.util.Set<MatrixCoordinate>.add(MatrixCoordinate)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3017/buggy-version/saddle-points.src.main.java.Matrix.java", "BodyUseAPI": [], "Fixed commit": "a3f4efb60276d5e3428d500e70b63e9361e7896d", "Url": "https://api.github.com/repos/fossnik/java-exercises", "Date": "2018-02-11T00:36:41Z"},
{"Line": "22=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.joel_.studentportal.CreatePortalActivity.findViewById(R.id.urlText)=>com.example.joel_.studentportal.CreatePortalActivity.findViewById(R.id.nameText)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8840/buggy-version/app.src.main.java.com.example.joel_.studentportal.CreatePortalActivity.java", "BodyUseAPI": [], "Fixed commit": "834dcf1ec502671dcac8aafc2a945c4606b26845", "Url": "https://api.github.com/repos/Jmaster2710/StudentPortal", "Date": "2018-09-23T14:57:20Z"},
{"Line": "643=>643", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Config.satManager.getLayoutByName(int,Spacecraft.HERCI_HS_PKT_LAYOUT)=>Config.satManager.getLayoutByName(int,Spacecraft.RAD_LAYOUT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6982/buggy-version/src.telemetry.SatPayloadTable.java", "BodyUseAPI": [], "Fixed commit": "94e9cff94aa2f92aefe4298d3b361a9df09facd8", "Url": "https://api.github.com/repos/ac2cz/FoxTelem", "Date": "2018-05-25T00:55:14Z"},
{"Line": "534=>538", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "1.registerDeviceToken(java.lang.String,java.lang.String,IterableConstants.MESSAGING_PLATFORM_FIREBASE,<nulltype>)=>java.lang.Thread.start()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4546/buggy-version/iterableapi.src.main.java.com.iterable.iterableapi.IterableApi.java", "BodyUseAPI": [], "Fixed commit": "9cc59192224173121b485f11ddb665fb30bed003", "Url": "https://api.github.com/repos/Iterable/iterable-android-sdk", "Date": "2018-10-25T01:47:34Z"},
{"Line": "55=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Objects.requireNonNull(seedu.address.model.person.Client)=>seedu.address.logic.commands.AddTutorCommand.requireNonNull(seedu.address.model.person.Client)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/804/buggy-version/src.main.java.seedu.address.logic.commands.AddTutorCommand.java", "BodyUseAPI": [], "Fixed commit": "fb80dc4e0a661cf9ff73141e6ad7a9a5591b3b6a", "Url": "https://api.github.com/repos/olimhc/main", "Date": "2018-03-21T16:56:32Z"},
{"Line": "61=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Objects.requireNonNull(seedu.address.logic.commands.AddTutorCommand)=>seedu.address.logic.commands.AddTutorCommand.requireNonNull(seedu.address.logic.commands.AddTutorCommand)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/804/buggy-version/src.main.java.seedu.address.logic.commands.AddTutorCommand.java", "BodyUseAPI": [], "Fixed commit": "fb80dc4e0a661cf9ff73141e6ad7a9a5591b3b6a", "Url": "https://api.github.com/repos/olimhc/main", "Date": "2018-03-21T16:56:32Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.format(java.lang.String,java.lang.String,java.lang.String)=>java.lang.String.format(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3242/buggy-version/core.src.main.java.com.sequenceiq.cloudbreak.authorization.OrganizationPermissionChecker.java", "BodyUseAPI": [], "Fixed commit": "bd440153c742840e918a5bc913a95098ef3efe77", "Url": "https://api.github.com/repos/hortonworks/cloudbreak", "Date": "2018-08-10T09:03:36Z"},
{"Line": "191=>193", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "water.fvec.Chunk.at8(int)=>java.lang.Math.max(long,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4100/buggy-version/h2o-core.src.main.java.water.rapids.RadixOrder.java", "BodyUseAPI": [], "Fixed commit": "ebdff4d002a0c643a84206bea8b9ae0b35a1866e", "Url": "https://api.github.com/repos/h2oai/h2o-3", "Date": "2018-06-06T01:44:44Z"},
{"Line": "137=>138", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.hibernate.Query.setDate(int,java.util.Date)=>org.hibernate.Query.setDate(int,com.digilab.common.SmsGenieDateUtil.getSystemDate())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3745/buggy-version/src.com.digilab.sms.dl.dao.SmsCompanyUserDao.java", "BodyUseAPI": [], "Fixed commit": "338740c78a9f4883508f61dd70160499dd2f83f5", "Url": "https://api.github.com/repos/sh4mim/mySmsGenie", "Date": "2018-10-20T15:11:51Z"},
{"Line": "137=>138", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.hibernate.Query.setDate(int,java.util.Date)=>org.hibernate.Query.setDate(int,com.digilab.common.SmsGenieDateUtil.getSystemDate())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3745/buggy-version/src.com.digilab.sms.dl.dao.SmsCompanyUserDao.java", "BodyUseAPI": [], "Fixed commit": "338740c78a9f4883508f61dd70160499dd2f83f5", "Url": "https://api.github.com/repos/sh4mim/mySmsGenie", "Date": "2018-10-20T15:11:51Z"},
{"Line": "172=>170", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ideal.IDEALAnalysisDefinition<V>.eIcfg()=>ideal.PerSeedAnalysisContext.1.icfg()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4708/buggy-version/src.main.java.ideal.PerSeedAnalysisContext.java", "BodyUseAPI": [], "Fixed commit": "d65e08559b4eb738785fd642dec58f5685e91721", "Url": "https://api.github.com/repos/johspaeth/ideal", "Date": "2018-03-19T06:11:41Z"},
{"Line": "177=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "analysisDefinition.eIcfg().wrap(key.getStmt())=>boomerang.cfg.IExtendedICFG<soot.Unit, soot.SootMethod>.wrap(key.getStmt())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4708/buggy-version/src.main.java.ideal.PerSeedAnalysisContext.java", "BodyUseAPI": [], "Fixed commit": "d65e08559b4eb738785fd642dec58f5685e91721", "Url": "https://api.github.com/repos/johspaeth/ideal", "Date": "2018-03-19T06:11:41Z"},
{"Line": "92=>92", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ideal.AnalysisSolver.ContextRequester.icfg()=>ideal.PerSeedAnalysisContext<V>.icfg()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4708/buggy-version/src.main.java.ideal.AnalysisSolver.java", "BodyUseAPI": [], "Fixed commit": "d65e08559b4eb738785fd642dec58f5685e91721", "Url": "https://api.github.com/repos/johspaeth/ideal", "Date": "2018-03-19T06:11:41Z"},
{"Line": "317=>324", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.app.Activity.getSystemService(Context.NOTIFICATION_SERVICE)=>android.content.Context.getSystemService(Context.NOTIFICATION_SERVICE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2028/buggy-version/permission.src.main.java.com.fastaccess.permission.base.PermissionHelper.java", "BodyUseAPI": [], "Fixed commit": "598c1349a317c67a4d920659d1b8973bff88563a", "Url": "https://api.github.com/repos/rammadogs/PermissionHelper", "Date": "2018-05-23T03:14:35Z"},
{"Line": "850=>868", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.content.Intent.putExtra(MediaStore.EXTRA_OUTPUT,android.net.Uri.fromFile(photoFile))=>android.content.Intent.putExtra(MediaStore.EXTRA_OUTPUT,android.net.Uri)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6084/buggy-version/opensrp-path.src.main.java.org.smartregister.path.activity.ChildDetailTabbedActivity.java", "BodyUseAPI": [], "Fixed commit": "d5855f9d2d04d0b28abef3e12d26b8bf8133eb48", "Url": "https://api.github.com/repos/OpenSRP/opensrp-client-path", "Date": "2018-05-29T14:42:18Z"},
{"Line": "468=>473", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "newRanges[((newRanges.length) - 1)].concatenateWithRange(newRanges[0],boolean)=>squashiprange.IPv4range.concatenateWithRange(newRanges[0],boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9276/buggy-version/src.squashiprange.SquashIPRange.java", "BodyUseAPI": [], "Fixed commit": "f5e652b257c7d97e09536b8c3ed28aeef54105ec", "Url": "https://api.github.com/repos/snasphysicist/SquashIPRange", "Date": "2018-07-14T15:59:52Z"},
{"Line": "436=>437", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "endAddress.maskAddress((~255L)).decrementAddress()=>squashiprange.IPv4address.maskAddress(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9276/buggy-version/src.squashiprange.SquashIPRange.java", "BodyUseAPI": [], "Fixed commit": "f5e652b257c7d97e09536b8c3ed28aeef54105ec", "Url": "https://api.github.com/repos/snasphysicist/SquashIPRange", "Date": "2018-07-14T15:59:52Z"},
{"Line": "33=>40", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "io.scalecube.services.Microservices.builder().seeds(io.scalecube.server.OrganizationServiceRunner.seeds()).services(new io.scalecube.organization.OrganizationServiceImpl.Builder().organizationRepository(io.scalecube.organization.repository.couchbase.CouchbaseRepositoryFactory.organizations()).userRepository(io.scalecube.organization.repository.couchbase.CouchbaseRepositoryFactory.users()).organizationMembershipRepository(io.scalecube.organization.repository.couchbase.CouchbaseRepositoryFactory.organizationMembers()).organizationMembershipRepositoryAdmin(io.scalecube.organization.repository.couchbase.CouchbaseRepositoryFactory.organizationMembersRepositoryAdmin()))=>new io.scalecube.organization.OrganizationServiceImpl.Builder().organizationRepository(io.scalecube.organization.repository.couchbase.CouchbaseRepositoryFactory.organizations()).userRepository(io.scalecube.organization.repository.couchbase.CouchbaseRepositoryFactory.users()).organizationMembershipRepository(io.scalecube.organization.repository.couchbase.CouchbaseRepositoryFactory.organizationMembers()).organizationMembershipRepositoryAdmin(io.scalecube.organization.repository.couchbase.CouchbaseRepositoryFactory.organizationMembersRepositoryAdmin()).build()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4256/buggy-version/scalecube-organization.src.main.java.io.scalecube.server.OrganizationServiceRunner.java", "BodyUseAPI": [], "Fixed commit": "4563e6158788f2e8acaec87a1cacee4e5c123460", "Url": "https://api.github.com/repos/scalecube/scalecube-organization-service", "Date": "2018-07-29T07:40:19Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.fest.util.Lists.newArrayList(expression.getElseIfBranches())=>java.util.Arrays.asList(expression.getElseIfBranches())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8247/buggy-version/src.main.java.com.kalessil.phpStorm.phpInspectionsEA.inspectors.languageConstructions.RedundantElseClauseInspector.java", "BodyUseAPI": [], "Fixed commit": "4312b104e54201b92841fbf3252da28228c9dfac", "Url": "https://api.github.com/repos/kalessil/phpinspectionsea", "Date": "2018-03-07T08:30:33Z"},
{"Line": "149=>149", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedcounter.ColorChecker.getSamplePoints(java.lang.Integer,java.lang.Integer,boolean)=>seedcounter.ColorChecker.getSamplePoints(org.opencv.core.Mat,java.lang.Integer,java.lang.Integer,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5990/buggy-version/src.seedcounter.ColorChecker.java", "BodyUseAPI": [], "Fixed commit": "ff3cfe374cfe8c9ed2579b7a20f7b3882c7a1cd3", "Url": "https://api.github.com/repos/karnehen/ColorChecker", "Date": "2018-04-04T16:16:35Z"},
{"Line": "59=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.bukkit.Bukkit.getVersion()=>org.bukkit.Bukkit.getBukkitVersion()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8109/buggy-version/src.main.java.tk.rht0910.plugin_manager.PluginManager.java", "BodyUseAPI": [], "Fixed commit": "e5f2498ffdd855d8648173be365394b0c55d5855", "Url": "https://api.github.com/repos/acrylic-style/PluginManager", "Date": "2018-03-19T12:50:27Z"},
{"Line": "62=>62", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.tools.csv.utils.FileSplitter.splitFile(java.nio.file.Path,java.nio.file.Path,org.tools.csv.utils.StatUtils.getManagableSizeInMb().intValue(),boolean)=>org.tools.csv.utils.FileSplitter.splitFile(java.nio.file.Path,java.nio.file.Path,org.tools.csv.utils.StatUtils.getManagableSizeInMb().intValue(),csvSortSettings.getHasColumnNames())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3951/buggy-version/src.main.java.org.tools.csv.sort.CsvMergeSorter.java", "BodyUseAPI": [], "Fixed commit": "c5b670f35e649d6a961db106694aea210cb8b14a", "Url": "https://api.github.com/repos/mohammed-ibrahim/analytics", "Date": "2018-01-25T03:53:05Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.facebook.react.bridge.Promise.resolve(long)=>com.facebook.react.bridge.Promise.resolve(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9435/buggy-version/android.src.main.java.com.luoli.smartconnection.RNSmartconnectionModule.java", "BodyUseAPI": [], "Fixed commit": "fc92dc996b2bf9ad5d2ddf84ee9340a137686a83", "Url": "https://api.github.com/repos/CassieLuoli/react-native-smartconnection", "Date": "2018-04-22T07:02:24Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.facebook.react.bridge.Promise.resolve(long)=>com.facebook.react.bridge.Promise.resolve(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9435/buggy-version/android.src.main.java.com.luoli.smartconnection.RNSmartconnectionModule.java", "BodyUseAPI": [], "Fixed commit": "fc92dc996b2bf9ad5d2ddf84ee9340a137686a83", "Url": "https://api.github.com/repos/CassieLuoli/react-native-smartconnection", "Date": "2018-04-22T07:02:24Z"},
{"Line": "46=>46", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.facebook.react.bridge.Promise.resolve(long)=>com.facebook.react.bridge.Promise.resolve(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9435/buggy-version/android.src.main.java.com.luoli.smartconnection.RNSmartconnectionModule.java", "BodyUseAPI": [], "Fixed commit": "fc92dc996b2bf9ad5d2ddf84ee9340a137686a83", "Url": "https://api.github.com/repos/CassieLuoli/react-native-smartconnection", "Date": "2018-04-22T07:02:24Z"},
{"Line": "37=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "game.CollectLevel.draw()=>jplay.GameImage.draw()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6978/buggy-version/School_Game_Framework.src.game.CollectLevel.java", "BodyUseAPI": [], "Fixed commit": "07e713f92ab47c0e2d73f887ac773085351c4063", "Url": "https://api.github.com/repos/Desenho1-2018/School_Game_Framework-", "Date": "2018-06-13T13:36:03Z"},
{"Line": "31=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String,com.blade.kit.StringKit.padRight(\"OPTION\", 6))=>java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String,com.blade.kit.StringKit.padRight(\"OPTIONS\", 6))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4502/buggy-version/src.main.java.com.blade.kit.BladeCache.java", "BodyUseAPI": [], "Fixed commit": "ac2ed1f95ed3e88636cba652e6650783fc7a03eb", "Url": "https://api.github.com/repos/lets-blade/blade", "Date": "2018-09-18T08:49:06Z"},
{"Line": "185=>183", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "robot.leftDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER)=>robot.leftfrontdrive.setPower(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1478/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.VAPushbotEncoderAutonomous.java", "BodyUseAPI": [], "Fixed commit": "edf5d1484b5ab4434938b83f66f0a18a1365aa78", "Url": "https://api.github.com/repos/edinaftcteams/vertalert", "Date": "2018-10-24T00:03:03Z"},
{"Line": "176=>176", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "robot.rightDrive.getCurrentPosition()=>robot.leftbackdrive.getCurrentPosition()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1478/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.VAPushbotEncoderAutonomous.java", "BodyUseAPI": [], "Fixed commit": "edf5d1484b5ab4434938b83f66f0a18a1365aa78", "Url": "https://api.github.com/repos/edinaftcteams/vertalert", "Date": "2018-10-24T00:03:03Z"},
{"Line": "186=>184", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "robot.rightDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER)=>robot.leftbackdrive.setPower(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1478/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.VAPushbotEncoderAutonomous.java", "BodyUseAPI": [], "Fixed commit": "edf5d1484b5ab4434938b83f66f0a18a1365aa78", "Url": "https://api.github.com/repos/edinaftcteams/vertalert", "Date": "2018-10-24T00:03:03Z"},
{"Line": "144=>145", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "kind.name().toLowerCase()=>kind.name().toLowerCase(java.util.Locale)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2908/buggy-version/tika.src.main.java.org.gagravarr.tika.OggParser.java", "BodyUseAPI": [], "Fixed commit": "d886ddae5c21b9a6270ba9b538e59f4c5dffe10b", "Url": "https://api.github.com/repos/croger42/VorbisJava", "Date": "2018-04-20T10:46:03Z"},
{"Line": "101=>102", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.toLowerCase()=>java.lang.String.toLowerCase(java.util.Locale)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2908/buggy-version/core.src.main.java.org.gagravarr.vorbis.VorbisStyleComments.java", "BodyUseAPI": [], "Fixed commit": "d886ddae5c21b9a6270ba9b538e59f4c5dffe10b", "Url": "https://api.github.com/repos/croger42/VorbisJava", "Date": "2018-04-20T10:46:03Z"},
{"Line": "55=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Base64.Encoder.encodeToString(byte[])=>org.springframework.util.Base64Utils.encodeToUrlSafeString(byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/14/buggy-version/commons-auth-core.src.main.java.io.rocketbase.commons.service.TokenizerService.java", "BodyUseAPI": [], "Fixed commit": "d7db93ad68c8be701c58914efc2d39f43bc7dfbc", "Url": "https://api.github.com/repos/rocketbase-io/commons-auth", "Date": "2018-06-11T13:38:43Z"},
{"Line": "69=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Base64.Decoder.decode(java.lang.String)=>org.springframework.util.Base64Utils.decodeFromUrlSafeString(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/14/buggy-version/commons-auth-core.src.main.java.io.rocketbase.commons.service.TokenizerService.java", "BodyUseAPI": [], "Fixed commit": "d7db93ad68c8be701c58914efc2d39f43bc7dfbc", "Url": "https://api.github.com/repos/rocketbase-io/commons-auth", "Date": "2018-06-11T13:38:43Z"},
{"Line": "55=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Base64.getEncoder()=>org.springframework.util.Base64Utils.encodeToUrlSafeString(byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/14/buggy-version/commons-auth-core.src.main.java.io.rocketbase.commons.service.TokenizerService.java", "BodyUseAPI": [], "Fixed commit": "d7db93ad68c8be701c58914efc2d39f43bc7dfbc", "Url": "https://api.github.com/repos/rocketbase-io/commons-auth", "Date": "2018-06-11T13:38:43Z"},
{"Line": "138=>134", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "in.paperwrk.safetycollabproject.accounts.SigninActivity.firebaseEmailPassword(java.lang.String,java.lang.String)=>in.paperwrk.safetycollabproject.accounts.SigninActivity.loginWithfirebaseEmailPassword(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7706/buggy-version/app.src.main.java.in.paperwrk.safetycollabproject.accounts.SigninActivity.java", "BodyUseAPI": [], "Fixed commit": "79eb9c0be740b1bcec90a308e7634d4a3b63a343", "Url": "https://api.github.com/repos/LegacyCoder/wmn-safety", "Date": "2018-04-30T17:11:31Z"},
{"Line": "202=>198", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "in.paperwrk.safetycollabproject.utilities.Helpers.showAlertDialog(java.lang.String,task.getException().getMessage())=>in.paperwrk.safetycollabproject.utilities.Helpers.showAlertDialog(getString(R.string.error_message),task.getException().getMessage())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7706/buggy-version/app.src.main.java.in.paperwrk.safetycollabproject.accounts.SigninActivity.java", "BodyUseAPI": [], "Fixed commit": "79eb9c0be740b1bcec90a308e7634d4a3b63a343", "Url": "https://api.github.com/repos/LegacyCoder/wmn-safety", "Date": "2018-04-30T17:11:31Z"},
{"Line": "21=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.dieam.reactnativepushnotification.modules.FirebaseInstanceId.getInstance()=>com.dieam.reactnativepushnotification.modules.InstanceID.getToken(java.lang.String,GoogleCloudMessaging.INSTANCE_ID_SCOPE,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4550/buggy-version/android.src.main.java.com.dieam.reactnativepushnotification.modules.RNPushNotificationRegistrationService.java", "BodyUseAPI": [], "Fixed commit": "b40ab96e22d26403ad783653bcc1db061a1c0b59", "Url": "https://api.github.com/repos/calcazar/react-native-push-notification-CE", "Date": "2018-04-25T18:14:13Z"},
{"Line": "21=>22", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.dieam.reactnativepushnotification.modules.FirebaseInstanceId.getInstance().getToken()=>com.dieam.reactnativepushnotification.modules.InstanceID.getToken(java.lang.String,GoogleCloudMessaging.INSTANCE_ID_SCOPE,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4550/buggy-version/android.src.main.java.com.dieam.reactnativepushnotification.modules.RNPushNotificationRegistrationService.java", "BodyUseAPI": [], "Fixed commit": "b40ab96e22d26403ad783653bcc1db061a1c0b59", "Url": "https://api.github.com/repos/calcazar/react-native-push-notification-CE", "Date": "2018-04-25T18:14:13Z"},
{"Line": "163=>163", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "finley.gmair.vo.machine.ControlOptionVo.getControlId()=>finley.gmair.model.machine.ControlOption.getControlId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1468/buggy-version/machine.src.main.java.finley.gmair.controller.ControlOptionController.java", "BodyUseAPI": [], "Fixed commit": "4b2d8006d107b0bb154f81908861595d8244dc01", "Url": "https://api.github.com/repos/sunshinezxf/Gmair", "Date": "2018-07-17T04:55:41Z"},
{"Line": "153=>153", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Gdx.g1.g1ClearColor(float,float,float,float)=>Gdx.gl.glClearColor(float,float,float,float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6657/buggy-version/core.src.com.packtpub.libgdx.canyonbunny.screens.MenuScreen.java", "BodyUseAPI": [], "Fixed commit": "aadbdd3a1ff41ca417df4b35fbaa8cbc27338564", "Url": "https://api.github.com/repos/jk1387/CSC361_F18_G4", "Date": "2018-10-01T18:33:22Z"},
{"Line": "154=>154", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Gdx.g1.g1Clear(GL20.GL_COLOR_BUFFER_BIT)=>Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6657/buggy-version/core.src.com.packtpub.libgdx.canyonbunny.screens.MenuScreen.java", "BodyUseAPI": [], "Fixed commit": "aadbdd3a1ff41ca417df4b35fbaa8cbc27338564", "Url": "https://api.github.com/repos/jk1387/CSC361_F18_G4", "Date": "2018-10-01T18:33:22Z"},
{"Line": "395=>396", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.packtpub.libgdx.canyonbunny.screens.MenuScreen.5.onOptionClicked()=>com.packtpub.libgdx.canyonbunny.screens.MenuScreen.5.onOptionsClicked()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6657/buggy-version/core.src.com.packtpub.libgdx.canyonbunny.screens.MenuScreen.java", "BodyUseAPI": [], "Fixed commit": "aadbdd3a1ff41ca417df4b35fbaa8cbc27338564", "Url": "https://api.github.com/repos/jk1387/CSC361_F18_G4", "Date": "2018-10-01T18:33:22Z"},
{"Line": "163=>164", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.badlogic.gdx.scenes.scene2d.ui.Table.drawDebug(com.badlogic.gdx.scenes.scene2d.Stage)=>com.badlogic.gdx.scenes.scene2d.Stage.setDebugAll(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6657/buggy-version/core.src.com.packtpub.libgdx.canyonbunny.screens.MenuScreen.java", "BodyUseAPI": [], "Fixed commit": "aadbdd3a1ff41ca417df4b35fbaa8cbc27338564", "Url": "https://api.github.com/repos/jk1387/CSC361_F18_G4", "Date": "2018-10-01T18:33:22Z"},
{"Line": "139=>140", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.badlogic.gdx.scenes.scene2d.Stage.setSize(Constants.VIEWPORT_GUI_WIDTH,Constants.VIEWPORT_GUI_HEIGHT)=>com.badlogic.gdx.scenes.scene2d.ui.Stack.setSize(Constants.VIEWPORT_GUI_WIDTH,Constants.VIEWPORT_GUI_HEIGHT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6657/buggy-version/core.src.com.packtpub.libgdx.canyonbunny.screens.MenuScreen.java", "BodyUseAPI": [], "Fixed commit": "aadbdd3a1ff41ca417df4b35fbaa8cbc27338564", "Url": "https://api.github.com/repos/jk1387/CSC361_F18_G4", "Date": "2018-10-01T18:33:22Z"},
{"Line": "101=>101", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.text.TextUtils.equals(java.lang.String,java.lang.String)=>com.mdove.levelgame.greendao.utils.DatabaseManager.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6304/buggy-version/app.src.main.java.com.mdove.levelgame.main.monsters.presenter.MonstersPresenter.java", "BodyUseAPI": [], "Fixed commit": "78887d4e620388b8b88a9a14a815a662a5b44b23", "Url": "https://api.github.com/repos/zhiaixinyang/LevelGame", "Date": "2018-10-29T08:37:37Z"},
{"Line": "347=>356", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.quinsoft.zeidon.standardoe.EntityInstanceIncluder.createIncludedInstance(com.quinsoft.zeidon.standardoe.EntityInstanceImpl,com.quinsoft.zeidon.objectdefinition.EntityDef,com.quinsoft.zeidon.standardoe.EntityInstanceImpl,<nulltype>,CursorPosition.LAST)=>com.quinsoft.zeidon.standardoe.EntityInstanceIncluder.createIncludedInstance(com.quinsoft.zeidon.standardoe.EntityInstanceImpl,com.quinsoft.zeidon.standardoe.EntityInstanceImpl,com.quinsoft.zeidon.objectdefinition.EntityDef,com.quinsoft.zeidon.standardoe.EntityInstanceImpl,<nulltype>,CursorPosition.LAST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4922/buggy-version/zeidon-joe.src.main.java.com.quinsoft.zeidon.standardoe.EntityInstanceIncluder.java", "BodyUseAPI": [], "Fixed commit": "c06246e6b5c37b97b6f336fe3e74f1f478f04a0d", "Url": "https://api.github.com/repos/zeidon/zeidon-joe", "Date": "2018-04-23T22:08:02Z"},
{"Line": "307=>316", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.quinsoft.zeidon.standardoe.EntityInstanceIncluder.createIncludedInstance(com.quinsoft.zeidon.standardoe.EntityInstanceImpl,com.quinsoft.zeidon.objectdefinition.EntityDef,com.quinsoft.zeidon.standardoe.EntityInstanceImpl,com.quinsoft.zeidon.standardoe.EntityInstanceImpl,CursorPosition.LAST)=>com.quinsoft.zeidon.standardoe.EntityInstanceIncluder.createIncludedInstance(com.quinsoft.zeidon.standardoe.EntityInstanceImpl,<nulltype>,com.quinsoft.zeidon.objectdefinition.EntityDef,com.quinsoft.zeidon.standardoe.EntityInstanceImpl,com.quinsoft.zeidon.standardoe.EntityInstanceImpl,CursorPosition.LAST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4922/buggy-version/zeidon-joe.src.main.java.com.quinsoft.zeidon.standardoe.EntityInstanceIncluder.java", "BodyUseAPI": [], "Fixed commit": "c06246e6b5c37b97b6f336fe3e74f1f478f04a0d", "Url": "https://api.github.com/repos/zeidon/zeidon-joe", "Date": "2018-04-23T22:08:02Z"},
{"Line": "176=>175", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.quinsoft.zeidon.standardoe.EntityInstanceIncluder.createIncludedInstance(com.quinsoft.zeidon.standardoe.EntityInstanceImpl,com.quinsoft.zeidon.objectdefinition.EntityDef,com.quinsoft.zeidon.standardoe.EntityInstanceImpl,com.quinsoft.zeidon.standardoe.EntityInstanceImpl,com.quinsoft.zeidon.CursorPosition)=>com.quinsoft.zeidon.standardoe.EntityInstanceIncluder.createIncludedInstance(com.quinsoft.zeidon.standardoe.EntityInstanceImpl,<nulltype>,com.quinsoft.zeidon.objectdefinition.EntityDef,com.quinsoft.zeidon.standardoe.EntityInstanceImpl,com.quinsoft.zeidon.standardoe.EntityInstanceImpl,com.quinsoft.zeidon.CursorPosition)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4922/buggy-version/zeidon-joe.src.main.java.com.quinsoft.zeidon.standardoe.EntityInstanceIncluder.java", "BodyUseAPI": [], "Fixed commit": "c06246e6b5c37b97b6f336fe3e74f1f478f04a0d", "Url": "https://api.github.com/repos/zeidon/zeidon-joe", "Date": "2018-04-23T22:08:02Z"},
{"Line": "154=>171", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "javax.swing.JLabel.setText((\"Draw :\" + (ox.getScoreDraw())))=>javax.swing.JLabel.setText((\"DRAW \" + (ox.getScoreDraw())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6151/buggy-version/src.OXForm.java", "BodyUseAPI": [], "Fixed commit": "dc5c66fa4e10e03e8ca38da7b9d098e0c04ec576", "Url": "https://api.github.com/repos/Pum58400/lab3-3", "Date": "2018-09-01T00:46:31Z"},
{"Line": "135=>135", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.minecraft.entity.EntityLivingBase.setPosition(player.posX,double,player.posZ)=>net.minecraft.entity.EntityLivingBase.setPosition(player.posX,int,player.posZ)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7847/buggy-version/src.main.java.com.crowsofwar.avatar.common.bending.water.WaterSkateHandler.java", "BodyUseAPI": [], "Fixed commit": "572f66366c1525d548e35c1c081e15752d2a6dfb", "Url": "https://api.github.com/repos/ProjectKorra/AvatarMod", "Date": "2018-10-06T03:03:10Z"},
{"Line": "30=>30", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "plugin.getConfigManager().getDelayEnabled()=>plugin.getConfigManager().isDelayEnabled()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7061/buggy-version/src.main.java.me.kyllian.magic8ball.listeners.AsyncPlayerChatListener.java", "BodyUseAPI": [], "Fixed commit": "c12093cd397d249c288e6f78239ce103eaed7986", "Url": "https://api.github.com/repos/InstantlyMoist/Magic8Ball", "Date": "2018-07-20T13:34:33Z"},
{"Line": "26=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "plugin.getConfigManager().getDelayEnabled()=>plugin.getConfigManager().isDelayEnabled()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7061/buggy-version/src.main.java.me.kyllian.magic8ball.listeners.AsyncPlayerChatListener.java", "BodyUseAPI": [], "Fixed commit": "c12093cd397d249c288e6f78239ce103eaed7986", "Url": "https://api.github.com/repos/InstantlyMoist/Magic8Ball", "Date": "2018-07-20T13:34:33Z"},
{"Line": "24=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "panda.demo.action.user.UserBulkAction.addDisplayFields(User.STATUS,User.UPDATED_AT,User.UPDATED_BY,User.UPDATED_BY_USER)=>panda.demo.action.user.UserBulkAction.addDisplayFields(User.ID,User.NAME,User.EMAIL,User.PASSWORD,User.ROLE,User.STATUS,User.UPDATED_AT,User.UPDATED_BY,User.UPDATED_BY_USER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1314/buggy-version/panda-demo.src.gen.java.panda.demo.action.user.UserBulkAction.java", "BodyUseAPI": [], "Fixed commit": "3452abe2d9f2babd3657ec4edc6464dbd5565eca", "Url": "https://api.github.com/repos/pandafw/panda", "Date": "2018-09-17T01:37:18Z"},
{"Line": "63=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.aion.zero.impl.AionGenesis.getCumulativeDifficulty()=>org.aion.zero.impl.AionGenesis.getDifficultyBI()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/20/buggy-version/modAionImpl.src.org.aion.zero.impl.AionHubUtils.java", "BodyUseAPI": [], "Fixed commit": "94b973e175bc9e51c9904101ec39c79fa5cc4307", "Url": "https://api.github.com/repos/aionnetwork/aion", "Date": "2018-06-01T18:41:55Z"},
{"Line": "93=>110", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.util.Comparator<org.openl.excel.parser.event.EventSheetDescriptor>() { @java.lang.Override public int compare(org.openl.excel.parser.event.EventSheetDescriptor o1, org.openl.excel.parser.event.EventSheetDescriptor o2) { return (o1.getOffset()) - (o2.getOffset()); } }=>new java.util.Comparator<org.openl.excel.parser.event.EventSheetDescriptor>() { @java.lang.Override public int compare(org.openl.excel.parser.event.EventSheetDescriptor o1, org.openl.excel.parser.event.EventSheetDescriptor o2) { return (o1.getOffset()) - (o2.getOffset()); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/534/buggy-version/DEV.org.openl.rules.src.org.openl.excel.parser.event.TableStyleListener.java", "BodyUseAPI": [], "Fixed commit": "d97f584227e127a16fec9762596f02c23ef56567", "Url": "https://api.github.com/repos/openl-tablets/openl-tablets", "Date": "2018-04-20T15:21:30Z"},
{"Line": "159=>156", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.app.Activity.finish()=>java.lang.System.exit(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/776/buggy-version/android.app.src.main.java.com.hasbis.android.roger.TTS.java", "BodyUseAPI": [], "Fixed commit": "7a8844425ba7df23dfb9489de6022fbaa60c4866", "Url": "https://api.github.com/repos/hasbisevinc/socialRobotTony", "Date": "2018-05-13T10:05:32Z"},
{"Line": "74=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "uk.ac.rdg.resc.edal.grid.ReferenceableAxisImpl.getMinimumValue()=>getCoordinateExtent().getLow()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4548/buggy-version/common.src.main.java.uk.ac.rdg.resc.edal.grid.ReferenceableAxisImpl.java", "BodyUseAPI": [], "Fixed commit": "0ed96b93aaf176709d6a483d90f4054b82106fbc", "Url": "https://api.github.com/repos/axiom-data-science/edal-java", "Date": "2017-06-02T09:53:21Z"},
{"Line": "57=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "retrofit2.converter.gson.GsonConverterFactory.create()=>retrofit2.converter.gson.GsonConverterFactory.create(com.google.gson.Gson)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1429/buggy-version/app.src.main.java.com.blueangels.MVoteApplication.java", "BodyUseAPI": [], "Fixed commit": "dfa503695f89606dfbd1351bf55e5d4aecc3bfeb", "Url": "https://api.github.com/repos/ashithvl/mVotingApp", "Date": "2018-04-17T10:56:41Z"},
{"Line": "85=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "retrofit2.Response<java.lang.String>.code()=>com.blueangels.Model.Vote.getVote()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1429/buggy-version/app.src.main.java.com.blueangels.Activity.CandidateDetailsActivity.java", "BodyUseAPI": [], "Fixed commit": "dfa503695f89606dfbd1351bf55e5d4aecc3bfeb", "Url": "https://api.github.com/repos/ashithvl/mVotingApp", "Date": "2018-04-17T10:56:41Z"},
{"Line": "31=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.shrcn.found.ui.action.ConfigAction(java.lang.String)=>com.synet.tool.rsc.action.imp.BaseImportAction(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/253/buggy-version/com.synet.tool.rsc.src.com.synet.tool.rsc.action.imp.ImportSCDAction.java", "BodyUseAPI": [], "Fixed commit": "9eb0d81959c461fcab23b497a06683adbe1c0805", "Url": "https://api.github.com/repos/ChalmersA/RSC50", "Date": "2018-08-27T11:14:54Z"},
{"Line": "17=>16", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.shrcn.found.ui.action.ConfigAction(java.lang.String)=>com.synet.tool.rsc.action.imp.BaseImportAction(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/253/buggy-version/com.synet.tool.rsc.src.com.synet.tool.rsc.action.imp.ImportSSDAction.java", "BodyUseAPI": [], "Fixed commit": "9eb0d81959c461fcab23b497a06683adbe1c0805", "Url": "https://api.github.com/repos/ChalmersA/RSC50", "Date": "2018-08-27T11:14:54Z"},
{"Line": "17=>16", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.shrcn.found.ui.action.ConfigAction(java.lang.String)=>com.synet.tool.rsc.action.imp.BaseImportAction(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/253/buggy-version/com.synet.tool.rsc.src.com.synet.tool.rsc.action.imp.ImportSPCDAction.java", "BodyUseAPI": [], "Fixed commit": "9eb0d81959c461fcab23b497a06683adbe1c0805", "Url": "https://api.github.com/repos/ChalmersA/RSC50", "Date": "2018-08-27T11:14:54Z"},
{"Line": "17=>16", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.shrcn.found.ui.action.ConfigAction(java.lang.String)=>com.synet.tool.rsc.action.imp.BaseImportAction(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/253/buggy-version/com.synet.tool.rsc.src.com.synet.tool.rsc.action.imp.ImportExcelAction.java", "BodyUseAPI": [], "Fixed commit": "9eb0d81959c461fcab23b497a06683adbe1c0805", "Url": "https://api.github.com/repos/ChalmersA/RSC50", "Date": "2018-08-27T11:14:54Z"},
{"Line": "63=>63", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "app.utils.FileUtil.GenerateSeed(int)=>app.utils.FileUtil.GenerateHash(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5715/buggy-version/src.main.java.app.utils.FileUtil.java", "BodyUseAPI": [], "Fixed commit": "935c4d51f12b6559f69f26e8713d60ce32bc92f9", "Url": "https://api.github.com/repos/devssh/BlockchainFullNode", "Date": "2018-05-20T17:09:32Z"},
{"Line": "72=>72", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "app.utils.FileUtil.GenerateSeed(int)=>app.utils.FileUtil.GenerateHash(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5715/buggy-version/src.main.java.app.utils.FileUtil.java", "BodyUseAPI": [], "Fixed commit": "935c4d51f12b6559f69f26e8713d60ce32bc92f9", "Url": "https://api.github.com/repos/devssh/BlockchainFullNode", "Date": "2018-05-20T17:09:32Z"},
{"Line": "92=>92", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "app.utils.FileUtil.GenerateSeed(int)=>app.utils.FileUtil.GenerateHash(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5715/buggy-version/src.main.java.app.utils.FileUtil.java", "BodyUseAPI": [], "Fixed commit": "935c4d51f12b6559f69f26e8713d60ce32bc92f9", "Url": "https://api.github.com/repos/devssh/BlockchainFullNode", "Date": "2018-05-20T17:09:32Z"},
{"Line": "67=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "app.utils.FileUtil.GenerateSeed(int)=>app.utils.FileUtil.GenerateHash(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5715/buggy-version/src.main.java.app.utils.FileUtil.java", "BodyUseAPI": [], "Fixed commit": "935c4d51f12b6559f69f26e8713d60ce32bc92f9", "Url": "https://api.github.com/repos/devssh/BlockchainFullNode", "Date": "2018-05-20T17:09:32Z"},
{"Line": "87=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "app.utils.FileUtil.GenerateSeed(int)=>app.utils.FileUtil.GenerateHash(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5715/buggy-version/src.main.java.app.utils.FileUtil.java", "BodyUseAPI": [], "Fixed commit": "935c4d51f12b6559f69f26e8713d60ce32bc92f9", "Url": "https://api.github.com/repos/devssh/BlockchainFullNode", "Date": "2018-05-20T17:09:32Z"},
{"Line": "97=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "app.utils.FileUtil.GenerateSeed(int)=>app.utils.FileUtil.GenerateHash(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5715/buggy-version/src.main.java.app.utils.FileUtil.java", "BodyUseAPI": [], "Fixed commit": "935c4d51f12b6559f69f26e8713d60ce32bc92f9", "Url": "https://api.github.com/repos/devssh/BlockchainFullNode", "Date": "2018-05-20T17:09:32Z"},
{"Line": "82=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "app.utils.FileUtil.GenerateSeed(int)=>app.utils.FileUtil.GenerateHash(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5715/buggy-version/src.main.java.app.utils.FileUtil.java", "BodyUseAPI": [], "Fixed commit": "935c4d51f12b6559f69f26e8713d60ce32bc92f9", "Url": "https://api.github.com/repos/devssh/BlockchainFullNode", "Date": "2018-05-20T17:09:32Z"},
{"Line": "77=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "app.utils.FileUtil.GenerateSeed(int)=>app.utils.FileUtil.GenerateHash(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5715/buggy-version/src.main.java.app.utils.FileUtil.java", "BodyUseAPI": [], "Fixed commit": "935c4d51f12b6559f69f26e8713d60ce32bc92f9", "Url": "https://api.github.com/repos/devssh/BlockchainFullNode", "Date": "2018-05-20T17:09:32Z"},
{"Line": "48=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.server.response.Response<com.server.entities.Form>.addData(com.server.entities.Form)=>com.server.response.Response<com.server.entities.Form>.addData(this.formService.save(form))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/542/buggy-version/src.main.java.com.server.controllers.FormController.java", "BodyUseAPI": [], "Fixed commit": "145aaf93809883050db501685a3f6632018f01db", "Url": "https://api.github.com/repos/BrenoSouza/MOBILIDADE-UFCG-SERVER", "Date": "2018-03-09T19:43:27Z"},
{"Line": "65=>66", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cn.hutool.core.comparator.CompareUtil.compare(T,T,boolean)=>T.compareTo(T)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1144/buggy-version/hutool-core.src.main.java.cn.hutool.core.comparator.CompareUtil.java", "BodyUseAPI": [], "Fixed commit": "f632188a3fefe6f5d68fb284d9776ce91994455c", "Url": "https://api.github.com/repos/looly/hutool", "Date": "2018-10-17T14:22:16Z"},
{"Line": "35=>37", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "validationHolder.getTextInputLayout().setError(<nulltype>)=>android.support.design.widget.TextInputLayout.setError(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5590/buggy-version/library.src.main.java.com.basgeekball.awesomevalidation.validators.TextInputLayoutValidator.java", "BodyUseAPI": [], "Fixed commit": "eb089aa49e7ea76547917cda845c642f75d92621", "Url": "https://api.github.com/repos/thyrlian/AwesomeValidation", "Date": "2018-02-19T18:10:26Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.imageio.ImageIO.read(java.io.File)=>javax.imageio.ImageIO.read(java.io.InputStream)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6805/buggy-version/src.util.ImagePanel.java", "BodyUseAPI": [], "Fixed commit": "9ac6c5cc362bf42264e4f4b44b50b5a7e86d8c1c", "Url": "https://api.github.com/repos/Shaimr2016/Rogue", "Date": "2018-06-01T22:57:47Z"},
{"Line": "566=>569", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.net.URL.getPath()=>java.net.URL.toURI()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6805/buggy-version/src.entity.livingentity.Monster.java", "BodyUseAPI": [], "Fixed commit": "9ac6c5cc362bf42264e4f4b44b50b5a7e86d8c1c", "Url": "https://api.github.com/repos/Shaimr2016/Rogue", "Date": "2018-06-01T22:57:47Z"},
{"Line": "66=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getQueryFactory().select(com.querydsl.core.types.Projections.bean(org.hspt.entity.response.ResHospital.class, qHsptHospital.hospitalId, qHsptHospital.name)).from(qHsptHospital).where(com.querydsl.core.types.Predicate)=>qHsptHospital.visible.eq(true).and(com.querydsl.core.types.Predicate)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9467/buggy-version/hspt-survey.src.main.java.org.hspt.service.impl.HospitalServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "edfbb744d4d97efab0fb8e8d1db3a862357cf285", "Url": "https://api.github.com/repos/lht142934/HSPT", "Date": "2018-09-16T13:31:06Z"},
{"Line": "111=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "dr.util.Transform.inverse(double[],int,int)=>dr.util.Transform.transform(double[],int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/197/buggy-version/src.dr.evomodel.treedatalikelihood.discrete.MaximizerWrtParameter.java", "BodyUseAPI": [], "Fixed commit": "cc196669ae96875bbe4d797988cc418b46e6e2b2", "Url": "https://api.github.com/repos/beast-dev/beast-mcmc", "Date": "2018-06-01T17:50:45Z"},
{"Line": "105=>105", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.ray.lib.loading.LoadingViewController.internalHideView(android.view.ViewGroup)=>com.ray.lib.loading.LoadingViewController.internalHideView(android.view.View)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2690/buggy-version/lib.src.main.java.com.ray.lib.loading.LoadingViewController.java", "BodyUseAPI": [], "Fixed commit": "93800b3e9de735ffb7b9f287d1b61ac3deedd82f", "Url": "https://api.github.com/repos/hikobe8/RayLib", "Date": "2018-07-30T06:09:21Z"},
{"Line": "110=>110", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "opponent.getConfig().setDeck(magic.model.MagicDeck)=>opponent.getConfig().getDeck().setContent(magic.model.MagicDeck)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4742/buggy-version/src.magic.model.MagicDuel.java", "BodyUseAPI": [], "Fixed commit": "8f9a8a20a712bc8c0918fc97134d5362d4427740", "Url": "https://api.github.com/repos/firemind/magarena-csm-auto", "Date": "2018-05-28T18:03:08Z"},
{"Line": "109=>109", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "player.getConfig().setDeck(opponent.getConfig().getDeck())=>player.getConfig().getDeck().setContent(opponent.getConfig().getDeck())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4742/buggy-version/src.magic.model.MagicDuel.java", "BodyUseAPI": [], "Fixed commit": "8f9a8a20a712bc8c0918fc97134d5362d4427740", "Url": "https://api.github.com/repos/firemind/magarena-csm-auto", "Date": "2018-05-28T18:03:08Z"},
{"Line": "35=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "nodebase.tech.akshaynexus.MasternodeListView.setContentView(R.layout.activity_masternode_list_view)=>getLayoutInflater().inflate(R.layout.fragment_masternode,android.view.ViewGroup)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5951/buggy-version/app.src.main.java.nodebase.tech.akshaynexus.MasternodeListView.java", "BodyUseAPI": [], "Fixed commit": "b2b9ac75f2e5f4ee25bad283dd01f1ac8e383e24", "Url": "https://api.github.com/repos/akshaynexus/NodeBase-Android", "Date": "2018-09-29T20:26:05Z"},
{"Line": "38=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<com.sahara.melanie.fortify_android.tracker.model.TrackerOption>.get(int)=>java.util.List<com.sahara.melanie.fortify_android.tracker.model.TrackerOption>.get(holder.getAdapterPosition())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8541/buggy-version/app.src.main.java.com.sahara.melanie.fortify_android.tracker.TrackerOptionsAdapter.java", "BodyUseAPI": [], "Fixed commit": "8ca71dbd35368ffff3c1b03e581e7452d0a0b25b", "Url": "https://api.github.com/repos/impactcollective/fortify_android", "Date": "2018-04-30T17:56:17Z"},
{"Line": "38=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.sahara.melanie.fortify_android.tracker.model.TrackerOption>.get(int)=>com.sahara.melanie.fortify_android.tracker.TrackerOptionsAdapter.ViewHolder.getAdapterPosition()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8541/buggy-version/app.src.main.java.com.sahara.melanie.fortify_android.tracker.TrackerOptionsAdapter.java", "BodyUseAPI": [], "Fixed commit": "8ca71dbd35368ffff3c1b03e581e7452d0a0b25b", "Url": "https://api.github.com/repos/impactcollective/fortify_android", "Date": "2018-04-30T17:56:17Z"},
{"Line": "134=>134", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.ArrayDeque<org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.ImgPoint>.poll()=>java.util.ArrayDeque<org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.ImgPoint>.pop()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1250/buggy-version/src.org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.java", "BodyUseAPI": [], "Fixed commit": "7ecd420d36098250e1545eeb55a833d2137d5f14", "Url": "https://api.github.com/repos/cynicalpillow/frc-2018", "Date": "2018-02-18T18:42:12Z"},
{"Line": "250=>250", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "edu.wpi.cscore.UsbCamera.setExposureAuto()=>edu.wpi.cscore.UsbCamera.setExposureManual(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1250/buggy-version/src.org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.java", "BodyUseAPI": [], "Fixed commit": "7ecd420d36098250e1545eeb55a833d2137d5f14", "Url": "https://api.github.com/repos/cynicalpillow/frc-2018", "Date": "2018-02-18T18:42:12Z"},
{"Line": "155=>155", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.ArrayDeque<org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.ImgPoint>.add(org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.ImgPoint)=>java.util.ArrayDeque<org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.ImgPoint>.push(org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.ImgPoint)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1250/buggy-version/src.org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.java", "BodyUseAPI": [], "Fixed commit": "7ecd420d36098250e1545eeb55a833d2137d5f14", "Url": "https://api.github.com/repos/cynicalpillow/frc-2018", "Date": "2018-02-18T18:42:12Z"},
{"Line": "127=>127", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.ArrayDeque<org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.ImgPoint>.add(org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.ImgPoint)=>java.util.ArrayDeque<org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.ImgPoint>.push(org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.ImgPoint)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1250/buggy-version/src.org.usfirst.frc.team6135.robot.subsystems.VisionSubsystem.java", "BodyUseAPI": [], "Fixed commit": "7ecd420d36098250e1545eeb55a833d2137d5f14", "Url": "https://api.github.com/repos/cynicalpillow/frc-2018", "Date": "2018-02-18T18:42:12Z"},
{"Line": "175=>175", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.vertexium.accumulo.AccumuloGraph.saveExtendedDataMutations(mutation.getElement(),org.vertexium.accumulo.ElementType,mutation.getExtendedData(),mutation.getExtendedDataDeletes())=>org.vertexium.accumulo.AccumuloGraph.saveExtendedDataMutations(mutation.getElement(),org.vertexium.accumulo.ElementType,mutation.getExtendedData(),mutation.getExtendedDataDeletes(),org.vertexium.accumulo.Authorizations)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7448/buggy-version/accumulo.src.main.java.org.vertexium.accumulo.AccumuloElement.java", "BodyUseAPI": [], "Fixed commit": "b272631696e28cbb7a351f6cb8ddd983ca75c30c", "Url": "https://api.github.com/repos/visallo/vertexium", "Date": "2018-01-03T16:42:12Z"},
{"Line": "109=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.orekit.utils.ParameterDriver.getName()=>org.orekit.forces.ForceModel.isSupported(emp.name)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/100/buggy-version/java.org.astria.ManualPropagation.java", "BodyUseAPI": [], "Fixed commit": "7f150eca31f536c087de49967fd5593404fa3fe4", "Url": "https://api.github.com/repos/ut-astria/orbdetpy", "Date": "2018-10-18T20:41:58Z"},
{"Line": "6=>6", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Scanner.nextLine()=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6166/buggy-version/FileDriver.java", "BodyUseAPI": [], "Fixed commit": "1a6d6b84b3cd0135ba2868b2902f6269b9ae21d8", "Url": "https://api.github.com/repos/Taylorllippert/File-System", "Date": "2018-08-10T23:46:19Z"},
{"Line": "44=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "FileSystem.printFile(java.lang.String)=>java.io.PrintStream.println(FileSystem)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6166/buggy-version/FileDriver.java", "BodyUseAPI": [], "Fixed commit": "1a6d6b84b3cd0135ba2868b2902f6269b9ae21d8", "Url": "https://api.github.com/repos/Taylorllippert/File-System", "Date": "2018-08-10T23:46:19Z"},
{"Line": "44=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "FileSystem.printFile(java.lang.String)=>java.io.PrintStream.println(FileSystem)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6166/buggy-version/FileDriver.java", "BodyUseAPI": [], "Fixed commit": "1a6d6b84b3cd0135ba2868b2902f6269b9ae21d8", "Url": "https://api.github.com/repos/Taylorllippert/File-System", "Date": "2018-08-10T23:46:19Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.HashMap<java.lang.String, INode>.get(FileSystem)=>java.util.HashMap<java.lang.String, INode>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6166/buggy-version/FileSystem.java", "BodyUseAPI": [], "Fixed commit": "1a6d6b84b3cd0135ba2868b2902f6269b9ae21d8", "Url": "https://api.github.com/repos/Taylorllippert/File-System", "Date": "2018-08-10T23:46:19Z"},
{"Line": "25=>25", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "INode.remove()=>INode.removeBlock()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6166/buggy-version/FileSystem.java", "BodyUseAPI": [], "Fixed commit": "1a6d6b84b3cd0135ba2868b2902f6269b9ae21d8", "Url": "https://api.github.com/repos/Taylorllippert/File-System", "Date": "2018-08-10T23:46:19Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "FileSystem.addBlocks(java.lang.String,int)=>FileSystem.addBlocks(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6166/buggy-version/FileSystem.java", "BodyUseAPI": [], "Fixed commit": "1a6d6b84b3cd0135ba2868b2902f6269b9ae21d8", "Url": "https://api.github.com/repos/Taylorllippert/File-System", "Date": "2018-08-10T23:46:19Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.flutter.plugin.common.PluginRegistry.Registrar.addRequestPermissionResultListener(com.mtechviral.musicfinder.MusicFinderPlugin)=>io.flutter.plugin.common.PluginRegistry.Registrar.addRequestPermissionsResultListener(com.mtechviral.musicfinder.MusicFinderPlugin)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6273/buggy-version/android.src.main.java.com.mtechviral.musicfinder.MusicFinderPlugin.java", "BodyUseAPI": [], "Fixed commit": "fd88fcc1a4b6aff41a650d59a539f6c811f8e590", "Url": "https://api.github.com/repos/iampawan/Flute-Music-Player", "Date": "2018-04-02T15:30:43Z"},
{"Line": "36=>37", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "WechatConfigParams.WECHAT_GET_AUTH_ACCESSTOKEN_URL.replace(\"APPID\", cn.com.yikangbao.config.wechat.WechatConfigSecret.getWechatAppid()).replace(\"APPSECRET\", cn.com.yikangbao.config.wechat.WechatConfigSecret.getWechatSecret()).replace(java.lang.String,java.lang.String)=>WechatConfigParams.WECHAT_GET_AUTH_ACCESSTOKEN_URL.replace(\"APPID\", cn.com.yikangbao.config.wechat.WechatConfigSecret.getWechatAppid()).replace(\"SECRET\", cn.com.yikangbao.config.wechat.WechatConfigSecret.getWechatSecret()).replace(java.lang.String,cn.com.yikangbao.config.wechat.WechatConfigSecret.getWechatSecret())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3041/buggy-version/ins-services.svc-service-wechat.src.main.java.cn.com.yikangbao.service.wechat.auth.impl.WechatAuthServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "4e42a941408afc2487d067bbbf39848b656ec000", "Url": "https://api.github.com/repos/juyecys/ykb-web", "Date": "2018-03-01T06:52:12Z"},
{"Line": "792=>792", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Parser.Parser.loadFromFile(java.lang.String)=>Parser.Parser.loadFromFile(java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/223/buggy-version/GameWorld.src.MapEditor.MapEditor.java", "BodyUseAPI": [], "Fixed commit": "e0582703aaed52adbbb8241cc8ad38d0338803f9", "Url": "https://api.github.com/repos/xavierbroadhead/AdventureGame", "Date": "2018-10-16T10:07:05Z"},
{"Line": "792=>792", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Parser.Parser.loadFromFile(java.lang.String)=>Parser.Parser.loadFromFile(java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/223/buggy-version/GameWorld.src.MapEditor.MapEditor.java", "BodyUseAPI": [], "Fixed commit": "e0582703aaed52adbbb8241cc8ad38d0338803f9", "Url": "https://api.github.com/repos/xavierbroadhead/AdventureGame", "Date": "2018-10-16T10:07:05Z"},
{"Line": "31=>30", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "new okhttp3.OkHttpClient.Builder().connectTimeout(5, java.util.concurrent.TimeUnit.SECONDS).readTimeout(int,java.util.concurrent.TimeUnit)=>new okhttp3.OkHttpClient.Builder().connectTimeout(10, java.util.concurrent.TimeUnit.SECONDS).readTimeout(int,java.util.concurrent.TimeUnit)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5605/buggy-version/app.src.main.java.com.vasskob.downloadmaps.data.di.NetworkModule.java", "BodyUseAPI": [], "Fixed commit": "9d31283af069ebb6107b46a3f746ca6758b4ed8e", "Url": "https://api.github.com/repos/vasskob/OSMsemple", "Date": "2018-01-26T16:09:33Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.yinglan.scg.service.TravelCalendarActivity.setContentView(R.layout.activity_selectdate)=>com.yinglan.scg.service.TravelCalendarActivity.setContentView(R.layout.activity_travelcalendar)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5064/buggy-version/SillyChildGuide.app.src.main.java.com.yinglan.scg.service.TravelCalendarActivity.java", "BodyUseAPI": [], "Fixed commit": "a531aef884a6788f2c5a6c06a040c781201cc4c2", "Url": "https://api.github.com/repos/921668753/SillyChildGuide-Android", "Date": "2018-09-10T16:06:54Z"},
{"Line": "76=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.yinglan.scg.service.TravelCalendarActivity.getString(R.string.selectDate)=>com.yinglan.scg.service.TravelCalendarActivity.getString(R.string.travelCalendar)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5064/buggy-version/SillyChildGuide.app.src.main.java.com.yinglan.scg.service.TravelCalendarActivity.java", "BodyUseAPI": [], "Fixed commit": "a531aef884a6788f2c5a6c06a040c781201cc4c2", "Url": "https://api.github.com/repos/921668753/SillyChildGuide-Android", "Date": "2018-09-10T16:06:54Z"},
{"Line": "99=>99", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "javax.servlet.http.HttpSession.setAttribute(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)=>javax.servlet.http.HttpSession.getAttribute(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/5840/buggy-version/src.main.java.hello.MainController.java", "BodyUseAPI": [], "Fixed commit": "08074580b476704d98849c671fc0767e1c159548", "Url": "https://api.github.com/repos/Arquisoft/InciManager_i3b", "Date": "2018-03-21T17:34:48Z"},
{"Line": "415=>419", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.util.Log.d(java.lang.String,java.lang.String)=>android.util.Log.d(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3447/buggy-version/GoogleMapDirectionAPI.app.src.main.java.vn.edu.khtn.googlemapsforseminar02.MapFragment.java", "BodyUseAPI": [], "Fixed commit": "8e63abf6da403b68085f2aa674f37c0b897a1bca", "Url": "https://api.github.com/repos/henchiyb/HappingTreeHI-04", "Date": "2018-04-10T17:57:14Z"},
{"Line": "64=>63", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.maikhoi.bakingapp.Fragments.InstructionsDetailFragment.setData(com.example.maikhoi.bakingapp.models.RecipesStepsData[],int)=>com.example.maikhoi.bakingapp.fragments.InstructionsDetailFragment.setData(com.example.maikhoi.bakingapp.models.RecipesStepsData[],int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6232/buggy-version/app.src.main.java.com.example.maikhoi.bakingapp.RecipeDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "299f6cacfadb8a8369064ac6b2ad15b6b46e5398", "Url": "https://api.github.com/repos/tqhuy1811/Baking-Project", "Date": "2018-02-11T01:34:59Z"},
{"Line": "66=>65", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "fragment.beginTransaction().add(R.id.frame_layout_for_instructions_fragment,com.example.maikhoi.bakingapp.Fragments.InstructionsDetailFragment)=>fragment.beginTransaction().add(R.id.frame_layout_for_instructions_fragment,com.example.maikhoi.bakingapp.fragments.InstructionsDetailFragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6232/buggy-version/app.src.main.java.com.example.maikhoi.bakingapp.RecipeDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "299f6cacfadb8a8369064ac6b2ad15b6b46e5398", "Url": "https://api.github.com/repos/tqhuy1811/Baking-Project", "Date": "2018-02-11T01:34:59Z"},
{"Line": "51=>50", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.maikhoi.bakingapp.Fragments.RecipeDetailFragment.getRecipeData(com.example.maikhoi.bakingapp.models.RecipesData)=>com.example.maikhoi.bakingapp.fragments.RecipeDetailFragment.getRecipeData(com.example.maikhoi.bakingapp.models.RecipesData)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6232/buggy-version/app.src.main.java.com.example.maikhoi.bakingapp.RecipeDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "299f6cacfadb8a8369064ac6b2ad15b6b46e5398", "Url": "https://api.github.com/repos/tqhuy1811/Baking-Project", "Date": "2018-02-11T01:34:59Z"},
{"Line": "60=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.maikhoi.bakingapp.Fragments.RecipeDetailFragment.getAdapterPosition()=>com.example.maikhoi.bakingapp.fragments.RecipeDetailFragment.getAdapterPosition()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6232/buggy-version/app.src.main.java.com.example.maikhoi.bakingapp.RecipeDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "299f6cacfadb8a8369064ac6b2ad15b6b46e5398", "Url": "https://api.github.com/repos/tqhuy1811/Baking-Project", "Date": "2018-02-11T01:34:59Z"},
{"Line": "78=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.maikhoi.bakingapp.Fragments.RecipeDetailFragment.getRecipeData(com.example.maikhoi.bakingapp.models.RecipesData)=>com.example.maikhoi.bakingapp.fragments.RecipeDetailFragment.getRecipeData(com.example.maikhoi.bakingapp.models.RecipesData)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6232/buggy-version/app.src.main.java.com.example.maikhoi.bakingapp.RecipeDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "299f6cacfadb8a8369064ac6b2ad15b6b46e5398", "Url": "https://api.github.com/repos/tqhuy1811/Baking-Project", "Date": "2018-02-11T01:34:59Z"},
{"Line": "57=>56", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "fragmentManager.beginTransaction().add(R.id.recipe_detail_fragment_instance,com.example.maikhoi.bakingapp.Fragments.RecipeDetailFragment)=>fragmentManager.beginTransaction().add(R.id.recipe_detail_fragment_instance,com.example.maikhoi.bakingapp.fragments.RecipeDetailFragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6232/buggy-version/app.src.main.java.com.example.maikhoi.bakingapp.RecipeDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "299f6cacfadb8a8369064ac6b2ad15b6b46e5398", "Url": "https://api.github.com/repos/tqhuy1811/Baking-Project", "Date": "2018-02-11T01:34:59Z"},
{"Line": "59=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.maikhoi.bakingapp.Fragments.RecipeDetailFragment.getAdapterPosition()=>com.example.maikhoi.bakingapp.fragments.RecipeDetailFragment.getAdapterPosition()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6232/buggy-version/app.src.main.java.com.example.maikhoi.bakingapp.RecipeDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "299f6cacfadb8a8369064ac6b2ad15b6b46e5398", "Url": "https://api.github.com/repos/tqhuy1811/Baking-Project", "Date": "2018-02-11T01:34:59Z"},
{"Line": "84=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "fragmentManager.beginTransaction().add(R.id.recipe_detail_fragment_instance,com.example.maikhoi.bakingapp.Fragments.RecipeDetailFragment)=>fragmentManager.beginTransaction().add(R.id.recipe_detail_fragment_instance,com.example.maikhoi.bakingapp.fragments.RecipeDetailFragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6232/buggy-version/app.src.main.java.com.example.maikhoi.bakingapp.RecipeDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "299f6cacfadb8a8369064ac6b2ad15b6b46e5398", "Url": "https://api.github.com/repos/tqhuy1811/Baking-Project", "Date": "2018-02-11T01:34:59Z"},
{"Line": "54=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.maikhoi.bakingapp.Fragments.RecipeDetailFragment.getStringData(java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>com.example.maikhoi.bakingapp.fragments.RecipeDetailFragment.getStringData(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6232/buggy-version/app.src.main.java.com.example.maikhoi.bakingapp.RecipeDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "299f6cacfadb8a8369064ac6b2ad15b6b46e5398", "Url": "https://api.github.com/repos/tqhuy1811/Baking-Project", "Date": "2018-02-11T01:34:59Z"},
{"Line": "81=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.maikhoi.bakingapp.Fragments.RecipeDetailFragment.getStringData(java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>com.example.maikhoi.bakingapp.fragments.RecipeDetailFragment.getStringData(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6232/buggy-version/app.src.main.java.com.example.maikhoi.bakingapp.RecipeDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "299f6cacfadb8a8369064ac6b2ad15b6b46e5398", "Url": "https://api.github.com/repos/tqhuy1811/Baking-Project", "Date": "2018-02-11T01:34:59Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.maikhoi.bakingapp.Fragments.InstructionsDetailFragment.setData(com.example.maikhoi.bakingapp.models.RecipesStepsData[],int)=>com.example.maikhoi.bakingapp.fragments.InstructionsDetailFragment.setData(com.example.maikhoi.bakingapp.models.RecipesStepsData[],int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6232/buggy-version/app.src.main.java.com.example.maikhoi.bakingapp.InstructionsDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "299f6cacfadb8a8369064ac6b2ad15b6b46e5398", "Url": "https://api.github.com/repos/tqhuy1811/Baking-Project", "Date": "2018-02-11T01:34:59Z"},
{"Line": "32=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "fragment.beginTransaction().add(R.id.frame_layout_for_instructions_fragment,com.example.maikhoi.bakingapp.Fragments.InstructionsDetailFragment)=>fragment.beginTransaction().add(R.id.frame_layout_for_instructions_fragment,com.example.maikhoi.bakingapp.fragments.InstructionsDetailFragment)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6232/buggy-version/app.src.main.java.com.example.maikhoi.bakingapp.InstructionsDetailActivity.java", "BodyUseAPI": [], "Fixed commit": "299f6cacfadb8a8369064ac6b2ad15b6b46e5398", "Url": "https://api.github.com/repos/tqhuy1811/Baking-Project", "Date": "2018-02-11T01:34:59Z"},
{"Line": "155=>155", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.codecool.bread.service.simple.EmployeeServiceImpl.isOwner(java.security.Principal)=>com.codecool.bread.service.simple.EmployeeServiceImpl.isOwner(java.security.Principal,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7094/buggy-version/src.main.java.com.codecool.bread.service.simple.EmployeeServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "453af132a1b84a79c92a27b855af8a1d60c6edaf", "Url": "https://api.github.com/repos/CodecoolMSC2017/jwdb-advanced-bread-backend", "Date": "2018-08-15T17:41:20Z"},
{"Line": "29=>31", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Map<java.lang.Integer, ua.lviv.iot.HouseDevice>.put(java.lang.Integer,ua.lviv.iot.HouseDevice)=>java.util.Map<java.lang.Integer, ua.lviv.iot.HouseDevice>.put(houseDevice.getId(),ua.lviv.iot.HouseDevice)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/936/buggy-version/lab5.src.main.java.ua.lviv.iot.HouseDeviceService.java", "BodyUseAPI": [], "Fixed commit": "825c56f567061ed1dcaa5180a62c91e96809d1be", "Url": "https://api.github.com/repos/Roman-bot-hacker/Java_Work", "Date": "2018-04-02T20:29:56Z"},
{"Line": "29=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.Integer, ua.lviv.iot.HouseDevice>.put(java.lang.Integer,ua.lviv.iot.HouseDevice)=>ua.lviv.iot.HouseDevice.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/936/buggy-version/lab5.src.main.java.ua.lviv.iot.HouseDeviceService.java", "BodyUseAPI": [], "Fixed commit": "825c56f567061ed1dcaa5180a62c91e96809d1be", "Url": "https://api.github.com/repos/Roman-bot-hacker/Java_Work", "Date": "2018-04-02T20:29:56Z"},
{"Line": "176=>177", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.matches(java.lang.String)=>java.lang.String.startsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4126/buggy-version/src.main.java.org.cytoscape.cyndex2.internal.util.NativeInstaller.java", "BodyUseAPI": [], "Fixed commit": "d792d9eb4a7959de962d0abdc9cb5062febb0b18", "Url": "https://api.github.com/repos/cytoscape/cy-ndex-2", "Date": "2018-06-08T22:28:09Z"},
{"Line": "76=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.jsoup.nodes.Element.text()=>org.jsoup.nodes.Element.html()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6778/buggy-version/src.main.java.hello.services.impl.BashOrgParsingService.java", "BodyUseAPI": [], "Fixed commit": "d3b05240b3d159aea0da0c436af36d780c399f97", "Url": "https://api.github.com/repos/Mazle/QuoteBook", "Date": "2018-10-31T09:18:26Z"},
{"Line": "197=>197", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Float.valueOf(java.lang.String)=>java.lang.Float.parseFloat(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1934/buggy-version/app.src.main.java.id.ac.polban.jtk.cometogarut.mvp.view.ReviewFragment.java", "BodyUseAPI": [], "Fixed commit": "93a03985180ac58acb5c4ace8a180c5a2cdcb0be", "Url": "https://api.github.com/repos/MufidJamaluddin/ComeToGarut", "Date": "2018-07-21T17:00:59Z"},
{"Line": "196=>196", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Float.valueOf(java.lang.String)=>java.lang.Float.parseFloat(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1934/buggy-version/app.src.main.java.id.ac.polban.jtk.cometogarut.mvp.view.ReviewFragment.java", "BodyUseAPI": [], "Fixed commit": "93a03985180ac58acb5c4ace8a180c5a2cdcb0be", "Url": "https://api.github.com/repos/MufidJamaluddin/ComeToGarut", "Date": "2018-07-21T17:00:59Z"},
{"Line": "198=>198", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Float.valueOf(java.lang.String)=>java.lang.Float.parseFloat(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1934/buggy-version/app.src.main.java.id.ac.polban.jtk.cometogarut.mvp.view.ReviewFragment.java", "BodyUseAPI": [], "Fixed commit": "93a03985180ac58acb5c4ace8a180c5a2cdcb0be", "Url": "https://api.github.com/repos/MufidJamaluddin/ComeToGarut", "Date": "2018-07-21T17:00:59Z"},
{"Line": "199=>199", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Float.valueOf(java.lang.String)=>java.lang.Float.parseFloat(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1934/buggy-version/app.src.main.java.id.ac.polban.jtk.cometogarut.mvp.view.ReviewFragment.java", "BodyUseAPI": [], "Fixed commit": "93a03985180ac58acb5c4ace8a180c5a2cdcb0be", "Url": "https://api.github.com/repos/MufidJamaluddin/ComeToGarut", "Date": "2018-07-21T17:00:59Z"},
{"Line": "40=>40", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "io.reactivex.Observable<id.ac.polban.jtk.cometogarut.mvp.model.RespList<id.ac.polban.jtk.cometogarut.mvp.model.Review>>.observeOn(io.reactivex.schedulers.Schedulers.io())=>io.reactivex.Observable<id.ac.polban.jtk.cometogarut.mvp.model.RespList<id.ac.polban.jtk.cometogarut.mvp.model.Review>>.subscribeOn(io.reactivex.schedulers.Schedulers.io())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1934/buggy-version/app.src.main.java.id.ac.polban.jtk.cometogarut.mvp.presenter.ReviewPlacePresenter.java", "BodyUseAPI": [], "Fixed commit": "93a03985180ac58acb5c4ace8a180c5a2cdcb0be", "Url": "https://api.github.com/repos/MufidJamaluddin/ComeToGarut", "Date": "2018-07-21T17:00:59Z"},
{"Line": "106=>108", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.marta.dao.repository.StopRepository.saveOrUpdateStopw(java.util.List<org.marta.model.Stop>)=>org.marta.dao.repository.StopRepository.save(org.marta.model.Stop)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6337/buggy-version/src.main.java.org.marta.data.LoadMartaDataToDB.java", "BodyUseAPI": [], "Fixed commit": "16ae28b4d6569a0883e3aeec09702503e14cd9e7", "Url": "https://api.github.com/repos/mailmanindinc/martadynamo", "Date": "2018-01-20T20:42:58Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.mongolz.service.TransactionService.save(com.mongolz.domain.Transaction)=>com.mongolz.service.TransactionService.transaction(com.mongolz.domain.Transaction)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8038/buggy-version/MongolzRest.src.main.java.com.mongolz.controller.TransactionController.java", "BodyUseAPI": [], "Fixed commit": "aea6af82ae1a233a8c5c1210a877d68cc2d5c1ac", "Url": "https://api.github.com/repos/deegii22/mongolz_online_banking", "Date": "2018-05-22T22:54:36Z"},
{"Line": "65=>65", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.google.common.collect.Lists.newArrayList()=>com.google.common.collect.Lists.newArrayListWithCapacity(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2517/buggy-version/src.main.java.com.peach.service.impl.DatabaseConfigurationServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "392645fe627c16000ff0a684f32b50007580d9b6", "Url": "https://api.github.com/repos/lyzhb9014/peach", "Date": "2018-09-09T10:14:53Z"},
{"Line": "120=>120", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.s2mbe.model.transfer.HirshProjection.getHirshCollection()=>com.s2mbe.model.transfer.HirshProjection.getScopusEntities()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6189/buggy-version/src.main.java.com.s2mbe.service.impl.UserServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "2fb6eec821a02c3e5655d19752c95422c1f04a75", "Url": "https://api.github.com/repos/blaze1591/s2m-be", "Date": "2018-03-05T17:04:04Z"},
{"Line": "123=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.s2mbe.model.transfer.HirshProjection.getHirshCollection()=>com.s2mbe.model.transfer.HirshProjection.getScopusEntities()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6189/buggy-version/src.main.java.com.s2mbe.service.impl.UserServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "2fb6eec821a02c3e5655d19752c95422c1f04a75", "Url": "https://api.github.com/repos/blaze1591/s2m-be", "Date": "2018-03-05T17:04:04Z"},
{"Line": "168=>168", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.util.Log.d(com.dieam.reactnativepushnotification.modules.TAG,java.lang.String)=>android.util.Log.v(com.dieam.reactnativepushnotification.modules.RNPushNotification.LOG_TAG,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7788/buggy-version/android.src.main.java.com.dieam.reactnativepushnotification.modules.RNPushNotificationHelper.java", "BodyUseAPI": [], "Fixed commit": "282fb79c7367e166ba609c475bf38495ba3cde55", "Url": "https://api.github.com/repos/joel-speedwell/react-native-push-notification", "Date": "2018-01-10T03:39:31Z"},
{"Line": "168=>168", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.util.Log.d(com.dieam.reactnativepushnotification.modules.TAG,java.lang.String)=>android.util.Log.v(com.dieam.reactnativepushnotification.modules.RNPushNotification.LOG_TAG,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7788/buggy-version/android.src.main.java.com.dieam.reactnativepushnotification.modules.RNPushNotificationHelper.java", "BodyUseAPI": [], "Fixed commit": "282fb79c7367e166ba609c475bf38495ba3cde55", "Url": "https://api.github.com/repos/joel-speedwell/react-native-push-notification", "Date": "2018-01-10T03:39:31Z"},
{"Line": "161=>161", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.facebook.imagepipeline.core.ImagePipeline.fetchDecodedImage(com.facebook.imagepipeline.request.ImageRequest,com.dieam.reactnativepushnotification.modules.RNPushNotificationHelper)=>com.facebook.imagepipeline.core.ImagePipeline.fetchDecodedImage(com.facebook.imagepipeline.request.ImageRequest,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7788/buggy-version/android.src.main.java.com.dieam.reactnativepushnotification.modules.RNPushNotificationHelper.java", "BodyUseAPI": [], "Fixed commit": "282fb79c7367e166ba609c475bf38495ba3cde55", "Url": "https://api.github.com/repos/joel-speedwell/react-native-push-notification", "Date": "2018-01-10T03:39:31Z"},
{"Line": "196=>196", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "liquibase.snapshot.JdbcDatabaseSnapshot.CachingDatabaseMetaData.1.getMSSQLSql(java.lang.String)=>liquibase.snapshot.JdbcDatabaseSnapshot.CachingDatabaseMetaData.1.getMSSQLSql(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2246/buggy-version/liquibase-core.src.main.java.liquibase.snapshot.JdbcDatabaseSnapshot.java", "BodyUseAPI": [], "Fixed commit": "ed305883203a0f7acc1738047d53f2a7a151832b", "Url": "https://api.github.com/repos/Datical/liquibase", "Date": "2018-06-29T14:35:59Z"},
{"Line": "163=>166", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.IOException.printStackTrace()=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/765/buggy-version/src.main.java.controller.FileController.java", "BodyUseAPI": [], "Fixed commit": "82a89ebfc776193133ea09e1e2db58496f218a01", "Url": "https://api.github.com/repos/SER515-IllegalSkillsException/TextEditor", "Date": "2018-10-14T19:10:26Z"},
{"Line": "576=>576", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.tenforwardconsulting.bgloc.cordova.BackgroundGeolocationPlugin.sendEvent(java.lang.String,<nulltype>)=>com.tenforwardconsulting.bgloc.cordova.BackgroundGeolocationPlugin.sendEvent(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6931/buggy-version/android.CDVBackgroundGeolocation.src.main.java.com.tenforwardconsulting.bgloc.cordova.BackgroundGeolocationPlugin.java", "BodyUseAPI": [], "Fixed commit": "b0326736fe867995d6fa8a2a0ad3910ca17f4ecb", "Url": "https://api.github.com/repos/mauron85/cordova-plugin-background-geolocation", "Date": "2018-10-22T12:00:30Z"},
{"Line": "61=>61", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.modern.UIService.getInstance()=>org.jebtk.modern.AssetService.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2298/buggy-version/edu.columbia.rdf.matcalc.toolbox.probes.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.probes.ProbesModule.java", "BodyUseAPI": [], "Fixed commit": "1530cd42e9b3e38391fcda5ec601c5e5296fbe9d", "Url": "https://api.github.com/repos/antonybholmes/matcalc-probes", "Date": "2018-05-21T23:58:19Z"},
{"Line": "61=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.modern.UIService.getInstance()=>org.jebtk.modern.AssetService.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2298/buggy-version/edu.columbia.rdf.matcalc.toolbox.probes.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.probes.ProbesModule.java", "BodyUseAPI": [], "Fixed commit": "1530cd42e9b3e38391fcda5ec601c5e5296fbe9d", "Url": "https://api.github.com/repos/antonybholmes/matcalc-probes", "Date": "2018-05-21T23:58:19Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.modern.UIService.getInstance()=>org.jebtk.modern.AssetService.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2298/buggy-version/edu.columbia.rdf.matcalc.toolbox.probes.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.probes.app.ProbesInfo.java", "BodyUseAPI": [], "Fixed commit": "1530cd42e9b3e38391fcda5ec601c5e5296fbe9d", "Url": "https://api.github.com/repos/antonybholmes/matcalc-probes", "Date": "2018-05-21T23:58:19Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.jebtk.modern.UIService.getInstance()=>org.jebtk.modern.AssetService.getInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2298/buggy-version/edu.columbia.rdf.matcalc.toolbox.probes.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.probes.app.ProbesInfo.java", "BodyUseAPI": [], "Fixed commit": "1530cd42e9b3e38391fcda5ec601c5e5296fbe9d", "Url": "https://api.github.com/repos/antonybholmes/matcalc-probes", "Date": "2018-05-21T23:58:19Z"},
{"Line": "85=>85", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "seedu.address.model.person.Person.getEmail()=>seedu.address.model.person.Person.getBirthday()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3199/buggy-version/src.main.java.seedu.address.logic.commands.MeetCommand.java", "BodyUseAPI": [], "Fixed commit": "e113c56b4273bec860e18f44800ec586c449e09b", "Url": "https://api.github.com/repos/zuweitrack/main", "Date": "2018-03-24T11:49:35Z"},
{"Line": "86=>86", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "seedu.address.model.person.Person.getAddress()=>seedu.address.model.person.Person.getLevelOfFriendship()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3199/buggy-version/src.main.java.seedu.address.logic.commands.MeetCommand.java", "BodyUseAPI": [], "Fixed commit": "e113c56b4273bec860e18f44800ec586c449e09b", "Url": "https://api.github.com/repos/zuweitrack/main", "Date": "2018-03-24T11:49:35Z"},
{"Line": "58=>58", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "LoggerEnum.INFO.name()=>LoggerEnum.DEBUG.name()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6821/buggy-version/actors.common.src.main.java.org.sunbird.learner.util.ContentSearchUtil.java", "BodyUseAPI": [], "Fixed commit": "cfa644d05d7b6925fb4c40ef72b3b51f93252109", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-06-13T05:35:40Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "LoggerEnum.INFO.name()=>LoggerEnum.DEBUG.name()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6821/buggy-version/actors.common.src.main.java.org.sunbird.learner.util.ContentSearchUtil.java", "BodyUseAPI": [], "Fixed commit": "cfa644d05d7b6925fb4c40ef72b3b51f93252109", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-06-13T05:35:40Z"},
{"Line": "510=>510", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "LoggerEnum.INFO.name()=>LoggerEnum.DEBUG.name()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6821/buggy-version/actors.common.src.main.java.org.sunbird.learner.actors.PageManagementActor.java", "BodyUseAPI": [], "Fixed commit": "cfa644d05d7b6925fb4c40ef72b3b51f93252109", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-06-13T05:35:40Z"},
{"Line": "510=>510", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "LoggerEnum.INFO.name()=>LoggerEnum.DEBUG.name()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6821/buggy-version/actors.common.src.main.java.org.sunbird.learner.actors.PageManagementActor.java", "BodyUseAPI": [], "Fixed commit": "cfa644d05d7b6925fb4c40ef72b3b51f93252109", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-mw", "Date": "2018-06-13T05:35:40Z"},
{"Line": "54=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cn.mapway.workday.ui.client.module.okr.info.TextBox.setValue(((result.getCompletion()) == null ? \"0\" : result.getCompletion().toString()))=>cn.mapway.workday.ui.client.common.SliderEx.setValue(((result.getCompletion()) == null ? 0 : result.getCompletion()))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9036/buggy-version/src.main.java.cn.mapway.workday.ui.client.module.okr.info.TaskResultEditor.java", "BodyUseAPI": [], "Fixed commit": "a213e9d330a557f27aa7957205aa299c9c7545d1", "Url": "https://api.github.com/repos/zhangjianshe/workday", "Date": "2018-07-14T16:43:30Z"},
{"Line": "73=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cn.mapway.workday.ui.client.module.okr.info.TextBox.getValue()=>cn.mapway.workday.ui.client.common.SliderEx.getValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9036/buggy-version/src.main.java.cn.mapway.workday.ui.client.module.okr.info.TaskResultEditor.java", "BodyUseAPI": [], "Fixed commit": "a213e9d330a557f27aa7957205aa299c9c7545d1", "Url": "https://api.github.com/repos/zhangjianshe/workday", "Date": "2018-07-14T16:43:30Z"},
{"Line": "59=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.gwt.user.client.ui.TextBox.setValue(((step.getCompletion()) == null ? \"0\" : step.getCompletion().toString()))=>cn.mapway.workday.ui.client.common.SliderEx.setValue(((step.getCompletion()) == null ? 0 : step.getCompletion()))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9036/buggy-version/src.main.java.cn.mapway.workday.ui.client.module.okr.info.TaskStepEditor.java", "BodyUseAPI": [], "Fixed commit": "a213e9d330a557f27aa7957205aa299c9c7545d1", "Url": "https://api.github.com/repos/zhangjianshe/workday", "Date": "2018-07-14T16:43:30Z"},
{"Line": "76=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.gwt.user.client.ui.TextBox.getValue()=>cn.mapway.workday.ui.client.common.SliderEx.getValue()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9036/buggy-version/src.main.java.cn.mapway.workday.ui.client.module.okr.info.TaskStepEditor.java", "BodyUseAPI": [], "Fixed commit": "a213e9d330a557f27aa7957205aa299c9c7545d1", "Url": "https://api.github.com/repos/zhangjianshe/workday", "Date": "2018-07-14T16:43:30Z"},
{"Line": "46=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.tool.pack.PackConfig.getInst().getIgnoredFileNamePatternSet()=>com.tool.pack.PackConfig.getInst().getExcludeFileNamePatternSet()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7142/buggy-version/pack-tool.src.main.java.com.tool.pack.PackHelper.java", "BodyUseAPI": [], "Fixed commit": "2b6d1c6e7c22267c695c05ab5a396b4b109bad07", "Url": "https://api.github.com/repos/rickding/ToolJava", "Date": "2018-04-20T11:30:08Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "Resources.Theme.resolveAttribute(android.R.attr.textColorPrimary,android.util.TypedValue,boolean)=>Resources.Theme.resolveAttribute(android.R.attr.textColorHintInverse,android.util.TypedValue,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9140/buggy-version/app.src.main.java.com.kunzisoft.keepass.fileselect.FileSelectAdapter.java", "BodyUseAPI": [], "Fixed commit": "bfcfb842fbf3103776a7ad786ee3ba4bd7bcf51c", "Url": "https://api.github.com/repos/justintime4tea/KeePassLX", "Date": "2018-04-23T18:59:59Z"},
{"Line": "225=>230", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.net.Uri.fromFile(java.io.File)=>android.support.v4.content.FileProvider.getUriForFile(com.uploadcare.android.widget.activity.UploadcareActivity,java.lang.String,java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4019/buggy-version/widget.src.main.java.com.uploadcare.android.widget.activity.UploadcareActivity.java", "BodyUseAPI": [], "Fixed commit": "6ff54e64fc905a688ccbadd6d4852132c11ad2e1", "Url": "https://api.github.com/repos/eventhandler23/uploadcare-android", "Date": "2018-04-06T07:46:44Z"},
{"Line": "4=>14", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new Sql2o(\"jdbc:postgresql://localhost:5432/wildlife_tracker\", \"fatah\", \"6674fatah\")=>new java.net.URI(\"postgres://localhost:5432/wildlife_tracker\")", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1288/buggy-version/src.main.java.DB.java", "BodyUseAPI": [], "Fixed commit": "a905aca9a6e916dca17177a7d7b88706150503a1", "Url": "https://api.github.com/repos/fatahrez/wildlife-tracker", "Date": "2018-10-23T07:52:32Z"},
{"Line": "32=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "jenkins.model.Jenkins.getInstance()=>jenkins.model.Jenkins.getActiveInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1995/buggy-version/src.main.java.hudson.plugins.locale.LocaleFilter.java", "BodyUseAPI": [], "Fixed commit": "cad9c5ba07b8b4963fb227d35f053365f86f8f95", "Url": "https://api.github.com/repos/jenkinsci/locale-plugin", "Date": "2018-04-15T09:37:20Z"},
{"Line": "61=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "hudson.model.Hudson.getInstance()=>jenkins.model.Jenkins.getActiveInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1995/buggy-version/src.main.java.hudson.plugins.locale.PluginImpl.java", "BodyUseAPI": [], "Fixed commit": "cad9c5ba07b8b4963fb227d35f053365f86f8f95", "Url": "https://api.github.com/repos/jenkinsci/locale-plugin", "Date": "2018-04-15T09:37:20Z"},
{"Line": "94=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "teaselib.core.util.QualifiedItem.namespace()=>java.util.Map<java.lang.String, java.lang.String>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9712/buggy-version/src.pcm.controller.Declarations.java", "BodyUseAPI": [], "Fixed commit": "43ee0cf92a5785b3e9729f2dbc3ddb282261d986", "Url": "https://api.github.com/repos/Citizen-Cane/pcmplayer", "Date": "2018-10-16T15:54:55Z"},
{"Line": "92=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.equalsIgnoreCase(java.lang.String)=>java.lang.String.equalsIgnoreCase(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9712/buggy-version/src.pcm.controller.Declarations.java", "BodyUseAPI": [], "Fixed commit": "43ee0cf92a5785b3e9729f2dbc3ddb282261d986", "Url": "https://api.github.com/repos/Citizen-Cane/pcmplayer", "Date": "2018-10-16T15:54:55Z"},
{"Line": "41=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.toLowerCase()=>java.util.Set<java.lang.String>.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9712/buggy-version/src.pcm.controller.Declarations.java", "BodyUseAPI": [], "Fixed commit": "43ee0cf92a5785b3e9729f2dbc3ddb282261d986", "Url": "https://api.github.com/repos/Citizen-Cane/pcmplayer", "Date": "2018-10-16T15:54:55Z"},
{"Line": "62=>62", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new java.io.File(UI.ShooterAI.GENERATION_FILE_PATH)=>new java.util.Scanner(generationFile)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3882/buggy-version/src.UI.ShooterAI.java", "BodyUseAPI": [], "Fixed commit": "42292229a4358afd304d1ce28a4bf1e0ce4993c8", "Url": "https://api.github.com/repos/MichaelXian/Shooter-AI", "Date": "2018-08-31T07:31:26Z"},
{"Line": "34=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.nickstaggs.nycyellowtaxi2017.repository.RouteRepository.findByPickupLocationId(int)=>com.nickstaggs.nycyellowtaxi2017.repository.RouteRepository.findByPickupLocationId(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4578/buggy-version/src.main.java.com.nickstaggs.nycyellowtaxi2017.controller.RouteController.java", "BodyUseAPI": [], "Fixed commit": "98e16e2d0b973524176b5276584e9ef3a71b47d0", "Url": "https://api.github.com/repos/nickstaggs/nyc-taxi-2017-backend", "Date": "2018-09-17T11:54:38Z"},
{"Line": "41=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.nickstaggs.nycyellowtaxi2017.repository.RouteRepository.findByDropoffLocationId(int)=>com.nickstaggs.nycyellowtaxi2017.repository.RouteRepository.findByDropoffLocationId(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4578/buggy-version/src.main.java.com.nickstaggs.nycyellowtaxi2017.controller.RouteController.java", "BodyUseAPI": [], "Fixed commit": "98e16e2d0b973524176b5276584e9ef3a71b47d0", "Url": "https://api.github.com/repos/nickstaggs/nyc-taxi-2017-backend", "Date": "2018-09-17T11:54:38Z"},
{"Line": "40=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "[public] getAllRoutesByDropoffLocation(int)=>[public] getRouteByPickupLocationAndDropoffLocation(java.lang.Integer,java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4578/buggy-version/src.main.java.com.nickstaggs.nycyellowtaxi2017.controller.RouteController.java", "BodyUseAPI": [], "Fixed commit": "98e16e2d0b973524176b5276584e9ef3a71b47d0", "Url": "https://api.github.com/repos/nickstaggs/nyc-taxi-2017-backend", "Date": "2018-09-17T11:54:38Z"},
{"Line": "129=>129", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "RecyclerView.ViewHolder.getDetails()=>RecyclerView.ViewHolder.getDetailsButtonLayout()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1354/buggy-version/navitiasdkux.src.main.java.org.kisio.navitia.sdk.ui.journey.roadmap.adapter.RoadmapAdapter.java", "BodyUseAPI": [], "Fixed commit": "f38b78b4d741a79bbdd4f30866409e1433e845f5", "Url": "https://api.github.com/repos/CanalTP/NavitiaSDKUX_android", "Date": "2018-08-03T13:33:06Z"},
{"Line": "101=>105", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "client.search(query, ca.ualberta.cs.wrkify.User.class).get(int)=>java.util.List<ca.ualberta.cs.wrkify.User>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6857/buggy-version/wrkify.app.src.main.java.ca.ualberta.cs.wrkify.Searcher.java", "BodyUseAPI": [], "Fixed commit": "4fc3c73586a9c68a4f4f3f2253c3faf725d642b4", "Url": "https://api.github.com/repos/CMPUT301W18T18/wrkify", "Date": "2018-03-19T01:37:38Z"},
{"Line": "386=>386", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.json.JSONObject.put(java.lang.String,cellSignalStrength.toString())=>org.json.JSONObject.put(java.lang.String,android.telephony.CellSignalStrengthWcdma)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1091/buggy-version/app.src.main.java.com.blackphoenix.phoenixutils.NetworkManager.PxNetworkManager.java", "BodyUseAPI": [], "Fixed commit": "17d1d2bd70ad85af2c69430309228a819b10be65", "Url": "https://api.github.com/repos/phoenix-black/PhoenixUtils", "Date": "2018-02-20T11:58:35Z"},
{"Line": "388=>387", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.json.JSONObject.put(java.lang.String,networkStrength.toString())=>org.json.JSONObject.put(java.lang.String,org.json.JSONObject)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1091/buggy-version/app.src.main.java.com.blackphoenix.phoenixutils.NetworkManager.PxNetworkManager.java", "BodyUseAPI": [], "Fixed commit": "17d1d2bd70ad85af2c69430309228a819b10be65", "Url": "https://api.github.com/repos/phoenix-black/PhoenixUtils", "Date": "2018-02-20T11:58:35Z"},
{"Line": "104=>104", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.slf4j.Logger.error(java.lang.String,za.org.grassroot.integration.authentication.ExpiredJwtException)=>org.slf4j.Logger.error(java.lang.String,e.getMessage())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1046/buggy-version/grassroot-integration.src.main.java.za.org.grassroot.integration.authentication.JwtServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "31138ff40443640f0d3611d3a4b89bdf0c4ada4d", "Url": "https://api.github.com/repos/grassrootza/grassroot-platform", "Date": "2018-08-02T14:01:08Z"},
{"Line": "104=>104", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.slf4j.Logger.error(java.lang.String,za.org.grassroot.integration.authentication.ExpiredJwtException)=>org.slf4j.Logger.error(java.lang.String,e.getMessage())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1046/buggy-version/grassroot-integration.src.main.java.za.org.grassroot.integration.authentication.JwtServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "31138ff40443640f0d3611d3a4b89bdf0c4ada4d", "Url": "https://api.github.com/repos/grassrootza/grassroot-platform", "Date": "2018-08-02T14:01:08Z"},
{"Line": "95=>95", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.example.ayush_harshit.bunkmaster.Adapters.SubjectListAdapter.notifyItemRangeChanged(int,subjects.size())=>com.example.ayush_harshit.bunkmaster.Adapters.SubjectListAdapter.setData(java.util.ArrayList<com.example.ayush_harshit.bunkmaster.Adapters.Subject>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/8658/buggy-version/app.src.main.java.com.example.ayush_harshit.bunkmaster.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "bda614c6e47fbb1084d938365790ef8e17222288", "Url": "https://api.github.com/repos/harshit23897/BunkMaster", "Date": "2018-02-26T11:37:56Z"},
{"Line": "248=>248", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.kafka.common.config.ConfigDef.define(java.lang.String,Type.PASSWORD,java.lang.String,Importance.LOW,java.lang.String,java.lang.String,int,Width.LONG,java.lang.String)=>org.apache.kafka.common.config.ConfigDef.define(java.lang.String,Type.PASSWORD,org.apache.kafka.common.config.types.Password,Importance.LOW,java.lang.String,java.lang.String,int,Width.LONG,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1034/buggy-version/kafka-connect-s3.src.main.java.io.confluent.connect.s3.S3SinkConnectorConfig.java", "BodyUseAPI": [], "Fixed commit": "097b7ccf199e7f7eb207364f1675a51f2065c895", "Url": "https://api.github.com/repos/rawipfel/kafka-connect-storage-cloud", "Date": "2018-06-27T03:24:07Z"},
{"Line": "473=>473", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "io.confluent.connect.s3.S3SinkConnectorConfig.getString(java.lang.String)=>getPassword(io.confluent.connect.s3.S3SinkConnectorConfig.SSE_CUSTOMER_KEY).value()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1034/buggy-version/kafka-connect-s3.src.main.java.io.confluent.connect.s3.S3SinkConnectorConfig.java", "BodyUseAPI": [], "Fixed commit": "097b7ccf199e7f7eb207364f1675a51f2065c895", "Url": "https://api.github.com/repos/rawipfel/kafka-connect-storage-cloud", "Date": "2018-06-27T03:24:07Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.bettercloud.vault.VaultConfig.build()=>com.bettercloud.vault.VaultConfig.address(url).build()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/4254/buggy-version/src.main.java.com.datapipe.jenkins.vault.VaultAccessor.java", "BodyUseAPI": [], "Fixed commit": "06449e1097554707b22c79a0b0456bc75bdf466b", "Url": "https://api.github.com/repos/KohlsTechnology/hashicorp-vault-plugin", "Date": "2018-07-12T17:53:32Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.kodgemisi.assignment.repositories.UserRepository.findByEmail(java.lang.String)=>com.kodgemisi.assignment.repositories.UserRepository.findAuthenticatedUserByEmail(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3058/buggy-version/src.main.java.com.kodgemisi.assignment.services.UserDetailsServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "3311363dbf233fc9ae5a0c01b1e65546ebb528a4", "Url": "https://api.github.com/repos/yavuzpeksen/job-application", "Date": "2018-03-24T22:24:08Z"},
{"Line": "55=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println(java.lang.String)=>com.gree.air.condition.utils.Logger.log(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/7404/buggy-version/src.com.gree.air.condition.uart.UartServer.java", "BodyUseAPI": [], "Fixed commit": "cff88899d7729f05f659bfc3324ebcdc21caf9db", "Url": "https://api.github.com/repos/tt2nn/Gree-AirCondition", "Date": "2018-03-07T09:59:49Z"},
{"Line": "394=>394", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.gree.gprs.data.DataManager.saveDataIsSend(int)=>com.gree.gprs.data.DataManager.saveDataIsSend(((dataTransmitMark) * (DataCenter.BUFFER_SIZE)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/3027/buggy-version/GreeGprs.src.com.gree.gprs.data.DataTransmit.java", "BodyUseAPI": [], "Fixed commit": "1f17a7e3bae2ce1b64107b165f2633db71b00a08", "Url": "https://api.github.com/repos/tt2nn/Gree-GPRS", "Date": "2018-03-28T08:52:24Z"},
{"Line": "164=>164", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.fossasia.pslab.fragment.ExperimentDocFragment.newInstance(java.lang.String)=>org.fossasia.pslab.fragment.ExperimentDocMdFragment.newInstance(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/1706/buggy-version/app.src.main.java.org.fossasia.pslab.adapters.PerformExperimentAdapter.java", "BodyUseAPI": [], "Fixed commit": "f09161291e003d524a4cabb59139cb9a30fc3a5f", "Url": "https://api.github.com/repos/Avjeet/pslab-android", "Date": "2018-02-27T14:46:44Z"},
{"Line": "27=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "gov.ca.cwds.event.UserLoggedInEvent.getUserId()=>gov.ca.cwds.idm.service.UserLogService.logUpdate(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9548/buggy-version/src.main.java.gov.ca.cwds.idm.event.UserLoggedInEventListener.java", "BodyUseAPI": [], "Fixed commit": "c18a7431b2f8f2998713231351eb776de51ee138", "Url": "https://api.github.com/repos/ca-cwds/perry", "Date": "2018-09-26T02:22:51Z"},
{"Line": "27=>28", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "gov.ca.cwds.idm.service.UserLogService.logUpdate(event.getUserId())=>gov.ca.cwds.idm.service.UserLogService.logUpdate(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9548/buggy-version/src.main.java.gov.ca.cwds.idm.event.UserLoggedInEventListener.java", "BodyUseAPI": [], "Fixed commit": "c18a7431b2f8f2998713231351eb776de51ee138", "Url": "https://api.github.com/repos/ca-cwds/perry", "Date": "2018-09-26T02:22:51Z"},
{"Line": "26=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.slf4j.Logger.debug(java.lang.String,event.getUserId())=>org.slf4j.Logger.debug(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/9548/buggy-version/src.main.java.gov.ca.cwds.idm.event.UserLoggedInEventListener.java", "BodyUseAPI": [], "Fixed commit": "c18a7431b2f8f2998713231351eb776de51ee138", "Url": "https://api.github.com/repos/ca-cwds/perry", "Date": "2018-09-26T02:22:51Z"},
{"Line": "143=>143", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.view.inputmethod.InputMethodManager.showSoftInput(android.widget.EditText,InputMethodManager.SHOW_FORCED)=>android.view.inputmethod.InputMethodManager.showSoftInput(android.widget.EditText,InputMethodManager.SHOW_IMPLICIT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/6101/buggy-version/npassword.src.main.java.com.itant.npassword.NumberPassword.java", "BodyUseAPI": [], "Fixed commit": "3fce66ca426cccd75929d3086998de24deac4ec7", "Url": "https://api.github.com/repos/ITAnt/NumberPassword", "Date": "2018-06-03T04:27:31Z"},
{"Line": "29=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "shun.gao.sample.blockchain.mining.model.Transaction.getTo()=>shun.gao.sample.blockchain.mining.model.Transaction.getFrom()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V168/2745/buggy-version/client.app.src.main.java.shun.gao.sample.blockchain.mining.ui.holder.TransactionHolder.java", "BodyUseAPI": [], "Fixed commit": "9c418bd4e41c0543402ed22e238eb104892d544c", "Url": "https://api.github.com/repos/theodoregao/blockchain-miner", "Date": "2018-03-01T02:03:31Z"},
{"Line": "75=>74", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.ekint.myapplication.JournalFragment.getFragmentManager()=>com.example.ekint.myapplication.JournalFragment.getChildFragmentManager()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/544/buggy-version/app.src.main.java.com.example.ekint.myapplication.JournalFragment.java", "BodyUseAPI": [], "Fixed commit": "6715faaf36c0efa95bddcb49f610562aa4be160a", "Url": "https://api.github.com/repos/akkim3/SPARK-Android", "Date": "2018-08-07T16:47:22Z"},
{"Line": "190=>192", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Set<com.turn.ttorrent.common.PeerUID>.addAll(tt.getPeers().keySet())=>tt.getPeers().keySet().stream()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2209/buggy-version/server.src.jetbrains.buildServer.torrent.TorrentTrackerManager.java", "BodyUseAPI": [], "Fixed commit": "2cbc1225254c62800117d5e9fa246c47f8371c6b", "Url": "https://api.github.com/repos/JetBrains/teamcity-torrent-plugin", "Date": "2018-02-02T13:39:44Z"},
{"Line": "97=>97", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Message.REQUIRES_PARAMETER.toString().with_parameter(java.lang.String)=>Message.REQUIRES_PARAMETER.with_parameter(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2433/buggy-version/src.cs131.pa1.filter.sequential.SequentialCommandBuilder.java", "BodyUseAPI": [], "Fixed commit": "9d27e4f87436120e3509edc1c9a51dcb50bd83ca", "Url": "https://api.github.com/repos/kevinawei/PA1-Part-1-CS131A", "Date": "2018-10-01T01:50:05Z"},
{"Line": "118=>117", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Message.REQUIRES_PARAMETER.toString().with_parameter(java.lang.String)=>Message.REQUIRES_PARAMETER.with_parameter(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2433/buggy-version/src.cs131.pa1.filter.sequential.SequentialCommandBuilder.java", "BodyUseAPI": [], "Fixed commit": "9d27e4f87436120e3509edc1c9a51dcb50bd83ca", "Url": "https://api.github.com/repos/kevinawei/PA1-Part-1-CS131A", "Date": "2018-10-01T01:50:05Z"},
{"Line": "137=>136", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Message.REQUIRES_PARAMETER.toString()=>Message.REQUIRES_PARAMETER.with_parameter(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2433/buggy-version/src.cs131.pa1.filter.sequential.SequentialCommandBuilder.java", "BodyUseAPI": [], "Fixed commit": "9d27e4f87436120e3509edc1c9a51dcb50bd83ca", "Url": "https://api.github.com/repos/kevinawei/PA1-Part-1-CS131A", "Date": "2018-10-01T01:50:05Z"},
{"Line": "15=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.security.SecureRandom.getInstanceStrong()=>java.security.SecureRandom.getInstance(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2967/buggy-version/src.main.java.ch.keybridge.jose.util.SecureRandomUtility.java", "BodyUseAPI": [], "Fixed commit": "b23ae4657f70fe97df631826ea15a048dabc37b5", "Url": "https://api.github.com/repos/KeyBridge/lib-jose", "Date": "2018-05-01T17:46:05Z"},
{"Line": "79=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.usfirst.frc.team670.robot.commands.joystick_control.Joystick_Drive.logFinished(java.util.HashMap<java.lang.String, java.lang.Object>)=>org.usfirst.frc.team670.robot.commands.joystick_control.Joystick_Drive.logFinished(java.util.HashMap<java.lang.String, java.lang.Object>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4625/buggy-version/src.org.usfirst.frc.team670.robot.commands.joystick_control.Joystick_Drive.java", "BodyUseAPI": [], "Fixed commit": "4b977cad35056176367831badbf0410968657309", "Url": "https://api.github.com/repos/HHS-Team670/2018-Robot", "Date": "2018-02-20T20:40:21Z"},
{"Line": "79=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.util.HashMap<java.lang.String, java.lang.Object>() { { } }=>new java.util.HashMap<java.lang.String, java.lang.Object>() { { } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4625/buggy-version/src.org.usfirst.frc.team670.robot.commands.joystick_control.Joystick_Drive.java", "BodyUseAPI": [], "Fixed commit": "4b977cad35056176367831badbf0410968657309", "Url": "https://api.github.com/repos/HHS-Team670/2018-Robot", "Date": "2018-02-20T20:40:21Z"},
{"Line": "21=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.Long, com.myjobalert.demo.Student>.put(java.lang.Long,com.myjobalert.demo.Student)=>java.util.HashMap<java.lang.Long, com.myjobalert.demo.Job>.put(java.lang.Long,com.myjobalert.demo.Job)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1597/buggy-version/src.main.java.com.myjobalert.demo.DemoApplication.java", "BodyUseAPI": [], "Fixed commit": "f78b534d410d40351c6ebaaa28fb8065877dd02c", "Url": "https://api.github.com/repos/googlr/job-alert", "Date": "2018-08-09T02:56:50Z"},
{"Line": "15=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.myjobalert.demo.Student(\"John\", \"math\")=>new com.myjobalert.demo.Job(\"0000000001\", \"Data Scientist/Quantitative Analyst, Engineering, University Graduate\", \"Google\", \"https://careers.google.com/jobs#!t=jo&jid=/google/data-scientist-quantitative-analyst-1600-amphitheatre-pkwy-mountain-view-ca-2495140088&\", \"Software Engineering\", \"Full-Time\")", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1597/buggy-version/src.main.java.com.myjobalert.demo.DemoApplication.java", "BodyUseAPI": [], "Fixed commit": "f78b534d410d40351c6ebaaa28fb8065877dd02c", "Url": "https://api.github.com/repos/googlr/job-alert", "Date": "2018-08-09T02:56:50Z"},
{"Line": "16=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.myjobalert.demo.Student.getId()=>com.myjobalert.demo.Job.getJobId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1597/buggy-version/src.main.java.com.myjobalert.demo.DemoApplication.java", "BodyUseAPI": [], "Fixed commit": "f78b534d410d40351c6ebaaa28fb8065877dd02c", "Url": "https://api.github.com/repos/googlr/job-alert", "Date": "2018-08-09T02:56:50Z"},
{"Line": "20=>41", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new com.myjobalert.demo.Student(\"Jane\", \"history\")=>new com.myjobalert.demo.Job(\"0000000003\", \"Technical Program Manager, University Graduate\", \"Google\", \"https://careers.google.com/jobs#!t=jo&jid=/google/technical-program-manager-university-1600-amphitheatre-pkwy-mountain-view-ca-3631710107&\", \"Technical Infrastructure\", \"Full-Time\")", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1597/buggy-version/src.main.java.com.myjobalert.demo.DemoApplication.java", "BodyUseAPI": [], "Fixed commit": "f78b534d410d40351c6ebaaa28fb8065877dd02c", "Url": "https://api.github.com/repos/googlr/job-alert", "Date": "2018-08-09T02:56:50Z"},
{"Line": "16=>28", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.Long, com.myjobalert.demo.Student>.put(java.lang.Long,com.myjobalert.demo.Student)=>java.util.HashMap<java.lang.Long, com.myjobalert.demo.Job>.put(java.lang.Long,com.myjobalert.demo.Job)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1597/buggy-version/src.main.java.com.myjobalert.demo.DemoApplication.java", "BodyUseAPI": [], "Fixed commit": "f78b534d410d40351c6ebaaa28fb8065877dd02c", "Url": "https://api.github.com/repos/googlr/job-alert", "Date": "2018-08-09T02:56:50Z"},
{"Line": "21=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.myjobalert.demo.Student.getId()=>com.myjobalert.demo.Job.getJobId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1597/buggy-version/src.main.java.com.myjobalert.demo.DemoApplication.java", "BodyUseAPI": [], "Fixed commit": "f78b534d410d40351c6ebaaa28fb8065877dd02c", "Url": "https://api.github.com/repos/googlr/job-alert", "Date": "2018-08-09T02:56:50Z"},
{"Line": "28=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.shadowmage.ancientwarfare.structure.container.ContainerGateControl.setOwner(net.shadowmage.ancientwarfare.core.owner.Owner)=>net.shadowmage.ancientwarfare.structure.container.ContainerGateControl.setOwner((owner.isEmpty() ? net.shadowmage.ancientwarfare.core.owner.Owner.EMPTY : new net.shadowmage.ancientwarfare.core.owner.Owner(entity.world, tag.getString(net.shadowmage.ancientwarfare.structure.container.ContainerGateControl.OWNER_TAG))))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1650/buggy-version/src.main.java.net.shadowmage.ancientwarfare.structure.container.ContainerGateControl.java", "BodyUseAPI": [], "Fixed commit": "d096a1f550d1a68411985e10fa9a2053ddaf5bc1", "Url": "https://api.github.com/repos/P3pp3rF1y/AncientWarfare2", "Date": "2018-09-28T16:53:47Z"},
{"Line": "65=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "me.susiel2.locationchat.model.Chat.setChatImage(android.widget.ImageView)=>me.susiel2.locationchat.model.Chat.setChatImage(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3985/buggy-version/app.src.main.java.me.susiel2.locationchat.NewChatActivity.java", "BodyUseAPI": [], "Fixed commit": "0331133cf512701d128bfe4da6ddba081ce4fe36", "Url": "https://api.github.com/repos/FBUWestlake/Location-Chat", "Date": "2018-07-19T00:11:47Z"},
{"Line": "69=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "seedu.addressbook.ui.TextUi.showToUser(java.lang.String)=>java.io.PrintStream.print(seedu.addressbook.ui.Formatter.decorate(\"Enter command: \"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6640/buggy-version/src.seedu.addressbook.ui.TextUi.java", "BodyUseAPI": [], "Fixed commit": "084f858c54474a23b1088e4909919d31600fd515", "Url": "https://api.github.com/repos/aguss787/addressbook-level2", "Date": "2018-02-13T18:05:17Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.anuke.ucore.scene.ui.layout.Container.act(float)=>io.anuke.ucore.scene.ui.layout.Container<T>.act(float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2630/buggy-version/src.io.anuke.ucore.scene.ui.Tooltip.java", "BodyUseAPI": [], "Fixed commit": "a21478e3dc4824ef5f87eddfb896d845c00e6d2f", "Url": "https://api.github.com/repos/Anuken/uCore", "Date": "2018-06-30T04:09:03Z"},
{"Line": "243=>244", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.valueOf(float)=>com.daimajia.numberprogressbar.NumberProgressBar.setProgress(float)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2364/buggy-version/app.src.main.java.com.hgkefang.hg_wash_table.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "38d6a934bbfec2f5ba5d14c30d25c334a864cbc6", "Url": "https://api.github.com/repos/ruijindp/HG_Wash_Table", "Date": "2018-10-16T08:27:37Z"},
{"Line": "189=>206", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.RelativeLayout.setPadding(int,int,int,int)=>com.marcoscg.dialogsheet.Utils.dpToPx(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3988/buggy-version/dialogsheet.src.main.java.com.marcoscg.dialogsheet.DialogSheet.java", "BodyUseAPI": [], "Fixed commit": "83e12c7251e279faf3fbfa35d2b0487b6ee5eaee", "Url": "https://api.github.com/repos/marcoscgdev/DialogSheet", "Date": "2018-10-04T15:50:05Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.mou.popularmovies.MoviePosterDetailsActivity.binding.scrollView.post(java.lang.Runnable)=>com.mou.popularmovies.MoviePosterDetailsActivity.binding.scrollView.post(() -> { binding.scrollView.scrollTo(com.mou.popularmovies.MoviePosterDetailsActivity.position[0], com.mou.popularmovies.MoviePosterDetailsActivity.position[1]); })", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3600/buggy-version/app.src.main.java.com.mou.popularmovies.MoviePosterDetailsActivity.java", "BodyUseAPI": [], "Fixed commit": "a4f433f56e9ea0cd18aa202d22e97bdb47cfc699", "Url": "https://api.github.com/repos/Mou123321/PopularMovies", "Date": "2018-10-01T20:59:24Z"},
{"Line": "314=>314", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Map<User, java.lang.Boolean>.set(event.getMember().getUser(),boolean)=>java.util.Map<User, java.lang.Boolean>.put(event.getMember().getUser(),boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5556/buggy-version/src.main.java.Main.java", "BodyUseAPI": [], "Fixed commit": "93aa20894eec3aa33b24c23dd7646d8ded73033a", "Url": "https://api.github.com/repos/phisv/Cradily-Bot", "Date": "2018-09-08T01:55:18Z"},
{"Line": "77=>81", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.format(java.lang.String,byte,byte,byte,byte,byte,byte)=>pcap.NetworkFrame.EthernetFrame.formatMAC(byte[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5860/buggy-version/src.pcap.NetworkFrame.java", "BodyUseAPI": [], "Fixed commit": "e9b60d9d0821a2c6c8e532f89a7597cc9213cea5", "Url": "https://api.github.com/repos/matthieu-labas/PCAPAnalyzer", "Date": "2018-10-24T09:48:23Z"},
{"Line": "109=>109", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.beWoody.tanner.KISS_List.TaskerDBHelper.deleteCat(int)=>com.beWoody.tanner.KISS_List.TaskerDBHelper.deleteTask(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3400/buggy-version/app.src.main.java.com.beWoody.tanner.KISS_List.DragAndDrop.DragAndDropTask.java", "BodyUseAPI": [], "Fixed commit": "810a054f2637cb0000bc1d763f1bc7a8b3b8f830", "Url": "https://api.github.com/repos/Twoody/KISS_List", "Date": "2018-09-16T22:55:55Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.qualcomm.robotcore.hardware.DcMotor.setDirection(DcMotorSimple.Direction.FORWARD)=>com.qualcomm.robotcore.hardware.DcMotor.setDirection(DcMotorSimple.Direction.REVERSE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3419/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.TankChassis.java", "BodyUseAPI": [], "Fixed commit": "15d18c355101d076e4b1bba757f76c3636f565b5", "Url": "https://api.github.com/repos/kalee1/ftc_app_8668_RoverRuckus", "Date": "2018-10-16T03:18:17Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.qualcomm.robotcore.hardware.DcMotor.setDirection(DcMotorSimple.Direction.REVERSE)=>com.qualcomm.robotcore.hardware.DcMotor.setDirection(DcMotorSimple.Direction.FORWARD)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3419/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.TankChassis.java", "BodyUseAPI": [], "Fixed commit": "15d18c355101d076e4b1bba757f76c3636f565b5", "Url": "https://api.github.com/repos/kalee1/ftc_app_8668_RoverRuckus", "Date": "2018-10-16T03:18:17Z"},
{"Line": "78=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<java.lang.Class<?>>.add(java.lang.Class<?>)=>java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3644/buggy-version/server.src.main.java.org.jboss.as.server.deployment.reflect.ClassReflectionIndexUtil.java", "BodyUseAPI": [], "Fixed commit": "f99ab04db6a880af4ff7572aef0bb0ab1a59f55b", "Url": "https://api.github.com/repos/jfdenise/wildfly-core", "Date": "2018-01-22T00:38:27Z"},
{"Line": "77=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Set<java.lang.Class<?>>.contains(java.lang.Class<?>)=>java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3644/buggy-version/server.src.main.java.org.jboss.as.server.deployment.reflect.ClassReflectionIndexUtil.java", "BodyUseAPI": [], "Fixed commit": "f99ab04db6a880af4ff7572aef0bb0ab1a59f55b", "Url": "https://api.github.com/repos/jfdenise/wildfly-core", "Date": "2018-01-22T00:38:27Z"},
{"Line": "79=>79", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.jboss.as.server.deployment.reflect.ClassReflectionIndexUtil.addInterfaces(java.lang.Class<?>,java.util.Set<java.lang.Class<?>>)=>org.jboss.as.server.deployment.reflect.ClassReflectionIndexUtil.addInterfaces(java.lang.Class<?>,java.util.List<java.lang.Class<?>>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3644/buggy-version/server.src.main.java.org.jboss.as.server.deployment.reflect.ClassReflectionIndexUtil.java", "BodyUseAPI": [], "Fixed commit": "f99ab04db6a880af4ff7572aef0bb0ab1a59f55b", "Url": "https://api.github.com/repos/jfdenise/wildfly-core", "Date": "2018-01-22T00:38:27Z"},
{"Line": "62=>62", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.jboss.as.server.deployment.reflect.ClassReflectionIndexUtil.addInterfaces(java.lang.Class<?>,java.util.Set<java.lang.Class<?>>)=>org.jboss.as.server.deployment.reflect.ClassReflectionIndexUtil.addInterfaces(java.lang.Class<?>,java.util.List<java.lang.Class<?>>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3644/buggy-version/server.src.main.java.org.jboss.as.server.deployment.reflect.ClassReflectionIndexUtil.java", "BodyUseAPI": [], "Fixed commit": "f99ab04db6a880af4ff7572aef0bb0ab1a59f55b", "Url": "https://api.github.com/repos/jfdenise/wildfly-core", "Date": "2018-01-22T00:38:27Z"},
{"Line": "58=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Character.isWhilespace(char)=>java.lang.Character.isWhitespace(char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2178/buggy-version/src.main.lang.Expression.java", "BodyUseAPI": [], "Fixed commit": "20031609fce6655866491dfa1993f812e3793fc6", "Url": "https://api.github.com/repos/jhn735/duct", "Date": "2018-02-11T22:51:10Z"},
{"Line": "38=>40", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "io.github.rlshep.bjcp2015beerstyles.db.BjcpDataHelper.getInstance(this).search(java.lang.String)=>io.github.rlshep.bjcp2015beerstyles.db.BjcpDataHelper.getInstance(this).search(io.github.rlshep.bjcp2015beerstyles.formatters.StringFormatter.addDoubleSingleQuotes(searchedText))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6210/buggy-version/bjcp_beer_styles.src.main.java.io.github.rlshep.bjcp2015beerstyles.SearchResultsActivity.java", "BodyUseAPI": [], "Fixed commit": "fa32e0815e81c0da40598088e5f72b7fb082d48a", "Url": "https://api.github.com/repos/Rlshep/BJCP2015BeerStyles", "Date": "2018-04-27T01:24:46Z"},
{"Line": "185=>185", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Arrays.fill(int[],int,int,int)=>java.util.Arrays.fill(int[],int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/302/buggy-version/src.main.java.org.chocosolver.util.objects.IntMap.java", "BodyUseAPI": [], "Fixed commit": "334dbc20333b40c2c6a17242cb6992cd3f209329", "Url": "https://api.github.com/repos/chocoteam/choco-solver", "Date": "2018-04-26T09:42:26Z"},
{"Line": "81=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.usfirst.frc691.Robot2018.subsystems.Drivetrain.applyDeadband(org.usfirst.frc691.Robot2018.RobotMap.limit(xspd),OI.STICK_DEADBAND)=>org.usfirst.frc691.Robot2018.RobotMap.applyDeadband(org.usfirst.frc691.Robot2018.RobotMap.limit(xspd),OI.STICK_DEADBAND)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7846/buggy-version/src.org.usfirst.frc691.Robot2018.subsystems.Drivetrain.java", "BodyUseAPI": [], "Fixed commit": "10ecbed3b5bbe708da60fdf69f935545086151b4", "Url": "https://api.github.com/repos/team691/Robot2018", "Date": "2018-02-06T04:35:09Z"},
{"Line": "82=>82", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.usfirst.frc691.Robot2018.subsystems.Drivetrain.applyDeadband(org.usfirst.frc691.Robot2018.RobotMap.limit(zspd),OI.STICK_DEADBAND)=>org.usfirst.frc691.Robot2018.RobotMap.applyDeadband(org.usfirst.frc691.Robot2018.RobotMap.limit(zspd),OI.STICK_DEADBAND)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7846/buggy-version/src.org.usfirst.frc691.Robot2018.subsystems.Drivetrain.java", "BodyUseAPI": [], "Fixed commit": "10ecbed3b5bbe708da60fdf69f935545086151b4", "Url": "https://api.github.com/repos/team691/Robot2018", "Date": "2018-02-06T04:35:09Z"},
{"Line": "117=>117", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.android.gms.ads.AdRequest.Builder.build()=>new com.google.android.gms.ads.AdRequest.Builder().setGender(AdRequest.GENDER_MALE).addKeyword(\"Crypto\").addKeyword(\"Cipher\").build()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/55/buggy-version/app.src.main.java.com.misker.mike.hasher.Main.java", "BodyUseAPI": [], "Fixed commit": "a7b3029cea12effd53b5ab4b20a27aa0313c55d0", "Url": "https://api.github.com/repos/Miskerest/Hashr", "Date": "2018-02-17T22:23:09Z"},
{"Line": "77=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.ArrayList.get(int)=>android.widget.ListView.getItemAtPosition(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4432/buggy-version/app.src.main.java.com.editor.ucs.piu.download.DownloadActivity.java", "BodyUseAPI": [], "Fixed commit": "4b90b4307298729fd7a9c77d3cf5f67d04a74da5", "Url": "https://api.github.com/repos/infhyroyage/PIUucsEditor", "Date": "2018-10-10T13:43:40Z"},
{"Line": "111=>111", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getResources().getDrawable(R.drawable.ic_marker_home)=>getResources().getDrawable(R.mipmap.ic_marker_home)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/584/buggy-version/app.src.main.java.com.user.maevis.Tab2_Location.java", "BodyUseAPI": [], "Fixed commit": "5eee30e5362e5a522a41436d6a7ec3b553a00978", "Url": "https://api.github.com/repos/chinn015/MAEVIS", "Date": "2018-01-10T18:48:54Z"},
{"Line": "107=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getResources().getDrawable(R.drawable.ic_marker_user)=>getResources().getDrawable(R.mipmap.ic_marker_user)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/584/buggy-version/app.src.main.java.com.user.maevis.Tab2_Location.java", "BodyUseAPI": [], "Fixed commit": "5eee30e5362e5a522a41436d6a7ec3b553a00978", "Url": "https://api.github.com/repos/chinn015/MAEVIS", "Date": "2018-01-10T18:48:54Z"},
{"Line": "286=>258", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.design.junior.CS3311JuniorDesign.model.image.ImageItemsCollection.addImageItem(java.lang.String,java.lang.String)=>com.design.junior.CS3311JuniorDesign.model.image.ImageItemsCollection.addImageItem(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/861/buggy-version/app.src.main.java.com.design.junior.CS3311JuniorDesign.controller.AuthActivity.java", "BodyUseAPI": [], "Fixed commit": "942c1cf4af294ec28e7b064cc99cbc1bfbdf1d50", "Url": "https://api.github.com/repos/jgormley6/CS3311-Junior-Design", "Date": "2018-04-23T03:54:58Z"},
{"Line": "255=>254", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Toast.makeText(getApplicationContext(),java.lang.String,Toast.LENGTH_SHORT)=>android.widget.Toast.makeText(getApplicationContext(),R.string.auth_fail,Toast.LENGTH_SHORT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2677/buggy-version/app.src.main.java.com.example.mahmoudahmed.caht.ui.Activities.Login.java", "BodyUseAPI": [], "Fixed commit": "69c88f038893e52b46609cb530dd934d73aa6ca1", "Url": "https://api.github.com/repos/mahmoud-elshahat/CapstoneProject-Udacity", "Date": "2018-01-26T18:59:35Z"},
{"Line": "97=>97", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.app.ProgressDialog.show(android.content.Context,java.lang.String,((\"Adding \" + (clients.get(position).username)) + \" to friend list\"))=>android.app.ProgressDialog.show(android.content.Context,context.getResources().getString(R.string.processing),((R.string.add) + (clients.get(position).username)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2677/buggy-version/app.src.main.java.com.example.mahmoudahmed.caht.ui.Adapters.RequestAdapter.java", "BodyUseAPI": [], "Fixed commit": "69c88f038893e52b46609cb530dd934d73aa6ca1", "Url": "https://api.github.com/repos/mahmoud-elshahat/CapstoneProject-Udacity", "Date": "2018-01-26T18:59:35Z"},
{"Line": "124=>124", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.zjk.model.ForumInfo.getUserName()=>mContext.getUserInfo().getUserName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2786/buggy-version/app.src.main.java.com.zjk.module.forum.dynamic.adapter.DynamicAdapter.java", "BodyUseAPI": [], "Fixed commit": "9ad69fefa86ba05b71a630a14ebe7a5ffb4024d6", "Url": "https://api.github.com/repos/ZhuangJinKun/run_help_app", "Date": "2018-04-16T01:59:16Z"},
{"Line": "123=>123", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.zjk.model.ForumInfo.getuId()=>mContext.getUserInfo().getuId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2786/buggy-version/app.src.main.java.com.zjk.module.forum.dynamic.adapter.DynamicAdapter.java", "BodyUseAPI": [], "Fixed commit": "9ad69fefa86ba05b71a630a14ebe7a5ffb4024d6", "Url": "https://api.github.com/repos/ZhuangJinKun/run_help_app", "Date": "2018-04-16T01:59:16Z"},
{"Line": "102=>99", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.mike4shur.mancalaapp.PlayingMancalaActivity.showGameOutcomeowPopup(((player2Name.getText().toString()) + \" Wins\"),player2Name.getCurrentTextColor())=>com.example.mike4shur.mancalaapp.PlayingMancalaActivity.showGameOverPopup(((player2Name.getText().toString()) + \" Wins\"),player2Name.getCurrentTextColor())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3556/buggy-version/app.src.main.java.com.example.mike4shur.mancalaapp.PlayingMancalaActivity.java", "BodyUseAPI": [], "Fixed commit": "889f0221ae13886f6d55f2a08cb1891520bc22e4", "Url": "https://api.github.com/repos/shurm/MancalaAndroidApp", "Date": "2018-08-04T16:24:25Z"},
{"Line": "106=>103", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.example.mike4shur.mancalaapp.PlayingMancalaActivity.showGameOutcomeowPopup(((player2Name.getText().toString()) + \" Wins\"),android.graphics.Color.rgb(160, 82, 45))=>com.example.mike4shur.mancalaapp.PlayingMancalaActivity.showGameOverPopup(java.lang.String,Color.GRAY)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3556/buggy-version/app.src.main.java.com.example.mike4shur.mancalaapp.PlayingMancalaActivity.java", "BodyUseAPI": [], "Fixed commit": "889f0221ae13886f6d55f2a08cb1891520bc22e4", "Url": "https://api.github.com/repos/shurm/MancalaAndroidApp", "Date": "2018-08-04T16:24:25Z"},
{"Line": "98=>95", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.mike4shur.mancalaapp.PlayingMancalaActivity.showGameOutcomeowPopup(((player1Name.getText().toString()) + \" Wins\"),player1Name.getCurrentTextColor())=>com.example.mike4shur.mancalaapp.PlayingMancalaActivity.showGameOverPopup(((player1Name.getText().toString()) + \" Wins\"),player1Name.getCurrentTextColor())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3556/buggy-version/app.src.main.java.com.example.mike4shur.mancalaapp.PlayingMancalaActivity.java", "BodyUseAPI": [], "Fixed commit": "889f0221ae13886f6d55f2a08cb1891520bc22e4", "Url": "https://api.github.com/repos/shurm/MancalaAndroidApp", "Date": "2018-08-04T16:24:25Z"},
{"Line": "106=>103", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.graphics.Color.rgb(int,int,int)=>com.example.mike4shur.mancalaapp.PlayingMancalaActivity.showGameOverPopup(java.lang.String,Color.GRAY)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3556/buggy-version/app.src.main.java.com.example.mike4shur.mancalaapp.PlayingMancalaActivity.java", "BodyUseAPI": [], "Fixed commit": "889f0221ae13886f6d55f2a08cb1891520bc22e4", "Url": "https://api.github.com/repos/shurm/MancalaAndroidApp", "Date": "2018-08-04T16:24:25Z"},
{"Line": "61=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "App.util.HTMLFileExport.getPath()=>java.io.File.getPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5583/buggy-version/src.App.util.HTMLFileExport.java", "BodyUseAPI": [], "Fixed commit": "29e8589d8745bda6a735bdbe703864034406ff68", "Url": "https://api.github.com/repos/ser316asu/ser316-dresden-Spring18", "Date": "2018-03-23T05:11:15Z"},
{"Line": "226=>225", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "mx.gob.cultura.endpoint.sparql.SPARQLEndPoint.execQuery(java.lang.String)=>mx.gob.cultura.endpoint.sparql.SPARQLEndPoint.execQuery(mx.gob.cultura.endpoint.sparql.QueryExecution,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1788/buggy-version/src.main.java.mx.gob.cultura.endpoint.sparql.SPARQLEndPoint.java", "BodyUseAPI": [], "Fixed commit": "422994f03bb1b6ef948fb3dfc9b4ef966e2ac2d1", "Url": "https://api.github.com/repos/RepositorioNacionalCultura/SPARQLEndPoint", "Date": "2018-03-15T19:24:43Z"},
{"Line": "670=>666", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Notification.Builder.build()=>android.app.Notification.setLatestEventInfo(getApplicationContext(),getText(R.string.app_name),java.lang.String,android.app.PendingIntent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4042/buggy-version/auto-tethering-app.src.main.java.com.labs.dm.auto_tethering.service.TetheringService.java", "BodyUseAPI": [], "Fixed commit": "189909005bc047c4c258061dc5d2342c0532cb3c", "Url": "https://api.github.com/repos/danielmroczka/auto-tethering", "Date": "2018-09-15T23:01:12Z"},
{"Line": "67=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.lateral.lateral.service.implementation.DefaultBidService.getAllBidsByTaskID(java.lang.String)=>com.lateral.lateral.service.implementation.DefaultBidService.getAllBidsByTaskID(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7970/buggy-version/app.src.main.java.com.lateral.lateral.service.implementation.DefaultBidService.java", "BodyUseAPI": [], "Fixed commit": "ab434eb195b8b995beb0e66eafd586309f305dc7", "Url": "https://api.github.com/repos/CMPUT301W18T13/Lateral", "Date": "2018-04-08T04:24:24Z"},
{"Line": "114=>114", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.lateral.lateral.service.BidService.getAllBidsByTaskID(task.getId())=>com.lateral.lateral.service.BidService.getAllBidsByTaskID(task.getId(),int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7970/buggy-version/app.src.main.java.com.lateral.lateral.service.notification.NewBidNotificationService.java", "BodyUseAPI": [], "Fixed commit": "ab434eb195b8b995beb0e66eafd586309f305dc7", "Url": "https://api.github.com/repos/CMPUT301W18T13/Lateral", "Date": "2018-04-08T04:24:24Z"},
{"Line": "69=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.lateral.lateral.service.implementation.DefaultBidService.getAllBidsByTaskID(java.lang.String)=>com.lateral.lateral.service.implementation.DefaultBidService.getAllBidsByTaskID(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7970/buggy-version/app.src.main.java.com.lateral.lateral.activity.BidListActivity.java", "BodyUseAPI": [], "Fixed commit": "ab434eb195b8b995beb0e66eafd586309f305dc7", "Url": "https://api.github.com/repos/CMPUT301W18T13/Lateral", "Date": "2018-04-08T04:24:24Z"},
{"Line": "102=>103", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.project.pv239.customtimealarm.helpers.TravelTimeGetter.getTimeInSeconds(int,int)=>com.project.pv239.customtimealarm.helpers.time.TimeHelper.getTimeInSeconds(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5678/buggy-version/app.src.main.java.com.project.pv239.customtimealarm.database.entity.Alarm.java", "BodyUseAPI": [], "Fixed commit": "063ed5de8c159c2f40c377a05e86378fe2752ea9", "Url": "https://api.github.com/repos/Kuchto47/CustomTimeAlarm", "Date": "2018-05-07T13:38:24Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.replaceAll(java.lang.String,java.lang.String)=>java.lang.String.replace(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1860/buggy-version/src.main.java.transforms.ReplaceTransform.java", "BodyUseAPI": [], "Fixed commit": "d1a135c6722ad64386e5e70ee5d34a0385b88bbf", "Url": "https://api.github.com/repos/openlattice/shuttle", "Date": "2018-08-29T18:40:50Z"},
{"Line": "44=>44", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.gradle.api.logging.Logger.lifecycle(java.lang.String)=>org.gradle.api.logging.Logger.lifecycle(java.lang.String,getPath(),java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3717/buggy-version/subprojects.shipkit.src.main.groovy.org.shipkit.internal.gradle.git.tasks.CloneGitRepositoryTask.java", "BodyUseAPI": [], "Fixed commit": "a827396e9bdcda32ab7f6910f0fac99ba512ab4a", "Url": "https://api.github.com/repos/mockito/shipkit", "Date": "2018-03-18T21:29:02Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.gradle.api.logging.Logger.lifecycle(java.lang.String)=>org.gradle.api.logging.Logger.lifecycle(java.lang.String,getPath(),java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3717/buggy-version/subprojects.shipkit.src.main.groovy.org.shipkit.internal.gradle.git.tasks.CloneGitRepositoryTask.java", "BodyUseAPI": [], "Fixed commit": "a827396e9bdcda32ab7f6910f0fac99ba512ab4a", "Url": "https://api.github.com/repos/mockito/shipkit", "Date": "2018-03-18T21:29:02Z"},
{"Line": "233=>239", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.genericworkflownodes.util.MIMETypeHelper.getMIMEtypeExtension(m_filenames.getStringArrayValue()[0])=>com.genericworkflownodes.util.MIMETypeHelper.getMIMEtypeExtension(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8001/buggy-version/com.genericworkflownodes.knime.src.com.genericworkflownodes.knime.nodes.io.listimporter.ListMimeFileImporterNodeModel.java", "BodyUseAPI": [], "Fixed commit": "acc912daab1f26ecc4e52635c8f610d3faf3b252", "Url": "https://api.github.com/repos/genericworkflownodes/GenericKnimeNodes", "Date": "2018-10-18T10:23:30Z"},
{"Line": "161=>161", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.String)=>java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1337/buggy-version/nodeControlServer.src.main.java.node.db.DB_Installer.java", "BodyUseAPI": [], "Fixed commit": "cf5b3fc69ed547f014e1e900a631a205ddeb3a3b", "Url": "https://api.github.com/repos/dja12123/Project2018Servers", "Date": "2018-10-18T10:00:48Z"},
{"Line": "161=>161", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.String)=>java.lang.String.format(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1337/buggy-version/nodeControlServer.src.main.java.node.db.DB_Installer.java", "BodyUseAPI": [], "Fixed commit": "cf5b3fc69ed547f014e1e900a631a205ddeb3a3b", "Url": "https://api.github.com/repos/dja12123/Project2018Servers", "Date": "2018-10-18T10:00:48Z"},
{"Line": "123=>126", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.pug.ppm.service.PackageService.updatePackage(pkg.getId(),java.lang.Package)=>com.pug.ppm.service.PackageService.updatePackage(java.lang.String,java.lang.Package)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2177/buggy-version/src.main.java.com.pug.ppm.controller.PackageController.java", "BodyUseAPI": [], "Fixed commit": "2de6c5a2adf563cbce7af74d4606b1c2f7ca97d9", "Url": "https://api.github.com/repos/Pughy12/package-service", "Date": "2018-05-26T17:32:35Z"},
{"Line": "118=>121", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Package.getId()=>org.slf4j.Logger.error(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2177/buggy-version/src.main.java.com.pug.ppm.controller.PackageController.java", "BodyUseAPI": [], "Fixed commit": "2de6c5a2adf563cbce7af74d4606b1c2f7ca97d9", "Url": "https://api.github.com/repos/Pughy12/package-service", "Date": "2018-05-26T17:32:35Z"},
{"Line": "118=>121", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.slf4j.Logger.error(java.lang.String,pkg.getId())=>org.slf4j.Logger.error(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2177/buggy-version/src.main.java.com.pug.ppm.controller.PackageController.java", "BodyUseAPI": [], "Fixed commit": "2de6c5a2adf563cbce7af74d4606b1c2f7ca97d9", "Url": "https://api.github.com/repos/Pughy12/package-service", "Date": "2018-05-26T17:32:35Z"},
{"Line": "115=>118", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.pug.ppm.service.PackageService.getPackageById(pkg.getId())=>com.pug.ppm.service.PackageService.getPackageById(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2177/buggy-version/src.main.java.com.pug.ppm.controller.PackageController.java", "BodyUseAPI": [], "Fixed commit": "2de6c5a2adf563cbce7af74d4606b1c2f7ca97d9", "Url": "https://api.github.com/repos/Pughy12/package-service", "Date": "2018-05-26T17:32:35Z"},
{"Line": "69=>71", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Package.getId()=>org.springframework.http.ResponseEntity.created(java.net.URI)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2177/buggy-version/src.main.java.com.pug.ppm.controller.PackageController.java", "BodyUseAPI": [], "Fixed commit": "2de6c5a2adf563cbce7af74d4606b1c2f7ca97d9", "Url": "https://api.github.com/repos/Pughy12/package-service", "Date": "2018-05-26T17:32:35Z"},
{"Line": "79=>81", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.badlogic.gdx.graphics.g2d.Sprite.getY()=>com.badlogic.gdx.graphics.g2d.Sprite.getBoundingRectangle()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/454/buggy-version/core.src.com.mygdx.game.MyGdxGame.java", "BodyUseAPI": [], "Fixed commit": "5afab65c2ffc10873f58f3d8ae169fff40e7297c", "Url": "https://api.github.com/repos/The-Dr-is-in/Reboot-of-2D-adventures", "Date": "2018-06-06T15:04:16Z"},
{"Line": "227=>227", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.fenixedu.bennu.core.domain.User.getPerson()=>org.fenixedu.bennu.core.domain.User.getExpenditurePerson()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6313/buggy-version/working-capital.src.main.java.module.workingCapital.domain.WorkingCapitalProcess.java", "BodyUseAPI": [], "Fixed commit": "5e09ffd99074daa0189a22f2bf59bb3482e7aeac", "Url": "https://api.github.com/repos/AngelaFrancisca/expenditures", "Date": "2018-07-23T18:32:56Z"},
{"Line": "868=>868", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.netbeans.lib.profiler.server.ProfilerRuntimeCPU.enableProfiling(boolean)=>org.netbeans.lib.profiler.server.ProfilerInterface.disableProfiling()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7775/buggy-version/lib.profiler.src.org.netbeans.lib.profiler.server.ProfilerServer.java", "BodyUseAPI": [], "Fixed commit": "51fc4a64dcfc57555e05bc47927a83f278044508", "Url": "https://api.github.com/repos/richardfearn/visualvm", "Date": "2016-11-03T16:44:11Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.company.Task.getTaskName()=>com.company.Task.getEntireTask()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1158/buggy-version/src.com.company.TaskList.java", "BodyUseAPI": [], "Fixed commit": "1beb5e90e125676f00973d36aa4c356efe8c0337", "Url": "https://api.github.com/repos/alex462/TaskManager", "Date": "2018-03-01T19:41:46Z"},
{"Line": "53=>52", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.kalessil.phpStorm.phpInspectionsEA.utils.OpeanapiEquivalenceUtil.areEqual(com.intellij.psi.PsiElement,parameters[0])=>parameters[0].getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6943/buggy-version/src.main.java.com.kalessil.phpStorm.phpInspectionsEA.inspectors.apiUsage.arrays.ArrayColumnCanBeUsedInspector.java", "BodyUseAPI": [], "Fixed commit": "79a79735717a97adb7932c2bdd151feb5fd57b4e", "Url": "https://api.github.com/repos/kalessil/phpinspectionsea", "Date": "2018-06-17T17:19:53Z"},
{"Line": "38=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.lang.String>.add(java.lang.String)=>java.util.Set<java.lang.String>.add(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5694/buggy-version/src.main.java.ro.cucumber.core.symbols.AbstractSymbolRetrieveParser.java", "BodyUseAPI": [], "Fixed commit": "ea5d93348911219a687285bfb69234086d965aa6", "Url": "https://api.github.com/repos/fslev/cucumber-core", "Date": "2018-07-19T21:48:00Z"},
{"Line": "711=>711", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.String, java.lang.Long>.put(java.lang.String,long)=>java.util.concurrent.ConcurrentHashMap<java.lang.String, java.lang.Long>.put(java.lang.String,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5083/buggy-version/src.main.java.com.stfalcon.chatkit.dialogs.DialogsListAdapter.java", "BodyUseAPI": [], "Fixed commit": "c5d221b2c5f700f0bb02c6dda6ee9753d9921d3e", "Url": "https://api.github.com/repos/RomanScott/ChatKit", "Date": "2018-02-20T00:53:07Z"},
{"Line": "718=>719", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.Long, java.lang.String>.get(long)=>java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.String>.get(long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5083/buggy-version/src.main.java.com.stfalcon.chatkit.dialogs.DialogsListAdapter.java", "BodyUseAPI": [], "Fixed commit": "c5d221b2c5f700f0bb02c6dda6ee9753d9921d3e", "Url": "https://api.github.com/repos/RomanScott/ChatKit", "Date": "2018-02-20T00:53:07Z"},
{"Line": "712=>712", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.Long, java.lang.String>.put(long,java.lang.String)=>java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.String>.put(long,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5083/buggy-version/src.main.java.com.stfalcon.chatkit.dialogs.DialogsListAdapter.java", "BodyUseAPI": [], "Fixed commit": "c5d221b2c5f700f0bb02c6dda6ee9753d9921d3e", "Url": "https://api.github.com/repos/RomanScott/ChatKit", "Date": "2018-02-20T00:53:07Z"},
{"Line": "714=>715", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.String, java.lang.Long>.get(java.lang.String)=>java.util.concurrent.ConcurrentHashMap<java.lang.String, java.lang.Long>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5083/buggy-version/src.main.java.com.stfalcon.chatkit.dialogs.DialogsListAdapter.java", "BodyUseAPI": [], "Fixed commit": "c5d221b2c5f700f0bb02c6dda6ee9753d9921d3e", "Url": "https://api.github.com/repos/RomanScott/ChatKit", "Date": "2018-02-20T00:53:07Z"},
{"Line": "709=>709", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.String, java.lang.Long>.containsKey(java.lang.String)=>java.util.concurrent.ConcurrentHashMap<java.lang.String, java.lang.Long>.containsKey(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5083/buggy-version/src.main.java.com.stfalcon.chatkit.dialogs.DialogsListAdapter.java", "BodyUseAPI": [], "Fixed commit": "c5d221b2c5f700f0bb02c6dda6ee9753d9921d3e", "Url": "https://api.github.com/repos/RomanScott/ChatKit", "Date": "2018-02-20T00:53:07Z"},
{"Line": "223=>225", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "1.displaySearchResults(java.lang.String)=>1.displaySearchResults(java.lang.String,android.support.v7.widget.SearchView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2634/buggy-version/app.src.main.java.free.rm.skytube.gui.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "e330af51af06579274fd407b2e27962e3e72660f", "Url": "https://api.github.com/repos/atomjack/SkyTube", "Date": "2018-08-11T12:23:08Z"},
{"Line": "248=>247", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "free.rm.skytube.gui.activities.MainActivity.1.displaySearchResults(java.lang.String)=>free.rm.skytube.gui.activities.MainActivity.1.displaySearchResults(java.lang.String,android.support.v7.widget.SearchView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2634/buggy-version/app.src.main.java.free.rm.skytube.gui.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "e330af51af06579274fd407b2e27962e3e72660f", "Url": "https://api.github.com/repos/atomjack/SkyTube", "Date": "2018-08-11T12:23:08Z"},
{"Line": "36=>38", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "manager.getPlayer().setComposition(manager.getCompositionManager().loadComposition(compositionName),boolean)=>manager.getPlayer().setComposition(manager.getCompositionManager().loadComposition(compositionName),boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7746/buggy-version/src.main.java.com.ascargon.rocketshow.api.Transport.java", "BodyUseAPI": [], "Fixed commit": "f0d39dff2ec26617be651e358a0c32cb1fa35ce6", "Url": "https://api.github.com/repos/moritzvieli/RocketShow", "Date": "2018-08-01T13:18:05Z"},
{"Line": "271=>271", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.ascargon.rocketshow.Player.setComposition(com.ascargon.rocketshow.composition.Composition,boolean)=>com.ascargon.rocketshow.Player.setComposition(com.ascargon.rocketshow.composition.Composition,boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7746/buggy-version/src.main.java.com.ascargon.rocketshow.Player.java", "BodyUseAPI": [], "Fixed commit": "f0d39dff2ec26617be651e358a0c32cb1fa35ce6", "Url": "https://api.github.com/repos/moritzvieli/RocketShow", "Date": "2018-08-01T13:18:05Z"},
{"Line": "52=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "manager.getPlayer().setComposition(manager.getCompositionManager().loadComposition(composition.getName()))=>manager.getPlayer().setComposition(manager.getCompositionManager().loadComposition(composition.getName()),boolean,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7746/buggy-version/src.main.java.com.ascargon.rocketshow.api.Composition.java", "BodyUseAPI": [], "Fixed commit": "f0d39dff2ec26617be651e358a0c32cb1fa35ce6", "Url": "https://api.github.com/repos/moritzvieli/RocketShow", "Date": "2018-08-01T13:18:05Z"},
{"Line": "106=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.Class.getDeclaredMethods()=>java.lang.Class.getMethods()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5269/buggy-version/compat-webview.src.main.java.com.sw.compat.webview.CompatWebView.java", "BodyUseAPI": [], "Fixed commit": "d5b3b6edd94b24638390296fb96cf26e29e1264c", "Url": "https://api.github.com/repos/heimashi/CompatWebView", "Date": "2018-01-08T12:01:34Z"},
{"Line": "51=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.eyeseetea.malariacare.data.database.model.ProgramDB.getProgram(java.lang.String)=>org.eyeseetea.malariacare.data.database.model.ProgramDB.findByName(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6253/buggy-version/app.src.cnm.java.org.eyeseetea.malariacare.data.database.datasources.ProgramLocalDataSource.java", "BodyUseAPI": [], "Fixed commit": "3137e5190fd5dddc2303c003d3d4a9f69a4ac9fa", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-05-16T10:56:41Z"},
{"Line": "295=>293", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.eyeseetea.malariacare.domain.usecase.HasToGenerateStockProgramUseCase.execute(java.lang.String,org.eyeseetea.malariacare.domain.usecase.HasToGenerateStockProgramUseCase.Callback)=>org.eyeseetea.malariacare.domain.entity.Program.getCode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6253/buggy-version/app.src.cnm.java.org.eyeseetea.malariacare.strategies.DashboardActivityStrategy.java", "BodyUseAPI": [], "Fixed commit": "3137e5190fd5dddc2303c003d3d4a9f69a4ac9fa", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-05-16T10:56:41Z"},
{"Line": "354=>352", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.eyeseetea.malariacare.domain.usecase.HasToGenerateStockProgramUseCase.execute(java.lang.String,org.eyeseetea.malariacare.domain.usecase.HasToGenerateStockProgramUseCase.Callback)=>org.eyeseetea.malariacare.domain.usecase.HasToGenerateStockProgramUseCase.execute(program.getCode(),org.eyeseetea.malariacare.domain.usecase.HasToGenerateStockProgramUseCase.Callback)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6253/buggy-version/app.src.cnm.java.org.eyeseetea.malariacare.strategies.DashboardActivityStrategy.java", "BodyUseAPI": [], "Fixed commit": "3137e5190fd5dddc2303c003d3d4a9f69a4ac9fa", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-05-16T10:56:41Z"},
{"Line": "351=>349", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.eyeseetea.malariacare.domain.usecase.GetUserProgramUIDUseCase.execute(org.eyeseetea.malariacare.domain.usecase.GetUserProgramUIDUseCase.Callback)=>org.eyeseetea.malariacare.domain.usecase.strategies.GetUserProgramUseCase.execute(org.eyeseetea.malariacare.domain.usecase.strategies.GetUserProgramUseCase.Callback)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6253/buggy-version/app.src.cnm.java.org.eyeseetea.malariacare.strategies.DashboardActivityStrategy.java", "BodyUseAPI": [], "Fixed commit": "3137e5190fd5dddc2303c003d3d4a9f69a4ac9fa", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-05-16T10:56:41Z"},
{"Line": "351=>349", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.eyeseetea.malariacare.domain.usecase.GetUserProgramUIDUseCase.execute(org.eyeseetea.malariacare.domain.usecase.GetUserProgramUIDUseCase.Callback)=>org.eyeseetea.malariacare.domain.usecase.strategies.GetUserProgramUseCase.execute(org.eyeseetea.malariacare.domain.usecase.strategies.GetUserProgramUseCase.Callback)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6253/buggy-version/app.src.cnm.java.org.eyeseetea.malariacare.strategies.DashboardActivityStrategy.java", "BodyUseAPI": [], "Fixed commit": "3137e5190fd5dddc2303c003d3d4a9f69a4ac9fa", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-05-16T10:56:41Z"},
{"Line": "128=>126", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "malariaSurvey.getProgramDB().getUid()=>malariaSurvey.getProgramDB().getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6253/buggy-version/app.src.cnm.java.org.eyeseetea.malariacare.strategies.DashboardActivityStrategy.java", "BodyUseAPI": [], "Fixed commit": "3137e5190fd5dddc2303c003d3d4a9f69a4ac9fa", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-05-16T10:56:41Z"},
{"Line": "292=>290", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.eyeseetea.malariacare.domain.usecase.GetUserProgramUIDUseCase.execute(org.eyeseetea.malariacare.domain.usecase.GetUserProgramUIDUseCase.Callback)=>org.eyeseetea.malariacare.domain.usecase.strategies.GetUserProgramUseCase.execute(org.eyeseetea.malariacare.domain.usecase.strategies.GetUserProgramUseCase.Callback)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6253/buggy-version/app.src.cnm.java.org.eyeseetea.malariacare.strategies.DashboardActivityStrategy.java", "BodyUseAPI": [], "Fixed commit": "3137e5190fd5dddc2303c003d3d4a9f69a4ac9fa", "Url": "https://api.github.com/repos/EyeSeeTea/pictureapp", "Date": "2018-05-16T10:56:41Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(stringColor[2])=>java.lang.Double.parseDouble(stringColor[2])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4751/buggy-version/src.main.java.Engine.Parser.Parser.java", "BodyUseAPI": [], "Fixed commit": "d39f5fc056f10beeda28f3c4086e8fd2375764f6", "Url": "https://api.github.com/repos/poluh/JustGameForDevFun", "Date": "2018-07-10T16:58:29Z"},
{"Line": "30=>30", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(stringColor[1])=>java.lang.Double.parseDouble(stringColor[1])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4751/buggy-version/src.main.java.Engine.Parser.Parser.java", "BodyUseAPI": [], "Fixed commit": "d39f5fc056f10beeda28f3c4086e8fd2375764f6", "Url": "https://api.github.com/repos/poluh/JustGameForDevFun", "Date": "2018-07-10T16:58:29Z"},
{"Line": "29=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Integer.parseInt(stringColor[0])=>java.lang.Double.parseDouble(stringColor[0])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4751/buggy-version/src.main.java.Engine.Parser.Parser.java", "BodyUseAPI": [], "Fixed commit": "d39f5fc056f10beeda28f3c4086e8fd2375764f6", "Url": "https://api.github.com/repos/poluh/JustGameForDevFun", "Date": "2018-07-10T16:58:29Z"},
{"Line": "68=>65", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.jsonwebtoken.Jwt.getClaims()=>org.springframework.security.jwt.Jwt.getClaims()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5018/buggy-version/src.main.java.com.revature.caliber.controllers.TrainerController.java", "BodyUseAPI": [], "Fixed commit": "b1969ab4021fb5379782b6e2ef7811a5aa7db829", "Url": "https://api.github.com/repos/revaturelabs/caliber-training-service", "Date": "2018-08-15T15:40:45Z"},
{"Line": "43=>48", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getView().findViewById(R.id.listView)=>android.view.View.findViewById(R.id.listView)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1020/buggy-version/app.src.main.java.ch.epfl.sweng.radius.MessagesFragment.java", "BodyUseAPI": [], "Fixed commit": "29380cf1f194f90edc56d6bd08712447213e4f07", "Url": "https://api.github.com/repos/2018-SWENG/2018-SWENG-Radius", "Date": "2018-10-07T17:07:00Z"},
{"Line": "591=>591", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "backend.value.Instruction.BinaryOps.create(Operator.FMul,backend.value.Value,backend.value.Value,java.lang.String,<nulltype>)=>backend.value.Instruction.BinaryOps.create(Operator.Mul,backend.value.Value,backend.value.Value,java.lang.String,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6148/buggy-version/java.backend.value.Instruction.java", "BodyUseAPI": [], "Fixed commit": "17b36d3ef82c6950ca70f96d958a3b0f2862b62e", "Url": "https://api.github.com/repos/JianpingZeng/xcc", "Date": "2018-03-16T15:04:04Z"},
{"Line": "30=>30", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "area.getChannelGroup().write(com.zhaidaosi.game.jgframework.message.OutMessage.showSucc(map, this.handlerName))=>area.getChannelGroup().writeAndFlush(com.zhaidaosi.game.jgframework.message.OutMessage.showSucc(map, this.handlerName))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1964/buggy-version/src.main.java.com.zhaidaosi.game.server.handler.SendMsgHandler.java", "BodyUseAPI": [], "Fixed commit": "de4da0a4e234d10b1541a3c6c24fe47eaa27720a", "Url": "https://api.github.com/repos/peigongdh/JgWeb", "Date": "2018-02-01T09:46:49Z"},
{"Line": "159=>159", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.deegree.protocol.wps.client.process.ProcessExecution.addXMLInput(input.getId().getCode(),input.getId().getCodeSpace(),java.net.URL,boolean,java.lang.String,java.lang.String,java.lang.String)=>org.deegree.protocol.wps.client.process.ProcessExecution.addXMLInput(input.getId().getCode(),input.getId().getCodeSpace(),java.net.URI,boolean,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5781/buggy-version/deegree-client.deegree-wps-webclient.src.main.java.org.deegree.wpsclient.controller.ProcessExecuter.java", "BodyUseAPI": [], "Fixed commit": "823e44d504326fe10c587c3c03acadfc5a2aa3cb", "Url": "https://api.github.com/repos/deegree/deegree3", "Date": "2016-12-20T17:41:57Z"},
{"Line": "429=>431", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.widget.TextView.getText()=>android.widget.TextView.setText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7439/buggy-version/app.src.main.java.com.smartcity.qiuchenly.View_mainPage.java", "BodyUseAPI": [], "Fixed commit": "fccf9c46a3cd41db259af7a736529a31339a3304", "Url": "https://api.github.com/repos/GuoQuDeHuiYi/SmartRoadSystem", "Date": "2017-12-08T20:09:06Z"},
{"Line": "71=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.qmuiteam.qmui.widget.QMUIEmptyView.show(boolean,getString(R.string.login_please),java.lang.String,getString(R.string.action_sign_in),android.view.View.OnClickListener)=>com.qmuiteam.qmui.widget.QMUIEmptyView.show(boolean,getString(R.string.login_please),getString(R.string.login_reason),getString(R.string.action_sign_in),android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5368/buggy-version/app.src.main.java.xyz.dcme.agg.base.BaseRecycleFragment.java", "BodyUseAPI": [], "Fixed commit": "eb31197eef06a32898b8522c46060ac73d819a59", "Url": "https://api.github.com/repos/caoshen/agg", "Date": "2018-04-17T11:12:52Z"},
{"Line": "181=>183", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Calendar.get(int)=>java.lang.Integer.parseInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2504/buggy-version/app.src.main.java.com.example.bisma.calendar_analyzer.helpers.UtilHelpers.java", "BodyUseAPI": [], "Fixed commit": "6e2d45fdf01d8e1dd09311922c16cf40334d7c6f", "Url": "https://api.github.com/repos/AwaisMajeed2536/CalendarAnalyser", "Date": "2018-03-07T05:18:10Z"},
{"Line": "182=>184", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Calendar.get(int)=>java.lang.Integer.parseInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2504/buggy-version/app.src.main.java.com.example.bisma.calendar_analyzer.helpers.UtilHelpers.java", "BodyUseAPI": [], "Fixed commit": "6e2d45fdf01d8e1dd09311922c16cf40334d7c6f", "Url": "https://api.github.com/repos/AwaisMajeed2536/CalendarAnalyser", "Date": "2018-03-07T05:18:10Z"},
{"Line": "181=>183", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Calendar.get(int)=>java.lang.Integer.parseInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2504/buggy-version/app.src.main.java.com.example.bisma.calendar_analyzer.helpers.UtilHelpers.java", "BodyUseAPI": [], "Fixed commit": "6e2d45fdf01d8e1dd09311922c16cf40334d7c6f", "Url": "https://api.github.com/repos/AwaisMajeed2536/CalendarAnalyser", "Date": "2018-03-07T05:18:10Z"},
{"Line": "182=>184", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Calendar.get(int)=>java.lang.Integer.parseInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2504/buggy-version/app.src.main.java.com.example.bisma.calendar_analyzer.helpers.UtilHelpers.java", "BodyUseAPI": [], "Fixed commit": "6e2d45fdf01d8e1dd09311922c16cf40334d7c6f", "Url": "https://api.github.com/repos/AwaisMajeed2536/CalendarAnalyser", "Date": "2018-03-07T05:18:10Z"},
{"Line": "180=>180", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.bisma.calendar_analyzer.helpers.UtilHelpers.getDateInFormat(java.lang.String)=>java.lang.String.split(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2504/buggy-version/app.src.main.java.com.example.bisma.calendar_analyzer.helpers.UtilHelpers.java", "BodyUseAPI": [], "Fixed commit": "6e2d45fdf01d8e1dd09311922c16cf40334d7c6f", "Url": "https://api.github.com/repos/AwaisMajeed2536/CalendarAnalyser", "Date": "2018-03-07T05:18:10Z"},
{"Line": "182=>184", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Calendar.get(int)=>java.lang.Integer.parseInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2504/buggy-version/app.src.main.java.com.example.bisma.calendar_analyzer.helpers.UtilHelpers.java", "BodyUseAPI": [], "Fixed commit": "6e2d45fdf01d8e1dd09311922c16cf40334d7c6f", "Url": "https://api.github.com/repos/AwaisMajeed2536/CalendarAnalyser", "Date": "2018-03-07T05:18:10Z"},
{"Line": "181=>183", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Calendar.get(int)=>java.lang.Integer.parseInt(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2504/buggy-version/app.src.main.java.com.example.bisma.calendar_analyzer.helpers.UtilHelpers.java", "BodyUseAPI": [], "Fixed commit": "6e2d45fdf01d8e1dd09311922c16cf40334d7c6f", "Url": "https://api.github.com/repos/AwaisMajeed2536/CalendarAnalyser", "Date": "2018-03-07T05:18:10Z"},
{"Line": "109=>109", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.bisma.calendar_analyzer.db.source.TasksSource.newInstance().insertOrUpdate(java.util.ArrayList<com.example.bisma.calendar_analyzer.models.EventModelDep>)=>com.example.bisma.calendar_analyzer.db.source.TasksSource.newInstance().insertOrUpdateAsync(java.util.ArrayList<com.example.bisma.calendar_analyzer.models.EventModelDep>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2504/buggy-version/app.src.main.java.com.example.bisma.calendar_analyzer.ui.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "6e2d45fdf01d8e1dd09311922c16cf40334d7c6f", "Url": "https://api.github.com/repos/AwaisMajeed2536/CalendarAnalyser", "Date": "2018-03-07T05:18:10Z"},
{"Line": "19=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.ui.Model.addAttribute(java.lang.String,java.lang.String)=>net.stelmaszak.tweedit.helper.DataHelper.setAppContext(java.lang.String,org.springframework.ui.Model)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2551/buggy-version/src.main.java.net.stelmaszak.tweedit.controller.CustomErrorController.java", "BodyUseAPI": [], "Fixed commit": "536adfbe2334e86a8b8a54b92f53ddb8d2f32ea9", "Url": "https://api.github.com/repos/Stelmach83/Tweedit", "Date": "2018-09-12T13:01:24Z"},
{"Line": "273=>272", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javafx.scene.layout.VBox.setVgrow(javafx.scene.Node,Priority.ALWAYS)=>javafx.scene.layout.VBox.setVgrow(javafx.scene.layout.HBox,Priority.ALWAYS)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3606/buggy-version/src.com.sciome.charts.SciomeChartBase.java", "BodyUseAPI": [], "Fixed commit": "2264c7fed88b9b0b57f76e47d415650f82bb303b", "Url": "https://api.github.com/repos/auerbachs/BMDExpress-2", "Date": "2018-01-09T22:28:50Z"},
{"Line": "33=>36", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.LinearLayout.setVisibility(View.VISIBLE)=>android.widget.ProgressBar.setVisibility(View.VISIBLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/705/buggy-version/app.src.main.java.net.pixeledstudio.soldforandroid.SplashScreen.java", "BodyUseAPI": [], "Fixed commit": "0fe15ad8019c451a1ff9028242a2473754b5b475", "Url": "https://api.github.com/repos/mginz83/soldforandroid", "Date": "2018-03-08T00:37:30Z"},
{"Line": "85=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.LinearLayout.setVisibility(View.GONE)=>android.widget.ProgressBar.setVisibility(View.GONE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/705/buggy-version/app.src.main.java.net.pixeledstudio.soldforandroid.SplashScreen.java", "BodyUseAPI": [], "Fixed commit": "0fe15ad8019c451a1ff9028242a2473754b5b475", "Url": "https://api.github.com/repos/mginz83/soldforandroid", "Date": "2018-03-08T00:37:30Z"},
{"Line": "26=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "net.pixeledstudio.soldforandroid.SplashScreen.findViewById(R.id.loadingContainer)=>net.pixeledstudio.soldforandroid.SplashScreen.findViewById(R.id.progressBarLoading)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/705/buggy-version/app.src.main.java.net.pixeledstudio.soldforandroid.SplashScreen.java", "BodyUseAPI": [], "Fixed commit": "0fe15ad8019c451a1ff9028242a2473754b5b475", "Url": "https://api.github.com/repos/mginz83/soldforandroid", "Date": "2018-03-08T00:37:30Z"},
{"Line": "53=>52", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.concurrent.Executors.newFixedThreadPool(int)=>java.util.concurrent.Executors.newCachedThreadPool()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/598/buggy-version/filters.src.main.java.ua.net.tokar.json.rainbowrest.RainbowRestOncePerRequestFilter.java", "BodyUseAPI": [], "Fixed commit": "d676cb5963fb5bbdbf45724ba23d868c8dadf2ac", "Url": "https://api.github.com/repos/alexeytokar/rainbow-rest", "Date": "2018-07-02T08:02:01Z"},
{"Line": "36=>35", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.concurrent.Executors.newFixedThreadPool(int)=>java.util.concurrent.Executors.newCachedThreadPool()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/598/buggy-version/filters.src.main.java.ua.net.tokar.json.rainbowrest.RainbowRestOncePerRequestFilter.java", "BodyUseAPI": [], "Fixed commit": "d676cb5963fb5bbdbf45724ba23d868c8dadf2ac", "Url": "https://api.github.com/repos/alexeytokar/rainbow-rest", "Date": "2018-07-02T08:02:01Z"},
{"Line": "56=>56", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "me.temoa.library.Logger.d(java.lang.String,java.lang.String)=>me.temoa.library.Logger.e(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1097/buggy-version/app.src.main.java.me.temoa.logger.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "1e1e5d42789027a0334890b8153e4f7bcb003fd2", "Url": "https://api.github.com/repos/Temoa/Logger", "Date": "2018-02-02T00:58:15Z"},
{"Line": "71=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.killer2048.wxapi.services.JssdkService.getSignature((((request.getRequestURL()) + \"?\") + (request.getQueryString())))=>com.killer2048.wxapi.services.JssdkService.getSignature(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2144/buggy-version/src.main.java.com.killer2048.website.controllers.IndexController.java", "BodyUseAPI": [], "Fixed commit": "49ebba12f44b3593d0f7038ef73f98d2fe44c251", "Url": "https://api.github.com/repos/killer2048/wx_project", "Date": "2018-04-16T09:24:35Z"},
{"Line": "311=>311", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.rilixtech.CountryCodePicker.setRegisteredPhoneNumberTextView(android.support.v7.widget.AppCompatTextView,selectedCountry.getIso().toUpperCase())=>com.rilixtech.CountryCodePicker.setPhoneNumberWatcherToTextView(selectedCountry.getIso().toUpperCase())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3501/buggy-version/library.src.main.java.com.rilixtech.CountryCodePicker.java", "BodyUseAPI": [], "Fixed commit": "6a080bf86375b195d6b6f4af34cd2d38e5c83f81", "Url": "https://api.github.com/repos/joielechong/CountryCodePicker", "Date": "2018-08-22T09:06:36Z"},
{"Line": "188=>187", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getActivity().startActivityForResult(android.content.Intent,int)=>com.example.ndt.sabletid.UserDetailsFragment.4.startActivityForResult(android.content.Intent,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1732/buggy-version/SabletId.app.src.main.java.com.example.ndt.sabletid.UserDetailsFragment.java", "BodyUseAPI": [], "Fixed commit": "d1383a3c1da8da9b51a68d71d2cfd2da7ffd5109", "Url": "https://api.github.com/repos/itommen/sabletit", "Date": "2018-09-02T20:57:52Z"},
{"Line": "237=>236", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getActivity().startActivityForResult(android.content.Intent,int)=>com.example.ndt.sabletid.UserDetailsFragment.startActivityForResult(android.content.Intent,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1732/buggy-version/SabletId.app.src.main.java.com.example.ndt.sabletid.UserDetailsFragment.java", "BodyUseAPI": [], "Fixed commit": "d1383a3c1da8da9b51a68d71d2cfd2da7ffd5109", "Url": "https://api.github.com/repos/itommen/sabletit", "Date": "2018-09-02T20:57:52Z"},
{"Line": "229=>229", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "be.nabu.libs.services.ServiceRuntime.getContext()=>be.nabu.libs.services.ServiceRuntime.getContext(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3141/buggy-version/src.main.java.be.nabu.glue.services.ServiceMethodProvider.java", "BodyUseAPI": [], "Fixed commit": "0de508e3c1fd713e81dc81118decbb1b25f824ab", "Url": "https://api.github.com/repos/nablex/glue-services", "Date": "2018-01-30T14:49:41Z"},
{"Line": "62=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.slf4j.Logger.info(java.lang.String,scenario.getTags(),java.lang.String[])=>org.slf4j.Logger.info(java.lang.String,java.util.List<java.lang.String>,java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1837/buggy-version/src.main.java.io.github.martinschneider.cucumber2junit.FeatureParser.java", "BodyUseAPI": [], "Fixed commit": "8c1f771f383aae4a3cfbaada339e36cfee2194de", "Url": "https://api.github.com/repos/martinschneider/cucumber2junit-maven-plugin", "Date": "2018-05-25T07:56:03Z"},
{"Line": "1947=>1956", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.taobao.weex.bridge.WXBridgeManager.getInstance().post(java.lang.Runnable)=>com.taobao.weex.bridge.WXBridgeManager.getInstance().post(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5875/buggy-version/android.sdk.src.main.java.com.taobao.weex.WXSDKInstance.java", "BodyUseAPI": [], "Fixed commit": "c281b565a0e6707aaac81bbf66a44f5ec348633c", "Url": "https://api.github.com/repos/Hanks10100/incubator-weex", "Date": "2018-07-16T06:11:00Z"},
{"Line": "1947=>1956", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.Runnable() { @java.lang.Override public void run() { com.taobao.weex.bridge.WXBridgeManager.getInstance().forceLayout(getInstanceId()); } }=>new java.lang.Runnable() { @java.lang.Override public void run() { com.taobao.weex.bridge.WXBridgeManager.getInstance().forceLayout(getInstanceId()); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5875/buggy-version/android.sdk.src.main.java.com.taobao.weex.WXSDKInstance.java", "BodyUseAPI": [], "Fixed commit": "c281b565a0e6707aaac81bbf66a44f5ec348633c", "Url": "https://api.github.com/repos/Hanks10100/incubator-weex", "Date": "2018-07-16T06:11:00Z"},
{"Line": "1507=>1516", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new java.lang.Runnable() { @java.lang.Override public void run() { com.taobao.weex.bridge.WXBridgeManager.getInstance().setDefaultRootSize(getInstanceId(), realWidth, realHeight, isWidthWrapContent, isHeightWrapContent); } }=>new java.lang.Runnable() { @java.lang.Override public void run() { com.taobao.weex.bridge.WXBridgeManager.getInstance().setDefaultRootSize(getInstanceId(), realWidth, realHeight, isWidthWrapContent, isHeightWrapContent); } }", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5875/buggy-version/android.sdk.src.main.java.com.taobao.weex.WXSDKInstance.java", "BodyUseAPI": [], "Fixed commit": "c281b565a0e6707aaac81bbf66a44f5ec348633c", "Url": "https://api.github.com/repos/Hanks10100/incubator-weex", "Date": "2018-07-16T06:11:00Z"},
{"Line": "1507=>1516", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.taobao.weex.bridge.WXBridgeManager.getInstance().post(java.lang.Runnable)=>com.taobao.weex.bridge.WXBridgeManager.getInstance().post(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5875/buggy-version/android.sdk.src.main.java.com.taobao.weex.WXSDKInstance.java", "BodyUseAPI": [], "Fixed commit": "c281b565a0e6707aaac81bbf66a44f5ec348633c", "Url": "https://api.github.com/repos/Hanks10100/incubator-weex", "Date": "2018-07-16T06:11:00Z"},
{"Line": "90=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.notfab.hubbasics.spigot.modules.Holograms.hologramExists(java.lang.Integer)=>net.notfab.hubbasics.spigot.modules.Holograms.getInstance().hologramExists(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6653/buggy-version/HB-Spigot.src.main.java.net.notfab.hubbasics.spigot.commands.HologramsCommand.java", "BodyUseAPI": [], "Fixed commit": "f87fc0059d0b412e43a6939dc1258a3999c36cb8", "Url": "https://api.github.com/repos/Fabricio20/HubBasics", "Date": "2018-09-07T22:05:32Z"},
{"Line": "56=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.notfab.hubbasics.spigot.modules.Holograms.hologramExists(java.lang.Integer)=>net.notfab.hubbasics.spigot.modules.Holograms.getInstance().hologramExists(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6653/buggy-version/HB-Spigot.src.main.java.net.notfab.hubbasics.spigot.commands.HologramsCommand.java", "BodyUseAPI": [], "Fixed commit": "f87fc0059d0b412e43a6939dc1258a3999c36cb8", "Url": "https://api.github.com/repos/Fabricio20/HubBasics", "Date": "2018-09-07T22:05:32Z"},
{"Line": "59=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.notfab.hubbasics.spigot.modules.Holograms.resetLines(java.lang.Integer)=>net.notfab.hubbasics.spigot.modules.Holograms.getInstance().resetLines(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6653/buggy-version/HB-Spigot.src.main.java.net.notfab.hubbasics.spigot.commands.HologramsCommand.java", "BodyUseAPI": [], "Fixed commit": "f87fc0059d0b412e43a6939dc1258a3999c36cb8", "Url": "https://api.github.com/repos/Fabricio20/HubBasics", "Date": "2018-09-07T22:05:32Z"},
{"Line": "43=>41", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.notfab.hubbasics.spigot.modules.Holograms.createHologram(player.getLocation(),java.lang.String)=>net.notfab.hubbasics.spigot.modules.Holograms.getInstance().createHologram(player.getLocation(),java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6653/buggy-version/HB-Spigot.src.main.java.net.notfab.hubbasics.spigot.commands.HologramsCommand.java", "BodyUseAPI": [], "Fixed commit": "f87fc0059d0b412e43a6939dc1258a3999c36cb8", "Url": "https://api.github.com/repos/Fabricio20/HubBasics", "Date": "2018-09-07T22:05:32Z"},
{"Line": "76=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.notfab.hubbasics.spigot.modules.Holograms.addLines(java.lang.Integer,org.bukkit.ChatColor.translateAlternateColorCodes('&', argsToString(args, 2)))=>net.notfab.hubbasics.spigot.modules.Holograms.getInstance().addLines(java.lang.Integer,org.bukkit.ChatColor.translateAlternateColorCodes('&', argsToString(args, 2)))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6653/buggy-version/HB-Spigot.src.main.java.net.notfab.hubbasics.spigot.commands.HologramsCommand.java", "BodyUseAPI": [], "Fixed commit": "f87fc0059d0b412e43a6939dc1258a3999c36cb8", "Url": "https://api.github.com/repos/Fabricio20/HubBasics", "Date": "2018-09-07T22:05:32Z"},
{"Line": "93=>91", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.notfab.hubbasics.spigot.modules.Holograms.deleteHologram(java.lang.Integer)=>net.notfab.hubbasics.spigot.modules.Holograms.getInstance().deleteHologram(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6653/buggy-version/HB-Spigot.src.main.java.net.notfab.hubbasics.spigot.commands.HologramsCommand.java", "BodyUseAPI": [], "Fixed commit": "f87fc0059d0b412e43a6939dc1258a3999c36cb8", "Url": "https://api.github.com/repos/Fabricio20/HubBasics", "Date": "2018-09-07T22:05:32Z"},
{"Line": "73=>71", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.notfab.hubbasics.spigot.modules.Holograms.hologramExists(java.lang.Integer)=>net.notfab.hubbasics.spigot.modules.Holograms.getInstance().hologramExists(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6653/buggy-version/HB-Spigot.src.main.java.net.notfab.hubbasics.spigot.commands.HologramsCommand.java", "BodyUseAPI": [], "Fixed commit": "f87fc0059d0b412e43a6939dc1258a3999c36cb8", "Url": "https://api.github.com/repos/Fabricio20/HubBasics", "Date": "2018-09-07T22:05:32Z"},
{"Line": "100=>98", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "net.notfab.hubbasics.spigot.modules.Holograms.getHolograms()=>net.notfab.hubbasics.spigot.modules.Holograms.getInstance().getHolograms()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6653/buggy-version/HB-Spigot.src.main.java.net.notfab.hubbasics.spigot.commands.HologramsCommand.java", "BodyUseAPI": [], "Fixed commit": "f87fc0059d0b412e43a6939dc1258a3999c36cb8", "Url": "https://api.github.com/repos/Fabricio20/HubBasics", "Date": "2018-09-07T22:05:32Z"},
{"Line": "141=>143", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.ImageView.setVisibility((android.text.TextUtils.isEmpty(content) ? INVISIBLE : VISIBLE))=>android.widget.TextView.setTextSize(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3888/buggy-version/app.src.main.java.com.hezd.www.customdial.DialKeyboard.java", "BodyUseAPI": [], "Fixed commit": "76c5d56be352119ceda76544c091659c57806630", "Url": "https://api.github.com/repos/dreamkid/DialKeyBoard", "Date": "2018-07-13T09:36:00Z"},
{"Line": "216=>216", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "Parser.StreamParser.parseAtom()=>Parser.StreamParser.parseExp()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3796/buggy-version/src.Parser.StreamParser.java", "BodyUseAPI": [], "Fixed commit": "0318f4008970c39cc0c122ed784b815ab077add4", "Url": "https://api.github.com/repos/non-sono-bello-ma-patcho/JavaParser", "Date": "2018-07-03T10:40:08Z"},
{"Line": "123=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.sql.ResultSet.getLong(java.lang.String)=>java.sql.ResultSet.getString(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4241/buggy-version/guns-generator.src.main.java.com.stylefeng.guns.generator.engine.config.SqlConfig.java", "BodyUseAPI": [], "Fixed commit": "bcc8a459b2b5cbf2a85ae614179609c7c6180994", "Url": "https://api.github.com/repos/stylefeng/Guns", "Date": "2018-01-16T10:46:47Z"},
{"Line": "103=>103", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.stylefeng.guns.generator.engine.config.Menu.getId()=>com.stylefeng.guns.generator.engine.config.Menu.getCode()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4241/buggy-version/guns-generator.src.main.java.com.stylefeng.guns.generator.engine.config.SqlConfig.java", "BodyUseAPI": [], "Fixed commit": "bcc8a459b2b5cbf2a85ae614179609c7c6180994", "Url": "https://api.github.com/repos/stylefeng/Guns", "Date": "2018-01-16T10:46:47Z"},
{"Line": "123=>123", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.valueOf(long)=>java.sql.ResultSet.getString(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4241/buggy-version/guns-generator.src.main.java.com.stylefeng.guns.generator.engine.config.SqlConfig.java", "BodyUseAPI": [], "Fixed commit": "bcc8a459b2b5cbf2a85ae614179609c7c6180994", "Url": "https://api.github.com/repos/stylefeng/Guns", "Date": "2018-01-16T10:46:47Z"},
{"Line": "420=>427", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.iabako.server.serviceimpl.business.Sale.setExpenses(java.util.List<org.iabako.server.serviceimpl.business.Expense>)=>java.util.List<org.iabako.server.serviceimpl.business.Expense>.add(org.iabako.server.serviceimpl.business.Expense)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4608/buggy-version/src.main.java.org.iabako.server.serviceimpl.business.SaleServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "fd4a2a1a7ddd2d6a367f4573de1ba50a6823bf1c", "Url": "https://api.github.com/repos/iabakoproject/iabako", "Date": "2018-04-16T14:18:59Z"},
{"Line": "20=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.StringBuilder.append(java.lang.String)=>java.lang.StringBuilder.append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3319/buggy-version/src.pg.gipter.producer.GitCommandCreator.java", "BodyUseAPI": [], "Fixed commit": "f0af382824ada978f97949e5ca76c7b91e245743", "Url": "https://api.github.com/repos/PreCyz/GitDiffGenerator", "Date": "2018-09-20T07:36:10Z"},
{"Line": "362=>355", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.googlecode.paradox.metadata.BlobTable.parseFreeBlock(long,byte,int)=>com.googlecode.paradox.metadata.BlobTable.parseFreeBlock(long,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5712/buggy-version/src.main.java.com.googlecode.paradox.metadata.BlobTable.java", "BodyUseAPI": [], "Fixed commit": "5465a84f9ed638f9bd82aa85e80d23c3e6744e45", "Url": "https://api.github.com/repos/leonhad/paradoxdriver", "Date": "2018-09-06T17:38:44Z"},
{"Line": "112=>113", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "this.fontRendererObj.drawString(((\"Research Progress: \" + ((100 - (((this.tileEntity.processTicks) / 2) / 100)) == 100 ? 0 : 100 - (((this.tileEntity.processTicks) / 2) / 100))) + \" %\"),int,int,int)=>this.fontRendererObj.drawString(java.lang.String,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/654/buggy-version/src.main.java.com.mjr.planetprogression.client.gui.GuiSatelliteController.java", "BodyUseAPI": [], "Fixed commit": "865f973929b519ba8896c487c9e9194e2350cf9c", "Url": "https://api.github.com/repos/MJRLegends/Planet-Progression", "Date": "2018-02-25T20:05:38Z"},
{"Line": "112=>112", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "appdorks.tk.teamironchamps54thbranchrajendernagar.ItemListActivity.getSupportFragmentManager()=>appdorks.tk.teamironchamps54thbranchrajendernagar.MemberListActivity.getSupportFragmentManager()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/44/buggy-version/app.src.main.java.appdorks.tk.teamironchamps54thbranchrajendernagar.MemberListActivity.java", "BodyUseAPI": [], "Fixed commit": "55be4ebdac690a12b4eb0a6ec657d8d36b0161d4", "Url": "https://api.github.com/repos/dbc2201/TIC", "Date": "2018-06-08T16:24:31Z"},
{"Line": "38=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Arrays.sort(T[])=>java.util.Arrays.sort(T[],org.urban.data.core.sort.IdentifiableObjectSort)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1386/buggy-version/src.main.java.org.urban.data.core.set.ImmutableObjectSet.java", "BodyUseAPI": [], "Fixed commit": "6d134fe5c0226a8cdc57a98882fa0f59760cd56e", "Url": "https://api.github.com/repos/ViDA-NYU/urban-data-core", "Date": "2018-09-28T22:28:25Z"},
{"Line": "38=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintWriter.println(int)=>java.io.PrintStream.println(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5835/buggy-version/05USACO.Bronze.java", "BodyUseAPI": [], "Fixed commit": "89ee80816dba0e701098f5ebb3da88f59133f6e0", "Url": "https://api.github.com/repos/robinhanstuy/MKS22X", "Date": "2018-03-11T22:10:55Z"},
{"Line": "306=>305", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.ss18.msp.lmu.msp_projectkickoff_ss188.Activities.AppLogicActivity.getUserRole()=>com.example.ss18.msp.lmu.msp_projectkickoff_ss188.Connection.ConnectionManager.getMergedNameBitmap()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1884/buggy-version/app.src.main.java.com.example.ss18.msp.lmu.msp_projectkickoff_ss188.Connection.ConnectionManager.java", "BodyUseAPI": [], "Fixed commit": "7acf1054f828def0ed869804e612c91a7452eccd", "Url": "https://api.github.com/repos/FelipGC/LMU-MSP-GetTogether", "Date": "2018-06-06T14:24:14Z"},
{"Line": "305=>304", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.android.gms.nearby.connection.ConnectionsClient.startAdvertising(com.example.ss18.msp.lmu.msp_projectkickoff_ss188.Activities.AppLogicActivity.getUserRole().getUserName(),java.lang.String,com.google.android.gms.nearby.connection.ConnectionLifecycleCallback,com.google.android.gms.nearby.connection.AdvertisingOptions)=>com.google.android.gms.nearby.connection.ConnectionsClient.startAdvertising(java.lang.String,java.lang.String,com.google.android.gms.nearby.connection.ConnectionLifecycleCallback,com.google.android.gms.nearby.connection.AdvertisingOptions)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1884/buggy-version/app.src.main.java.com.example.ss18.msp.lmu.msp_projectkickoff_ss188.Connection.ConnectionManager.java", "BodyUseAPI": [], "Fixed commit": "7acf1054f828def0ed869804e612c91a7452eccd", "Url": "https://api.github.com/repos/FelipGC/LMU-MSP-GetTogether", "Date": "2018-06-06T14:24:14Z"},
{"Line": "466=>466", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.ballerinalang.artifactgen.models.DeploymentModel.setUsername(java.lang.String)=>org.ballerinalang.artifactgen.models.DeploymentModel.setPassword(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4865/buggy-version/src.main.java.org.ballerinalang.artifactgen.KubeAnnotationProcessor.java", "BodyUseAPI": [], "Fixed commit": "7cfe773f39a8959b3f884036babcc993cace7079", "Url": "https://api.github.com/repos/anuruddhal/kubernetes", "Date": "2018-03-06T13:35:37Z"},
{"Line": "222=>224", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Toast.makeText(android.content.Context,java.lang.String,Toast.LENGTH_SHORT)=>android.widget.Toast.makeText(android.content.Context,java.lang.String,Toast.LENGTH_LONG)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7281/buggy-version/ipay.src.main.java.utils.Validation.java", "BodyUseAPI": [], "Fixed commit": "e56036eb53d22401deb336e337506ce45bcacc16", "Url": "https://api.github.com/repos/iPaykenya/iPay-easy-way-v2", "Date": "2018-09-27T09:35:49Z"},
{"Line": "31=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Enumeration<java.lang.String>.nextElement()=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3999/buggy-version/src.com.upmc.twister.servlets.GetSweetServlet.java", "BodyUseAPI": [], "Fixed commit": "8f616866c533883657f455f7fd166b5fe7177b63", "Url": "https://api.github.com/repos/nadirbelarouci/twister", "Date": "2018-04-30T23:37:00Z"},
{"Line": "36=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.servlet.http.HttpSession.setAttribute(java.lang.String,java.lang.String)=>javax.servlet.http.HttpSession.setAttribute(java.lang.String,com.yermilov.domain.Admin)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5968/buggy-version/src.main.java.com.yermilov.admin.command.AdminLoginCommand.java", "BodyUseAPI": [], "Fixed commit": "4ff6bc63086916befef45d0faaaeca73179e4a7a", "Url": "https://api.github.com/repos/olexandryermilov/taxiproject", "Date": "2018-01-10T19:38:29Z"},
{"Line": "39=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "httpSecurity.cors().and().csrf().disable().authorizeRequests().antMatchers(HttpMethod.POST, Config.REGISTER_URL).permitAll().antMatchers(java.lang.String)=>httpSecurity.cors().and().csrf().disable().authorizeRequests().antMatchers(HttpMethod.POST, Config.REGISTER_URL).permitAll().antMatchers(HttpMethod.POST,Config.LOGIN_URL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5885/buggy-version/src.main.java.com.shark.example.security.configureadapter.LoginWebSecurityConfigureAdapter.java", "BodyUseAPI": [], "Fixed commit": "8886472c5ff40959bed2195583498d2fcfcd0e77", "Url": "https://api.github.com/repos/Shark0/SpringBootJwtLoginExample", "Date": "2018-01-26T09:00:29Z"},
{"Line": "39=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "httpSecurity.cors().and().csrf().disable().authorizeRequests().antMatchers(HttpMethod.POST, Config.REGISTER_URL).permitAll().antMatchers(\"/role1\").hasAuthority(\"role1\").antMatchers(\"/role2\").hasAuthority(\"role2\").anyRequest().authenticated().and()=>httpSecurity.cors().and().csrf().disable().authorizeRequests().antMatchers(HttpMethod.POST, Config.REGISTER_URL).permitAll().antMatchers(HttpMethod.POST, Config.LOGIN_URL).permitAll().antMatchers(\"/role1\").hasAuthority(\"role1\").antMatchers(\"/role2\").hasAuthority(\"role2\").anyRequest()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5885/buggy-version/src.main.java.com.shark.example.security.configureadapter.LoginWebSecurityConfigureAdapter.java", "BodyUseAPI": [], "Fixed commit": "8886472c5ff40959bed2195583498d2fcfcd0e77", "Url": "https://api.github.com/repos/Shark0/SpringBootJwtLoginExample", "Date": "2018-01-26T09:00:29Z"},
{"Line": "39=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "httpSecurity.cors().and().csrf().disable().authorizeRequests().antMatchers(HttpMethod.POST, Config.REGISTER_URL).permitAll().antMatchers(\"/role1\").hasAuthority(\"role1\").antMatchers(java.lang.String)=>httpSecurity.cors().and().csrf().disable().authorizeRequests().antMatchers(HttpMethod.POST, Config.REGISTER_URL).permitAll().antMatchers(HttpMethod.POST, Config.LOGIN_URL).permitAll().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5885/buggy-version/src.main.java.com.shark.example.security.configureadapter.LoginWebSecurityConfigureAdapter.java", "BodyUseAPI": [], "Fixed commit": "8886472c5ff40959bed2195583498d2fcfcd0e77", "Url": "https://api.github.com/repos/Shark0/SpringBootJwtLoginExample", "Date": "2018-01-26T09:00:29Z"},
{"Line": "39=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "httpSecurity.cors().and().csrf().disable().authorizeRequests().antMatchers(HttpMethod.POST, Config.REGISTER_URL).permitAll().antMatchers(\"/role1\").hasAuthority(\"role1\").antMatchers(\"/role2\").hasAuthority(\"role2\").anyRequest().authenticated()=>httpSecurity.cors().and().csrf().disable().authorizeRequests().antMatchers(HttpMethod.POST, Config.REGISTER_URL).permitAll().antMatchers(HttpMethod.POST, Config.LOGIN_URL).permitAll().antMatchers(\"/role1\").hasAuthority(\"role1\").antMatchers(\"/role2\").hasAuthority(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5885/buggy-version/src.main.java.com.shark.example.security.configureadapter.LoginWebSecurityConfigureAdapter.java", "BodyUseAPI": [], "Fixed commit": "8886472c5ff40959bed2195583498d2fcfcd0e77", "Url": "https://api.github.com/repos/Shark0/SpringBootJwtLoginExample", "Date": "2018-01-26T09:00:29Z"},
{"Line": "39=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "httpSecurity.cors().and().csrf().disable().authorizeRequests().antMatchers(HttpMethod.POST, Config.REGISTER_URL).permitAll().antMatchers(\"/role1\").hasAuthority(\"role1\").antMatchers(\"/role2\").hasAuthority(\"role2\").anyRequest()=>httpSecurity.cors().and().csrf().disable().authorizeRequests().antMatchers(HttpMethod.POST, Config.REGISTER_URL).permitAll().antMatchers(HttpMethod.POST, Config.LOGIN_URL).permitAll().antMatchers(\"/role1\").hasAuthority(\"role1\").antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5885/buggy-version/src.main.java.com.shark.example.security.configureadapter.LoginWebSecurityConfigureAdapter.java", "BodyUseAPI": [], "Fixed commit": "8886472c5ff40959bed2195583498d2fcfcd0e77", "Url": "https://api.github.com/repos/Shark0/SpringBootJwtLoginExample", "Date": "2018-01-26T09:00:29Z"},
{"Line": "39=>39", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "httpSecurity.cors().and().csrf().disable().authorizeRequests().antMatchers(HttpMethod.POST, Config.REGISTER_URL).permitAll().antMatchers(\"/role1\").hasAuthority(\"role1\").antMatchers(\"/role2\").hasAuthority(java.lang.String)=>httpSecurity.cors().and().csrf().disable().authorizeRequests().antMatchers(HttpMethod.POST, Config.REGISTER_URL).permitAll().antMatchers(HttpMethod.POST, Config.LOGIN_URL).permitAll().antMatchers(\"/role1\").hasAuthority(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5885/buggy-version/src.main.java.com.shark.example.security.configureadapter.LoginWebSecurityConfigureAdapter.java", "BodyUseAPI": [], "Fixed commit": "8886472c5ff40959bed2195583498d2fcfcd0e77", "Url": "https://api.github.com/repos/Shark0/SpringBootJwtLoginExample", "Date": "2018-01-26T09:00:29Z"},
{"Line": "255=>257", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.deepwelldevelopment.genetiko.Genetiko.setScreen(com.deepwelldevelopment.genetiko.Genetiko.BreedScreen)=>com.deepwelldevelopment.genetiko.engine.database.JobQueue<com.deepwelldevelopment.genetiko.engine.card.Card>.addJob(com.deepwelldevelopment.genetiko.engine.card.Card)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1376/buggy-version/core.src.com.deepwelldevelopment.genetiko.Genetiko.java", "BodyUseAPI": [], "Fixed commit": "08453c2fac7f826d1391fd278dcd694aeb467245", "Url": "https://api.github.com/repos/DeepWellDevelopment/Genetiko", "Date": "2018-04-28T06:55:24Z"},
{"Line": "129=>129", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "club.sigapp.purduecorecmonitor.Activities.MainActivity.floorTabAdapter.getFragments().get(int)=>club.sigapp.purduecorecmonitor.Activities.MainActivity.floorTabAdapter.getFragments().get(viewPager.getCurrentItem())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6514/buggy-version/app.src.main.java.club.sigapp.purduecorecmonitor.Activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "612cc658ce865de4a6c466e4119fe7689dc42ddb", "Url": "https://api.github.com/repos/Purdue-ACM-SIGApp/Purdue-CoRec-Monitor", "Date": "2018-03-07T00:58:51Z"},
{"Line": "79=>80", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "club.sigapp.purduecorecmonitor.Fragments.FloorFragment.checkDisplayNoFavorites()=>club.sigapp.purduecorecmonitor.Fragments.FloorFragment.checkDisplayNoFavorites(club.sigapp.purduecorecmonitor.Utils.Favorites.getFavoriteModels().size())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6514/buggy-version/app.src.main.java.club.sigapp.purduecorecmonitor.Fragments.FloorFragment.java", "BodyUseAPI": [], "Fixed commit": "612cc658ce865de4a6c466e4119fe7689dc42ddb", "Url": "https://api.github.com/repos/Purdue-ACM-SIGApp/Purdue-CoRec-Monitor", "Date": "2018-03-07T00:58:51Z"},
{"Line": "14=>19", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "nl.han.ica.leathermanlars.LeathermanLars.addGameObject(nl.han.ica.leathermanlars.Snake,this.getX(),((this.getY()) + ((this.getHeight()) - (snake.getHeight()))))=>nl.han.ica.leathermanlars.LeathermanLars.addGameObject(nl.han.ica.leathermanlars.Snake,this.getX(),((this.getY()) + ((this.getHeight()) - (SmallSnake.getHeight()))))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1365/buggy-version/src.main.java.nl.han.ica.leathermanlars.ExplodingSmallCactus.java", "BodyUseAPI": [], "Fixed commit": "2ee1d297d6ba7a18d0ad28d32495fc9134e0804c", "Url": "https://api.github.com/repos/MarkOgink/LeathermanLars", "Date": "2018-04-04T13:15:17Z"},
{"Line": "61=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "dataSnapshot.getValue(com.squad.stopby.Profile.class).getUsername()=>com.squad.stopby.Profile.getUsername()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3579/buggy-version/StopBy.app.src.main.java.com.squad.stopby.Post.java", "BodyUseAPI": [], "Fixed commit": "65976d8d9c8dcaa38885c502ed0739a9ad94ed48", "Url": "https://api.github.com/repos/rmredder/StopBy", "Date": "2018-03-27T16:09:47Z"},
{"Line": "58=>51", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "profileDatabaseReference.child(currentUser.getUid()).addValueEventListener(com.google.firebase.database.ValueEventListener)=>profileDatabaseReference.child(currentUser.getUid()).addValueEventListener(com.google.firebase.database.ValueEventListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3579/buggy-version/StopBy.app.src.main.java.com.squad.stopby.Post.java", "BodyUseAPI": [], "Fixed commit": "65976d8d9c8dcaa38885c502ed0739a9ad94ed48", "Url": "https://api.github.com/repos/rmredder/StopBy", "Date": "2018-03-27T16:09:47Z"},
{"Line": "70=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.util.Log.d(java.lang.String,java.lang.String)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3579/buggy-version/StopBy.app.src.main.java.com.squad.stopby.Post.java", "BodyUseAPI": [], "Fixed commit": "65976d8d9c8dcaa38885c502ed0739a9ad94ed48", "Url": "https://api.github.com/repos/rmredder/StopBy", "Date": "2018-03-27T16:09:47Z"},
{"Line": "467=>467", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.tridas.schema.ControlledVoc.getNormal()=>org.tellervo.schema.WSIBox.getTitle()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5894/buggy-version/src.main.java.org.tellervo.desktop.util.JTableSpreadsheetAdapter.java", "BodyUseAPI": [], "Fixed commit": "b087983485379f543c27816a0288b9537949c281", "Url": "https://api.github.com/repos/ltrr-arizona-edu/tellervo", "Date": "2018-02-13T21:12:45Z"},
{"Line": "469=>469", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.tellervo.desktop.bulkdataentry.model.AbstractBulkImportTableModel.setValueAt(org.tridas.schema.ControlledVoc,int,int)=>org.tellervo.desktop.bulkdataentry.model.AbstractBulkImportTableModel.setValueAt(org.tellervo.schema.WSIBox,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5894/buggy-version/src.main.java.org.tellervo.desktop.util.JTableSpreadsheetAdapter.java", "BodyUseAPI": [], "Fixed commit": "b087983485379f543c27816a0288b9537949c281", "Url": "https://api.github.com/repos/ltrr-arizona-edu/tellervo", "Date": "2018-02-13T21:12:45Z"},
{"Line": "88=>88", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "files.get(row).getPages()=>files.get(row).getAvailablePages()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/512/buggy-version/src.gui.PdfFileTableModel.java", "BodyUseAPI": [], "Fixed commit": "8aa2850129887ca868eecf044a8a6eb79be419d0", "Url": "https://api.github.com/repos/TsimpDim/PDFusion", "Date": "2018-10-25T07:10:12Z"},
{"Line": "37=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.persistence.TypedQuery<model.entity.User>.getSingleResult()=>java.util.List<model.entity.User>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1879/buggy-version/src.main.java.model.repo.user.UserRepoImpl.java", "BodyUseAPI": [], "Fixed commit": "209ff496e994364b276020d0e486134eb0f5adfc", "Url": "https://api.github.com/repos/vutaydk/dailyreport", "Date": "2018-04-12T07:45:40Z"},
{"Line": "37=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.persistence.TypedQuery<model.entity.User>.getSingleResult()=>java.util.List<model.entity.User>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1879/buggy-version/src.main.java.model.repo.user.UserRepoImpl.java", "BodyUseAPI": [], "Fixed commit": "209ff496e994364b276020d0e486134eb0f5adfc", "Url": "https://api.github.com/repos/vutaydk/dailyreport", "Date": "2018-04-12T07:45:40Z"},
{"Line": "55=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "edu.columbia.rdf.matcalc.toolbox.genes.info.GeneInfoDialog.setDialogCardContent(org.jebtk.modern.panel.MatrixPanel)=>edu.columbia.rdf.matcalc.toolbox.genes.info.GeneInfoDialog.setCard(org.jebtk.modern.panel.MatrixPanel)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3773/buggy-version/edu.columbia.rdf.matcalc.toolbox.genes.info.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.genes.info.GeneInfoDialog.java", "BodyUseAPI": [], "Fixed commit": "8f5f19eff3e7176cb06fb550e5d548f043757c14", "Url": "https://api.github.com/repos/antonybholmes/matcalc-geneinfo", "Date": "2018-03-15T23:52:58Z"},
{"Line": "53=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.github.tianma8023.xposed.smscode.utils.XLog.i(java.lang.String,de.robv.android.xposed.XposedBridge.getXposedVersion())=>com.github.tianma8023.xposed.smscode.utils.XLog.i(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1602/buggy-version/app.src.main.java.com.github.tianma8023.xposed.smscode.xp.SmsHandlerHook.java", "BodyUseAPI": [], "Fixed commit": "8f1cbc4677dc038ea6267246cf7a29ddfe34d4e8", "Url": "https://api.github.com/repos/tianma8023/XposedSmsCode", "Date": "2018-08-05T14:38:18Z"},
{"Line": "91=>94", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.Character.toLowerCase(char)=>utilities.CapitalizeString.decapitalizeByFirstLetter(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6807/buggy-version/JavaBot.src.main.java.plugins.AbstractPlugin.java", "BodyUseAPI": [], "Fixed commit": "202aff73e4b9d0b71c2c9612b7c7beb1b830cb8a", "Url": "https://api.github.com/repos/LeCuay/SimpleJavaBot", "Date": "2018-05-14T10:19:14Z"},
{"Line": "136=>138", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.widget.Toast.makeText(com.fastrack.activitise.CheckoutActivity.1,java.lang.String,Toast.LENGTH_SHORT)=>android.widget.TextView.setVisibility(View.VISIBLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5257/buggy-version/app.src.main.java.com.fastrack.activitise.CheckoutActivity.java", "BodyUseAPI": [], "Fixed commit": "dfd7ee577e15c5da84a198ba6ad2ab8c70fe7e41", "Url": "https://api.github.com/repos/switch2webdev/FasTrack-Android", "Date": "2018-07-04T14:41:14Z"},
{"Line": "136=>138", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Toast.makeText(context, e.getMessage(), Toast.LENGTH_SHORT).show()=>android.widget.TextView.setVisibility(View.VISIBLE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5257/buggy-version/app.src.main.java.com.fastrack.activitise.CheckoutActivity.java", "BodyUseAPI": [], "Fixed commit": "dfd7ee577e15c5da84a198ba6ad2ab8c70fe7e41", "Url": "https://api.github.com/repos/switch2webdev/FasTrack-Android", "Date": "2018-07-04T14:41:14Z"},
{"Line": "156=>162", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.fastrack.activitise.ServicesActivity.3.startActivity(android.content.Intent)=>com.fastrack.activitise.ServicesActivity.3.startActivity(android.content.Intent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5257/buggy-version/app.src.main.java.com.fastrack.activitise.ServicesActivity.java", "BodyUseAPI": [], "Fixed commit": "dfd7ee577e15c5da84a198ba6ad2ab8c70fe7e41", "Url": "https://api.github.com/repos/switch2webdev/FasTrack-Android", "Date": "2018-07-04T14:41:14Z"},
{"Line": "87=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.createchance.recyclerbanner.RecyclerBanner.setBannerSize(int)=>com.createchance.recyclerbanner.RecyclerBanner.setBannerCount(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1830/buggy-version/app.src.main.java.com.createchance.recyclerviewbanner.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "70d07911fc3adf569c16120e95bfcdc9992bb1d6", "Url": "https://api.github.com/repos/CreateChance/RecyclerBanner", "Date": "2018-01-16T08:34:51Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.createchance.recyclerbanner.RecyclerBanner.setBannerSize(int)=>com.createchance.recyclerbanner.RecyclerBanner.setBannerCount(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1830/buggy-version/app.src.main.java.com.createchance.recyclerviewbanner.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "70d07911fc3adf569c16120e95bfcdc9992bb1d6", "Url": "https://api.github.com/repos/CreateChance/RecyclerBanner", "Date": "2018-01-16T08:34:51Z"},
{"Line": "78=>81", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "request.getSession().setAttribute(java.lang.String,dto.getImagePath())=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4353/buggy-version/knowhowBlog.src.main.java.com.mycompany.myapp.service.MembersServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "018f93bbcd071d4b6fd9b2b479f9cb082c4cb7b6", "Url": "https://api.github.com/repos/hyunhee7/lottedotcode", "Date": "2018-01-29T01:59:25Z"},
{"Line": "57=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.springframework.web.servlet.ModelAndView.addObject(java.lang.String,request.getContextPath())=>org.springframework.web.servlet.ModelAndView.addObject(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4353/buggy-version/knowhowBlog.src.main.java.com.mycompany.myapp.service.MembersServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "018f93bbcd071d4b6fd9b2b479f9cb082c4cb7b6", "Url": "https://api.github.com/repos/hyunhee7/lottedotcode", "Date": "2018-01-29T01:59:25Z"},
{"Line": "19=>19", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.openqa.selenium.By.name(java.lang.String)=>org.openqa.selenium.By.xpath(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3591/buggy-version/WSM_Automation3.src.wsm.teamChoDien.PageObject.ForgotPasswordPageObjects.java", "BodyUseAPI": [], "Fixed commit": "92e3756509312541d9cf1d263fff6d236338dbb5", "Url": "https://api.github.com/repos/anndt1105/TeamChoDien", "Date": "2018-10-28T08:22:20Z"},
{"Line": "57=>57", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.sillykid.app.entity.homepage.privatecustom.cityselect.fragment.RecommendedBean.DataBean.getCountry_picture()=>com.sillykid.app.entity.homepage.privatecustom.cityselect.fragment.RecommendedBean.DataBean.getCity_picture()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3880/buggy-version/SillyChildClient.app.src.main.java.com.sillykid.app.adapter.homepage.privatecustom.cityselect.fragment.RecommendedViewAdapter.java", "BodyUseAPI": [], "Fixed commit": "1cd6304487024874b280a44367b2c7e89ad2505e", "Url": "https://api.github.com/repos/921668753/SillyChildClient2-Android", "Date": "2018-09-19T03:17:24Z"},
{"Line": "77=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.qualcomm.robotcore.hardware.Servo.setPosition(int)=>com.qualcomm.robotcore.hardware.Servo.setPosition(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2714/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.ftc2017to2018season.TeleOp.Main.curious_georgeROLLI_teleop.java", "BodyUseAPI": [], "Fixed commit": "4f00bd6f24fc17df1972781077d87ea6a882d431", "Url": "https://api.github.com/repos/ftcInspiration11128/ftc_app", "Date": "2018-03-29T05:09:45Z"},
{"Line": "78=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.qualcomm.robotcore.hardware.Servo.setPosition(int)=>com.qualcomm.robotcore.hardware.Servo.setPosition(double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2714/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.ftc2017to2018season.TeleOp.Main.curious_georgeROLLI_teleop.java", "BodyUseAPI": [], "Fixed commit": "4f00bd6f24fc17df1972781077d87ea6a882d431", "Url": "https://api.github.com/repos/ftcInspiration11128/ftc_app", "Date": "2018-03-29T05:09:45Z"},
{"Line": "172=>180", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.firstinspires.ftc.teamcode.ftc2017to2018season.TeleOp.Main.curious_georgeROLLI_teleop.setPowerAll(int,int,int,int)=>org.firstinspires.ftc.teamcode.ftc2017to2018season.TeleOp.Main.curious_georgeROLLI_teleop.setPowerAll(double,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2714/buggy-version/TeamCode.src.main.java.org.firstinspires.ftc.teamcode.ftc2017to2018season.TeleOp.Main.curious_georgeROLLI_teleop.java", "BodyUseAPI": [], "Fixed commit": "4f00bd6f24fc17df1972781077d87ea6a882d431", "Url": "https://api.github.com/repos/ftcInspiration11128/ftc_app", "Date": "2018-03-29T05:09:45Z"},
{"Line": "52=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.Intent.getStringExtra(inputActivity.EXTRA_Message)=>android.content.Intent.getStringExtra(inputActivity.EXTRA_MESSAGE)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6440/buggy-version/MapsApp.app.src.main.java.com.example.mapsapp.MapsActivity.java", "BodyUseAPI": [], "Fixed commit": "476b868d18d5da8d0f5a45b648b6038985b2a10e", "Url": "https://api.github.com/repos/elvinjgalarza/Class-Blog", "Date": "2018-10-30T04:41:56Z"},
{"Line": "63=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.google.android.gms.maps.CameraUpdateFactory.newLatLng(com.google.android.gms.maps.model.LatLng)=>com.google.android.gms.maps.CameraUpdateFactory.newLatLngZoom(com.google.android.gms.maps.model.LatLng,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6440/buggy-version/MapsApp.app.src.main.java.com.example.mapsapp.MapsActivity.java", "BodyUseAPI": [], "Fixed commit": "476b868d18d5da8d0f5a45b648b6038985b2a10e", "Url": "https://api.github.com/repos/elvinjgalarza/Class-Blog", "Date": "2018-10-30T04:41:56Z"},
{"Line": "26=>26", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.Intent.putExtra(android.provider.AlarmClock.EXTRA_MESSAGE,java.lang.String)=>android.content.Intent.putExtra(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6440/buggy-version/MapsApp.app.src.main.java.com.example.mapsapp.inputActivity.java", "BodyUseAPI": [], "Fixed commit": "476b868d18d5da8d0f5a45b648b6038985b2a10e", "Url": "https://api.github.com/repos/elvinjgalarza/Class-Blog", "Date": "2018-10-30T04:41:56Z"},
{"Line": "47=>47", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "serverRunnable.onSuccess.run()=>serverRunnable.activity.runOnUiThread(serverRunnable.onSuccess)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8052/buggy-version/master.src.main.java.com.zostio.master.MasterServerHandler.java", "BodyUseAPI": [], "Fixed commit": "bfe4624be6d451534b20f737e1bf593d7eb51e0d", "Url": "https://api.github.com/repos/FiraInc/Master", "Date": "2018-10-07T00:39:47Z"},
{"Line": "184=>185", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "current.getClassName().toString().contains(java.lang.String)=>android.view.accessibility.AccessibilityNodeInfo.isClickable()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1937/buggy-version/app.src.main.java.com.example.jaylo.bcismartphonecontrol.MyAccessibilityService.java", "BodyUseAPI": [], "Fixed commit": "4e6c853a4009dd62622866222e669eb0ee8ae2e1", "Url": "https://api.github.com/repos/JayLohokare/brain-smartphone-interface", "Date": "2018-02-28T14:24:57Z"},
{"Line": "118=>118", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.slf4j.Logger.info(java.lang.String,httpResponse.getStatusLine().getStatusCode())=>org.slf4j.Logger.debug(java.lang.String,int,httpResponse.getStatusLine().getStatusCode())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/683/buggy-version/mediabox.src.main.java.springbackend.ProcessController.java", "BodyUseAPI": [], "Fixed commit": "22f091697cc7da60886da7e57f63e278cc3679ff", "Url": "https://api.github.com/repos/norberte/notTV-Capstone", "Date": "2018-03-06T11:28:31Z"},
{"Line": "118=>118", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.slf4j.Logger.info(java.lang.String,httpResponse.getStatusLine().getStatusCode())=>org.slf4j.Logger.debug(java.lang.String,int,httpResponse.getStatusLine().getStatusCode())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/683/buggy-version/mediabox.src.main.java.springbackend.ProcessController.java", "BodyUseAPI": [], "Fixed commit": "22f091697cc7da60886da7e57f63e278cc3679ff", "Url": "https://api.github.com/repos/norberte/notTV-Capstone", "Date": "2018-03-06T11:28:31Z"},
{"Line": "107=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.slf4j.Logger.info(java.lang.String,java.io.File)=>org.slf4j.Logger.debug(java.lang.String,java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/683/buggy-version/mediabox.src.main.java.springbackend.ProcessController.java", "BodyUseAPI": [], "Fixed commit": "22f091697cc7da60886da7e57f63e278cc3679ff", "Url": "https://api.github.com/repos/norberte/notTV-Capstone", "Date": "2018-03-06T11:28:31Z"},
{"Line": "236=>242", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "me.nikl.gamebox.games.matchit.MIGame.cancel()=>me.nikl.gamebox.games.matchit.MIGame.cancel()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6992/buggy-version/GameBox.src.main.java.me.nikl.gamebox.games.matchit.MIGame.java", "BodyUseAPI": [], "Fixed commit": "4e811aab0076f2ea1940bc68aeecde00d569eec9", "Url": "https://api.github.com/repos/NiklasEi/gamebox", "Date": "2018-03-09T11:33:37Z"},
{"Line": "183=>184", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.startsWith(java.lang.String)=>java.lang.String.endsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5394/buggy-version/src.main.java.org.bytedeco.javacpp.tools.Parser.java", "BodyUseAPI": [], "Fixed commit": "2f4e1d22b7bd1b4bfa164c51804de54731d8a0b2", "Url": "https://api.github.com/repos/bytedeco/javacpp", "Date": "2018-09-09T10:47:17Z"},
{"Line": "187=>187", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "valueType.cppName.startsWith(java.lang.String)=>valueType.cppName.substring(0, valueTemplate).endsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5394/buggy-version/src.main.java.org.bytedeco.javacpp.tools.Parser.java", "BodyUseAPI": [], "Fixed commit": "2f4e1d22b7bd1b4bfa164c51804de54731d8a0b2", "Url": "https://api.github.com/repos/bytedeco/javacpp", "Date": "2018-09-09T10:47:17Z"},
{"Line": "301=>301", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.startsWith(java.lang.String)=>java.lang.String.endsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5394/buggy-version/src.main.java.org.bytedeco.javacpp.tools.Parser.java", "BodyUseAPI": [], "Fixed commit": "2f4e1d22b7bd1b4bfa164c51804de54731d8a0b2", "Url": "https://api.github.com/repos/bytedeco/javacpp", "Date": "2018-09-09T10:47:17Z"},
{"Line": "144=>144", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.startsWith(java.lang.String)=>java.lang.String.endsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5394/buggy-version/src.main.java.org.bytedeco.javacpp.tools.Parser.java", "BodyUseAPI": [], "Fixed commit": "2f4e1d22b7bd1b4bfa164c51804de54731d8a0b2", "Url": "https://api.github.com/repos/bytedeco/javacpp", "Date": "2018-09-09T10:47:17Z"},
{"Line": "166=>166", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.startsWith(java.lang.String)=>java.lang.String.endsWith(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5394/buggy-version/src.main.java.org.bytedeco.javacpp.tools.Parser.java", "BodyUseAPI": [], "Fixed commit": "2f4e1d22b7bd1b4bfa164c51804de54731d8a0b2", "Url": "https://api.github.com/repos/bytedeco/javacpp", "Date": "2018-09-09T10:47:17Z"},
{"Line": "45=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getMethodOn().getFacetValues(facetData.getName(),java.lang.String,java.lang.String,java.lang.String,<nulltype>,<nulltype>)=>getMethodOn().getFacetValues(facetData.getName(),java.lang.String,java.lang.String,java.lang.String,java.lang.String,<nulltype>,<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/604/buggy-version/dspace-spring-rest.src.main.java.org.dspace.app.rest.link.search.SearchFacetEntryHalLinkFactory.java", "BodyUseAPI": [], "Fixed commit": "141e1f431c2b3deaed8d64d68ef0b4426de51d74", "Url": "https://api.github.com/repos/4Science/DSpace", "Date": "2018-05-30T11:04:50Z"},
{"Line": "138=>138", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.dspace.discovery.configuration.DiscoveryConfigurationService.getDiscoveryConfigurationByNameOrDso(org.dspace.app.rest.repository.DiscoveryRestRepository,org.dspace.browse.BrowsableDSpaceObject)=>org.dspace.discovery.configuration.DiscoveryConfigurationService.getDiscoveryConfigurationByNameOrDso(java.lang.String,org.dspace.browse.BrowsableDSpaceObject)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/604/buggy-version/dspace-spring-rest.src.main.java.org.dspace.app.rest.repository.DiscoveryRestRepository.java", "BodyUseAPI": [], "Fixed commit": "141e1f431c2b3deaed8d64d68ef0b4426de51d74", "Url": "https://api.github.com/repos/4Science/DSpace", "Date": "2018-05-30T11:04:50Z"},
{"Line": "120=>145", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.util.Log.e(java.lang.String,(((\"IS NULL \" + (w == null)) + \" checkTimeout \") + (layout.AppWidget.checkTimeout)))=>android.util.Log.e(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6944/buggy-version/src.main.java.layout.AppWidget.java", "BodyUseAPI": [], "Fixed commit": "ea9f3b58adfd61dd3241561ab4425b1c9f386123", "Url": "https://api.github.com/repos/JureBevc/IoT-Widget", "Date": "2018-04-05T21:07:49Z"},
{"Line": "63=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.RemoteViews.setOnClickPendingIntent(R.id.main_content,android.app.PendingIntent)=>android.widget.RemoteViews.setOnClickPendingIntent(R.id.DateAndTimeText,android.app.PendingIntent)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6944/buggy-version/src.main.java.layout.AppWidget.java", "BodyUseAPI": [], "Fixed commit": "ea9f3b58adfd61dd3241561ab4425b1c9f386123", "Url": "https://api.github.com/repos/JureBevc/IoT-Widget", "Date": "2018-04-05T21:07:49Z"},
{"Line": "113=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.split(java.lang.String)=>java.lang.String.equals(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6944/buggy-version/src.main.java.layout.AppWidget.java", "BodyUseAPI": [], "Fixed commit": "ea9f3b58adfd61dd3241561ab4425b1c9f386123", "Url": "https://api.github.com/repos/JureBevc/IoT-Widget", "Date": "2018-04-05T21:07:49Z"},
{"Line": "61=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.content.Intent.setAction(java.lang.String)=>android.content.Intent.putExtra(java.lang.String,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6944/buggy-version/src.main.java.layout.AppWidget.java", "BodyUseAPI": [], "Fixed commit": "ea9f3b58adfd61dd3241561ab4425b1c9f386123", "Url": "https://api.github.com/repos/JureBevc/IoT-Widget", "Date": "2018-04-05T21:07:49Z"},
{"Line": "120=>145", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.util.Log.e(java.lang.String,(((\"IS NULL \" + (w == null)) + \" checkTimeout \") + (layout.AppWidget.checkTimeout)))=>android.util.Log.e(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6944/buggy-version/src.main.java.layout.AppWidget.java", "BodyUseAPI": [], "Fixed commit": "ea9f3b58adfd61dd3241561ab4425b1c9f386123", "Url": "https://api.github.com/repos/JureBevc/IoT-Widget", "Date": "2018-04-05T21:07:49Z"},
{"Line": "253=>255", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "simpledb.Database.getBufferPool().getPage(simpledb.transaction.TransactionId,simpledb.page.pageid.PageId,Permissions.READ_WRITE)=>simpledb.Database.getBufferPool().getPage(simpledb.transaction.TransactionId,simpledb.page.pageid.PageId,Permissions.READ_ONLY)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4066/buggy-version/src.java.simpledb.dbfile.HeapFile.java", "BodyUseAPI": [], "Fixed commit": "9901db7b22abcf091a4f13bd65d5d3646c86dfd1", "Url": "https://api.github.com/repos/jasonleaster/simple-db", "Date": "2018-01-09T13:48:28Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "simpledb.dbfile.DbFile.iterator(simpledb.TransactionId)=>simpledb.dbfile.DbFile.iterator(simpledb.transaction.TransactionId)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4066/buggy-version/src.java.simpledb.operator.SeqScan.java", "BodyUseAPI": [], "Fixed commit": "9901db7b22abcf091a4f13bd65d5d3646c86dfd1", "Url": "https://api.github.com/repos/jasonleaster/simple-db", "Date": "2018-01-09T13:48:28Z"},
{"Line": "52=>52", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "simpledb.operator.SeqScan(simpledb.TransactionId,int,simpledb.Database.getCatalog().getTableName(tableId))=>simpledb.operator.SeqScan(simpledb.transaction.TransactionId,int,simpledb.Database.getCatalog().getTableName(tableId))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4066/buggy-version/src.java.simpledb.operator.SeqScan.java", "BodyUseAPI": [], "Fixed commit": "9901db7b22abcf091a4f13bd65d5d3646c86dfd1", "Url": "https://api.github.com/repos/jasonleaster/simple-db", "Date": "2018-01-09T13:48:28Z"},
{"Line": "162=>162", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.util.Map<java.lang.String, service.util.MetaCategoryType>.put(java.lang.String,MetaCategoryType.DATE)=>java.util.Map<java.lang.String, service.util.MetaCategoryType>.put(java.lang.String,MetaCategoryType.DATE_TIME)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1873/buggy-version/src.main.java.service.util.MetaCategoryProvider.java", "BodyUseAPI": [], "Fixed commit": "c188464a46c4ba7598004fb8d95c4a7f56a4ab7a", "Url": "https://api.github.com/repos/erikkhachatryan/travelingAgency", "Date": "2018-05-30T09:41:19Z"},
{"Line": "52=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "de.cses.client.depictions.DepictionViewTemplates.display(((e.getShortName()) != null ? e.getShortName() : \"\"),e.getInventoryNumber(),java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,e.getPreservationAttributesList(),com.google.gwt.safehtml.shared.SafeUri)=>de.cses.client.depictions.DepictionViewTemplates.display(java.lang.String,e.getInventoryNumber(),java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,e.getPreservationAttributesList(),com.google.gwt.safehtml.shared.SafeUri)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1016/buggy-version/src.de.cses.client.depictions.DepictionDataDisplay.java", "BodyUseAPI": [], "Fixed commit": "4bd7b4a3a7939ea0aa55d0d9453e87fc7f8323cd", "Url": "https://api.github.com/repos/saw-leipzig/kucha", "Date": "2018-05-31T11:58:58Z"},
{"Line": "434=>436", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "bi.ne103.getSelectedItem().equals(getResources().getString(R.string.neselectedd))=>java.lang.String.equals(getResources().getString(R.string.neselectedd))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7627/buggy-version/app.src.main.java.edu.aku.hassannaqvi.nns_2018.ui.SectionE1Activity.java", "BodyUseAPI": [], "Fixed commit": "ad8afeb481e6fc7cff4f18b6e859016b858de59d", "Url": "https://api.github.com/repos/shznaqvi/nns_2018", "Date": "2018-09-06T08:17:45Z"},
{"Line": "423=>425", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "bi.ne103.getSelectedItem().equals(getResources().getString(R.string.neselecteda))=>java.lang.String.equals(getResources().getString(R.string.neselecteda))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7627/buggy-version/app.src.main.java.edu.aku.hassannaqvi.nns_2018.ui.SectionE1Activity.java", "BodyUseAPI": [], "Fixed commit": "ad8afeb481e6fc7cff4f18b6e859016b858de59d", "Url": "https://api.github.com/repos/shznaqvi/nns_2018", "Date": "2018-09-06T08:17:45Z"},
{"Line": "93=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "metric.Metric.Wscope(ast.Statechart,java.util.Map<java.lang.String, java.lang.Integer>,java.util.Set<ast.Transition>)=>metric.Metric.Rscope(ast.Statechart,java.util.Map<java.lang.String, java.lang.Integer>,java.util.Set<ast.Transition>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/188/buggy-version/src.dfa.Analyser.java", "BodyUseAPI": [], "Fixed commit": "fec20706f9c4e20db085c4b6023caf1f29a7c0e7", "Url": "https://api.github.com/repos/sujitkc/statechart-verification", "Date": "2018-10-03T12:04:18Z"},
{"Line": "310=>310", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ffdYKJisu.nes_emu.system.memory.Addressable.read(int)=>ffdYKJisu.nes_emu.system.memory.Addressable.read(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/80/buggy-version/src.main.java.ffdYKJisu.nes_emu.system.cpu.CPU.java", "BodyUseAPI": [], "Fixed commit": "ba732f7cf5cd493b07dc1eed1c0ecddf8e155e5a", "Url": "https://api.github.com/repos/fcfort/nes_emu", "Date": "2018-06-07T02:14:26Z"},
{"Line": "188=>189", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.cpqd.iotagent.JsonParser.parse(org.json.JSONObject)=>org.cpqd.iotagent.JsonParser.parse(message.toString())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6407/buggy-version/src.main.java.org.cpqd.iotagent.LwM2mAgent.java", "BodyUseAPI": [], "Fixed commit": "fb8f5ba9670dc75f37df5e6948ce868edc1e8cd7", "Url": "https://api.github.com/repos/dojot/iotagent-leshan", "Date": "2018-04-10T16:44:19Z"},
{"Line": "13=>13", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javafx.stage.Stage.setFullScreen(boolean)=>javafx.stage.Stage.setResizable(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3613/buggy-version/src.GameApplication.java", "BodyUseAPI": [], "Fixed commit": "58a55d0de881f65bcc5ab84d2c40cc0c1fa0dd62", "Url": "https://api.github.com/repos/ptallo/FE_Game", "Date": "2018-10-09T02:48:06Z"},
{"Line": "185=>185", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "acme.ui.AcmeUI.setPanel(acme.ui.ExampleJPanel)=>acme.ui.AcmeUI.setPanel(acme.ui.ImportsPanel)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/602/buggy-version/src.acme.ui.AcmeUI.java", "BodyUseAPI": [], "Fixed commit": "59c7ae9304ba4a5c50194e45dc2f31c11c9e82ca", "Url": "https://api.github.com/repos/simpleman19/acmeDSTS", "Date": "2018-06-18T22:40:16Z"},
{"Line": "60=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getCamera().getTransform().getChunkY()=>getCamera().getTransform().getChunkY2D()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2305/buggy-version/src.omnikryptec.main.Scene2D.java", "BodyUseAPI": [], "Fixed commit": "75e0a9163fec88a2540ac2ff48ce4d6da79d94e7", "Url": "https://api.github.com/repos/OmniKryptec/OmniKryptec-Engine", "Date": "2018-01-04T15:32:59Z"},
{"Line": "59=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "getCamera().getTransform().getChunkX()=>getCamera().getTransform().getChunkX2D()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2305/buggy-version/src.omnikryptec.main.Scene2D.java", "BodyUseAPI": [], "Fixed commit": "75e0a9163fec88a2540ac2ff48ce4d6da79d94e7", "Url": "https://api.github.com/repos/OmniKryptec/OmniKryptec-Engine", "Date": "2018-01-04T15:32:59Z"},
{"Line": "53=>53", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.projectfloodlight.openflow.protocol.OFPacketIn.getInPort()=>org.projectfloodlight.openflow.protocol.OFPacketIn.getMatch()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3678/buggy-version/floodlight_build.src.main.java.org.melonizippo.openflow.ARPLearningStorage.java", "BodyUseAPI": [], "Fixed commit": "8d78f48e6300718a39cff598740f6f09c6ad3c95", "Url": "https://api.github.com/repos/MeloniZippoProjects/IPv4-Multicast-SDN-Controller", "Date": "2018-04-11T20:14:26Z"},
{"Line": "811=>815", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.zimbra.cs.imap.ImapListener.lock(boolean)=>com.zimbra.cs.mailbox.Mailbox.lock(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4798/buggy-version/store.src.java.com.zimbra.cs.imap.ImapListener.java", "BodyUseAPI": [], "Fixed commit": "488a0dd4eb89586560811444b11c3926d98c3343", "Url": "https://api.github.com/repos/Zimbra/zm-mailbox", "Date": "2018-01-23T21:30:34Z"},
{"Line": "705=>707", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.zimbra.cs.imap.ImapListener.lock(boolean)=>com.zimbra.cs.mailbox.Mailbox.lock(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4798/buggy-version/store.src.java.com.zimbra.cs.imap.ImapListener.java", "BodyUseAPI": [], "Fixed commit": "488a0dd4eb89586560811444b11c3926d98c3343", "Url": "https://api.github.com/repos/Zimbra/zm-mailbox", "Date": "2018-01-23T21:30:34Z"},
{"Line": "743=>745", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.zimbra.cs.imap.ImapListener.unlock()=>com.zimbra.cs.mailbox.Mailbox.unlock()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4798/buggy-version/store.src.java.com.zimbra.cs.imap.ImapListener.java", "BodyUseAPI": [], "Fixed commit": "488a0dd4eb89586560811444b11c3926d98c3343", "Url": "https://api.github.com/repos/Zimbra/zm-mailbox", "Date": "2018-01-23T21:30:34Z"},
{"Line": "820=>824", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.zimbra.cs.imap.ImapListener.unlock()=>com.zimbra.cs.mailbox.Mailbox.unlock()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4798/buggy-version/store.src.java.com.zimbra.cs.imap.ImapListener.java", "BodyUseAPI": [], "Fixed commit": "488a0dd4eb89586560811444b11c3926d98c3343", "Url": "https://api.github.com/repos/Zimbra/zm-mailbox", "Date": "2018-01-23T21:30:34Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.File.mkdir()=>java.io.File.mkdirs()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/633/buggy-version/src.main.java.com.iot.quickhpu.util.FileUtil.java", "BodyUseAPI": [], "Fixed commit": "ff428b3ac6e017451d2d511764419e2014d20c08", "Url": "https://api.github.com/repos/nimo10050/quickhpu-admin", "Date": "2018-05-08T02:41:27Z"},
{"Line": "128=>128", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.print(int)=>java.lang.Runtime.exec(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/910/buggy-version/DandDGame.src.main.game.Partition.java", "BodyUseAPI": [], "Fixed commit": "80ac99d9bd60f263c0e666e4e3980b038a8b4dff", "Url": "https://api.github.com/repos/Beamryan/350TermProject", "Date": "2018-07-06T00:49:03Z"},
{"Line": "44=>50", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "getBoundNode().getType()=>org.openl.rules.lang.xls.types.meta.DataTableBoundNode.getType()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3612/buggy-version/DEV.org.openl.rules.src.org.openl.rules.lang.xls.types.meta.DataTableMetaInfoReader.java", "BodyUseAPI": [], "Fixed commit": "9ff97b55446f3438454e900e248c8789af5b7ed0", "Url": "https://api.github.com/repos/openl-tablets/openl-tablets", "Date": "2018-05-18T19:15:25Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.ImageView.setBackgroundResource(R.drawable.startscr1)=>android.widget.ImageView.setBackgroundResource(R.drawable.masked)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2402/buggy-version/app.src.main.java.com.example.olga.startscreen.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "e4d12ff67147e988c8837a95485a718aa16c1517", "Url": "https://api.github.com/repos/Vinklit/Periodic-Table-Game", "Date": "2018-06-13T20:13:20Z"},
{"Line": "85=>87", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.conedot.aland.training.manager.UserTaskTrainingManager.findUserTaskTraining(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List<com.conedot.aland.training.sharedObject.lov.TaskTrainingStatus>,java.lang.Long,java.lang.Long,int,int)=>com.conedot.aland.training.manager.UserTaskTrainingManager.findUserTaskTraining(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List<com.conedot.aland.training.sharedObject.lov.TaskTrainingStatus>,java.lang.Long,java.lang.Long,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5748/buggy-version/AlandTrainingService.src.main.java.com.conedot.aland.training.manager.UserTaskTrainingManager.java", "BodyUseAPI": [], "Fixed commit": "7dc9aef8ddf83d0a25ff1be1d8e1652afb21f212", "Url": "https://api.github.com/repos/victorwang0526/AlandTraining", "Date": "2018-08-22T13:40:52Z"},
{"Line": "53=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByManagerId(managerId).filterByManager(manager).filterByStartDate(java.lang.Long)=>TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByTaskTrainingId(taskTrainingId).filterByManagerId(managerId).filterByManager(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5748/buggy-version/AlandTrainingService.src.main.java.com.conedot.aland.training.manager.UserTaskTrainingManager.java", "BodyUseAPI": [], "Fixed commit": "7dc9aef8ddf83d0a25ff1be1d8e1652afb21f212", "Url": "https://api.github.com/repos/victorwang0526/AlandTraining", "Date": "2018-08-22T13:40:52Z"},
{"Line": "53=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByManagerId(java.lang.String)=>TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByTaskTrainingId(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5748/buggy-version/AlandTrainingService.src.main.java.com.conedot.aland.training.manager.UserTaskTrainingManager.java", "BodyUseAPI": [], "Fixed commit": "7dc9aef8ddf83d0a25ff1be1d8e1652afb21f212", "Url": "https://api.github.com/repos/victorwang0526/AlandTraining", "Date": "2018-08-22T13:40:52Z"},
{"Line": "40=>40", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByManagerId(managerId).filterByManager(manager).filterByStartDate(java.lang.Long)=>TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByTaskTrainingId(taskTrainingId).filterByManagerId(managerId).filterByManager(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5748/buggy-version/AlandTrainingService.src.main.java.com.conedot.aland.training.manager.UserTaskTrainingManager.java", "BodyUseAPI": [], "Fixed commit": "7dc9aef8ddf83d0a25ff1be1d8e1652afb21f212", "Url": "https://api.github.com/repos/victorwang0526/AlandTraining", "Date": "2018-08-22T13:40:52Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByManagerId(managerId).filterByManager(java.lang.String)=>TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByTaskTrainingId(taskTrainingId).filterByManagerId(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5748/buggy-version/AlandTrainingService.src.main.java.com.conedot.aland.training.manager.UserTaskTrainingManager.java", "BodyUseAPI": [], "Fixed commit": "7dc9aef8ddf83d0a25ff1be1d8e1652afb21f212", "Url": "https://api.github.com/repos/victorwang0526/AlandTraining", "Date": "2018-08-22T13:40:52Z"},
{"Line": "53=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByManagerId(managerId).filterByManager(manager).filterByStartDate(startDate).filterByEndDate(java.lang.Long)=>TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByTaskTrainingId(taskTrainingId).filterByManagerId(managerId).filterByManager(manager).filterByStartDate(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5748/buggy-version/AlandTrainingService.src.main.java.com.conedot.aland.training.manager.UserTaskTrainingManager.java", "BodyUseAPI": [], "Fixed commit": "7dc9aef8ddf83d0a25ff1be1d8e1652afb21f212", "Url": "https://api.github.com/repos/victorwang0526/AlandTraining", "Date": "2018-08-22T13:40:52Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByManagerId(managerId).filterByManager(manager).filterByStartDate(startDate).filterByEndDate(endDate).pagination(int,int)=>TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByTaskTrainingId(taskTrainingId).filterByManagerId(managerId).filterByManager(manager).filterByStartDate(startDate).filterByEndDate(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5748/buggy-version/AlandTrainingService.src.main.java.com.conedot.aland.training.manager.UserTaskTrainingManager.java", "BodyUseAPI": [], "Fixed commit": "7dc9aef8ddf83d0a25ff1be1d8e1652afb21f212", "Url": "https://api.github.com/repos/victorwang0526/AlandTraining", "Date": "2018-08-22T13:40:52Z"},
{"Line": "53=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByManagerId(managerId).filterByManager(manager).filterByStartDate(java.lang.Long)=>TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByTaskTrainingId(taskTrainingId).filterByManagerId(managerId).filterByManager(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5748/buggy-version/AlandTrainingService.src.main.java.com.conedot.aland.training.manager.UserTaskTrainingManager.java", "BodyUseAPI": [], "Fixed commit": "7dc9aef8ddf83d0a25ff1be1d8e1652afb21f212", "Url": "https://api.github.com/repos/victorwang0526/AlandTraining", "Date": "2018-08-22T13:40:52Z"},
{"Line": "53=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByManagerId(managerId).filterByManager(manager).filterByStartDate(startDate).filterByEndDate(java.lang.Long)=>TaskTrainingDao.TaskTrainingQueryBuild.build().filterByTitle(title).filterByUserId(userId).filterByTaskTrainingId(taskTrainingId).filterByManagerId(managerId).filterByManager(manager).filterByStartDate(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5748/buggy-version/AlandTrainingService.src.main.java.com.conedot.aland.training.manager.UserTaskTrainingManager.java", "BodyUseAPI": [], "Fixed commit": "7dc9aef8ddf83d0a25ff1be1d8e1652afb21f212", "Url": "https://api.github.com/repos/victorwang0526/AlandTraining", "Date": "2018-08-22T13:40:52Z"},
{"Line": "62=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.conedot.aland.training.manager.UserTaskTrainingManager.countUserTaskTraining(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List<com.conedot.aland.training.sharedObject.lov.TaskTrainingStatus>,java.lang.Long,java.lang.Long)=>com.conedot.aland.training.manager.UserTaskTrainingManager.countUserTaskTraining(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List<com.conedot.aland.training.sharedObject.lov.TaskTrainingStatus>,java.lang.Long,java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5748/buggy-version/AlandTrainingService.src.main.java.com.conedot.aland.training.resource.UserTaskTrainingResource.java", "BodyUseAPI": [], "Fixed commit": "7dc9aef8ddf83d0a25ff1be1d8e1652afb21f212", "Url": "https://api.github.com/repos/victorwang0526/AlandTraining", "Date": "2018-08-22T13:40:52Z"},
{"Line": "92=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.conedot.aland.training.manager.UserTaskTrainingManager.exportUserTaskTraining(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List<com.conedot.aland.training.sharedObject.lov.TaskTrainingStatus>,java.lang.Long,java.lang.Long,int,int)=>com.conedot.aland.training.manager.UserTaskTrainingManager.exportUserTaskTraining(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List<com.conedot.aland.training.sharedObject.lov.TaskTrainingStatus>,java.lang.Long,java.lang.Long,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5748/buggy-version/AlandTrainingService.src.main.java.com.conedot.aland.training.resource.UserTaskTrainingResource.java", "BodyUseAPI": [], "Fixed commit": "7dc9aef8ddf83d0a25ff1be1d8e1652afb21f212", "Url": "https://api.github.com/repos/victorwang0526/AlandTraining", "Date": "2018-08-22T13:40:52Z"},
{"Line": "59=>61", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.conedot.aland.training.manager.UserTaskTrainingManager.findUserTaskTraining(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List<com.conedot.aland.training.sharedObject.lov.TaskTrainingStatus>,java.lang.Long,java.lang.Long,int,int)=>com.conedot.aland.training.manager.UserTaskTrainingManager.findUserTaskTraining(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List<com.conedot.aland.training.sharedObject.lov.TaskTrainingStatus>,java.lang.Long,java.lang.Long,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5748/buggy-version/AlandTrainingService.src.main.java.com.conedot.aland.training.resource.UserTaskTrainingResource.java", "BodyUseAPI": [], "Fixed commit": "7dc9aef8ddf83d0a25ff1be1d8e1652afb21f212", "Url": "https://api.github.com/repos/victorwang0526/AlandTraining", "Date": "2018-08-22T13:40:52Z"},
{"Line": "67=>72", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.openems.impl.controller.debuglogforkaco.DebugLogController.info((((c.id()) + \": \") + (c.value())))=>org.slf4j.Logger.info((((c.id()) + \": \") + (c.value())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/993/buggy-version/edge.src.io.openems.impl.controller.debuglogforkaco.DebugLogController.java", "BodyUseAPI": [], "Fixed commit": "97a80f03c6f24188e59b17f59f1f767ae05718c0", "Url": "https://api.github.com/repos/OpenEMS/openems", "Date": "2018-04-12T08:54:18Z"},
{"Line": "62=>67", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "io.openems.impl.controller.debuglogforkaco.DebugLogController.info((((ess.id()) + \": \") + (ess.getClass())))=>org.slf4j.Logger.info((((ess.id()) + \": \") + (ess.getClass())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/993/buggy-version/edge.src.io.openems.impl.controller.debuglogforkaco.DebugLogController.java", "BodyUseAPI": [], "Fixed commit": "97a80f03c6f24188e59b17f59f1f767ae05718c0", "Url": "https://api.github.com/repos/OpenEMS/openems", "Date": "2018-04-12T08:54:18Z"},
{"Line": "114=>114", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.ws.rs.core.UriBuilder.fromUri(org.silverpeas.core.util.URLUtil.getAbsoluteApplicationURL()).path(org.silverpeas.core.web.SilverpeasWebResource.BASE_PATH).toString()=>javax.ws.rs.core.UriBuilder.fromUri(org.silverpeas.core.util.URLUtil.getAbsoluteApplicationURL()).path(org.silverpeas.core.web.SilverpeasWebResource.BASE_PATH).build()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3055/buggy-version/core-library.src.main.java.org.silverpeas.core.web.SilverpeasWebResource.java", "BodyUseAPI": [], "Fixed commit": "9140f26379ac86bf1413ad5a6831230815bf168a", "Url": "https://api.github.com/repos/SilverTeamWork/Silverpeas-Core", "Date": "2018-06-28T14:46:38Z"},
{"Line": "104=>104", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.ws.rs.core.UriBuilder.toString()=>javax.ws.rs.core.UriBuilder.build()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3055/buggy-version/core-library.src.main.java.org.silverpeas.core.web.SilverpeasWebResource.java", "BodyUseAPI": [], "Fixed commit": "9140f26379ac86bf1413ad5a6831230815bf168a", "Url": "https://api.github.com/repos/SilverTeamWork/Silverpeas-Core", "Date": "2018-06-28T14:46:38Z"},
{"Line": "356=>358", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javax.ws.rs.core.UriBuilder.build(java.lang.String[])=>javax.ws.rs.core.UriBuilder.build()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3055/buggy-version/core-web.src.main.java.org.silverpeas.core.webapi.base.RESTWebService.java", "BodyUseAPI": [], "Fixed commit": "9140f26379ac86bf1413ad5a6831230815bf168a", "Url": "https://api.github.com/repos/SilverTeamWork/Silverpeas-Core", "Date": "2018-06-28T14:46:38Z"},
{"Line": "29=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.List<de.cassens.gameoflife.board.event.BoardEvent>.get(((boardEvents.size()) - 2))=>java.util.List<de.cassens.gameoflife.board.event.BoardEvent>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6145/buggy-version/src.main.java.de.cassens.gameoflife.board.service.decrement.DecrementBoardCycleService.java", "BodyUseAPI": [], "Fixed commit": "c8359b31fea5ab355f8dac86276390a299dad1f5", "Url": "https://api.github.com/repos/VC8/gameoflife", "Date": "2018-05-25T23:58:04Z"},
{"Line": "30=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "github.OpenSourceAIX.OpenGL.GL10.util.StringWriter.toString()=>java.io.StringWriter.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4416/buggy-version/GL10.util.Util.java", "BodyUseAPI": [], "Fixed commit": "29f90daa882d675992c19fc8da9f86be782273ab", "Url": "https://api.github.com/repos/OpenSourceAIX/OpenGL", "Date": "2018-02-03T16:34:56Z"},
{"Line": "29=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.Throwable.printStackTrace(github.OpenSourceAIX.OpenGL.GL10.util.PrintWriter)=>java.lang.Throwable.printStackTrace(java.io.PrintWriter)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4416/buggy-version/GL10.util.Util.java", "BodyUseAPI": [], "Fixed commit": "29f90daa882d675992c19fc8da9f86be782273ab", "Url": "https://api.github.com/repos/OpenSourceAIX/OpenGL", "Date": "2018-02-03T16:34:56Z"},
{"Line": "7=>6", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.split(java.lang.String)=>java.lang.String.toCharArray()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2803/buggy-version/src.main.java.abc.ReverseString.java", "BodyUseAPI": [], "Fixed commit": "ee7a7f69f069d59d00407b68b2b9d80cb47b423e", "Url": "https://api.github.com/repos/Kurchynska/lesson-4", "Date": "2018-07-01T18:59:37Z"},
{"Line": "7=>6", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.split(java.lang.String)=>java.lang.String.toCharArray()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2803/buggy-version/src.main.java.abc.ReverseString.java", "BodyUseAPI": [], "Fixed commit": "ee7a7f69f069d59d00407b68b2b9d80cb47b423e", "Url": "https://api.github.com/repos/Kurchynska/lesson-4", "Date": "2018-07-01T18:59:37Z"},
{"Line": "184=>184", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Matrix.add(MatrixPool,Matrix)=>Matrix.copy(Matrix,int,int,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8114/buggy-version/Matrix.java", "BodyUseAPI": [], "Fixed commit": "49c76a6214c5c5e3af489d9af0f2c22edb9f1e47", "Url": "https://api.github.com/repos/csc027/MatrixMultiplication", "Date": "2018-02-16T09:19:17Z"},
{"Line": "183=>183", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Matrix.add(MatrixPool,Matrix)=>Matrix.copy(Matrix,int,int,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8114/buggy-version/Matrix.java", "BodyUseAPI": [], "Fixed commit": "49c76a6214c5c5e3af489d9af0f2c22edb9f1e47", "Url": "https://api.github.com/repos/csc027/MatrixMultiplication", "Date": "2018-02-16T09:19:17Z"},
{"Line": "182=>182", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "Matrix.add(MatrixPool,Matrix)=>Matrix.copy(Matrix,int,int,int,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8114/buggy-version/Matrix.java", "BodyUseAPI": [], "Fixed commit": "49c76a6214c5c5e3af489d9af0f2c22edb9f1e47", "Url": "https://api.github.com/repos/csc027/MatrixMultiplication", "Date": "2018-02-16T09:19:17Z"},
{"Line": "171=>170", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.lang3.StringUtils.removeEnd(java.lang.String,java.lang.String)=>com.qaprosoft.zafira.services.util.URLResolver.buildWebURL()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/974/buggy-version/sources.zafira-ws.src.main.java.com.qaprosoft.zafira.ws.controller.application.WidgetsAPIController.java", "BodyUseAPI": [], "Fixed commit": "322decf5b22c3639838500cf235b10458a34b6e3", "Url": "https://api.github.com/repos/qaprosoft/zafira", "Date": "2018-09-25T13:20:36Z"},
{"Line": "171=>170", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.apache.commons.lang3.StringUtils.removeEnd(java.lang.String,java.lang.String)=>com.qaprosoft.zafira.services.util.URLResolver.buildWebURL()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/974/buggy-version/sources.zafira-ws.src.main.java.com.qaprosoft.zafira.ws.controller.application.WidgetsAPIController.java", "BodyUseAPI": [], "Fixed commit": "322decf5b22c3639838500cf235b10458a34b6e3", "Url": "https://api.github.com/repos/qaprosoft/zafira", "Date": "2018-09-25T13:20:36Z"},
{"Line": "58=>57", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "jackwtat.simplembta.adapters.PredictionsPagerAdapter.getItem(int)=>jackwtat.simplembta.adapters.PredictionsPagerAdapter.getItem(viewPager.getCurrentItem())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2152/buggy-version/app.src.main.java.jackwtat.simplembta.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "b3a4cd1f10602e8c8ab846f752c28239cd651ad1", "Url": "https://api.github.com/repos/jackwtat/SimpleMBTA", "Date": "2018-07-25T23:55:27Z"},
{"Line": "58=>58", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "jackwtat.simplembta.adapters.PredictionsPagerAdapter.getItem(int)=>android.support.v4.view.ViewPager.getCurrentItem()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2152/buggy-version/app.src.main.java.jackwtat.simplembta.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "b3a4cd1f10602e8c8ab846f752c28239cd651ad1", "Url": "https://api.github.com/repos/jackwtat/SimpleMBTA", "Date": "2018-07-25T23:55:27Z"},
{"Line": "721=>725", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "launcher.getModelBuilder().compile(InputType.CTTYPES)=>launcher.getModelBuilder().compile(InputType.FILES)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3227/buggy-version/src.main.java.fr.inria.main.AbstractMain.java", "BodyUseAPI": [], "Fixed commit": "8663ecc127ab0182d50b7e65cd6057235f57c425", "Url": "https://api.github.com/repos/SpoonLabs/astor", "Date": "2018-08-09T17:15:01Z"},
{"Line": "711=>715", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.apache.log4j.Logger.debug((((\"Compiling original code from \" + (launcher.getModelBuilder().getInputSources())) + \" saved in \") + (launcher.getModelBuilder().getBinaryOutputDirectory())))=>org.apache.log4j.Logger.info((((\"Compiling original code from \" + (launcher.getModelBuilder().getInputSources())) + \"\\n bytecode saved in \") + (launcher.getModelBuilder().getBinaryOutputDirectory())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3227/buggy-version/src.main.java.fr.inria.main.AbstractMain.java", "BodyUseAPI": [], "Fixed commit": "8663ecc127ab0182d50b7e65cd6057235f57c425", "Url": "https://api.github.com/repos/SpoonLabs/astor", "Date": "2018-08-09T17:15:01Z"},
{"Line": "157=>157", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.content.Context.getString(R.string.key_api_secret)=>android.content.Context.getString(R.string.key_clients_api)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/111/buggy-version/app.src.main.java.org.sana.android.service.impl.CrashService.java", "BodyUseAPI": [], "Fixed commit": "2f4bdd9020ea81e8715962a6c02b868908c9bb89", "Url": "https://api.github.com/repos/UNFPAInnovation/GetIn_Mobile", "Date": "2018-04-24T01:17:59Z"},
{"Line": "91=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "controllers.coursemanagement.validator.CourseBatchRequestValidator.getRequest()=>org.sunbird.common.request.Request.getRequest()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/628/buggy-version/service.app.controllers.coursemanagement.validator.CourseBatchRequestValidator.java", "BodyUseAPI": [], "Fixed commit": "3b04730418c2ec906927e8ea39929e233ee13134", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service", "Date": "2018-09-21T10:31:06Z"},
{"Line": "82=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "controllers.coursemanagement.validator.CourseBatchRequestValidator.getRequest()=>org.sunbird.common.request.Request.getRequest()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/628/buggy-version/service.app.controllers.coursemanagement.validator.CourseBatchRequestValidator.java", "BodyUseAPI": [], "Fixed commit": "3b04730418c2ec906927e8ea39929e233ee13134", "Url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service", "Date": "2018-09-21T10:31:06Z"},
{"Line": "35=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "seedu.address.model.person.Level.formatlevel(java.lang.String)=>seedu.address.model.person.Level.formatLevel(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7747/buggy-version/src.main.java.seedu.address.model.person.Level.java", "BodyUseAPI": [], "Fixed commit": "d5fff222da8e81bb7dc0185076c7ece683b7a1ac", "Url": "https://api.github.com/repos/Aussiroth/main", "Date": "2018-03-23T12:36:13Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "graph.Edge.positiveScoresAreBetter()=>graph.Edge.usePercentageInsteadOfCount()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6192/buggy-version/src.views.EdgeView.java", "BodyUseAPI": [], "Fixed commit": "6dc40bd4d7250ee99c95700b37ead54ef39a8b46", "Url": "https://api.github.com/repos/JackMaguire/JD3Bash", "Date": "2018-10-02T13:32:44Z"},
{"Line": "269=>269", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javafx.collections.FXCollections.observableArrayList(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>model.DataInfo.getCategories()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8243/buggy-version/src.main.java.view.FXML_Shop_Controller.java", "BodyUseAPI": [], "Fixed commit": "73e733a859f794572a3df39b889995176f233e38", "Url": "https://api.github.com/repos/KovalenkoVyacheslav/simple_shop", "Date": "2018-03-28T10:54:18Z"},
{"Line": "40=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.web3j.protocol.deserializer.JsonDeserializer<?>.resolve(org.web3j.protocol.deserializer.DeserializationContext)=>com.fasterxml.jackson.databind.JsonDeserializer<?>.resolve(com.fasterxml.jackson.databind.DeserializationContext)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1954/buggy-version/src.main.java.org.web3j.protocol.deserializer.ResponseRawMessageDeserializer.java", "BodyUseAPI": [], "Fixed commit": "894fd9ca810e4b5723770e6092b85190fcc0b8ca", "Url": "https://api.github.com/repos/franz-see/web3j", "Date": "2017-07-14T14:57:54Z"},
{"Line": "29=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.web3j.protocol.deserializer.JsonDeserializer<?>.deserialize(com.fasterxml.jackson.core.JsonParser,org.web3j.protocol.deserializer.DeserializationContext)=>com.fasterxml.jackson.databind.JsonDeserializer<?>.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1954/buggy-version/src.main.java.org.web3j.protocol.deserializer.ResponseRawMessageDeserializer.java", "BodyUseAPI": [], "Fixed commit": "894fd9ca810e4b5723770e6092b85190fcc0b8ca", "Url": "https://api.github.com/repos/franz-see/web3j", "Date": "2017-07-14T14:57:54Z"},
{"Line": "43=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.web3j.protocol.BeanDescription.getBeanClass()=>com.fasterxml.jackson.databind.BeanDescription.getBeanClass()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1954/buggy-version/src.main.java.org.web3j.protocol.ObjectMapperFactory.java", "BodyUseAPI": [], "Fixed commit": "894fd9ca810e4b5723770e6092b85190fcc0b8ca", "Url": "https://api.github.com/repos/franz-see/web3j", "Date": "2017-07-14T14:57:54Z"},
{"Line": "30=>36", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.web3j.protocol.ObjectMapperFactory.configureObjectMapper(org.web3j.protocol.ObjectMapper,boolean)=>org.web3j.protocol.ObjectMapperFactory.configureObjectMapper(com.fasterxml.jackson.databind.ObjectMapper,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1954/buggy-version/src.main.java.org.web3j.protocol.ObjectMapperFactory.java", "BodyUseAPI": [], "Fixed commit": "894fd9ca810e4b5723770e6092b85190fcc0b8ca", "Url": "https://api.github.com/repos/franz-see/web3j", "Date": "2017-07-14T14:57:54Z"},
{"Line": "18=>24", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.web3j.protocol.ObjectMapperFactory.configureObjectMapper(org.web3j.protocol.ObjectMapper,boolean)=>org.web3j.protocol.ObjectMapperFactory.configureObjectMapper(com.fasterxml.jackson.databind.ObjectMapper,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1954/buggy-version/src.main.java.org.web3j.protocol.ObjectMapperFactory.java", "BodyUseAPI": [], "Fixed commit": "894fd9ca810e4b5723770e6092b85190fcc0b8ca", "Url": "https://api.github.com/repos/franz-see/web3j", "Date": "2017-07-14T14:57:54Z"},
{"Line": "55=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.web3j.protocol.ObjectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,boolean)=>com.fasterxml.jackson.databind.ObjectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1954/buggy-version/src.main.java.org.web3j.protocol.ObjectMapperFactory.java", "BodyUseAPI": [], "Fixed commit": "894fd9ca810e4b5723770e6092b85190fcc0b8ca", "Url": "https://api.github.com/repos/franz-see/web3j", "Date": "2017-07-14T14:57:54Z"},
{"Line": "34=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.web3j.protocol.ObjectMapper.reader()=>com.fasterxml.jackson.databind.ObjectMapper.reader()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1954/buggy-version/src.main.java.org.web3j.protocol.ObjectMapperFactory.java", "BodyUseAPI": [], "Fixed commit": "894fd9ca810e4b5723770e6092b85190fcc0b8ca", "Url": "https://api.github.com/repos/franz-see/web3j", "Date": "2017-07-14T14:57:54Z"},
{"Line": "54=>63", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.web3j.protocol.ObjectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES,boolean)=>com.fasterxml.jackson.databind.ObjectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1954/buggy-version/src.main.java.org.web3j.protocol.ObjectMapperFactory.java", "BodyUseAPI": [], "Fixed commit": "894fd9ca810e4b5723770e6092b85190fcc0b8ca", "Url": "https://api.github.com/repos/franz-see/web3j", "Date": "2017-07-14T14:57:54Z"},
{"Line": "51=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.web3j.protocol.ObjectMapper.registerModule(com.fasterxml.jackson.databind.module.SimpleModule)=>com.fasterxml.jackson.databind.ObjectMapper.registerModule(com.fasterxml.jackson.databind.module.SimpleModule)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1954/buggy-version/src.main.java.org.web3j.protocol.ObjectMapperFactory.java", "BodyUseAPI": [], "Fixed commit": "894fd9ca810e4b5723770e6092b85190fcc0b8ca", "Url": "https://api.github.com/repos/franz-see/web3j", "Date": "2017-07-14T14:57:54Z"},
{"Line": "29=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.authorizeRequests().anyRequest().authenticated().and()=>http.authorizeRequests().antMatchers(\"/css/**\").permitAll().anyRequest()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/794/buggy-version/demosecurity.src.main.java.demo.springboot.security.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "8aeba5f39687d66e63d466de2fd3d5d0802ce4e3", "Url": "https://api.github.com/repos/mogongzi/sprintbootinaction", "Date": "2018-04-08T14:43:34Z"},
{"Line": "29=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.authorizeRequests().anyRequest().authenticated()=>http.authorizeRequests().antMatchers(\"/css/**\").permitAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/794/buggy-version/demosecurity.src.main.java.demo.springboot.security.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "8aeba5f39687d66e63d466de2fd3d5d0802ce4e3", "Url": "https://api.github.com/repos/mogongzi/sprintbootinaction", "Date": "2018-04-08T14:43:34Z"},
{"Line": "29=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.authorizeRequests().anyRequest().authenticated().and().formLogin().loginPage(\"/login\").failureUrl(\"/login?error\").permitAll().and().logout()=>http.authorizeRequests().antMatchers(\"/css/**\").permitAll().anyRequest().authenticated().and().formLogin().loginPage(\"/login\").failureUrl(\"/login?error\").permitAll()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/794/buggy-version/demosecurity.src.main.java.demo.springboot.security.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "8aeba5f39687d66e63d466de2fd3d5d0802ce4e3", "Url": "https://api.github.com/repos/mogongzi/sprintbootinaction", "Date": "2018-04-08T14:43:34Z"},
{"Line": "29=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().anyRequest().authenticated().and().formLogin().loginPage(\"/login\").failureUrl(java.lang.String)=>http.authorizeRequests().antMatchers(\"/css/**\").permitAll().anyRequest().authenticated().and().formLogin()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/794/buggy-version/demosecurity.src.main.java.demo.springboot.security.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "8aeba5f39687d66e63d466de2fd3d5d0802ce4e3", "Url": "https://api.github.com/repos/mogongzi/sprintbootinaction", "Date": "2018-04-08T14:43:34Z"},
{"Line": "29=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().anyRequest().authenticated().and().formLogin().loginPage(\"/login\").failureUrl(\"/login?error\").permitAll().and()=>http.authorizeRequests().antMatchers(\"/css/**\").permitAll().anyRequest().authenticated().and().formLogin().loginPage(\"/login\").failureUrl(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/794/buggy-version/demosecurity.src.main.java.demo.springboot.security.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "8aeba5f39687d66e63d466de2fd3d5d0802ce4e3", "Url": "https://api.github.com/repos/mogongzi/sprintbootinaction", "Date": "2018-04-08T14:43:34Z"},
{"Line": "29=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.authorizeRequests().anyRequest().authenticated().and().formLogin()=>http.authorizeRequests().antMatchers(\"/css/**\").permitAll().anyRequest().authenticated()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/794/buggy-version/demosecurity.src.main.java.demo.springboot.security.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "8aeba5f39687d66e63d466de2fd3d5d0802ce4e3", "Url": "https://api.github.com/repos/mogongzi/sprintbootinaction", "Date": "2018-04-08T14:43:34Z"},
{"Line": "29=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "http.authorizeRequests().anyRequest().authenticated().and().formLogin().loginPage(\"/login\").failureUrl(\"/login?error\").permitAll().and().logout().permitAll()=>http.authorizeRequests().antMatchers(\"/css/**\").permitAll().anyRequest().authenticated().and().formLogin().loginPage(\"/login\").failureUrl(\"/login?error\").permitAll().and()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/794/buggy-version/demosecurity.src.main.java.demo.springboot.security.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "8aeba5f39687d66e63d466de2fd3d5d0802ce4e3", "Url": "https://api.github.com/repos/mogongzi/sprintbootinaction", "Date": "2018-04-08T14:43:34Z"},
{"Line": "29=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().anyRequest().authenticated().and().formLogin().loginPage(\"/login\").failureUrl(\"/login?error\").permitAll()=>http.authorizeRequests().antMatchers(\"/css/**\").permitAll().anyRequest().authenticated().and().formLogin().loginPage(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/794/buggy-version/demosecurity.src.main.java.demo.springboot.security.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "8aeba5f39687d66e63d466de2fd3d5d0802ce4e3", "Url": "https://api.github.com/repos/mogongzi/sprintbootinaction", "Date": "2018-04-08T14:43:34Z"},
{"Line": "29=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().anyRequest().authenticated().and().formLogin().loginPage(java.lang.String)=>http.authorizeRequests().antMatchers(\"/css/**\").permitAll().anyRequest().authenticated().and()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/794/buggy-version/demosecurity.src.main.java.demo.springboot.security.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "8aeba5f39687d66e63d466de2fd3d5d0802ce4e3", "Url": "https://api.github.com/repos/mogongzi/sprintbootinaction", "Date": "2018-04-08T14:43:34Z"},
{"Line": "29=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().anyRequest()=>http.authorizeRequests().antMatchers(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/794/buggy-version/demosecurity.src.main.java.demo.springboot.security.config.WebSecurityConfig.java", "BodyUseAPI": [], "Fixed commit": "8aeba5f39687d66e63d466de2fd3d5d0802ce4e3", "Url": "https://api.github.com/repos/mogongzi/sprintbootinaction", "Date": "2018-04-08T14:43:34Z"},
{"Line": "921=>922", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.sql.ResultSet.getClass()=>((org.executequery.datasource.PooledResultSet) (rs)).getResultSet().unwrap(java.sql.ResultSet.class).getClass()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4590/buggy-version/src.org.executequery.databaseobjects.impl.DefaultDatabaseMetaTag.java", "BodyUseAPI": [], "Fixed commit": "f3c97c9015575008ba313dd813b3d34afc1dbe9a", "Url": "https://api.github.com/repos/red-soft-ru/redexpert", "Date": "2018-02-05T14:40:07Z"},
{"Line": "921=>922", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.contains(java.lang.String)=>((org.executequery.datasource.PooledResultSet) (rs)).getResultSet().unwrap(java.sql.ResultSet.class).getClass().getName().contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4590/buggy-version/src.org.executequery.databaseobjects.impl.DefaultDatabaseMetaTag.java", "BodyUseAPI": [], "Fixed commit": "f3c97c9015575008ba313dd813b3d34afc1dbe9a", "Url": "https://api.github.com/repos/red-soft-ru/redexpert", "Date": "2018-02-05T14:40:07Z"},
{"Line": "921=>922", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.Class<? extends java.sql.ResultSet>.getName()=>((org.executequery.datasource.PooledResultSet) (rs)).getResultSet().unwrap(java.sql.ResultSet.class).getClass().getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4590/buggy-version/src.org.executequery.databaseobjects.impl.DefaultDatabaseMetaTag.java", "BodyUseAPI": [], "Fixed commit": "f3c97c9015575008ba313dd813b3d34afc1dbe9a", "Url": "https://api.github.com/repos/red-soft-ru/redexpert", "Date": "2018-02-05T14:40:07Z"},
{"Line": "921=>922", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.sql.ResultSet.unwrap(java.lang.Class)=>((org.executequery.datasource.PooledResultSet) (rs)).getResultSet().unwrap(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4590/buggy-version/src.org.executequery.databaseobjects.impl.DefaultDatabaseMetaTag.java", "BodyUseAPI": [], "Fixed commit": "f3c97c9015575008ba313dd813b3d34afc1dbe9a", "Url": "https://api.github.com/repos/red-soft-ru/redexpert", "Date": "2018-02-05T14:40:07Z"},
{"Line": "74=>74", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "io.jsonwebtoken.Jwts.parser().setSigningKey(com.motorider.motobase.filter.SECRET.getBytes()).parseClaimsJws(token.replace(com.motorider.motobase.filter.TOKEN_PREFIX, \"\")).getBody().getSubject()=>io.jsonwebtoken.Jwts.parser().setSigningKey(com.motorider.motobase.filter.SECRET.getBytes()).parseClaimsJws(token.replace(com.motorider.motobase.filter.TOKEN_PREFIX, \"\")).getBody().get(java.lang.String,java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8040/buggy-version/src.main.java.com.motorider.motobase.filter.JWTAuthorizationFilter.java", "BodyUseAPI": [], "Fixed commit": "7a9239ee9d01317a9e32de6776d7786cbdd6080c", "Url": "https://api.github.com/repos/MotoRiderApp/motobase", "Date": "2018-03-21T03:09:32Z"},
{"Line": "25=>27", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.motorider.motobase.util.ResponseUtil.getFailureResponse(java.lang.String,HttpStatus.INTERNAL_SERVER_ERROR)=>com.motorider.motobase.util.ResponseUtil.getFailureResponse(com.motorider.motobase.dto.ErrorDTO,HttpStatus.INTERNAL_SERVER_ERROR)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8040/buggy-version/src.main.java.com.motorider.motobase.repository.MotoRiderRepository.java", "BodyUseAPI": [], "Fixed commit": "7a9239ee9d01317a9e32de6776d7786cbdd6080c", "Url": "https://api.github.com/repos/MotoRiderApp/motobase", "Date": "2018-03-21T03:09:32Z"},
{"Line": "487=>487", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "zipkin2.Span.Builder.shared(java.lang.Boolean)=>zipkin2.Span.Builder.shared(java.lang.Boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/680/buggy-version/zipkin2.src.main.java.zipkin2.Span.java", "BodyUseAPI": [], "Fixed commit": "a5fafd189f532e9322d83b6634d2b13ed82f782a", "Url": "https://api.github.com/repos/oscerd/zipkin", "Date": "2018-01-23T12:19:12Z"},
{"Line": "469=>469", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "zipkin2.Span.Builder.debug(java.lang.Boolean)=>zipkin2.Span.Builder.debug(java.lang.Boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/680/buggy-version/zipkin2.src.main.java.zipkin2.Span.java", "BodyUseAPI": [], "Fixed commit": "a5fafd189f532e9322d83b6634d2b13ed82f782a", "Url": "https://api.github.com/repos/oscerd/zipkin", "Date": "2018-01-23T12:19:12Z"},
{"Line": "82=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Body.getXPosition()=>Body.getXPosition()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7116/buggy-version/PSA9.Body.java", "BodyUseAPI": [], "Fixed commit": "8da3c030647cd2b64a4784a77b284a1b54a4a93d", "Url": "https://api.github.com/repos/josieacarrillo/Intro-Programming-Projects", "Date": "2018-09-21T18:04:30Z"},
{"Line": "83=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "Body.getYPosition()=>Body.getYPosition()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7116/buggy-version/PSA9.Body.java", "BodyUseAPI": [], "Fixed commit": "8da3c030647cd2b64a4784a77b284a1b54a4a93d", "Url": "https://api.github.com/repos/josieacarrillo/Intro-Programming-Projects", "Date": "2018-09-21T18:04:30Z"},
{"Line": "95=>97", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "xrate.JsonParser.parse(java.io.InputStreamReader)=>com.google.gson.JsonParser.parse(java.io.InputStreamReader)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5174/buggy-version/src.xrate.ExchangeRateReader.java", "BodyUseAPI": [], "Fixed commit": "9f25e7ee8a57cda6bfb8e514b94a33caa151cc97", "Url": "https://api.github.com/repos/UMM-CSci-3403-Fall-2018/lab-6-client-server-rpc-skeleton-keyboard", "Date": "2018-10-30T16:28:49Z"},
{"Line": "466=>466", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.ballerinalang.artifactgen.models.DeploymentModel.setUsername(java.lang.String)=>org.ballerinalang.artifactgen.models.DeploymentModel.setPassword(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5931/buggy-version/src.main.java.org.ballerinalang.artifactgen.KubeAnnotationProcessor.java", "BodyUseAPI": [], "Fixed commit": "7f5935c5b8174ac81c70bd2208b82abb3ea113e1", "Url": "https://api.github.com/repos/anuruddhal/kubernetes", "Date": "2018-03-06T13:35:37Z"},
{"Line": "159=>159", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Map<java.lang.String, org.bukkit.Location>.remove(java.lang.String)=>java.util.Iterator<java.lang.String>.remove()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1067/buggy-version/src.main.java.org.cubeville.cvhome.commands.HomeImport.java", "BodyUseAPI": [], "Fixed commit": "0738b4d5a6e393c067155ae690236175f306ef1a", "Url": "https://api.github.com/repos/unixminecraft/CVHome", "Date": "2018-09-15T03:07:23Z"},
{"Line": "85=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "at.favre.tools.apksigner.ZipAlignExecutor.toString()=>at.favre.tools.apksigner.signing.ZipAlignExecutor.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/918/buggy-version/src.main.java.at.favre.tools.apksigner.SignTool.java", "BodyUseAPI": [], "Fixed commit": "36902d432b8007440ed78765e7ad642e6242c2fa", "Url": "https://api.github.com/repos/patrickfav/uber-apk-signer", "Date": "2018-10-23T12:14:33Z"},
{"Line": "91=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "at.favre.tools.apksigner.SigningConfig.description()=>at.favre.tools.apksigner.signing.SigningConfig.description()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/918/buggy-version/src.main.java.at.favre.tools.apksigner.SignTool.java", "BodyUseAPI": [], "Fixed commit": "36902d432b8007440ed78765e7ad642e6242c2fa", "Url": "https://api.github.com/repos/patrickfav/uber-apk-signer", "Date": "2018-10-23T12:14:33Z"},
{"Line": "190=>194", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "at.favre.tools.apksigner.ZipAlignExecutor.cleanUp()=>at.favre.tools.apksigner.signing.ZipAlignExecutor.cleanUp()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/918/buggy-version/src.main.java.at.favre.tools.apksigner.SignTool.java", "BodyUseAPI": [], "Fixed commit": "36902d432b8007440ed78765e7ad642e6242c2fa", "Url": "https://api.github.com/repos/patrickfav/uber-apk-signer", "Date": "2018-10-23T12:14:33Z"},
{"Line": "133=>137", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "at.favre.tools.apksigner.SignTool.zipAlign(java.io.File,java.io.File,java.io.File,at.favre.tools.apksigner.ZipAlignExecutor,at.favre.tools.apksigner.ui.Arg,java.util.List<CmdUtil.Result>)=>at.favre.tools.apksigner.SignTool.zipAlign(java.io.File,java.io.File,java.io.File,at.favre.tools.apksigner.signing.ZipAlignExecutor,at.favre.tools.apksigner.ui.Arg,java.util.List<CmdUtil.Result>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/918/buggy-version/src.main.java.at.favre.tools.apksigner.SignTool.java", "BodyUseAPI": [], "Fixed commit": "36902d432b8007440ed78765e7ad642e6242c2fa", "Url": "https://api.github.com/repos/patrickfav/uber-apk-signer", "Date": "2018-10-23T12:14:33Z"},
{"Line": "151=>155", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "at.favre.tools.apksigner.SignTool.verifyZipAlign(java.io.File,java.io.File,at.favre.tools.apksigner.ZipAlignExecutor,at.favre.tools.apksigner.ui.Arg,java.util.List<CmdUtil.Result>)=>at.favre.tools.apksigner.SignTool.verifyZipAlign(java.io.File,java.io.File,at.favre.tools.apksigner.signing.ZipAlignExecutor,at.favre.tools.apksigner.ui.Arg,java.util.List<CmdUtil.Result>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/918/buggy-version/src.main.java.at.favre.tools.apksigner.SignTool.java", "BodyUseAPI": [], "Fixed commit": "36902d432b8007440ed78765e7ad642e6242c2fa", "Url": "https://api.github.com/repos/patrickfav/uber-apk-signer", "Date": "2018-10-23T12:14:33Z"},
{"Line": "194=>198", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "at.favre.tools.apksigner.SigningConfigGen.cleanUp()=>at.favre.tools.apksigner.signing.SigningConfigGen.cleanUp()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/918/buggy-version/src.main.java.at.favre.tools.apksigner.SignTool.java", "BodyUseAPI": [], "Fixed commit": "36902d432b8007440ed78765e7ad642e6242c2fa", "Url": "https://api.github.com/repos/patrickfav/uber-apk-signer", "Date": "2018-10-23T12:14:33Z"},
{"Line": "241=>245", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "at.favre.tools.apksigner.ZipAlignExecutor.isExecutableFound()=>at.favre.tools.apksigner.signing.ZipAlignExecutor.isExecutableFound()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/918/buggy-version/src.main.java.at.favre.tools.apksigner.SignTool.java", "BodyUseAPI": [], "Fixed commit": "36902d432b8007440ed78765e7ad642e6242c2fa", "Url": "https://api.github.com/repos/patrickfav/uber-apk-signer", "Date": "2018-10-23T12:14:33Z"},
{"Line": "356=>360", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "at.favre.tools.apksigner.CertHashChecker.check(AndroidApkSignerVerify.Result,java.lang.String[])=>at.favre.tools.apksigner.signing.CertHashChecker.check(AndroidApkSignerVerify.Result,java.lang.String[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/918/buggy-version/src.main.java.at.favre.tools.apksigner.SignTool.java", "BodyUseAPI": [], "Fixed commit": "36902d432b8007440ed78765e7ad642e6242c2fa", "Url": "https://api.github.com/repos/patrickfav/uber-apk-signer", "Date": "2018-10-23T12:14:33Z"},
{"Line": "306=>310", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "at.favre.tools.apksigner.AndroidApkSignerVerify.verify(java.io.File,<nulltype>,<nulltype>,boolean)=>at.favre.tools.apksigner.signing.AndroidApkSignerVerify.verify(java.io.File,<nulltype>,<nulltype>,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/918/buggy-version/src.main.java.at.favre.tools.apksigner.SignTool.java", "BodyUseAPI": [], "Fixed commit": "36902d432b8007440ed78765e7ad642e6242c2fa", "Url": "https://api.github.com/repos/patrickfav/uber-apk-signer", "Date": "2018-10-23T12:14:33Z"},
{"Line": "215=>219", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "at.favre.tools.apksigner.ZipAlignExecutor.getZipAlignExecutable()=>at.favre.tools.apksigner.signing.ZipAlignExecutor.getZipAlignExecutable()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/918/buggy-version/src.main.java.at.favre.tools.apksigner.SignTool.java", "BodyUseAPI": [], "Fixed commit": "36902d432b8007440ed78765e7ad642e6242c2fa", "Url": "https://api.github.com/repos/patrickfav/uber-apk-signer", "Date": "2018-10-23T12:14:33Z"},
{"Line": "244=>248", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "at.favre.tools.apksigner.ZipAlignExecutor.getZipAlignExecutable()=>at.favre.tools.apksigner.signing.ZipAlignExecutor.getZipAlignExecutable()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/918/buggy-version/src.main.java.at.favre.tools.apksigner.SignTool.java", "BodyUseAPI": [], "Fixed commit": "36902d432b8007440ed78765e7ad642e6242c2fa", "Url": "https://api.github.com/repos/patrickfav/uber-apk-signer", "Date": "2018-10-23T12:14:33Z"},
{"Line": "212=>216", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "at.favre.tools.apksigner.ZipAlignExecutor.isExecutableFound()=>at.favre.tools.apksigner.signing.ZipAlignExecutor.isExecutableFound()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/918/buggy-version/src.main.java.at.favre.tools.apksigner.SignTool.java", "BodyUseAPI": [], "Fixed commit": "36902d432b8007440ed78765e7ad642e6242c2fa", "Url": "https://api.github.com/repos/patrickfav/uber-apk-signer", "Date": "2018-10-23T12:14:33Z"},
{"Line": "365=>362", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)=>java.awt.EventQueue.invokeLater(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7812/buggy-version/com.eco.bio7.image.src.com.eco.bio7.image.CanvasView.java", "BodyUseAPI": [], "Fixed commit": "d08768dd1ee5fdab2dcc92445cb60f85d5429995", "Url": "https://api.github.com/repos/Bio7/EclipseImageJ1Plugin", "Date": "2018-02-08T12:22:43Z"},
{"Line": "365=>362", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)=>java.awt.EventQueue.invokeLater(java.lang.Runnable)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7812/buggy-version/com.eco.bio7.image.src.com.eco.bio7.image.CanvasView.java", "BodyUseAPI": [], "Fixed commit": "d08768dd1ee5fdab2dcc92445cb60f85d5429995", "Url": "https://api.github.com/repos/Bio7/EclipseImageJ1Plugin", "Date": "2018-02-08T12:22:43Z"},
{"Line": "77=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "eu.execom.pomodoroTeam.controllers.dto.UserDto.getName()=>eu.execom.pomodoroTeam.entities.dto.UserDto.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3102/buggy-version/src.main.java.eu.execom.pomodoroTeam.controllers.LoginController.java", "BodyUseAPI": [], "Fixed commit": "7ce1e1720166f7640bd4e79ae8fa60a38c1ba28a", "Url": "https://api.github.com/repos/minja1306/pomodoroTeam", "Date": "2018-09-03T06:40:12Z"},
{"Line": "80=>80", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "eu.execom.pomodoroTeam.controllers.dto.UserDto.getEmail()=>eu.execom.pomodoroTeam.entities.dto.UserDto.getEmail()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3102/buggy-version/src.main.java.eu.execom.pomodoroTeam.controllers.LoginController.java", "BodyUseAPI": [], "Fixed commit": "7ce1e1720166f7640bd4e79ae8fa60a38c1ba28a", "Url": "https://api.github.com/repos/minja1306/pomodoroTeam", "Date": "2018-09-03T06:40:12Z"},
{"Line": "60=>60", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "eu.execom.pomodoroTeam.controllers.dto.UserDto.getEmail()=>eu.execom.pomodoroTeam.entities.dto.UserDto.getEmail()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3102/buggy-version/src.main.java.eu.execom.pomodoroTeam.controllers.LoginController.java", "BodyUseAPI": [], "Fixed commit": "7ce1e1720166f7640bd4e79ae8fa60a38c1ba28a", "Url": "https://api.github.com/repos/minja1306/pomodoroTeam", "Date": "2018-09-03T06:40:12Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "eu.execom.pomodoroTeam.controllers.dto.UserDto.getName()=>eu.execom.pomodoroTeam.entities.dto.UserDto.getName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3102/buggy-version/src.main.java.eu.execom.pomodoroTeam.controllers.LoginController.java", "BodyUseAPI": [], "Fixed commit": "7ce1e1720166f7640bd4e79ae8fa60a38c1ba28a", "Url": "https://api.github.com/repos/minja1306/pomodoroTeam", "Date": "2018-09-03T06:40:12Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "eu.execom.pomodoroTeam.controllers.dto.UserDto.getEmail()=>eu.execom.pomodoroTeam.entities.dto.UserDto.getEmail()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3102/buggy-version/src.main.java.eu.execom.pomodoroTeam.controllers.LoginController.java", "BodyUseAPI": [], "Fixed commit": "7ce1e1720166f7640bd4e79ae8fa60a38c1ba28a", "Url": "https://api.github.com/repos/minja1306/pomodoroTeam", "Date": "2018-09-03T06:40:12Z"},
{"Line": "16=>16", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "eu.execom.pomodoroTeam.controllers.dto.UserDto.setName(user.getName())=>eu.execom.pomodoroTeam.entities.dto.UserDto.setName(user.getName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3102/buggy-version/src.main.java.eu.execom.pomodoroTeam.services.Mapper.java", "BodyUseAPI": [], "Fixed commit": "7ce1e1720166f7640bd4e79ae8fa60a38c1ba28a", "Url": "https://api.github.com/repos/minja1306/pomodoroTeam", "Date": "2018-09-03T06:40:12Z"},
{"Line": "30=>30", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "eu.execom.pomodoroTeam.controllers.dto.TeamDto.setId(team.getId())=>eu.execom.pomodoroTeam.entities.dto.TeamDto.setId(team.getId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3102/buggy-version/src.main.java.eu.execom.pomodoroTeam.services.Mapper.java", "BodyUseAPI": [], "Fixed commit": "7ce1e1720166f7640bd4e79ae8fa60a38c1ba28a", "Url": "https://api.github.com/repos/minja1306/pomodoroTeam", "Date": "2018-09-03T06:40:12Z"},
{"Line": "18=>18", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "eu.execom.pomodoroTeam.controllers.dto.UserDto.setId(user.getId())=>eu.execom.pomodoroTeam.entities.dto.UserDto.setId(user.getId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3102/buggy-version/src.main.java.eu.execom.pomodoroTeam.services.Mapper.java", "BodyUseAPI": [], "Fixed commit": "7ce1e1720166f7640bd4e79ae8fa60a38c1ba28a", "Url": "https://api.github.com/repos/minja1306/pomodoroTeam", "Date": "2018-09-03T06:40:12Z"},
{"Line": "29=>29", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "eu.execom.pomodoroTeam.controllers.dto.TeamDto.setName(team.getName())=>eu.execom.pomodoroTeam.entities.dto.TeamDto.setName(team.getName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3102/buggy-version/src.main.java.eu.execom.pomodoroTeam.services.Mapper.java", "BodyUseAPI": [], "Fixed commit": "7ce1e1720166f7640bd4e79ae8fa60a38c1ba28a", "Url": "https://api.github.com/repos/minja1306/pomodoroTeam", "Date": "2018-09-03T06:40:12Z"},
{"Line": "17=>17", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "eu.execom.pomodoroTeam.controllers.dto.UserDto.setEmail(user.getEmail())=>eu.execom.pomodoroTeam.entities.dto.UserDto.setEmail(user.getEmail())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3102/buggy-version/src.main.java.eu.execom.pomodoroTeam.services.Mapper.java", "BodyUseAPI": [], "Fixed commit": "7ce1e1720166f7640bd4e79ae8fa60a38c1ba28a", "Url": "https://api.github.com/repos/minja1306/pomodoroTeam", "Date": "2018-09-03T06:40:12Z"},
{"Line": "106=>106", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(java.lang.String)=>com.google.appengine.repackaged.com.google.common.base.Strings.isNullOrEmpty(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7918/buggy-version/server.src.main.java.com.google.samples.apps.iosched.server.gcm.FcmRegistrationEndpoint.java", "BodyUseAPI": [], "Fixed commit": "4d417af0083eb0226b7314c46cf236b5105b4b2f", "Url": "https://api.github.com/repos/lp43/iosched", "Date": "2018-05-09T03:00:04Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(user.getId())=>com.google.appengine.repackaged.com.google.common.base.Strings.isNullOrEmpty(user.getId())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7918/buggy-version/server.src.main.java.com.google.samples.apps.iosched.server.gcm.FcmRegistrationEndpoint.java", "BodyUseAPI": [], "Fixed commit": "4d417af0083eb0226b7314c46cf236b5105b4b2f", "Url": "https://api.github.com/repos/lp43/iosched", "Date": "2018-05-09T03:00:04Z"},
{"Line": "191=>191", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.google.gson.Gson.toJson(com.github.mvp4g.nalu.processor.model.ApplicationMetaModel,java.io.PrintWriter)=>java.io.PrintWriter.print(gson.toJson(model))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/531/buggy-version/nalu-processor.src.main.java.com.github.mvp4g.nalu.processor.scanner.ApplicationAnnotationScanner.java", "BodyUseAPI": [], "Fixed commit": "c349f0ec1562b00d7665054a3a81fb739dd5683e", "Url": "https://api.github.com/repos/NaluKit/nalu", "Date": "2018-08-23T16:47:52Z"},
{"Line": "1181=>1200", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.biglybt.core.content.RelatedContentManager.delete(com.biglybt.core.content.RelatedContent[])=>java.util.List<com.biglybt.core.content.RelatedContent>.toArray(com.biglybt.core.content.RelatedContent[])", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5658/buggy-version/com.aelitis.plugins.rcmplugin.SBC_RCMView.java", "BodyUseAPI": [], "Fixed commit": "973b27091e2bf51154b8c6d28d7ecc9ba70b99fe", "Url": "https://api.github.com/repos/BiglySoftware/BiglyBT-plugin-aercm", "Date": "2018-02-14T20:22:58Z"},
{"Line": "207=>207", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.imt3673.project.Objects.Level.addBlockTexture(com.imt3673.project.Objects.Block,int)=>com.imt3673.project.Objects.Level.addBlockTexture(com.imt3673.project.Objects.Block,int,int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5479/buggy-version/app.src.main.java.com.imt3673.project.Objects.Level.java", "BodyUseAPI": [], "Fixed commit": "dd6965ec8ea450ab867b6f5b30ce29604ea8069a", "Url": "https://api.github.com/repos/adamajammary/imt3673-project", "Date": "2018-04-29T00:16:26Z"},
{"Line": "70=>69", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "money.Utils.getValueByNumber(int,java.util.LinkedHashMap<java.lang.String, java.lang.String>)=>money.Utils.getValueByNumber(int,java.util.Map<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/674/buggy-version/src.main.java.money.command.List1Command.java", "BodyUseAPI": [], "Fixed commit": "05ce66b8feb52ad9f37a893978cac2d273f04af0", "Url": "https://api.github.com/repos/Him188/Money", "Date": "2018-02-20T05:47:04Z"},
{"Line": "69=>68", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "money.Utils.getKeyByNumber(int,java.util.LinkedHashMap<java.lang.String, java.lang.String>)=>money.Utils.getKeyByNumber(int,java.util.Map<java.lang.String, java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/674/buggy-version/src.main.java.money.command.List1Command.java", "BodyUseAPI": [], "Fixed commit": "05ce66b8feb52ad9f37a893978cac2d273f04af0", "Url": "https://api.github.com/repos/Him188/Money", "Date": "2018-02-20T05:47:04Z"},
{"Line": "45=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.LinkedHashMap<java.lang.String, java.lang.String>.size()=>java.util.Map<java.lang.String, java.lang.String>.size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/674/buggy-version/src.main.java.money.command.List1Command.java", "BodyUseAPI": [], "Fixed commit": "05ce66b8feb52ad9f37a893978cac2d273f04af0", "Url": "https://api.github.com/repos/Him188/Money", "Date": "2018-02-20T05:47:04Z"},
{"Line": "26=>26", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.LinkedHashMap<java.lang.String, java.util.LinkedHashMap<java.lang.String, java.lang.String>>.forEach(java.util.function.BiConsumer<? super java.lang.String, ? super java.util.LinkedHashMap<java.lang.String, java.lang.String>>)=>java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>>.forEach(java.util.function.BiConsumer<? super java.lang.String, ? super java.util.Map<java.lang.String, java.lang.String>>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/674/buggy-version/src.main.java.money.Utils.java", "BodyUseAPI": [], "Fixed commit": "05ce66b8feb52ad9f37a893978cac2d273f04af0", "Url": "https://api.github.com/repos/Him188/Money", "Date": "2018-02-20T05:47:04Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.LinkedHashMap<java.lang.String, java.lang.String>.get(java.lang.String)=>java.util.Map<java.lang.String, java.lang.String>.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/674/buggy-version/src.main.java.money.Utils.java", "BodyUseAPI": [], "Fixed commit": "05ce66b8feb52ad9f37a893978cac2d273f04af0", "Url": "https://api.github.com/repos/Him188/Money", "Date": "2018-02-20T05:47:04Z"},
{"Line": "265=>267", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/920/buggy-version/app.src.main.java.com.mitdroid.kenshi.mitdroid.midDroidScreenActivity.java", "BodyUseAPI": [], "Fixed commit": "d1877b34654258118f19f50240435daee48713a3", "Url": "https://api.github.com/repos/sorlax2410/tool", "Date": "2018-05-01T06:11:14Z"},
{"Line": "293=>281", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.Button.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/920/buggy-version/app.src.main.java.com.mitdroid.kenshi.mitdroid.midDroidScreenActivity.java", "BodyUseAPI": [], "Fixed commit": "d1877b34654258118f19f50240435daee48713a3", "Url": "https://api.github.com/repos/sorlax2410/tool", "Date": "2018-05-01T06:11:14Z"},
{"Line": "345=>347", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "dialog.setTitle(\"Save file\").setMessage(\"Do you want to save the log to file?\").setPositiveButton(android.R.string.yes,android.content.DialogInterface.OnClickListener)=>dialog.setTitle(\"Save file\").setMessage(\"Do you want to save the log to file?\").setPositiveButton(android.R.string.yes,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/920/buggy-version/app.src.main.java.com.mitdroid.kenshi.mitdroid.midDroidScreenActivity.java", "BodyUseAPI": [], "Fixed commit": "d1877b34654258118f19f50240435daee48713a3", "Url": "https://api.github.com/repos/sorlax2410/tool", "Date": "2018-05-01T06:11:14Z"},
{"Line": "297=>285", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.mitdroid.kenshi.mitdroid.midDroidScreenActivity.6.detailScan(java.lang.String)=>com.mitdroid.kenshi.mitdroid.midDroidScreenActivity.4.normalScan(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/920/buggy-version/app.src.main.java.com.mitdroid.kenshi.mitdroid.midDroidScreenActivity.java", "BodyUseAPI": [], "Fixed commit": "d1877b34654258118f19f50240435daee48713a3", "Url": "https://api.github.com/repos/sorlax2410/tool", "Date": "2018-05-01T06:11:14Z"},
{"Line": "283=>299", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.mitdroid.kenshi.mitdroid.midDroidScreenActivity.5.normalScan(java.lang.String)=>com.mitdroid.kenshi.mitdroid.midDroidScreenActivity.5.detailScan(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/920/buggy-version/app.src.main.java.com.mitdroid.kenshi.mitdroid.midDroidScreenActivity.java", "BodyUseAPI": [], "Fixed commit": "d1877b34654258118f19f50240435daee48713a3", "Url": "https://api.github.com/repos/sorlax2410/tool", "Date": "2018-05-01T06:11:14Z"},
{"Line": "241=>243", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "alertDialog.setTitle(\"Take target\").setMessage(\"Please enter the victim's ip address\").setPositiveButton(android.R.string.yes, new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { target = editText.getText().toString(); scanResult.setText(target); } }).setNegativeButton(android.R.string.no,android.content.DialogInterface.OnClickListener)=>alertDialog.setTitle(\"Take target\").setMessage(\"Please enter the victim's ip address\").setPositiveButton(android.R.string.yes, new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { target = editText.getText().toString(); scanResult.setText(target); } }).setNegativeButton(android.R.string.no,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/920/buggy-version/app.src.main.java.com.mitdroid.kenshi.mitdroid.midDroidScreenActivity.java", "BodyUseAPI": [], "Fixed commit": "d1877b34654258118f19f50240435daee48713a3", "Url": "https://api.github.com/repos/sorlax2410/tool", "Date": "2018-05-01T06:11:14Z"},
{"Line": "345=>347", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "dialog.setTitle(\"Save file\").setMessage(\"Do you want to save the log to file?\").setPositiveButton(android.R.string.yes, new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { logName = editText.getText().toString(); saveLogs(); } }).setNegativeButton(android.R.string.no,android.content.DialogInterface.OnClickListener)=>dialog.setTitle(\"Save file\").setMessage(\"Do you want to save the log to file?\").setPositiveButton(android.R.string.yes, new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { logName = editText.getText().toString(); saveLogs(); } }).setNegativeButton(android.R.string.no,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/920/buggy-version/app.src.main.java.com.mitdroid.kenshi.mitdroid.midDroidScreenActivity.java", "BodyUseAPI": [], "Fixed commit": "d1877b34654258118f19f50240435daee48713a3", "Url": "https://api.github.com/repos/sorlax2410/tool", "Date": "2018-05-01T06:11:14Z"},
{"Line": "241=>243", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "alertDialog.setTitle(\"Take target\").setMessage(\"Please enter the victim's ip address\").setPositiveButton(android.R.string.yes,android.content.DialogInterface.OnClickListener)=>alertDialog.setTitle(\"Take target\").setMessage(\"Please enter the victim's ip address\").setPositiveButton(android.R.string.yes,android.content.DialogInterface.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/920/buggy-version/app.src.main.java.com.mitdroid.kenshi.mitdroid.midDroidScreenActivity.java", "BodyUseAPI": [], "Fixed commit": "d1877b34654258118f19f50240435daee48713a3", "Url": "https://api.github.com/repos/sorlax2410/tool", "Date": "2018-05-01T06:11:14Z"},
{"Line": "51=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.concurrent.BlockingQueue<java.net.DatagramPacket>.take()=>java.util.concurrent.BlockingQueue<java.net.DatagramPacket>.poll(int,java.util.concurrent.TimeUnit)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/181/buggy-version/src.com.valkryst.VUDP.PacketWriter.java", "BodyUseAPI": [], "Fixed commit": "a1c35f3fb993f8fd8fc56e9328fd767da71fe128", "Url": "https://api.github.com/repos/Valkryst/VUDP", "Date": "2018-04-11T17:18:18Z"},
{"Line": "47=>52", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.b2international.snowowl.core.date.EffectiveTimes.parse(getProperty(SnomedRf2Headers.FIELD_TARGET_EFFECTIVE_TIME), DateFormats.SHORT).getTime()=>com.b2international.snowowl.core.date.EffectiveTimes.toDate(original.getTargetEffectiveTime())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4860/buggy-version/snomed.com.b2international.snowowl.snomed.datastore.src.com.b2international.snowowl.snomed.datastore.request.SnomedModuleDependencyMemberUpdateDelegate.java", "BodyUseAPI": [], "Fixed commit": "0d5539a931dd8c2bc9852ae3741fe21ba1416fd3", "Url": "https://api.github.com/repos/b2ihealthcare/snow-owl", "Date": "2018-07-24T12:12:59Z"},
{"Line": "39=>43", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.b2international.snowowl.core.date.EffectiveTimes.parse(getProperty(SnomedRf2Headers.FIELD_SOURCE_EFFECTIVE_TIME), DateFormats.SHORT).getTime()=>com.b2international.snowowl.core.date.EffectiveTimes.toDate(original.getSourceEffectiveTime())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4860/buggy-version/snomed.com.b2international.snowowl.snomed.datastore.src.com.b2international.snowowl.snomed.datastore.request.SnomedModuleDependencyMemberUpdateDelegate.java", "BodyUseAPI": [], "Fixed commit": "0d5539a931dd8c2bc9852ae3741fe21ba1416fd3", "Url": "https://api.github.com/repos/b2ihealthcare/snow-owl", "Date": "2018-07-24T12:12:59Z"},
{"Line": "41=>45", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "SnomedRefSetMemberIndexEntry.Builder.field(SnomedRf2Headers.FIELD_SOURCE_EFFECTIVE_TIME,long)=>SnomedRefSetMemberIndexEntry.Builder.field(SnomedRf2Headers.FIELD_SOURCE_EFFECTIVE_TIME,com.b2international.snowowl.core.date.EffectiveTimes.getEffectiveTime(newSourceEffectiveTime))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4860/buggy-version/snomed.com.b2international.snowowl.snomed.datastore.src.com.b2international.snowowl.snomed.datastore.request.SnomedModuleDependencyMemberUpdateDelegate.java", "BodyUseAPI": [], "Fixed commit": "0d5539a931dd8c2bc9852ae3741fe21ba1416fd3", "Url": "https://api.github.com/repos/b2ihealthcare/snow-owl", "Date": "2018-07-24T12:12:59Z"},
{"Line": "49=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "SnomedRefSetMemberIndexEntry.Builder.field(SnomedRf2Headers.FIELD_TARGET_EFFECTIVE_TIME,long)=>SnomedRefSetMemberIndexEntry.Builder.field(SnomedRf2Headers.FIELD_TARGET_EFFECTIVE_TIME,com.b2international.snowowl.core.date.EffectiveTimes.getEffectiveTime(newTargetEffectiveTime))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4860/buggy-version/snomed.com.b2international.snowowl.snomed.datastore.src.com.b2international.snowowl.snomed.datastore.request.SnomedModuleDependencyMemberUpdateDelegate.java", "BodyUseAPI": [], "Fixed commit": "0d5539a931dd8c2bc9852ae3741fe21ba1416fd3", "Url": "https://api.github.com/repos/b2ihealthcare/snow-owl", "Date": "2018-07-24T12:12:59Z"},
{"Line": "21=>21", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "NewCountdownContracts.View.showColorPicker()=>NewCountdownContracts.View.showColorPicker(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5586/buggy-version/app.src.main.java.pl.almestinio.countdowndays.ui.newCountdownView.NewCountdownPresenter.java", "BodyUseAPI": [], "Fixed commit": "6d48465539b14adc54e04469fb470c5190662ff3", "Url": "https://api.github.com/repos/arturostrowski/CountdownDays", "Date": "2018-04-01T12:43:22Z"},
{"Line": "52=>52", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "Graph.getNodeSet()=>org.graphstream.ui.graphicGraph.GraphicGraph.getNodeSet()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1190/buggy-version/graph.src.ContextMenu.java", "BodyUseAPI": [], "Fixed commit": "fa0e27b673c65eab25933b161819f85de7443cb4", "Url": "https://api.github.com/repos/Inoretsu/java-practice", "Date": "2018-07-08T14:16:24Z"},
{"Line": "55=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.util.Vector<Node>.add(Node)=>java.util.Vector<Node>.add(graph.getNode(n.getId()))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1190/buggy-version/graph.src.ContextMenu.java", "BodyUseAPI": [], "Fixed commit": "fa0e27b673c65eab25933b161819f85de7443cb4", "Url": "https://api.github.com/repos/Inoretsu/java-practice", "Date": "2018-07-08T14:16:24Z"},
{"Line": "83=>83", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "de.bioforscher.singa.simulation.model.graphs.AutomatonNode.setObserved(boolean)=>owner.getSimulation().observeNode(de.bioforscher.singa.simulation.model.graphs.AutomatonNode)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7826/buggy-version/src.main.java.de.bioforscher.singa.simulation.gui.components.menus.AutomatonNodeContextMenu.java", "BodyUseAPI": [], "Fixed commit": "4d475e6fe003f2a7184ba42325b02b9dccfd5be3", "Url": "https://api.github.com/repos/singa-bio/singa-simulation-gui", "Date": "2018-05-03T10:36:16Z"},
{"Line": "107=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.lwjgl.opengl.GL11.glFogi(GL11.GL_FOG_MODE,GL11.GL_EXP)=>org.lwjgl.opengl.GL11.glFogi(GL11.GL_FOG_MODE,GL11.GL_LINEAR)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1303/buggy-version/src.main.java.com.mjr.extraplanets.handlers.MainHandler.java", "BodyUseAPI": [], "Fixed commit": "15ff2bd9231de2e23d9466a47dc07df4b893861f", "Url": "https://api.github.com/repos/MJRLegends/ExtraPlanets", "Date": "2018-01-23T00:43:59Z"},
{"Line": "30=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.example.android.justjava.MainActivity.display(int)=>com.example.android.justjava.MainActivity.displayPrice(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3587/buggy-version/app.src.main.java.com.example.android.justjava.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "5837636fbd4c551d499c73247ec4b05b03bc6d2d", "Url": "https://api.github.com/repos/hrymel/Just-Java", "Date": "2018-07-13T03:48:52Z"},
{"Line": "46=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.android.justjava.NumberFormat.getCurrencyInstance()=>java.text.NumberFormat.getCurrencyInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3587/buggy-version/app.src.main.java.com.example.android.justjava.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "5837636fbd4c551d499c73247ec4b05b03bc6d2d", "Url": "https://api.github.com/repos/hrymel/Just-Java", "Date": "2018-07-13T03:48:52Z"},
{"Line": "46=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.example.android.justjava.NumberFormat.getCurrencyInstance().format(int)=>java.text.NumberFormat.format(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3587/buggy-version/app.src.main.java.com.example.android.justjava.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "5837636fbd4c551d499c73247ec4b05b03bc6d2d", "Url": "https://api.github.com/repos/hrymel/Just-Java", "Date": "2018-07-13T03:48:52Z"},
{"Line": "46=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.TextView.setText(com.example.android.justjava.NumberFormat.getCurrencyInstance().format(number))=>android.widget.TextView.setText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3587/buggy-version/app.src.main.java.com.example.android.justjava.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "5837636fbd4c551d499c73247ec4b05b03bc6d2d", "Url": "https://api.github.com/repos/hrymel/Just-Java", "Date": "2018-07-13T03:48:52Z"},
{"Line": "46=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.example.android.justjava.NumberFormat.getCurrencyInstance()=>java.text.NumberFormat.getCurrencyInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3587/buggy-version/app.src.main.java.com.example.android.justjava.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "5837636fbd4c551d499c73247ec4b05b03bc6d2d", "Url": "https://api.github.com/repos/hrymel/Just-Java", "Date": "2018-07-13T03:48:52Z"},
{"Line": "57=>59", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.massivecraft.factions.listeners.FPlayers.getInstance().getOnlinePlayers()=>com.massivecraft.factions.listeners.Faction.getFPlayers()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1783/buggy-version/src.main.java.com.massivecraft.factions.listeners.FactionsChatListener.java", "BodyUseAPI": [], "Fixed commit": "cfb64ea316c0f1b4cb01b5ec6105e27b139d54fc", "Url": "https://api.github.com/repos/ProSavage/SavageFactions", "Date": "2018-07-17T14:36:46Z"},
{"Line": "183=>184", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashSet.iterator()=>java.util.Set<bt.net.Peer>.iterator()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7046/buggy-version/bt-core.src.main.java.bt.torrent.messaging.Assignments.java", "BodyUseAPI": [], "Fixed commit": "0e180c4f37c48dc40253dd17b7ba9d3398910be9", "Url": "https://api.github.com/repos/atomashpolskiy/bt", "Date": "2018-02-01T02:47:08Z"},
{"Line": "583=>586", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.net.Uri.parse(getString(R.string.play_store_link))=>android.net.Uri.parse(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2446/buggy-version/app.src.main.java.in.ninos.activities.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "cd16a4ab4c8162de2d00a6dac62a04039d587982", "Url": "https://api.github.com/repos/ninosapp/Ninos", "Date": "2018-03-15T09:17:44Z"},
{"Line": "126=>126", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.content.Context.getString(R.string.play_store_link)=>android.content.Context.getPackageName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2446/buggy-version/app.src.main.java.in.ninos.utils.AppRaterUtils.java", "BodyUseAPI": [], "Fixed commit": "cd16a4ab4c8162de2d00a6dac62a04039d587982", "Url": "https://api.github.com/repos/ninosapp/Ninos", "Date": "2018-03-15T09:17:44Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.blade.Blade.of().use(new com.blade.security.web.csrf.CsrfMiddleware(csrfOption)).use(com.blade.security.web.xss.XssMiddleware)=>com.blade.Blade.of().use(new com.blade.security.web.csrf.CsrfMiddleware(csrfOption)).use(io.github.biezhi.profit.verification.XssMiddleware)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3318/buggy-version/src.main.java.io.github.biezhi.profit.Application.java", "BodyUseAPI": [], "Fixed commit": "b2ca021a0d6afb9e4938f9b833572f9051b32a4a", "Url": "https://api.github.com/repos/biezhi/profit", "Date": "2018-10-15T08:43:51Z"},
{"Line": "112=>112", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "this.cmaInfo.getPluginPaths().size()=>this.cmaInfo.getPluginPaths().isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5943/buggy-version/core.src.main.java.de.unistuttgart.iaas.amyassist.amy.core.pluginloader.PluginManagerService.java", "BodyUseAPI": [], "Fixed commit": "54c4292dd5d2b927d42fef8b65e53df4b1354e2f", "Url": "https://api.github.com/repos/AmyAssist/Amy", "Date": "2018-08-11T11:57:26Z"},
{"Line": "248=>249", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "databse.child(\"users_post\").child(java.lang.String)=>java.util.ArrayList<com.example.mt_2016.marathon_blood.Models.Post>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6346/buggy-version/MArathon_Blood.app.src.main.java.com.example.mt_2016.marathon_blood.Fragments.One.java", "BodyUseAPI": [], "Fixed commit": "a71507fb9720259d83b4426cc067433a4df3b8cc", "Url": "https://api.github.com/repos/babar-mustafa/Blood-App", "Date": "2018-01-01T21:03:35Z"},
{"Line": "143=>148", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.startsWith(java.lang.String)=>java.lang.String.contains(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2286/buggy-version/src.main.java.spoon.internal.mavenlauncher.InheritanceModel.java", "BodyUseAPI": [], "Fixed commit": "1a43b2d2b6a87bac6216ef9f30f29e20552748e9", "Url": "https://api.github.com/repos/nharrand/spoon", "Date": "2018-09-04T16:16:49Z"},
{"Line": "60=>60", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.columbia.rdf.matcalc.MainMatCalc.main(edu.columbia.rdf.matcalc.toolbox.conversion.app.ConversionInfo,edu.columbia.rdf.matcalc.ModuleLoader)=>edu.columbia.rdf.matcalc.MainMatCalc.main(edu.columbia.rdf.matcalc.toolbox.conversion.app.ConversionInfo,edu.columbia.rdf.matcalc.BasicModuleLoader)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/605/buggy-version/edu.columbia.rdf.matcalc.toolbox.conversion.app.src.main.java.edu.columbia.rdf.matcalc.toolbox.conversion.app.MainConversion.java", "BodyUseAPI": [], "Fixed commit": "605261c25f213024808509d551317a59072fc9ce", "Url": "https://api.github.com/repos/antonybholmes/matcalc-conversion", "Date": "2018-02-24T00:40:58Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.net.URL.getPath()=>java.net.URL.toURI()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7062/buggy-version/src.main.java.org.etsisi.visualrs.examples.GettingStarted.java", "BodyUseAPI": [], "Fixed commit": "bab1ac49af3cd876720aa219ab00c8a9b983371c", "Url": "https://api.github.com/repos/SergioGilBorras/VisualRS", "Date": "2018-04-20T08:31:23Z"},
{"Line": "88=>88", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.openqa.selenium.WebDriver.close()=>org.openqa.selenium.WebDriver.quit()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5621/buggy-version/selenium.src.main.java.com.cv4j.netdiscovery.selenium.downloader.SeleniumDownloader.java", "BodyUseAPI": [], "Fixed commit": "000d7bd25d3c45b0a11d03af1593f86cfcba87c1", "Url": "https://api.github.com/repos/fengzhizi715/NetDiscovery", "Date": "2018-03-05T04:07:17Z"},
{"Line": "98=>102", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.concurrent.atomic.AtomicLong.decrementAndGet()=>com.iflide.crawler.crawler.TaskManager.addTask(java.util.concurrent.Future<?>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3555/buggy-version/NodeCrawler.src.main.java.com.iflide.crawler.crawler.DispatcherImpl.java", "BodyUseAPI": [], "Fixed commit": "3d56037d5098648353b51247fa40870b33ddda6f", "Url": "https://api.github.com/repos/wzes/WordCrawler", "Date": "2018-08-31T10:29:29Z"},
{"Line": "1194=>1194", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.simplejavamail.email.EmailPopulatingBuilder.checkNonEmptyArgument(java.lang.Object,java.lang.String)=>java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7161/buggy-version/src.main.java.org.simplejavamail.email.EmailPopulatingBuilder.java", "BodyUseAPI": [], "Fixed commit": "d680bf0ef83475669a5b0a6e2a0e8974a03f0083", "Url": "https://api.github.com/repos/bbottema/simple-java-mail", "Date": "2018-01-04T18:30:12Z"},
{"Line": "115=>115", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.File.getPath()=>java.io.File.getAbsolutePath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7727/buggy-version/domain-models-interface-extensions.src.main.java.org.folio.rest.tools.GenerateRunner.java", "BodyUseAPI": [], "Fixed commit": "e2ba2fa4e5bd22647ad5ec5664c0c1d9b5349293", "Url": "https://api.github.com/repos/folio-org/raml-module-builder", "Date": "2018-10-01T09:39:58Z"},
{"Line": "46=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "getSupportFragmentManager().beginTransaction().replace(frmContainer.getId(), designTrendsFragment).addToBackStack(<nulltype>)=>getSupportFragmentManager().beginTransaction().replace(frmContainer.getId(), designTrendsFragment).commit()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5815/buggy-version/app.src.main.java.com.example.sahilj.mevadaply.ContainerActivity.java", "BodyUseAPI": [], "Fixed commit": "5796e788eb5e3b0f0496eb947b1527ab3fc90b8a", "Url": "https://api.github.com/repos/sahildoshi013/mevadaPLY", "Date": "2018-03-11T21:53:45Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "location.getBlock().setType(Material.STAINED_CLAY)=>location.getBlock().setType(Material.WOOL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7628/buggy-version/src.fr.thomapolis.polishub.gadgets.projectiles.PGPaintBall.java", "BodyUseAPI": [], "Fixed commit": "fc51fd7ce4c42da8f30f3daefbf80ad8bd08b830", "Url": "https://api.github.com/repos/thomapolis/PolisHub", "Date": "2018-07-15T21:35:49Z"},
{"Line": "67=>70", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "org.bukkit.event.entity.ProjectileHitEvent.getEntity()=>polishub.getProjectileType().getProjectileGadet(event.getEntity()).getEffect(org.bukkit.Location,fr.thomapolis.polishub.PolisHub)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7628/buggy-version/src.fr.thomapolis.polishub.listeners.ListenerProjectile.java", "BodyUseAPI": [], "Fixed commit": "fc51fd7ce4c42da8f30f3daefbf80ad8bd08b830", "Url": "https://api.github.com/repos/thomapolis/PolisHub", "Date": "2018-07-15T21:35:49Z"},
{"Line": "67=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "polishub.getProjectileType().getProjectileGadet(event.getEntity()).getEffect(event.getEntity().getLocation(),fr.thomapolis.polishub.PolisHub)=>polishub.getProjectileType().getProjectileGadet(event.getEntity()).getEffect(org.bukkit.Location,fr.thomapolis.polishub.PolisHub)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7628/buggy-version/src.fr.thomapolis.polishub.listeners.ListenerProjectile.java", "BodyUseAPI": [], "Fixed commit": "fc51fd7ce4c42da8f30f3daefbf80ad8bd08b830", "Url": "https://api.github.com/repos/thomapolis/PolisHub", "Date": "2018-07-15T21:35:49Z"},
{"Line": "45=>45", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.bukkit.entity.Projectile.getName()=>org.bukkit.entity.Projectile.getCustomName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7628/buggy-version/src.fr.thomapolis.polishub.type.ProjectileGadgetType.java", "BodyUseAPI": [], "Fixed commit": "fc51fd7ce4c42da8f30f3daefbf80ad8bd08b830", "Url": "https://api.github.com/repos/thomapolis/PolisHub", "Date": "2018-07-15T21:35:49Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.bukkit.entity.Projectile.getName()=>org.bukkit.entity.Projectile.getCustomName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7628/buggy-version/src.fr.thomapolis.polishub.type.ProjectileGadgetType.java", "BodyUseAPI": [], "Fixed commit": "fc51fd7ce4c42da8f30f3daefbf80ad8bd08b830", "Url": "https://api.github.com/repos/thomapolis/PolisHub", "Date": "2018-07-15T21:35:49Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.kie.cloud.openshift.constants.ProjectSpecificPropertyNames.workbenchMavenPassword()=>org.kie.cloud.openshift.constants.ProjectSpecificPropertyNames.workbenchHttpsSecret()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3734/buggy-version/framework-cloud.framework-openshift-templates.src.main.java.org.kie.cloud.openshift.scenario.builder.WorkbenchKieServerPersistentScenarioBuilderImpl.java", "BodyUseAPI": [], "Fixed commit": "be4dd706596917897c0a73e94aca38aae9f6338b", "Url": "https://api.github.com/repos/jhrcek/kie-cloud-tests", "Date": "2018-09-20T07:37:27Z"},
{"Line": "247=>247", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.opentripplanner.routing.ignore.PathIgnoreStrategy.shouldIgnorePath(org.opentripplanner.routing.spt.GraphPath)=>org.opentripplanner.routing.ignore.PathIgnoreStrategy.shouldIgnorePath(org.opentripplanner.routing.spt.GraphPath,org.opentripplanner.routing.core.RoutingRequest)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7332/buggy-version/src.main.java.org.opentripplanner.routing.impl.GraphPathFinder.java", "BodyUseAPI": [], "Fixed commit": "db8ecdfa8f8bd8d9fd6396daa868d57409e4d115", "Url": "https://api.github.com/repos/camsys/OpenTripPlanner", "Date": "2018-09-21T13:37:43Z"},
{"Line": "276=>276", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ballerinalang.plugins.idea.util.Diagnostic.getKind()=>org.ballerinalang.util.diagnostic.Diagnostic.getKind()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4929/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.BallerinaExternalAnnotator.java", "BodyUseAPI": [], "Fixed commit": "f4911e00b27cf3f19af911de67fe5acc7819d7df", "Url": "https://api.github.com/repos/kaviththiranga/ballerina-1", "Date": "2018-02-14T10:07:49Z"},
{"Line": "273=>273", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ballerinalang.plugins.idea.util.Diagnostic.getMessage()=>org.ballerinalang.util.diagnostic.Diagnostic.getMessage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4929/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.BallerinaExternalAnnotator.java", "BodyUseAPI": [], "Fixed commit": "f4911e00b27cf3f19af911de67fe5acc7819d7df", "Url": "https://api.github.com/repos/kaviththiranga/ballerina-1", "Date": "2018-02-14T10:07:49Z"},
{"Line": "272=>272", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ballerinalang.plugins.idea.util.Diagnostic.getKind()=>org.ballerinalang.util.diagnostic.Diagnostic.getKind()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4929/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.BallerinaExternalAnnotator.java", "BodyUseAPI": [], "Fixed commit": "f4911e00b27cf3f19af911de67fe5acc7819d7df", "Url": "https://api.github.com/repos/kaviththiranga/ballerina-1", "Date": "2018-02-14T10:07:49Z"},
{"Line": "275=>275", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ballerinalang.plugins.idea.util.Diagnostic.getMessage()=>org.ballerinalang.util.diagnostic.Diagnostic.getMessage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4929/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.BallerinaExternalAnnotator.java", "BodyUseAPI": [], "Fixed commit": "f4911e00b27cf3f19af911de67fe5acc7819d7df", "Url": "https://api.github.com/repos/kaviththiranga/ballerina-1", "Date": "2018-02-14T10:07:49Z"},
{"Line": "234=>234", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ballerinalang.plugins.idea.util.Diagnostic.getSource()=>org.ballerinalang.util.diagnostic.Diagnostic.getSource()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4929/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.BallerinaExternalAnnotator.java", "BodyUseAPI": [], "Fixed commit": "f4911e00b27cf3f19af911de67fe5acc7819d7df", "Url": "https://api.github.com/repos/kaviththiranga/ballerina-1", "Date": "2018-02-14T10:07:49Z"},
{"Line": "277=>277", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ballerinalang.plugins.idea.util.Diagnostic.getMessage()=>org.ballerinalang.util.diagnostic.Diagnostic.getMessage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4929/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.BallerinaExternalAnnotator.java", "BodyUseAPI": [], "Fixed commit": "f4911e00b27cf3f19af911de67fe5acc7819d7df", "Url": "https://api.github.com/repos/kaviththiranga/ballerina-1", "Date": "2018-02-14T10:07:49Z"},
{"Line": "230=>230", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ballerinalang.plugins.idea.util.Diagnostic.getSource()=>org.ballerinalang.util.diagnostic.Diagnostic.getSource()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4929/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.BallerinaExternalAnnotator.java", "BodyUseAPI": [], "Fixed commit": "f4911e00b27cf3f19af911de67fe5acc7819d7df", "Url": "https://api.github.com/repos/kaviththiranga/ballerina-1", "Date": "2018-02-14T10:07:49Z"},
{"Line": "274=>274", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ballerinalang.plugins.idea.util.Diagnostic.getKind()=>org.ballerinalang.util.diagnostic.Diagnostic.getKind()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4929/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.BallerinaExternalAnnotator.java", "BodyUseAPI": [], "Fixed commit": "f4911e00b27cf3f19af911de67fe5acc7819d7df", "Url": "https://api.github.com/repos/kaviththiranga/ballerina-1", "Date": "2018-02-14T10:07:49Z"},
{"Line": "238=>238", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.ballerinalang.plugins.idea.util.Diagnostic.getPosition()=>org.ballerinalang.util.diagnostic.Diagnostic.getPosition()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4929/buggy-version/tool-plugins.intellij.src.main.java.org.ballerinalang.plugins.idea.BallerinaExternalAnnotator.java", "BodyUseAPI": [], "Fixed commit": "f4911e00b27cf3f19af911de67fe5acc7819d7df", "Url": "https://api.github.com/repos/kaviththiranga/ballerina-1", "Date": "2018-02-14T10:07:49Z"},
{"Line": "103=>103", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new net.corda.core.transactions.TransactionBuilder(getFirstNotary()).addInputState(obligationToTransfer).addOutputState(net.corda.examples.obligation.Obligation,net.corda.examples.obligation.flows.OBLIGATION_PROGRAM_ID)=>new net.corda.core.transactions.TransactionBuilder(getFirstNotary()).addInputState(obligationToTransfer).addOutputState(net.corda.examples.obligation.Obligation,net.corda.examples.obligation.ObligationContract.OBLIGATION_CONTRACT_ID)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6977/buggy-version/java-source.src.main.java.net.corda.examples.obligation.flows.TransferObligation.java", "BodyUseAPI": [], "Fixed commit": "1d8f9facaf4fc4dc5a05288b28ad09ce1ea440b0", "Url": "https://api.github.com/repos/anthonykeenan/obligation-cordapp", "Date": "2017-12-21T12:14:31Z"},
{"Line": "87=>87", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.nio.file.Files.exists(java.nio.file.Path)=>java.io.File.exists()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2960/buggy-version/src.main.java.com.github.rovingeye.imageserver.service.ImageService.java", "BodyUseAPI": [], "Fixed commit": "07e8ede47c106df106141ef816759c9515d5fdd3", "Url": "https://api.github.com/repos/rovingeye/imageserver", "Date": "2018-05-18T20:50:49Z"},
{"Line": "43=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new org.usfirst.frc.team614.robot.commands.drivetrain.DriveForADistance(168, speed)=>new org.usfirst.frc.team614.robot.commands.drivetrain.DriveForADistance(261.47, speed)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4771/buggy-version/src.org.usfirst.frc.team614.robot.commands.autonomous.DeliverFromRight.java", "BodyUseAPI": [], "Fixed commit": "44d9fcd1fc12967c2e008980941db8ed09d0df8b", "Url": "https://api.github.com/repos/team614robotics/Team-614-PowerUp", "Date": "2018-02-15T04:57:00Z"},
{"Line": "25=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.geode.internal.protocol.protobuf.v1.authentication.Authorizor.authorize(org.apache.geode.internal.protocol.protobuf.v1.authentication.CLUSTER,org.apache.geode.internal.protocol.protobuf.v1.authentication.READ,org.apache.geode.internal.protocol.protobuf.v1.authentication.ALL,org.apache.geode.internal.protocol.protobuf.v1.authentication.ALL)=>org.apache.geode.internal.protocol.protobuf.v1.authentication.Authorizor.authorize(Resource.CLUSTER,Operation.READ,org.apache.geode.internal.protocol.protobuf.v1.authentication.ALL,org.apache.geode.internal.protocol.protobuf.v1.authentication.ALL)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/88/buggy-version/geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingLocator.java", "BodyUseAPI": [], "Fixed commit": "5ae8635d3f7e12eaf81cfdca1c2f1c9be68c8eaf", "Url": "https://api.github.com/repos/upthewaterspout/geode", "Date": "2018-03-22T21:27:33Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "de.neuwirthinformatik.Alexander.APNPucky.DocumentBuilderFactoryx.newInstance()=>javax.xml.parsers.DocumentBuilderFactory.newInstance()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5196/buggy-version/apn-pucky.src.main.java.de.neuwirthinformatik.Alexander.APNPucky.XMLParser.java", "BodyUseAPI": [], "Fixed commit": "e7fc00e8c963be5a4ec255b41ff4afc9a70d42d7", "Url": "https://api.github.com/repos/APN-Pucky/APN-Pucky", "Date": "2018-10-04T09:20:24Z"},
{"Line": "23=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.sko.service.KeyService.regist(org.sko.form.LoginForm)=>org.sko.service.KeyService.regist(org.sko.form.KeyForm)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6266/buggy-version/src.main.java.org.sko.controller.KeyController.java", "BodyUseAPI": [], "Fixed commit": "7b23a1819ec483c8fb14e1e74dfb49d567f1ca2f", "Url": "https://api.github.com/repos/saikazuonline/BitTradeSupport", "Date": "2018-05-12T13:30:51Z"},
{"Line": "55=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "emp_experiment.model.Major.copyOriginalFilesToMujavaDir(java.io.File)=>emp_experiment.model.Major.copyOriginalFilesToMajorDir(java.io.File)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7204/buggy-version/src.main.java.emp_experiment.model.Major.java", "BodyUseAPI": [], "Fixed commit": "7ae4b291f15882766381d0044d7ed893abccf737", "Url": "https://api.github.com/repos/easy-software-ufal/aum-exp", "Date": "2018-02-21T18:30:00Z"},
{"Line": "109=>110", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "android.widget.TextView.setText((list.isEmpty() ? quot[position] : list.get(position)[0]))=>android.widget.TextView.setText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5404/buggy-version/app.src.main.java.com.wordpress.mortuza99.quotes.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7ad9016ee061b74473dba991b8a7d2b8197e11d9", "Url": "https://api.github.com/repos/mortuzahossain/Quotes", "Date": "2018-07-09T09:42:19Z"},
{"Line": "1224=>1224", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "android.widget.Spinner.setSelection(int)=>android.widget.Spinner.setSelection(int,boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7558/buggy-version/ssForm.src.main.java.it.starksoftware.ssform.adapter.FormAdapter.java", "BodyUseAPI": [], "Fixed commit": "3b2e6283aa19feeb29e87397f2e554bc3ed9b509", "Url": "https://api.github.com/repos/mihirsane/SSForms", "Date": "2018-09-04T09:01:49Z"},
{"Line": "27=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.springframework.web.bind.WebDataBinder.registerCustomEditor(java.lang.Class,com.neuedu.handle.DateEditor)=>org.springframework.web.bind.WebDataBinder.registerCustomEditor(java.lang.Class,org.springframework.beans.propertyeditors.CustomDateEditor)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6704/buggy-version/src.com.neuedu.controller.BalanceController.java", "BodyUseAPI": [], "Fixed commit": "9cc5b0a24a226aa333616f3b03817fea8a5c0e6a", "Url": "https://api.github.com/repos/Cenbylin/gc_groupinfo", "Date": "2018-07-02T02:12:02Z"},
{"Line": "45=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.equals(balance.getDepartid())=>balance.getDepartid().equals(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6704/buggy-version/src.com.neuedu.service.impl.BalanceServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "9cc5b0a24a226aa333616f3b03817fea8a5c0e6a", "Url": "https://api.github.com/repos/Cenbylin/gc_groupinfo", "Date": "2018-07-02T02:12:02Z"},
{"Line": "45=>49", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.equals(balance.getDepartid())=>balance.getDepartid().equals(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6704/buggy-version/src.com.neuedu.service.impl.BalanceServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "9cc5b0a24a226aa333616f3b03817fea8a5c0e6a", "Url": "https://api.github.com/repos/Cenbylin/gc_groupinfo", "Date": "2018-07-02T02:12:02Z"},
{"Line": "73=>83", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "net.minecraft.server.MinecraftServer.getServer()=>net.minecraft.client.Minecraft.getMinecraft()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7641/buggy-version/src.main.java.com.uabart.todolist.ToDoListMod.java", "BodyUseAPI": [], "Fixed commit": "1f0436214dc8c56871370a7a79a27bb8bb0968f2", "Url": "https://api.github.com/repos/DeForce/TODOList", "Date": "2018-06-15T05:57:50Z"},
{"Line": "991=>991", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.foundations.convertor.view.SearchPanel.add(javax.swing.JLabel)=>com.foundations.convertor.view.SearchPanel.repaint()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/154/buggy-version/src.main.java.com.foundations.convertor.view.SearchPanel.java", "BodyUseAPI": [], "Fixed commit": "048afaa2606de8c9d813e4ae411fc2301f2b8ff9", "Url": "https://api.github.com/repos/AaronClaros/Prog102-Convertor", "Date": "2018-09-18T13:57:58Z"},
{"Line": "131=>131", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.sebastiandine.cardcollectionmanager.container.CardBeanContainer.getCardBeanList()=>org.sebastiandine.cardcollectionmanager.container.CardBeanContainer.getCardBeanListSortedByName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1102/buggy-version/src.org.sebastiandine.cardcollectionmanager.ui.tables.card.CardContainerTable.java", "BodyUseAPI": [], "Fixed commit": "3e64b025d947e927c70a7d714a3647a44263b7df", "Url": "https://api.github.com/repos/sebastiandine/Card-Collection-Manager", "Date": "2018-05-11T19:53:49Z"},
{"Line": "87=>87", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.sebastiandine.cardcollectionmanager.container.CardBeanContainer.getCardBeanList()=>org.sebastiandine.cardcollectionmanager.container.CardBeanContainer.getCardBeanListSortedByName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1102/buggy-version/src.org.sebastiandine.cardcollectionmanager.services.CardBeanExcelExportServices.java", "BodyUseAPI": [], "Fixed commit": "3e64b025d947e927c70a7d714a3647a44263b7df", "Url": "https://api.github.com/repos/sebastiandine/Card-Collection-Manager", "Date": "2018-05-11T19:53:49Z"},
{"Line": "105=>105", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "cn.nju.lee.walked.view.widget.UploadPhotoPopupWindow.showPopupWindow()=>cn.nju.lee.walked.view.widget.UploadPictureUtil.showPopupWindow()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1113/buggy-version/app.src.main.java.cn.nju.lee.walked.view.signup.SignUpActivity.java", "BodyUseAPI": [], "Fixed commit": "c08ea414e88f8a7eba3cfcc4fa043c7b29f63ffb", "Url": "https://api.github.com/repos/Leeski222/Walked", "Date": "2018-03-11T17:12:44Z"},
{"Line": "77=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "android.support.design.widget.FloatingActionButton.setOnClickListener(android.view.View.OnClickListener)=>android.widget.Button.setOnClickListener(android.view.View.OnClickListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1024/buggy-version/app.src.main.java.com.example.nbacademy.myapp.Activitys.MeuPercurso.java", "BodyUseAPI": [], "Fixed commit": "48bf737779dafcce8c41f25b18fd6884d6821604", "Url": "https://api.github.com/repos/SobralDaniel/academy2018", "Date": "2018-03-14T20:05:04Z"},
{"Line": "76=>35", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.nbacademy.myapp.Activitys.MeuPercurso.findViewById(R.id.fab)=>com.example.nbacademy.myapp.Activitys.MeuPercurso.findViewById(R.id.button3)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1024/buggy-version/app.src.main.java.com.example.nbacademy.myapp.Activitys.MeuPercurso.java", "BodyUseAPI": [], "Fixed commit": "48bf737779dafcce8c41f25b18fd6884d6821604", "Url": "https://api.github.com/repos/SobralDaniel/academy2018", "Date": "2018-03-14T20:05:04Z"},
{"Line": "18=>18", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.nbacademy.myapp.PaymentActivity.findViewById(R.id.doneButton)=>com.example.nbacademy.myapp.PaymentActivity.findViewById(R.id.backButton)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1024/buggy-version/app.src.main.java.com.example.nbacademy.myapp.PaymentActivity.java", "BodyUseAPI": [], "Fixed commit": "48bf737779dafcce8c41f25b18fd6884d6821604", "Url": "https://api.github.com/repos/SobralDaniel/academy2018", "Date": "2018-03-14T20:05:04Z"},
{"Line": "89=>89", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "new java.lang.StringBuilder(\"Entry{\").append(\"external_id=\").append(external_id).append(\", reschedule=\").append(reschedule).append(\", scheduledFor=\").append(scheduledFor).append(\", status=\").append(status).append(\", moipAccount={ account\").append(moipAccount).append(\", fees=\").append(fees).append(\", type=\").append(type).append(\", grossAmount=\").append(grossAmount).append(\", moipAccountId=\").append(moipAccountId).append(\", updatedAt=\").append(updatedAt).append(\", id=\").append(int)=>new java.lang.StringBuilder(\"Entry{\").append(\"external_id=\").append(external_id).append(\", reschedule=\").append(reschedule).append(\", scheduledFor=\").append(scheduledFor).append(\", status=\").append(status).append(\", moipAccount={ account\").append(moipAccount).append(\", fees=\").append(fees).append(\", type=\").append(type).append(\", grossAmount=\").append(grossAmount).append(\", moipAccountId=\").append(moipAccountId).append(\", updatedAt=\").append(updatedAt).append(\", id=\").append(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6918/buggy-version/src.main.java.br.com.moip.resource.Entry.java", "BodyUseAPI": [], "Fixed commit": "e3e4091d615d529bb2b958ed4b3a4286aeac5fd9", "Url": "https://api.github.com/repos/cavarzan/moip-sdk-java", "Date": "2018-03-14T03:32:00Z"},
{"Line": "219=>216", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "edu.srh.aupair.userProfileOperations.UserProfileOperations.toString()=>edu.srh.aupair.userProfileOperations.BuildTable.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1270/buggy-version/AuPairPlacementSystem.src.main.java.edu.srh.aupair.userProfileOperations.UserProfileOperations.java", "BodyUseAPI": [], "Fixed commit": "5d3df7e84e41b4c63922574d2677506b8c0eddf4", "Url": "https://api.github.com/repos/SRH-ACS-SDP/srh-sdp-2018-au-pair-placement-system", "Date": "2018-06-15T15:47:38Z"},
{"Line": "171=>173", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.srh.aupair.userProfileOperations.BuildTable.addRow((PERSON_TYPE == \"HOST\" ? \"AU-PAIR ID || \" : \"HOST ID ||\"),java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>edu.srh.aupair.userProfileOperations.BuildTable.addRow(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1270/buggy-version/AuPairPlacementSystem.src.main.java.edu.srh.aupair.userProfileOperations.UserProfileOperations.java", "BodyUseAPI": [], "Fixed commit": "5d3df7e84e41b4c63922574d2677506b8c0eddf4", "Url": "https://api.github.com/repos/SRH-ACS-SDP/srh-sdp-2018-au-pair-placement-system", "Date": "2018-06-15T15:47:38Z"},
{"Line": "210=>207", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.srh.aupair.userProfileOperations.BuildTable.addRow(java.lang.String,java.lang.String,(PERSON_TYPE == \"HOST\" ? hostName : auPairName),java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>edu.srh.aupair.userProfileOperations.BuildTable.addRow(java.lang.String,(PERSON_TYPE == \"HOST\" ? auPairName : hostName),java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1270/buggy-version/AuPairPlacementSystem.src.main.java.edu.srh.aupair.userProfileOperations.UserProfileOperations.java", "BodyUseAPI": [], "Fixed commit": "5d3df7e84e41b4c63922574d2677506b8c0eddf4", "Url": "https://api.github.com/repos/SRH-ACS-SDP/srh-sdp-2018-au-pair-placement-system", "Date": "2018-06-15T15:47:38Z"},
{"Line": "207=>204", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "edu.srh.aupair.userProfileOperations.BuildTable.addRow(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)=>edu.srh.aupair.userProfileOperations.BuildTable.addRow(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1270/buggy-version/AuPairPlacementSystem.src.main.java.edu.srh.aupair.userProfileOperations.UserProfileOperations.java", "BodyUseAPI": [], "Fixed commit": "5d3df7e84e41b4c63922574d2677506b8c0eddf4", "Url": "https://api.github.com/repos/SRH-ACS-SDP/srh-sdp-2018-au-pair-placement-system", "Date": "2018-06-15T15:47:38Z"},
{"Line": "59=>59", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.ekstep.ep.samza.task.ObjectDeNormalizationSink.toErrorTopic(org.ekstep.ep.samza.domain.Event)=>org.ekstep.ep.samza.task.ObjectDeNormalizationSink.toSuccessTopic(org.ekstep.ep.samza.domain.Event)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2723/buggy-version/data-pipeline.object-de-normalization.src.main.java.org.ekstep.ep.samza.service.ObjectDeNormalizationService.java", "BodyUseAPI": [], "Fixed commit": "fd3afa79fe26fdbd8f8ef042ca08e5487d8325a5", "Url": "https://api.github.com/repos/project-sunbird/sunbird-data-pipeline", "Date": "2018-08-07T15:00:59Z"},
{"Line": "21=>22", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.math.BigDecimal.toString()=>java.math.BigDecimal.toPlainString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7767/buggy-version/app.src.main.java.com.scleroid.financematic.utils.roomConverters.MoneyConverter.java", "BodyUseAPI": [], "Fixed commit": "907169c45f23e768a641d26fe5500ba97c07058d", "Url": "https://api.github.com/repos/ScleroidTech/Financematic", "Date": "2018-04-20T07:56:34Z"},
{"Line": "105=>105", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "GB.DefaultShardManagerBuilder.addEventListeners(GB.Handler.CommandHandling.commandListener,GB.listener.Message)=>GB.DefaultShardManagerBuilder.addEventListeners(GB.Handler.CommandHandling.ListenerCommand,GB.listener.Message)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2598/buggy-version/src.main.java.GB.GottBot.java", "BodyUseAPI": [], "Fixed commit": "a776da6e64127834ba6da46b59c4b602310b4df8", "Url": "https://api.github.com/repos/BigBotNetwork/GottBotReloaded", "Date": "2018-05-12T18:25:16Z"},
{"Line": "51=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "clearcontrol.core.variable.Variable.getName()=>clearcontrol.core.variable.Variable.get()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2579/buggy-version/src.clearcontrol.microscope.lightsheet.timelapse.io.ScheduleWriter.java", "BodyUseAPI": [], "Fixed commit": "05b19598062deb582da161696cc092e4ba6bc96c", "Url": "https://api.github.com/repos/ClearControl/clearcontrol-lightsheet", "Date": "2018-08-08T16:04:45Z"},
{"Line": "49=>49", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "seedu.address.model.util.Calculator.find_25th(seedu.address.model.person.UniquePersonList)=>seedu.address.model.util.Calculator.find25th(seedu.address.model.person.UniquePersonList)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7807/buggy-version/src.main.java.seedu.address.model.AddressBook.java", "BodyUseAPI": [], "Fixed commit": "6076d64a491df027833b6216e7f15f26c9d21dfc", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-4/main", "Date": "2018-10-08T16:17:56Z"},
{"Line": "51=>51", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "seedu.address.model.util.Calculator.find_75th(seedu.address.model.person.UniquePersonList)=>seedu.address.model.util.Calculator.find75th(seedu.address.model.person.UniquePersonList)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7807/buggy-version/src.main.java.seedu.address.model.AddressBook.java", "BodyUseAPI": [], "Fixed commit": "6076d64a491df027833b6216e7f15f26c9d21dfc", "Url": "https://api.github.com/repos/CS2113-AY1819S1-T13-4/main", "Date": "2018-10-08T16:17:56Z"},
{"Line": "164=>164", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.openmicroscopy.shoola.agents.fsimporter.view.FailedImportDialog.getRootPane()=>org.openmicroscopy.shoola.agents.fsimporter.view.FailedImportDialog.getContentPane()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/102/buggy-version/components.insight.SRC.org.openmicroscopy.shoola.agents.fsimporter.view.FailedImportDialog.java", "BodyUseAPI": [], "Fixed commit": "50800cc3c2cf18bd6eb51a06346bf532db4816b5", "Url": "https://api.github.com/repos/snoopycrimecop/openmicroscopy", "Date": "2018-10-05T00:01:13Z"},
{"Line": "165=>165", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.openmicroscopy.shoola.agents.fsimporter.view.FailedImportDialog.getRootPane()=>org.openmicroscopy.shoola.agents.fsimporter.view.FailedImportDialog.getContentPane()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/102/buggy-version/components.insight.SRC.org.openmicroscopy.shoola.agents.fsimporter.view.FailedImportDialog.java", "BodyUseAPI": [], "Fixed commit": "50800cc3c2cf18bd6eb51a06346bf532db4816b5", "Url": "https://api.github.com/repos/snoopycrimecop/openmicroscopy", "Date": "2018-10-05T00:01:13Z"},
{"Line": "180=>180", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.bukkit.Bukkit.getPlayer(claim.getOwner())=>instance.getServer().getOfflinePlayer(claim.getOwner())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3769/buggy-version/src.main.java.me.xofu.simplechunk.listeners.PlayerListener.java", "BodyUseAPI": [], "Fixed commit": "19f5e4173aab2f747effc48c32385780ac0cca82", "Url": "https://api.github.com/repos/Xofu/SimpleChunk", "Date": "2018-05-04T14:13:40Z"},
{"Line": "215=>215", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.bukkit.Bukkit.getPlayer(claim.getOwner())=>instance.getServer().getOfflinePlayer(claim.getOwner())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3769/buggy-version/src.main.java.me.xofu.simplechunk.listeners.PlayerListener.java", "BodyUseAPI": [], "Fixed commit": "19f5e4173aab2f747effc48c32385780ac0cca82", "Url": "https://api.github.com/repos/Xofu/SimpleChunk", "Date": "2018-05-04T14:13:40Z"},
{"Line": "218=>218", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.bukkit.Bukkit.getPlayer(claim.getOwner())=>instance.getServer().getOfflinePlayer(claim.getOwner())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3769/buggy-version/src.main.java.me.xofu.simplechunk.listeners.PlayerListener.java", "BodyUseAPI": [], "Fixed commit": "19f5e4173aab2f747effc48c32385780ac0cca82", "Url": "https://api.github.com/repos/Xofu/SimpleChunk", "Date": "2018-05-04T14:13:40Z"},
{"Line": "190=>190", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.bukkit.Bukkit.getPlayer(claim.getOwner())=>instance.getServer().getOfflinePlayer(claim.getOwner())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3769/buggy-version/src.main.java.me.xofu.simplechunk.listeners.PlayerListener.java", "BodyUseAPI": [], "Fixed commit": "19f5e4173aab2f747effc48c32385780ac0cca82", "Url": "https://api.github.com/repos/Xofu/SimpleChunk", "Date": "2018-05-04T14:13:40Z"},
{"Line": "177=>177", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.bukkit.Bukkit.getPlayer(claim.getOwner())=>instance.getServer().getOfflinePlayer(claim.getOwner())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3769/buggy-version/src.main.java.me.xofu.simplechunk.listeners.PlayerListener.java", "BodyUseAPI": [], "Fixed commit": "19f5e4173aab2f747effc48c32385780ac0cca82", "Url": "https://api.github.com/repos/Xofu/SimpleChunk", "Date": "2018-05-04T14:13:40Z"},
{"Line": "187=>187", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.bukkit.Bukkit.getPlayer(claim.getOwner())=>instance.getServer().getOfflinePlayer(claim.getOwner())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3769/buggy-version/src.main.java.me.xofu.simplechunk.listeners.PlayerListener.java", "BodyUseAPI": [], "Fixed commit": "19f5e4173aab2f747effc48c32385780ac0cca82", "Url": "https://api.github.com/repos/Xofu/SimpleChunk", "Date": "2018-05-04T14:13:40Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.github.pocketkid2.survivalgames.Game.leave(org.bukkit.entity.Player,boolean,<nulltype>)=>com.github.pocketkid2.survivalgames.Game.leave(org.bukkit.entity.Player,boolean,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7313/buggy-version/src.main.java.com.github.pocketkid2.survivalgames.commands.LeaveCommand.java", "BodyUseAPI": [], "Fixed commit": "873fa1fd92eae37607e353ae6a1de078cb10000a", "Url": "https://api.github.com/repos/PoqetteCraft/survivalgames", "Date": "2018-07-15T22:57:18Z"},
{"Line": "178=>179", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.github.pocketkid2.survivalgames.Game.leave(org.bukkit.entity.Player,boolean,<nulltype>)=>com.github.pocketkid2.survivalgames.Game.leave(org.bukkit.entity.Player,boolean,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7313/buggy-version/src.main.java.com.github.pocketkid2.survivalgames.Game.java", "BodyUseAPI": [], "Fixed commit": "873fa1fd92eae37607e353ae6a1de078cb10000a", "Url": "https://api.github.com/repos/PoqetteCraft/survivalgames", "Date": "2018-07-15T22:57:18Z"},
{"Line": "134=>126", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.android.quizapp.MainActivity.findViewById(R.id.q10_choice2)=>com.example.android.quizapp.MainActivity.findViewById(R.id.q10_choice4)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6979/buggy-version/app.src.main.java.com.example.android.quizapp.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "d131aa6abbc08affd5e48b89242d6c62576c9197", "Url": "https://api.github.com/repos/minervam/CulinaryQuizApp", "Date": "2018-05-14T00:16:07Z"},
{"Line": "35=>36", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "uk.gov.hmcts.reform.rpa.incourtpres.services.ParticipantsStatusService.updateStatus(java.lang.String,java.lang.String,SubscriptionStatus.CONNECTED)=>java.util.Optional<java.lang.String>.ifPresent(java.util.function.Consumer<? super java.lang.String>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3874/buggy-version/src.main.java.uk.gov.hmcts.reform.rpa.incourtpres.config.StompConnectedEvent.java", "BodyUseAPI": [], "Fixed commit": "3b4963f69884cc6f1f43c2f8f8b5a58d2159449c", "Url": "https://api.github.com/repos/hmcts/rpa-in-court-presentation-api", "Date": "2018-05-15T11:27:34Z"},
{"Line": "42=>46", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "simpConnectMessage.getNativeHeader(\"sessionId\").get(int)=>java.util.Optional.ofNullable(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3874/buggy-version/src.main.java.uk.gov.hmcts.reform.rpa.incourtpres.config.StompConnectedEvent.java", "BodyUseAPI": [], "Fixed commit": "3b4963f69884cc6f1f43c2f8f8b5a58d2159449c", "Url": "https://api.github.com/repos/hmcts/rpa-in-court-presentation-api", "Date": "2018-05-15T11:27:34Z"},
{"Line": "344=>347", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.googlecode.npackdweb.wlib.HTMLWriter.e(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,category0Values.get(0).getLabel(),java.lang.String,java.lang.String)=>com.googlecode.npackdweb.wlib.HTMLWriter.e(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/608/buggy-version/src.main.java.com.googlecode.npackdweb.package_.PackagesPage.java", "BodyUseAPI": [], "Fixed commit": "f25764c9ee9a21188951bc94291754fd27879503", "Url": "https://api.github.com/repos/tim-lebedkov/npackd-gae-web", "Date": "2018-07-17T18:07:03Z"},
{"Line": "345=>347", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<com.google.appengine.api.search.FacetResultValue>.get(int)=>com.googlecode.npackdweb.wlib.HTMLWriter.e(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/608/buggy-version/src.main.java.com.googlecode.npackdweb.package_.PackagesPage.java", "BodyUseAPI": [], "Fixed commit": "f25764c9ee9a21188951bc94291754fd27879503", "Url": "https://api.github.com/repos/tim-lebedkov/npackd-gae-web", "Date": "2018-07-17T18:07:03Z"},
{"Line": "348=>351", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.googlecode.npackdweb.wlib.HTMLWriter.t(category0Values.get(0).getLabel())=>com.googlecode.npackdweb.wlib.HTMLWriter.t(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/608/buggy-version/src.main.java.com.googlecode.npackdweb.package_.PackagesPage.java", "BodyUseAPI": [], "Fixed commit": "f25764c9ee9a21188951bc94291754fd27879503", "Url": "https://api.github.com/repos/tim-lebedkov/npackd-gae-web", "Date": "2018-07-17T18:07:03Z"},
{"Line": "64=>64", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.web3j.protocol.Web3j.ethGetBalance(java.lang.String,DefaultBlockParameterName.EARLIEST)=>org.web3j.protocol.Web3j.ethGetBalance(java.lang.String,DefaultBlockParameterName.LATEST)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6926/buggy-version/app.src.main.java.org.nervos.neuron.service.EthRpcService.java", "BodyUseAPI": [], "Fixed commit": "41233b9cad2ab82c84b0789dad583eeeac142769", "Url": "https://api.github.com/repos/cryptape/neuron-android", "Date": "2018-08-03T11:10:45Z"},
{"Line": "43=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.net.URL.toURI()=>java.net.URL.getPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7071/buggy-version/src.main.java.com.infinityrefactoring.util.io.Resources.java", "BodyUseAPI": [], "Fixed commit": "c0599522ff5f7596720a89002e9f9c2442f0b6d5", "Url": "https://api.github.com/repos/InfinityRefactoring/infinity-utils", "Date": "2018-09-15T23:24:06Z"},
{"Line": "37=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.split(app.core.COMMA_SPACE_SEPARATOR)=>java.lang.String.split(app.core.SPACE_SEPARATOR)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7602/buggy-version/src.app.core.EmployeesApp.java", "BodyUseAPI": [], "Fixed commit": "e2f6f26ff68829827fa500265aa3a19274e9d577", "Url": "https://api.github.com/repos/GeorgeK95/georgi-kopchev-employees", "Date": "2018-07-24T18:06:34Z"},
{"Line": "212=>212", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.io.PrintStream.println((\"col1: \" + (ex.getHoldings())))=>java.lang.Class.getCanonicalName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3632/buggy-version/web.src.main.java.za.co.global.controllers.uplaod.FileUploadController.java", "BodyUseAPI": [], "Fixed commit": "587c17fbba3f3e190c78305cabbb351af4a11213", "Url": "https://api.github.com/repos/pradeepgirsa/GIRSA", "Date": "2018-09-07T08:55:24Z"},
{"Line": "212=>212", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "za.co.global.domain.upload.DSU5_GIRREP4.getHoldings()=>java.lang.Class.getCanonicalName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3632/buggy-version/web.src.main.java.za.co.global.controllers.uplaod.FileUploadController.java", "BodyUseAPI": [], "Fixed commit": "587c17fbba3f3e190c78305cabbb351af4a11213", "Url": "https://api.github.com/repos/pradeepgirsa/GIRSA", "Date": "2018-09-07T08:55:24Z"},
{"Line": "34=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "UsernameSearch.printToneScores()=>GeoSearch.printToneScores()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8295/buggy-version/TwitterExample.src.TwitterClass.java", "BodyUseAPI": [], "Fixed commit": "34ea377d36351cbdc5d5f7f15b6b77d531df331f", "Url": "https://api.github.com/repos/kylej13/TwitterSentimentAnalysis", "Date": "2018-03-26T12:50:03Z"},
{"Line": "33=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "new UsernameSearch(\"BarackObama\")=>new GeoSearch(35.7796, (-78.6382))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8295/buggy-version/TwitterExample.src.TwitterClass.java", "BodyUseAPI": [], "Fixed commit": "34ea377d36351cbdc5d5f7f15b6b77d531df331f", "Url": "https://api.github.com/repos/kylej13/TwitterSentimentAnalysis", "Date": "2018-03-26T12:50:03Z"},
{"Line": "21=>21", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "de.exceptionflug.protocolize.items.adapter.InventoryManager.getInventory(event.getPlayer().getUniqueId(),event.getServerInfo().getName())=>de.exceptionflug.protocolize.items.adapter.InventoryManager.getCombinedSendInventory(event.getPlayer().getUniqueId(),event.getServerInfo().getName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2790/buggy-version/protocolize-items.src.main.java.de.exceptionflug.protocolize.items.adapter.SetSlotItemsAdapter.java", "BodyUseAPI": [], "Fixed commit": "2a0890ab3b13360132f2ed19148b5e410c3b1714", "Url": "https://api.github.com/repos/Exceptionflug/protocolize", "Date": "2018-10-24T18:54:37Z"},
{"Line": "3533=>3548", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.eclipse.ceylon.model.typechecker.model.Type.getQualifyingType()=>org.eclipse.ceylon.model.typechecker.model.Type.isUnion()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5385/buggy-version/model.src.org.eclipse.ceylon.model.typechecker.model.Type.java", "BodyUseAPI": [], "Fixed commit": "6b863a4c8036ce0e9c7375605e520566dd8d15af", "Url": "https://api.github.com/repos/dlkw/ceylon", "Date": "2018-09-26T21:42:37Z"},
{"Line": "150=>150", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "com.bumptech.glide.request.RequestOptions.placeholder(R.drawable.big_loadpic_full_listpage)=>new com.bumptech.glide.request.RequestOptions().centerCrop().placeholder(R.drawable.big_loadpic_full_listpage)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5903/buggy-version/app.src.main.java.toutiao.fake.com.faketoutiao.ui.adpater.MicroAdapter.java", "BodyUseAPI": [], "Fixed commit": "664545f25057580f9c34bc80c08c41053122d435", "Url": "https://api.github.com/repos/top2015/FakeTouTiao", "Date": "2018-07-03T03:13:36Z"},
{"Line": "77=>77", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.jfoenix.controls.JFXButton.setDisable(boolean)=>com.jfoenix.controls.JFXButton.setVisible(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5950/buggy-version/src.gui.HomeScreen.java", "BodyUseAPI": [], "Fixed commit": "805dd21d3344e8903198098792ab3c9e6474c09c", "Url": "https://api.github.com/repos/JakobLierman/AllyDesktop", "Date": "2018-09-10T20:16:41Z"},
{"Line": "75=>75", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.jfoenix.controls.JFXButton.setDisable(boolean)=>com.jfoenix.controls.JFXButton.setVisible(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5950/buggy-version/src.gui.HomeScreen.java", "BodyUseAPI": [], "Fixed commit": "805dd21d3344e8903198098792ab3c9e6474c09c", "Url": "https://api.github.com/repos/JakobLierman/AllyDesktop", "Date": "2018-09-10T20:16:41Z"},
{"Line": "76=>76", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.jfoenix.controls.JFXButton.setDisable(boolean)=>com.jfoenix.controls.JFXButton.setVisible(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5950/buggy-version/src.gui.HomeScreen.java", "BodyUseAPI": [], "Fixed commit": "805dd21d3344e8903198098792ab3c9e6474c09c", "Url": "https://api.github.com/repos/JakobLierman/AllyDesktop", "Date": "2018-09-10T20:16:41Z"},
{"Line": "132=>132", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "net.caseif.jnes.emulation.cpu.CpuRegisters.getX()=>net.caseif.jnes.emulation.cpu.CpuRegisters.getY()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4966/buggy-version/src.main.java.net.caseif.jnes.emulation.cpu.CpuInterpreter.java", "BodyUseAPI": [], "Fixed commit": "1c06c667781ce84a24b89ee889ed933c1c0181eb", "Url": "https://api.github.com/repos/caseif/jNES", "Date": "2018-08-20T15:42:30Z"},
{"Line": "455=>467", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "cn.hutool.core.util.ImageUtil.convert(java.awt.image.BufferedImage,java.lang.String,javax.imageio.stream.ImageOutputStream)=>cn.hutool.core.util.ImageUtil.convert(java.awt.image.BufferedImage,java.lang.String,javax.imageio.stream.ImageOutputStream,cn.hutool.core.util.StrUtil.equalsIgnoreCase(cn.hutool.core.util.ImageUtil.IMAGE_TYPE_PNG, srcExtName))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4232/buggy-version/hutool-core.src.main.java.cn.hutool.core.util.ImageUtil.java", "BodyUseAPI": [], "Fixed commit": "d5812f3ac5a502c2a9750a48c8b3ef156a64df46", "Url": "https://api.github.com/repos/xkcoding/hutool", "Date": "2018-09-17T01:47:39Z"},
{"Line": "1615=>1619", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Collection<org.apache.ignite.cluster.BaselineNode>.toString()=>java.lang.StringBuilder.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4121/buggy-version/modules.core.src.main.java.org.apache.ignite.internal.managers.discovery.GridDiscoveryManager.java", "BodyUseAPI": [], "Fixed commit": "62446ebd41f8510c489c7bf0c834cb119a89f0ae", "Url": "https://api.github.com/repos/alex-plekhanov/ignite", "Date": "2018-04-18T14:31:47Z"},
{"Line": "156=>152", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.knowm.xchange.bitstamp.service.BitstampAccountService.getBitstampUserTransactions(java.lang.Long,org.knowm.xchange.currency.CurrencyPair,java.lang.Long,(sort == null ? null : sort.toString()))=>org.knowm.xchange.bitstamp.service.BitstampAccountService.getBitstampUserTransactions(java.lang.Long,java.lang.Long,(sort == null ? null : sort.toString()))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1998/buggy-version/xchange-bitstamp.src.main.java.org.knowm.xchange.bitstamp.service.BitstampAccountService.java", "BodyUseAPI": [], "Fixed commit": "c82c89e47a8b036fdfaf73b261a3fe2785816a6a", "Url": "https://api.github.com/repos/donald-jackson/XChange", "Date": "2018-07-12T06:52:09Z"},
{"Line": "55=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.simple.server.utils.ResettableStreamHttpServletRequest.getReader()=>com.simple.server.utils.ResettableStreamHttpServletRequest.getInputStream()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1290/buggy-version/src.main.java.com.simple.server.utils.RequestLogFilter.java", "BodyUseAPI": [], "Fixed commit": "3546e617da9a41d6d027c73a38e62ff7970b4e60", "Url": "https://api.github.com/repos/aivanovski/simple-server-skeleton", "Date": "2018-09-14T08:58:54Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "javax.servlet.http.HttpServletRequest.getReader()=>javax.servlet.http.HttpServletRequest.getInputStream()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1290/buggy-version/src.main.java.com.simple.server.utils.ResettableStreamHttpServletRequest.java", "BodyUseAPI": [], "Fixed commit": "3546e617da9a41d6d027c73a38e62ff7970b4e60", "Url": "https://api.github.com/repos/aivanovski/simple-server-skeleton", "Date": "2018-09-14T08:58:54Z"},
{"Line": "93=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.support.v7.app.ActionBar.setHomeButtonEnabled(boolean)=>android.support.v7.app.ActionBar.hide()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/489/buggy-version/app.src.main.java.com.scavi.de.gw2imp.ui.activity.ApiAccountKeyActivity.java", "BodyUseAPI": [], "Fixed commit": "8360a553ffc07aaf55f672ffe6b8b0d7a9f9aa40", "Url": "https://api.github.com/repos/Scavi/Gw2Imp", "Date": "2018-07-01T14:44:09Z"},
{"Line": "48=>48", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "linus.com.auth.Fragments.TourFragment.getString(R2.string.tour_hint_message_third)=>linus.com.auth.Fragments.TourFragment.getString(R.string.tour_hint_message_third)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8124/buggy-version/auth.src.main.java.linus.com.auth.Fragments.TourFragment.java", "BodyUseAPI": [], "Fixed commit": "c349e2b4ac7ee29d2e94f74b02df0fa7cc450e5c", "Url": "https://api.github.com/repos/Linus-DuJun/MaterialDesign", "Date": "2018-01-05T10:34:11Z"},
{"Line": "40=>40", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "linus.com.auth.Fragments.TourFragment.getString(R2.string.tour_hint_message_first)=>linus.com.auth.Fragments.TourFragment.getString(R.string.tour_hint_message_first)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8124/buggy-version/auth.src.main.java.linus.com.auth.Fragments.TourFragment.java", "BodyUseAPI": [], "Fixed commit": "c349e2b4ac7ee29d2e94f74b02df0fa7cc450e5c", "Url": "https://api.github.com/repos/Linus-DuJun/MaterialDesign", "Date": "2018-01-05T10:34:11Z"},
{"Line": "39=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getResources().getDrawable(R2.drawable.bg_container_first)=>getResources().getDrawable(R.drawable.bg_container_first)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8124/buggy-version/auth.src.main.java.linus.com.auth.Fragments.TourFragment.java", "BodyUseAPI": [], "Fixed commit": "c349e2b4ac7ee29d2e94f74b02df0fa7cc450e5c", "Url": "https://api.github.com/repos/Linus-DuJun/MaterialDesign", "Date": "2018-01-05T10:34:11Z"},
{"Line": "43=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getResources().getDrawable(R2.drawable.bg_container_second)=>getResources().getDrawable(R.drawable.bg_container_second)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8124/buggy-version/auth.src.main.java.linus.com.auth.Fragments.TourFragment.java", "BodyUseAPI": [], "Fixed commit": "c349e2b4ac7ee29d2e94f74b02df0fa7cc450e5c", "Url": "https://api.github.com/repos/Linus-DuJun/MaterialDesign", "Date": "2018-01-05T10:34:11Z"},
{"Line": "47=>47", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "getResources().getDrawable(R2.drawable.bg_container_third)=>getResources().getDrawable(R.drawable.bg_container_third)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8124/buggy-version/auth.src.main.java.linus.com.auth.Fragments.TourFragment.java", "BodyUseAPI": [], "Fixed commit": "c349e2b4ac7ee29d2e94f74b02df0fa7cc450e5c", "Url": "https://api.github.com/repos/Linus-DuJun/MaterialDesign", "Date": "2018-01-05T10:34:11Z"},
{"Line": "44=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "linus.com.auth.Fragments.TourFragment.getString(R2.string.tour_hint_message_second)=>linus.com.auth.Fragments.TourFragment.getString(R.string.tour_hint_message_second)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8124/buggy-version/auth.src.main.java.linus.com.auth.Fragments.TourFragment.java", "BodyUseAPI": [], "Fixed commit": "c349e2b4ac7ee29d2e94f74b02df0fa7cc450e5c", "Url": "https://api.github.com/repos/Linus-DuJun/MaterialDesign", "Date": "2018-01-05T10:34:11Z"},
{"Line": "319=>322", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.jgrapht.Graph<V, E>.addEdge(V,V,E)=>org.jgrapht.Graph<V, E>.addEdge(V,V)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7885/buggy-version/jgrapht-core.src.main.java.org.jgrapht.graph.interval.IntervalGraphMapping.java", "BodyUseAPI": [], "Fixed commit": "65a2281e6a522b228f732169c25575fe54980214", "Url": "https://api.github.com/repos/AbdallahAt/jgrapht", "Date": "2018-06-06T19:15:12Z"},
{"Line": "210=>210", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.List<io.micronaut.http.uri.UriTemplate.PathSegment>.size()=>java.util.List<io.micronaut.http.uri.UriTemplate.PathSegment>.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6563/buggy-version/http.src.main.java.io.micronaut.http.uri.UriTemplate.java", "BodyUseAPI": [], "Fixed commit": "637c1bd22371f436333623ca1b99ebdebb1e65e6", "Url": "https://api.github.com/repos/micronaut-projects/micronaut-core", "Date": "2018-07-27T12:32:29Z"},
{"Line": "211=>211", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.List<io.micronaut.http.uri.UriTemplate.PathSegment>.size()=>java.util.List<io.micronaut.http.uri.UriTemplate.PathSegment>.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6563/buggy-version/http.src.main.java.io.micronaut.http.uri.UriTemplate.java", "BodyUseAPI": [], "Fixed commit": "637c1bd22371f436333623ca1b99ebdebb1e65e6", "Url": "https://api.github.com/repos/micronaut-projects/micronaut-core", "Date": "2018-07-27T12:32:29Z"},
{"Line": "248=>248", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.wso2.ballerinalang.compiler.packaging.Patten.convert(org.wso2.ballerinalang.compiler.packaging.converters.Converter<java.net.URI>)=>org.wso2.ballerinalang.compiler.packaging.Patten.convert(org.wso2.ballerinalang.compiler.packaging.converters.Converter<java.net.URI>,org.ballerinalang.model.elements.PackageID)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5537/buggy-version/cli.ballerina-packerina.src.main.java.org.ballerinalang.packerina.PushUtils.java", "BodyUseAPI": [], "Fixed commit": "e2f4912f35e5026e40ddc145b61a43d11516a1c5", "Url": "https://api.github.com/repos/NatashaWso2/ballerina", "Date": "2018-06-05T04:15:24Z"},
{"Line": "68=>68", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.nextcloud.talk.webrtc.WebSocketConnectionHelper.getExternalSignalingInstanceForServer(externalSignalingServer.getExternalSignalingServer(),boolean,com.nextcloud.talk.models.database.UserEntity,externalSignalingServer.getExternalSignalingTicket())=>com.nextcloud.talk.webrtc.WebSocketConnectionHelper.getExternalSignalingInstanceForServer(externalSignalingServer.getExternalSignalingServer(),com.nextcloud.talk.models.database.UserEntity,externalSignalingServer.getExternalSignalingTicket())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/322/buggy-version/app.src.main.java.com.nextcloud.talk.jobs.WebsocketConnectionsWorker.java", "BodyUseAPI": [], "Fixed commit": "91d0d829e0f6d967fffb1d1fb7cc5b27a544c060", "Url": "https://api.github.com/repos/nextcloud/talk-android", "Date": "2018-10-24T22:28:48Z"},
{"Line": "274=>274", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.google.appinventor.components.runtime.EventDispatcher.dispatchEvent(edu.polyu.appinventor.positioning.Positioning,java.lang.String,edu.polyu.appinventor.positioning.Location)=>com.google.appinventor.components.runtime.EventDispatcher.dispatchEvent(edu.polyu.appinventor.positioning.Positioning,java.lang.String,double,double)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2314/buggy-version/appinventor.components.src.edu.polyu.appinventor.positioning.Positioning.java", "BodyUseAPI": [], "Fixed commit": "cc2ae63a7550f8043f0f0aca81ed96d137affa64", "Url": "https://api.github.com/repos/Wency16098574d/appinventor-extensions", "Date": "2018-07-05T14:25:11Z"},
{"Line": "245=>246", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.json.JSONObject.getString(java.lang.String)=>org.json.JSONObject.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/571/buggy-version/src.main.java.com.netcore.hsmart.dlrconsumers.dlrpullservice.DlrPullConsumer566.java", "BodyUseAPI": [], "Fixed commit": "043e03c827a717bbd7088a34541cd4edb2402773", "Url": "https://api.github.com/repos/vibhorsingh-netcore/HSMART_SERVERS", "Date": "2018-01-10T14:33:02Z"},
{"Line": "245=>246", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.json.JSONObject.getString(java.lang.String)=>org.json.JSONObject.get(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/571/buggy-version/src.main.java.com.netcore.hsmart.dlrconsumers.dlrpullservice.DlrPullConsumer566.java", "BodyUseAPI": [], "Fixed commit": "043e03c827a717bbd7088a34541cd4edb2402773", "Url": "https://api.github.com/repos/vibhorsingh-netcore/HSMART_SERVERS", "Date": "2018-01-10T14:33:02Z"},
{"Line": "31=>30", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javafx.scene.layout.FlowPane.setAlignment(Pos.CENTER)=>javafx.scene.layout.VBox.setAlignment(Pos.CENTER)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7737/buggy-version/UIBuilding.src.LockScreen.java", "BodyUseAPI": [], "Fixed commit": "7df746d388aaf9e993320963bd5434d3024bc616", "Url": "https://api.github.com/repos/ShadowXCC/UIBuilding", "Date": "2018-10-15T17:41:49Z"},
{"Line": "30=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javafx.scene.layout.HBox.getChildren()=>javafx.scene.layout.VBox.getChildren()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7737/buggy-version/UIBuilding.src.LockScreen.java", "BodyUseAPI": [], "Fixed commit": "7df746d388aaf9e993320963bd5434d3024bc616", "Url": "https://api.github.com/repos/ShadowXCC/UIBuilding", "Date": "2018-10-15T17:41:49Z"},
{"Line": "35=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "javafx.scene.layout.BorderPane.setCenter(javafx.scene.layout.FlowPane)=>javafx.scene.layout.BorderPane.setCenter(javafx.scene.layout.VBox)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7737/buggy-version/UIBuilding.src.LockScreen.java", "BodyUseAPI": [], "Fixed commit": "7df746d388aaf9e993320963bd5434d3024bc616", "Url": "https://api.github.com/repos/ShadowXCC/UIBuilding", "Date": "2018-10-15T17:41:49Z"},
{"Line": "30=>29", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javafx.scene.layout.HBox.getChildren()=>javafx.scene.layout.VBox.getChildren()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7737/buggy-version/UIBuilding.src.LockScreen.java", "BodyUseAPI": [], "Fixed commit": "7df746d388aaf9e993320963bd5434d3024bc616", "Url": "https://api.github.com/repos/ShadowXCC/UIBuilding", "Date": "2018-10-15T17:41:49Z"},
{"Line": "341=>340", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.megster.cordova.ble.central.BLECentralPlugin.findLowEnergyDevices(org.apache.cordova.CallbackContext,java.util.UUID[],int)=>com.megster.cordova.ble.central.BLECentralPlugin.findLowEnergyDevicesNewWay(org.apache.cordova.CallbackContext,java.util.ArrayList<android.bluetooth.le.ScanFilter>,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7067/buggy-version/src.android.BLECentralPlugin.java", "BodyUseAPI": [], "Fixed commit": "8f39f9f061ca5962f0460fadbe88a4188b7fb928", "Url": "https://api.github.com/repos/lulumahot/cordova-plugin-ble-central", "Date": "2018-05-22T13:30:15Z"},
{"Line": "341=>340", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "com.megster.cordova.ble.central.BLECentralPlugin.findLowEnergyDevices(org.apache.cordova.CallbackContext,java.util.UUID[],int)=>com.megster.cordova.ble.central.BLECentralPlugin.findLowEnergyDevicesNewWay(org.apache.cordova.CallbackContext,java.util.ArrayList<android.bluetooth.le.ScanFilter>,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7067/buggy-version/src.android.BLECentralPlugin.java", "BodyUseAPI": [], "Fixed commit": "8f39f9f061ca5962f0460fadbe88a4188b7fb928", "Url": "https://api.github.com/repos/lulumahot/cordova-plugin-ble-central", "Date": "2018-05-22T13:30:15Z"},
{"Line": "89=>91", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.aws.bq.zip.init.S3Utils.getObject(contract.getS3Bucket(),contract.getS3Key())=>com.aws.bq.common.util.S3Utils.getObject(contract.getS3Bucket(),contract.getS3Key())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5023/buggy-version/aws-contract-ecs-zip.src.main.java.com.aws.bq.zip.init.AppStartupRunner.java", "BodyUseAPI": [], "Fixed commit": "35cf630b924cfcfe80a8411b4bbf535a534408d5", "Url": "https://api.github.com/repos/nikosheng/aws-bq", "Date": "2018-08-15T03:37:48Z"},
{"Line": "105=>107", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.aws.bq.zip.init.SNSUtils.sendMessage(java.lang.String,java.lang.String)=>com.aws.bq.common.util.SNSUtils.sendMessage(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5023/buggy-version/aws-contract-ecs-zip.src.main.java.com.aws.bq.zip.init.AppStartupRunner.java", "BodyUseAPI": [], "Fixed commit": "35cf630b924cfcfe80a8411b4bbf535a534408d5", "Url": "https://api.github.com/repos/nikosheng/aws-bq", "Date": "2018-08-15T03:37:48Z"},
{"Line": "112=>114", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.aws.bq.zip.init.ECSUtils.stopAllTask(java.lang.String,java.lang.String)=>com.aws.bq.common.util.ECSUtils.stopAllTask(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5023/buggy-version/aws-contract-ecs-zip.src.main.java.com.aws.bq.zip.init.AppStartupRunner.java", "BodyUseAPI": [], "Fixed commit": "35cf630b924cfcfe80a8411b4bbf535a534408d5", "Url": "https://api.github.com/repos/nikosheng/aws-bq", "Date": "2018-08-15T03:37:48Z"},
{"Line": "91=>93", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.aws.bq.zip.init.S3Utils.convertFromS3Object(com.amazonaws.services.s3.model.S3Object,vo.getFileName())=>com.aws.bq.common.util.S3Utils.convertFromS3Object(com.amazonaws.services.s3.model.S3Object,vo.getFileName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5023/buggy-version/aws-contract-ecs-zip.src.main.java.com.aws.bq.zip.init.AppStartupRunner.java", "BodyUseAPI": [], "Fixed commit": "35cf630b924cfcfe80a8411b4bbf535a534408d5", "Url": "https://api.github.com/repos/nikosheng/aws-bq", "Date": "2018-08-15T03:37:48Z"},
{"Line": "90=>92", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.aws.bq.zip.init.S3Utils.getFileFromS3Object(com.amazonaws.services.s3.model.S3Object)=>com.aws.bq.common.util.S3Utils.getFileFromS3Object(com.amazonaws.services.s3.model.S3Object)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5023/buggy-version/aws-contract-ecs-zip.src.main.java.com.aws.bq.zip.init.AppStartupRunner.java", "BodyUseAPI": [], "Fixed commit": "35cf630b924cfcfe80a8411b4bbf535a534408d5", "Url": "https://api.github.com/repos/nikosheng/aws-bq", "Date": "2018-08-15T03:37:48Z"},
{"Line": "97=>99", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.aws.bq.zip.init.Utils.zipFiles(java.util.List<java.io.File>,java.lang.String)=>com.aws.bq.common.util.Utils.zipFiles(java.util.List<java.io.File>,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5023/buggy-version/aws-contract-ecs-zip.src.main.java.com.aws.bq.zip.init.AppStartupRunner.java", "BodyUseAPI": [], "Fixed commit": "35cf630b924cfcfe80a8411b4bbf535a534408d5", "Url": "https://api.github.com/repos/nikosheng/aws-bq", "Date": "2018-08-15T03:37:48Z"},
{"Line": "100=>102", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.aws.bq.zip.init.S3Utils.putObject(java.lang.String,java.lang.String,java.lang.String)=>com.aws.bq.common.util.S3Utils.putObject(java.lang.String,java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5023/buggy-version/aws-contract-ecs-zip.src.main.java.com.aws.bq.zip.init.AppStartupRunner.java", "BodyUseAPI": [], "Fixed commit": "35cf630b924cfcfe80a8411b4bbf535a534408d5", "Url": "https://api.github.com/repos/nikosheng/aws-bq", "Date": "2018-08-15T03:37:48Z"},
{"Line": "101=>103", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.aws.bq.zip.init.S3Utils.getUrl(java.lang.String,java.lang.String)=>com.aws.bq.common.util.S3Utils.getUrl(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5023/buggy-version/aws-contract-ecs-zip.src.main.java.com.aws.bq.zip.init.AppStartupRunner.java", "BodyUseAPI": [], "Fixed commit": "35cf630b924cfcfe80a8411b4bbf535a534408d5", "Url": "https://api.github.com/repos/nikosheng/aws-bq", "Date": "2018-08-15T03:37:48Z"},
{"Line": "97=>99", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.aws.bq.zip.init.Utils.zipFiles(java.util.List<java.io.File>,java.lang.String)=>com.aws.bq.common.util.Utils.zipFiles(java.util.List<java.io.File>,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5023/buggy-version/aws-contract-ecs-zip.src.main.java.com.aws.bq.zip.init.AppStartupRunner.java", "BodyUseAPI": [], "Fixed commit": "35cf630b924cfcfe80a8411b4bbf535a534408d5", "Url": "https://api.github.com/repos/nikosheng/aws-bq", "Date": "2018-08-15T03:37:48Z"},
{"Line": "66=>66", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.logic.parser.ArgumentMultimap.getValue(seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC)=>seedu.address.logic.parser.ArgumentMultimap.getValue(seedu.address.logic.parser.CliSyntax.PREFIX_NRIC)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1631/buggy-version/src.main.java.seedu.address.logic.parser.EditCommandParser.java", "BodyUseAPI": [], "Fixed commit": "4d46a83bc7b8199e5c690343c6d297294c203206", "Url": "https://api.github.com/repos/CS2103-AY1819S1-W16-3/main", "Date": "2018-10-22T05:32:42Z"},
{"Line": "69=>69", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "seedu.address.logic.parser.ArgumentMultimap.getValue(seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC)=>seedu.address.logic.parser.ArgumentMultimap.getValue(seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1631/buggy-version/src.main.java.seedu.address.logic.parser.EditCommandParser.java", "BodyUseAPI": [], "Fixed commit": "4d46a83bc7b8199e5c690343c6d297294c203206", "Url": "https://api.github.com/repos/CS2103-AY1819S1-W16-3/main", "Date": "2018-10-22T05:32:42Z"},
{"Line": "558=>558", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.pulsar.functions.runtime.V1Container.setEnv(java.util.List)=>org.apache.pulsar.functions.runtime.V1Container.setEnv(java.util.List<org.apache.pulsar.functions.runtime.V1EnvVar>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5676/buggy-version/pulsar-functions.runtime.src.main.java.org.apache.pulsar.functions.runtime.KubernetesRuntime.java", "BodyUseAPI": [], "Fixed commit": "a5fd4af6ac59f14da083f2456224089469d89539", "Url": "https://api.github.com/repos/srkukarni/incubator-pulsar", "Date": "2018-10-23T22:09:21Z"},
{"Line": "550=>550", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.util.Map.Entry<java.lang.String, java.lang.String>.getValue()=>java.util.Map.Entry<java.lang.String, java.lang.String>.getKey()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5676/buggy-version/pulsar-functions.runtime.src.main.java.org.apache.pulsar.functions.runtime.KubernetesRuntime.java", "BodyUseAPI": [], "Fixed commit": "a5fd4af6ac59f14da083f2456224089469d89539", "Url": "https://api.github.com/repos/srkukarni/incubator-pulsar", "Date": "2018-10-23T22:09:21Z"},
{"Line": "558=>558", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.Arrays.asList(org.apache.pulsar.functions.runtime.V1EnvVar)=>org.apache.pulsar.functions.runtime.V1Container.setEnv(java.util.List<org.apache.pulsar.functions.runtime.V1EnvVar>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5676/buggy-version/pulsar-functions.runtime.src.main.java.org.apache.pulsar.functions.runtime.KubernetesRuntime.java", "BodyUseAPI": [], "Fixed commit": "a5fd4af6ac59f14da083f2456224089469d89539", "Url": "https://api.github.com/repos/srkukarni/incubator-pulsar", "Date": "2018-10-23T22:09:21Z"},
{"Line": "42=>42", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "nl.hu.bscs.privacygame.view.Page.redirect(javax.servlet.http.HttpServletResponse)=>nl.hu.bscs.privacygame.view.Page.forward(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3575/buggy-version/src.main.java.nl.hu.bscs.privacygame.view.LoginServlet.java", "BodyUseAPI": [], "Fixed commit": "d72ae5c9f73a6a6e0bd91347591ba1396246aa95", "Url": "https://api.github.com/repos/Tegrohir/privacy-workshop", "Date": "2018-06-13T11:08:43Z"},
{"Line": "37=>37", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "nl.hu.bscs.privacygame.view.Page.redirect(javax.servlet.http.HttpServletResponse)=>nl.hu.bscs.privacygame.view.Page.forward(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3575/buggy-version/src.main.java.nl.hu.bscs.privacygame.view.LoginServlet.java", "BodyUseAPI": [], "Fixed commit": "d72ae5c9f73a6a6e0bd91347591ba1396246aa95", "Url": "https://api.github.com/repos/Tegrohir/privacy-workshop", "Date": "2018-06-13T11:08:43Z"},
{"Line": "70=>78", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.blockprobe.main.listviewclasses.ScreenBlockList.find(java.lang.String)=>com.blockprobe.main.listviewclasses.ScreenBlockList.find(java.lang.String,com.blockprobe.main.common.HelperFunctions.BlockStatus)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6005/buggy-version/app.src.main.java.com.blockprobe.main.listviewclasses.ScreenBlockList.java", "BodyUseAPI": [], "Fixed commit": "8153ce030d4873cd480a3d184fcbd84882eb3184", "Url": "https://api.github.com/repos/ShashankAnantharam/GGWP", "Date": "2018-09-23T17:09:14Z"},
{"Line": "62=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.blockprobe.main.listviewclasses.ScreenBlockList.remove(((com.blockprobe.main.classes.sectionclasses.ScreenBlock) (object)).getKey())=>com.blockprobe.main.listviewclasses.ScreenBlockList.remove(((com.blockprobe.main.classes.sectionclasses.ScreenBlock) (object)).getKey(),StringtoBStatus(((com.blockprobe.main.classes.sectionclasses.ScreenBlock) (object)).getBlockState()))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6005/buggy-version/app.src.main.java.com.blockprobe.main.listviewclasses.ScreenBlockList.java", "BodyUseAPI": [], "Fixed commit": "8153ce030d4873cd480a3d184fcbd84882eb3184", "Url": "https://api.github.com/repos/ShashankAnantharam/GGWP", "Date": "2018-09-23T17:09:14Z"},
{"Line": "70=>68", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.sleuthkit.autopsy.core.RuntimeProperties.runningInTarget()=>org.sleuthkit.autopsy.core.RuntimeProperties.isRunningInTarget()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5982/buggy-version/Core.src.org.sleuthkit.autopsy.coreutils.PathValidator.java", "BodyUseAPI": [], "Fixed commit": "6d0419550fb9434eee4fd1074b36a300d079a36c", "Url": "https://api.github.com/repos/rishwanth1995/autopsy", "Date": "2018-08-03T14:24:44Z"},
{"Line": "86=>86", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.sql.ResultSet.getNString(int)=>java.sql.ResultSet.getString(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1864/buggy-version/src.main.java.com.ticketapp.dao.implDAO.SalesDao.java", "BodyUseAPI": [], "Fixed commit": "64ecc9cc9eb1198e5a20e1079c35e77890374b07", "Url": "https://api.github.com/repos/Maksimovich1/Ticket", "Date": "2018-01-06T07:47:58Z"},
{"Line": "146=>144", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.selectMyTopicByLimitAndOrder(com.jzqg.forum.controller.Topic)=>com.jzqg.forum.service.TopicService.selectMyTopicByLimitAndOrder(com.jzqg.forum.controller.Topic)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "223=>223", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.UserService.updateLevel(com.jzqg.forum.controller.User)=>com.jzqg.forum.service.UserService.updateLevel(com.jzqg.forum.controller.User)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "309=>313", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.selectTopicByClassify(com.jzqg.forum.controller.Topic)=>com.jzqg.forum.service.TopicService.selectTopicByClassify(com.jzqg.forum.controller.Topic)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "126=>123", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.selectNewTopicByLimitAndOrder(com.jzqg.forum.controller.Topic)=>com.jzqg.forum.service.TopicService.selectNewTopicByLimitAndOrder(com.jzqg.forum.controller.Topic)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "170=>169", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.InfoService.selectInfosByTid(topic.getTid())=>com.jzqg.forum.service.InfoService.selectInfosByTid(topic.getTid())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "103=>99", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.InfoService.selectInfosByTid(topic1.getTid())=>com.jzqg.forum.service.InfoService.selectInfosByTid(topic1.getTid())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "282=>285", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.deleteTopic(topic.getTid())=>com.jzqg.forum.service.TopicService.deleteTopic(topic.getTid())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "216=>216", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.selectPraises(com.jzqg.forum.controller.Praises)=>com.jzqg.forum.service.TopicService.selectPraises(com.jzqg.forum.controller.Praises)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "225=>225", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.updateBrowses(com.jzqg.forum.controller.Topic)=>com.jzqg.forum.service.TopicService.updateBrowses(com.jzqg.forum.controller.Topic)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "129=>126", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.InfoService.selectInfosByTid(topic1.getTid())=>com.jzqg.forum.service.InfoService.selectInfosByTid(topic1.getTid())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "305=>309", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.selectRowsByTid(java.lang.Integer)=>com.jzqg.forum.service.TopicService.selectRowsByTid(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "218=>218", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.updatePraises(topic.getTid())=>com.jzqg.forum.service.TopicService.updatePraises(topic.getTid())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "312=>316", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.InfoService.selectInfosByTid(topic1.getTid())=>com.jzqg.forum.service.InfoService.selectInfosByTid(topic1.getTid())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "148=>146", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.InfoService.selectInfosByTid(topic1.getTid())=>com.jzqg.forum.service.InfoService.selectInfosByTid(topic1.getTid())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "100=>96", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.selectHotTopicByLimitAndOrder(com.jzqg.forum.controller.Topic)=>com.jzqg.forum.service.TopicService.selectHotTopicByLimitAndOrder(com.jzqg.forum.controller.Topic)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "162=>161", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.InfoService.selectTidsByUid(user.getUid())=>com.jzqg.forum.service.InfoService.selectTidsByUid(user.getUid())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "211=>211", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.selectTopicByTid(topic.getTid())=>com.jzqg.forum.service.TopicService.selectTopicByTid(topic.getTid())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "122=>119", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.selectRowsByTid(java.lang.Integer)=>com.jzqg.forum.service.TopicService.selectRowsByTid(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "275=>278", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.deleteTopic(topic.getTid())=>com.jzqg.forum.service.TopicService.deleteTopic(topic.getTid())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "64=>67", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.updateBrowses(com.jzqg.forum.controller.Topic)=>com.jzqg.forum.service.TopicService.updateBrowses(com.jzqg.forum.controller.Topic)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "84=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.lang.String.indexOf(java.lang.String)=>com.jzqg.forum.controller.Topic.setTmess(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "220=>220", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.insertPraises(com.jzqg.forum.controller.Praises)=>com.jzqg.forum.service.TopicService.insertPraises(com.jzqg.forum.controller.Praises)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "252=>254", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.insertTopic(com.jzqg.forum.controller.Topic)=>com.jzqg.forum.service.TopicService.insertTopic(com.jzqg.forum.controller.Topic)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "167=>166", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.jzqg.forum.controller.TopicService.selectTopicByTid(java.lang.Integer)=>com.jzqg.forum.service.TopicService.selectTopicByTid(java.lang.Integer)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5179/buggy-version/src.main.java.com.jzqg.forum.controller.TopicController.java", "BodyUseAPI": [], "Fixed commit": "329f8f326aa51df15d00e13dd5719b90d897db0b", "Url": "https://api.github.com/repos/jzwgit/Forum", "Date": "2018-07-29T09:01:55Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.thoughtworks.jokescheduler.repository.ScheduleRepository.save(com.thoughtworks.jokescheduler.model.Schedule)=>com.thoughtworks.jokescheduler.repository.ScheduleRepository.saveAndFlush(com.thoughtworks.jokescheduler.model.Schedule)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7841/buggy-version/src.main.java.com.thoughtworks.jokescheduler.service.ScheduleService.java", "BodyUseAPI": [], "Fixed commit": "949530b61bf8aa39fade4ded026d2323fade8143", "Url": "https://api.github.com/repos/TisnKu/joke-scheduler-backend", "Date": "2018-03-13T01:58:29Z"},
{"Line": "710=>710", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.sql.ResultSet.getBoolean(java.lang.String)=>com.servinglynk.report.business.BaseBeanMaker.convertStringBoolean(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4807/buggy-version/hmis-hud-reports.src.main.java.com.servinglynk.report.business.BaseBeanMaker.java", "BodyUseAPI": [], "Fixed commit": "10673573d14794789ed9bb007cd41ada32553edf", "Url": "https://api.github.com/repos/servinglynk/hslynk-open-source", "Date": "2018-09-27T03:53:35Z"},
{"Line": "63=>64", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.alibaba.fastjson.JSON.toJSONString(java.lang.reflect.Array)=>com.alibaba.fastjson.JSON.toJSONString(java.util.List)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/922/buggy-version/src.main.java.com.github.ontio.sdk.abi.Parameter.java", "BodyUseAPI": [], "Fixed commit": "c726b3dfbea638b9750b59630f442a02248da241", "Url": "https://api.github.com/repos/backslash47/ontology-java-sdk", "Date": "2018-04-25T01:56:23Z"},
{"Line": "472=>498", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.text.ParseException.printStackTrace()=>org.apache.log4j.Logger.error(java.lang.String,java.lang.Exception)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3772/buggy-version/JCBLScore.src.main.java.cx.myhome.ckoshien.action.GameSummaryAction.java", "BodyUseAPI": [], "Fixed commit": "7913f25103878e0ee3bc63ca6f3b365f862f7715", "Url": "https://api.github.com/repos/ckoshien/JCBLScore", "Date": "2018-02-23T16:04:39Z"},
{"Line": "79=>80", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "properties.get(ClientCustomPropertyConstants.CLIENT_CUSTOM_PROPERTY_PRINCIPAL_ATTRIBUTE_ID).toString()=>lombok.val.toString()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6682/buggy-version/support.cas-server-support-pac4j-authentication.src.main.java.org.apereo.cas.integration.pac4j.authentication.handler.support.AbstractPac4jAuthenticationHandler.java", "BodyUseAPI": [], "Fixed commit": "00e117f33f4cf3600832f81a0a4a795521b12a8f", "Url": "https://api.github.com/repos/apereo/cas", "Date": "2018-09-13T15:08:28Z"},
{"Line": "53=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "fields.ColouredField.Die()=>getThing().Die()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4531/buggy-version/src.fields.ColouredField.java", "BodyUseAPI": [], "Fixed commit": "d0c6bfed090855a3d0b9317074c11b4848926dd2", "Url": "https://api.github.com/repos/szoftProjektLab/sokobanGraphics", "Date": "2018-05-12T19:32:32Z"},
{"Line": "361=>363", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.lang.String.indexOf(char)=>java.lang.String.lastIndexOf(char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7186/buggy-version/TheiaJava.src.com.hirshagarwal.theia.Main.Display.java", "BodyUseAPI": [], "Fixed commit": "c8f4fef3b70b3837a98b4e04e141293313f57708", "Url": "https://api.github.com/repos/hirshagarwal/Theia", "Date": "2018-03-08T13:04:22Z"},
{"Line": "86=>89", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.imageio.ImageIO.createImageOutputStream(java.io.File)=>java.nio.file.Paths.get(com.hirshagarwal.theia.Main.Main.getExportDirectory(imageNum).getPath(),(((com.hirshagarwal.theia.Main.Main.getExportTitle(imageNum)) + ((com.hirshagarwal.theia.Main.Main.getStartingNumber()) + i)) + \".tiff\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7186/buggy-version/TheiaJava.src.com.hirshagarwal.theia.Main.ImageStack.java", "BodyUseAPI": [], "Fixed commit": "c8f4fef3b70b3837a98b4e04e141293313f57708", "Url": "https://api.github.com/repos/hirshagarwal/Theia", "Date": "2018-03-08T13:04:22Z"},
{"Line": "86=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "javax.imageio.ImageIO.createImageOutputStream(java.io.File)=>java.nio.file.Paths.get(com.hirshagarwal.theia.Main.Main.getExportDirectory(imageNum).getPath(),(((com.hirshagarwal.theia.Main.Main.getExportTitle(imageNum)) + ((com.hirshagarwal.theia.Main.Main.getStartingNumber()) + i)) + \".tiff\"))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7186/buggy-version/TheiaJava.src.com.hirshagarwal.theia.Main.ImageStack.java", "BodyUseAPI": [], "Fixed commit": "c8f4fef3b70b3837a98b4e04e141293313f57708", "Url": "https://api.github.com/repos/hirshagarwal/Theia", "Date": "2018-03-08T13:04:22Z"},
{"Line": "86=>89", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.hirshagarwal.theia.Main.Main.getExportDirectory(imageNum).toPath()=>com.hirshagarwal.theia.Main.Main.getExportDirectory(imageNum).getPath()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7186/buggy-version/TheiaJava.src.com.hirshagarwal.theia.Main.ImageStack.java", "BodyUseAPI": [], "Fixed commit": "c8f4fef3b70b3837a98b4e04e141293313f57708", "Url": "https://api.github.com/repos/hirshagarwal/Theia", "Date": "2018-03-08T13:04:22Z"},
{"Line": "74=>82", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "MyMeasure.FibonacciHeap.insert(int,int)=>MyMeasure.FibonacciHeap.insert(int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/149/buggy-version/src.MyMeasure.java", "BodyUseAPI": [], "Fixed commit": "9260896d8f312f36014cf635d4375a72fd7952bb", "Url": "https://api.github.com/repos/MehdiHmidi523/MyHashTable", "Date": "2018-10-20T19:18:20Z"},
{"Line": "203=>203", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.microsoft.aad.adal.AuthContextConfig.setSkipBrokerAccountService(com.microsoft.aad.adal.AuthenticationContext,boolean)=>com.microsoft.aad.adal.AuthContextConfig.setSkipBrokerAccountService(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5006/buggy-version/userappwithbroker.src.main.java.com.microsoft.aad.adal.example.userappwithbroker.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "7b5bb8b643565b0ebbec9807f1e82961f9ac1ed5", "Url": "https://api.github.com/repos/AzureAD/azure-activedirectory-library-for-android", "Date": "2018-01-30T17:16:28Z"},
{"Line": "62=>62", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "http.authorizeRequests().antMatchers(\"/**\").permitAll().anyRequest().authenticated().and().logout().permitAll().and().csrf().ignoringAntMatchers(java.lang.String)=>http.authorizeRequests().antMatchers(\"/**\").permitAll().anyRequest().authenticated().and().logout().permitAll().and().csrf().disable()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4120/buggy-version/trace.src.main.java.com.PATHochuan.config.WebSecurityConfigurer.java", "BodyUseAPI": [], "Fixed commit": "cfa095f32cf29f719204fc4194d0f5e97e87a492", "Url": "https://api.github.com/repos/wang1365/trace-platform", "Date": "2018-09-19T10:42:25Z"},
{"Line": "24=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.springframework.web.servlet.config.annotation.CorsRegistry.addMapping(java.lang.String)=>registry.addMapping(\"/web/**\").allowedHeaders(\"*\").allowedMethods(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4120/buggy-version/trace.src.main.java.com.PATHochuan.config.WebMvcConfigurer.java", "BodyUseAPI": [], "Fixed commit": "cfa095f32cf29f719204fc4194d0f5e97e87a492", "Url": "https://api.github.com/repos/wang1365/trace-platform", "Date": "2018-09-19T10:42:25Z"},
{"Line": "24=>23", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "registry.addMapping(\"/admin/**\").allowedOrigins(java.lang.String)=>registry.addMapping(\"/web/**\").allowedHeaders(\"*\").allowedMethods(\"*\").allowedOrigins(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4120/buggy-version/trace.src.main.java.com.PATHochuan.config.WebMvcConfigurer.java", "BodyUseAPI": [], "Fixed commit": "cfa095f32cf29f719204fc4194d0f5e97e87a492", "Url": "https://api.github.com/repos/wang1365/trace-platform", "Date": "2018-09-19T10:42:25Z"},
{"Line": "43=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap.get(java.lang.String)=>java.lang.String.valueOf(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4918/buggy-version/src.main.java.eu.elixir.ega.ebi.reencryptionmvc.service.internal.LocalEgaKeyServiceImpl.java", "BodyUseAPI": [], "Fixed commit": "e21e40b68431e50100407466029409f8f9d72d7f", "Url": "https://api.github.com/repos/EGA-archive/ega-res", "Date": "2018-04-09T08:36:57Z"},
{"Line": "55=>55", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "ru.terrakok.cicerone.Router.navigateTo(Screens.MESSAGES_SCREEN,im.adamant.android.ui.entities.Chat)=>ru.terrakok.cicerone.Router.navigateTo(Screens.MESSAGES_SCREEN,addressEntity.getAddress())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2296/buggy-version/app.src.main.java.im.adamant.android.presenters.CreateChatPresenter.java", "BodyUseAPI": [], "Fixed commit": "580d712860ceb654b6325f63c0fe5191d28d94ca", "Url": "https://api.github.com/repos/Adamant-im/adamant-android", "Date": "2018-08-24T17:57:44Z"},
{"Line": "55=>55", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "ru.terrakok.cicerone.Router.navigateTo(Screens.MESSAGES_SCREEN,im.adamant.android.ui.entities.Chat)=>AdamantAddressProcessor.AdamantAddressEntity.getAddress()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2296/buggy-version/app.src.main.java.im.adamant.android.presenters.CreateChatPresenter.java", "BodyUseAPI": [], "Fixed commit": "580d712860ceb654b6325f63c0fe5191d28d94ca", "Url": "https://api.github.com/repos/Adamant-im/adamant-android", "Date": "2018-08-24T17:57:44Z"},
{"Line": "134=>134", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "android.os.Bundle.putSerializable(MessagesScreen.ARG_CHAT,((java.io.Serializable) (forward.getTransitionData())))=>android.os.Bundle.putString(MessagesScreen.ARG_CHAT,((java.lang.String) (forward.getTransitionData())))", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2296/buggy-version/app.src.main.java.im.adamant.android.ui.CreateChatScreen.java", "BodyUseAPI": [], "Fixed commit": "580d712860ceb654b6325f63c0fe5191d28d94ca", "Url": "https://api.github.com/repos/Adamant-im/adamant-android", "Date": "2018-08-24T17:57:44Z"},
{"Line": "150=>150", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "application.TextField.setText(java.lang.String)=>application.Label.setText(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7025/buggy-version/src.application.ViewProfile_View_Controller.java", "BodyUseAPI": [], "Fixed commit": "94892c7d739074889ce79488c0b9d8c1b9a92ac7", "Url": "https://api.github.com/repos/JohnPaul44/cen3031project", "Date": "2018-04-12T20:02:56Z"},
{"Line": "135=>135", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "application.TextField.setVisible(boolean)=>application.Label.setVisible(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7025/buggy-version/src.application.ViewProfile_View_Controller.java", "BodyUseAPI": [], "Fixed commit": "94892c7d739074889ce79488c0b9d8c1b9a92ac7", "Url": "https://api.github.com/repos/JohnPaul44/cen3031project", "Date": "2018-04-12T20:02:56Z"},
{"Line": "124=>124", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "application.TextField.setVisible(boolean)=>application.Label.setVisible(boolean)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7025/buggy-version/src.application.ViewProfile_View_Controller.java", "BodyUseAPI": [], "Fixed commit": "94892c7d739074889ce79488c0b9d8c1b9a92ac7", "Url": "https://api.github.com/repos/JohnPaul44/cen3031project", "Date": "2018-04-12T20:02:56Z"},
{"Line": "14=>13", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "NetworkRegistry.INSTANCE.newSimpleChannel(ExtremeCobbleGeneratorConstants.MODID)=>NetworkRegistry.INSTANCE.newSimpleChannel(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/810/buggy-version/src.main.java.info.u_team.extreme_cobble_generator.network.ExtremeCobbleGeneratorNetworkHandler.java", "BodyUseAPI": [], "Fixed commit": "6dabefb8f8a22a047bb038829af3fdf0342f7ee9", "Url": "https://api.github.com/repos/MC-U-Team/Extreme-Cobble-Generator", "Date": "2018-06-06T20:22:00Z"},
{"Line": "75=>75", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "io.delimeat.show.entity.Show.getEpisodes()=>io.delimeat.show.ShowService.readAllEpisodes(java.lang.Long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1211/buggy-version/delimeat-jaxrs.src.main.java.io.delimeat.rest.ShowResource.java", "BodyUseAPI": [], "Fixed commit": "b2d8a330f38f13ec24692d6e6cc7c763bf26727f", "Url": "https://api.github.com/repos/delimeat/delimeat", "Date": "2018-02-28T00:00:00Z"},
{"Line": "370=>367", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.springframework.boot.actuate.session.SessionsEndpoint.sessionsForUsername(<nulltype>)=>applicationContext.getBean(org.springframework.boot.actuate.session.SessionsEndpoint.class).sessionsForUsername(<nulltype>)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5450/buggy-version/starter.src.main.java.com.github.fonimus.ssh.shell.commands.actuator.ActuatorCommand.java", "BodyUseAPI": [], "Fixed commit": "d5d2872e0853bd0c137606d4a69f63267b90386a", "Url": "https://api.github.com/repos/fonimus/ssh-shell-spring-boot", "Date": "2018-03-16T14:36:35Z"},
{"Line": "370=>367", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.springframework.boot.actuate.session.SessionsEndpoint.sessionsForUsername(<nulltype>)=>org.springframework.context.ApplicationContext.getBean(java.lang.Class)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5450/buggy-version/starter.src.main.java.com.github.fonimus.ssh.shell.commands.actuator.ActuatorCommand.java", "BodyUseAPI": [], "Fixed commit": "d5d2872e0853bd0c137606d4a69f63267b90386a", "Url": "https://api.github.com/repos/fonimus/ssh-shell-spring-boot", "Date": "2018-03-16T14:36:35Z"},
{"Line": "51=>54", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.squareup.picasso.Picasso.with(this).load(sandwich.getImage()).into(android.widget.ImageView)=>com.squareup.picasso.Picasso.with(this).load(sandwich.getImage()).into(android.widget.ImageView,com.squareup.picasso.Callback)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3712/buggy-version/app.src.main.java.com.udacity.sandwichclub.DetailActivity.java", "BodyUseAPI": [], "Fixed commit": "2421308b94a6d537808f5f87397b09a081c7dd89", "Url": "https://api.github.com/repos/dambadipudi/UAND-1-Sandwich-Club", "Date": "2018-04-28T23:26:34Z"},
{"Line": "93=>95", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.gank.android.mvc.events.EventDispatcherUtils.addListener(getReceiverIDCard(),RequestEventID.ADD,com.gank.android.mvc.events.DataEventListener<cn.gank.androidlibs.httphelper.Result>)=>com.gank.android.mvc.events.EventDispatcherUtils.addListener(getReceiverIDCard(),RequestEventID.ADD,com.gank.android.mvc.events.NoticeEventListener)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3743/buggy-version/Android.app.src.main.java.com.gank.android.app.ui.mine.CommitActivity.java", "BodyUseAPI": [], "Fixed commit": "3440e6e4043214f9f9aff9ed43d70a5b12bb7367", "Url": "https://api.github.com/repos/shijunxing0130/gank", "Date": "2018-02-13T04:00:14Z"},
{"Line": "98=>100", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.gank.android.mvc.events.DataEvent<cn.gank.androidlibs.httphelper.Result>.getResultData()=>com.gank.android.mvc.events.BaseEvent.getMsg()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3743/buggy-version/Android.app.src.main.java.com.gank.android.app.ui.mine.CommitActivity.java", "BodyUseAPI": [], "Fixed commit": "3440e6e4043214f9f9aff9ed43d70a5b12bb7367", "Url": "https://api.github.com/repos/shijunxing0130/gank", "Date": "2018-02-13T04:00:14Z"},
{"Line": "80=>82", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "org.springframework.security.crypto.password.PasswordEncoder.matches(java.lang.String,user.getPassword())=>org.springframework.security.crypto.password.PasswordEncoder.matches(java.lang.String,java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1718/buggy-version/Assignment4.src.main.java.nhu.novahub.assignment4.controller.UserController.java", "BodyUseAPI": [], "Fixed commit": "f1f8defa9afe5ec88dae717c1809e1df5dd41d57", "Url": "https://api.github.com/repos/novahub-internship-2017-web/BE_2017_NHU", "Date": "2018-04-24T11:07:42Z"},
{"Line": "89=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7925/buggy-version/app.src.at-huynguyen.java.vn.asiantech.internship.ItemDatabaseFragment.java", "BodyUseAPI": [], "Fixed commit": "db3574e46c82df034c3ed9d0eeb348aa38cd8b70", "Url": "https://api.github.com/repos/akaj-team/intern-18-spring", "Date": "2018-05-15T06:44:45Z"},
{"Line": "89=>89", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.lang.String.equals(java.lang.String)=>java.lang.String.isEmpty()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7925/buggy-version/app.src.at-huynguyen.java.vn.asiantech.internship.ItemDatabaseFragment.java", "BodyUseAPI": [], "Fixed commit": "db3574e46c82df034c3ed9d0eeb348aa38cd8b70", "Url": "https://api.github.com/repos/akaj-team/intern-18-spring", "Date": "2018-05-15T06:44:45Z"},
{"Line": "23=>23", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "com.intellij.psi.PsiPackage.getName()=>com.intellij.psi.PsiPackage.getQualifiedName()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4199/buggy-version/src.mw.unitv.utils.PackageDetector.java", "BodyUseAPI": [], "Fixed commit": "1cb52723044b837243e514f2522a394f39f774c8", "Url": "https://api.github.com/repos/MatWein/UnitVisualizer", "Date": "2018-08-06T21:50:01Z"},
{"Line": "23=>23", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.util.Optional.ofNullable(sourcePackage.getName())=>java.util.Optional.of(sourcePackage.getQualifiedName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4199/buggy-version/src.mw.unitv.utils.PackageDetector.java", "BodyUseAPI": [], "Fixed commit": "1cb52723044b837243e514f2522a394f39f774c8", "Url": "https://api.github.com/repos/MatWein/UnitVisualizer", "Date": "2018-08-06T21:50:01Z"},
{"Line": "145=>145", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.HashMap<java.lang.String, java.lang.Integer>.put(java.lang.String,int)=>java.util.ArrayList<java.lang.String>.add(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8042/buggy-version/src.main.java.ComputerPlayer.java", "BodyUseAPI": [], "Fixed commit": "38f83a5fd4d9f0cbeb51c450ce7b4a4e8d913e6b", "Url": "https://api.github.com/repos/Epowerj/pandemic", "Date": "2018-06-29T18:08:51Z"},
{"Line": "54=>54", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "org.apache.flume.Context.getString(SqlSourceUtil.MODEL_INSTANCE_KEY)=>org.apache.flume.Context.getString(SqlSourceUtil.MODEL_SCHEMA_KEY)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/5183/buggy-version/hydra.src.main.java.com.github.codegerm.hydra.trigger.AbstractTaskTrigger.java", "BodyUseAPI": [], "Fixed commit": "2fc34e81110aada475d77f8b341293a838444108", "Url": "https://api.github.com/repos/CodeGerm/Hydra", "Date": "2018-02-09T06:04:19Z"},
{"Line": "59=>61", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.github.maxopoly.MemeMana.MemeManaDAO.logManaUse(com.github.maxopoly.MemeMana.command.CmdManaUpgrade.dao.getCreatorUUID(pouch.ownerId, l),player.getUniqueId(),pearl.getPlayerId(),java.lang.Integer,boolean)=>com.github.maxopoly.MemeMana.MemeManaDAO.logManaUse(com.github.maxopoly.MemeMana.command.CmdManaUpgrade.dao.getCreatorUUID(pouch.ownerId, l),player.getUniqueId(),pearl.getPlayerId(),java.lang.Integer,boolean,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3405/buggy-version/src.main.java.com.github.maxopoly.MemeMana.command.CmdManaUpgrade.java", "BodyUseAPI": [], "Fixed commit": "6f76515f2f354ddd5b1bea8b04649bb35081f356", "Url": "https://api.github.com/repos/Lazersmoke/MemeMana", "Date": "2018-02-24T03:48:30Z"},
{"Line": "90=>90", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.sql.ResultSet.first()=>java.sql.ResultSet.next()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3405/buggy-version/src.main.java.com.github.maxopoly.MemeMana.MemeManaDAO.java", "BodyUseAPI": [], "Fixed commit": "6f76515f2f354ddd5b1bea8b04649bb35081f356", "Url": "https://api.github.com/repos/Lazersmoke/MemeMana", "Date": "2018-02-24T03:48:30Z"},
{"Line": "68=>70", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.github.maxopoly.MemeMana.MemeManaDAO.logManaUse(com.github.maxopoly.MemeMana.command.CmdManaRefill.dao.getCreatorUUID(pouch.ownerId, l),player.getUniqueId(),pearl.getPlayerId(),java.lang.Integer,boolean)=>com.github.maxopoly.MemeMana.MemeManaDAO.logManaUse(com.github.maxopoly.MemeMana.command.CmdManaRefill.dao.getCreatorUUID(pouch.ownerId, l),player.getUniqueId(),pearl.getPlayerId(),java.lang.Integer,boolean,long)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3405/buggy-version/src.main.java.com.github.maxopoly.MemeMana.command.CmdManaRefill.java", "BodyUseAPI": [], "Fixed commit": "6f76515f2f354ddd5b1bea8b04649bb35081f356", "Url": "https://api.github.com/repos/Lazersmoke/MemeMana", "Date": "2018-02-24T03:48:30Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.camunda.bpm.engine.impl.persistence.entity.HistoricActivityInstanceEntity.getId()=>org.camunda.bpm.engine.impl.history.event.HistoricActivityInstanceEventEntity.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1364/buggy-version/event-consumer.src.main.java.de.mhens.events.eventconsumer.integration.activityinstance.HistoricActivityInstanceTransformer.java", "BodyUseAPI": [], "Fixed commit": "6c1354fdd405515d2e9491114d6aa4da1e02758e", "Url": "https://api.github.com/repos/EinsZwo2012/processevents", "Date": "2018-07-09T07:39:59Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.camunda.bpm.engine.impl.persistence.entity.HistoricActivityInstanceEntity.getStartTime()=>org.camunda.bpm.engine.impl.history.event.HistoricActivityInstanceEventEntity.getStartTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1364/buggy-version/event-consumer.src.main.java.de.mhens.events.eventconsumer.integration.activityinstance.HistoricActivityInstanceTransformer.java", "BodyUseAPI": [], "Fixed commit": "6c1354fdd405515d2e9491114d6aa4da1e02758e", "Url": "https://api.github.com/repos/EinsZwo2012/processevents", "Date": "2018-07-09T07:39:59Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.camunda.bpm.engine.impl.persistence.entity.HistoricActivityInstanceEntity.getEndTime()=>org.camunda.bpm.engine.impl.history.event.HistoricActivityInstanceEventEntity.getEndTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1364/buggy-version/event-consumer.src.main.java.de.mhens.events.eventconsumer.integration.activityinstance.HistoricActivityInstanceTransformer.java", "BodyUseAPI": [], "Fixed commit": "6c1354fdd405515d2e9491114d6aa4da1e02758e", "Url": "https://api.github.com/repos/EinsZwo2012/processevents", "Date": "2018-07-09T07:39:59Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.camunda.bpm.engine.impl.persistence.entity.HistoricActivityInstanceEntity.getActivityId()=>org.camunda.bpm.engine.impl.history.event.HistoricActivityInstanceEventEntity.getActivityId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1364/buggy-version/event-consumer.src.main.java.de.mhens.events.eventconsumer.integration.activityinstance.HistoricActivityInstanceTransformer.java", "BodyUseAPI": [], "Fixed commit": "6c1354fdd405515d2e9491114d6aa4da1e02758e", "Url": "https://api.github.com/repos/EinsZwo2012/processevents", "Date": "2018-07-09T07:39:59Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.camunda.bpm.engine.impl.persistence.entity.HistoricActivityInstanceEntity.getProcessInstanceId()=>org.camunda.bpm.engine.impl.history.event.HistoricActivityInstanceEventEntity.getProcessInstanceId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1364/buggy-version/event-consumer.src.main.java.de.mhens.events.eventconsumer.integration.activityinstance.HistoricActivityInstanceTransformer.java", "BodyUseAPI": [], "Fixed commit": "6c1354fdd405515d2e9491114d6aa4da1e02758e", "Url": "https://api.github.com/repos/EinsZwo2012/processevents", "Date": "2018-07-09T07:39:59Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.camunda.bpm.engine.impl.persistence.entity.HistoricTaskInstanceEntity.getId()=>org.camunda.bpm.engine.impl.history.event.HistoricTaskInstanceEventEntity.getId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1364/buggy-version/event-consumer.src.main.java.de.mhens.events.eventconsumer.integration.taskinstance.HistoricTaskInstanceTransformer.java", "BodyUseAPI": [], "Fixed commit": "6c1354fdd405515d2e9491114d6aa4da1e02758e", "Url": "https://api.github.com/repos/EinsZwo2012/processevents", "Date": "2018-07-09T07:39:59Z"},
{"Line": "31=>31", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.camunda.bpm.engine.impl.persistence.entity.HistoricTaskInstanceEntity.getProcessInstanceId()=>org.camunda.bpm.engine.impl.history.event.HistoricTaskInstanceEventEntity.getProcessInstanceId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1364/buggy-version/event-consumer.src.main.java.de.mhens.events.eventconsumer.integration.taskinstance.HistoricTaskInstanceTransformer.java", "BodyUseAPI": [], "Fixed commit": "6c1354fdd405515d2e9491114d6aa4da1e02758e", "Url": "https://api.github.com/repos/EinsZwo2012/processevents", "Date": "2018-07-09T07:39:59Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.camunda.bpm.engine.impl.persistence.entity.HistoricTaskInstanceEntity.getTaskId()=>org.camunda.bpm.engine.impl.history.event.HistoricTaskInstanceEventEntity.getTaskId()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1364/buggy-version/event-consumer.src.main.java.de.mhens.events.eventconsumer.integration.taskinstance.HistoricTaskInstanceTransformer.java", "BodyUseAPI": [], "Fixed commit": "6c1354fdd405515d2e9491114d6aa4da1e02758e", "Url": "https://api.github.com/repos/EinsZwo2012/processevents", "Date": "2018-07-09T07:39:59Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.camunda.bpm.engine.impl.persistence.entity.HistoricTaskInstanceEntity.getEndTime()=>org.camunda.bpm.engine.impl.history.event.HistoricTaskInstanceEventEntity.getEndTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1364/buggy-version/event-consumer.src.main.java.de.mhens.events.eventconsumer.integration.taskinstance.HistoricTaskInstanceTransformer.java", "BodyUseAPI": [], "Fixed commit": "6c1354fdd405515d2e9491114d6aa4da1e02758e", "Url": "https://api.github.com/repos/EinsZwo2012/processevents", "Date": "2018-07-09T07:39:59Z"},
{"Line": "32=>32", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "org.camunda.bpm.engine.impl.persistence.entity.HistoricTaskInstanceEntity.getStartTime()=>org.camunda.bpm.engine.impl.history.event.HistoricTaskInstanceEventEntity.getStartTime()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/1364/buggy-version/event-consumer.src.main.java.de.mhens.events.eventconsumer.integration.taskinstance.HistoricTaskInstanceTransformer.java", "BodyUseAPI": [], "Fixed commit": "6c1354fdd405515d2e9491114d6aa4da1e02758e", "Url": "https://api.github.com/repos/EinsZwo2012/processevents", "Date": "2018-07-09T07:39:59Z"},
{"Line": "368=>364", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "org.wordpress.android.ui.prefs.TagListActivity.termExists(term.getName())=>org.wordpress.android.ui.prefs.TagListActivity.tagExists(term.getName())", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2367/buggy-version/WordPress.src.main.java.org.wordpress.android.ui.prefs.TagListActivity.java", "BodyUseAPI": [], "Fixed commit": "2e29962507452724c4d405e00dbe8dfa1984db5f", "Url": "https://api.github.com/repos/wordpress-mobile/WordPress-Android", "Date": "2018-01-03T18:24:37Z"},
{"Line": "34=>34", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "rowdy.nodes.expression.BoolOr.get(rowdy.nodes.expression.BOOL_TERM)=>rowdy.nodes.expression.BoolOr.getLeftMost()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3425/buggy-version/src.rowdy.nodes.expression.BoolOr.java", "BodyUseAPI": [], "Fixed commit": "265682fa167fd52a5a1a39aaf7d1c24219ec1acd", "Url": "https://api.github.com/repos/redferret/rowdy", "Date": "2018-02-28T23:35:00Z"},
{"Line": "79=>79", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "java.util.List<java.util.List<T>>.get(int)=>java.util.List<T>.get(int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/6247/buggy-version/src.tictactoe.StructurePlateau.java", "BodyUseAPI": [], "Fixed commit": "3700cd341336b4123d77c6e489e1e7573deb85e9", "Url": "https://api.github.com/repos/SUPERETDUPER/Tic-Tac-Toe", "Date": "2018-04-18T14:54:26Z"},
{"Line": "12=>12", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[MethodChange]", "Content": "java.lang.String.length()=>java.lang.String.lastIndexOf(char)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/537/buggy-version/MyMusic-Server.src.site.iway.mymusic.protocol.data.Song.java", "BodyUseAPI": [], "Fixed commit": "7e9e42a1325e2a3c5f9c8cb415d606088e4c0581", "Url": "https://api.github.com/repos/iWay7/MyMusic", "Date": "2018-09-28T13:44:37Z"},
{"Line": "10=>10", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "java.lang.String.indexOf(char)=>java.lang.String.indexOf(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/537/buggy-version/MyMusic-Server.src.site.iway.mymusic.protocol.data.Song.java", "BodyUseAPI": [], "Fixed commit": "7e9e42a1325e2a3c5f9c8cb415d606088e4c0581", "Url": "https://api.github.com/repos/iWay7/MyMusic", "Date": "2018-09-28T13:44:37Z"},
{"Line": "30=>30", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "new pinkpanthers.pinkshelters.MockDB(\"db_username\", \"db_password\", \"db_database\")=>new pinkpanthers.pinkshelters.Db(\"pinkpanther\", \"PinkPantherReturns!\", \"pinkpanther\")", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3059/buggy-version/PinkShelters.app.src.main.java.pinkpanthers.pinkshelters.LoginActivity.java", "BodyUseAPI": [], "Fixed commit": "580877476a9c174eab8a132eee2a4654ead93ba4", "Url": "https://api.github.com/repos/MrTrai/pink-panthers", "Date": "2018-02-24T22:59:35Z"},
{"Line": "56=>56", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "java.io.IOException.getMessage()=>java.io.IOException.getLocalizedMessage()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/3820/buggy-version/master.src.main.java.com.zostio.master.MasterServer.java", "BodyUseAPI": [], "Fixed commit": "01215a9cc32ab6f04b15ec491d642eb9efbde8a1", "Url": "https://api.github.com/repos/FiraInc/Master", "Date": "2018-10-04T15:08:13Z"},
{"Line": "43=>44", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "client.close()=>java.io.BufferedOutputStream.close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7422/buggy-version/client.java", "BodyUseAPI": [], "Fixed commit": "d3a6a5a26893e36f463871a6cdc454b8dc16501d", "Url": "https://api.github.com/repos/lhwalsh/CS380-Final-Project", "Date": "2018-03-03T21:40:31Z"},
{"Line": "38=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "client.flush()=>java.io.BufferedOutputStream.flush()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7422/buggy-version/client.java", "BodyUseAPI": [], "Fixed commit": "d3a6a5a26893e36f463871a6cdc454b8dc16501d", "Url": "https://api.github.com/repos/lhwalsh/CS380-Final-Project", "Date": "2018-03-03T21:40:31Z"},
{"Line": "37=>38", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "client.write(byte[],int,int)=>java.io.BufferedOutputStream.write(byte[],int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7422/buggy-version/client.java", "BodyUseAPI": [], "Fixed commit": "d3a6a5a26893e36f463871a6cdc454b8dc16501d", "Url": "https://api.github.com/repos/lhwalsh/CS380-Final-Project", "Date": "2018-03-03T21:40:31Z"},
{"Line": "42=>43", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "FileOutputStream.close()=>java.io.FileOutputStream.close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7422/buggy-version/client.java", "BodyUseAPI": [], "Fixed commit": "d3a6a5a26893e36f463871a6cdc454b8dc16501d", "Url": "https://api.github.com/repos/lhwalsh/CS380-Final-Project", "Date": "2018-03-03T21:40:31Z"},
{"Line": "34=>34", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "OutputStream.flush()=>java.io.OutputStream.flush()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7422/buggy-version/server.java", "BodyUseAPI": [], "Fixed commit": "d3a6a5a26893e36f463871a6cdc454b8dc16501d", "Url": "https://api.github.com/repos/lhwalsh/CS380-Final-Project", "Date": "2018-03-03T21:40:31Z"},
{"Line": "33=>33", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "OutputStream.write(byte[],int,int)=>java.io.OutputStream.write(byte[],int,int)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7422/buggy-version/server.java", "BodyUseAPI": [], "Fixed commit": "d3a6a5a26893e36f463871a6cdc454b8dc16501d", "Url": "https://api.github.com/repos/lhwalsh/CS380-Final-Project", "Date": "2018-03-03T21:40:31Z"},
{"Line": "39=>39", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "OutputStream.close()=>java.io.OutputStream.close()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7422/buggy-version/server.java", "BodyUseAPI": [], "Fixed commit": "d3a6a5a26893e36f463871a6cdc454b8dc16501d", "Url": "https://api.github.com/repos/lhwalsh/CS380-Final-Project", "Date": "2018-03-03T21:40:31Z"},
{"Line": "32=>32", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[]", "Content": "java.io.PrintStream.println(((((\"Sending \" + (driver.FILE_TO_SEND)) + \"(\") + (mybitearray.length)) + \" bytes)\"))=>java.io.PrintStream.println(java.lang.String)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/7422/buggy-version/server.java", "BodyUseAPI": [], "Fixed commit": "d3a6a5a26893e36f463871a6cdc454b8dc16501d", "Url": "https://api.github.com/repos/lhwalsh/CS380-Final-Project", "Date": "2018-03-03T21:40:31Z"},
{"Line": "154=>154", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.ben.colorsensorrgbstreamer.MainActivity.findViewById(R.id.textView4)=>com.example.ben.colorsensorrgbstreamer.MainActivity.findViewById(R.id.datatext)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4549/buggy-version/app.src.main.java.com.example.ben.colorsensorrgbstreamer.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "b357ce6e80b6bfaff1204968b522f4fee28386de", "Url": "https://api.github.com/repos/CptJamesCook/ColorSensorRGBStreamer12Well", "Date": "2018-05-01T20:34:15Z"},
{"Line": "155=>155", "parseTypeFail": "sucess", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[ArgChange]", "Content": "com.example.ben.colorsensorrgbstreamer.MainActivity.findViewById(R.id.textView5)=>com.example.ben.colorsensorrgbstreamer.MainActivity.findViewById(R.id.representativetext)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/4549/buggy-version/app.src.main.java.com.example.ben.colorsensorrgbstreamer.MainActivity.java", "BodyUseAPI": [], "Fixed commit": "b357ce6e80b6bfaff1204968b522f4fee28386de", "Url": "https://api.github.com/repos/CptJamesCook/ColorSensorRGBStreamer12Well", "Date": "2018-05-01T20:34:15Z"},
{"Line": "57=>53", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[NameChange]", "Content": "p.getPlayer().isOnline()=>team.getPlayers().size()", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/8225/buggy-version/src.main.java.cz.HackerGamingCZ.HackerTools.listeners.PlayerLeave.java", "BodyUseAPI": [], "Fixed commit": "8d9b90b6b0484f3abc8c8416311370aaf74caf33", "Url": "https://api.github.com/repos/TomasCZE7/HackerTools", "Date": "2018-05-30T14:16:16Z"},
{"Line": "525=>525", "parseTypeFail": "fail", "Pattern": "Method=>Method", "RetCheckAPI": [], "Type": "Update", "BugDetectionTag": "[Reciever]", "Content": "com.orientechnologies.orient.core.metadata.schema.OSchemaShared.setInternalStatus(ORecordElement.STATUS.UNMARSHALLING)=>com.orientechnologies.orient.core.record.impl.ODocument.setInternalStatus(ORecordElement.STATUS.UNMARSHALLING)", "FileName": "/home/PATH/BugDetectionProject/3Clone/NewDown2018/All/V169/2337/buggy-version/core.src.main.java.com.orientechnologies.orient.core.metadata.schema.OSchemaShared.java", "BodyUseAPI": [], "Fixed commit": "29c4a97cd6ebf9116d1796b7b4a873a06f60f9c2", "Url": "https://api.github.com/repos/orientechnologies/orientdb", "Date": "2018-10-11T15:53:04Z"}]}
